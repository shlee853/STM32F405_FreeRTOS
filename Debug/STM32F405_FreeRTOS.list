
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011880  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e9c  08011a10  08011a10  00021a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128ac  080128ac  00030f74  2**0
                  CONTENTS
  4 .ARM          00000008  080128ac  080128ac  000228ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128b4  080128b4  00030f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080128b4  080128b4  000228b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080128b8  080128b8  000228b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000384  20000000  080128bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       00000bc8  20000384  08012c40  00030384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  20000f4c  08013808  00030f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  00030f74  2**0
                  CONTENTS
 12 .bss          000077dc  20000f74  20000f74  00030f74  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  20008750  20008750  00030f74  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00030f74  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00030fa4  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002bf88  00000000  00000000  00030fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000076d8  00000000  00000000  0005cf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002218  00000000  00000000  00064648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000019e0  00000000  00000000  00066860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000c713  00000000  00000000  00068240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002cc75  00000000  00000000  00074953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000e6597  00000000  00000000  000a15c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00009ce4  00000000  00000000  00187b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  00191844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000f74 	.word	0x20000f74
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080119f8 	.word	0x080119f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000f78 	.word	0x20000f78
 80001cc:	080119f8 	.word	0x080119f8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83a 	bl	8000d00 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_f2lz>:
 8000c98:	ee07 0a90 	vmov	s15, r0
 8000c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca4:	d401      	bmi.n	8000caa <__aeabi_f2lz+0x12>
 8000ca6:	f000 b80b 	b.w	8000cc0 <__aeabi_f2ulz>
 8000caa:	eef1 7a67 	vneg.f32	s15, s15
 8000cae:	b508      	push	{r3, lr}
 8000cb0:	ee17 0a90 	vmov	r0, s15
 8000cb4:	f000 f804 	bl	8000cc0 <__aeabi_f2ulz>
 8000cb8:	4240      	negs	r0, r0
 8000cba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbe:	bd08      	pop	{r3, pc}

08000cc0 <__aeabi_f2ulz>:
 8000cc0:	b5d0      	push	{r4, r6, r7, lr}
 8000cc2:	f7ff fc51 	bl	8000568 <__aeabi_f2d>
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__aeabi_f2ulz+0x38>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4606      	mov	r6, r0
 8000ccc:	460f      	mov	r7, r1
 8000cce:	f7ff fca3 	bl	8000618 <__aeabi_dmul>
 8000cd2:	f000 f97b 	bl	8000fcc <__aeabi_d2uiz>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	f7ff fc24 	bl	8000524 <__aeabi_ui2d>
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <__aeabi_f2ulz+0x3c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f7ff fc9a 	bl	8000618 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4630      	mov	r0, r6
 8000cea:	4639      	mov	r1, r7
 8000cec:	f7ff fadc 	bl	80002a8 <__aeabi_dsub>
 8000cf0:	f000 f96c 	bl	8000fcc <__aeabi_d2uiz>
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf8:	3df00000 	.word	0x3df00000
 8000cfc:	41f00000 	.word	0x41f00000

08000d00 <__udivmoddi4>:
 8000d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d04:	9e08      	ldr	r6, [sp, #32]
 8000d06:	460d      	mov	r5, r1
 8000d08:	4604      	mov	r4, r0
 8000d0a:	460f      	mov	r7, r1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d14a      	bne.n	8000da6 <__udivmoddi4+0xa6>
 8000d10:	428a      	cmp	r2, r1
 8000d12:	4694      	mov	ip, r2
 8000d14:	d965      	bls.n	8000de2 <__udivmoddi4+0xe2>
 8000d16:	fab2 f382 	clz	r3, r2
 8000d1a:	b143      	cbz	r3, 8000d2e <__udivmoddi4+0x2e>
 8000d1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d20:	f1c3 0220 	rsb	r2, r3, #32
 8000d24:	409f      	lsls	r7, r3
 8000d26:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2a:	4317      	orrs	r7, r2
 8000d2c:	409c      	lsls	r4, r3
 8000d2e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d32:	fa1f f58c 	uxth.w	r5, ip
 8000d36:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d3a:	0c22      	lsrs	r2, r4, #16
 8000d3c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d44:	fb01 f005 	mul.w	r0, r1, r5
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	d90a      	bls.n	8000d62 <__udivmoddi4+0x62>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d54:	f080 811c 	bcs.w	8000f90 <__udivmoddi4+0x290>
 8000d58:	4290      	cmp	r0, r2
 8000d5a:	f240 8119 	bls.w	8000f90 <__udivmoddi4+0x290>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4462      	add	r2, ip
 8000d62:	1a12      	subs	r2, r2, r0
 8000d64:	b2a4      	uxth	r4, r4
 8000d66:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d6a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d72:	fb00 f505 	mul.w	r5, r0, r5
 8000d76:	42a5      	cmp	r5, r4
 8000d78:	d90a      	bls.n	8000d90 <__udivmoddi4+0x90>
 8000d7a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d82:	f080 8107 	bcs.w	8000f94 <__udivmoddi4+0x294>
 8000d86:	42a5      	cmp	r5, r4
 8000d88:	f240 8104 	bls.w	8000f94 <__udivmoddi4+0x294>
 8000d8c:	4464      	add	r4, ip
 8000d8e:	3802      	subs	r0, #2
 8000d90:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d94:	1b64      	subs	r4, r4, r5
 8000d96:	2100      	movs	r1, #0
 8000d98:	b11e      	cbz	r6, 8000da2 <__udivmoddi4+0xa2>
 8000d9a:	40dc      	lsrs	r4, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e9c6 4300 	strd	r4, r3, [r6]
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0xbc>
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	f000 80ed 	beq.w	8000f8a <__udivmoddi4+0x28a>
 8000db0:	2100      	movs	r1, #0
 8000db2:	e9c6 0500 	strd	r0, r5, [r6]
 8000db6:	4608      	mov	r0, r1
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	fab3 f183 	clz	r1, r3
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	d149      	bne.n	8000e58 <__udivmoddi4+0x158>
 8000dc4:	42ab      	cmp	r3, r5
 8000dc6:	d302      	bcc.n	8000dce <__udivmoddi4+0xce>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	f200 80f8 	bhi.w	8000fbe <__udivmoddi4+0x2be>
 8000dce:	1a84      	subs	r4, r0, r2
 8000dd0:	eb65 0203 	sbc.w	r2, r5, r3
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	4617      	mov	r7, r2
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d0e2      	beq.n	8000da2 <__udivmoddi4+0xa2>
 8000ddc:	e9c6 4700 	strd	r4, r7, [r6]
 8000de0:	e7df      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000de2:	b902      	cbnz	r2, 8000de6 <__udivmoddi4+0xe6>
 8000de4:	deff      	udf	#255	; 0xff
 8000de6:	fab2 f382 	clz	r3, r2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f040 8090 	bne.w	8000f10 <__udivmoddi4+0x210>
 8000df0:	1a8a      	subs	r2, r1, r2
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e00:	fb07 2015 	mls	r0, r7, r5, r2
 8000e04:	0c22      	lsrs	r2, r4, #16
 8000e06:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e0a:	fb0e f005 	mul.w	r0, lr, r5
 8000e0e:	4290      	cmp	r0, r2
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x124>
 8000e12:	eb1c 0202 	adds.w	r2, ip, r2
 8000e16:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x122>
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2b8>
 8000e22:	4645      	mov	r5, r8
 8000e24:	1a12      	subs	r2, r2, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e2c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x14e>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x14c>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2c2>
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e56:	e79f      	b.n	8000d98 <__udivmoddi4+0x98>
 8000e58:	f1c1 0720 	rsb	r7, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e6e:	40fd      	lsrs	r5, r7
 8000e70:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e74:	4323      	orrs	r3, r4
 8000e76:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e82:	0c1c      	lsrs	r4, r3, #16
 8000e84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e88:	fb08 f50e 	mul.w	r5, r8, lr
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	fa00 f001 	lsl.w	r0, r0, r1
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b0>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2b4>
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2b4>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4464      	add	r4, ip
 8000eb0:	1b64      	subs	r4, r4, r5
 8000eb2:	b29d      	uxth	r5, r3
 8000eb4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb8:	fb09 4413 	mls	r4, r9, r3, r4
 8000ebc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1da>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2ac>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2ac>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	4464      	add	r4, ip
 8000eda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ede:	fba3 9502 	umull	r9, r5, r3, r2
 8000ee2:	eba4 040e 	sub.w	r4, r4, lr
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46ae      	mov	lr, r5
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x29c>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x298>
 8000ef0:	b156      	cbz	r6, 8000f08 <__udivmoddi4+0x208>
 8000ef2:	ebb0 0208 	subs.w	r2, r0, r8
 8000ef6:	eb64 040e 	sbc.w	r4, r4, lr
 8000efa:	fa04 f707 	lsl.w	r7, r4, r7
 8000efe:	40ca      	lsrs	r2, r1
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	4317      	orrs	r7, r2
 8000f04:	e9c6 7400 	strd	r7, r4, [r6]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	f1c3 0120 	rsb	r1, r3, #32
 8000f14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f18:	fa20 f201 	lsr.w	r2, r0, r1
 8000f1c:	fa25 f101 	lsr.w	r1, r5, r1
 8000f20:	409d      	lsls	r5, r3
 8000f22:	432a      	orrs	r2, r5
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f30:	fb07 1510 	mls	r5, r7, r0, r1
 8000f34:	0c11      	lsrs	r1, r2, #16
 8000f36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f3a:	fb00 f50e 	mul.w	r5, r0, lr
 8000f3e:	428d      	cmp	r5, r1
 8000f40:	fa04 f403 	lsl.w	r4, r4, r3
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x258>
 8000f46:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f50:	428d      	cmp	r5, r1
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4461      	add	r1, ip
 8000f58:	1b49      	subs	r1, r1, r5
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f60:	fb07 1115 	mls	r1, r7, r5, r1
 8000f64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f68:	fb05 f10e 	mul.w	r1, r5, lr
 8000f6c:	4291      	cmp	r1, r2
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x282>
 8000f70:	eb1c 0202 	adds.w	r2, ip, r2
 8000f74:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7a:	4291      	cmp	r1, r2
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7e:	3d02      	subs	r5, #2
 8000f80:	4462      	add	r2, ip
 8000f82:	1a52      	subs	r2, r2, r1
 8000f84:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0xfc>
 8000f8a:	4631      	mov	r1, r6
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000f90:	4639      	mov	r1, r7
 8000f92:	e6e6      	b.n	8000d62 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e6fb      	b.n	8000d90 <__udivmoddi4+0x90>
 8000f98:	4548      	cmp	r0, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f0>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f0>
 8000fa8:	4645      	mov	r5, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x282>
 8000fac:	462b      	mov	r3, r5
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1da>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x258>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b0>
 8000fb8:	3d02      	subs	r5, #2
 8000fba:	4462      	add	r2, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x124>
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	e70a      	b.n	8000dd8 <__udivmoddi4+0xd8>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x14e>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__aeabi_d2uiz>:
 8000fcc:	004a      	lsls	r2, r1, #1
 8000fce:	d211      	bcs.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd4:	d211      	bcs.n	8000ffa <__aeabi_d2uiz+0x2e>
 8000fd6:	d50d      	bpl.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe0:	d40e      	bmi.n	8001000 <__aeabi_d2uiz+0x34>
 8000fe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fee:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff2:	4770      	bx	lr
 8000ff4:	f04f 0000 	mov.w	r0, #0
 8000ff8:	4770      	bx	lr
 8000ffa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ffe:	d102      	bne.n	8001006 <__aeabi_d2uiz+0x3a>
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr

0800100c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f023 0210 	bic.w	r2, r3, #16
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	605a      	str	r2, [r3, #4]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b02      	cmp	r3, #2
 800108a:	d101      	bne.n	8001090 <LL_SPI_IsActiveFlag_TXE+0x18>
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	330c      	adds	r3, #12
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	330c      	adds	r3, #12
 80010ca:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	78fa      	ldrb	r2, [r7, #3]
 80010d0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4013      	ands	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40023800 	.word	0x40023800

08001110 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <LL_APB2_GRP1_EnableClock+0x2c>)
 800111a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800111c:	4907      	ldr	r1, [pc, #28]	; (800113c <LL_APB2_GRP1_EnableClock+0x2c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4313      	orrs	r3, r2
 8001122:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4013      	ands	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40023800 	.word	0x40023800

08001140 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	619a      	str	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	041a      	lsls	r2, r3, #16
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	619a      	str	r2, [r3, #24]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b090      	sub	sp, #64	; 0x40
 8001180:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2228      	movs	r2, #40	; 0x28
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f00e fd88 	bl	800fca0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80011a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011a4:	f7ff ffb4 	bl	8001110 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff ff99 	bl	80010e0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80011ae:	2004      	movs	r0, #4
 80011b0:	f7ff ff96 	bl	80010e0 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80011b4:	23e0      	movs	r3, #224	; 0xe0
 80011b6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011b8:	2302      	movs	r3, #2
 80011ba:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80011c8:	2305      	movs	r3, #5
 80011ca:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4825      	ldr	r0, [pc, #148]	; (8001268 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80011d2:	f006 fc2c 	bl	8007a2e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80011da:	f44f 7382 	mov.w	r3, #260	; 0x104
 80011de:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80011e4:	2302      	movs	r3, #2
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80011ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80011f2:	2310      	movs	r3, #16
 80011f4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80011fe:	230a      	movs	r3, #10
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	4619      	mov	r1, r3
 8001208:	4818      	ldr	r0, [pc, #96]	; (800126c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800120a:	f006 fcb4 	bl	8007b76 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800120e:	2100      	movs	r1, #0
 8001210:	4816      	ldr	r0, [pc, #88]	; (800126c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001212:	f7ff ff0b 	bl	800102c <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001216:	2110      	movs	r1, #16
 8001218:	4813      	ldr	r0, [pc, #76]	; (8001268 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800121a:	f7ff ff9f 	bl	800115c <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800121e:	2310      	movs	r3, #16
 8001220:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001222:	2301      	movs	r3, #1
 8001224:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001232:	463b      	mov	r3, r7
 8001234:	4619      	mov	r1, r3
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001238:	f006 fbf9 	bl	8007a2e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 800123c:	2310      	movs	r3, #16
 800123e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001244:	2301      	movs	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4808      	ldr	r0, [pc, #32]	; (8001270 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800124e:	f006 fbee 	bl	8007a2e <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001254:	f7ff feda 	bl	800100c <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001258:	2110      	movs	r1, #16
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800125c:	f7ff ff70 	bl	8001140 <LL_GPIO_SetOutputPin>
}
 8001260:	bf00      	nop
 8001262:	3740      	adds	r7, #64	; 0x40
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40020000 	.word	0x40020000
 800126c:	40013000 	.word	0x40013000
 8001270:	40020800 	.word	0x40020800

08001274 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800127e:	bf00      	nop
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <SPI1_SendByte+0x40>)
 8001282:	f7ff fef9 	bl	8001078 <LL_SPI_IsActiveFlag_TXE>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f9      	beq.n	8001280 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4619      	mov	r1, r3
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <SPI1_SendByte+0x40>)
 8001292:	f7ff ff12 	bl	80010ba <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8001296:	bf00      	nop
 8001298:	4806      	ldr	r0, [pc, #24]	; (80012b4 <SPI1_SendByte+0x40>)
 800129a:	f7ff feda 	bl	8001052 <LL_SPI_IsActiveFlag_RXNE>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f9      	beq.n	8001298 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <SPI1_SendByte+0x40>)
 80012a6:	f7ff fefa 	bl	800109e <LL_SPI_ReceiveData8>
 80012aa:	4603      	mov	r3, r0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40013000 	.word	0x40013000

080012b8 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80012c2:	2110      	movs	r1, #16
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <ICM20602_Readbyte+0x3c>)
 80012c6:	f7ff ff49 	bl	800115c <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ffce 	bl	8001274 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff ffcb 	bl	8001274 <SPI1_SendByte>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80012e2:	2110      	movs	r1, #16
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <ICM20602_Readbyte+0x3c>)
 80012e6:	f7ff ff2b 	bl	8001140 <LL_GPIO_SetOutputPin>
	
	return val;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40020000 	.word	0x40020000

080012f8 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	460a      	mov	r2, r1
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	4613      	mov	r3, r2
 8001306:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001308:	2110      	movs	r1, #16
 800130a:	480b      	ldr	r0, [pc, #44]	; (8001338 <ICM20602_Writebyte+0x40>)
 800130c:	f7ff ff26 	bl	800115c <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ffab 	bl	8001274 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ffa7 	bl	8001274 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001326:	2110      	movs	r1, #16
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <ICM20602_Writebyte+0x40>)
 800132a:	f7ff ff09 	bl	8001140 <LL_GPIO_SetOutputPin>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40020000 	.word	0x40020000

0800133c <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001358:	f7ff ff10 	bl	800117c <ICM20602_GPIO_SPI_Initialization>
	
	DEBUG_PRINT("Checking ICM20602...");
 800135c:	4934      	ldr	r1, [pc, #208]	; (8001430 <ICM20602_Initialization+0xf4>)
 800135e:	4835      	ldr	r0, [pc, #212]	; (8001434 <ICM20602_Initialization+0xf8>)
 8001360:	f001 fa3a 	bl	80027d8 <eprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001364:	2075      	movs	r0, #117	; 0x75
 8001366:	f7ff ffa7 	bl	80012b8 <ICM20602_Readbyte>
 800136a:	4603      	mov	r3, r0
 800136c:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2b12      	cmp	r3, #18
 8001372:	d106      	bne.n	8001382 <ICM20602_Initialization+0x46>
	{
		DEBUG_PRINT("\r\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	461a      	mov	r2, r3
 8001378:	492f      	ldr	r1, [pc, #188]	; (8001438 <ICM20602_Initialization+0xfc>)
 800137a:	482e      	ldr	r0, [pc, #184]	; (8001434 <ICM20602_Initialization+0xf8>)
 800137c:	f001 fa2c 	bl	80027d8 <eprintf>
 8001380:	e012      	b.n	80013a8 <ICM20602_Initialization+0x6c>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	2b12      	cmp	r3, #18
 8001386:	d00f      	beq.n	80013a8 <ICM20602_Initialization+0x6c>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001388:	2075      	movs	r0, #117	; 0x75
 800138a:	f7ff ff95 	bl	80012b8 <ICM20602_Readbyte>
 800138e:	4603      	mov	r3, r0
 8001390:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	2b12      	cmp	r3, #18
 8001396:	d007      	beq.n	80013a8 <ICM20602_Initialization+0x6c>
			DEBUG_PRINT( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	2312      	movs	r3, #18
 800139c:	4927      	ldr	r1, [pc, #156]	; (800143c <ICM20602_Initialization+0x100>)
 800139e:	4825      	ldr	r0, [pc, #148]	; (8001434 <ICM20602_Initialization+0xf8>)
 80013a0:	f001 fa1a 	bl	80027d8 <eprintf>
			return 1; //ERROR
 80013a4:	2301      	movs	r3, #1
 80013a6:	e03f      	b.n	8001428 <ICM20602_Initialization+0xec>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	206b      	movs	r0, #107	; 0x6b
 80013ac:	f7ff ffa4 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(5000000);
 80013b0:	4823      	ldr	r0, [pc, #140]	; (8001440 <ICM20602_Initialization+0x104>)
 80013b2:	f001 feab 	bl	800310c <delay_us>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80013b6:	2101      	movs	r1, #1
 80013b8:	206b      	movs	r0, #107	; 0x6b
 80013ba:	f7ff ff9d 	bl	80012f8 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	delay_us(5000000);
 80013be:	4820      	ldr	r0, [pc, #128]	; (8001440 <ICM20602_Initialization+0x104>)
 80013c0:	f001 fea4 	bl	800310c <delay_us>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 80013c4:	2100      	movs	r1, #0
 80013c6:	206c      	movs	r0, #108	; 0x6c
 80013c8:	f7ff ff96 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(5000000);
 80013cc:	481c      	ldr	r0, [pc, #112]	; (8001440 <ICM20602_Initialization+0x104>)
 80013ce:	f001 fe9d 	bl	800310c <delay_us>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80013d2:	2100      	movs	r1, #0
 80013d4:	2019      	movs	r0, #25
 80013d6:	f7ff ff8f 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(5000000);
 80013da:	4819      	ldr	r0, [pc, #100]	; (8001440 <ICM20602_Initialization+0x104>)
 80013dc:	f001 fe96 	bl	800310c <delay_us>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80013e0:	2105      	movs	r1, #5
 80013e2:	201a      	movs	r0, #26
 80013e4:	f7ff ff88 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(5000000);
 80013e8:	4815      	ldr	r0, [pc, #84]	; (8001440 <ICM20602_Initialization+0x104>)
 80013ea:	f001 fe8f 	bl	800310c <delay_us>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80013ee:	2118      	movs	r1, #24
 80013f0:	201b      	movs	r0, #27
 80013f2:	f7ff ff81 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(5000000);
 80013f6:	4812      	ldr	r0, [pc, #72]	; (8001440 <ICM20602_Initialization+0x104>)
 80013f8:	f001 fe88 	bl	800310c <delay_us>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80013fc:	2118      	movs	r1, #24
 80013fe:	201c      	movs	r0, #28
 8001400:	f7ff ff7a 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(5000000);
 8001404:	480e      	ldr	r0, [pc, #56]	; (8001440 <ICM20602_Initialization+0x104>)
 8001406:	f001 fe81 	bl	800310c <delay_us>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800140a:	2103      	movs	r1, #3
 800140c:	201d      	movs	r0, #29
 800140e:	f7ff ff73 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(5000000);
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <ICM20602_Initialization+0x104>)
 8001414:	f001 fe7a 	bl	800310c <delay_us>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001418:	2101      	movs	r1, #1
 800141a:	2038      	movs	r0, #56	; 0x38
 800141c:	f7ff ff6c 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(5000000);
 8001420:	4807      	ldr	r0, [pc, #28]	; (8001440 <ICM20602_Initialization+0x104>)
 8001422:	f001 fe73 	bl	800310c <delay_us>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	08011a10 	.word	0x08011a10
 8001434:	08001f49 	.word	0x08001f49
 8001438:	08011a28 	.word	0x08011a28
 800143c:	08011a4c 	.word	0x08011a4c
 8001440:	004c4b40 	.word	0x004c4b40

08001444 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
    __asm volatile (
 800144e:	680a      	ldr	r2, [r1, #0]
 8001450:	f382 8808 	msr	MSP, r2
 8001454:	684a      	ldr	r2, [r1, #4]
 8001456:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 8001458:	e7fe      	b.n	8001458 <branch_to_bootloader+0x14>
	...

0800145c <check_enter_bootloader>:
}

void check_enter_bootloader(){
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 8001462:	491d      	ldr	r1, [pc, #116]	; (80014d8 <check_enter_bootloader+0x7c>)
 8001464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001468:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 800146c:	4c1a      	ldr	r4, [pc, #104]	; (80014d8 <check_enter_bootloader+0x7c>)
 800146e:	f04f 0000 	mov.w	r0, #0
 8001472:	f04f 0100 	mov.w	r1, #0
 8001476:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 800147a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800147e:	f04f 0000 	mov.w	r0, #0
 8001482:	f04f 0100 	mov.w	r1, #0
 8001486:	0028      	movs	r0, r5
 8001488:	2100      	movs	r1, #0
 800148a:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800148e:	2300      	movs	r3, #0
 8001490:	4912      	ldr	r1, [pc, #72]	; (80014dc <check_enter_bootloader+0x80>)
 8001492:	4411      	add	r1, r2
 8001494:	430b      	orrs	r3, r1
 8001496:	d11a      	bne.n	80014ce <check_enter_bootloader+0x72>
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <check_enter_bootloader+0x84>)
 800149a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d014      	beq.n	80014ce <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <check_enter_bootloader+0x88>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 80014aa:	683c      	ldr	r4, [r7, #0]
 80014ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	000a      	movs	r2, r1
 80014ba:	2300      	movs	r3, #0
 80014bc:	4613      	mov	r3, r2
 80014be:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80014c2:	f023 030f 	bic.w	r3, r3, #15
 80014c6:	4619      	mov	r1, r3
 80014c8:	4620      	mov	r0, r4
 80014ca:	f7ff ffbb 	bl	8001444 <branch_to_bootloader>
    }
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bdb0      	pop	{r4, r5, r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2001c000 	.word	0x2001c000
 80014dc:	fffffa5b 	.word	0xfffffa5b
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40013800 	.word	0x40013800

080014e8 <ledSetForce>:
    ledSet(i, ledLastState[i]);
  }
}

static void ledSetForce(led_t led, bool value)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	460a      	mov	r2, r1
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	4613      	mov	r3, r2
 80014f6:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d832      	bhi.n	8001564 <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4a1a      	ldr	r2, [pc, #104]	; (800156c <ledSetForce+0x84>)
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d10d      	bne.n	8001526 <ledSetForce+0x3e>
  {
    value = !value;
 800150a:	79bb      	ldrb	r3, [r7, #6]
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf14      	ite	ne
 8001510:	2301      	movne	r3, #1
 8001512:	2300      	moveq	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f083 0301 	eor.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	71bb      	strb	r3, [r7, #6]
 800151e:	79bb      	ldrb	r3, [r7, #6]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 8001526:	79bb      	ldrb	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00d      	beq.n	8001548 <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <ledSetForce+0x88>)
 8001530:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <ledSetForce+0x8c>)
 8001538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153c:	b29b      	uxth	r3, r3
 800153e:	2201      	movs	r2, #1
 8001540:	4619      	mov	r1, r3
 8001542:	f002 ffbb 	bl	80044bc <HAL_GPIO_WritePin>
 8001546:	e00e      	b.n	8001566 <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <ledSetForce+0x88>)
 800154c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <ledSetForce+0x8c>)
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	b29b      	uxth	r3, r3
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	f002 ffad 	bl	80044bc <HAL_GPIO_WritePin>
 8001562:	e000      	b.n	8001566 <ledSetForce+0x7e>
    return;
 8001564:	bf00      	nop
    }

//  }

}
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000030 	.word	0x20000030
 8001570:	20000000 	.word	0x20000000
 8001574:	20000018 	.word	0x20000018

08001578 <ledInit>:
    ledSetSwitch(LED_LEDSEQ);
  }
}

void ledInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 800157e:	4b32      	ldr	r3, [pc, #200]	; (8001648 <ledInit+0xd0>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d15b      	bne.n	800163e <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b2c      	ldr	r3, [pc, #176]	; (800164c <ledInit+0xd4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a2b      	ldr	r2, [pc, #172]	; (800164c <ledInit+0xd4>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b29      	ldr	r3, [pc, #164]	; (800164c <ledInit+0xd4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	4b25      	ldr	r3, [pc, #148]	; (800164c <ledInit+0xd4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a24      	ldr	r2, [pc, #144]	; (800164c <ledInit+0xd4>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <ledInit+0xd4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e02a      	b.n	800162a <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 80015d4:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <ledInit+0xd8>)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <ledInit+0xdc>)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	f002 ff67 	bl	80044bc <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 80015ee:	4a19      	ldr	r2, [pc, #100]	; (8001654 <ledInit+0xdc>)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015fc:	2301      	movs	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 8001604:	4a12      	ldr	r2, [pc, #72]	; (8001650 <ledInit+0xd8>)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160c:	f107 0208 	add.w	r2, r7, #8
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f002 fdb6 	bl	8004184 <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f81c 	bl	800165c <ledSet>
  for (i = 0; i < LED_NUM; i++)
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	3301      	adds	r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	2b05      	cmp	r3, #5
 800162e:	ddd1      	ble.n	80015d4 <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <ledInit+0xe0>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
  isInit = true;
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <ledInit+0xd0>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e000      	b.n	8001640 <ledInit+0xc8>
    return;
 800163e:	bf00      	nop
}
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000f90 	.word	0x20000f90
 800164c:	40023800 	.word	0x40023800
 8001650:	20000000 	.word	0x20000000
 8001654:	20000018 	.word	0x20000018
 8001658:	20000f9a 	.word	0x20000f9a

0800165c <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	460a      	mov	r2, r1
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	4613      	mov	r3, r2
 800166a:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	2b05      	cmp	r3, #5
 8001670:	d904      	bls.n	800167c <ledSet+0x20>
 8001672:	22e4      	movs	r2, #228	; 0xe4
 8001674:	490a      	ldr	r1, [pc, #40]	; (80016a0 <ledSet+0x44>)
 8001676:	480b      	ldr	r0, [pc, #44]	; (80016a4 <ledSet+0x48>)
 8001678:	f000 fb86 	bl	8001d88 <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <ledSet+0x4c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <ledSet+0x34>
  {
    ledSetForce(led, value);
 8001684:	79ba      	ldrb	r2, [r7, #6]
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff2c 	bl	80014e8 <ledSetForce>
  }

  ledLastState[led] = value;
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	79b9      	ldrb	r1, [r7, #6]
 8001694:	4a05      	ldr	r2, [pc, #20]	; (80016ac <ledSet+0x50>)
 8001696:	54d1      	strb	r1, [r2, r3]
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	08011a78 	.word	0x08011a78
 80016a4:	08011a94 	.word	0x08011a94
 80016a8:	20000f9a 	.word	0x20000f9a
 80016ac:	20000f94 	.word	0x20000f94

080016b0 <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 80016b4:	2100      	movs	r1, #0
 80016b6:	2001      	movs	r0, #1
 80016b8:	f7ff ffd0 	bl	800165c <ledSet>
  ledSet(LED_GREEN_R, 0);
 80016bc:	2100      	movs	r1, #0
 80016be:	2003      	movs	r0, #3
 80016c0:	f7ff ffcc 	bl	800165c <ledSet>
  ledSet(LED_RED_L, 1);
 80016c4:	2101      	movs	r1, #1
 80016c6:	2002      	movs	r0, #2
 80016c8:	f7ff ffc8 	bl	800165c <ledSet>
  ledSet(LED_RED_R, 1);
 80016cc:	2101      	movs	r1, #1
 80016ce:	2004      	movs	r0, #4
 80016d0:	f7ff ffc4 	bl	800165c <ledSet>
  ledSet(LED_BLUE_L, 0);
 80016d4:	2100      	movs	r1, #0
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff ffc0 	bl	800165c <ledSet>
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 80016e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <systemLaunch+0x28>)
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <systemLaunch+0x2c>)
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	2302      	movs	r3, #2
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2300      	movs	r3, #0
 80016fa:	4905      	ldr	r1, [pc, #20]	; (8001710 <systemLaunch+0x30>)
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <systemLaunch+0x34>)
 80016fe:	f00a fdef 	bl	800c2e0 <xTaskCreateStatic>
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000384 	.word	0x20000384
 800170c:	20000fa4 	.word	0x20000fa4
 8001710:	08011abc 	.word	0x08011abc
 8001714:	08001719 	.word	0x08001719

08001718 <systemTask>:


/* Private functions implementation */

void systemTask(void *arg)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  bool pass = true;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]

  uint32_t ld = SysTick->LOAD;
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <systemTask+0x84>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	60bb      	str	r3, [r7, #8]
  time1 = DWT->CYCCNT;
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <systemTask+0x88>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <systemTask+0x8c>)
 8001730:	6013      	str	r3, [r2, #0]
  delay_us(10);	// 1ms
 8001732:	200a      	movs	r0, #10
 8001734:	f001 fcea 	bl	800310c <delay_us>
  time2 = DWT->CYCCNT;
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <systemTask+0x88>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4a1a      	ldr	r2, [pc, #104]	; (80017a8 <systemTask+0x90>)
 800173e:	6013      	str	r3, [r2, #0]
  DEBUG_PRINT("delay = %.2f(us)\n",(float)(time2-time1)/CLOCK_PER_USEC);
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <systemTask+0x90>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <systemTask+0x8c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001752:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80017ac <systemTask+0x94>
 8001756:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800175a:	ee16 0a90 	vmov	r0, s13
 800175e:	f7fe ff03 	bl	8000568 <__aeabi_f2d>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4912      	ldr	r1, [pc, #72]	; (80017b0 <systemTask+0x98>)
 8001768:	4812      	ldr	r0, [pc, #72]	; (80017b4 <systemTask+0x9c>)
 800176a:	f001 f835 	bl	80027d8 <eprintf>


  ledInit();
 800176e:	f7ff ff03 	bl	8001578 <ledInit>
  ledSet(CHG_LED, SET);
 8001772:	2101      	movs	r1, #1
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff ff71 	bl	800165c <ledSet>


#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  queueMonitorInit();
 800177a:	f001 f843 	bl	8002804 <queueMonitorInit>
#endif

#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  uartInit();
 800177e:	f000 fb49 	bl	8001e14 <uartInit>
  uartDmaInit();
 8001782:	f000 fb65 	bl	8001e50 <uartDmaInit>
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

  ICM20602_Initialization();	// 여기서 일정 시간 지연이 있어야 STM32 VCP 포트가 활성화됨 원인파악중
 8001786:	f7ff fdd9 	bl	800133c <ICM20602_Initialization>

  passthroughInit();	// Create passthrough task
 800178a:	f000 f983 	bl	8001a94 <passthroughInit>

  systemInit();
 800178e:	f000 f835 	bl	80017fc <systemInit>
//  commInit();
//  commanderInit();

}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010
 80017a0:	e0001000 	.word	0xe0001000
 80017a4:	20000f9c 	.word	0x20000f9c
 80017a8:	20000fa0 	.word	0x20000fa0
 80017ac:	42900000 	.word	0x42900000
 80017b0:	08011ac4 	.word	0x08011ac4
 80017b4:	08001f49 	.word	0x08001f49

080017b8 <systemWaitStart>:



void systemWaitStart(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  //This permits to guarantee that the system task is initialized before other
  //tasks waits for the start event.
  while(!isInit)
 80017bc:	e002      	b.n	80017c4 <systemWaitStart+0xc>
    vTaskDelay(2);
 80017be:	2002      	movs	r0, #2
 80017c0:	f00a ff4a 	bl	800c658 <vTaskDelay>
  while(!isInit)
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <systemWaitStart+0x3c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	f083 0301 	eor.w	r3, r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f5      	bne.n	80017be <systemWaitStart+0x6>

  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <systemWaitStart+0x40>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017da:	4618      	mov	r0, r3
 80017dc:	f00a fa60 	bl	800bca0 <xQueueSemaphoreTake>
  xSemaphoreGive(canStartMutex);
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <systemWaitStart+0x40>)
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	2300      	movs	r3, #0
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	f009 ff53 	bl	800b694 <xQueueGenericSend>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000f9b 	.word	0x20000f9b
 80017f8:	200013a4 	.word	0x200013a4

080017fc <systemInit>:



// This must be the first module to be initialized!
void systemInit(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  if(isInit)
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <systemInit+0x40>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d117      	bne.n	8001838 <systemInit+0x3c>
    return;

  canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 8001808:	490d      	ldr	r1, [pc, #52]	; (8001840 <systemInit+0x44>)
 800180a:	2001      	movs	r0, #1
 800180c:	f009 ff27 	bl	800b65e <xQueueCreateMutexStatic>
 8001810:	4603      	mov	r3, r0
 8001812:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <systemInit+0x48>)
 8001814:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <systemInit+0x48>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800181e:	4618      	mov	r0, r3
 8001820:	f00a fa3e 	bl	800bca0 <xQueueSemaphoreTake>


  usblinkInit();
 8001824:	f000 f8f0 	bl	8001a08 <usblinkInit>
  /* Initialized here so that DEBUG_PRINT (buffered) can be used early */
//  debugInit();
//  crtpInit();
//  consoleInit();

  DEBUG_PRINT("----------------------------\n");
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <systemInit+0x4c>)
 800182a:	4808      	ldr	r0, [pc, #32]	; (800184c <systemInit+0x50>)
 800182c:	f000 ffd4 	bl	80027d8 <eprintf>

#ifdef CONFIG_APP_ENABLE
  appInit();
#endif
*/
  isInit = true;
 8001830:	4b02      	ldr	r3, [pc, #8]	; (800183c <systemInit+0x40>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	e000      	b.n	800183a <systemInit+0x3e>
    return;
 8001838:	bf00      	nop
}
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000f9b 	.word	0x20000f9b
 8001840:	200013a8 	.word	0x200013a8
 8001844:	200013a4 	.word	0x200013a4
 8001848:	08011adc 	.word	0x08011adc
 800184c:	08001f49 	.word	0x08001f49

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db12      	blt.n	80018c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	490a      	ldr	r1, [pc, #40]	; (80018d0 <__NVIC_DisableIRQ+0x44>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	3320      	adds	r3, #32
 80018b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018b8:	f3bf 8f4f 	dsb	sy
}
 80018bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018be:	f3bf 8f6f 	isb	sy
}
 80018c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <usbGetDataBlocking>:
};
*/


bool usbGetDataBlocking(USBPacket *in)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	xQueueReceive(usbDataRx, in, portMAX_DELAY);
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <usbGetDataBlocking+0x48>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f00a f8fa 	bl	800bae0 <xQueueReceive>
//  while (xQueueReceive(usbDataRx, in, portMAX_DELAY) != pdTRUE); // Don't return until we get some data on the USB

  // Disabling USB interrupt to make sure we can check and re-enable the endpoint
  // if it is not currently accepting data (ie. can happen if the RX queue was full)
  NVIC_DisableIRQ(OTG_FS_IRQn);
 80018ec:	2043      	movs	r0, #67	; 0x43
 80018ee:	f7ff ffcd 	bl	800188c <__NVIC_DisableIRQ>
  if (rxStopped) {
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <usbGetDataBlocking+0x4c>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <usbGetDataBlocking+0x38>
	  USBD_LL_PrepareReceive(&hUsbDeviceFS, CF_OUT_EP, (uint8_t*)(inPacket.data), USB_RX_TX_PACKET_SIZE);
 80018fa:	2340      	movs	r3, #64	; 0x40
 80018fc:	4a09      	ldr	r2, [pc, #36]	; (8001924 <usbGetDataBlocking+0x50>)
 80018fe:	2101      	movs	r1, #1
 8001900:	4809      	ldr	r0, [pc, #36]	; (8001928 <usbGetDataBlocking+0x54>)
 8001902:	f00d fa79 	bl	800edf8 <USBD_LL_PrepareReceive>
//    DCD_EP_PrepareRx(&USB_OTG_dev,
//                    CF_OUT_EP,
//                    (uint8_t*)(inPacket.data),
//                    USB_RX_TX_PACKET_SIZE);
    rxStopped = false;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <usbGetDataBlocking+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
  }
  NVIC_EnableIRQ(OTG_FS_IRQn);
 800190c:	2043      	movs	r0, #67	; 0x43
 800190e:	f7ff ff9f 	bl	8001850 <__NVIC_EnableIRQ>

  return true;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200013fc 	.word	0x200013fc
 8001920:	20000048 	.word	0x20000048
 8001924:	20001405 	.word	0x20001405
 8001928:	20006a24 	.word	0x20006a24

0800192c <usbInit>:

void usbInit(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af02      	add	r7, sp, #8

//  MX_USB_DEVICE_Init();		// HAL 드라이버에서 생성됨
  usbDataRx = STATIC_MEM_QUEUE_CREATE(usbDataRx);
 8001932:	2305      	movs	r3, #5
 8001934:	4618      	mov	r0, r3
 8001936:	2341      	movs	r3, #65	; 0x41
 8001938:	4619      	mov	r1, r3
 800193a:	2300      	movs	r3, #0
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <usbInit+0x64>)
 8001940:	4a14      	ldr	r2, [pc, #80]	; (8001994 <usbInit+0x68>)
 8001942:	f009 fdd7 	bl	800b4f4 <xQueueGenericCreateStatic>
 8001946:	4603      	mov	r3, r0
 8001948:	4a13      	ldr	r2, [pc, #76]	; (8001998 <usbInit+0x6c>)
 800194a:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataRx);
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <usbInit+0x6c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a12      	ldr	r2, [pc, #72]	; (800199c <usbInit+0x70>)
 8001952:	4913      	ldr	r1, [pc, #76]	; (80019a0 <usbInit+0x74>)
 8001954:	4618      	mov	r0, r3
 8001956:	f000 ff9d 	bl	8002894 <qmRegisterQueue>
  usbDataTx = STATIC_MEM_QUEUE_CREATE(usbDataTx);
 800195a:	2301      	movs	r3, #1
 800195c:	4618      	mov	r0, r3
 800195e:	2341      	movs	r3, #65	; 0x41
 8001960:	4619      	mov	r1, r3
 8001962:	2300      	movs	r3, #0
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <usbInit+0x78>)
 8001968:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <usbInit+0x7c>)
 800196a:	f009 fdc3 	bl	800b4f4 <xQueueGenericCreateStatic>
 800196e:	4603      	mov	r3, r0
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <usbInit+0x80>)
 8001972:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataTx);
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <usbInit+0x80>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <usbInit+0x84>)
 800197a:	4909      	ldr	r1, [pc, #36]	; (80019a0 <usbInit+0x74>)
 800197c:	4618      	mov	r0, r3
 800197e:	f000 ff89 	bl	8002894 <qmRegisterQueue>

  isInit = true;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <usbInit+0x88>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000580 	.word	0x20000580
 8001994:	20000438 	.word	0x20000438
 8001998:	200013fc 	.word	0x200013fc
 800199c:	08011b00 	.word	0x08011b00
 80019a0:	08011b0c 	.word	0x08011b0c
 80019a4:	20000614 	.word	0x20000614
 80019a8:	200005d0 	.word	0x200005d0
 80019ac:	20001400 	.word	0x20001400
 80019b0:	08011b28 	.word	0x08011b28
 80019b4:	200013f8 	.word	0x200013f8

080019b8 <usblinkTask>:
 * and so much other cool things that I don't have time for it ...)
 */
static USBPacket usbIn;
static CRTPPacket p;
static void usblinkTask(void *param)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  while(1)
  {
    // Fetch a USB packet off the queue
    usbGetDataBlocking(&usbIn);
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <usblinkTask+0x3c>)
 80019c2:	f7ff ff87 	bl	80018d4 <usbGetDataBlocking>
    p.size = usbIn.size - 1;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <usblinkTask+0x3c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <usblinkTask+0x40>)
 80019d0:	701a      	strb	r2, [r3, #0]
    memcpy(&p.raw, usbIn.data, usbIn.size);
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <usblinkTask+0x3c>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	4908      	ldr	r1, [pc, #32]	; (80019fc <usblinkTask+0x44>)
 80019da:	4809      	ldr	r0, [pc, #36]	; (8001a00 <usblinkTask+0x48>)
 80019dc:	f00e fa49 	bl	800fe72 <memcpy>
    // This queuing will copy a CRTP packet size from usbIn
    xQueueSend(crtpPacketDelivery, &p, portMAX_DELAY);
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <usblinkTask+0x4c>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ea:	4903      	ldr	r1, [pc, #12]	; (80019f8 <usblinkTask+0x40>)
 80019ec:	f009 fe52 	bl	800b694 <xQueueGenericSend>
    usbGetDataBlocking(&usbIn);
 80019f0:	e7e6      	b.n	80019c0 <usblinkTask+0x8>
 80019f2:	bf00      	nop
 80019f4:	2000164c 	.word	0x2000164c
 80019f8:	20001690 	.word	0x20001690
 80019fc:	2000164d 	.word	0x2000164d
 8001a00:	20001691 	.word	0x20001691
 8001a04:	20001448 	.word	0x20001448

08001a08 <usblinkInit>:
/*
 * Public functions
 */

void usblinkInit()
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af04      	add	r7, sp, #16
  if(isInit)
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <usblinkInit+0x64>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d126      	bne.n	8001a64 <usblinkInit+0x5c>
    return;

  // Initialize the USB peripheral
  usbInit();
 8001a16:	f7ff ff89 	bl	800192c <usbInit>

  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 8001a1a:	2310      	movs	r3, #16
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	2320      	movs	r3, #32
 8001a20:	4619      	mov	r1, r3
 8001a22:	2300      	movs	r3, #0
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <usblinkInit+0x68>)
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <usblinkInit+0x6c>)
 8001a2a:	f009 fd63 	bl	800b4f4 <xQueueGenericCreateStatic>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <usblinkInit+0x70>)
 8001a32:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <usblinkInit+0x70>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <usblinkInit+0x74>)
 8001a3a:	4911      	ldr	r1, [pc, #68]	; (8001a80 <usblinkInit+0x78>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 ff29 	bl	8002894 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(usblinkTask, usblinkTask, USBLINK_TASK_NAME, NULL, USBLINK_TASK_PRI);
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <usblinkInit+0x7c>)
 8001a48:	9302      	str	r3, [sp, #8]
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <usblinkInit+0x80>)
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	2303      	movs	r3, #3
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2300      	movs	r3, #0
 8001a54:	490d      	ldr	r1, [pc, #52]	; (8001a8c <usblinkInit+0x84>)
 8001a56:	480e      	ldr	r0, [pc, #56]	; (8001a90 <usblinkInit+0x88>)
 8001a58:	f00a fc42 	bl	800c2e0 <xTaskCreateStatic>

  isInit = true;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <usblinkInit+0x64>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]
 8001a62:	e000      	b.n	8001a66 <usblinkInit+0x5e>
    return;
 8001a64:	bf00      	nop
}
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20001445 	.word	0x20001445
 8001a70:	20000864 	.word	0x20000864
 8001a74:	20000664 	.word	0x20000664
 8001a78:	20001448 	.word	0x20001448
 8001a7c:	08011b34 	.word	0x08011b34
 8001a80:	08011b48 	.word	0x08011b48
 8001a84:	200008b4 	.word	0x200008b4
 8001a88:	2000144c 	.word	0x2000144c
 8001a8c:	08011b68 	.word	0x08011b68
 8001a90:	080019b9 	.word	0x080019b9

08001a94 <passthroughInit>:
static void blHeliConfigHandshake();

void passthroughTask(void *param);

void passthroughInit()
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af04      	add	r7, sp, #16
  if(isInit)
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <passthroughInit+0x8c>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d13b      	bne.n	8001b1a <passthroughInit+0x86>
    return;

  ptRxQueue = STATIC_MEM_QUEUE_CREATE(ptRxQueue);
 8001aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	4619      	mov	r1, r3
 8001aac:	2300      	movs	r3, #0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <passthroughInit+0x90>)
 8001ab2:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <passthroughInit+0x94>)
 8001ab4:	f009 fd1e 	bl	800b4f4 <xQueueGenericCreateStatic>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <passthroughInit+0x98>)
 8001abc:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <passthroughInit+0x98>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <passthroughInit+0x9c>)
 8001ac4:	491b      	ldr	r1, [pc, #108]	; (8001b34 <passthroughInit+0xa0>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fee4 	bl	8002894 <qmRegisterQueue>
  ptTxQueue = STATIC_MEM_QUEUE_CREATE(ptTxQueue);
 8001acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <passthroughInit+0xa4>)
 8001adc:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <passthroughInit+0xa8>)
 8001ade:	f009 fd09 	bl	800b4f4 <xQueueGenericCreateStatic>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <passthroughInit+0xac>)
 8001ae6:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 8001ae8:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <passthroughInit+0x98>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <passthroughInit+0x9c>)
 8001aee:	4911      	ldr	r1, [pc, #68]	; (8001b34 <passthroughInit+0xa0>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fecf 	bl	8002894 <qmRegisterQueue>

  passthroughTaskHandle = STATIC_MEM_TASK_CREATE(passthroughTask, passthroughTask, PASSTHROUGH_TASK_NAME, NULL, PASSTHROUGH_TASK_PRI);
 8001af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <passthroughInit+0xb0>)
 8001afe:	9302      	str	r3, [sp, #8]
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <passthroughInit+0xb4>)
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	2305      	movs	r3, #5
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	4910      	ldr	r1, [pc, #64]	; (8001b4c <passthroughInit+0xb8>)
 8001b0c:	4810      	ldr	r0, [pc, #64]	; (8001b50 <passthroughInit+0xbc>)
 8001b0e:	f00a fbe7 	bl	800c2e0 <xTaskCreateStatic>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <passthroughInit+0xc0>)
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e000      	b.n	8001b1c <passthroughInit+0x88>
    return;
 8001b1a:	bf00      	nop
}
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20001ab4 	.word	0x20001ab4
 8001b24:	20000c1c 	.word	0x20000c1c
 8001b28:	20000a1c 	.word	0x20000a1c
 8001b2c:	20001ab8 	.word	0x20001ab8
 8001b30:	08011b70 	.word	0x08011b70
 8001b34:	08011b7c 	.word	0x08011b7c
 8001b38:	20000e6c 	.word	0x20000e6c
 8001b3c:	20000c6c 	.word	0x20000c6c
 8001b40:	20001abc 	.word	0x20001abc
 8001b44:	20000968 	.word	0x20000968
 8001b48:	200016b4 	.word	0x200016b4
 8001b4c:	08011ba8 	.word	0x08011ba8
 8001b50:	08001b59 	.word	0x08001b59
 8001b54:	200016b0 	.word	0x200016b0

08001b58 <passthroughTask>:
  BaseType_t xHigherPriorityTaskWoken;
  return xQueueReceiveFromISR(ptTxQueue, receiveChPtr, &xHigherPriorityTaskWoken);
}

void passthroughTask(void *param)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8001b60:	f7ff fe2a 	bl	80017b8 <systemWaitStart>

  while (true)
  {
    // Wait for interface to be activated, typically when ACM or COM port control message is sent
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f00b fbf7 	bl	800d35c <ulTaskNotifyTake>
//    paramVarId_t motorPowerSetEnableParam;
//    motorPowerSetEnableParam = paramGetVarId("motorPowerSet", "enable");
//    paramSetInt(motorPowerSetEnableParam, 0);

    // Clear any notifications that was queued during 4way process.
    ulTaskNotifyValueClear(NULL, 0xFFFFFFFF);
 8001b6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b72:	2000      	movs	r0, #0
 8001b74:	f00b fc3e 	bl	800d3f4 <ulTaskNotifyValueClear>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001b78:	e7f4      	b.n	8001b64 <passthroughTask+0xc>

08001b7a <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f896 	bl	8001cb8 <platformGetListOfConfigurations>
 8001b8c:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4619      	mov	r1, r3
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f854 	bl	8001c40 <platformInitConfiguration>
 8001b98:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b30      	cmp	r3, #48	; 0x30
 8001bbe:	d104      	bne.n	8001bca <platformParseDeviceTypeString+0x1c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b3b      	cmp	r3, #59	; 0x3b
 8001bc8:	d001      	beq.n	8001bce <platformParseDeviceTypeString+0x20>
    return 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e034      	b.n	8001c38 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	e00e      	b.n	8001c00 <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00c      	beq.n	8001c08 <platformParseDeviceTypeString+0x5a>
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b3b      	cmp	r3, #59	; 0x3b
 8001bf8:	d006      	beq.n	8001c08 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	ddec      	ble.n	8001be2 <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dd01      	ble.n	8001c14 <platformParseDeviceTypeString+0x66>
    return 1;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e011      	b.n	8001c38 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	4619      	mov	r1, r3
 8001c26:	6838      	ldr	r0, [r7, #0]
 8001c28:	f00e f923 	bl	800fe72 <memcpy>
  deviceType[length] = '\0';
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
  return 0;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b090      	sub	sp, #64	; 0x40
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f852 	bl	8001cf8 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8001c54:	f107 020c 	add.w	r2, r7, #12
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ffa5 	bl	8001bae <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8001c64:	2300      	movs	r3, #0
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c68:	e01a      	b.n	8001ca0 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 8001c6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8001c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7e:	f107 020c 	add.w	r2, r7, #12
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe faa3 	bl	80001d0 <strcmp>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d104      	bne.n	8001c9a <platformInitConfiguration+0x5a>
      active_config = config;
 8001c90:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <platformInitConfiguration+0x74>)
 8001c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c94:	6013      	str	r3, [r2, #0]
      return 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e007      	b.n	8001caa <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 8001c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	dbe0      	blt.n	8001c6a <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8001ca8:	2301      	movs	r3, #1
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3740      	adds	r7, #64	; 0x40
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20001ac0 	.word	0x20001ac0

08001cb8 <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	601a      	str	r2, [r3, #0]
  return configs;
 8001cc6:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <platformGetListOfConfigurations+0x1c>)
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	2000004c 	.word	0x2000004c

08001cd8 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8001cea:	015b      	lsls	r3, r3, #5
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	e00d      	b.n	8001d26 <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 8001d0a:	6938      	ldr	r0, [r7, #16]
 8001d0c:	f7ff ffe4 	bl	8001cd8 <getAddressOfOtpMemoryBlock>
 8001d10:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	617b      	str	r3, [r7, #20]
      break;
 8001d1e:	e005      	b.n	8001d2c <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	3301      	adds	r3, #1
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b0f      	cmp	r3, #15
 8001d2a:	ddee      	ble.n	8001d0a <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <platformGetDeviceTypeString+0x42>
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2bff      	cmp	r3, #255	; 0xff
 8001d38:	d101      	bne.n	8001d3e <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <platformGetDeviceTypeString+0x60>)
 8001d3c:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8001d3e:	2220      	movs	r2, #32
 8001d40:	6979      	ldr	r1, [r7, #20]
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f00d ffb4 	bl	800fcb0 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3320      	adds	r3, #32
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
}
 8001d50:	bf00      	nop
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	08011c9c 	.word	0x08011c9c

08001d5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001d60:	f3bf 8f4f 	dsb	sy
}
 8001d64:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <__NVIC_SystemReset+0x24>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d6e:	4904      	ldr	r1, [pc, #16]	; (8001d80 <__NVIC_SystemReset+0x24>)
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__NVIC_SystemReset+0x28>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d76:	f3bf 8f4f 	dsb	sy
}
 8001d7a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <__NVIC_SystemReset+0x20>
 8001d80:	e000ed00 	.word	0xe000ed00
 8001d84:	05fa0004 	.word	0x05fa0004

08001d88 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d98:	f383 8811 	msr	BASEPRI, r3
 8001d9c:	f3bf 8f6f 	isb	sy
 8001da0:	f3bf 8f4f 	dsb	sy
 8001da4:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001da6:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	68b8      	ldr	r0, [r7, #8]
 8001dac:	f000 f810 	bl	8001dd0 <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 8001db0:	f7ff fc7e 	bl	80016b0 <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <assertFail+0x44>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 8001dc0:	f7ff ffcc 	bl	8001d5c <__NVIC_SystemReset>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	e000edf0 	.word	0xe000edf0

08001dd0 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <storeAssertFileData+0x38>)
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <storeAssertFileData+0x3c>)
 8001dde:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <storeAssertFileData+0x38>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <storeAssertFileData+0x38>)
 8001de8:	791a      	ldrb	r2, [r3, #4]
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <storeAssertFileData+0x40>)
 8001dec:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 8001dee:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <storeAssertFileData+0x38>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <storeAssertFileData+0x38>)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	60d3      	str	r3, [r2, #12]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000f4c 	.word	0x20000f4c
 8001e0c:	2f8a001f 	.word	0x2f8a001f
 8001e10:	20001ac4 	.word	0x20001ac4

08001e14 <uartInit>:
			return -1;
		return len;
}


void uartInit(void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af02      	add	r7, sp, #8
	uartqueue = STATIC_MEM_QUEUE_CREATE(uartqueue);
 8001e1a:	2340      	movs	r3, #64	; 0x40
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	2301      	movs	r3, #1
 8001e20:	4619      	mov	r1, r3
 8001e22:	2300      	movs	r3, #0
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <uartInit+0x2c>)
 8001e28:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <uartInit+0x30>)
 8001e2a:	f009 fb63 	bl	800b4f4 <xQueueGenericCreateStatic>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <uartInit+0x34>)
 8001e32:	6013      	str	r3, [r2, #0]
    isInit = true;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <uartInit+0x38>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000efc 	.word	0x20000efc
 8001e44:	20000ebc 	.word	0x20000ebc
 8001e48:	20001ac8 	.word	0x20001ac8
 8001e4c:	20001b75 	.word	0x20001b75

08001e50 <uartDmaInit>:



void uartDmaInit(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af02      	add	r7, sp, #8

  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 8001e56:	2303      	movs	r3, #3
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <uartDmaInit+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	2001      	movs	r0, #1
 8001e62:	f009 fb47 	bl	800b4f4 <xQueueGenericCreateStatic>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <uartDmaInit+0x94>)
 8001e6a:	6013      	str	r3, [r2, #0]
  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <uartDmaInit+0x98>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2001      	movs	r0, #1
 8001e78:	f009 fb3c 	bl	800b4f4 <xQueueGenericCreateStatic>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <uartDmaInit+0x9c>)
 8001e80:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <uartDmaInit+0x9c>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	2300      	movs	r3, #0
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	f009 fc02 	bl	800b694 <xQueueGenericSend>
  xSemaphoreGive(waitUntilSendDone);
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <uartDmaInit+0x94>)
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	2300      	movs	r3, #0
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	f009 fbfb 	bl	800b694 <xQueueGenericSend>

  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <uartDmaInit+0xa0>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <uartDmaInit+0xa0>)
 8001ea8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <uartDmaInit+0xa0>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  HAL_DMA_Init(&hdma_usart6_tx);
 8001eba:	480e      	ldr	r0, [pc, #56]	; (8001ef4 <uartDmaInit+0xa4>)
 8001ebc:	f001 fde6 	bl	8003a8c <HAL_DMA_Init>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2105      	movs	r1, #5
 8001ec4:	2045      	movs	r0, #69	; 0x45
 8001ec6:	f001 fdaa 	bl	8003a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001eca:	2045      	movs	r0, #69	; 0x45
 8001ecc:	f001 fdc3 	bl	8003a56 <HAL_NVIC_EnableIRQ>

  isUartDmaInitialized = true;
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <uartDmaInit+0xa8>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]

}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20001b24 	.word	0x20001b24
 8001ee4:	20001b20 	.word	0x20001b20
 8001ee8:	20001ad0 	.word	0x20001ad0
 8001eec:	20001acc 	.word	0x20001acc
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	20002934 	.word	0x20002934
 8001ef8:	20001b74 	.word	0x20001b74

08001efc <uartSendData>:




void uartSendData(uint32_t size, uint8_t* data)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t i;

  for(i = 0; i < size; i++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	e00f      	b.n	8001f2c <uartSendData+0x30>
  {
    while (!(USART6->SR & UART_FLAG_TXE));
 8001f0c:	bf00      	nop
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <uartSendData+0x48>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f9      	beq.n	8001f0e <uartSendData+0x12>
    USART6->DR = (data[i] & 0x00FF);
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <uartSendData+0x48>)
 8001f24:	605a      	str	r2, [r3, #4]
  for(i = 0; i < size; i++)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d3eb      	bcc.n	8001f0c <uartSendData+0x10>
  }
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40011400 	.word	0x40011400

08001f48 <uartPutchar>:


int uartPutchar(int ch)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
    uartSendData(1, (uint8_t *)&ch);
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	2001      	movs	r0, #1
 8001f56:	f7ff ffd1 	bl	8001efc <uartSendData>
    return (unsigned char)ch;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	b2db      	uxtb	r3, r3
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <getIntLen>:

static const char digit[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
                             'A', 'B', 'C', 'D', 'E', 'F'};

static int getIntLen (long int value)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  int l = 1;
 8001f70:	2301      	movs	r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
  while(value > 9)
 8001f74:	e00a      	b.n	8001f8c <getIntLen+0x24>
  {
    l++;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
    value /= 10;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <getIntLen+0x38>)
 8001f80:	fb82 1203 	smull	r1, r2, r2, r3
 8001f84:	1092      	asrs	r2, r2, #2
 8001f86:	17db      	asrs	r3, r3, #31
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	607b      	str	r3, [r7, #4]
  while(value > 9)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b09      	cmp	r3, #9
 8001f90:	dcf1      	bgt.n	8001f76 <getIntLen+0xe>
  }
  return l;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	66666667 	.word	0x66666667

08001fa4 <power>:

int power(int a, int b)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  int i;
  int x = a;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60bb      	str	r3, [r7, #8]

  for (i = 1; i < b; i++)
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	e007      	b.n	8001fc8 <power+0x24>
  {
    x *= a;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	fb02 f303 	mul.w	r3, r2, r3
 8001fc0:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < b; i++)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	dbf3      	blt.n	8001fb8 <power+0x14>
  }

  return x;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <itoa10Unsigned>:

static int itoa10Unsigned(putc_t putcf, unsigned long long int num)
{
 8001fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fe4:	b088      	sub	sp, #32
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]

  if (num == 0)
 8001ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	d104      	bne.n	8002004 <itoa10Unsigned+0x24>
  {
    putcf('0');
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2030      	movs	r0, #48	; 0x30
 8001ffe:	4798      	blx	r3
    return 1;
 8002000:	2301      	movs	r3, #1
 8002002:	e057      	b.n	80020b4 <itoa10Unsigned+0xd4>
  }

  unsigned long long int i = 1;
 8002004:	f04f 0201 	mov.w	r2, #1
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	e9c7 2304 	strd	r2, r3, [r7, #16]

  while ((num / i) > 9)
 8002010:	e019      	b.n	8002046 <itoa10Unsigned+0x66>
  {
    i *= 10L;
 8002012:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002016:	4642      	mov	r2, r8
 8002018:	464b      	mov	r3, r9
 800201a:	f04f 0000 	mov.w	r0, #0
 800201e:	f04f 0100 	mov.w	r1, #0
 8002022:	0099      	lsls	r1, r3, #2
 8002024:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002028:	0090      	lsls	r0, r2, #2
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	eb12 0408 	adds.w	r4, r2, r8
 8002032:	eb43 0509 	adc.w	r5, r3, r9
 8002036:	eb14 0a04 	adds.w	sl, r4, r4
 800203a:	eb45 0b05 	adc.w	fp, r5, r5
 800203e:	4654      	mov	r4, sl
 8002040:	465d      	mov	r5, fp
 8002042:	e9c7 4504 	strd	r4, r5, [r7, #16]
  while ((num / i) > 9)
 8002046:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800204a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800204e:	f7fe fe0b 	bl	8000c68 <__aeabi_uldivmod>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	2a0a      	cmp	r2, #10
 8002058:	f173 0300 	sbcs.w	r3, r3, #0
 800205c:	d2d9      	bcs.n	8002012 <itoa10Unsigned+0x32>
  }

  do
  {
    putcf(digit[(num / i) % 10L]);
 800205e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002066:	f7fe fdff 	bl	8000c68 <__aeabi_uldivmod>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f04f 020a 	mov.w	r2, #10
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	f7fe fdf5 	bl	8000c68 <__aeabi_uldivmod>
 800207e:	4910      	ldr	r1, [pc, #64]	; (80020c0 <itoa10Unsigned+0xe0>)
 8002080:	188b      	adds	r3, r1, r2
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4610      	mov	r0, r2
 800208a:	4798      	blx	r3
    len++;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	3301      	adds	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
  }
  while (i /= 10L);
 8002092:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002096:	f04f 020a 	mov.w	r2, #10
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	f7fe fde3 	bl	8000c68 <__aeabi_uldivmod>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80020aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	d1d5      	bne.n	800205e <itoa10Unsigned+0x7e>

  return len;
 80020b2:	69fb      	ldr	r3, [r7, #28]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020be:	bf00      	nop
 80020c0:	08012508 	.word	0x08012508

080020c4 <itoa10>:

static int itoa10(putc_t putcf, long long int num, int precision)
{
 80020c4:	b5b0      	push	{r4, r5, r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (num == 0)
 80020d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020d8:	4313      	orrs	r3, r2
 80020da:	d104      	bne.n	80020e6 <itoa10+0x22>
  {
    putcf('0');
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2030      	movs	r0, #48	; 0x30
 80020e0:	4798      	blx	r3
    return 1;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e037      	b.n	8002156 <itoa10+0x92>
  }

  long long unsigned int n = num;
 80020e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (num < 0)
 80020ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	da0d      	bge.n	8002112 <itoa10+0x4e>
  {
    n = -num;
 80020f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020fa:	2100      	movs	r1, #0
 80020fc:	4254      	negs	r4, r2
 80020fe:	eb61 0503 	sbc.w	r5, r1, r3
 8002102:	e9c7 4506 	strd	r4, r5, [r7, #24]
    putcf('-');
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	202d      	movs	r0, #45	; 0x2d
 800210a:	4798      	blx	r3
    len++;
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	3301      	adds	r3, #1
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
  }

  int numLenght = getIntLen(num);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff27 	bl	8001f68 <getIntLen>
 800211a:	6138      	str	r0, [r7, #16]
  if (numLenght < precision)
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002120:	429a      	cmp	r2, r3
 8002122:	da10      	bge.n	8002146 <itoa10+0x82>
  {
    int fillWithZero = precision - numLenght;
 8002124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 800212c:	e008      	b.n	8002140 <itoa10+0x7c>
    {
      putcf('0');
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2030      	movs	r0, #48	; 0x30
 8002132:	4798      	blx	r3
      len++;
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	3301      	adds	r3, #1
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
      fillWithZero--;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3b01      	subs	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	dcf3      	bgt.n	800212e <itoa10+0x6a>
    }
  }

  return itoa10Unsigned(putcf, n) + len;
 8002146:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f7ff ff48 	bl	8001fe0 <itoa10Unsigned>
 8002150:	4602      	mov	r2, r0
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	4413      	add	r3, r2
}
 8002156:	4618      	mov	r0, r3
 8002158:	3728      	adds	r7, #40	; 0x28
 800215a:	46bd      	mov	sp, r7
 800215c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002160 <itoa16>:

static int itoa16(putc_t putcf, uint64_t num, int width, char padChar)
{
 8002160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002164:	b08d      	sub	sp, #52	; 0x34
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
  bool foundFirst = false;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  for (int i = 15; i >= 0; i--)
 8002178:	230f      	movs	r3, #15
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
 800217c:	e059      	b.n	8002232 <itoa16+0xd2>
  {
    int shift = i * 4;
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	623b      	str	r3, [r7, #32]
    uint64_t mask = (uint64_t)0x0F << shift;
 8002184:	f04f 020f 	mov.w	r2, #15
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	6a39      	ldr	r1, [r7, #32]
 800218e:	f1a1 0620 	sub.w	r6, r1, #32
 8002192:	f1c1 0020 	rsb	r0, r1, #32
 8002196:	fa03 f501 	lsl.w	r5, r3, r1
 800219a:	fa02 f606 	lsl.w	r6, r2, r6
 800219e:	4335      	orrs	r5, r6
 80021a0:	fa22 f000 	lsr.w	r0, r2, r0
 80021a4:	4305      	orrs	r5, r0
 80021a6:	fa02 f401 	lsl.w	r4, r2, r1
 80021aa:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint64_t val = (num & mask) >> shift;
 80021ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021b6:	ea00 0a02 	and.w	sl, r0, r2
 80021ba:	ea01 0b03 	and.w	fp, r1, r3
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	f1c3 0120 	rsb	r1, r3, #32
 80021c4:	f1a3 0220 	sub.w	r2, r3, #32
 80021c8:	fa2a f803 	lsr.w	r8, sl, r3
 80021cc:	fa0b f101 	lsl.w	r1, fp, r1
 80021d0:	ea48 0801 	orr.w	r8, r8, r1
 80021d4:	fa2b f202 	lsr.w	r2, fp, r2
 80021d8:	ea48 0802 	orr.w	r8, r8, r2
 80021dc:	fa2b f903 	lsr.w	r9, fp, r3
 80021e0:	e9c7 8904 	strd	r8, r9, [r7, #16]

    if (val > 0)
 80021e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	d002      	beq.n	80021f2 <itoa16+0x92>
    {
      foundFirst = true;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }

    if (foundFirst || i < width)
 80021f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <itoa16+0xa2>
 80021fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021fe:	429a      	cmp	r2, r3
 8002200:	da14      	bge.n	800222c <itoa16+0xcc>
    {
      if (foundFirst)
 8002202:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <itoa16+0xbc>
      {
        putcf(digit[val]);
 800220a:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <itoa16+0xe4>)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4610      	mov	r0, r2
 8002218:	4798      	blx	r3
 800221a:	e004      	b.n	8002226 <itoa16+0xc6>
      }
      else
      {
        putcf(padChar);
 800221c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4610      	mov	r0, r2
 8002224:	4798      	blx	r3
      }

      len++;
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	3301      	adds	r3, #1
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 15; i >= 0; i--)
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	3b01      	subs	r3, #1
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	2b00      	cmp	r3, #0
 8002236:	daa2      	bge.n	800217e <itoa16+0x1e>
    }
  }

  return len;
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800223a:	4618      	mov	r0, r3
 800223c:	3734      	adds	r7, #52	; 0x34
 800223e:	46bd      	mov	sp, r7
 8002240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002244:	08012508 	.word	0x08012508

08002248 <handleLongLong>:

static int handleLongLong(putc_t putcf, const char** fmt, unsigned long long int val, int width, char padChar)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	1c59      	adds	r1, r3, #1
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	6011      	str	r1, [r2, #0]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	3b58      	subs	r3, #88	; 0x58
 8002268:	2b20      	cmp	r3, #32
 800226a:	d861      	bhi.n	8002330 <handleLongLong+0xe8>
 800226c:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <handleLongLong+0x2c>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	08002319 	.word	0x08002319
 8002278:	08002331 	.word	0x08002331
 800227c:	08002331 	.word	0x08002331
 8002280:	08002331 	.word	0x08002331
 8002284:	08002331 	.word	0x08002331
 8002288:	08002331 	.word	0x08002331
 800228c:	08002331 	.word	0x08002331
 8002290:	08002331 	.word	0x08002331
 8002294:	08002331 	.word	0x08002331
 8002298:	08002331 	.word	0x08002331
 800229c:	08002331 	.word	0x08002331
 80022a0:	08002331 	.word	0x08002331
 80022a4:	080022f9 	.word	0x080022f9
 80022a8:	08002331 	.word	0x08002331
 80022ac:	08002331 	.word	0x08002331
 80022b0:	08002331 	.word	0x08002331
 80022b4:	08002331 	.word	0x08002331
 80022b8:	080022f9 	.word	0x080022f9
 80022bc:	08002331 	.word	0x08002331
 80022c0:	08002331 	.word	0x08002331
 80022c4:	08002331 	.word	0x08002331
 80022c8:	08002331 	.word	0x08002331
 80022cc:	08002331 	.word	0x08002331
 80022d0:	08002331 	.word	0x08002331
 80022d4:	08002331 	.word	0x08002331
 80022d8:	08002331 	.word	0x08002331
 80022dc:	08002331 	.word	0x08002331
 80022e0:	08002331 	.word	0x08002331
 80022e4:	08002331 	.word	0x08002331
 80022e8:	0800230b 	.word	0x0800230b
 80022ec:	08002331 	.word	0x08002331
 80022f0:	08002331 	.word	0x08002331
 80022f4:	08002319 	.word	0x08002319
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long long int)val, 0);
 80022f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022fc:	2100      	movs	r1, #0
 80022fe:	9100      	str	r1, [sp, #0]
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7ff fedf 	bl	80020c4 <itoa10>
 8002306:	6178      	str	r0, [r7, #20]
      break;
 8002308:	e013      	b.n	8002332 <handleLongLong+0xea>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 800230a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f7ff fe66 	bl	8001fe0 <itoa10Unsigned>
 8002314:	6178      	str	r0, [r7, #20]
      break;
 8002316:	e00c      	b.n	8002332 <handleLongLong+0xea>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 8002318:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f7ff ff1a 	bl	8002160 <itoa16>
 800232c:	6178      	str	r0, [r7, #20]
      break;
 800232e:	e000      	b.n	8002332 <handleLongLong+0xea>
    default:
      // Nothing here
      break;
 8002330:	bf00      	nop
  }

  return len;
 8002332:	697b      	ldr	r3, [r7, #20]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <handleLong>:

static int handleLong(putc_t putcf, const char** fmt, unsigned long int val, int width, char padChar)
{
 800233c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002340:	b088      	sub	sp, #32
 8002342:	af02      	add	r7, sp, #8
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	603b      	str	r3, [r7, #0]
  int len = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	1c59      	adds	r1, r3, #1
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	6011      	str	r1, [r2, #0]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	3b58      	subs	r3, #88	; 0x58
 800235e:	2b20      	cmp	r3, #32
 8002360:	d86c      	bhi.n	800243c <handleLong+0x100>
 8002362:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <handleLong+0x2c>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	0800241d 	.word	0x0800241d
 800236c:	0800243d 	.word	0x0800243d
 8002370:	0800243d 	.word	0x0800243d
 8002374:	0800243d 	.word	0x0800243d
 8002378:	0800243d 	.word	0x0800243d
 800237c:	0800243d 	.word	0x0800243d
 8002380:	0800243d 	.word	0x0800243d
 8002384:	0800243d 	.word	0x0800243d
 8002388:	0800243d 	.word	0x0800243d
 800238c:	0800243d 	.word	0x0800243d
 8002390:	0800243d 	.word	0x0800243d
 8002394:	0800243d 	.word	0x0800243d
 8002398:	080023ed 	.word	0x080023ed
 800239c:	0800243d 	.word	0x0800243d
 80023a0:	0800243d 	.word	0x0800243d
 80023a4:	0800243d 	.word	0x0800243d
 80023a8:	0800243d 	.word	0x0800243d
 80023ac:	080023ed 	.word	0x080023ed
 80023b0:	0800243d 	.word	0x0800243d
 80023b4:	0800243d 	.word	0x0800243d
 80023b8:	0800243d 	.word	0x0800243d
 80023bc:	0800243d 	.word	0x0800243d
 80023c0:	0800243d 	.word	0x0800243d
 80023c4:	0800243d 	.word	0x0800243d
 80023c8:	0800243d 	.word	0x0800243d
 80023cc:	0800243d 	.word	0x0800243d
 80023d0:	0800243d 	.word	0x0800243d
 80023d4:	0800243d 	.word	0x0800243d
 80023d8:	0800243d 	.word	0x0800243d
 80023dc:	08002407 	.word	0x08002407
 80023e0:	0800243d 	.word	0x0800243d
 80023e4:	0800243d 	.word	0x0800243d
 80023e8:	0800241d 	.word	0x0800241d
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long int)val, 0);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	17da      	asrs	r2, r3, #31
 80023f0:	469a      	mov	sl, r3
 80023f2:	4693      	mov	fp, r2
 80023f4:	2300      	movs	r3, #0
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4652      	mov	r2, sl
 80023fa:	465b      	mov	r3, fp
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f7ff fe61 	bl	80020c4 <itoa10>
 8002402:	6178      	str	r0, [r7, #20]
      break;
 8002404:	e01b      	b.n	800243e <handleLong+0x102>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	4698      	mov	r8, r3
 800240c:	4691      	mov	r9, r2
 800240e:	4642      	mov	r2, r8
 8002410:	464b      	mov	r3, r9
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f7ff fde4 	bl	8001fe0 <itoa10Unsigned>
 8002418:	6178      	str	r0, [r7, #20]
      break;
 800241a:	e010      	b.n	800243e <handleLong+0x102>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	461c      	mov	r4, r3
 8002422:	4615      	mov	r5, r2
 8002424:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	4622      	mov	r2, r4
 8002430:	462b      	mov	r3, r5
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f7ff fe94 	bl	8002160 <itoa16>
 8002438:	6178      	str	r0, [r7, #20]
      break;
 800243a:	e000      	b.n	800243e <handleLong+0x102>
    default:
      // Nothing here
      break;
 800243c:	bf00      	nop
  }

  return len;
 800243e:	697b      	ldr	r3, [r7, #20]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800244a:	bf00      	nop

0800244c <evprintf>:

int evprintf(putc_t putcf, const char * fmt, va_list ap)
{
 800244c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002450:	ed2d 8b02 	vpush	{d8}
 8002454:	b08e      	sub	sp, #56	; 0x38
 8002456:	af02      	add	r7, sp, #8
 8002458:	6178      	str	r0, [r7, #20]
 800245a:	6139      	str	r1, [r7, #16]
 800245c:	60fa      	str	r2, [r7, #12]
  int len=0;
 800245e:	2300      	movs	r3, #0
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
  char* str;
  int precision;
  int width;
  char padChar;

  while (*fmt)
 8002462:	e1ac      	b.n	80027be <evprintf+0x372>
  {
    if (*fmt == '%')
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b25      	cmp	r3, #37	; 0x25
 800246a:	f040 819d 	bne.w	80027a8 <evprintf+0x35c>
    {
      precision = 6;
 800246e:	2306      	movs	r3, #6
 8002470:	623b      	str	r3, [r7, #32]
      padChar = ' ';
 8002472:	2320      	movs	r3, #32
 8002474:	76fb      	strb	r3, [r7, #27]
      width = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]

      fmt++;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	3301      	adds	r3, #1
 800247e:	613b      	str	r3, [r7, #16]
      if (*fmt == '%') {
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b25      	cmp	r3, #37	; 0x25
 8002486:	d110      	bne.n	80024aa <evprintf+0x5e>
        putcf(*fmt++);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	613a      	str	r2, [r7, #16]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	4610      	mov	r0, r2
 8002496:	4798      	blx	r3
        len++;
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	3301      	adds	r3, #1
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
        continue;
 800249e:	e18e      	b.n	80027be <evprintf+0x372>
      }

      while ('0' == *fmt)
      {
        padChar = '0';
 80024a0:	2330      	movs	r3, #48	; 0x30
 80024a2:	76fb      	strb	r3, [r7, #27]
        fmt++;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	3301      	adds	r3, #1
 80024a8:	613b      	str	r3, [r7, #16]
      while ('0' == *fmt)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b30      	cmp	r3, #48	; 0x30
 80024b0:	d0f6      	beq.n	80024a0 <evprintf+0x54>
      }

			while(isdigit((unsigned)*fmt))
 80024b2:	e00e      	b.n	80024d2 <evprintf+0x86>
			{
				width *= 10;
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
				width += *fmt - '0';
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	3b30      	subs	r3, #48	; 0x30
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	4413      	add	r3, r2
 80024ca:	61fb      	str	r3, [r7, #28]
				fmt++;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	3301      	adds	r3, #1
 80024d0:	613b      	str	r3, [r7, #16]
			while(isdigit((unsigned)*fmt))
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	4ab2      	ldr	r2, [pc, #712]	; (80027a4 <evprintf+0x358>)
 80024da:	4413      	add	r3, r2
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1e6      	bne.n	80024b4 <evprintf+0x68>
			}

      while (!isalpha((unsigned) *fmt))
 80024e6:	e017      	b.n	8002518 <evprintf+0xcc>
      {
        if (*fmt == '.')
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b2e      	cmp	r3, #46	; 0x2e
 80024ee:	d113      	bne.n	8002518 <evprintf+0xcc>
        {
          fmt++;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	3301      	adds	r3, #1
 80024f4:	613b      	str	r3, [r7, #16]
          if (isdigit((unsigned)*fmt))
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	3301      	adds	r3, #1
 80024fc:	4aa9      	ldr	r2, [pc, #676]	; (80027a4 <evprintf+0x358>)
 80024fe:	4413      	add	r3, r2
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <evprintf+0xcc>
          {
            precision = *fmt - '0';
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	3b30      	subs	r3, #48	; 0x30
 8002510:	623b      	str	r3, [r7, #32]
            fmt++;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	3301      	adds	r3, #1
 8002516:	613b      	str	r3, [r7, #16]
      while (!isalpha((unsigned) *fmt))
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	4aa1      	ldr	r2, [pc, #644]	; (80027a4 <evprintf+0x358>)
 8002520:	4413      	add	r3, r2
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0dd      	beq.n	80024e8 <evprintf+0x9c>
          }
        }
      }
      switch (*fmt++)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	613a      	str	r2, [r7, #16]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	3b58      	subs	r3, #88	; 0x58
 8002536:	2b20      	cmp	r3, #32
 8002538:	f200 8132 	bhi.w	80027a0 <evprintf+0x354>
 800253c:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <evprintf+0xf8>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	08002611 	.word	0x08002611
 8002548:	080027a1 	.word	0x080027a1
 800254c:	080027a1 	.word	0x080027a1
 8002550:	080027a1 	.word	0x080027a1
 8002554:	080027a1 	.word	0x080027a1
 8002558:	080027a1 	.word	0x080027a1
 800255c:	080027a1 	.word	0x080027a1
 8002560:	080027a1 	.word	0x080027a1
 8002564:	080027a1 	.word	0x080027a1
 8002568:	080027a1 	.word	0x080027a1
 800256c:	080027a1 	.word	0x080027a1
 8002570:	08002787 	.word	0x08002787
 8002574:	080025c9 	.word	0x080025c9
 8002578:	080027a1 	.word	0x080027a1
 800257c:	0800269b 	.word	0x0800269b
 8002580:	080027a1 	.word	0x080027a1
 8002584:	080027a1 	.word	0x080027a1
 8002588:	080025c9 	.word	0x080025c9
 800258c:	080027a1 	.word	0x080027a1
 8002590:	080027a1 	.word	0x080027a1
 8002594:	0800263b 	.word	0x0800263b
 8002598:	080027a1 	.word	0x080027a1
 800259c:	080027a1 	.word	0x080027a1
 80025a0:	080027a1 	.word	0x080027a1
 80025a4:	080027a1 	.word	0x080027a1
 80025a8:	080027a1 	.word	0x080027a1
 80025ac:	080027a1 	.word	0x080027a1
 80025b0:	0800275b 	.word	0x0800275b
 80025b4:	080027a1 	.word	0x080027a1
 80025b8:	080025ef 	.word	0x080025ef
 80025bc:	080027a1 	.word	0x080027a1
 80025c0:	080027a1 	.word	0x080027a1
 80025c4:	08002611 	.word	0x08002611
      {
        case 'i':
        case 'd':
          len += itoa10(putcf, va_arg(ap, int), 0);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1d1a      	adds	r2, r3, #4
 80025cc:	60fa      	str	r2, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	17da      	asrs	r2, r3, #31
 80025d2:	461c      	mov	r4, r3
 80025d4:	4615      	mov	r5, r2
 80025d6:	2300      	movs	r3, #0
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4622      	mov	r2, r4
 80025dc:	462b      	mov	r3, r5
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f7ff fd70 	bl	80020c4 <itoa10>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	4413      	add	r3, r2
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 80025ec:	e0e7      	b.n	80027be <evprintf+0x372>
        case 'u':
          len += itoa10Unsigned(putcf, va_arg(ap, unsigned int));
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1d1a      	adds	r2, r3, #4
 80025f2:	60fa      	str	r2, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	4698      	mov	r8, r3
 80025fa:	4691      	mov	r9, r2
 80025fc:	4642      	mov	r2, r8
 80025fe:	464b      	mov	r3, r9
 8002600:	6978      	ldr	r0, [r7, #20]
 8002602:	f7ff fced 	bl	8001fe0 <itoa10Unsigned>
 8002606:	4602      	mov	r2, r0
 8002608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260a:	4413      	add	r3, r2
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 800260e:	e0d6      	b.n	80027be <evprintf+0x372>
        case 'x':
        case 'X':
          len += itoa16(putcf, va_arg(ap, unsigned int), width, padChar);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1d1a      	adds	r2, r3, #4
 8002614:	60fa      	str	r2, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2200      	movs	r2, #0
 800261a:	469a      	mov	sl, r3
 800261c:	4693      	mov	fp, r2
 800261e:	7efb      	ldrb	r3, [r7, #27]
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	4652      	mov	r2, sl
 8002628:	465b      	mov	r3, fp
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff fd98 	bl	8002160 <itoa16>
 8002630:	4602      	mov	r2, r0
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	4413      	add	r3, r2
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002638:	e0c1      	b.n	80027be <evprintf+0x372>
        case 'l':
          // Look ahead for ll
          if (*fmt == 'l') {
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b6c      	cmp	r3, #108	; 0x6c
 8002640:	d11a      	bne.n	8002678 <evprintf+0x22c>
            fmt++;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	3301      	adds	r3, #1
 8002646:	613b      	str	r3, [r7, #16]
            len += handleLongLong(putcf, &fmt, va_arg(ap, unsigned long long int), width, padChar);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3307      	adds	r3, #7
 800264c:	f023 0307 	bic.w	r3, r3, #7
 8002650:	f103 0208 	add.w	r2, r3, #8
 8002654:	60fa      	str	r2, [r7, #12]
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f107 0010 	add.w	r0, r7, #16
 800265e:	7ef9      	ldrb	r1, [r7, #27]
 8002660:	9101      	str	r1, [sp, #4]
 8002662:	69f9      	ldr	r1, [r7, #28]
 8002664:	9100      	str	r1, [sp, #0]
 8002666:	4601      	mov	r1, r0
 8002668:	6978      	ldr	r0, [r7, #20]
 800266a:	f7ff fded 	bl	8002248 <handleLongLong>
 800266e:	4602      	mov	r2, r0
 8002670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002672:	4413      	add	r3, r2
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
          } else {
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
          }

          break;
 8002676:	e0a2      	b.n	80027be <evprintf+0x372>
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1d1a      	adds	r2, r3, #4
 800267c:	60fa      	str	r2, [r7, #12]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f107 0110 	add.w	r1, r7, #16
 8002684:	7efb      	ldrb	r3, [r7, #27]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	6978      	ldr	r0, [r7, #20]
 800268c:	f7ff fe56 	bl	800233c <handleLong>
 8002690:	4602      	mov	r2, r0
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	4413      	add	r3, r2
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002698:	e091      	b.n	80027be <evprintf+0x372>
        case 'f':
          num = va_arg(ap, double);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3307      	adds	r3, #7
 800269e:	f023 0307 	bic.w	r3, r3, #7
 80026a2:	f103 0208 	add.w	r2, r3, #8
 80026a6:	60fa      	str	r2, [r7, #12]
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	f7fe fa8a 	bl	8000bc8 <__aeabi_d2f>
 80026b4:	4603      	mov	r3, r0
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
          if(num<0)
 80026b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c4:	d50b      	bpl.n	80026de <evprintf+0x292>
          {
            putcf('-');
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	202d      	movs	r0, #45	; 0x2d
 80026ca:	4798      	blx	r3
            num = -num;
 80026cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026d0:	eef1 7a67 	vneg.f32	s15, s15
 80026d4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            len++;
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	3301      	adds	r3, #1
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
          }
          len += itoa10(putcf, (int)num, 0);
 80026de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e6:	ee17 2a90 	vmov	r2, s15
 80026ea:	17d3      	asrs	r3, r2, #31
 80026ec:	603a      	str	r2, [r7, #0]
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	2300      	movs	r3, #0
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026f8:	6978      	ldr	r0, [r7, #20]
 80026fa:	f7ff fce3 	bl	80020c4 <itoa10>
 80026fe:	4602      	mov	r2, r0
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	4413      	add	r3, r2
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
          putcf('.'); len++;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	202e      	movs	r0, #46	; 0x2e
 800270a:	4798      	blx	r3
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	3301      	adds	r3, #1
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
          len += itoa10(putcf, (num - (int)num) * power(10,precision), precision);
 8002712:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800271a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800271e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002722:	ee37 8a67 	vsub.f32	s16, s14, s15
 8002726:	6a39      	ldr	r1, [r7, #32]
 8002728:	200a      	movs	r0, #10
 800272a:	f7ff fc3b 	bl	8001fa4 <power>
 800272e:	ee07 0a90 	vmov	s15, r0
 8002732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002736:	ee68 7a27 	vmul.f32	s15, s16, s15
 800273a:	ee17 0a90 	vmov	r0, s15
 800273e:	f7fe faab 	bl	8000c98 <__aeabi_f2lz>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	6a39      	ldr	r1, [r7, #32]
 8002748:	9100      	str	r1, [sp, #0]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff fcba 	bl	80020c4 <itoa10>
 8002750:	4602      	mov	r2, r0
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	4413      	add	r3, r2
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002758:	e031      	b.n	80027be <evprintf+0x372>
        case 's':
          str = va_arg(ap, char* );
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1d1a      	adds	r2, r3, #4
 800275e:	60fa      	str	r2, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
          while(*str)
 8002764:	e00a      	b.n	800277c <evprintf+0x330>
          {
            putcf(*str++);
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	627a      	str	r2, [r7, #36]	; 0x24
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	4610      	mov	r0, r2
 8002774:	4798      	blx	r3
            len++;
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	3301      	adds	r3, #1
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
          while(*str)
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f0      	bne.n	8002766 <evprintf+0x31a>
          }
          break;
 8002784:	e01b      	b.n	80027be <evprintf+0x372>
        case 'c':
          putcf((char)va_arg(ap, int));
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1d1a      	adds	r2, r3, #4
 800278a:	60fa      	str	r2, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	4610      	mov	r0, r2
 8002796:	4798      	blx	r3
          len++;
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279a:	3301      	adds	r3, #1
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 800279e:	e00e      	b.n	80027be <evprintf+0x372>
        default:
          break;
 80027a0:	bf00      	nop
 80027a2:	e00c      	b.n	80027be <evprintf+0x372>
 80027a4:	08012538 	.word	0x08012538
      }
    }
    else
    {
      putcf(*fmt++);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	613a      	str	r2, [r7, #16]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	4610      	mov	r0, r2
 80027b6:	4798      	blx	r3
      len++;
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	3301      	adds	r3, #1
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (*fmt)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f47f ae4e 	bne.w	8002464 <evprintf+0x18>
    }
  }
  
  return len;
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3730      	adds	r7, #48	; 0x30
 80027ce:	46bd      	mov	sp, r7
 80027d0:	ecbd 8b02 	vpop	{d8}
 80027d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080027d8 <eprintf>:

int eprintf(putc_t putcf, const char * fmt, ...)
{
 80027d8:	b40e      	push	{r1, r2, r3}
 80027da:	b580      	push	{r7, lr}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  va_list ap;
  int len;

  va_start(ap, fmt);
 80027e2:	f107 0320 	add.w	r3, r7, #32
 80027e6:	60bb      	str	r3, [r7, #8]
  len = evprintf(putcf, fmt, ap);
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	69f9      	ldr	r1, [r7, #28]
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff fe2d 	bl	800244c <evprintf>
 80027f2:	60f8      	str	r0, [r7, #12]
  va_end(ap);

  return len;
 80027f4:	68fb      	ldr	r3, [r7, #12]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002800:	b003      	add	sp, #12
 8002802:	4770      	bx	lr

08002804 <queueMonitorInit>:
static int getMaxWaiting(xQueueHandle* xQueue, int prevPeak);
static void resetCounters();

unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue );

void queueMonitorInit() {
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b083      	sub	sp, #12
 8002808:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 800280a:	4b19      	ldr	r3, [pc, #100]	; (8002870 <queueMonitorInit+0x6c>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	f083 0301 	eor.w	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d104      	bne.n	8002822 <queueMonitorInit+0x1e>
 8002818:	2248      	movs	r2, #72	; 0x48
 800281a:	4916      	ldr	r1, [pc, #88]	; (8002874 <queueMonitorInit+0x70>)
 800281c:	4816      	ldr	r0, [pc, #88]	; (8002878 <queueMonitorInit+0x74>)
 800281e:	f7ff fab3 	bl	8001d88 <assertFail>
  timer = xTimerCreateStatic( "queueMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <queueMonitorInit+0x78>)
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	4b16      	ldr	r3, [pc, #88]	; (8002880 <queueMonitorInit+0x7c>)
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2300      	movs	r3, #0
 800282c:	2201      	movs	r2, #1
 800282e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002832:	4814      	ldr	r0, [pc, #80]	; (8002884 <queueMonitorInit+0x80>)
 8002834:	f00a feb2 	bl	800d59c <xTimerCreateStatic>
 8002838:	4603      	mov	r3, r0
 800283a:	4a13      	ldr	r2, [pc, #76]	; (8002888 <queueMonitorInit+0x84>)
 800283c:	6013      	str	r3, [r2, #0]
  xTimerStart(timer, 100);
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <queueMonitorInit+0x84>)
 8002840:	681c      	ldr	r4, [r3, #0]
 8002842:	f00a f859 	bl	800c8f8 <xTaskGetTickCount>
 8002846:	4602      	mov	r2, r0
 8002848:	2364      	movs	r3, #100	; 0x64
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2300      	movs	r3, #0
 800284e:	2101      	movs	r1, #1
 8002850:	4620      	mov	r0, r4
 8002852:	f00a ff1d 	bl	800d690 <xTimerGenericCommand>

  data[0].fileName = "Na";
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <queueMonitorInit+0x88>)
 8002858:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <queueMonitorInit+0x8c>)
 800285a:	601a      	str	r2, [r3, #0]
  data[0].queueName = "Na";
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <queueMonitorInit+0x88>)
 800285e:	4a0c      	ldr	r2, [pc, #48]	; (8002890 <queueMonitorInit+0x8c>)
 8002860:	605a      	str	r2, [r3, #4]

  initialized = true;
 8002862:	4b03      	ldr	r3, [pc, #12]	; (8002870 <queueMonitorInit+0x6c>)
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
}
 8002868:	bf00      	nop
 800286a:	3704      	adds	r7, #4
 800286c:	46bd      	mov	sp, r7
 800286e:	bd90      	pop	{r4, r7, pc}
 8002870:	20001d38 	.word	0x20001d38
 8002874:	08011ca4 	.word	0x08011ca4
 8002878:	08011cc8 	.word	0x08011cc8
 800287c:	20001d0c 	.word	0x20001d0c
 8002880:	08002a31 	.word	0x08002a31
 8002884:	08011cd8 	.word	0x08011cd8
 8002888:	20001d08 	.word	0x20001d08
 800288c:	20001b78 	.word	0x20001b78
 8002890:	08011cec 	.word	0x08011cec

08002894 <qmRegisterQueue>:

    queueData->fullCount++;
  }
}

void qmRegisterQueue(xQueueHandle* xQueue, char* fileName, char* queueName) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  ASSERT(initialized);
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <qmRegisterQueue+0x70>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <qmRegisterQueue+0x1e>
 80028a8:	2265      	movs	r2, #101	; 0x65
 80028aa:	4917      	ldr	r1, [pc, #92]	; (8002908 <qmRegisterQueue+0x74>)
 80028ac:	4817      	ldr	r0, [pc, #92]	; (800290c <qmRegisterQueue+0x78>)
 80028ae:	f7ff fa6b 	bl	8001d88 <assertFail>
  ASSERT(nrOfQueues < MAX_NR_OF_QUEUES);
 80028b2:	4b17      	ldr	r3, [pc, #92]	; (8002910 <qmRegisterQueue+0x7c>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b13      	cmp	r3, #19
 80028b8:	d904      	bls.n	80028c4 <qmRegisterQueue+0x30>
 80028ba:	2266      	movs	r2, #102	; 0x66
 80028bc:	4912      	ldr	r1, [pc, #72]	; (8002908 <qmRegisterQueue+0x74>)
 80028be:	4815      	ldr	r0, [pc, #84]	; (8002914 <qmRegisterQueue+0x80>)
 80028c0:	f7ff fa62 	bl	8001d88 <assertFail>
  Data* queueData = &data[nrOfQueues];
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <qmRegisterQueue+0x7c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4a11      	ldr	r2, [pc, #68]	; (8002918 <qmRegisterQueue+0x84>)
 80028d4:	4413      	add	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]

  queueData->fileName = fileName;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	601a      	str	r2, [r3, #0]
  queueData->queueName = queueName;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	605a      	str	r2, [r3, #4]
  vQueueSetQueueNumber(xQueue, nrOfQueues);
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <qmRegisterQueue+0x7c>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4619      	mov	r1, r3
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f009 fb64 	bl	800bfb8 <vQueueSetQueueNumber>

  nrOfQueues++;
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <qmRegisterQueue+0x7c>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	3301      	adds	r3, #1
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <qmRegisterQueue+0x7c>)
 80028fa:	701a      	strb	r2, [r3, #0]
}
 80028fc:	bf00      	nop
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20001d38 	.word	0x20001d38
 8002908:	08011ca4 	.word	0x08011ca4
 800290c:	08011cf0 	.word	0x08011cf0
 8002910:	200000bb 	.word	0x200000bb
 8002914:	08011cfc 	.word	0x08011cfc
 8002918:	20001b78 	.word	0x20001b78

0800291c <debugPrint>:
    return waiting;
  }
  return prevPeak;
}

static void debugPrint() {
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
  int i = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	e013      	b.n	8002954 <debugPrint+0x38>
    Data* queueData = &data[i];
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4a0d      	ldr	r2, [pc, #52]	; (800296c <debugPrint+0x50>)
 8002938:	4413      	add	r3, r2
 800293a:	603b      	str	r3, [r7, #0]
    if (filter(queueData)) {
 800293c:	6838      	ldr	r0, [r7, #0]
 800293e:	f000 f819 	bl	8002974 <filter>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <debugPrint+0x32>
      debugPrintQueue(queueData);
 8002948:	6838      	ldr	r0, [r7, #0]
 800294a:	f000 f827 	bl	800299c <debugPrintQueue>
  for (i = 0; i < nrOfQueues; i++) {
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3301      	adds	r3, #1
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <debugPrint+0x54>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4293      	cmp	r3, r2
 800295e:	dbe5      	blt.n	800292c <debugPrint+0x10>
    }
  }

  if (RESET_COUNTERS_AFTER_DISPLAY) {
    resetCounters();
 8002960:	f000 f838 	bl	80029d4 <resetCounters>
  }
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20001b78 	.word	0x20001b78
 8002970:	200000bb 	.word	0x200000bb

08002974 <filter>:

static bool filter(Data* queueData) {
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  bool doDisplay = false;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]
  if (DISPLAY_ONLY_OVERFLOW_QUEUES) {
    doDisplay = (queueData->fullCount != 0);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf14      	ite	ne
 8002988:	2301      	movne	r3, #1
 800298a:	2300      	moveq	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  } else {
    doDisplay = true;
  }
  return doDisplay;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <debugPrintQueue>:

static void debugPrintQueue(Data* queueData) {
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b085      	sub	sp, #20
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	6078      	str	r0, [r7, #4]
  printf("%s:%s, sent: %i, peak: %i, full: %i\n",queueData->fileName, queueData->queueName, queueData->sendCount,queueData->maxWaiting, queueData->fullCount);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6819      	ldr	r1, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6858      	ldr	r0, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689c      	ldr	r4, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6912      	ldr	r2, [r2, #16]
 80029b8:	9201      	str	r2, [sp, #4]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	4623      	mov	r3, r4
 80029be:	4602      	mov	r2, r0
 80029c0:	4803      	ldr	r0, [pc, #12]	; (80029d0 <debugPrintQueue+0x34>)
 80029c2:	f00d f87b 	bl	800fabc <iprintf>
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd90      	pop	{r4, r7, pc}
 80029ce:	bf00      	nop
 80029d0:	08011d38 	.word	0x08011d38

080029d4 <resetCounters>:

static void resetCounters() {
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
  int i = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	e013      	b.n	8002a0c <resetCounters+0x38>
    Data* queueData = &data[i];
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <resetCounters+0x54>)
 80029f0:	4413      	add	r3, r2
 80029f2:	603b      	str	r3, [r7, #0]

    queueData->sendCount = 0;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
    queueData->maxWaiting = 0;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2200      	movs	r2, #0
 80029fe:	60da      	str	r2, [r3, #12]
    queueData->fullCount = 0;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  for (i = 0; i < nrOfQueues; i++) {
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <resetCounters+0x58>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4293      	cmp	r3, r2
 8002a16:	dbe5      	blt.n	80029e4 <resetCounters+0x10>
  }
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20001b78 	.word	0x20001b78
 8002a2c:	200000bb 	.word	0x200000bb

08002a30 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  debugPrint();
 8002a38:	f7ff ff70 	bl	800291c <debugPrint>
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
return 0;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4a06      	ldr	r2, [pc, #24]	; (8002aa8 <vApplicationGetIdleTaskMemory+0x30>)
 8002a8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2280      	movs	r2, #128	; 0x80
 8002a94:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20001d3c 	.word	0x20001d3c
 8002aa8:	20001df0 	.word	0x20001df0

08002aac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002abc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	4a06      	ldr	r2, [pc, #24]	; (8002adc <vApplicationGetTimerTaskMemory+0x30>)
 8002ac2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	20001ff0 	.word	0x20001ff0
 8002adc:	200020a4 	.word	0x200020a4

08002ae0 <LL_SPI_SetStandard>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f023 0210 	bic.w	r2, r3, #16
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	605a      	str	r2, [r3, #4]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <LL_AHB1_GRP1_EnableClock>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b14:	4907      	ldr	r1, [pc, #28]	; (8002b34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4013      	ands	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40023800 	.word	0x40023800

08002b38 <LL_APB2_GRP1_EnableClock>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b44:	4907      	ldr	r1, [pc, #28]	; (8002b64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4013      	ands	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40023800 	.word	0x40023800

08002b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b68:	b5b0      	push	{r4, r5, r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b6e:	f000 fde5 	bl	800373c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b72:	f000 f877 	bl	8002c64 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b76:	f000 f9af 	bl	8002ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b7a:	f000 f98d 	bl	8002e98 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8002b7e:	f000 f961 	bl	8002e44 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8002b82:	f000 f929 	bl	8002dd8 <MX_TIM7_Init>
  MX_SPI1_Init();
 8002b86:	f000 f8d5 	bl	8002d34 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

//  InitTick(72000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8002b8a:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <main+0xd0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <main+0xd0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0220 	orr.w	r2, r2, #32
 8002b98:	60da      	str	r2, [r3, #12]

  freertos_IntroTitle();
 8002b9a:	f000 fa29 	bl	8002ff0 <freertos_IntroTitle>
  DEBUG_PRINT("[TASK]main\n");
 8002b9e:	4927      	ldr	r1, [pc, #156]	; (8002c3c <main+0xd4>)
 8002ba0:	4827      	ldr	r0, [pc, #156]	; (8002c40 <main+0xd8>)
 8002ba2:	f7ff fe19 	bl	80027d8 <eprintf>


  check_enter_bootloader();
 8002ba6:	f7fe fc59 	bl	800145c <check_enter_bootloader>

  int err = platformInit();
 8002baa:	f7fe ffe6 	bl	8001b7a <platformInit>
 8002bae:	61f8      	str	r0, [r7, #28]
  if (err != 0) {
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d000      	beq.n	8002bb8 <main+0x50>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 8002bb6:	e7fe      	b.n	8002bb6 <main+0x4e>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 8002bb8:	4822      	ldr	r0, [pc, #136]	; (8002c44 <main+0xdc>)
 8002bba:	f003 fbd1 	bl	8006360 <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <main+0xe0>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <main+0xe4>)
 8002bc4:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1ms
 8002bc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bca:	f000 fa9f 	bl	800310c <delay_us>
//  usDelay(10);
//  HAL_Delay(1);
  t2 = DWT->CYCCNT;
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <main+0xe0>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <main+0xe8>)
 8002bd4:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 8002bd6:	481b      	ldr	r0, [pc, #108]	; (8002c44 <main+0xdc>)
 8002bd8:	f003 fc32 	bl	8006440 <HAL_TIM_Base_Stop_IT>
  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
 8002bdc:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <main+0xe8>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <main+0xe4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	ee07 3a90 	vmov	s15, r3
 8002bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002c54 <main+0xec>
 8002bf2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bf6:	ee16 0a90 	vmov	r0, s13
 8002bfa:	f7fd fcb5 	bl	8000568 <__aeabi_f2d>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4915      	ldr	r1, [pc, #84]	; (8002c58 <main+0xf0>)
 8002c04:	480e      	ldr	r0, [pc, #56]	; (8002c40 <main+0xd8>)
 8002c06:	f7ff fde7 	bl	80027d8 <eprintf>
//  uint32_t ld = SysTick->LOAD;


  systemLaunch();
 8002c0a:	f7fe fd69 	bl	80016e0 <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <main+0xf4>)
 8002c10:	463c      	mov	r4, r7
 8002c12:	461d      	mov	r5, r3
 8002c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002c20:	463b      	mov	r3, r7
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f008 fae2 	bl	800b1ee <osThreadCreate>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <main+0xf8>)
 8002c2e:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002c30:	f008 fad6 	bl	800b1e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <main+0xcc>
 8002c36:	bf00      	nop
 8002c38:	200028ec 	.word	0x200028ec
 8002c3c:	08011d60 	.word	0x08011d60
 8002c40:	08001f49 	.word	0x08001f49
 8002c44:	200028a4 	.word	0x200028a4
 8002c48:	e0001000 	.word	0xe0001000
 8002c4c:	20002998 	.word	0x20002998
 8002c50:	2000299c 	.word	0x2000299c
 8002c54:	42900000 	.word	0x42900000
 8002c58:	08011d6c 	.word	0x08011d6c
 8002c5c:	08011d8c 	.word	0x08011d8c
 8002c60:	20002994 	.word	0x20002994

08002c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b094      	sub	sp, #80	; 0x50
 8002c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c6a:	f107 0320 	add.w	r3, r7, #32
 8002c6e:	2230      	movs	r2, #48	; 0x30
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f00d f814 	bl	800fca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c78:	f107 030c 	add.w	r3, r7, #12
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <SystemClock_Config+0xc8>)
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <SystemClock_Config+0xc8>)
 8002c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c96:	6413      	str	r3, [r2, #64]	; 0x40
 8002c98:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <SystemClock_Config+0xc8>)
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	607b      	str	r3, [r7, #4]
 8002ca8:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <SystemClock_Config+0xcc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a20      	ldr	r2, [pc, #128]	; (8002d30 <SystemClock_Config+0xcc>)
 8002cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <SystemClock_Config+0xcc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002cd8:	2348      	movs	r3, #72	; 0x48
 8002cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ce4:	f107 0320 	add.w	r3, r7, #32
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f002 fe51 	bl	8005990 <HAL_RCC_OscConfig>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002cf4:	f000 fa38 	bl	8003168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cf8:	230f      	movs	r3, #15
 8002cfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d0e:	f107 030c 	add.w	r3, r7, #12
 8002d12:	2102      	movs	r1, #2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 f8b3 	bl	8005e80 <HAL_RCC_ClockConfig>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002d20:	f000 fa22 	bl	8003168 <Error_Handler>
  }
}
 8002d24:	bf00      	nop
 8002d26:	3750      	adds	r7, #80	; 0x50
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40007000 	.word	0x40007000

08002d34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b090      	sub	sp, #64	; 0x40
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002d3a:	f107 0318 	add.w	r3, r7, #24
 8002d3e:	2228      	movs	r2, #40	; 0x28
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f00c ffac 	bl	800fca0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	463b      	mov	r3, r7
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	60da      	str	r2, [r3, #12]
 8002d54:	611a      	str	r2, [r3, #16]
 8002d56:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002d58:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d5c:	f7ff feec 	bl	8002b38 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002d60:	2001      	movs	r0, #1
 8002d62:	f7ff fed1 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002d66:	23e0      	movs	r3, #224	; 0xe0
 8002d68:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002d7a:	2305      	movs	r3, #5
 8002d7c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7e:	463b      	mov	r3, r7
 8002d80:	4619      	mov	r1, r3
 8002d82:	4813      	ldr	r0, [pc, #76]	; (8002dd0 <MX_SPI1_Init+0x9c>)
 8002d84:	f004 fe53 	bl	8007a2e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002d8c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002d90:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002d96:	2302      	movs	r3, #2
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002da4:	2310      	movs	r3, #16
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002da8:	2300      	movs	r3, #0
 8002daa:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002db0:	230a      	movs	r3, #10
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002db4:	f107 0318 	add.w	r3, r7, #24
 8002db8:	4619      	mov	r1, r3
 8002dba:	4806      	ldr	r0, [pc, #24]	; (8002dd4 <MX_SPI1_Init+0xa0>)
 8002dbc:	f004 fedb 	bl	8007b76 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4804      	ldr	r0, [pc, #16]	; (8002dd4 <MX_SPI1_Init+0xa0>)
 8002dc4:	f7ff fe8c 	bl	8002ae0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002dc8:	bf00      	nop
 8002dca:	3740      	adds	r7, #64	; 0x40
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40013000 	.word	0x40013000

08002dd8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dde:	463b      	mov	r3, r7
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <MX_TIM7_Init+0x64>)
 8002de8:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <MX_TIM7_Init+0x68>)
 8002dea:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8002dec:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <MX_TIM7_Init+0x64>)
 8002dee:	2247      	movs	r2, #71	; 0x47
 8002df0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df2:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <MX_TIM7_Init+0x64>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002df8:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <MX_TIM7_Init+0x64>)
 8002dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dfe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e00:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <MX_TIM7_Init+0x64>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002e06:	480d      	ldr	r0, [pc, #52]	; (8002e3c <MX_TIM7_Init+0x64>)
 8002e08:	f003 fa5a 	bl	80062c0 <HAL_TIM_Base_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002e12:	f000 f9a9 	bl	8003168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002e1e:	463b      	mov	r3, r7
 8002e20:	4619      	mov	r1, r3
 8002e22:	4806      	ldr	r0, [pc, #24]	; (8002e3c <MX_TIM7_Init+0x64>)
 8002e24:	f003 fd0a 	bl	800683c <HAL_TIMEx_MasterConfigSynchronization>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002e2e:	f000 f99b 	bl	8003168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	200028a4 	.word	0x200028a4
 8002e40:	40001400 	.word	0x40001400

08002e44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e4a:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <MX_USART6_UART_Init+0x50>)
 8002e4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002e7a:	4805      	ldr	r0, [pc, #20]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e7c:	f003 fd6e 	bl	800695c <HAL_UART_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002e86:	f000 f96f 	bl	8003168 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200028ec 	.word	0x200028ec
 8002e94:	40011400 	.word	0x40011400

08002e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <MX_DMA_Init+0x3c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <MX_DMA_Init+0x3c>)
 8002ea8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <MX_DMA_Init+0x3c>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2105      	movs	r1, #5
 8002ebe:	2045      	movs	r0, #69	; 0x45
 8002ec0:	f000 fdad 	bl	8003a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002ec4:	2045      	movs	r0, #69	; 0x45
 8002ec6:	f000 fdc6 	bl	8003a56 <HAL_NVIC_EnableIRQ>

}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800

08002ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	; 0x28
 8002edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	60da      	str	r2, [r3, #12]
 8002eec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <MX_GPIO_Init+0xf4>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a35      	ldr	r2, [pc, #212]	; (8002fcc <MX_GPIO_Init+0xf4>)
 8002ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b33      	ldr	r3, [pc, #204]	; (8002fcc <MX_GPIO_Init+0xf4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	4b2f      	ldr	r3, [pc, #188]	; (8002fcc <MX_GPIO_Init+0xf4>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a2e      	ldr	r2, [pc, #184]	; (8002fcc <MX_GPIO_Init+0xf4>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b2c      	ldr	r3, [pc, #176]	; (8002fcc <MX_GPIO_Init+0xf4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <MX_GPIO_Init+0xf4>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <MX_GPIO_Init+0xf4>)
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <MX_GPIO_Init+0xf4>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <MX_GPIO_Init+0xf4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <MX_GPIO_Init+0xf4>)
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <MX_GPIO_Init+0xf4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 8002f5e:	2201      	movs	r2, #1
 8002f60:	2110      	movs	r1, #16
 8002f62:	481b      	ldr	r0, [pc, #108]	; (8002fd0 <MX_GPIO_Init+0xf8>)
 8002f64:	f001 faaa 	bl	80044bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2120      	movs	r1, #32
 8002f6c:	4819      	ldr	r0, [pc, #100]	; (8002fd4 <MX_GPIO_Init+0xfc>)
 8002f6e:	f001 faa5 	bl	80044bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 8002f72:	2310      	movs	r3, #16
 8002f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f76:	2301      	movs	r3, #1
 8002f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 8002f82:	f107 0314 	add.w	r3, r7, #20
 8002f86:	4619      	mov	r1, r3
 8002f88:	4811      	ldr	r0, [pc, #68]	; (8002fd0 <MX_GPIO_Init+0xf8>)
 8002f8a:	f001 f8fb 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 8002f8e:	2310      	movs	r3, #16
 8002f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	480d      	ldr	r0, [pc, #52]	; (8002fd8 <MX_GPIO_Init+0x100>)
 8002fa4:	f001 f8ee 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8002fa8:	2320      	movs	r3, #32
 8002faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fac:	2301      	movs	r3, #1
 8002fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <MX_GPIO_Init+0xfc>)
 8002fc0:	f001 f8e0 	bl	8004184 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fc4:	bf00      	nop
 8002fc6:	3728      	adds	r7, #40	; 0x28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	40020800 	.word	0x40020800

08002fdc <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8002fe0:	4b02      	ldr	r3, [pc, #8]	; (8002fec <OSVersion+0x10>)
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	08011da8 	.word	0x08011da8

08002ff0 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8002ff4:	492e      	ldr	r1, [pc, #184]	; (80030b0 <freertos_IntroTitle+0xc0>)
 8002ff6:	482f      	ldr	r0, [pc, #188]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8002ff8:	f7ff fbee 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 8002ffc:	492e      	ldr	r1, [pc, #184]	; (80030b8 <freertos_IntroTitle+0xc8>)
 8002ffe:	482d      	ldr	r0, [pc, #180]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003000:	f7ff fbea 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8003004:	492d      	ldr	r1, [pc, #180]	; (80030bc <freertos_IntroTitle+0xcc>)
 8003006:	482b      	ldr	r0, [pc, #172]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003008:	f7ff fbe6 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 800300c:	492c      	ldr	r1, [pc, #176]	; (80030c0 <freertos_IntroTitle+0xd0>)
 800300e:	4829      	ldr	r0, [pc, #164]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003010:	f7ff fbe2 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8003014:	492b      	ldr	r1, [pc, #172]	; (80030c4 <freertos_IntroTitle+0xd4>)
 8003016:	4827      	ldr	r0, [pc, #156]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003018:	f7ff fbde 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 800301c:	492a      	ldr	r1, [pc, #168]	; (80030c8 <freertos_IntroTitle+0xd8>)
 800301e:	4825      	ldr	r0, [pc, #148]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003020:	f7ff fbda 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8003024:	4929      	ldr	r1, [pc, #164]	; (80030cc <freertos_IntroTitle+0xdc>)
 8003026:	4823      	ldr	r0, [pc, #140]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003028:	f7ff fbd6 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 800302c:	4928      	ldr	r1, [pc, #160]	; (80030d0 <freertos_IntroTitle+0xe0>)
 800302e:	4821      	ldr	r0, [pc, #132]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003030:	f7ff fbd2 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8003034:	4927      	ldr	r1, [pc, #156]	; (80030d4 <freertos_IntroTitle+0xe4>)
 8003036:	481f      	ldr	r0, [pc, #124]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003038:	f7ff fbce 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 800303c:	4926      	ldr	r1, [pc, #152]	; (80030d8 <freertos_IntroTitle+0xe8>)
 800303e:	481d      	ldr	r0, [pc, #116]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003040:	f7ff fbca 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8003044:	4925      	ldr	r1, [pc, #148]	; (80030dc <freertos_IntroTitle+0xec>)
 8003046:	481b      	ldr	r0, [pc, #108]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003048:	f7ff fbc6 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 800304c:	4924      	ldr	r1, [pc, #144]	; (80030e0 <freertos_IntroTitle+0xf0>)
 800304e:	4819      	ldr	r0, [pc, #100]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003050:	f7ff fbc2 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 8003054:	4923      	ldr	r1, [pc, #140]	; (80030e4 <freertos_IntroTitle+0xf4>)
 8003056:	4817      	ldr	r0, [pc, #92]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003058:	f7ff fbbe 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 800305c:	4922      	ldr	r1, [pc, #136]	; (80030e8 <freertos_IntroTitle+0xf8>)
 800305e:	4815      	ldr	r0, [pc, #84]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003060:	f7ff fbba 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 8003064:	4921      	ldr	r1, [pc, #132]	; (80030ec <freertos_IntroTitle+0xfc>)
 8003066:	4813      	ldr	r0, [pc, #76]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003068:	f7ff fbb6 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 800306c:	4920      	ldr	r1, [pc, #128]	; (80030f0 <freertos_IntroTitle+0x100>)
 800306e:	4811      	ldr	r0, [pc, #68]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003070:	f7ff fbb2 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 8003074:	491f      	ldr	r1, [pc, #124]	; (80030f4 <freertos_IntroTitle+0x104>)
 8003076:	480f      	ldr	r0, [pc, #60]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003078:	f7ff fbae 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 800307c:	491e      	ldr	r1, [pc, #120]	; (80030f8 <freertos_IntroTitle+0x108>)
 800307e:	480d      	ldr	r0, [pc, #52]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003080:	f7ff fbaa 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8003084:	491d      	ldr	r1, [pc, #116]	; (80030fc <freertos_IntroTitle+0x10c>)
 8003086:	480b      	ldr	r0, [pc, #44]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003088:	f7ff fba6 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 800308c:	f7ff ffa6 	bl	8002fdc <OSVersion>
 8003090:	4603      	mov	r3, r0
 8003092:	461a      	mov	r2, r3
 8003094:	491a      	ldr	r1, [pc, #104]	; (8003100 <freertos_IntroTitle+0x110>)
 8003096:	4807      	ldr	r0, [pc, #28]	; (80030b4 <freertos_IntroTitle+0xc4>)
 8003098:	f7ff fb9e 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 800309c:	4919      	ldr	r1, [pc, #100]	; (8003104 <freertos_IntroTitle+0x114>)
 800309e:	4805      	ldr	r0, [pc, #20]	; (80030b4 <freertos_IntroTitle+0xc4>)
 80030a0:	f7ff fb9a 	bl	80027d8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80030a4:	4918      	ldr	r1, [pc, #96]	; (8003108 <freertos_IntroTitle+0x118>)
 80030a6:	4803      	ldr	r0, [pc, #12]	; (80030b4 <freertos_IntroTitle+0xc4>)
 80030a8:	f7ff fb96 	bl	80027d8 <eprintf>
}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	08011db0 	.word	0x08011db0
 80030b4:	08001f49 	.word	0x08001f49
 80030b8:	08011df0 	.word	0x08011df0
 80030bc:	08011e44 	.word	0x08011e44
 80030c0:	08011e98 	.word	0x08011e98
 80030c4:	08011eec 	.word	0x08011eec
 80030c8:	08011f40 	.word	0x08011f40
 80030cc:	08011f94 	.word	0x08011f94
 80030d0:	08011fe8 	.word	0x08011fe8
 80030d4:	0801203c 	.word	0x0801203c
 80030d8:	08012090 	.word	0x08012090
 80030dc:	080120e4 	.word	0x080120e4
 80030e0:	08012138 	.word	0x08012138
 80030e4:	0801218c 	.word	0x0801218c
 80030e8:	080121e0 	.word	0x080121e0
 80030ec:	08012234 	.word	0x08012234
 80030f0:	08012288 	.word	0x08012288
 80030f4:	080122dc 	.word	0x080122dc
 80030f8:	08012330 	.word	0x08012330
 80030fc:	08012378 	.word	0x08012378
 8003100:	080123a8 	.word	0x080123a8
 8003104:	080123ec 	.word	0x080123ec
 8003108:	08012418 	.word	0x08012418

0800310c <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 8003116:	480a      	ldr	r0, [pc, #40]	; (8003140 <delay_us+0x34>)
 8003118:	f003 f922 	bl	8006360 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <delay_us+0x34>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2200      	movs	r2, #0
 8003122:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8003124:	bf00      	nop
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <delay_us+0x34>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	429a      	cmp	r2, r3
 8003130:	d3f9      	bcc.n	8003126 <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 8003132:	4803      	ldr	r0, [pc, #12]	; (8003140 <delay_us+0x34>)
 8003134:	f003 f984 	bl	8006440 <HAL_TIM_Base_Stop_IT>
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	200028a4 	.word	0x200028a4

08003144 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800314c:	f00b f9d8 	bl	800e500 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	DEBUG_PRINT("[TASK] StartDefaultTask!\n");
 8003150:	4903      	ldr	r1, [pc, #12]	; (8003160 <StartDefaultTask+0x1c>)
 8003152:	4804      	ldr	r0, [pc, #16]	; (8003164 <StartDefaultTask+0x20>)
 8003154:	f7ff fb40 	bl	80027d8 <eprintf>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003158:	2001      	movs	r0, #1
 800315a:	f008 f895 	bl	800b288 <osDelay>
 800315e:	e7fb      	b.n	8003158 <StartDefaultTask+0x14>
 8003160:	08012464 	.word	0x08012464
 8003164:	08001f49 	.word	0x08001f49

08003168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800316c:	b672      	cpsid	i
}
 800316e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003170:	e7fe      	b.n	8003170 <Error_Handler+0x8>
	...

08003174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_MspInit+0x64>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <HAL_MspInit+0x64>)
 8003184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003188:	6453      	str	r3, [r2, #68]	; 0x44
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <HAL_MspInit+0x64>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <HAL_MspInit+0x64>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <HAL_MspInit+0x64>)
 80031a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a4:	6413      	str	r3, [r2, #64]	; 0x40
 80031a6:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_MspInit+0x64>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	210f      	movs	r1, #15
 80031b6:	f06f 0001 	mvn.w	r0, #1
 80031ba:	f000 fc30 	bl	8003a1e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2105      	movs	r1, #5
 80031c2:	2005      	movs	r0, #5
 80031c4:	f000 fc2b 	bl	8003a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80031c8:	2005      	movs	r0, #5
 80031ca:	f000 fc44 	bl	8003a56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800

080031dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <HAL_TIM_Base_MspInit+0x48>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d115      	bne.n	800321a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <HAL_TIM_Base_MspInit+0x4c>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	4a0c      	ldr	r2, [pc, #48]	; (8003228 <HAL_TIM_Base_MspInit+0x4c>)
 80031f8:	f043 0320 	orr.w	r3, r3, #32
 80031fc:	6413      	str	r3, [r2, #64]	; 0x40
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_TIM_Base_MspInit+0x4c>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800320a:	2200      	movs	r2, #0
 800320c:	2105      	movs	r1, #5
 800320e:	2037      	movs	r0, #55	; 0x37
 8003210:	f000 fc05 	bl	8003a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003214:	2037      	movs	r0, #55	; 0x37
 8003216:	f000 fc1e 	bl	8003a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40001400 	.word	0x40001400
 8003228:	40023800 	.word	0x40023800

0800322c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	; 0x28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 0314 	add.w	r3, r7, #20
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a34      	ldr	r2, [pc, #208]	; (800331c <HAL_UART_MspInit+0xf0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d161      	bne.n	8003312 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	4b33      	ldr	r3, [pc, #204]	; (8003320 <HAL_UART_MspInit+0xf4>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	4a32      	ldr	r2, [pc, #200]	; (8003320 <HAL_UART_MspInit+0xf4>)
 8003258:	f043 0320 	orr.w	r3, r3, #32
 800325c:	6453      	str	r3, [r2, #68]	; 0x44
 800325e:	4b30      	ldr	r3, [pc, #192]	; (8003320 <HAL_UART_MspInit+0xf4>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <HAL_UART_MspInit+0xf4>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	4a2b      	ldr	r2, [pc, #172]	; (8003320 <HAL_UART_MspInit+0xf4>)
 8003274:	f043 0304 	orr.w	r3, r3, #4
 8003278:	6313      	str	r3, [r2, #48]	; 0x30
 800327a:	4b29      	ldr	r3, [pc, #164]	; (8003320 <HAL_UART_MspInit+0xf4>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 8003286:	23c0      	movs	r3, #192	; 0xc0
 8003288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003292:	2303      	movs	r3, #3
 8003294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003296:	2308      	movs	r3, #8
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800329a:	f107 0314 	add.w	r3, r7, #20
 800329e:	4619      	mov	r1, r3
 80032a0:	4820      	ldr	r0, [pc, #128]	; (8003324 <HAL_UART_MspInit+0xf8>)
 80032a2:	f000 ff6f 	bl	8004184 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_UART_MspInit+0xfc>)
 80032a8:	4a20      	ldr	r2, [pc, #128]	; (800332c <HAL_UART_MspInit+0x100>)
 80032aa:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80032ac:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_UART_MspInit+0xfc>)
 80032ae:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80032b2:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032b4:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <HAL_UART_MspInit+0xfc>)
 80032b6:	2240      	movs	r2, #64	; 0x40
 80032b8:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ba:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_UART_MspInit+0xfc>)
 80032bc:	2200      	movs	r2, #0
 80032be:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032c0:	4b19      	ldr	r3, [pc, #100]	; (8003328 <HAL_UART_MspInit+0xfc>)
 80032c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032c6:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032c8:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_UART_MspInit+0xfc>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032ce:	4b16      	ldr	r3, [pc, #88]	; (8003328 <HAL_UART_MspInit+0xfc>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <HAL_UART_MspInit+0xfc>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <HAL_UART_MspInit+0xfc>)
 80032dc:	2200      	movs	r2, #0
 80032de:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_UART_MspInit+0xfc>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80032e6:	4810      	ldr	r0, [pc, #64]	; (8003328 <HAL_UART_MspInit+0xfc>)
 80032e8:	f000 fbd0 	bl	8003a8c <HAL_DMA_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80032f2:	f7ff ff39 	bl	8003168 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a0b      	ldr	r2, [pc, #44]	; (8003328 <HAL_UART_MspInit+0xfc>)
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38
 80032fc:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <HAL_UART_MspInit+0xfc>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	2105      	movs	r1, #5
 8003306:	2047      	movs	r0, #71	; 0x47
 8003308:	f000 fb89 	bl	8003a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800330c:	2047      	movs	r0, #71	; 0x47
 800330e:	f000 fba2 	bl	8003a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003312:	bf00      	nop
 8003314:	3728      	adds	r7, #40	; 0x28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40011400 	.word	0x40011400
 8003320:	40023800 	.word	0x40023800
 8003324:	40020800 	.word	0x40020800
 8003328:	20002934 	.word	0x20002934
 800332c:	400264a0 	.word	0x400264a0

08003330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003334:	e7fe      	b.n	8003334 <NMI_Handler+0x4>

08003336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003336:	b480      	push	{r7}
 8003338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800333a:	e7fe      	b.n	800333a <HardFault_Handler+0x4>

0800333c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003340:	e7fe      	b.n	8003340 <MemManage_Handler+0x4>

08003342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003346:	e7fe      	b.n	8003346 <BusFault_Handler+0x4>

08003348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800334c:	e7fe      	b.n	800334c <UsageFault_Handler+0x4>

0800334e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <SysTick_Handler+0x2c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <SysTick_Handler+0x16>

		TimingDelay--;
 8003368:	4b07      	ldr	r3, [pc, #28]	; (8003388 <SysTick_Handler+0x2c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3b01      	subs	r3, #1
 800336e:	4a06      	ldr	r2, [pc, #24]	; (8003388 <SysTick_Handler+0x2c>)
 8003370:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003372:	f000 fa35 	bl	80037e0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003376:	f009 fe35 	bl	800cfe4 <xTaskGetSchedulerState>
 800337a:	4603      	mov	r3, r0
 800337c:	2b01      	cmp	r3, #1
 800337e:	d001      	beq.n	8003384 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003380:	f00a fe4a 	bl	800e018 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	bd80      	pop	{r7, pc}
 8003388:	200029a4 	.word	0x200029a4

0800338c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80033a0:	4802      	ldr	r0, [pc, #8]	; (80033ac <TIM7_IRQHandler+0x10>)
 80033a2:	f003 f87c 	bl	800649e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200028a4 	.word	0x200028a4

080033b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <OTG_FS_IRQHandler+0x10>)
 80033b6:	f001 f9de 	bl	8004776 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20007f00 	.word	0x20007f00

080033c4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
  xSemaphoreTakeFromISR(waitUntilSendDone, portMAX_DELAY);
 80033ca:	4b28      	ldr	r3, [pc, #160]	; (800346c <DMA2_Stream6_IRQHandler+0xa8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f008 fd6f 	bl	800beb8 <xQueueReceiveFromISR>

  portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80033da:	2300      	movs	r3, #0
 80033dc:	607b      	str	r3, [r7, #4]
  __HAL_DMA_CLEAR_FLAG(&hdma_usart6_tx, DMA_FLAG_TCIF2_6);
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <DMA2_Stream6_IRQHandler+0xac>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b23      	ldr	r3, [pc, #140]	; (8003474 <DMA2_Stream6_IRQHandler+0xb0>)
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d904      	bls.n	80033f4 <DMA2_Stream6_IRQHandler+0x30>
 80033ea:	4b23      	ldr	r3, [pc, #140]	; (8003478 <DMA2_Stream6_IRQHandler+0xb4>)
 80033ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	e019      	b.n	8003428 <DMA2_Stream6_IRQHandler+0x64>
 80033f4:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <DMA2_Stream6_IRQHandler+0xac>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <DMA2_Stream6_IRQHandler+0xb8>)
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d904      	bls.n	800340a <DMA2_Stream6_IRQHandler+0x46>
 8003400:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <DMA2_Stream6_IRQHandler+0xb4>)
 8003402:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003406:	6093      	str	r3, [r2, #8]
 8003408:	e00e      	b.n	8003428 <DMA2_Stream6_IRQHandler+0x64>
 800340a:	4b19      	ldr	r3, [pc, #100]	; (8003470 <DMA2_Stream6_IRQHandler+0xac>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <DMA2_Stream6_IRQHandler+0xbc>)
 8003412:	429a      	cmp	r2, r3
 8003414:	d904      	bls.n	8003420 <DMA2_Stream6_IRQHandler+0x5c>
 8003416:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <DMA2_Stream6_IRQHandler+0xc0>)
 8003418:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800341c:	60d3      	str	r3, [r2, #12]
 800341e:	e003      	b.n	8003428 <DMA2_Stream6_IRQHandler+0x64>
 8003420:	4a18      	ldr	r2, [pc, #96]	; (8003484 <DMA2_Stream6_IRQHandler+0xc0>)
 8003422:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003426:	6093      	str	r3, [r2, #8]
  __HAL_DMA_DISABLE(&hdma_usart6_tx);
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <DMA2_Stream6_IRQHandler+0xac>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <DMA2_Stream6_IRQHandler+0xac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
  xSemaphoreGiveFromISR(waitUntilSendDone, &xHigherPriorityTaskWoken);
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <DMA2_Stream6_IRQHandler+0xa8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	1d3a      	adds	r2, r7, #4
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f008 fac0 	bl	800b9c6 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <DMA2_Stream6_IRQHandler+0x98>
 800344c:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <DMA2_Stream6_IRQHandler+0xc4>)
 800344e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800345c:	4804      	ldr	r0, [pc, #16]	; (8003470 <DMA2_Stream6_IRQHandler+0xac>)
 800345e:	f000 fc55 	bl	8003d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20001b20 	.word	0x20001b20
 8003470:	20002934 	.word	0x20002934
 8003474:	40026458 	.word	0x40026458
 8003478:	40026400 	.word	0x40026400
 800347c:	400260b8 	.word	0x400260b8
 8003480:	40026058 	.word	0x40026058
 8003484:	40026000 	.word	0x40026000
 8003488:	e000ed04 	.word	0xe000ed04

0800348c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <USART6_IRQHandler+0x7c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b20      	cmp	r3, #32
 800349e:	d12b      	bne.n	80034f8 <USART6_IRQHandler+0x6c>
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <USART6_IRQHandler+0x7c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d024      	beq.n	80034f8 <USART6_IRQHandler+0x6c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
		g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <USART6_IRQHandler+0x7c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4b14      	ldr	r3, [pc, #80]	; (800350c <USART6_IRQHandler+0x80>)
 80034bc:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 80034be:	2300      	movs	r3, #0
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <USART6_IRQHandler+0x7c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <USART6_IRQHandler+0x7c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
		xQueueSendFromISR(uartqueue, &g_rx_buffer, &xHigherPriorityTaskWoken);	// Queue에서 멈춤
 80034d4:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <USART6_IRQHandler+0x84>)
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	1d3a      	adds	r2, r7, #4
 80034da:	2300      	movs	r3, #0
 80034dc:	490b      	ldr	r1, [pc, #44]	; (800350c <USART6_IRQHandler+0x80>)
 80034de:	f008 f9d7 	bl	800b890 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <USART6_IRQHandler+0x6c>
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <USART6_IRQHandler+0x88>)
 80034ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80034f8:	4803      	ldr	r0, [pc, #12]	; (8003508 <USART6_IRQHandler+0x7c>)
 80034fa:	f003 fa7f 	bl	80069fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	200028ec 	.word	0x200028ec
 800350c:	200029a0 	.word	0x200029a0
 8003510:	20001ac8 	.word	0x20001ac8
 8003514:	e000ed04 	.word	0xe000ed04

08003518 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return 1;
 800351c:	2301      	movs	r3, #1
}
 800351e:	4618      	mov	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <_kill>:

int _kill(int pid, int sig)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003532:	f00c fc71 	bl	800fe18 <__errno>
 8003536:	4603      	mov	r3, r0
 8003538:	2216      	movs	r2, #22
 800353a:	601a      	str	r2, [r3, #0]
  return -1;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <_exit>:

void _exit (int status)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ffe7 	bl	8003528 <_kill>
  while (1) {}    /* Make sure we hang here */
 800355a:	e7fe      	b.n	800355a <_exit+0x12>

0800355c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	e00a      	b.n	8003584 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800356e:	f3af 8000 	nop.w
 8003572:	4601      	mov	r1, r0
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	60ba      	str	r2, [r7, #8]
 800357a:	b2ca      	uxtb	r2, r1
 800357c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	3301      	adds	r3, #1
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	dbf0      	blt.n	800356e <_read+0x12>
  }

  return len;
 800358c:	687b      	ldr	r3, [r7, #4]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b086      	sub	sp, #24
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e009      	b.n	80035bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	60ba      	str	r2, [r7, #8]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	3301      	adds	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	dbf1      	blt.n	80035a8 <_write+0x12>
  }
  return len;
 80035c4:	687b      	ldr	r3, [r7, #4]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <_close>:

int _close(int file)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80035da:	4618      	mov	r0, r3
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035f6:	605a      	str	r2, [r3, #4]
  return 0;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <_isatty>:

int _isatty(int file)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800360e:	2301      	movs	r3, #1
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003640:	4a14      	ldr	r2, [pc, #80]	; (8003694 <_sbrk+0x5c>)
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <_sbrk+0x60>)
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800364c:	4b13      	ldr	r3, [pc, #76]	; (800369c <_sbrk+0x64>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003654:	4b11      	ldr	r3, [pc, #68]	; (800369c <_sbrk+0x64>)
 8003656:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <_sbrk+0x68>)
 8003658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800365a:	4b10      	ldr	r3, [pc, #64]	; (800369c <_sbrk+0x64>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	429a      	cmp	r2, r3
 8003666:	d207      	bcs.n	8003678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003668:	f00c fbd6 	bl	800fe18 <__errno>
 800366c:	4603      	mov	r3, r0
 800366e:	220c      	movs	r2, #12
 8003670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003676:	e009      	b.n	800368c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <_sbrk+0x64>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800367e:	4b07      	ldr	r3, [pc, #28]	; (800369c <_sbrk+0x64>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	4a05      	ldr	r2, [pc, #20]	; (800369c <_sbrk+0x64>)
 8003688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800368a:	68fb      	ldr	r3, [r7, #12]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20020000 	.word	0x20020000
 8003698:	00000400 	.word	0x00000400
 800369c:	200029a8 	.word	0x200029a8
 80036a0:	20008750 	.word	0x20008750

080036a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <SystemInit+0x20>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	4a05      	ldr	r2, [pc, #20]	; (80036c4 <SystemInit+0x20>)
 80036b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <vApplicationIdleHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook (void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
	printf("."); fflush(stdout);
 80036cc:	202e      	movs	r0, #46	; 0x2e
 80036ce:	f00c fa07 	bl	800fae0 <putchar>
 80036d2:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <vApplicationIdleHook+0x1c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	4618      	mov	r0, r3
 80036da:	f00c f919 	bl	800f910 <fflush>
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000214 	.word	0x20000214

080036e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80036e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003720 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80036ec:	f7ff ffda 	bl	80036a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036f0:	480c      	ldr	r0, [pc, #48]	; (8003724 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036f2:	490d      	ldr	r1, [pc, #52]	; (8003728 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036f4:	4a0d      	ldr	r2, [pc, #52]	; (800372c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036f8:	e002      	b.n	8003700 <LoopCopyDataInit>

080036fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036fe:	3304      	adds	r3, #4

08003700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003704:	d3f9      	bcc.n	80036fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003708:	4c0a      	ldr	r4, [pc, #40]	; (8003734 <LoopFillZerobss+0x22>)
  movs r3, #0
 800370a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800370c:	e001      	b.n	8003712 <LoopFillZerobss>

0800370e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800370e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003710:	3204      	adds	r2, #4

08003712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003714:	d3fb      	bcc.n	800370e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003716:	f00c fb85 	bl	800fe24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800371a:	f7ff fa25 	bl	8002b68 <main>
  bx  lr    
 800371e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003720:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003728:	20000384 	.word	0x20000384
  ldr r2, =_sidata
 800372c:	080128bc 	.word	0x080128bc
  ldr r2, =_sbss
 8003730:	20000f74 	.word	0x20000f74
  ldr r4, =_ebss
 8003734:	20008750 	.word	0x20008750

08003738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003738:	e7fe      	b.n	8003738 <ADC_IRQHandler>
	...

0800373c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <HAL_Init+0x40>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0d      	ldr	r2, [pc, #52]	; (800377c <HAL_Init+0x40>)
 8003746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800374a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_Init+0x40>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a0a      	ldr	r2, [pc, #40]	; (800377c <HAL_Init+0x40>)
 8003752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003756:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <HAL_Init+0x40>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a07      	ldr	r2, [pc, #28]	; (800377c <HAL_Init+0x40>)
 800375e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003764:	2003      	movs	r0, #3
 8003766:	f000 f94f 	bl	8003a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800376a:	200f      	movs	r0, #15
 800376c:	f000 f808 	bl	8003780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003770:	f7ff fd00 	bl	8003174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40023c00 	.word	0x40023c00

08003780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003788:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_InitTick+0x54>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_InitTick+0x58>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	4619      	mov	r1, r3
 8003792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003796:	fbb3 f3f1 	udiv	r3, r3, r1
 800379a:	fbb2 f3f3 	udiv	r3, r2, r3
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f967 	bl	8003a72 <HAL_SYSTICK_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e00e      	b.n	80037cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b0f      	cmp	r3, #15
 80037b2:	d80a      	bhi.n	80037ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037b4:	2200      	movs	r2, #0
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037bc:	f000 f92f 	bl	8003a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037c0:	4a06      	ldr	r2, [pc, #24]	; (80037dc <HAL_InitTick+0x5c>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	200000bc 	.word	0x200000bc
 80037d8:	200000c4 	.word	0x200000c4
 80037dc:	200000c0 	.word	0x200000c0

080037e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_IncTick+0x20>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_IncTick+0x24>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4413      	add	r3, r2
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <HAL_IncTick+0x24>)
 80037f2:	6013      	str	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	200000c4 	.word	0x200000c4
 8003804:	200029ac 	.word	0x200029ac

08003808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return uwTick;
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <HAL_GetTick+0x14>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	200029ac 	.word	0x200029ac

08003820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003828:	f7ff ffee 	bl	8003808 <HAL_GetTick>
 800382c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003838:	d005      	beq.n	8003846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_Delay+0x44>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003846:	bf00      	nop
 8003848:	f7ff ffde 	bl	8003808 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	429a      	cmp	r2, r3
 8003856:	d8f7      	bhi.n	8003848 <HAL_Delay+0x28>
  {
  }
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200000c4 	.word	0x200000c4

08003868 <__NVIC_SetPriorityGrouping>:
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <__NVIC_SetPriorityGrouping+0x44>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003884:	4013      	ands	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800389a:	4a04      	ldr	r2, [pc, #16]	; (80038ac <__NVIC_SetPriorityGrouping+0x44>)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	60d3      	str	r3, [r2, #12]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_GetPriorityGrouping>:
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <__NVIC_GetPriorityGrouping+0x18>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	f003 0307 	and.w	r3, r3, #7
}
 80038be:	4618      	mov	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <__NVIC_EnableIRQ>:
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	db0b      	blt.n	80038f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	f003 021f 	and.w	r2, r3, #31
 80038e4:	4907      	ldr	r1, [pc, #28]	; (8003904 <__NVIC_EnableIRQ+0x38>)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	2001      	movs	r0, #1
 80038ee:	fa00 f202 	lsl.w	r2, r0, r2
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	e000e100 	.word	0xe000e100

08003908 <__NVIC_SetPriority>:
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	6039      	str	r1, [r7, #0]
 8003912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003918:	2b00      	cmp	r3, #0
 800391a:	db0a      	blt.n	8003932 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	490c      	ldr	r1, [pc, #48]	; (8003954 <__NVIC_SetPriority+0x4c>)
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	0112      	lsls	r2, r2, #4
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	440b      	add	r3, r1
 800392c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003930:	e00a      	b.n	8003948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	4908      	ldr	r1, [pc, #32]	; (8003958 <__NVIC_SetPriority+0x50>)
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	3b04      	subs	r3, #4
 8003940:	0112      	lsls	r2, r2, #4
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	440b      	add	r3, r1
 8003946:	761a      	strb	r2, [r3, #24]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000e100 	.word	0xe000e100
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <NVIC_EncodePriority>:
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	; 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f1c3 0307 	rsb	r3, r3, #7
 8003976:	2b04      	cmp	r3, #4
 8003978:	bf28      	it	cs
 800397a:	2304      	movcs	r3, #4
 800397c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3304      	adds	r3, #4
 8003982:	2b06      	cmp	r3, #6
 8003984:	d902      	bls.n	800398c <NVIC_EncodePriority+0x30>
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3b03      	subs	r3, #3
 800398a:	e000      	b.n	800398e <NVIC_EncodePriority+0x32>
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43da      	mvns	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	401a      	ands	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	43d9      	mvns	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b4:	4313      	orrs	r3, r2
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3724      	adds	r7, #36	; 0x24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d4:	d301      	bcc.n	80039da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039d6:	2301      	movs	r3, #1
 80039d8:	e00f      	b.n	80039fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039da:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <SysTick_Config+0x40>)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3b01      	subs	r3, #1
 80039e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e2:	210f      	movs	r1, #15
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e8:	f7ff ff8e 	bl	8003908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <SysTick_Config+0x40>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039f2:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <SysTick_Config+0x40>)
 80039f4:	2207      	movs	r2, #7
 80039f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	e000e010 	.word	0xe000e010

08003a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ff29 	bl	8003868 <__NVIC_SetPriorityGrouping>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	4603      	mov	r3, r0
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a30:	f7ff ff3e 	bl	80038b0 <__NVIC_GetPriorityGrouping>
 8003a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	6978      	ldr	r0, [r7, #20]
 8003a3c:	f7ff ff8e 	bl	800395c <NVIC_EncodePriority>
 8003a40:	4602      	mov	r2, r0
 8003a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff5d 	bl	8003908 <__NVIC_SetPriority>
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff31 	bl	80038cc <__NVIC_EnableIRQ>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff ffa2 	bl	80039c4 <SysTick_Config>
 8003a80:	4603      	mov	r3, r0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a98:	f7ff feb6 	bl	8003808 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e099      	b.n	8003bdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ac8:	e00f      	b.n	8003aea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aca:	f7ff fe9d 	bl	8003808 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b05      	cmp	r3, #5
 8003ad6:	d908      	bls.n	8003aea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e078      	b.n	8003bdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e8      	bne.n	8003aca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4b38      	ldr	r3, [pc, #224]	; (8003be4 <HAL_DMA_Init+0x158>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d107      	bne.n	8003b54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0307 	bic.w	r3, r3, #7
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d117      	bne.n	8003bae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00e      	beq.n	8003bae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fa7b 	bl	800408c <DMA_CheckFifoParam>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2240      	movs	r2, #64	; 0x40
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003baa:	2301      	movs	r3, #1
 8003bac:	e016      	b.n	8003bdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa32 	bl	8004020 <DMA_CalcBaseAndBitshift>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	223f      	movs	r2, #63	; 0x3f
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	f010803f 	.word	0xf010803f

08003be8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bf6:	f7ff fe07 	bl	8003808 <HAL_GetTick>
 8003bfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d008      	beq.n	8003c1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2280      	movs	r2, #128	; 0x80
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e052      	b.n	8003cc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0216 	bic.w	r2, r2, #22
 8003c28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d103      	bne.n	8003c4a <HAL_DMA_Abort+0x62>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0208 	bic.w	r2, r2, #8
 8003c58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c6a:	e013      	b.n	8003c94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c6c:	f7ff fdcc 	bl	8003808 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b05      	cmp	r3, #5
 8003c78:	d90c      	bls.n	8003c94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2203      	movs	r2, #3
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e015      	b.n	8003cc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e4      	bne.n	8003c6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	223f      	movs	r2, #63	; 0x3f
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d004      	beq.n	8003ce6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2280      	movs	r2, #128	; 0x80
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00c      	b.n	8003d00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2205      	movs	r2, #5
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d18:	4b8e      	ldr	r3, [pc, #568]	; (8003f54 <HAL_DMA_IRQHandler+0x248>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a8e      	ldr	r2, [pc, #568]	; (8003f58 <HAL_DMA_IRQHandler+0x24c>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	0a9b      	lsrs	r3, r3, #10
 8003d24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d36:	2208      	movs	r2, #8
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01a      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d013      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0204 	bic.w	r2, r2, #4
 8003d5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d64:	2208      	movs	r2, #8
 8003d66:	409a      	lsls	r2, r3
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	f043 0201 	orr.w	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d012      	beq.n	8003dae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	f043 0202 	orr.w	r2, r3, #2
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db2:	2204      	movs	r2, #4
 8003db4:	409a      	lsls	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d012      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00b      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	2210      	movs	r2, #16
 8003dea:	409a      	lsls	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d043      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d03c      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	2210      	movs	r2, #16
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d018      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d108      	bne.n	8003e3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d024      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
 8003e3a:	e01f      	b.n	8003e7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01b      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4798      	blx	r3
 8003e4c:	e016      	b.n	8003e7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d107      	bne.n	8003e6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0208 	bic.w	r2, r2, #8
 8003e6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	2220      	movs	r2, #32
 8003e82:	409a      	lsls	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 808f 	beq.w	8003fac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8087 	beq.w	8003fac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d136      	bne.n	8003f24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0216 	bic.w	r2, r2, #22
 8003ec4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <HAL_DMA_IRQHandler+0x1da>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0208 	bic.w	r2, r2, #8
 8003ef4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	223f      	movs	r2, #63	; 0x3f
 8003efc:	409a      	lsls	r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d07e      	beq.n	8004018 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
        }
        return;
 8003f22:	e079      	b.n	8004018 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01d      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10d      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d031      	beq.n	8003fac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	4798      	blx	r3
 8003f50:	e02c      	b.n	8003fac <HAL_DMA_IRQHandler+0x2a0>
 8003f52:	bf00      	nop
 8003f54:	200000bc 	.word	0x200000bc
 8003f58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d023      	beq.n	8003fac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
 8003f6c:	e01e      	b.n	8003fac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10f      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0210 	bic.w	r2, r2, #16
 8003f8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d032      	beq.n	800401a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d022      	beq.n	8004006 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d307      	bcc.n	8003ff4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f2      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x2cc>
 8003ff2:	e000      	b.n	8003ff6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ff4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
 8004016:	e000      	b.n	800401a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004018:	bf00      	nop
    }
  }
}
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	3b10      	subs	r3, #16
 8004030:	4a14      	ldr	r2, [pc, #80]	; (8004084 <DMA_CalcBaseAndBitshift+0x64>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800403a:	4a13      	ldr	r2, [pc, #76]	; (8004088 <DMA_CalcBaseAndBitshift+0x68>)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b03      	cmp	r3, #3
 800404c:	d909      	bls.n	8004062 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004056:	f023 0303 	bic.w	r3, r3, #3
 800405a:	1d1a      	adds	r2, r3, #4
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	659a      	str	r2, [r3, #88]	; 0x58
 8004060:	e007      	b.n	8004072 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800406a:	f023 0303 	bic.w	r3, r3, #3
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	aaaaaaab 	.word	0xaaaaaaab
 8004088:	08012530 	.word	0x08012530

0800408c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d11f      	bne.n	80040e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d856      	bhi.n	800415a <DMA_CheckFifoParam+0xce>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <DMA_CheckFifoParam+0x28>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	080040c5 	.word	0x080040c5
 80040b8:	080040d7 	.word	0x080040d7
 80040bc:	080040c5 	.word	0x080040c5
 80040c0:	0800415b 	.word	0x0800415b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d046      	beq.n	800415e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d4:	e043      	b.n	800415e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040de:	d140      	bne.n	8004162 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e4:	e03d      	b.n	8004162 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ee:	d121      	bne.n	8004134 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d837      	bhi.n	8004166 <DMA_CheckFifoParam+0xda>
 80040f6:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <DMA_CheckFifoParam+0x70>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	0800410d 	.word	0x0800410d
 8004100:	08004113 	.word	0x08004113
 8004104:	0800410d 	.word	0x0800410d
 8004108:	08004125 	.word	0x08004125
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      break;
 8004110:	e030      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d025      	beq.n	800416a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004122:	e022      	b.n	800416a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800412c:	d11f      	bne.n	800416e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004132:	e01c      	b.n	800416e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d903      	bls.n	8004142 <DMA_CheckFifoParam+0xb6>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d003      	beq.n	8004148 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004140:	e018      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
      break;
 8004146:	e015      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00e      	beq.n	8004172 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
      break;
 8004158:	e00b      	b.n	8004172 <DMA_CheckFifoParam+0xe6>
      break;
 800415a:	bf00      	nop
 800415c:	e00a      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 800415e:	bf00      	nop
 8004160:	e008      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 8004162:	bf00      	nop
 8004164:	e006      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 8004166:	bf00      	nop
 8004168:	e004      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;   
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 8004172:	bf00      	nop
    }
  } 
  
  return status; 
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop

08004184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	; 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004196:	2300      	movs	r3, #0
 8004198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	e16b      	b.n	8004478 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041a0:	2201      	movs	r2, #1
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4013      	ands	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	f040 815a 	bne.w	8004472 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d005      	beq.n	80041d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d130      	bne.n	8004238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	2203      	movs	r2, #3
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4013      	ands	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800420c:	2201      	movs	r2, #1
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	f003 0201 	and.w	r2, r3, #1
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	2b03      	cmp	r3, #3
 8004242:	d017      	beq.n	8004274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	2203      	movs	r2, #3
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d123      	bne.n	80042c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	08da      	lsrs	r2, r3, #3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3208      	adds	r2, #8
 8004288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	220f      	movs	r2, #15
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	08da      	lsrs	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3208      	adds	r2, #8
 80042c2:	69b9      	ldr	r1, [r7, #24]
 80042c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	2203      	movs	r2, #3
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0203 	and.w	r2, r3, #3
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80b4 	beq.w	8004472 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	4b60      	ldr	r3, [pc, #384]	; (8004490 <HAL_GPIO_Init+0x30c>)
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	4a5f      	ldr	r2, [pc, #380]	; (8004490 <HAL_GPIO_Init+0x30c>)
 8004314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004318:	6453      	str	r3, [r2, #68]	; 0x44
 800431a:	4b5d      	ldr	r3, [pc, #372]	; (8004490 <HAL_GPIO_Init+0x30c>)
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004326:	4a5b      	ldr	r2, [pc, #364]	; (8004494 <HAL_GPIO_Init+0x310>)
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	089b      	lsrs	r3, r3, #2
 800432c:	3302      	adds	r3, #2
 800432e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	220f      	movs	r2, #15
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4013      	ands	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a52      	ldr	r2, [pc, #328]	; (8004498 <HAL_GPIO_Init+0x314>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d02b      	beq.n	80043aa <HAL_GPIO_Init+0x226>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a51      	ldr	r2, [pc, #324]	; (800449c <HAL_GPIO_Init+0x318>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d025      	beq.n	80043a6 <HAL_GPIO_Init+0x222>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a50      	ldr	r2, [pc, #320]	; (80044a0 <HAL_GPIO_Init+0x31c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01f      	beq.n	80043a2 <HAL_GPIO_Init+0x21e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a4f      	ldr	r2, [pc, #316]	; (80044a4 <HAL_GPIO_Init+0x320>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d019      	beq.n	800439e <HAL_GPIO_Init+0x21a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a4e      	ldr	r2, [pc, #312]	; (80044a8 <HAL_GPIO_Init+0x324>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <HAL_GPIO_Init+0x216>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a4d      	ldr	r2, [pc, #308]	; (80044ac <HAL_GPIO_Init+0x328>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00d      	beq.n	8004396 <HAL_GPIO_Init+0x212>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a4c      	ldr	r2, [pc, #304]	; (80044b0 <HAL_GPIO_Init+0x32c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d007      	beq.n	8004392 <HAL_GPIO_Init+0x20e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a4b      	ldr	r2, [pc, #300]	; (80044b4 <HAL_GPIO_Init+0x330>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d101      	bne.n	800438e <HAL_GPIO_Init+0x20a>
 800438a:	2307      	movs	r3, #7
 800438c:	e00e      	b.n	80043ac <HAL_GPIO_Init+0x228>
 800438e:	2308      	movs	r3, #8
 8004390:	e00c      	b.n	80043ac <HAL_GPIO_Init+0x228>
 8004392:	2306      	movs	r3, #6
 8004394:	e00a      	b.n	80043ac <HAL_GPIO_Init+0x228>
 8004396:	2305      	movs	r3, #5
 8004398:	e008      	b.n	80043ac <HAL_GPIO_Init+0x228>
 800439a:	2304      	movs	r3, #4
 800439c:	e006      	b.n	80043ac <HAL_GPIO_Init+0x228>
 800439e:	2303      	movs	r3, #3
 80043a0:	e004      	b.n	80043ac <HAL_GPIO_Init+0x228>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e002      	b.n	80043ac <HAL_GPIO_Init+0x228>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <HAL_GPIO_Init+0x228>
 80043aa:	2300      	movs	r3, #0
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	f002 0203 	and.w	r2, r2, #3
 80043b2:	0092      	lsls	r2, r2, #2
 80043b4:	4093      	lsls	r3, r2
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043bc:	4935      	ldr	r1, [pc, #212]	; (8004494 <HAL_GPIO_Init+0x310>)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	089b      	lsrs	r3, r3, #2
 80043c2:	3302      	adds	r3, #2
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ca:	4b3b      	ldr	r3, [pc, #236]	; (80044b8 <HAL_GPIO_Init+0x334>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ee:	4a32      	ldr	r2, [pc, #200]	; (80044b8 <HAL_GPIO_Init+0x334>)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043f4:	4b30      	ldr	r3, [pc, #192]	; (80044b8 <HAL_GPIO_Init+0x334>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004418:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <HAL_GPIO_Init+0x334>)
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800441e:	4b26      	ldr	r3, [pc, #152]	; (80044b8 <HAL_GPIO_Init+0x334>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004442:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <HAL_GPIO_Init+0x334>)
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004448:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <HAL_GPIO_Init+0x334>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	43db      	mvns	r3, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800446c:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <HAL_GPIO_Init+0x334>)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3301      	adds	r3, #1
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b0f      	cmp	r3, #15
 800447c:	f67f ae90 	bls.w	80041a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	3724      	adds	r7, #36	; 0x24
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40023800 	.word	0x40023800
 8004494:	40013800 	.word	0x40013800
 8004498:	40020000 	.word	0x40020000
 800449c:	40020400 	.word	0x40020400
 80044a0:	40020800 	.word	0x40020800
 80044a4:	40020c00 	.word	0x40020c00
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40021400 	.word	0x40021400
 80044b0:	40021800 	.word	0x40021800
 80044b4:	40021c00 	.word	0x40021c00
 80044b8:	40013c00 	.word	0x40013c00

080044bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	807b      	strh	r3, [r7, #2]
 80044c8:	4613      	mov	r3, r2
 80044ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044cc:	787b      	ldrb	r3, [r7, #1]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044d2:	887a      	ldrh	r2, [r7, #2]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044d8:	e003      	b.n	80044e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044da:	887b      	ldrh	r3, [r7, #2]
 80044dc:	041a      	lsls	r2, r3, #16
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	619a      	str	r2, [r3, #24]
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b086      	sub	sp, #24
 80044f2:	af02      	add	r7, sp, #8
 80044f4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e101      	b.n	8004704 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f00a f9d0 	bl	800e8c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2203      	movs	r2, #3
 8004524:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800452e:	d102      	bne.n	8004536 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f003 fc85 	bl	8007e4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	7c1a      	ldrb	r2, [r3, #16]
 8004548:	f88d 2000 	strb.w	r2, [sp]
 800454c:	3304      	adds	r3, #4
 800454e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004550:	f003 fb63 	bl	8007c1a <USB_CoreInit>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e0ce      	b.n	8004704 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2100      	movs	r1, #0
 800456c:	4618      	mov	r0, r3
 800456e:	f003 fc7d 	bl	8007e6c <USB_SetCurrentMode>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0bf      	b.n	8004704 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004584:	2300      	movs	r3, #0
 8004586:	73fb      	strb	r3, [r7, #15]
 8004588:	e04a      	b.n	8004620 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800458a:	7bfa      	ldrb	r2, [r7, #15]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	3315      	adds	r3, #21
 800459a:	2201      	movs	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800459e:	7bfa      	ldrb	r2, [r7, #15]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	3314      	adds	r3, #20
 80045ae:	7bfa      	ldrb	r2, [r7, #15]
 80045b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045b2:	7bfa      	ldrb	r2, [r7, #15]
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	b298      	uxth	r0, r3
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	332e      	adds	r3, #46	; 0x2e
 80045c6:	4602      	mov	r2, r0
 80045c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045ca:	7bfa      	ldrb	r2, [r7, #15]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	3318      	adds	r3, #24
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045de:	7bfa      	ldrb	r2, [r7, #15]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	331c      	adds	r3, #28
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045f2:	7bfa      	ldrb	r2, [r7, #15]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	3320      	adds	r3, #32
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004606:	7bfa      	ldrb	r2, [r7, #15]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	3324      	adds	r3, #36	; 0x24
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	3301      	adds	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	791b      	ldrb	r3, [r3, #4]
 8004624:	7bfa      	ldrb	r2, [r7, #15]
 8004626:	429a      	cmp	r2, r3
 8004628:	d3af      	bcc.n	800458a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800462a:	2300      	movs	r3, #0
 800462c:	73fb      	strb	r3, [r7, #15]
 800462e:	e044      	b.n	80046ba <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	f203 2355 	addw	r3, r3, #597	; 0x255
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004646:	7bfa      	ldrb	r2, [r7, #15]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800465c:	7bfa      	ldrb	r2, [r7, #15]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004672:	7bfa      	ldrb	r2, [r7, #15]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800469e:	7bfa      	ldrb	r2, [r7, #15]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	3301      	adds	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	791b      	ldrb	r3, [r3, #4]
 80046be:	7bfa      	ldrb	r2, [r7, #15]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d3b5      	bcc.n	8004630 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	7c1a      	ldrb	r2, [r3, #16]
 80046cc:	f88d 2000 	strb.w	r2, [sp]
 80046d0:	3304      	adds	r3, #4
 80046d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046d4:	f003 fc16 	bl	8007f04 <USB_DevInit>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e00c      	b.n	8004704 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f004 fc5a 	bl	8008fb6 <USB_DevDisconnect>

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_PCD_Start+0x1c>
 8004724:	2302      	movs	r3, #2
 8004726:	e022      	b.n	800476e <HAL_PCD_Start+0x62>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d009      	beq.n	8004750 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004740:	2b01      	cmp	r3, #1
 8004742:	d105      	bne.n	8004750 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f003 fb67 	bl	8007e28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f004 fc08 	bl	8008f74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004776:	b590      	push	{r4, r7, lr}
 8004778:	b08d      	sub	sp, #52	; 0x34
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f004 fcc6 	bl	800911e <USB_GetMode>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 848c 	bne.w	80050b2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f004 fc2a 	bl	8008ff8 <USB_ReadInterrupts>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 8482 	beq.w	80050b0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f004 fc17 	bl	8008ff8 <USB_ReadInterrupts>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d107      	bne.n	80047e4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f002 0202 	and.w	r2, r2, #2
 80047e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f004 fc05 	bl	8008ff8 <USB_ReadInterrupts>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d161      	bne.n	80048bc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0210 	bic.w	r2, r2, #16
 8004806:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	f003 020f 	and.w	r2, r3, #15
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	4413      	add	r3, r2
 8004824:	3304      	adds	r3, #4
 8004826:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	0c5b      	lsrs	r3, r3, #17
 800482c:	f003 030f 	and.w	r3, r3, #15
 8004830:	2b02      	cmp	r3, #2
 8004832:	d124      	bne.n	800487e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d035      	beq.n	80048ac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800484a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800484e:	b29b      	uxth	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	6a38      	ldr	r0, [r7, #32]
 8004854:	f004 fa3c 	bl	8008cd0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	091b      	lsrs	r3, r3, #4
 8004860:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004864:	441a      	add	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004876:	441a      	add	r2, r3
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	615a      	str	r2, [r3, #20]
 800487c:	e016      	b.n	80048ac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	0c5b      	lsrs	r3, r3, #17
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	2b06      	cmp	r3, #6
 8004888:	d110      	bne.n	80048ac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004890:	2208      	movs	r2, #8
 8004892:	4619      	mov	r1, r3
 8004894:	6a38      	ldr	r0, [r7, #32]
 8004896:	f004 fa1b 	bl	8008cd0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048a6:	441a      	add	r2, r3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0210 	orr.w	r2, r2, #16
 80048ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f004 fb99 	bl	8008ff8 <USB_ReadInterrupts>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048d0:	f040 80a7 	bne.w	8004a22 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f004 fb9e 	bl	800901e <USB_ReadDevAllOutEpInterrupt>
 80048e2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80048e4:	e099      	b.n	8004a1a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 808e 	beq.w	8004a0e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	4611      	mov	r1, r2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f004 fbc2 	bl	8009086 <USB_ReadDevOutEPInterrupt>
 8004902:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00c      	beq.n	8004928 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	461a      	mov	r2, r3
 800491c:	2301      	movs	r3, #1
 800491e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fea2 	bl	800566c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00c      	beq.n	800494c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493e:	461a      	mov	r2, r3
 8004940:	2308      	movs	r3, #8
 8004942:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 ff78 	bl	800583c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	461a      	mov	r2, r3
 8004964:	2310      	movs	r3, #16
 8004966:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d030      	beq.n	80049d4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d109      	bne.n	8004992 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800498c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004990:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	4613      	mov	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	4413      	add	r3, r2
 80049a4:	3304      	adds	r3, #4
 80049a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	78db      	ldrb	r3, [r3, #3]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d108      	bne.n	80049c2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2200      	movs	r2, #0
 80049b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f00a f885 	bl	800eacc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ce:	461a      	mov	r2, r3
 80049d0:	2302      	movs	r3, #2
 80049d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	461a      	mov	r2, r3
 80049ec:	2320      	movs	r3, #32
 80049ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a06:	461a      	mov	r2, r3
 8004a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a0c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	3301      	adds	r3, #1
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f47f af62 	bne.w	80048e6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f004 fae6 	bl	8008ff8 <USB_ReadInterrupts>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a36:	f040 80db 	bne.w	8004bf0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f004 fb07 	bl	8009052 <USB_ReadDevAllInEpInterrupt>
 8004a44:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004a4a:	e0cd      	b.n	8004be8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80c2 	beq.w	8004bdc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	4611      	mov	r1, r2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f004 fb2d 	bl	80090c2 <USB_ReadDevInEPInterrupt>
 8004a68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d057      	beq.n	8004b24 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69f9      	ldr	r1, [r7, #28]
 8004a90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a94:	4013      	ands	r3, r2
 8004a96:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	799b      	ldrb	r3, [r3, #6]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d132      	bne.n	8004b18 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	3320      	adds	r3, #32
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4403      	add	r3, r0
 8004ad2:	331c      	adds	r3, #28
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4419      	add	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4403      	add	r3, r0
 8004ae6:	3320      	adds	r3, #32
 8004ae8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d113      	bne.n	8004b18 <HAL_PCD_IRQHandler+0x3a2>
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af4:	4613      	mov	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	3324      	adds	r3, #36	; 0x24
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004b10:	461a      	mov	r2, r3
 8004b12:	2101      	movs	r1, #1
 8004b14:	f004 fb34 	bl	8009180 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f009 ff4f 	bl	800e9c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d008      	beq.n	8004b40 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	2308      	movs	r3, #8
 8004b3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d008      	beq.n	8004b5c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b56:	461a      	mov	r2, r3
 8004b58:	2310      	movs	r3, #16
 8004b5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d008      	beq.n	8004b78 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b72:	461a      	mov	r2, r3
 8004b74:	2340      	movs	r3, #64	; 0x40
 8004b76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d023      	beq.n	8004bca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004b82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b84:	6a38      	ldr	r0, [r7, #32]
 8004b86:	f003 fb21 	bl	80081cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	3310      	adds	r3, #16
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	4413      	add	r3, r2
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	78db      	ldrb	r3, [r3, #3]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d108      	bne.n	8004bb8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f009 ff9c 	bl	800eaf0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fcbb 	bl	8005552 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	3301      	adds	r3, #1
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f47f af2e 	bne.w	8004a4c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f004 f9ff 	bl	8008ff8 <USB_ReadInterrupts>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c04:	d122      	bne.n	8004c4c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d108      	bne.n	8004c36 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fea2 	bl	8005978 <HAL_PCDEx_LPM_Callback>
 8004c34:	e002      	b.n	8004c3c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f009 ff3a 	bl	800eab0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f004 f9d1 	bl	8008ff8 <USB_ReadInterrupts>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c60:	d112      	bne.n	8004c88 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d102      	bne.n	8004c78 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f009 fef6 	bl	800ea64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695a      	ldr	r2, [r3, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004c86:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f004 f9b3 	bl	8008ff8 <USB_ReadInterrupts>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9c:	f040 80b7 	bne.w	8004e0e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2110      	movs	r1, #16
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f003 fa86 	bl	80081cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc4:	e046      	b.n	8004d54 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cd8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cea:	0151      	lsls	r1, r2, #5
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	440a      	add	r2, r1
 8004cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cf8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d06:	461a      	mov	r2, r3
 8004d08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d0c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d1e:	0151      	lsls	r1, r2, #5
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	440a      	add	r2, r1
 8004d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3e:	0151      	lsls	r1, r2, #5
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	440a      	add	r2, r1
 8004d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d4c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	3301      	adds	r3, #1
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	791b      	ldrb	r3, [r3, #4]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d3b2      	bcc.n	8004cc6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d6e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004d72:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	7bdb      	ldrb	r3, [r3, #15]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d016      	beq.n	8004daa <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d8c:	f043 030b 	orr.w	r3, r3, #11
 8004d90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004da2:	f043 030b 	orr.w	r3, r3, #11
 8004da6:	6453      	str	r3, [r2, #68]	; 0x44
 8004da8:	e015      	b.n	8004dd6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004db8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004dbc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004dc0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dd0:	f043 030b 	orr.w	r3, r3, #11
 8004dd4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004de8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004df8:	461a      	mov	r2, r3
 8004dfa:	f004 f9c1 	bl	8009180 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f004 f8f0 	bl	8008ff8 <USB_ReadInterrupts>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e22:	d123      	bne.n	8004e6c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f004 f986 	bl	800913a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f003 fa43 	bl	80082be <USB_GetDevSpeed>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681c      	ldr	r4, [r3, #0]
 8004e44:	f001 fa08 	bl	8006258 <HAL_RCC_GetHCLKFreq>
 8004e48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4620      	mov	r0, r4
 8004e52:	f002 ff47 	bl	8007ce4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f009 fddb 	bl	800ea12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f004 f8c1 	bl	8008ff8 <USB_ReadInterrupts>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d10a      	bne.n	8004e96 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f009 fdb8 	bl	800e9f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695a      	ldr	r2, [r3, #20]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f002 0208 	and.w	r2, r2, #8
 8004e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f004 f8ac 	bl	8008ff8 <USB_ReadInterrupts>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea6:	2b80      	cmp	r3, #128	; 0x80
 8004ea8:	d123      	bne.n	8004ef2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eba:	e014      	b.n	8004ee6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d105      	bne.n	8004ee0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fb08 	bl	80054f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	791b      	ldrb	r3, [r3, #4]
 8004eea:	461a      	mov	r2, r3
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d3e4      	bcc.n	8004ebc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f004 f87e 	bl	8008ff8 <USB_ReadInterrupts>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f06:	d13c      	bne.n	8004f82 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f08:	2301      	movs	r3, #1
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0c:	e02b      	b.n	8004f66 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3318      	adds	r3, #24
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d115      	bne.n	8004f60 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004f34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	da12      	bge.n	8004f60 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3e:	4613      	mov	r3, r2
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	3317      	adds	r3, #23
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	4619      	mov	r1, r3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fac8 	bl	80054f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	3301      	adds	r3, #1
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	791b      	ldrb	r3, [r3, #4]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d3cd      	bcc.n	8004f0e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695a      	ldr	r2, [r3, #20]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f004 f836 	bl	8008ff8 <USB_ReadInterrupts>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f96:	d156      	bne.n	8005046 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f98:	2301      	movs	r3, #1
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9c:	e045      	b.n	800502a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d12e      	bne.n	8005024 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004fc6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	da2b      	bge.n	8005024 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8004fd8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d121      	bne.n	8005024 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800501c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005020:	6053      	str	r3, [r2, #4]
            break;
 8005022:	e008      	b.n	8005036 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	3301      	adds	r3, #1
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	791b      	ldrb	r3, [r3, #4]
 800502e:	461a      	mov	r2, r3
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	4293      	cmp	r3, r2
 8005034:	d3b3      	bcc.n	8004f9e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695a      	ldr	r2, [r3, #20]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005044:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f003 ffd4 	bl	8008ff8 <USB_ReadInterrupts>
 8005050:	4603      	mov	r3, r0
 8005052:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505a:	d10a      	bne.n	8005072 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f009 fd59 	bl	800eb14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f003 ffbe 	bl	8008ff8 <USB_ReadInterrupts>
 800507c:	4603      	mov	r3, r0
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b04      	cmp	r3, #4
 8005084:	d115      	bne.n	80050b2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f009 fd49 	bl	800eb30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6859      	ldr	r1, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	e000      	b.n	80050b2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80050b0:	bf00      	nop
    }
  }
}
 80050b2:	3734      	adds	r7, #52	; 0x34
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd90      	pop	{r4, r7, pc}

080050b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_PCD_SetAddress+0x1a>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e012      	b.n	80050f8 <HAL_PCD_SetAddress+0x40>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	78fa      	ldrb	r2, [r7, #3]
 80050de:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	4611      	mov	r1, r2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f003 ff1d 	bl	8008f28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	4608      	mov	r0, r1
 800510a:	4611      	mov	r1, r2
 800510c:	461a      	mov	r2, r3
 800510e:	4603      	mov	r3, r0
 8005110:	70fb      	strb	r3, [r7, #3]
 8005112:	460b      	mov	r3, r1
 8005114:	803b      	strh	r3, [r7, #0]
 8005116:	4613      	mov	r3, r2
 8005118:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800511e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005122:	2b00      	cmp	r3, #0
 8005124:	da0f      	bge.n	8005146 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	f003 020f 	and.w	r2, r3, #15
 800512c:	4613      	mov	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	3310      	adds	r3, #16
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4413      	add	r3, r2
 800513a:	3304      	adds	r3, #4
 800513c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	705a      	strb	r2, [r3, #1]
 8005144:	e00f      	b.n	8005166 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005146:	78fb      	ldrb	r3, [r7, #3]
 8005148:	f003 020f 	and.w	r2, r3, #15
 800514c:	4613      	mov	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	4413      	add	r3, r2
 800515c:	3304      	adds	r3, #4
 800515e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	b2da      	uxtb	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005172:	883a      	ldrh	r2, [r7, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	78ba      	ldrb	r2, [r7, #2]
 800517c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	785b      	ldrb	r3, [r3, #1]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d004      	beq.n	8005190 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005190:	78bb      	ldrb	r3, [r7, #2]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d102      	bne.n	800519c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <HAL_PCD_EP_Open+0xaa>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e00e      	b.n	80051c8 <HAL_PCD_EP_Open+0xc8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68f9      	ldr	r1, [r7, #12]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f003 f8a5 	bl	8008308 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80051c6:	7afb      	ldrb	r3, [r7, #11]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	da0f      	bge.n	8005204 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	f003 020f 	and.w	r2, r3, #15
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	3310      	adds	r3, #16
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	4413      	add	r3, r2
 80051f8:	3304      	adds	r3, #4
 80051fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2201      	movs	r2, #1
 8005200:	705a      	strb	r2, [r3, #1]
 8005202:	e00f      	b.n	8005224 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	f003 020f 	and.w	r2, r3, #15
 800520a:	4613      	mov	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4413      	add	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	4413      	add	r3, r2
 800521a:	3304      	adds	r3, #4
 800521c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	b2da      	uxtb	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_PCD_EP_Close+0x6e>
 800523a:	2302      	movs	r3, #2
 800523c:	e00e      	b.n	800525c <HAL_PCD_EP_Close+0x8c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	4618      	mov	r0, r3
 800524e:	f003 f8e3 	bl	8008418 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	607a      	str	r2, [r7, #4]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	460b      	mov	r3, r1
 8005272:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005274:	7afb      	ldrb	r3, [r7, #11]
 8005276:	f003 020f 	and.w	r2, r3, #15
 800527a:	4613      	mov	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	3304      	adds	r3, #4
 800528c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2200      	movs	r2, #0
 800529e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2200      	movs	r2, #0
 80052a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052a6:	7afb      	ldrb	r3, [r7, #11]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	799b      	ldrb	r3, [r3, #6]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d102      	bne.n	80052c0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	799b      	ldrb	r3, [r3, #6]
 80052c8:	461a      	mov	r2, r3
 80052ca:	6979      	ldr	r1, [r7, #20]
 80052cc:	f003 f980 	bl	80085d0 <USB_EPStartXfer>

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	460b      	mov	r3, r1
 80052e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	f003 020f 	and.w	r2, r3, #15
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80052fc:	681b      	ldr	r3, [r3, #0]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b086      	sub	sp, #24
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	460b      	mov	r3, r1
 8005318:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800531a:	7afb      	ldrb	r3, [r7, #11]
 800531c:	f003 020f 	and.w	r2, r3, #15
 8005320:	4613      	mov	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	3310      	adds	r3, #16
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4413      	add	r3, r2
 800532e:	3304      	adds	r3, #4
 8005330:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2201      	movs	r2, #1
 8005348:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800534a:	7afb      	ldrb	r3, [r7, #11]
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	b2da      	uxtb	r2, r3
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	799b      	ldrb	r3, [r3, #6]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d102      	bne.n	8005364 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	799b      	ldrb	r3, [r3, #6]
 800536c:	461a      	mov	r2, r3
 800536e:	6979      	ldr	r1, [r7, #20]
 8005370:	f003 f92e 	bl	80085d0 <USB_EPStartXfer>

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	460b      	mov	r3, r1
 8005388:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800538a:	78fb      	ldrb	r3, [r7, #3]
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	7912      	ldrb	r2, [r2, #4]
 8005394:	4293      	cmp	r3, r2
 8005396:	d901      	bls.n	800539c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e04f      	b.n	800543c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800539c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	da0f      	bge.n	80053c4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	f003 020f 	and.w	r2, r3, #15
 80053aa:	4613      	mov	r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	3310      	adds	r3, #16
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	4413      	add	r3, r2
 80053b8:	3304      	adds	r3, #4
 80053ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	705a      	strb	r2, [r3, #1]
 80053c2:	e00d      	b.n	80053e0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	4613      	mov	r3, r2
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	4413      	add	r3, r2
 80053d6:	3304      	adds	r3, #4
 80053d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_PCD_EP_SetStall+0x82>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e01d      	b.n	800543c <HAL_PCD_EP_SetStall+0xbe>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68f9      	ldr	r1, [r7, #12]
 800540e:	4618      	mov	r0, r3
 8005410:	f003 fcb6 	bl	8008d80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	7999      	ldrb	r1, [r3, #6]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800542c:	461a      	mov	r2, r3
 800542e:	f003 fea7 	bl	8009180 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	7912      	ldrb	r2, [r2, #4]
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e042      	b.n	80054e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005466:	2b00      	cmp	r3, #0
 8005468:	da0f      	bge.n	800548a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	f003 020f 	and.w	r2, r3, #15
 8005470:	4613      	mov	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	3310      	adds	r3, #16
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4413      	add	r3, r2
 800547e:	3304      	adds	r3, #4
 8005480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	705a      	strb	r2, [r3, #1]
 8005488:	e00f      	b.n	80054aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800548a:	78fb      	ldrb	r3, [r7, #3]
 800548c:	f003 020f 	and.w	r2, r3, #15
 8005490:	4613      	mov	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	4413      	add	r3, r2
 80054a0:	3304      	adds	r3, #4
 80054a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_PCD_EP_ClrStall+0x86>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e00e      	b.n	80054e8 <HAL_PCD_EP_ClrStall+0xa4>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68f9      	ldr	r1, [r7, #12]
 80054d8:	4618      	mov	r0, r3
 80054da:	f003 fcbf 	bl	8008e5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80054fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005500:	2b00      	cmp	r3, #0
 8005502:	da0c      	bge.n	800551e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	f003 020f 	and.w	r2, r3, #15
 800550a:	4613      	mov	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	3310      	adds	r3, #16
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	4413      	add	r3, r2
 8005518:	3304      	adds	r3, #4
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	e00c      	b.n	8005538 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	f003 020f 	and.w	r2, r3, #15
 8005524:	4613      	mov	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4413      	add	r3, r2
 8005534:	3304      	adds	r3, #4
 8005536:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68f9      	ldr	r1, [r7, #12]
 800553e:	4618      	mov	r0, r3
 8005540:	f003 fade 	bl	8008b00 <USB_EPStopXfer>
 8005544:	4603      	mov	r3, r0
 8005546:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005548:	7afb      	ldrb	r3, [r7, #11]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b08a      	sub	sp, #40	; 0x28
 8005556:	af02      	add	r7, sp, #8
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	3310      	adds	r3, #16
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	3304      	adds	r3, #4
 8005578:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	695a      	ldr	r2, [r3, #20]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	429a      	cmp	r2, r3
 8005584:	d901      	bls.n	800558a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e06b      	b.n	8005662 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	429a      	cmp	r2, r3
 800559e:	d902      	bls.n	80055a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	3303      	adds	r3, #3
 80055aa:	089b      	lsrs	r3, r3, #2
 80055ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055ae:	e02a      	b.n	8005606 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d902      	bls.n	80055cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	3303      	adds	r3, #3
 80055d0:	089b      	lsrs	r3, r3, #2
 80055d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68d9      	ldr	r1, [r3, #12]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	4603      	mov	r3, r0
 80055e8:	6978      	ldr	r0, [r7, #20]
 80055ea:	f003 fb33 	bl	8008c54 <USB_WritePacket>

    ep->xfer_buff  += len;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	441a      	add	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	695a      	ldr	r2, [r3, #20]
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	429a      	cmp	r2, r3
 800561a:	d809      	bhi.n	8005630 <PCD_WriteEmptyTxFifo+0xde>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	695a      	ldr	r2, [r3, #20]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005624:	429a      	cmp	r2, r3
 8005626:	d203      	bcs.n	8005630 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1bf      	bne.n	80055b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	429a      	cmp	r2, r3
 800563a:	d811      	bhi.n	8005660 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	2201      	movs	r2, #1
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	43db      	mvns	r3, r3
 8005656:	6939      	ldr	r1, [r7, #16]
 8005658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800565c:	4013      	ands	r3, r2
 800565e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	333c      	adds	r3, #60	; 0x3c
 8005684:	3304      	adds	r3, #4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	799b      	ldrb	r3, [r3, #6]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d17b      	bne.n	800579a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d015      	beq.n	80056d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	4a61      	ldr	r2, [pc, #388]	; (8005834 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	f240 80b9 	bls.w	8005828 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 80b3 	beq.w	8005828 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ce:	461a      	mov	r2, r3
 80056d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d4:	6093      	str	r3, [r2, #8]
 80056d6:	e0a7      	b.n	8005828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ee:	461a      	mov	r2, r3
 80056f0:	2320      	movs	r3, #32
 80056f2:	6093      	str	r3, [r2, #8]
 80056f4:	e098      	b.n	8005828 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f040 8093 	bne.w	8005828 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	4a4b      	ldr	r2, [pc, #300]	; (8005834 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d90f      	bls.n	800572a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005720:	461a      	mov	r2, r3
 8005722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005726:	6093      	str	r3, [r2, #8]
 8005728:	e07e      	b.n	8005828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	4613      	mov	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	4413      	add	r3, r2
 800573c:	3304      	adds	r3, #4
 800573e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a1a      	ldr	r2, [r3, #32]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	0159      	lsls	r1, r3, #5
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	440b      	add	r3, r1
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005756:	1ad2      	subs	r2, r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d114      	bne.n	800578c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005774:	461a      	mov	r2, r3
 8005776:	2101      	movs	r1, #1
 8005778:	f003 fd02 	bl	8009180 <USB_EP0_OutStart>
 800577c:	e006      	b.n	800578c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	441a      	add	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	4619      	mov	r1, r3
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f009 f8fa 	bl	800e98c <HAL_PCD_DataOutStageCallback>
 8005798:	e046      	b.n	8005828 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	4a26      	ldr	r2, [pc, #152]	; (8005838 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d124      	bne.n	80057ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b8:	461a      	mov	r2, r3
 80057ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057be:	6093      	str	r3, [r2, #8]
 80057c0:	e032      	b.n	8005828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d008      	beq.n	80057de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	461a      	mov	r2, r3
 80057da:	2320      	movs	r3, #32
 80057dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f009 f8d1 	bl	800e98c <HAL_PCD_DataOutStageCallback>
 80057ea:	e01d      	b.n	8005828 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d114      	bne.n	800581c <PCD_EP_OutXfrComplete_int+0x1b0>
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	4613      	mov	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d108      	bne.n	800581c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005814:	461a      	mov	r2, r3
 8005816:	2100      	movs	r1, #0
 8005818:	f003 fcb2 	bl	8009180 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f009 f8b2 	bl	800e98c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	4f54300a 	.word	0x4f54300a
 8005838:	4f54310a 	.word	0x4f54310a

0800583c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	333c      	adds	r3, #60	; 0x3c
 8005854:	3304      	adds	r3, #4
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4a15      	ldr	r2, [pc, #84]	; (80058c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d90e      	bls.n	8005890 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005878:	2b00      	cmp	r3, #0
 800587a:	d009      	beq.n	8005890 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005888:	461a      	mov	r2, r3
 800588a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f009 f869 	bl	800e968 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4a0a      	ldr	r2, [pc, #40]	; (80058c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d90c      	bls.n	80058b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	799b      	ldrb	r3, [r3, #6]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d108      	bne.n	80058b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80058b0:	461a      	mov	r2, r3
 80058b2:	2101      	movs	r1, #1
 80058b4:	f003 fc64 	bl	8009180 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	4f54300a 	.word	0x4f54300a

080058c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	70fb      	strb	r3, [r7, #3]
 80058d4:	4613      	mov	r3, r2
 80058d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d107      	bne.n	80058f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80058e6:	883b      	ldrh	r3, [r7, #0]
 80058e8:	0419      	lsls	r1, r3, #16
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28
 80058f4:	e028      	b.n	8005948 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fc:	0c1b      	lsrs	r3, r3, #16
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4413      	add	r3, r2
 8005902:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005904:	2300      	movs	r3, #0
 8005906:	73fb      	strb	r3, [r7, #15]
 8005908:	e00d      	b.n	8005926 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	3340      	adds	r3, #64	; 0x40
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	0c1b      	lsrs	r3, r3, #16
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	4413      	add	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	3301      	adds	r3, #1
 8005924:	73fb      	strb	r3, [r7, #15]
 8005926:	7bfa      	ldrb	r2, [r7, #15]
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	3b01      	subs	r3, #1
 800592c:	429a      	cmp	r2, r3
 800592e:	d3ec      	bcc.n	800590a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005930:	883b      	ldrh	r3, [r7, #0]
 8005932:	0418      	lsls	r0, r3, #16
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6819      	ldr	r1, [r3, #0]
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	3b01      	subs	r3, #1
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	4302      	orrs	r2, r0
 8005940:	3340      	adds	r3, #64	; 0x40
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	460b      	mov	r3, r1
 8005960:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	887a      	ldrh	r2, [r7, #2]
 8005968:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e267      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d075      	beq.n	8005a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059ae:	4b88      	ldr	r3, [pc, #544]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 030c 	and.w	r3, r3, #12
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d00c      	beq.n	80059d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ba:	4b85      	ldr	r3, [pc, #532]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d112      	bne.n	80059ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059c6:	4b82      	ldr	r3, [pc, #520]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059d2:	d10b      	bne.n	80059ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d4:	4b7e      	ldr	r3, [pc, #504]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d05b      	beq.n	8005a98 <HAL_RCC_OscConfig+0x108>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d157      	bne.n	8005a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e242      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f4:	d106      	bne.n	8005a04 <HAL_RCC_OscConfig+0x74>
 80059f6:	4b76      	ldr	r3, [pc, #472]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a75      	ldr	r2, [pc, #468]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 80059fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	e01d      	b.n	8005a40 <HAL_RCC_OscConfig+0xb0>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a0c:	d10c      	bne.n	8005a28 <HAL_RCC_OscConfig+0x98>
 8005a0e:	4b70      	ldr	r3, [pc, #448]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a6f      	ldr	r2, [pc, #444]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	4b6d      	ldr	r3, [pc, #436]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a6c      	ldr	r2, [pc, #432]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	e00b      	b.n	8005a40 <HAL_RCC_OscConfig+0xb0>
 8005a28:	4b69      	ldr	r3, [pc, #420]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a68      	ldr	r2, [pc, #416]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	4b66      	ldr	r3, [pc, #408]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a65      	ldr	r2, [pc, #404]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d013      	beq.n	8005a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a48:	f7fd fede 	bl	8003808 <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a50:	f7fd feda 	bl	8003808 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b64      	cmp	r3, #100	; 0x64
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e207      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a62:	4b5b      	ldr	r3, [pc, #364]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f0      	beq.n	8005a50 <HAL_RCC_OscConfig+0xc0>
 8005a6e:	e014      	b.n	8005a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a70:	f7fd feca 	bl	8003808 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a78:	f7fd fec6 	bl	8003808 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b64      	cmp	r3, #100	; 0x64
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e1f3      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a8a:	4b51      	ldr	r3, [pc, #324]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0xe8>
 8005a96:	e000      	b.n	8005a9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d063      	beq.n	8005b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aa6:	4b4a      	ldr	r3, [pc, #296]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 030c 	and.w	r3, r3, #12
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00b      	beq.n	8005aca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ab2:	4b47      	ldr	r3, [pc, #284]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d11c      	bne.n	8005af8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005abe:	4b44      	ldr	r3, [pc, #272]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d116      	bne.n	8005af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aca:	4b41      	ldr	r3, [pc, #260]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d005      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x152>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d001      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e1c7      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae2:	4b3b      	ldr	r3, [pc, #236]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	4937      	ldr	r1, [pc, #220]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005af6:	e03a      	b.n	8005b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d020      	beq.n	8005b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b00:	4b34      	ldr	r3, [pc, #208]	; (8005bd4 <HAL_RCC_OscConfig+0x244>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b06:	f7fd fe7f 	bl	8003808 <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b0e:	f7fd fe7b 	bl	8003808 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e1a8      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b20:	4b2b      	ldr	r3, [pc, #172]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0f0      	beq.n	8005b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b2c:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	4925      	ldr	r1, [pc, #148]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	600b      	str	r3, [r1, #0]
 8005b40:	e015      	b.n	8005b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b42:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <HAL_RCC_OscConfig+0x244>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b48:	f7fd fe5e 	bl	8003808 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b50:	f7fd fe5a 	bl	8003808 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e187      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b62:	4b1b      	ldr	r3, [pc, #108]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d036      	beq.n	8005be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d016      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b82:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <HAL_RCC_OscConfig+0x248>)
 8005b84:	2201      	movs	r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b88:	f7fd fe3e 	bl	8003808 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b90:	f7fd fe3a 	bl	8003808 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e167      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0f0      	beq.n	8005b90 <HAL_RCC_OscConfig+0x200>
 8005bae:	e01b      	b.n	8005be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bb0:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <HAL_RCC_OscConfig+0x248>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bb6:	f7fd fe27 	bl	8003808 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bbc:	e00e      	b.n	8005bdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bbe:	f7fd fe23 	bl	8003808 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d907      	bls.n	8005bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e150      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	42470000 	.word	0x42470000
 8005bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bdc:	4b88      	ldr	r3, [pc, #544]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1ea      	bne.n	8005bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8097 	beq.w	8005d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bfa:	4b81      	ldr	r3, [pc, #516]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10f      	bne.n	8005c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c06:	2300      	movs	r3, #0
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	4b7d      	ldr	r3, [pc, #500]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	4a7c      	ldr	r2, [pc, #496]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c14:	6413      	str	r3, [r2, #64]	; 0x40
 8005c16:	4b7a      	ldr	r3, [pc, #488]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c22:	2301      	movs	r3, #1
 8005c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c26:	4b77      	ldr	r3, [pc, #476]	; (8005e04 <HAL_RCC_OscConfig+0x474>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d118      	bne.n	8005c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c32:	4b74      	ldr	r3, [pc, #464]	; (8005e04 <HAL_RCC_OscConfig+0x474>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a73      	ldr	r2, [pc, #460]	; (8005e04 <HAL_RCC_OscConfig+0x474>)
 8005c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c3e:	f7fd fde3 	bl	8003808 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c46:	f7fd fddf 	bl	8003808 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e10c      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c58:	4b6a      	ldr	r3, [pc, #424]	; (8005e04 <HAL_RCC_OscConfig+0x474>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0f0      	beq.n	8005c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d106      	bne.n	8005c7a <HAL_RCC_OscConfig+0x2ea>
 8005c6c:	4b64      	ldr	r3, [pc, #400]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	4a63      	ldr	r2, [pc, #396]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	6713      	str	r3, [r2, #112]	; 0x70
 8005c78:	e01c      	b.n	8005cb4 <HAL_RCC_OscConfig+0x324>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b05      	cmp	r3, #5
 8005c80:	d10c      	bne.n	8005c9c <HAL_RCC_OscConfig+0x30c>
 8005c82:	4b5f      	ldr	r3, [pc, #380]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	4a5e      	ldr	r2, [pc, #376]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005c88:	f043 0304 	orr.w	r3, r3, #4
 8005c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c8e:	4b5c      	ldr	r3, [pc, #368]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c92:	4a5b      	ldr	r2, [pc, #364]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005c94:	f043 0301 	orr.w	r3, r3, #1
 8005c98:	6713      	str	r3, [r2, #112]	; 0x70
 8005c9a:	e00b      	b.n	8005cb4 <HAL_RCC_OscConfig+0x324>
 8005c9c:	4b58      	ldr	r3, [pc, #352]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca0:	4a57      	ldr	r2, [pc, #348]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca8:	4b55      	ldr	r3, [pc, #340]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cac:	4a54      	ldr	r2, [pc, #336]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005cae:	f023 0304 	bic.w	r3, r3, #4
 8005cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d015      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cbc:	f7fd fda4 	bl	8003808 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc2:	e00a      	b.n	8005cda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cc4:	f7fd fda0 	bl	8003808 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e0cb      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cda:	4b49      	ldr	r3, [pc, #292]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0ee      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x334>
 8005ce6:	e014      	b.n	8005d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ce8:	f7fd fd8e 	bl	8003808 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cee:	e00a      	b.n	8005d06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cf0:	f7fd fd8a 	bl	8003808 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e0b5      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d06:	4b3e      	ldr	r3, [pc, #248]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1ee      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d105      	bne.n	8005d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d18:	4b39      	ldr	r3, [pc, #228]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	4a38      	ldr	r2, [pc, #224]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 80a1 	beq.w	8005e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d2e:	4b34      	ldr	r3, [pc, #208]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d05c      	beq.n	8005df4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d141      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d42:	4b31      	ldr	r3, [pc, #196]	; (8005e08 <HAL_RCC_OscConfig+0x478>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d48:	f7fd fd5e 	bl	8003808 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d50:	f7fd fd5a 	bl	8003808 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e087      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d62:	4b27      	ldr	r3, [pc, #156]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1f0      	bne.n	8005d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69da      	ldr	r2, [r3, #28]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	019b      	lsls	r3, r3, #6
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	085b      	lsrs	r3, r3, #1
 8005d86:	3b01      	subs	r3, #1
 8005d88:	041b      	lsls	r3, r3, #16
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	061b      	lsls	r3, r3, #24
 8005d92:	491b      	ldr	r1, [pc, #108]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d98:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <HAL_RCC_OscConfig+0x478>)
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9e:	f7fd fd33 	bl	8003808 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da6:	f7fd fd2f 	bl	8003808 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e05c      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db8:	4b11      	ldr	r3, [pc, #68]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0f0      	beq.n	8005da6 <HAL_RCC_OscConfig+0x416>
 8005dc4:	e054      	b.n	8005e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc6:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <HAL_RCC_OscConfig+0x478>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dcc:	f7fd fd1c 	bl	8003808 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dd4:	f7fd fd18 	bl	8003808 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e045      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de6:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <HAL_RCC_OscConfig+0x470>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f0      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x444>
 8005df2:	e03d      	b.n	8005e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d107      	bne.n	8005e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e038      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
 8005e00:	40023800 	.word	0x40023800
 8005e04:	40007000 	.word	0x40007000
 8005e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e0c:	4b1b      	ldr	r3, [pc, #108]	; (8005e7c <HAL_RCC_OscConfig+0x4ec>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d028      	beq.n	8005e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d121      	bne.n	8005e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d11a      	bne.n	8005e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d111      	bne.n	8005e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	3b01      	subs	r3, #1
 8005e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d107      	bne.n	8005e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d001      	beq.n	8005e70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40023800 	.word	0x40023800

08005e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e0cc      	b.n	800602e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e94:	4b68      	ldr	r3, [pc, #416]	; (8006038 <HAL_RCC_ClockConfig+0x1b8>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d90c      	bls.n	8005ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ea2:	4b65      	ldr	r3, [pc, #404]	; (8006038 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eaa:	4b63      	ldr	r3, [pc, #396]	; (8006038 <HAL_RCC_ClockConfig+0x1b8>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0307 	and.w	r3, r3, #7
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d001      	beq.n	8005ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e0b8      	b.n	800602e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d020      	beq.n	8005f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ed4:	4b59      	ldr	r3, [pc, #356]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	4a58      	ldr	r2, [pc, #352]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005eec:	4b53      	ldr	r3, [pc, #332]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	4a52      	ldr	r2, [pc, #328]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ef8:	4b50      	ldr	r3, [pc, #320]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	494d      	ldr	r1, [pc, #308]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d044      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d107      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f1e:	4b47      	ldr	r3, [pc, #284]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d119      	bne.n	8005f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e07f      	b.n	800602e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d003      	beq.n	8005f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d107      	bne.n	8005f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f3e:	4b3f      	ldr	r3, [pc, #252]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e06f      	b.n	800602e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f4e:	4b3b      	ldr	r3, [pc, #236]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e067      	b.n	800602e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f5e:	4b37      	ldr	r3, [pc, #220]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f023 0203 	bic.w	r2, r3, #3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	4934      	ldr	r1, [pc, #208]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f70:	f7fd fc4a 	bl	8003808 <HAL_GetTick>
 8005f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f76:	e00a      	b.n	8005f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f78:	f7fd fc46 	bl	8003808 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e04f      	b.n	800602e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f8e:	4b2b      	ldr	r3, [pc, #172]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 020c 	and.w	r2, r3, #12
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d1eb      	bne.n	8005f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fa0:	4b25      	ldr	r3, [pc, #148]	; (8006038 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d20c      	bcs.n	8005fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fae:	4b22      	ldr	r3, [pc, #136]	; (8006038 <HAL_RCC_ClockConfig+0x1b8>)
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fb6:	4b20      	ldr	r3, [pc, #128]	; (8006038 <HAL_RCC_ClockConfig+0x1b8>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d001      	beq.n	8005fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e032      	b.n	800602e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d008      	beq.n	8005fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fd4:	4b19      	ldr	r3, [pc, #100]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4916      	ldr	r1, [pc, #88]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d009      	beq.n	8006006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ff2:	4b12      	ldr	r3, [pc, #72]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	490e      	ldr	r1, [pc, #56]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 8006002:	4313      	orrs	r3, r2
 8006004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006006:	f000 f821 	bl	800604c <HAL_RCC_GetSysClockFreq>
 800600a:	4602      	mov	r2, r0
 800600c:	4b0b      	ldr	r3, [pc, #44]	; (800603c <HAL_RCC_ClockConfig+0x1bc>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	091b      	lsrs	r3, r3, #4
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	490a      	ldr	r1, [pc, #40]	; (8006040 <HAL_RCC_ClockConfig+0x1c0>)
 8006018:	5ccb      	ldrb	r3, [r1, r3]
 800601a:	fa22 f303 	lsr.w	r3, r2, r3
 800601e:	4a09      	ldr	r2, [pc, #36]	; (8006044 <HAL_RCC_ClockConfig+0x1c4>)
 8006020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006022:	4b09      	ldr	r3, [pc, #36]	; (8006048 <HAL_RCC_ClockConfig+0x1c8>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f7fd fbaa 	bl	8003780 <HAL_InitTick>

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40023c00 	.word	0x40023c00
 800603c:	40023800 	.word	0x40023800
 8006040:	08012518 	.word	0x08012518
 8006044:	200000bc 	.word	0x200000bc
 8006048:	200000c0 	.word	0x200000c0

0800604c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800604c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006050:	b094      	sub	sp, #80	; 0x50
 8006052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	647b      	str	r3, [r7, #68]	; 0x44
 8006058:	2300      	movs	r3, #0
 800605a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800605c:	2300      	movs	r3, #0
 800605e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006064:	4b79      	ldr	r3, [pc, #484]	; (800624c <HAL_RCC_GetSysClockFreq+0x200>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 030c 	and.w	r3, r3, #12
 800606c:	2b08      	cmp	r3, #8
 800606e:	d00d      	beq.n	800608c <HAL_RCC_GetSysClockFreq+0x40>
 8006070:	2b08      	cmp	r3, #8
 8006072:	f200 80e1 	bhi.w	8006238 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <HAL_RCC_GetSysClockFreq+0x34>
 800607a:	2b04      	cmp	r3, #4
 800607c:	d003      	beq.n	8006086 <HAL_RCC_GetSysClockFreq+0x3a>
 800607e:	e0db      	b.n	8006238 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006080:	4b73      	ldr	r3, [pc, #460]	; (8006250 <HAL_RCC_GetSysClockFreq+0x204>)
 8006082:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006084:	e0db      	b.n	800623e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006086:	4b73      	ldr	r3, [pc, #460]	; (8006254 <HAL_RCC_GetSysClockFreq+0x208>)
 8006088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800608a:	e0d8      	b.n	800623e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800608c:	4b6f      	ldr	r3, [pc, #444]	; (800624c <HAL_RCC_GetSysClockFreq+0x200>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006094:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006096:	4b6d      	ldr	r3, [pc, #436]	; (800624c <HAL_RCC_GetSysClockFreq+0x200>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d063      	beq.n	800616a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060a2:	4b6a      	ldr	r3, [pc, #424]	; (800624c <HAL_RCC_GetSysClockFreq+0x200>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	099b      	lsrs	r3, r3, #6
 80060a8:	2200      	movs	r2, #0
 80060aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80060ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b4:	633b      	str	r3, [r7, #48]	; 0x30
 80060b6:	2300      	movs	r3, #0
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
 80060ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80060be:	4622      	mov	r2, r4
 80060c0:	462b      	mov	r3, r5
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f04f 0100 	mov.w	r1, #0
 80060ca:	0159      	lsls	r1, r3, #5
 80060cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060d0:	0150      	lsls	r0, r2, #5
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4621      	mov	r1, r4
 80060d8:	1a51      	subs	r1, r2, r1
 80060da:	6139      	str	r1, [r7, #16]
 80060dc:	4629      	mov	r1, r5
 80060de:	eb63 0301 	sbc.w	r3, r3, r1
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060f0:	4659      	mov	r1, fp
 80060f2:	018b      	lsls	r3, r1, #6
 80060f4:	4651      	mov	r1, sl
 80060f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060fa:	4651      	mov	r1, sl
 80060fc:	018a      	lsls	r2, r1, #6
 80060fe:	4651      	mov	r1, sl
 8006100:	ebb2 0801 	subs.w	r8, r2, r1
 8006104:	4659      	mov	r1, fp
 8006106:	eb63 0901 	sbc.w	r9, r3, r1
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	f04f 0300 	mov.w	r3, #0
 8006112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800611a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800611e:	4690      	mov	r8, r2
 8006120:	4699      	mov	r9, r3
 8006122:	4623      	mov	r3, r4
 8006124:	eb18 0303 	adds.w	r3, r8, r3
 8006128:	60bb      	str	r3, [r7, #8]
 800612a:	462b      	mov	r3, r5
 800612c:	eb49 0303 	adc.w	r3, r9, r3
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800613e:	4629      	mov	r1, r5
 8006140:	024b      	lsls	r3, r1, #9
 8006142:	4621      	mov	r1, r4
 8006144:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006148:	4621      	mov	r1, r4
 800614a:	024a      	lsls	r2, r1, #9
 800614c:	4610      	mov	r0, r2
 800614e:	4619      	mov	r1, r3
 8006150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006152:	2200      	movs	r2, #0
 8006154:	62bb      	str	r3, [r7, #40]	; 0x28
 8006156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800615c:	f7fa fd84 	bl	8000c68 <__aeabi_uldivmod>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4613      	mov	r3, r2
 8006166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006168:	e058      	b.n	800621c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800616a:	4b38      	ldr	r3, [pc, #224]	; (800624c <HAL_RCC_GetSysClockFreq+0x200>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	099b      	lsrs	r3, r3, #6
 8006170:	2200      	movs	r2, #0
 8006172:	4618      	mov	r0, r3
 8006174:	4611      	mov	r1, r2
 8006176:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800617a:	623b      	str	r3, [r7, #32]
 800617c:	2300      	movs	r3, #0
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
 8006180:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006184:	4642      	mov	r2, r8
 8006186:	464b      	mov	r3, r9
 8006188:	f04f 0000 	mov.w	r0, #0
 800618c:	f04f 0100 	mov.w	r1, #0
 8006190:	0159      	lsls	r1, r3, #5
 8006192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006196:	0150      	lsls	r0, r2, #5
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4641      	mov	r1, r8
 800619e:	ebb2 0a01 	subs.w	sl, r2, r1
 80061a2:	4649      	mov	r1, r9
 80061a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80061b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061bc:	ebb2 040a 	subs.w	r4, r2, sl
 80061c0:	eb63 050b 	sbc.w	r5, r3, fp
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	00eb      	lsls	r3, r5, #3
 80061ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061d2:	00e2      	lsls	r2, r4, #3
 80061d4:	4614      	mov	r4, r2
 80061d6:	461d      	mov	r5, r3
 80061d8:	4643      	mov	r3, r8
 80061da:	18e3      	adds	r3, r4, r3
 80061dc:	603b      	str	r3, [r7, #0]
 80061de:	464b      	mov	r3, r9
 80061e0:	eb45 0303 	adc.w	r3, r5, r3
 80061e4:	607b      	str	r3, [r7, #4]
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061f2:	4629      	mov	r1, r5
 80061f4:	028b      	lsls	r3, r1, #10
 80061f6:	4621      	mov	r1, r4
 80061f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061fc:	4621      	mov	r1, r4
 80061fe:	028a      	lsls	r2, r1, #10
 8006200:	4610      	mov	r0, r2
 8006202:	4619      	mov	r1, r3
 8006204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006206:	2200      	movs	r2, #0
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	61fa      	str	r2, [r7, #28]
 800620c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006210:	f7fa fd2a 	bl	8000c68 <__aeabi_uldivmod>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4613      	mov	r3, r2
 800621a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <HAL_RCC_GetSysClockFreq+0x200>)
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	0c1b      	lsrs	r3, r3, #16
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	3301      	adds	r3, #1
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800622c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800622e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006230:	fbb2 f3f3 	udiv	r3, r2, r3
 8006234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006236:	e002      	b.n	800623e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006238:	4b05      	ldr	r3, [pc, #20]	; (8006250 <HAL_RCC_GetSysClockFreq+0x204>)
 800623a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800623c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800623e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006240:	4618      	mov	r0, r3
 8006242:	3750      	adds	r7, #80	; 0x50
 8006244:	46bd      	mov	sp, r7
 8006246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800624a:	bf00      	nop
 800624c:	40023800 	.word	0x40023800
 8006250:	00f42400 	.word	0x00f42400
 8006254:	007a1200 	.word	0x007a1200

08006258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800625c:	4b03      	ldr	r3, [pc, #12]	; (800626c <HAL_RCC_GetHCLKFreq+0x14>)
 800625e:	681b      	ldr	r3, [r3, #0]
}
 8006260:	4618      	mov	r0, r3
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	200000bc 	.word	0x200000bc

08006270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006274:	f7ff fff0 	bl	8006258 <HAL_RCC_GetHCLKFreq>
 8006278:	4602      	mov	r2, r0
 800627a:	4b05      	ldr	r3, [pc, #20]	; (8006290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	0a9b      	lsrs	r3, r3, #10
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	4903      	ldr	r1, [pc, #12]	; (8006294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006286:	5ccb      	ldrb	r3, [r1, r3]
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800628c:	4618      	mov	r0, r3
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40023800 	.word	0x40023800
 8006294:	08012528 	.word	0x08012528

08006298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800629c:	f7ff ffdc 	bl	8006258 <HAL_RCC_GetHCLKFreq>
 80062a0:	4602      	mov	r2, r0
 80062a2:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	0b5b      	lsrs	r3, r3, #13
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	4903      	ldr	r1, [pc, #12]	; (80062bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80062ae:	5ccb      	ldrb	r3, [r1, r3]
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40023800 	.word	0x40023800
 80062bc:	08012528 	.word	0x08012528

080062c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e041      	b.n	8006356 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fc ff78 	bl	80031dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f000 f9f0 	bl	80066e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d001      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e04e      	b.n	8006416 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a23      	ldr	r2, [pc, #140]	; (8006424 <HAL_TIM_Base_Start_IT+0xc4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d022      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a2:	d01d      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <HAL_TIM_Base_Start_IT+0xc8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d018      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1e      	ldr	r2, [pc, #120]	; (800642c <HAL_TIM_Base_Start_IT+0xcc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d013      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1c      	ldr	r2, [pc, #112]	; (8006430 <HAL_TIM_Base_Start_IT+0xd0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00e      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1b      	ldr	r2, [pc, #108]	; (8006434 <HAL_TIM_Base_Start_IT+0xd4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d009      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a19      	ldr	r2, [pc, #100]	; (8006438 <HAL_TIM_Base_Start_IT+0xd8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d004      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a18      	ldr	r2, [pc, #96]	; (800643c <HAL_TIM_Base_Start_IT+0xdc>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d111      	bne.n	8006404 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b06      	cmp	r3, #6
 80063f0:	d010      	beq.n	8006414 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0201 	orr.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006402:	e007      	b.n	8006414 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40010000 	.word	0x40010000
 8006428:	40000400 	.word	0x40000400
 800642c:	40000800 	.word	0x40000800
 8006430:	40000c00 	.word	0x40000c00
 8006434:	40010400 	.word	0x40010400
 8006438:	40014000 	.word	0x40014000
 800643c:	40001800 	.word	0x40001800

08006440 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0201 	bic.w	r2, r2, #1
 8006456:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6a1a      	ldr	r2, [r3, #32]
 800645e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006462:	4013      	ands	r3, r2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10f      	bne.n	8006488 <HAL_TIM_Base_Stop_IT+0x48>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6a1a      	ldr	r2, [r3, #32]
 800646e:	f240 4344 	movw	r3, #1092	; 0x444
 8006472:	4013      	ands	r3, r2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d107      	bne.n	8006488 <HAL_TIM_Base_Stop_IT+0x48>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0201 	bic.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d020      	beq.n	8006502 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d01b      	beq.n	8006502 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f06f 0202 	mvn.w	r2, #2
 80064d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f8dc 	bl	80066a6 <HAL_TIM_IC_CaptureCallback>
 80064ee:	e005      	b.n	80064fc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f8ce 	bl	8006692 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f8df 	bl	80066ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	d020      	beq.n	800654e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	d01b      	beq.n	800654e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f06f 0204 	mvn.w	r2, #4
 800651e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f8b6 	bl	80066a6 <HAL_TIM_IC_CaptureCallback>
 800653a:	e005      	b.n	8006548 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f8a8 	bl	8006692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f8b9 	bl	80066ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b00      	cmp	r3, #0
 8006556:	d020      	beq.n	800659a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01b      	beq.n	800659a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f06f 0208 	mvn.w	r2, #8
 800656a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2204      	movs	r2, #4
 8006570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	f003 0303 	and.w	r3, r3, #3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f890 	bl	80066a6 <HAL_TIM_IC_CaptureCallback>
 8006586:	e005      	b.n	8006594 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f882 	bl	8006692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f893 	bl	80066ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f003 0310 	and.w	r3, r3, #16
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d020      	beq.n	80065e6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 0310 	and.w	r3, r3, #16
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01b      	beq.n	80065e6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f06f 0210 	mvn.w	r2, #16
 80065b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2208      	movs	r2, #8
 80065bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f86a 	bl	80066a6 <HAL_TIM_IC_CaptureCallback>
 80065d2:	e005      	b.n	80065e0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f85c 	bl	8006692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f86d 	bl	80066ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00c      	beq.n	800660a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f06f 0201 	mvn.w	r2, #1
 8006602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f83a 	bl	800667e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00c      	beq.n	800662e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f98d 	bl	8006948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00c      	beq.n	8006652 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800664a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f83e 	bl	80066ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00c      	beq.n	8006676 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d007      	beq.n	8006676 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f06f 0220 	mvn.w	r2, #32
 800666e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f95f 	bl	8006934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006676:	bf00      	nop
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a46      	ldr	r2, [pc, #280]	; (8006810 <TIM_Base_SetConfig+0x12c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d013      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006702:	d00f      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a43      	ldr	r2, [pc, #268]	; (8006814 <TIM_Base_SetConfig+0x130>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00b      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a42      	ldr	r2, [pc, #264]	; (8006818 <TIM_Base_SetConfig+0x134>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d007      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a41      	ldr	r2, [pc, #260]	; (800681c <TIM_Base_SetConfig+0x138>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a40      	ldr	r2, [pc, #256]	; (8006820 <TIM_Base_SetConfig+0x13c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d108      	bne.n	8006736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a35      	ldr	r2, [pc, #212]	; (8006810 <TIM_Base_SetConfig+0x12c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d02b      	beq.n	8006796 <TIM_Base_SetConfig+0xb2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006744:	d027      	beq.n	8006796 <TIM_Base_SetConfig+0xb2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a32      	ldr	r2, [pc, #200]	; (8006814 <TIM_Base_SetConfig+0x130>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d023      	beq.n	8006796 <TIM_Base_SetConfig+0xb2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a31      	ldr	r2, [pc, #196]	; (8006818 <TIM_Base_SetConfig+0x134>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d01f      	beq.n	8006796 <TIM_Base_SetConfig+0xb2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a30      	ldr	r2, [pc, #192]	; (800681c <TIM_Base_SetConfig+0x138>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d01b      	beq.n	8006796 <TIM_Base_SetConfig+0xb2>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a2f      	ldr	r2, [pc, #188]	; (8006820 <TIM_Base_SetConfig+0x13c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d017      	beq.n	8006796 <TIM_Base_SetConfig+0xb2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a2e      	ldr	r2, [pc, #184]	; (8006824 <TIM_Base_SetConfig+0x140>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <TIM_Base_SetConfig+0xb2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a2d      	ldr	r2, [pc, #180]	; (8006828 <TIM_Base_SetConfig+0x144>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d00f      	beq.n	8006796 <TIM_Base_SetConfig+0xb2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a2c      	ldr	r2, [pc, #176]	; (800682c <TIM_Base_SetConfig+0x148>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00b      	beq.n	8006796 <TIM_Base_SetConfig+0xb2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a2b      	ldr	r2, [pc, #172]	; (8006830 <TIM_Base_SetConfig+0x14c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d007      	beq.n	8006796 <TIM_Base_SetConfig+0xb2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a2a      	ldr	r2, [pc, #168]	; (8006834 <TIM_Base_SetConfig+0x150>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d003      	beq.n	8006796 <TIM_Base_SetConfig+0xb2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a29      	ldr	r2, [pc, #164]	; (8006838 <TIM_Base_SetConfig+0x154>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d108      	bne.n	80067a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a10      	ldr	r2, [pc, #64]	; (8006810 <TIM_Base_SetConfig+0x12c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_Base_SetConfig+0xf8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a12      	ldr	r2, [pc, #72]	; (8006820 <TIM_Base_SetConfig+0x13c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d103      	bne.n	80067e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d105      	bne.n	8006802 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f023 0201 	bic.w	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	611a      	str	r2, [r3, #16]
  }
}
 8006802:	bf00      	nop
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	40010000 	.word	0x40010000
 8006814:	40000400 	.word	0x40000400
 8006818:	40000800 	.word	0x40000800
 800681c:	40000c00 	.word	0x40000c00
 8006820:	40010400 	.word	0x40010400
 8006824:	40014000 	.word	0x40014000
 8006828:	40014400 	.word	0x40014400
 800682c:	40014800 	.word	0x40014800
 8006830:	40001800 	.word	0x40001800
 8006834:	40001c00 	.word	0x40001c00
 8006838:	40002000 	.word	0x40002000

0800683c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006850:	2302      	movs	r3, #2
 8006852:	e05a      	b.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a21      	ldr	r2, [pc, #132]	; (8006918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d022      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a0:	d01d      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a1d      	ldr	r2, [pc, #116]	; (800691c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d018      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a1b      	ldr	r2, [pc, #108]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d013      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a1a      	ldr	r2, [pc, #104]	; (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00e      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a18      	ldr	r2, [pc, #96]	; (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a17      	ldr	r2, [pc, #92]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d004      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a15      	ldr	r2, [pc, #84]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d10c      	bne.n	80068f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40010000 	.word	0x40010000
 800691c:	40000400 	.word	0x40000400
 8006920:	40000800 	.word	0x40000800
 8006924:	40000c00 	.word	0x40000c00
 8006928:	40010400 	.word	0x40010400
 800692c:	40014000 	.word	0x40014000
 8006930:	40001800 	.word	0x40001800

08006934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e042      	b.n	80069f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fc fc52 	bl	800322c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2224      	movs	r2, #36	; 0x24
 800698c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800699e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fc85 	bl	80072b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	695a      	ldr	r2, [r3, #20]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b0ba      	sub	sp, #232	; 0xe8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10f      	bne.n	8006a62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d009      	beq.n	8006a62 <HAL_UART_IRQHandler+0x66>
 8006a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fb69 	bl	8007132 <UART_Receive_IT>
      return;
 8006a60:	e25b      	b.n	8006f1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 80de 	beq.w	8006c28 <HAL_UART_IRQHandler+0x22c>
 8006a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d106      	bne.n	8006a86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 80d1 	beq.w	8006c28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00b      	beq.n	8006aaa <HAL_UART_IRQHandler+0xae>
 8006a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa2:	f043 0201 	orr.w	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00b      	beq.n	8006ace <HAL_UART_IRQHandler+0xd2>
 8006ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d005      	beq.n	8006ace <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac6:	f043 0202 	orr.w	r2, r3, #2
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00b      	beq.n	8006af2 <HAL_UART_IRQHandler+0xf6>
 8006ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d005      	beq.n	8006af2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aea:	f043 0204 	orr.w	r2, r3, #4
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d011      	beq.n	8006b22 <HAL_UART_IRQHandler+0x126>
 8006afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d105      	bne.n	8006b16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1a:	f043 0208 	orr.w	r2, r3, #8
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 81f2 	beq.w	8006f10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <HAL_UART_IRQHandler+0x14e>
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3c:	f003 0320 	and.w	r3, r3, #32
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 faf4 	bl	8007132 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b54:	2b40      	cmp	r3, #64	; 0x40
 8006b56:	bf0c      	ite	eq
 8006b58:	2301      	moveq	r3, #1
 8006b5a:	2300      	movne	r3, #0
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d103      	bne.n	8006b76 <HAL_UART_IRQHandler+0x17a>
 8006b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d04f      	beq.n	8006c16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f9fc 	bl	8006f74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b86:	2b40      	cmp	r3, #64	; 0x40
 8006b88:	d141      	bne.n	8006c0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3314      	adds	r3, #20
 8006b90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3314      	adds	r3, #20
 8006bb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1d9      	bne.n	8006b8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d013      	beq.n	8006c06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be2:	4a7e      	ldr	r2, [pc, #504]	; (8006ddc <HAL_UART_IRQHandler+0x3e0>)
 8006be4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fd f86c 	bl	8003cc8 <HAL_DMA_Abort_IT>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d016      	beq.n	8006c24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c00:	4610      	mov	r0, r2
 8006c02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c04:	e00e      	b.n	8006c24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f99e 	bl	8006f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0c:	e00a      	b.n	8006c24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f99a 	bl	8006f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c14:	e006      	b.n	8006c24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f996 	bl	8006f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006c22:	e175      	b.n	8006f10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c24:	bf00      	nop
    return;
 8006c26:	e173      	b.n	8006f10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	f040 814f 	bne.w	8006ed0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c36:	f003 0310 	and.w	r3, r3, #16
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 8148 	beq.w	8006ed0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c44:	f003 0310 	and.w	r3, r3, #16
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 8141 	beq.w	8006ed0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60bb      	str	r3, [r7, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	60bb      	str	r3, [r7, #8]
 8006c62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6e:	2b40      	cmp	r3, #64	; 0x40
 8006c70:	f040 80b6 	bne.w	8006de0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 8145 	beq.w	8006f14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c92:	429a      	cmp	r2, r3
 8006c94:	f080 813e 	bcs.w	8006f14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006caa:	f000 8088 	beq.w	8006dbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	330c      	adds	r3, #12
 8006cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006cda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ce6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1d9      	bne.n	8006cae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3314      	adds	r3, #20
 8006d00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3314      	adds	r3, #20
 8006d1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e1      	bne.n	8006cfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3314      	adds	r3, #20
 8006d3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3314      	adds	r3, #20
 8006d56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1e3      	bne.n	8006d36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	330c      	adds	r3, #12
 8006d82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d8e:	f023 0310 	bic.w	r3, r3, #16
 8006d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	330c      	adds	r3, #12
 8006d9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006da0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006da2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e3      	bne.n	8006d7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fc ff15 	bl	8003be8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f8c1 	bl	8006f5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dda:	e09b      	b.n	8006f14 <HAL_UART_IRQHandler+0x518>
 8006ddc:	0800703b 	.word	0x0800703b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 808e 	beq.w	8006f18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8089 	beq.w	8006f18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	330c      	adds	r3, #12
 8006e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	330c      	adds	r3, #12
 8006e26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e2a:	647a      	str	r2, [r7, #68]	; 0x44
 8006e2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e3      	bne.n	8006e06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3314      	adds	r3, #20
 8006e44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	f023 0301 	bic.w	r3, r3, #1
 8006e54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3314      	adds	r3, #20
 8006e5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e62:	633a      	str	r2, [r7, #48]	; 0x30
 8006e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e3      	bne.n	8006e3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0310 	bic.w	r3, r3, #16
 8006e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	330c      	adds	r3, #12
 8006ea4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ea8:	61fa      	str	r2, [r7, #28]
 8006eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	69b9      	ldr	r1, [r7, #24]
 8006eae:	69fa      	ldr	r2, [r7, #28]
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e3      	bne.n	8006e84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ec2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f847 	bl	8006f5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ece:	e023      	b.n	8006f18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d009      	beq.n	8006ef0 <HAL_UART_IRQHandler+0x4f4>
 8006edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f8ba 	bl	8007062 <UART_Transmit_IT>
    return;
 8006eee:	e014      	b.n	8006f1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00e      	beq.n	8006f1a <HAL_UART_IRQHandler+0x51e>
 8006efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d008      	beq.n	8006f1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f8fa 	bl	8007102 <UART_EndTransmit_IT>
    return;
 8006f0e:	e004      	b.n	8006f1a <HAL_UART_IRQHandler+0x51e>
    return;
 8006f10:	bf00      	nop
 8006f12:	e002      	b.n	8006f1a <HAL_UART_IRQHandler+0x51e>
      return;
 8006f14:	bf00      	nop
 8006f16:	e000      	b.n	8006f1a <HAL_UART_IRQHandler+0x51e>
      return;
 8006f18:	bf00      	nop
  }
}
 8006f1a:	37e8      	adds	r7, #232	; 0xe8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b095      	sub	sp, #84	; 0x54
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	330c      	adds	r3, #12
 8006f82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f9c:	643a      	str	r2, [r7, #64]	; 0x40
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e5      	bne.n	8006f7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3314      	adds	r3, #20
 8006fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	f023 0301 	bic.w	r3, r3, #1
 8006fc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3314      	adds	r3, #20
 8006fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e5      	bne.n	8006fb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d119      	bne.n	8007020 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	330c      	adds	r3, #12
 8006ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f023 0310 	bic.w	r3, r3, #16
 8007002:	647b      	str	r3, [r7, #68]	; 0x44
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800700c:	61ba      	str	r2, [r7, #24]
 800700e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6979      	ldr	r1, [r7, #20]
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	613b      	str	r3, [r7, #16]
   return(result);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e5      	bne.n	8006fec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800702e:	bf00      	nop
 8007030:	3754      	adds	r7, #84	; 0x54
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f7ff ff77 	bl	8006f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800705a:	bf00      	nop
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b21      	cmp	r3, #33	; 0x21
 8007074:	d13e      	bne.n	80070f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707e:	d114      	bne.n	80070aa <UART_Transmit_IT+0x48>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d110      	bne.n	80070aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800709c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	1c9a      	adds	r2, r3, #2
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	621a      	str	r2, [r3, #32]
 80070a8:	e008      	b.n	80070bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	1c59      	adds	r1, r3, #1
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6211      	str	r1, [r2, #32]
 80070b4:	781a      	ldrb	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	4619      	mov	r1, r3
 80070ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10f      	bne.n	80070f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	e000      	b.n	80070f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070f4:	2302      	movs	r3, #2
  }
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b082      	sub	sp, #8
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007118:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7ff fefc 	bl	8006f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b08c      	sub	sp, #48	; 0x30
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b22      	cmp	r3, #34	; 0x22
 8007144:	f040 80ae 	bne.w	80072a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007150:	d117      	bne.n	8007182 <UART_Receive_IT+0x50>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d113      	bne.n	8007182 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800715a:	2300      	movs	r3, #0
 800715c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	b29b      	uxth	r3, r3
 800716c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007170:	b29a      	uxth	r2, r3
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717a:	1c9a      	adds	r2, r3, #2
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	629a      	str	r2, [r3, #40]	; 0x28
 8007180:	e026      	b.n	80071d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007186:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007188:	2300      	movs	r3, #0
 800718a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007194:	d007      	beq.n	80071a6 <UART_Receive_IT+0x74>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10a      	bne.n	80071b4 <UART_Receive_IT+0x82>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d106      	bne.n	80071b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	701a      	strb	r2, [r3, #0]
 80071b2:	e008      	b.n	80071c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	3b01      	subs	r3, #1
 80071d8:	b29b      	uxth	r3, r3
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	4619      	mov	r1, r3
 80071de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d15d      	bne.n	80072a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 0220 	bic.w	r2, r2, #32
 80071f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007202:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	695a      	ldr	r2, [r3, #20]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0201 	bic.w	r2, r2, #1
 8007212:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007226:	2b01      	cmp	r3, #1
 8007228:	d135      	bne.n	8007296 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	330c      	adds	r3, #12
 8007236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	e853 3f00 	ldrex	r3, [r3]
 800723e:	613b      	str	r3, [r7, #16]
   return(result);
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f023 0310 	bic.w	r3, r3, #16
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	330c      	adds	r3, #12
 800724e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007250:	623a      	str	r2, [r7, #32]
 8007252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	69f9      	ldr	r1, [r7, #28]
 8007256:	6a3a      	ldr	r2, [r7, #32]
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	61bb      	str	r3, [r7, #24]
   return(result);
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e5      	bne.n	8007230 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0310 	and.w	r3, r3, #16
 800726e:	2b10      	cmp	r3, #16
 8007270:	d10a      	bne.n	8007288 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff fe64 	bl	8006f5c <HAL_UARTEx_RxEventCallback>
 8007294:	e002      	b.n	800729c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff fe4c 	bl	8006f34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	e002      	b.n	80072a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	e000      	b.n	80072a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80072a4:	2302      	movs	r3, #2
  }
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3730      	adds	r7, #48	; 0x30
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
	...

080072b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072b4:	b0c0      	sub	sp, #256	; 0x100
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072cc:	68d9      	ldr	r1, [r3, #12]
 80072ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	ea40 0301 	orr.w	r3, r0, r1
 80072d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007308:	f021 010c 	bic.w	r1, r1, #12
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007316:	430b      	orrs	r3, r1
 8007318:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800731a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732a:	6999      	ldr	r1, [r3, #24]
 800732c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	ea40 0301 	orr.w	r3, r0, r1
 8007336:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	4b8f      	ldr	r3, [pc, #572]	; (800757c <UART_SetConfig+0x2cc>)
 8007340:	429a      	cmp	r2, r3
 8007342:	d005      	beq.n	8007350 <UART_SetConfig+0xa0>
 8007344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	4b8d      	ldr	r3, [pc, #564]	; (8007580 <UART_SetConfig+0x2d0>)
 800734c:	429a      	cmp	r2, r3
 800734e:	d104      	bne.n	800735a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007350:	f7fe ffa2 	bl	8006298 <HAL_RCC_GetPCLK2Freq>
 8007354:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007358:	e003      	b.n	8007362 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800735a:	f7fe ff89 	bl	8006270 <HAL_RCC_GetPCLK1Freq>
 800735e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800736c:	f040 810c 	bne.w	8007588 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007374:	2200      	movs	r2, #0
 8007376:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800737a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800737e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007382:	4622      	mov	r2, r4
 8007384:	462b      	mov	r3, r5
 8007386:	1891      	adds	r1, r2, r2
 8007388:	65b9      	str	r1, [r7, #88]	; 0x58
 800738a:	415b      	adcs	r3, r3
 800738c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800738e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007392:	4621      	mov	r1, r4
 8007394:	eb12 0801 	adds.w	r8, r2, r1
 8007398:	4629      	mov	r1, r5
 800739a:	eb43 0901 	adc.w	r9, r3, r1
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073b2:	4690      	mov	r8, r2
 80073b4:	4699      	mov	r9, r3
 80073b6:	4623      	mov	r3, r4
 80073b8:	eb18 0303 	adds.w	r3, r8, r3
 80073bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073c0:	462b      	mov	r3, r5
 80073c2:	eb49 0303 	adc.w	r3, r9, r3
 80073c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073de:	460b      	mov	r3, r1
 80073e0:	18db      	adds	r3, r3, r3
 80073e2:	653b      	str	r3, [r7, #80]	; 0x50
 80073e4:	4613      	mov	r3, r2
 80073e6:	eb42 0303 	adc.w	r3, r2, r3
 80073ea:	657b      	str	r3, [r7, #84]	; 0x54
 80073ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073f4:	f7f9 fc38 	bl	8000c68 <__aeabi_uldivmod>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4b61      	ldr	r3, [pc, #388]	; (8007584 <UART_SetConfig+0x2d4>)
 80073fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	011c      	lsls	r4, r3, #4
 8007406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800740a:	2200      	movs	r2, #0
 800740c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007410:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007414:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007418:	4642      	mov	r2, r8
 800741a:	464b      	mov	r3, r9
 800741c:	1891      	adds	r1, r2, r2
 800741e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007420:	415b      	adcs	r3, r3
 8007422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007428:	4641      	mov	r1, r8
 800742a:	eb12 0a01 	adds.w	sl, r2, r1
 800742e:	4649      	mov	r1, r9
 8007430:	eb43 0b01 	adc.w	fp, r3, r1
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	f04f 0300 	mov.w	r3, #0
 800743c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007440:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007448:	4692      	mov	sl, r2
 800744a:	469b      	mov	fp, r3
 800744c:	4643      	mov	r3, r8
 800744e:	eb1a 0303 	adds.w	r3, sl, r3
 8007452:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007456:	464b      	mov	r3, r9
 8007458:	eb4b 0303 	adc.w	r3, fp, r3
 800745c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800746c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007470:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007474:	460b      	mov	r3, r1
 8007476:	18db      	adds	r3, r3, r3
 8007478:	643b      	str	r3, [r7, #64]	; 0x40
 800747a:	4613      	mov	r3, r2
 800747c:	eb42 0303 	adc.w	r3, r2, r3
 8007480:	647b      	str	r3, [r7, #68]	; 0x44
 8007482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007486:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800748a:	f7f9 fbed 	bl	8000c68 <__aeabi_uldivmod>
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	4611      	mov	r1, r2
 8007494:	4b3b      	ldr	r3, [pc, #236]	; (8007584 <UART_SetConfig+0x2d4>)
 8007496:	fba3 2301 	umull	r2, r3, r3, r1
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	2264      	movs	r2, #100	; 0x64
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	1acb      	subs	r3, r1, r3
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80074aa:	4b36      	ldr	r3, [pc, #216]	; (8007584 <UART_SetConfig+0x2d4>)
 80074ac:	fba3 2302 	umull	r2, r3, r3, r2
 80074b0:	095b      	lsrs	r3, r3, #5
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074b8:	441c      	add	r4, r3
 80074ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074cc:	4642      	mov	r2, r8
 80074ce:	464b      	mov	r3, r9
 80074d0:	1891      	adds	r1, r2, r2
 80074d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80074d4:	415b      	adcs	r3, r3
 80074d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074dc:	4641      	mov	r1, r8
 80074de:	1851      	adds	r1, r2, r1
 80074e0:	6339      	str	r1, [r7, #48]	; 0x30
 80074e2:	4649      	mov	r1, r9
 80074e4:	414b      	adcs	r3, r1
 80074e6:	637b      	str	r3, [r7, #52]	; 0x34
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074f4:	4659      	mov	r1, fp
 80074f6:	00cb      	lsls	r3, r1, #3
 80074f8:	4651      	mov	r1, sl
 80074fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074fe:	4651      	mov	r1, sl
 8007500:	00ca      	lsls	r2, r1, #3
 8007502:	4610      	mov	r0, r2
 8007504:	4619      	mov	r1, r3
 8007506:	4603      	mov	r3, r0
 8007508:	4642      	mov	r2, r8
 800750a:	189b      	adds	r3, r3, r2
 800750c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007510:	464b      	mov	r3, r9
 8007512:	460a      	mov	r2, r1
 8007514:	eb42 0303 	adc.w	r3, r2, r3
 8007518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800751c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007528:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800752c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007530:	460b      	mov	r3, r1
 8007532:	18db      	adds	r3, r3, r3
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
 8007536:	4613      	mov	r3, r2
 8007538:	eb42 0303 	adc.w	r3, r2, r3
 800753c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800753e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007542:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007546:	f7f9 fb8f 	bl	8000c68 <__aeabi_uldivmod>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <UART_SetConfig+0x2d4>)
 8007550:	fba3 1302 	umull	r1, r3, r3, r2
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	2164      	movs	r1, #100	; 0x64
 8007558:	fb01 f303 	mul.w	r3, r1, r3
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	3332      	adds	r3, #50	; 0x32
 8007562:	4a08      	ldr	r2, [pc, #32]	; (8007584 <UART_SetConfig+0x2d4>)
 8007564:	fba2 2303 	umull	r2, r3, r2, r3
 8007568:	095b      	lsrs	r3, r3, #5
 800756a:	f003 0207 	and.w	r2, r3, #7
 800756e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4422      	add	r2, r4
 8007576:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007578:	e106      	b.n	8007788 <UART_SetConfig+0x4d8>
 800757a:	bf00      	nop
 800757c:	40011000 	.word	0x40011000
 8007580:	40011400 	.word	0x40011400
 8007584:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800758c:	2200      	movs	r2, #0
 800758e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007592:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007596:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800759a:	4642      	mov	r2, r8
 800759c:	464b      	mov	r3, r9
 800759e:	1891      	adds	r1, r2, r2
 80075a0:	6239      	str	r1, [r7, #32]
 80075a2:	415b      	adcs	r3, r3
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
 80075a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075aa:	4641      	mov	r1, r8
 80075ac:	1854      	adds	r4, r2, r1
 80075ae:	4649      	mov	r1, r9
 80075b0:	eb43 0501 	adc.w	r5, r3, r1
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	00eb      	lsls	r3, r5, #3
 80075be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075c2:	00e2      	lsls	r2, r4, #3
 80075c4:	4614      	mov	r4, r2
 80075c6:	461d      	mov	r5, r3
 80075c8:	4643      	mov	r3, r8
 80075ca:	18e3      	adds	r3, r4, r3
 80075cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075d0:	464b      	mov	r3, r9
 80075d2:	eb45 0303 	adc.w	r3, r5, r3
 80075d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075f6:	4629      	mov	r1, r5
 80075f8:	008b      	lsls	r3, r1, #2
 80075fa:	4621      	mov	r1, r4
 80075fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007600:	4621      	mov	r1, r4
 8007602:	008a      	lsls	r2, r1, #2
 8007604:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007608:	f7f9 fb2e 	bl	8000c68 <__aeabi_uldivmod>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4b60      	ldr	r3, [pc, #384]	; (8007794 <UART_SetConfig+0x4e4>)
 8007612:	fba3 2302 	umull	r2, r3, r3, r2
 8007616:	095b      	lsrs	r3, r3, #5
 8007618:	011c      	lsls	r4, r3, #4
 800761a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800761e:	2200      	movs	r2, #0
 8007620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007624:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007628:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800762c:	4642      	mov	r2, r8
 800762e:	464b      	mov	r3, r9
 8007630:	1891      	adds	r1, r2, r2
 8007632:	61b9      	str	r1, [r7, #24]
 8007634:	415b      	adcs	r3, r3
 8007636:	61fb      	str	r3, [r7, #28]
 8007638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800763c:	4641      	mov	r1, r8
 800763e:	1851      	adds	r1, r2, r1
 8007640:	6139      	str	r1, [r7, #16]
 8007642:	4649      	mov	r1, r9
 8007644:	414b      	adcs	r3, r1
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	f04f 0300 	mov.w	r3, #0
 8007650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007654:	4659      	mov	r1, fp
 8007656:	00cb      	lsls	r3, r1, #3
 8007658:	4651      	mov	r1, sl
 800765a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800765e:	4651      	mov	r1, sl
 8007660:	00ca      	lsls	r2, r1, #3
 8007662:	4610      	mov	r0, r2
 8007664:	4619      	mov	r1, r3
 8007666:	4603      	mov	r3, r0
 8007668:	4642      	mov	r2, r8
 800766a:	189b      	adds	r3, r3, r2
 800766c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007670:	464b      	mov	r3, r9
 8007672:	460a      	mov	r2, r1
 8007674:	eb42 0303 	adc.w	r3, r2, r3
 8007678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800767c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	67bb      	str	r3, [r7, #120]	; 0x78
 8007686:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	f04f 0300 	mov.w	r3, #0
 8007690:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007694:	4649      	mov	r1, r9
 8007696:	008b      	lsls	r3, r1, #2
 8007698:	4641      	mov	r1, r8
 800769a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800769e:	4641      	mov	r1, r8
 80076a0:	008a      	lsls	r2, r1, #2
 80076a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80076a6:	f7f9 fadf 	bl	8000c68 <__aeabi_uldivmod>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4611      	mov	r1, r2
 80076b0:	4b38      	ldr	r3, [pc, #224]	; (8007794 <UART_SetConfig+0x4e4>)
 80076b2:	fba3 2301 	umull	r2, r3, r3, r1
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	2264      	movs	r2, #100	; 0x64
 80076ba:	fb02 f303 	mul.w	r3, r2, r3
 80076be:	1acb      	subs	r3, r1, r3
 80076c0:	011b      	lsls	r3, r3, #4
 80076c2:	3332      	adds	r3, #50	; 0x32
 80076c4:	4a33      	ldr	r2, [pc, #204]	; (8007794 <UART_SetConfig+0x4e4>)
 80076c6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ca:	095b      	lsrs	r3, r3, #5
 80076cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076d0:	441c      	add	r4, r3
 80076d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076d6:	2200      	movs	r2, #0
 80076d8:	673b      	str	r3, [r7, #112]	; 0x70
 80076da:	677a      	str	r2, [r7, #116]	; 0x74
 80076dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80076e0:	4642      	mov	r2, r8
 80076e2:	464b      	mov	r3, r9
 80076e4:	1891      	adds	r1, r2, r2
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	415b      	adcs	r3, r3
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076f0:	4641      	mov	r1, r8
 80076f2:	1851      	adds	r1, r2, r1
 80076f4:	6039      	str	r1, [r7, #0]
 80076f6:	4649      	mov	r1, r9
 80076f8:	414b      	adcs	r3, r1
 80076fa:	607b      	str	r3, [r7, #4]
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007708:	4659      	mov	r1, fp
 800770a:	00cb      	lsls	r3, r1, #3
 800770c:	4651      	mov	r1, sl
 800770e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007712:	4651      	mov	r1, sl
 8007714:	00ca      	lsls	r2, r1, #3
 8007716:	4610      	mov	r0, r2
 8007718:	4619      	mov	r1, r3
 800771a:	4603      	mov	r3, r0
 800771c:	4642      	mov	r2, r8
 800771e:	189b      	adds	r3, r3, r2
 8007720:	66bb      	str	r3, [r7, #104]	; 0x68
 8007722:	464b      	mov	r3, r9
 8007724:	460a      	mov	r2, r1
 8007726:	eb42 0303 	adc.w	r3, r2, r3
 800772a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	663b      	str	r3, [r7, #96]	; 0x60
 8007736:	667a      	str	r2, [r7, #100]	; 0x64
 8007738:	f04f 0200 	mov.w	r2, #0
 800773c:	f04f 0300 	mov.w	r3, #0
 8007740:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007744:	4649      	mov	r1, r9
 8007746:	008b      	lsls	r3, r1, #2
 8007748:	4641      	mov	r1, r8
 800774a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800774e:	4641      	mov	r1, r8
 8007750:	008a      	lsls	r2, r1, #2
 8007752:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007756:	f7f9 fa87 	bl	8000c68 <__aeabi_uldivmod>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4b0d      	ldr	r3, [pc, #52]	; (8007794 <UART_SetConfig+0x4e4>)
 8007760:	fba3 1302 	umull	r1, r3, r3, r2
 8007764:	095b      	lsrs	r3, r3, #5
 8007766:	2164      	movs	r1, #100	; 0x64
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	3332      	adds	r3, #50	; 0x32
 8007772:	4a08      	ldr	r2, [pc, #32]	; (8007794 <UART_SetConfig+0x4e4>)
 8007774:	fba2 2303 	umull	r2, r3, r2, r3
 8007778:	095b      	lsrs	r3, r3, #5
 800777a:	f003 020f 	and.w	r2, r3, #15
 800777e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4422      	add	r2, r4
 8007786:	609a      	str	r2, [r3, #8]
}
 8007788:	bf00      	nop
 800778a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800778e:	46bd      	mov	sp, r7
 8007790:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007794:	51eb851f 	.word	0x51eb851f

08007798 <LL_GPIO_SetPinMode>:
{
 8007798:	b480      	push	{r7}
 800779a:	b08b      	sub	sp, #44	; 0x2c
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	fa93 f3a3 	rbit	r3, r3
 80077b2:	613b      	str	r3, [r7, #16]
  return result;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80077be:	2320      	movs	r3, #32
 80077c0:	e003      	b.n	80077ca <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	fab3 f383 	clz	r3, r3
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	2103      	movs	r1, #3
 80077ce:	fa01 f303 	lsl.w	r3, r1, r3
 80077d2:	43db      	mvns	r3, r3
 80077d4:	401a      	ands	r2, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	fa93 f3a3 	rbit	r3, r3
 80077e0:	61fb      	str	r3, [r7, #28]
  return result;
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80077ec:	2320      	movs	r3, #32
 80077ee:	e003      	b.n	80077f8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	fab3 f383 	clz	r3, r3
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007800:	431a      	orrs	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	601a      	str	r2, [r3, #0]
}
 8007806:	bf00      	nop
 8007808:	372c      	adds	r7, #44	; 0x2c
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <LL_GPIO_SetPinOutputType>:
{
 8007812:	b480      	push	{r7}
 8007814:	b085      	sub	sp, #20
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	43db      	mvns	r3, r3
 8007826:	401a      	ands	r2, r3
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	431a      	orrs	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	605a      	str	r2, [r3, #4]
}
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <LL_GPIO_SetPinSpeed>:
{
 8007842:	b480      	push	{r7}
 8007844:	b08b      	sub	sp, #44	; 0x2c
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	fa93 f3a3 	rbit	r3, r3
 800785c:	613b      	str	r3, [r7, #16]
  return result;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007868:	2320      	movs	r3, #32
 800786a:	e003      	b.n	8007874 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	fab3 f383 	clz	r3, r3
 8007872:	b2db      	uxtb	r3, r3
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	2103      	movs	r1, #3
 8007878:	fa01 f303 	lsl.w	r3, r1, r3
 800787c:	43db      	mvns	r3, r3
 800787e:	401a      	ands	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	fa93 f3a3 	rbit	r3, r3
 800788a:	61fb      	str	r3, [r7, #28]
  return result;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007896:	2320      	movs	r3, #32
 8007898:	e003      	b.n	80078a2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	fab3 f383 	clz	r3, r3
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	6879      	ldr	r1, [r7, #4]
 80078a6:	fa01 f303 	lsl.w	r3, r1, r3
 80078aa:	431a      	orrs	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	609a      	str	r2, [r3, #8]
}
 80078b0:	bf00      	nop
 80078b2:	372c      	adds	r7, #44	; 0x2c
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <LL_GPIO_SetPinPull>:
{
 80078bc:	b480      	push	{r7}
 80078be:	b08b      	sub	sp, #44	; 0x2c
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	fa93 f3a3 	rbit	r3, r3
 80078d6:	613b      	str	r3, [r7, #16]
  return result;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80078e2:	2320      	movs	r3, #32
 80078e4:	e003      	b.n	80078ee <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	fab3 f383 	clz	r3, r3
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	2103      	movs	r1, #3
 80078f2:	fa01 f303 	lsl.w	r3, r1, r3
 80078f6:	43db      	mvns	r3, r3
 80078f8:	401a      	ands	r2, r3
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	fa93 f3a3 	rbit	r3, r3
 8007904:	61fb      	str	r3, [r7, #28]
  return result;
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007910:	2320      	movs	r3, #32
 8007912:	e003      	b.n	800791c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	fab3 f383 	clz	r3, r3
 800791a:	b2db      	uxtb	r3, r3
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	fa01 f303 	lsl.w	r3, r1, r3
 8007924:	431a      	orrs	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	60da      	str	r2, [r3, #12]
}
 800792a:	bf00      	nop
 800792c:	372c      	adds	r7, #44	; 0x2c
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <LL_GPIO_SetAFPin_0_7>:
{
 8007936:	b480      	push	{r7}
 8007938:	b08b      	sub	sp, #44	; 0x2c
 800793a:	af00      	add	r7, sp, #0
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6a1a      	ldr	r2, [r3, #32]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	fa93 f3a3 	rbit	r3, r3
 8007950:	613b      	str	r3, [r7, #16]
  return result;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800795c:	2320      	movs	r3, #32
 800795e:	e003      	b.n	8007968 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	fab3 f383 	clz	r3, r3
 8007966:	b2db      	uxtb	r3, r3
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	210f      	movs	r1, #15
 800796c:	fa01 f303 	lsl.w	r3, r1, r3
 8007970:	43db      	mvns	r3, r3
 8007972:	401a      	ands	r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	fa93 f3a3 	rbit	r3, r3
 800797e:	61fb      	str	r3, [r7, #28]
  return result;
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800798a:	2320      	movs	r3, #32
 800798c:	e003      	b.n	8007996 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	fab3 f383 	clz	r3, r3
 8007994:	b2db      	uxtb	r3, r3
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	6879      	ldr	r1, [r7, #4]
 800799a:	fa01 f303 	lsl.w	r3, r1, r3
 800799e:	431a      	orrs	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	621a      	str	r2, [r3, #32]
}
 80079a4:	bf00      	nop
 80079a6:	372c      	adds	r7, #44	; 0x2c
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <LL_GPIO_SetAFPin_8_15>:
{
 80079b0:	b480      	push	{r7}
 80079b2:	b08b      	sub	sp, #44	; 0x2c
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	0a1b      	lsrs	r3, r3, #8
 80079c4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	fa93 f3a3 	rbit	r3, r3
 80079cc:	613b      	str	r3, [r7, #16]
  return result;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80079d8:	2320      	movs	r3, #32
 80079da:	e003      	b.n	80079e4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	fab3 f383 	clz	r3, r3
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	210f      	movs	r1, #15
 80079e8:	fa01 f303 	lsl.w	r3, r1, r3
 80079ec:	43db      	mvns	r3, r3
 80079ee:	401a      	ands	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	0a1b      	lsrs	r3, r3, #8
 80079f4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	fa93 f3a3 	rbit	r3, r3
 80079fc:	61fb      	str	r3, [r7, #28]
  return result;
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007a08:	2320      	movs	r3, #32
 8007a0a:	e003      	b.n	8007a14 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	fab3 f383 	clz	r3, r3
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	fa01 f303 	lsl.w	r3, r1, r3
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007a22:	bf00      	nop
 8007a24:	372c      	adds	r7, #44	; 0x2c
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b08a      	sub	sp, #40	; 0x28
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	fa93 f3a3 	rbit	r3, r3
 8007a4c:	617b      	str	r3, [r7, #20]
  return result;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <LL_GPIO_Init+0x2e>
    return 32U;
 8007a58:	2320      	movs	r3, #32
 8007a5a:	e003      	b.n	8007a64 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	fab3 f383 	clz	r3, r3
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007a66:	e057      	b.n	8007b18 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	fa01 f303 	lsl.w	r3, r1, r3
 8007a74:	4013      	ands	r3, r2
 8007a76:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d049      	beq.n	8007b12 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d003      	beq.n	8007a8e <LL_GPIO_Init+0x60>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d10d      	bne.n	8007aaa <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	461a      	mov	r2, r3
 8007a94:	6a39      	ldr	r1, [r7, #32]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff fed3 	bl	8007842 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	6a39      	ldr	r1, [r7, #32]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff feb4 	bl	8007812 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6a39      	ldr	r1, [r7, #32]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff ff02 	bl	80078bc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d121      	bne.n	8007b04 <LL_GPIO_Init+0xd6>
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	fa93 f3a3 	rbit	r3, r3
 8007aca:	60bb      	str	r3, [r7, #8]
  return result;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <LL_GPIO_Init+0xac>
    return 32U;
 8007ad6:	2320      	movs	r3, #32
 8007ad8:	e003      	b.n	8007ae2 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	fab3 f383 	clz	r3, r3
 8007ae0:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8007ae2:	2b07      	cmp	r3, #7
 8007ae4:	d807      	bhi.n	8007af6 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	461a      	mov	r2, r3
 8007aec:	6a39      	ldr	r1, [r7, #32]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff ff21 	bl	8007936 <LL_GPIO_SetAFPin_0_7>
 8007af4:	e006      	b.n	8007b04 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	461a      	mov	r2, r3
 8007afc:	6a39      	ldr	r1, [r7, #32]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff ff56 	bl	80079b0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6a39      	ldr	r1, [r7, #32]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7ff fe43 	bl	8007798 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	3301      	adds	r3, #1
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1a0      	bne.n	8007a68 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3728      	adds	r7, #40	; 0x28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <LL_SPI_IsEnabled>:
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b40:	2b40      	cmp	r3, #64	; 0x40
 8007b42:	d101      	bne.n	8007b48 <LL_SPI_IsEnabled+0x18>
 8007b44:	2301      	movs	r3, #1
 8007b46:	e000      	b.n	8007b4a <LL_SPI_IsEnabled+0x1a>
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <LL_SPI_SetCRCPolynomial>:
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	461a      	mov	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	611a      	str	r2, [r3, #16]
}
 8007b6a:	bf00      	nop
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff ffd3 	bl	8007b30 <LL_SPI_IsEnabled>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d139      	bne.n	8007c04 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b98:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	6811      	ldr	r1, [r2, #0]
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	6852      	ldr	r2, [r2, #4]
 8007ba4:	4311      	orrs	r1, r2
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	6892      	ldr	r2, [r2, #8]
 8007baa:	4311      	orrs	r1, r2
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	68d2      	ldr	r2, [r2, #12]
 8007bb0:	4311      	orrs	r1, r2
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	6912      	ldr	r2, [r2, #16]
 8007bb6:	4311      	orrs	r1, r2
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	6952      	ldr	r2, [r2, #20]
 8007bbc:	4311      	orrs	r1, r2
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	6992      	ldr	r2, [r2, #24]
 8007bc2:	4311      	orrs	r1, r2
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	69d2      	ldr	r2, [r2, #28]
 8007bc8:	4311      	orrs	r1, r2
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	6a12      	ldr	r2, [r2, #32]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f023 0204 	bic.w	r2, r3, #4
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	0c1b      	lsrs	r3, r3, #16
 8007be4:	431a      	orrs	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bf2:	d105      	bne.n	8007c00 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff ffab 	bl	8007b56 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	61da      	str	r2, [r3, #28]
  return status;
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	f107 001c 	add.w	r0, r7, #28
 8007c28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d123      	bne.n	8007c7c <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d105      	bne.n	8007c70 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 fae3 	bl	800923c <USB_CoreReset>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]
 8007c7a:	e01b      	b.n	8007cb4 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 fad7 	bl	800923c <USB_CoreReset>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c92:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d106      	bne.n	8007ca8 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8007ca6:	e005      	b.n	8007cb4 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007cb4:	7fbb      	ldrb	r3, [r7, #30]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d10b      	bne.n	8007cd2 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f043 0206 	orr.w	r2, r3, #6
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f043 0220 	orr.w	r2, r3, #32
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cde:	b004      	add	sp, #16
 8007ce0:	4770      	bx	lr
	...

08007ce4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007cf2:	79fb      	ldrb	r3, [r7, #7]
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d165      	bne.n	8007dc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4a41      	ldr	r2, [pc, #260]	; (8007e00 <USB_SetTurnaroundTime+0x11c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d906      	bls.n	8007d0e <USB_SetTurnaroundTime+0x2a>
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	4a40      	ldr	r2, [pc, #256]	; (8007e04 <USB_SetTurnaroundTime+0x120>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d202      	bcs.n	8007d0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007d08:	230f      	movs	r3, #15
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	e062      	b.n	8007dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	4a3c      	ldr	r2, [pc, #240]	; (8007e04 <USB_SetTurnaroundTime+0x120>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d306      	bcc.n	8007d24 <USB_SetTurnaroundTime+0x40>
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	4a3b      	ldr	r2, [pc, #236]	; (8007e08 <USB_SetTurnaroundTime+0x124>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d202      	bcs.n	8007d24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007d1e:	230e      	movs	r3, #14
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e057      	b.n	8007dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	4a38      	ldr	r2, [pc, #224]	; (8007e08 <USB_SetTurnaroundTime+0x124>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d306      	bcc.n	8007d3a <USB_SetTurnaroundTime+0x56>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4a37      	ldr	r2, [pc, #220]	; (8007e0c <USB_SetTurnaroundTime+0x128>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d202      	bcs.n	8007d3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007d34:	230d      	movs	r3, #13
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	e04c      	b.n	8007dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	4a33      	ldr	r2, [pc, #204]	; (8007e0c <USB_SetTurnaroundTime+0x128>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d306      	bcc.n	8007d50 <USB_SetTurnaroundTime+0x6c>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	4a32      	ldr	r2, [pc, #200]	; (8007e10 <USB_SetTurnaroundTime+0x12c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d802      	bhi.n	8007d50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007d4a:	230c      	movs	r3, #12
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	e041      	b.n	8007dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4a2f      	ldr	r2, [pc, #188]	; (8007e10 <USB_SetTurnaroundTime+0x12c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d906      	bls.n	8007d66 <USB_SetTurnaroundTime+0x82>
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4a2e      	ldr	r2, [pc, #184]	; (8007e14 <USB_SetTurnaroundTime+0x130>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d802      	bhi.n	8007d66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007d60:	230b      	movs	r3, #11
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	e036      	b.n	8007dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	4a2a      	ldr	r2, [pc, #168]	; (8007e14 <USB_SetTurnaroundTime+0x130>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d906      	bls.n	8007d7c <USB_SetTurnaroundTime+0x98>
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	4a29      	ldr	r2, [pc, #164]	; (8007e18 <USB_SetTurnaroundTime+0x134>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d802      	bhi.n	8007d7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007d76:	230a      	movs	r3, #10
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	e02b      	b.n	8007dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4a26      	ldr	r2, [pc, #152]	; (8007e18 <USB_SetTurnaroundTime+0x134>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d906      	bls.n	8007d92 <USB_SetTurnaroundTime+0xae>
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4a25      	ldr	r2, [pc, #148]	; (8007e1c <USB_SetTurnaroundTime+0x138>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d202      	bcs.n	8007d92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007d8c:	2309      	movs	r3, #9
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	e020      	b.n	8007dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	4a21      	ldr	r2, [pc, #132]	; (8007e1c <USB_SetTurnaroundTime+0x138>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d306      	bcc.n	8007da8 <USB_SetTurnaroundTime+0xc4>
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	4a20      	ldr	r2, [pc, #128]	; (8007e20 <USB_SetTurnaroundTime+0x13c>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d802      	bhi.n	8007da8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007da2:	2308      	movs	r3, #8
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	e015      	b.n	8007dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	4a1d      	ldr	r2, [pc, #116]	; (8007e20 <USB_SetTurnaroundTime+0x13c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d906      	bls.n	8007dbe <USB_SetTurnaroundTime+0xda>
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4a1c      	ldr	r2, [pc, #112]	; (8007e24 <USB_SetTurnaroundTime+0x140>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d202      	bcs.n	8007dbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007db8:	2307      	movs	r3, #7
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	e00a      	b.n	8007dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007dbe:	2306      	movs	r3, #6
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	e007      	b.n	8007dd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007dc4:	79fb      	ldrb	r3, [r7, #7]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d102      	bne.n	8007dd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007dca:	2309      	movs	r3, #9
 8007dcc:	617b      	str	r3, [r7, #20]
 8007dce:	e001      	b.n	8007dd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007dd0:	2309      	movs	r3, #9
 8007dd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	68da      	ldr	r2, [r3, #12]
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	029b      	lsls	r3, r3, #10
 8007de8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007dec:	431a      	orrs	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	371c      	adds	r7, #28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	00d8acbf 	.word	0x00d8acbf
 8007e04:	00e4e1c0 	.word	0x00e4e1c0
 8007e08:	00f42400 	.word	0x00f42400
 8007e0c:	01067380 	.word	0x01067380
 8007e10:	011a499f 	.word	0x011a499f
 8007e14:	01312cff 	.word	0x01312cff
 8007e18:	014ca43f 	.word	0x014ca43f
 8007e1c:	016e3600 	.word	0x016e3600
 8007e20:	01a6ab1f 	.word	0x01a6ab1f
 8007e24:	01e84800 	.word	0x01e84800

08007e28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f043 0201 	orr.w	r2, r3, #1
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f023 0201 	bic.w	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d115      	bne.n	8007eba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e9a:	200a      	movs	r0, #10
 8007e9c:	f7fb fcc0 	bl	8003820 <HAL_Delay>
      ms += 10U;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	330a      	adds	r3, #10
 8007ea4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 f939 	bl	800911e <USB_GetMode>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d01e      	beq.n	8007ef0 <USB_SetCurrentMode+0x84>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2bc7      	cmp	r3, #199	; 0xc7
 8007eb6:	d9f0      	bls.n	8007e9a <USB_SetCurrentMode+0x2e>
 8007eb8:	e01a      	b.n	8007ef0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d115      	bne.n	8007eec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ecc:	200a      	movs	r0, #10
 8007ece:	f7fb fca7 	bl	8003820 <HAL_Delay>
      ms += 10U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	330a      	adds	r3, #10
 8007ed6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 f920 	bl	800911e <USB_GetMode>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d005      	beq.n	8007ef0 <USB_SetCurrentMode+0x84>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2bc7      	cmp	r3, #199	; 0xc7
 8007ee8:	d9f0      	bls.n	8007ecc <USB_SetCurrentMode+0x60>
 8007eea:	e001      	b.n	8007ef0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e005      	b.n	8007efc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2bc8      	cmp	r3, #200	; 0xc8
 8007ef4:	d101      	bne.n	8007efa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f04:	b084      	sub	sp, #16
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b086      	sub	sp, #24
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f1e:	2300      	movs	r3, #0
 8007f20:	613b      	str	r3, [r7, #16]
 8007f22:	e009      	b.n	8007f38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	3340      	adds	r3, #64	; 0x40
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	2200      	movs	r2, #0
 8007f30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	3301      	adds	r3, #1
 8007f36:	613b      	str	r3, [r7, #16]
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	2b0e      	cmp	r3, #14
 8007f3c:	d9f2      	bls.n	8007f24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d11c      	bne.n	8007f80 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f54:	f043 0302 	orr.w	r3, r3, #2
 8007f58:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	639a      	str	r2, [r3, #56]	; 0x38
 8007f7e:	e00b      	b.n	8007f98 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fa4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d10d      	bne.n	8007fc8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d104      	bne.n	8007fbe <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f968 	bl	800828c <USB_SetDevSpeed>
 8007fbc:	e008      	b.n	8007fd0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f963 	bl	800828c <USB_SetDevSpeed>
 8007fc6:	e003      	b.n	8007fd0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007fc8:	2103      	movs	r1, #3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f95e 	bl	800828c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007fd0:	2110      	movs	r1, #16
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f8fa 	bl	80081cc <USB_FlushTxFifo>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f924 	bl	8008230 <USB_FlushRxFifo>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008004:	461a      	mov	r2, r3
 8008006:	2300      	movs	r3, #0
 8008008:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008010:	461a      	mov	r2, r3
 8008012:	2300      	movs	r3, #0
 8008014:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008016:	2300      	movs	r3, #0
 8008018:	613b      	str	r3, [r7, #16]
 800801a:	e043      	b.n	80080a4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800802e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008032:	d118      	bne.n	8008066 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10a      	bne.n	8008050 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008046:	461a      	mov	r2, r3
 8008048:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	e013      	b.n	8008078 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805c:	461a      	mov	r2, r3
 800805e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008062:	6013      	str	r3, [r2, #0]
 8008064:	e008      	b.n	8008078 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008072:	461a      	mov	r2, r3
 8008074:	2300      	movs	r3, #0
 8008076:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008084:	461a      	mov	r2, r3
 8008086:	2300      	movs	r3, #0
 8008088:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008096:	461a      	mov	r2, r3
 8008098:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800809c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	3301      	adds	r3, #1
 80080a2:	613b      	str	r3, [r7, #16]
 80080a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080a8:	461a      	mov	r2, r3
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d3b5      	bcc.n	800801c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080b0:	2300      	movs	r3, #0
 80080b2:	613b      	str	r3, [r7, #16]
 80080b4:	e043      	b.n	800813e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080cc:	d118      	bne.n	8008100 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e0:	461a      	mov	r2, r3
 80080e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	e013      	b.n	8008112 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f6:	461a      	mov	r2, r3
 80080f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	e008      	b.n	8008112 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800810c:	461a      	mov	r2, r3
 800810e:	2300      	movs	r3, #0
 8008110:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4413      	add	r3, r2
 800811a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800811e:	461a      	mov	r2, r3
 8008120:	2300      	movs	r3, #0
 8008122:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008130:	461a      	mov	r2, r3
 8008132:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008136:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	3301      	adds	r3, #1
 800813c:	613b      	str	r3, [r7, #16]
 800813e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008142:	461a      	mov	r2, r3
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	4293      	cmp	r3, r2
 8008148:	d3b5      	bcc.n	80080b6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800815c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800816a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800816c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008170:	2b00      	cmp	r3, #0
 8008172:	d105      	bne.n	8008180 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	f043 0210 	orr.w	r2, r3, #16
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	4b10      	ldr	r3, [pc, #64]	; (80081c8 <USB_DevInit+0x2c4>)
 8008186:	4313      	orrs	r3, r2
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800818c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008190:	2b00      	cmp	r3, #0
 8008192:	d005      	beq.n	80081a0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	f043 0208 	orr.w	r2, r3, #8
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d107      	bne.n	80081b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081b0:	f043 0304 	orr.w	r3, r3, #4
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081c4:	b004      	add	sp, #16
 80081c6:	4770      	bx	lr
 80081c8:	803c3800 	.word	0x803c3800

080081cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3301      	adds	r3, #1
 80081de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80081e6:	d901      	bls.n	80081ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e01b      	b.n	8008224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	daf2      	bge.n	80081da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	019b      	lsls	r3, r3, #6
 80081fc:	f043 0220 	orr.w	r2, r3, #32
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3301      	adds	r3, #1
 8008208:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008210:	d901      	bls.n	8008216 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e006      	b.n	8008224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b20      	cmp	r3, #32
 8008220:	d0f0      	beq.n	8008204 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3301      	adds	r3, #1
 8008240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008248:	d901      	bls.n	800824e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e018      	b.n	8008280 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	daf2      	bge.n	800823c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2210      	movs	r2, #16
 800825e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3301      	adds	r3, #1
 8008264:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800826c:	d901      	bls.n	8008272 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e006      	b.n	8008280 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0310 	and.w	r3, r3, #16
 800827a:	2b10      	cmp	r3, #16
 800827c:	d0f0      	beq.n	8008260 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	68f9      	ldr	r1, [r7, #12]
 80082a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082ac:	4313      	orrs	r3, r2
 80082ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80082be:	b480      	push	{r7}
 80082c0:	b087      	sub	sp, #28
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f003 0306 	and.w	r3, r3, #6
 80082d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d102      	bne.n	80082e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80082de:	2300      	movs	r3, #0
 80082e0:	75fb      	strb	r3, [r7, #23]
 80082e2:	e00a      	b.n	80082fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d002      	beq.n	80082f0 <USB_GetDevSpeed+0x32>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b06      	cmp	r3, #6
 80082ee:	d102      	bne.n	80082f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80082f0:	2302      	movs	r3, #2
 80082f2:	75fb      	strb	r3, [r7, #23]
 80082f4:	e001      	b.n	80082fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80082f6:	230f      	movs	r3, #15
 80082f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	371c      	adds	r7, #28
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	785b      	ldrb	r3, [r3, #1]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d13a      	bne.n	800839a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832a:	69da      	ldr	r2, [r3, #28]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	f003 030f 	and.w	r3, r3, #15
 8008334:	2101      	movs	r1, #1
 8008336:	fa01 f303 	lsl.w	r3, r1, r3
 800833a:	b29b      	uxth	r3, r3
 800833c:	68f9      	ldr	r1, [r7, #12]
 800833e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008342:	4313      	orrs	r3, r2
 8008344:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d155      	bne.n	8008408 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	791b      	ldrb	r3, [r3, #4]
 8008376:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008378:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	059b      	lsls	r3, r3, #22
 800837e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008380:	4313      	orrs	r3, r2
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	0151      	lsls	r1, r2, #5
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	440a      	add	r2, r1
 800838a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800838e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	e036      	b.n	8008408 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a0:	69da      	ldr	r2, [r3, #28]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	2101      	movs	r1, #1
 80083ac:	fa01 f303 	lsl.w	r3, r1, r3
 80083b0:	041b      	lsls	r3, r3, #16
 80083b2:	68f9      	ldr	r1, [r7, #12]
 80083b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083b8:	4313      	orrs	r3, r2
 80083ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d11a      	bne.n	8008408 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	791b      	ldrb	r3, [r3, #4]
 80083ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80083ee:	430b      	orrs	r3, r1
 80083f0:	4313      	orrs	r3, r2
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	0151      	lsls	r1, r2, #5
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	440a      	add	r2, r1
 80083fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008406:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
	...

08008418 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	785b      	ldrb	r3, [r3, #1]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d161      	bne.n	80084f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800844a:	d11f      	bne.n	800848c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	440a      	add	r2, r1
 8008462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008466:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800846a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	440a      	add	r2, r1
 8008482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008486:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800848a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	f003 030f 	and.w	r3, r3, #15
 800849c:	2101      	movs	r1, #1
 800849e:	fa01 f303 	lsl.w	r3, r1, r3
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	43db      	mvns	r3, r3
 80084a6:	68f9      	ldr	r1, [r7, #12]
 80084a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084ac:	4013      	ands	r3, r2
 80084ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b6:	69da      	ldr	r2, [r3, #28]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	f003 030f 	and.w	r3, r3, #15
 80084c0:	2101      	movs	r1, #1
 80084c2:	fa01 f303 	lsl.w	r3, r1, r3
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	43db      	mvns	r3, r3
 80084ca:	68f9      	ldr	r1, [r7, #12]
 80084cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084d0:	4013      	ands	r3, r2
 80084d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	0159      	lsls	r1, r3, #5
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	440b      	add	r3, r1
 80084ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ee:	4619      	mov	r1, r3
 80084f0:	4b35      	ldr	r3, [pc, #212]	; (80085c8 <USB_DeactivateEndpoint+0x1b0>)
 80084f2:	4013      	ands	r3, r2
 80084f4:	600b      	str	r3, [r1, #0]
 80084f6:	e060      	b.n	80085ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800850a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800850e:	d11f      	bne.n	8008550 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	0151      	lsls	r1, r2, #5
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	440a      	add	r2, r1
 8008526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800852a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800852e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	0151      	lsls	r1, r2, #5
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	440a      	add	r2, r1
 8008546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800854a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800854e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	f003 030f 	and.w	r3, r3, #15
 8008560:	2101      	movs	r1, #1
 8008562:	fa01 f303 	lsl.w	r3, r1, r3
 8008566:	041b      	lsls	r3, r3, #16
 8008568:	43db      	mvns	r3, r3
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008570:	4013      	ands	r3, r2
 8008572:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857a:	69da      	ldr	r2, [r3, #28]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	f003 030f 	and.w	r3, r3, #15
 8008584:	2101      	movs	r1, #1
 8008586:	fa01 f303 	lsl.w	r3, r1, r3
 800858a:	041b      	lsls	r3, r3, #16
 800858c:	43db      	mvns	r3, r3
 800858e:	68f9      	ldr	r1, [r7, #12]
 8008590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008594:	4013      	ands	r3, r2
 8008596:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	0159      	lsls	r1, r3, #5
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	440b      	add	r3, r1
 80085ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b2:	4619      	mov	r1, r3
 80085b4:	4b05      	ldr	r3, [pc, #20]	; (80085cc <USB_DeactivateEndpoint+0x1b4>)
 80085b6:	4013      	ands	r3, r2
 80085b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	ec337800 	.word	0xec337800
 80085cc:	eff37800 	.word	0xeff37800

080085d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08a      	sub	sp, #40	; 0x28
 80085d4:	af02      	add	r7, sp, #8
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	4613      	mov	r3, r2
 80085dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	785b      	ldrb	r3, [r3, #1]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	f040 817a 	bne.w	80088e6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d132      	bne.n	8008660 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	0151      	lsls	r1, r2, #5
 800860c:	69fa      	ldr	r2, [r7, #28]
 800860e:	440a      	add	r2, r1
 8008610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008614:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008618:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800861c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	0151      	lsls	r1, r2, #5
 8008630:	69fa      	ldr	r2, [r7, #28]
 8008632:	440a      	add	r2, r1
 8008634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008638:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800863c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	4413      	add	r3, r2
 8008646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	0151      	lsls	r1, r2, #5
 8008650:	69fa      	ldr	r2, [r7, #28]
 8008652:	440a      	add	r2, r1
 8008654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008658:	0cdb      	lsrs	r3, r3, #19
 800865a:	04db      	lsls	r3, r3, #19
 800865c:	6113      	str	r3, [r2, #16]
 800865e:	e092      	b.n	8008786 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	0151      	lsls	r1, r2, #5
 8008672:	69fa      	ldr	r2, [r7, #28]
 8008674:	440a      	add	r2, r1
 8008676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800867a:	0cdb      	lsrs	r3, r3, #19
 800867c:	04db      	lsls	r3, r3, #19
 800867e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	0151      	lsls	r1, r2, #5
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	440a      	add	r2, r1
 8008696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800869a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800869e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086a2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d11a      	bne.n	80086e0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	691a      	ldr	r2, [r3, #16]
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d903      	bls.n	80086be <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	689a      	ldr	r2, [r3, #8]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	69fa      	ldr	r2, [r7, #28]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086dc:	6113      	str	r3, [r2, #16]
 80086de:	e01b      	b.n	8008718 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ec:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	6919      	ldr	r1, [r3, #16]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	440b      	add	r3, r1
 80086f8:	1e59      	subs	r1, r3, #1
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8008702:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008704:	4ba2      	ldr	r3, [pc, #648]	; (8008990 <USB_EPStartXfer+0x3c0>)
 8008706:	400b      	ands	r3, r1
 8008708:	69b9      	ldr	r1, [r7, #24]
 800870a:	0148      	lsls	r0, r1, #5
 800870c:	69f9      	ldr	r1, [r7, #28]
 800870e:	4401      	add	r1, r0
 8008710:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008714:	4313      	orrs	r3, r2
 8008716:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	4413      	add	r3, r2
 8008720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008724:	691a      	ldr	r2, [r3, #16]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800872e:	69b9      	ldr	r1, [r7, #24]
 8008730:	0148      	lsls	r0, r1, #5
 8008732:	69f9      	ldr	r1, [r7, #28]
 8008734:	4401      	add	r1, r0
 8008736:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800873a:	4313      	orrs	r3, r2
 800873c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	791b      	ldrb	r3, [r3, #4]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d11f      	bne.n	8008786 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	4413      	add	r3, r2
 800874e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	0151      	lsls	r1, r2, #5
 8008758:	69fa      	ldr	r2, [r7, #28]
 800875a:	440a      	add	r2, r1
 800875c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008760:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008764:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	0151      	lsls	r1, r2, #5
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	440a      	add	r2, r1
 800877c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008780:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008784:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d14b      	bne.n	8008824 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d009      	beq.n	80087a8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a0:	461a      	mov	r2, r3
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	791b      	ldrb	r3, [r3, #4]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d128      	bne.n	8008802 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d110      	bne.n	80087e2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	0151      	lsls	r1, r2, #5
 80087d2:	69fa      	ldr	r2, [r7, #28]
 80087d4:	440a      	add	r2, r1
 80087d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	e00f      	b.n	8008802 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	0151      	lsls	r1, r2, #5
 80087f4:	69fa      	ldr	r2, [r7, #28]
 80087f6:	440a      	add	r2, r1
 80087f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008800:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	4413      	add	r3, r2
 800880a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	0151      	lsls	r1, r2, #5
 8008814:	69fa      	ldr	r2, [r7, #28]
 8008816:	440a      	add	r2, r1
 8008818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800881c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008820:	6013      	str	r3, [r2, #0]
 8008822:	e165      	b.n	8008af0 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	0151      	lsls	r1, r2, #5
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	440a      	add	r2, r1
 800883a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800883e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008842:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	791b      	ldrb	r3, [r3, #4]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d015      	beq.n	8008878 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 814d 	beq.w	8008af0 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	f003 030f 	and.w	r3, r3, #15
 8008866:	2101      	movs	r1, #1
 8008868:	fa01 f303 	lsl.w	r3, r1, r3
 800886c:	69f9      	ldr	r1, [r7, #28]
 800886e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008872:	4313      	orrs	r3, r2
 8008874:	634b      	str	r3, [r1, #52]	; 0x34
 8008876:	e13b      	b.n	8008af0 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008884:	2b00      	cmp	r3, #0
 8008886:	d110      	bne.n	80088aa <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	69fa      	ldr	r2, [r7, #28]
 800889c:	440a      	add	r2, r1
 800889e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088a6:	6013      	str	r3, [r2, #0]
 80088a8:	e00f      	b.n	80088ca <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	0151      	lsls	r1, r2, #5
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	440a      	add	r2, r1
 80088c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	68d9      	ldr	r1, [r3, #12]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	781a      	ldrb	r2, [r3, #0]
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	b298      	uxth	r0, r3
 80088d8:	79fb      	ldrb	r3, [r7, #7]
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	4603      	mov	r3, r0
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 f9b8 	bl	8008c54 <USB_WritePacket>
 80088e4:	e104      	b.n	8008af0 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	0151      	lsls	r1, r2, #5
 80088f8:	69fa      	ldr	r2, [r7, #28]
 80088fa:	440a      	add	r2, r1
 80088fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008900:	0cdb      	lsrs	r3, r3, #19
 8008902:	04db      	lsls	r3, r3, #19
 8008904:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	4413      	add	r3, r2
 800890e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	0151      	lsls	r1, r2, #5
 8008918:	69fa      	ldr	r2, [r7, #28]
 800891a:	440a      	add	r2, r1
 800891c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008920:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008924:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008928:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d131      	bne.n	8008994 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	4413      	add	r3, r2
 8008950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008954:	691a      	ldr	r2, [r3, #16]
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800895e:	69b9      	ldr	r1, [r7, #24]
 8008960:	0148      	lsls	r0, r1, #5
 8008962:	69f9      	ldr	r1, [r7, #28]
 8008964:	4401      	add	r1, r0
 8008966:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800896a:	4313      	orrs	r3, r2
 800896c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	0151      	lsls	r1, r2, #5
 8008980:	69fa      	ldr	r2, [r7, #28]
 8008982:	440a      	add	r2, r1
 8008984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800898c:	6113      	str	r3, [r2, #16]
 800898e:	e061      	b.n	8008a54 <USB_EPStartXfer+0x484>
 8008990:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d123      	bne.n	80089e4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a8:	691a      	ldr	r2, [r3, #16]
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089b2:	69b9      	ldr	r1, [r7, #24]
 80089b4:	0148      	lsls	r0, r1, #5
 80089b6:	69f9      	ldr	r1, [r7, #28]
 80089b8:	4401      	add	r1, r0
 80089ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089be:	4313      	orrs	r3, r2
 80089c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	015a      	lsls	r2, r3, #5
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	4413      	add	r3, r2
 80089ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	69ba      	ldr	r2, [r7, #24]
 80089d2:	0151      	lsls	r1, r2, #5
 80089d4:	69fa      	ldr	r2, [r7, #28]
 80089d6:	440a      	add	r2, r1
 80089d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089e0:	6113      	str	r3, [r2, #16]
 80089e2:	e037      	b.n	8008a54 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	691a      	ldr	r2, [r3, #16]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	4413      	add	r3, r2
 80089ee:	1e5a      	subs	r2, r3, #1
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	8afa      	ldrh	r2, [r7, #22]
 8008a00:	fb03 f202 	mul.w	r2, r3, r2
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	015a      	lsls	r2, r3, #5
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a14:	691a      	ldr	r2, [r3, #16]
 8008a16:	8afb      	ldrh	r3, [r7, #22]
 8008a18:	04d9      	lsls	r1, r3, #19
 8008a1a:	4b38      	ldr	r3, [pc, #224]	; (8008afc <USB_EPStartXfer+0x52c>)
 8008a1c:	400b      	ands	r3, r1
 8008a1e:	69b9      	ldr	r1, [r7, #24]
 8008a20:	0148      	lsls	r0, r1, #5
 8008a22:	69f9      	ldr	r1, [r7, #28]
 8008a24:	4401      	add	r1, r0
 8008a26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a3a:	691a      	ldr	r2, [r3, #16]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	6a1b      	ldr	r3, [r3, #32]
 8008a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a44:	69b9      	ldr	r1, [r7, #24]
 8008a46:	0148      	lsls	r0, r1, #5
 8008a48:	69f9      	ldr	r1, [r7, #28]
 8008a4a:	4401      	add	r1, r0
 8008a4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a50:	4313      	orrs	r3, r2
 8008a52:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008a54:	79fb      	ldrb	r3, [r7, #7]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d10d      	bne.n	8008a76 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d009      	beq.n	8008a76 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	68d9      	ldr	r1, [r3, #12]
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a72:	460a      	mov	r2, r1
 8008a74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	791b      	ldrb	r3, [r3, #4]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d128      	bne.n	8008ad0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d110      	bne.n	8008ab0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	0151      	lsls	r1, r2, #5
 8008aa0:	69fa      	ldr	r2, [r7, #28]
 8008aa2:	440a      	add	r2, r1
 8008aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	e00f      	b.n	8008ad0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	0151      	lsls	r1, r2, #5
 8008ac2:	69fa      	ldr	r2, [r7, #28]
 8008ac4:	440a      	add	r2, r1
 8008ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ace:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	69ba      	ldr	r2, [r7, #24]
 8008ae0:	0151      	lsls	r1, r2, #5
 8008ae2:	69fa      	ldr	r2, [r7, #28]
 8008ae4:	440a      	add	r2, r1
 8008ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008aee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3720      	adds	r7, #32
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	1ff80000 	.word	0x1ff80000

08008b00 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	785b      	ldrb	r3, [r3, #1]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d14a      	bne.n	8008bb4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b36:	f040 8086 	bne.w	8008c46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	7812      	ldrb	r2, [r2, #0]
 8008b4e:	0151      	lsls	r1, r2, #5
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	440a      	add	r2, r1
 8008b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b5c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	7812      	ldrb	r2, [r2, #0]
 8008b72:	0151      	lsls	r1, r2, #5
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	440a      	add	r2, r1
 8008b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3301      	adds	r3, #1
 8008b86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d902      	bls.n	8008b98 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	75fb      	strb	r3, [r7, #23]
          break;
 8008b96:	e056      	b.n	8008c46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bb0:	d0e7      	beq.n	8008b82 <USB_EPStopXfer+0x82>
 8008bb2:	e048      	b.n	8008c46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bcc:	d13b      	bne.n	8008c46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	7812      	ldrb	r2, [r2, #0]
 8008be2:	0151      	lsls	r1, r2, #5
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	440a      	add	r2, r1
 8008be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bf0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	7812      	ldrb	r2, [r2, #0]
 8008c06:	0151      	lsls	r1, r2, #5
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	440a      	add	r2, r1
 8008c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d902      	bls.n	8008c2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	75fb      	strb	r3, [r7, #23]
          break;
 8008c2a:	e00c      	b.n	8008c46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c44:	d0e7      	beq.n	8008c16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	371c      	adds	r7, #28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b089      	sub	sp, #36	; 0x24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4611      	mov	r1, r2
 8008c60:	461a      	mov	r2, r3
 8008c62:	460b      	mov	r3, r1
 8008c64:	71fb      	strb	r3, [r7, #7]
 8008c66:	4613      	mov	r3, r2
 8008c68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008c72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d123      	bne.n	8008cc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c7a:	88bb      	ldrh	r3, [r7, #4]
 8008c7c:	3303      	adds	r3, #3
 8008c7e:	089b      	lsrs	r3, r3, #2
 8008c80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c82:	2300      	movs	r3, #0
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	e018      	b.n	8008cba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	031a      	lsls	r2, r3, #12
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c94:	461a      	mov	r2, r3
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	3301      	adds	r3, #1
 8008cac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	61bb      	str	r3, [r7, #24]
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d3e2      	bcc.n	8008c88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3724      	adds	r7, #36	; 0x24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b08b      	sub	sp, #44	; 0x2c
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008ce6:	88fb      	ldrh	r3, [r7, #6]
 8008ce8:	089b      	lsrs	r3, r3, #2
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008cee:	88fb      	ldrh	r3, [r7, #6]
 8008cf0:	f003 0303 	and.w	r3, r3, #3
 8008cf4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	623b      	str	r3, [r7, #32]
 8008cfa:	e014      	b.n	8008d26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	3301      	adds	r3, #1
 8008d12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	3301      	adds	r3, #1
 8008d18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	3301      	adds	r3, #1
 8008d24:	623b      	str	r3, [r7, #32]
 8008d26:	6a3a      	ldr	r2, [r7, #32]
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d3e6      	bcc.n	8008cfc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d2e:	8bfb      	ldrh	r3, [r7, #30]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d01e      	beq.n	8008d72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f107 0310 	add.w	r3, r7, #16
 8008d44:	6812      	ldr	r2, [r2, #0]
 8008d46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	fa22 f303 	lsr.w	r3, r2, r3
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	701a      	strb	r2, [r3, #0]
      i++;
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	3301      	adds	r3, #1
 8008d64:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008d66:	8bfb      	ldrh	r3, [r7, #30]
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d6c:	8bfb      	ldrh	r3, [r7, #30]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1ea      	bne.n	8008d48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	372c      	adds	r7, #44	; 0x2c
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	785b      	ldrb	r3, [r3, #1]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d12c      	bne.n	8008df6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	db12      	blt.n	8008dd4 <USB_EPSetStall+0x54>
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00f      	beq.n	8008dd4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	0151      	lsls	r1, r2, #5
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	440a      	add	r2, r1
 8008dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008dd2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	0151      	lsls	r1, r2, #5
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	440a      	add	r2, r1
 8008dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	e02b      	b.n	8008e4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	db12      	blt.n	8008e2e <USB_EPSetStall+0xae>
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00f      	beq.n	8008e2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	0151      	lsls	r1, r2, #5
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	440a      	add	r2, r1
 8008e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	0151      	lsls	r1, r2, #5
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	440a      	add	r2, r1
 8008e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	785b      	ldrb	r3, [r3, #1]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d128      	bne.n	8008eca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	0151      	lsls	r1, r2, #5
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	440a      	add	r2, r1
 8008e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	791b      	ldrb	r3, [r3, #4]
 8008e9c:	2b03      	cmp	r3, #3
 8008e9e:	d003      	beq.n	8008ea8 <USB_EPClearStall+0x4c>
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	791b      	ldrb	r3, [r3, #4]
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d138      	bne.n	8008f1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	0151      	lsls	r1, r2, #5
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	440a      	add	r2, r1
 8008ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ec6:	6013      	str	r3, [r2, #0]
 8008ec8:	e027      	b.n	8008f1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	0151      	lsls	r1, r2, #5
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	440a      	add	r2, r1
 8008ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ee4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ee8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	791b      	ldrb	r3, [r3, #4]
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d003      	beq.n	8008efa <USB_EPClearStall+0x9e>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	791b      	ldrb	r3, [r3, #4]
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d10f      	bne.n	8008f1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	0151      	lsls	r1, r2, #5
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	440a      	add	r2, r1
 8008f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	78fb      	ldrb	r3, [r7, #3]
 8008f56:	011b      	lsls	r3, r3, #4
 8008f58:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008f5c:	68f9      	ldr	r1, [r7, #12]
 8008f5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f62:	4313      	orrs	r3, r2
 8008f64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f8e:	f023 0303 	bic.w	r3, r3, #3
 8008f92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fa2:	f023 0302 	bic.w	r3, r3, #2
 8008fa6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b085      	sub	sp, #20
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fd0:	f023 0303 	bic.w	r3, r3, #3
 8008fd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fe4:	f043 0302 	orr.w	r3, r3, #2
 8008fe8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	4013      	ands	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009010:	68fb      	ldr	r3, [r7, #12]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800901e:	b480      	push	{r7}
 8009020:	b085      	sub	sp, #20
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	4013      	ands	r3, r2
 8009040:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	0c1b      	lsrs	r3, r3, #16
}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009052:	b480      	push	{r7}
 8009054:	b085      	sub	sp, #20
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	4013      	ands	r3, r2
 8009074:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	b29b      	uxth	r3, r3
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009086:	b480      	push	{r7}
 8009088:	b085      	sub	sp, #20
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009096:	78fb      	ldrb	r3, [r7, #3]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	4413      	add	r3, r2
 800909e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	4013      	ands	r3, r2
 80090b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090b4:	68bb      	ldr	r3, [r7, #8]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b087      	sub	sp, #28
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	460b      	mov	r3, r1
 80090cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80090e6:	78fb      	ldrb	r3, [r7, #3]
 80090e8:	f003 030f 	and.w	r3, r3, #15
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	fa22 f303 	lsr.w	r3, r2, r3
 80090f2:	01db      	lsls	r3, r3, #7
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80090fc:	78fb      	ldrb	r3, [r7, #3]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	4413      	add	r3, r2
 8009104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	4013      	ands	r3, r2
 800910e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009110:	68bb      	ldr	r3, [r7, #8]
}
 8009112:	4618      	mov	r0, r3
 8009114:	371c      	adds	r7, #28
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800911e:	b480      	push	{r7}
 8009120:	b083      	sub	sp, #12
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	f003 0301 	and.w	r3, r3, #1
}
 800912e:	4618      	mov	r0, r3
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800913a:	b480      	push	{r7}
 800913c:	b085      	sub	sp, #20
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009154:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009158:	f023 0307 	bic.w	r3, r3, #7
 800915c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800916c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009170:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	460b      	mov	r3, r1
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	333c      	adds	r3, #60	; 0x3c
 8009196:	3304      	adds	r3, #4
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	4a26      	ldr	r2, [pc, #152]	; (8009238 <USB_EP0_OutStart+0xb8>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d90a      	bls.n	80091ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091b4:	d101      	bne.n	80091ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	e037      	b.n	800922a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c0:	461a      	mov	r2, r3
 80091c2:	2300      	movs	r3, #0
 80091c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091e8:	f043 0318 	orr.w	r3, r3, #24
 80091ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009200:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009202:	7afb      	ldrb	r3, [r7, #11]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d10f      	bne.n	8009228 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920e:	461a      	mov	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009222:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009226:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	371c      	adds	r7, #28
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	4f54300a 	.word	0x4f54300a

0800923c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	3301      	adds	r3, #1
 800924c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009254:	d901      	bls.n	800925a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e01b      	b.n	8009292 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	daf2      	bge.n	8009248 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	f043 0201 	orr.w	r2, r3, #1
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3301      	adds	r3, #1
 8009276:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800927e:	d901      	bls.n	8009284 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e006      	b.n	8009292 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	2b01      	cmp	r3, #1
 800928e:	d0f0      	beq.n	8009272 <USB_CoreReset+0x36>

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
	...

080092a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80092ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80092b0:	f005 fdd6 	bl	800ee60 <USBD_static_malloc>
 80092b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d109      	bne.n	80092d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	32b0      	adds	r2, #176	; 0xb0
 80092c6:	2100      	movs	r1, #0
 80092c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80092cc:	2302      	movs	r3, #2
 80092ce:	e0d4      	b.n	800947a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80092d0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80092d4:	2100      	movs	r1, #0
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f006 fce2 	bl	800fca0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	32b0      	adds	r2, #176	; 0xb0
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	32b0      	adds	r2, #176	; 0xb0
 80092f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	7c1b      	ldrb	r3, [r3, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d138      	bne.n	800937a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009308:	4b5e      	ldr	r3, [pc, #376]	; (8009484 <USBD_CDC_Init+0x1e4>)
 800930a:	7819      	ldrb	r1, [r3, #0]
 800930c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009310:	2202      	movs	r2, #2
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f005 fc81 	bl	800ec1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009318:	4b5a      	ldr	r3, [pc, #360]	; (8009484 <USBD_CDC_Init+0x1e4>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	f003 020f 	and.w	r2, r3, #15
 8009320:	6879      	ldr	r1, [r7, #4]
 8009322:	4613      	mov	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	440b      	add	r3, r1
 800932c:	3324      	adds	r3, #36	; 0x24
 800932e:	2201      	movs	r2, #1
 8009330:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009332:	4b55      	ldr	r3, [pc, #340]	; (8009488 <USBD_CDC_Init+0x1e8>)
 8009334:	7819      	ldrb	r1, [r3, #0]
 8009336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800933a:	2202      	movs	r2, #2
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f005 fc6c 	bl	800ec1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009342:	4b51      	ldr	r3, [pc, #324]	; (8009488 <USBD_CDC_Init+0x1e8>)
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	f003 020f 	and.w	r2, r3, #15
 800934a:	6879      	ldr	r1, [r7, #4]
 800934c:	4613      	mov	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	440b      	add	r3, r1
 8009356:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800935a:	2201      	movs	r2, #1
 800935c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800935e:	4b4b      	ldr	r3, [pc, #300]	; (800948c <USBD_CDC_Init+0x1ec>)
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	f003 020f 	and.w	r2, r3, #15
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	4613      	mov	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	440b      	add	r3, r1
 8009372:	3326      	adds	r3, #38	; 0x26
 8009374:	2210      	movs	r2, #16
 8009376:	801a      	strh	r2, [r3, #0]
 8009378:	e035      	b.n	80093e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800937a:	4b42      	ldr	r3, [pc, #264]	; (8009484 <USBD_CDC_Init+0x1e4>)
 800937c:	7819      	ldrb	r1, [r3, #0]
 800937e:	2340      	movs	r3, #64	; 0x40
 8009380:	2202      	movs	r2, #2
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f005 fc49 	bl	800ec1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009388:	4b3e      	ldr	r3, [pc, #248]	; (8009484 <USBD_CDC_Init+0x1e4>)
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	f003 020f 	and.w	r2, r3, #15
 8009390:	6879      	ldr	r1, [r7, #4]
 8009392:	4613      	mov	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	440b      	add	r3, r1
 800939c:	3324      	adds	r3, #36	; 0x24
 800939e:	2201      	movs	r2, #1
 80093a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80093a2:	4b39      	ldr	r3, [pc, #228]	; (8009488 <USBD_CDC_Init+0x1e8>)
 80093a4:	7819      	ldrb	r1, [r3, #0]
 80093a6:	2340      	movs	r3, #64	; 0x40
 80093a8:	2202      	movs	r2, #2
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f005 fc35 	bl	800ec1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80093b0:	4b35      	ldr	r3, [pc, #212]	; (8009488 <USBD_CDC_Init+0x1e8>)
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	f003 020f 	and.w	r2, r3, #15
 80093b8:	6879      	ldr	r1, [r7, #4]
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	440b      	add	r3, r1
 80093c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093c8:	2201      	movs	r2, #1
 80093ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80093cc:	4b2f      	ldr	r3, [pc, #188]	; (800948c <USBD_CDC_Init+0x1ec>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	f003 020f 	and.w	r2, r3, #15
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	440b      	add	r3, r1
 80093e0:	3326      	adds	r3, #38	; 0x26
 80093e2:	2210      	movs	r2, #16
 80093e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80093e6:	4b29      	ldr	r3, [pc, #164]	; (800948c <USBD_CDC_Init+0x1ec>)
 80093e8:	7819      	ldrb	r1, [r3, #0]
 80093ea:	2308      	movs	r3, #8
 80093ec:	2203      	movs	r2, #3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f005 fc13 	bl	800ec1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80093f4:	4b25      	ldr	r3, [pc, #148]	; (800948c <USBD_CDC_Init+0x1ec>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	f003 020f 	and.w	r2, r3, #15
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	4613      	mov	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	440b      	add	r3, r1
 8009408:	3324      	adds	r3, #36	; 0x24
 800940a:	2201      	movs	r2, #1
 800940c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	33b0      	adds	r3, #176	; 0xb0
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009444:	2302      	movs	r3, #2
 8009446:	e018      	b.n	800947a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	7c1b      	ldrb	r3, [r3, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009450:	4b0d      	ldr	r3, [pc, #52]	; (8009488 <USBD_CDC_Init+0x1e8>)
 8009452:	7819      	ldrb	r1, [r3, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800945a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f005 fcca 	bl	800edf8 <USBD_LL_PrepareReceive>
 8009464:	e008      	b.n	8009478 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009466:	4b08      	ldr	r3, [pc, #32]	; (8009488 <USBD_CDC_Init+0x1e8>)
 8009468:	7819      	ldrb	r1, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009470:	2340      	movs	r3, #64	; 0x40
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f005 fcc0 	bl	800edf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	2000014f 	.word	0x2000014f
 8009488:	20000150 	.word	0x20000150
 800948c:	20000151 	.word	0x20000151

08009490 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800949c:	4b3a      	ldr	r3, [pc, #232]	; (8009588 <USBD_CDC_DeInit+0xf8>)
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	4619      	mov	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f005 fbdf 	bl	800ec66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80094a8:	4b37      	ldr	r3, [pc, #220]	; (8009588 <USBD_CDC_DeInit+0xf8>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	f003 020f 	and.w	r2, r3, #15
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	4613      	mov	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	440b      	add	r3, r1
 80094bc:	3324      	adds	r3, #36	; 0x24
 80094be:	2200      	movs	r2, #0
 80094c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80094c2:	4b32      	ldr	r3, [pc, #200]	; (800958c <USBD_CDC_DeInit+0xfc>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f005 fbcc 	bl	800ec66 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80094ce:	4b2f      	ldr	r3, [pc, #188]	; (800958c <USBD_CDC_DeInit+0xfc>)
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	f003 020f 	and.w	r2, r3, #15
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	4613      	mov	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	440b      	add	r3, r1
 80094e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80094e6:	2200      	movs	r2, #0
 80094e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80094ea:	4b29      	ldr	r3, [pc, #164]	; (8009590 <USBD_CDC_DeInit+0x100>)
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f005 fbb8 	bl	800ec66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80094f6:	4b26      	ldr	r3, [pc, #152]	; (8009590 <USBD_CDC_DeInit+0x100>)
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	f003 020f 	and.w	r2, r3, #15
 80094fe:	6879      	ldr	r1, [r7, #4]
 8009500:	4613      	mov	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	440b      	add	r3, r1
 800950a:	3324      	adds	r3, #36	; 0x24
 800950c:	2200      	movs	r2, #0
 800950e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009510:	4b1f      	ldr	r3, [pc, #124]	; (8009590 <USBD_CDC_DeInit+0x100>)
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	f003 020f 	and.w	r2, r3, #15
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	4613      	mov	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	440b      	add	r3, r1
 8009524:	3326      	adds	r3, #38	; 0x26
 8009526:	2200      	movs	r2, #0
 8009528:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	32b0      	adds	r2, #176	; 0xb0
 8009534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01f      	beq.n	800957c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	33b0      	adds	r3, #176	; 0xb0
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	32b0      	adds	r2, #176	; 0xb0
 800955a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955e:	4618      	mov	r0, r3
 8009560:	f005 fc8c 	bl	800ee7c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	32b0      	adds	r2, #176	; 0xb0
 800956e:	2100      	movs	r1, #0
 8009570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	2000014f 	.word	0x2000014f
 800958c:	20000150 	.word	0x20000150
 8009590:	20000151 	.word	0x20000151

08009594 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	32b0      	adds	r2, #176	; 0xb0
 80095a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80095b2:	2300      	movs	r3, #0
 80095b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80095c0:	2303      	movs	r3, #3
 80095c2:	e0bf      	b.n	8009744 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d050      	beq.n	8009672 <USBD_CDC_Setup+0xde>
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	f040 80af 	bne.w	8009734 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	88db      	ldrh	r3, [r3, #6]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d03a      	beq.n	8009654 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	b25b      	sxtb	r3, r3
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	da1b      	bge.n	8009620 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	33b0      	adds	r3, #176	; 0xb0
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4413      	add	r3, r2
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80095fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	88d2      	ldrh	r2, [r2, #6]
 8009604:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	88db      	ldrh	r3, [r3, #6]
 800960a:	2b07      	cmp	r3, #7
 800960c:	bf28      	it	cs
 800960e:	2307      	movcs	r3, #7
 8009610:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	89fa      	ldrh	r2, [r7, #14]
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 fd49 	bl	800b0b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800961e:	e090      	b.n	8009742 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	785a      	ldrb	r2, [r3, #1]
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	88db      	ldrh	r3, [r3, #6]
 800962e:	2b3f      	cmp	r3, #63	; 0x3f
 8009630:	d803      	bhi.n	800963a <USBD_CDC_Setup+0xa6>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	88db      	ldrh	r3, [r3, #6]
 8009636:	b2da      	uxtb	r2, r3
 8009638:	e000      	b.n	800963c <USBD_CDC_Setup+0xa8>
 800963a:	2240      	movs	r2, #64	; 0x40
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009642:	6939      	ldr	r1, [r7, #16]
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800964a:	461a      	mov	r2, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f001 fd5b 	bl	800b108 <USBD_CtlPrepareRx>
      break;
 8009652:	e076      	b.n	8009742 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	33b0      	adds	r3, #176	; 0xb0
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	7850      	ldrb	r0, [r2, #1]
 800966a:	2200      	movs	r2, #0
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	4798      	blx	r3
      break;
 8009670:	e067      	b.n	8009742 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	785b      	ldrb	r3, [r3, #1]
 8009676:	2b0b      	cmp	r3, #11
 8009678:	d851      	bhi.n	800971e <USBD_CDC_Setup+0x18a>
 800967a:	a201      	add	r2, pc, #4	; (adr r2, 8009680 <USBD_CDC_Setup+0xec>)
 800967c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009680:	080096b1 	.word	0x080096b1
 8009684:	0800972d 	.word	0x0800972d
 8009688:	0800971f 	.word	0x0800971f
 800968c:	0800971f 	.word	0x0800971f
 8009690:	0800971f 	.word	0x0800971f
 8009694:	0800971f 	.word	0x0800971f
 8009698:	0800971f 	.word	0x0800971f
 800969c:	0800971f 	.word	0x0800971f
 80096a0:	0800971f 	.word	0x0800971f
 80096a4:	0800971f 	.word	0x0800971f
 80096a8:	080096db 	.word	0x080096db
 80096ac:	08009705 	.word	0x08009705
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d107      	bne.n	80096cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80096bc:	f107 030a 	add.w	r3, r7, #10
 80096c0:	2202      	movs	r2, #2
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 fcf3 	bl	800b0b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096ca:	e032      	b.n	8009732 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 fc7d 	bl	800afce <USBD_CtlError>
            ret = USBD_FAIL;
 80096d4:	2303      	movs	r3, #3
 80096d6:	75fb      	strb	r3, [r7, #23]
          break;
 80096d8:	e02b      	b.n	8009732 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d107      	bne.n	80096f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80096e6:	f107 030d 	add.w	r3, r7, #13
 80096ea:	2201      	movs	r2, #1
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f001 fcde 	bl	800b0b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096f4:	e01d      	b.n	8009732 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 fc68 	bl	800afce <USBD_CtlError>
            ret = USBD_FAIL;
 80096fe:	2303      	movs	r3, #3
 8009700:	75fb      	strb	r3, [r7, #23]
          break;
 8009702:	e016      	b.n	8009732 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b03      	cmp	r3, #3
 800970e:	d00f      	beq.n	8009730 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f001 fc5b 	bl	800afce <USBD_CtlError>
            ret = USBD_FAIL;
 8009718:	2303      	movs	r3, #3
 800971a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800971c:	e008      	b.n	8009730 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f001 fc54 	bl	800afce <USBD_CtlError>
          ret = USBD_FAIL;
 8009726:	2303      	movs	r3, #3
 8009728:	75fb      	strb	r3, [r7, #23]
          break;
 800972a:	e002      	b.n	8009732 <USBD_CDC_Setup+0x19e>
          break;
 800972c:	bf00      	nop
 800972e:	e008      	b.n	8009742 <USBD_CDC_Setup+0x1ae>
          break;
 8009730:	bf00      	nop
      }
      break;
 8009732:	e006      	b.n	8009742 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f001 fc49 	bl	800afce <USBD_CtlError>
      ret = USBD_FAIL;
 800973c:	2303      	movs	r3, #3
 800973e:	75fb      	strb	r3, [r7, #23]
      break;
 8009740:	bf00      	nop
  }

  return (uint8_t)ret;
 8009742:	7dfb      	ldrb	r3, [r7, #23]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3718      	adds	r7, #24
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800975e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	32b0      	adds	r2, #176	; 0xb0
 800976a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009772:	2303      	movs	r3, #3
 8009774:	e065      	b.n	8009842 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	32b0      	adds	r2, #176	; 0xb0
 8009780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009784:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009786:	78fb      	ldrb	r3, [r7, #3]
 8009788:	f003 020f 	and.w	r2, r3, #15
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	4613      	mov	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	440b      	add	r3, r1
 8009798:	3318      	adds	r3, #24
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d02f      	beq.n	8009800 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	f003 020f 	and.w	r2, r3, #15
 80097a6:	6879      	ldr	r1, [r7, #4]
 80097a8:	4613      	mov	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	440b      	add	r3, r1
 80097b2:	3318      	adds	r3, #24
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	78fb      	ldrb	r3, [r7, #3]
 80097b8:	f003 010f 	and.w	r1, r3, #15
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	460b      	mov	r3, r1
 80097c0:	00db      	lsls	r3, r3, #3
 80097c2:	440b      	add	r3, r1
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4403      	add	r3, r0
 80097c8:	331c      	adds	r3, #28
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80097d0:	fb01 f303 	mul.w	r3, r1, r3
 80097d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d112      	bne.n	8009800 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80097da:	78fb      	ldrb	r3, [r7, #3]
 80097dc:	f003 020f 	and.w	r2, r3, #15
 80097e0:	6879      	ldr	r1, [r7, #4]
 80097e2:	4613      	mov	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	440b      	add	r3, r1
 80097ec:	3318      	adds	r3, #24
 80097ee:	2200      	movs	r2, #0
 80097f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80097f2:	78f9      	ldrb	r1, [r7, #3]
 80097f4:	2300      	movs	r3, #0
 80097f6:	2200      	movs	r2, #0
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f005 fadc 	bl	800edb6 <USBD_LL_Transmit>
 80097fe:	e01f      	b.n	8009840 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	2200      	movs	r2, #0
 8009804:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	33b0      	adds	r3, #176	; 0xb0
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d010      	beq.n	8009840 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	33b0      	adds	r3, #176	; 0xb0
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800983c:	78fa      	ldrb	r2, [r7, #3]
 800983e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	460b      	mov	r3, r1
 8009854:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	32b0      	adds	r2, #176	; 0xb0
 8009860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009864:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	32b0      	adds	r2, #176	; 0xb0
 8009870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009878:	2303      	movs	r3, #3
 800987a:	e01a      	b.n	80098b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800987c:	78fb      	ldrb	r3, [r7, #3]
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f005 fada 	bl	800ee3a <USBD_LL_GetRxDataSize>
 8009886:	4602      	mov	r2, r0
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	33b0      	adds	r3, #176	; 0xb0
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80098ac:	4611      	mov	r1, r2
 80098ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	32b0      	adds	r2, #176	; 0xb0
 80098cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d101      	bne.n	80098dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80098d8:	2303      	movs	r3, #3
 80098da:	e025      	b.n	8009928 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	33b0      	adds	r3, #176	; 0xb0
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d01a      	beq.n	8009926 <USBD_CDC_EP0_RxReady+0x6c>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80098f6:	2bff      	cmp	r3, #255	; 0xff
 80098f8:	d015      	beq.n	8009926 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	33b0      	adds	r3, #176	; 0xb0
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009912:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800991a:	b292      	uxth	r2, r2
 800991c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	22ff      	movs	r2, #255	; 0xff
 8009922:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009938:	2182      	movs	r1, #130	; 0x82
 800993a:	4818      	ldr	r0, [pc, #96]	; (800999c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800993c:	f000 fd0f 	bl	800a35e <USBD_GetEpDesc>
 8009940:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009942:	2101      	movs	r1, #1
 8009944:	4815      	ldr	r0, [pc, #84]	; (800999c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009946:	f000 fd0a 	bl	800a35e <USBD_GetEpDesc>
 800994a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800994c:	2181      	movs	r1, #129	; 0x81
 800994e:	4813      	ldr	r0, [pc, #76]	; (800999c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009950:	f000 fd05 	bl	800a35e <USBD_GetEpDesc>
 8009954:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	2210      	movs	r2, #16
 8009960:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d006      	beq.n	8009976 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	2200      	movs	r2, #0
 800996c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009970:	711a      	strb	r2, [r3, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d006      	beq.n	800998a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009984:	711a      	strb	r2, [r3, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2243      	movs	r2, #67	; 0x43
 800998e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009990:	4b02      	ldr	r3, [pc, #8]	; (800999c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	2000010c 	.word	0x2000010c

080099a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099a8:	2182      	movs	r1, #130	; 0x82
 80099aa:	4818      	ldr	r0, [pc, #96]	; (8009a0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80099ac:	f000 fcd7 	bl	800a35e <USBD_GetEpDesc>
 80099b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099b2:	2101      	movs	r1, #1
 80099b4:	4815      	ldr	r0, [pc, #84]	; (8009a0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80099b6:	f000 fcd2 	bl	800a35e <USBD_GetEpDesc>
 80099ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099bc:	2181      	movs	r1, #129	; 0x81
 80099be:	4813      	ldr	r0, [pc, #76]	; (8009a0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80099c0:	f000 fccd 	bl	800a35e <USBD_GetEpDesc>
 80099c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	2210      	movs	r2, #16
 80099d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d006      	beq.n	80099e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	2200      	movs	r2, #0
 80099dc:	711a      	strb	r2, [r3, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f042 0202 	orr.w	r2, r2, #2
 80099e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d006      	beq.n	80099fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	711a      	strb	r2, [r3, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f042 0202 	orr.w	r2, r2, #2
 80099f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2243      	movs	r2, #67	; 0x43
 80099fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a00:	4b02      	ldr	r3, [pc, #8]	; (8009a0c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	2000010c 	.word	0x2000010c

08009a10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a18:	2182      	movs	r1, #130	; 0x82
 8009a1a:	4818      	ldr	r0, [pc, #96]	; (8009a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a1c:	f000 fc9f 	bl	800a35e <USBD_GetEpDesc>
 8009a20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a22:	2101      	movs	r1, #1
 8009a24:	4815      	ldr	r0, [pc, #84]	; (8009a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a26:	f000 fc9a 	bl	800a35e <USBD_GetEpDesc>
 8009a2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a2c:	2181      	movs	r1, #129	; 0x81
 8009a2e:	4813      	ldr	r0, [pc, #76]	; (8009a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a30:	f000 fc95 	bl	800a35e <USBD_GetEpDesc>
 8009a34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d002      	beq.n	8009a42 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	2210      	movs	r2, #16
 8009a40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d006      	beq.n	8009a56 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a50:	711a      	strb	r2, [r3, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d006      	beq.n	8009a6a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a64:	711a      	strb	r2, [r3, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2243      	movs	r2, #67	; 0x43
 8009a6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a70:	4b02      	ldr	r3, [pc, #8]	; (8009a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3718      	adds	r7, #24
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	2000010c 	.word	0x2000010c

08009a80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	220a      	movs	r2, #10
 8009a8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009a8e:	4b03      	ldr	r3, [pc, #12]	; (8009a9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	200000c8 	.word	0x200000c8

08009aa0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d101      	bne.n	8009ab4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e009      	b.n	8009ac8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	33b0      	adds	r3, #176	; 0xb0
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	32b0      	adds	r2, #176	; 0xb0
 8009aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e008      	b.n	8009b0c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	371c      	adds	r7, #28
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	32b0      	adds	r2, #176	; 0xb0
 8009b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d101      	bne.n	8009b3c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e004      	b.n	8009b46 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3714      	adds	r7, #20
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
	...

08009b54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	32b0      	adds	r2, #176	; 0xb0
 8009b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	32b0      	adds	r2, #176	; 0xb0
 8009b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d101      	bne.n	8009b82 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e018      	b.n	8009bb4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	7c1b      	ldrb	r3, [r3, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10a      	bne.n	8009ba0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b8a:	4b0c      	ldr	r3, [pc, #48]	; (8009bbc <USBD_CDC_ReceivePacket+0x68>)
 8009b8c:	7819      	ldrb	r1, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f005 f92d 	bl	800edf8 <USBD_LL_PrepareReceive>
 8009b9e:	e008      	b.n	8009bb2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ba0:	4b06      	ldr	r3, [pc, #24]	; (8009bbc <USBD_CDC_ReceivePacket+0x68>)
 8009ba2:	7819      	ldrb	r1, [r3, #0]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009baa:	2340      	movs	r3, #64	; 0x40
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f005 f923 	bl	800edf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20000150 	.word	0x20000150

08009bc0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e01f      	b.n	8009c18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	79fa      	ldrb	r2, [r7, #7]
 8009c0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f004 ff9d 	bl	800eb4c <USBD_LL_Init>
 8009c12:	4603      	mov	r3, r0
 8009c14:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3718      	adds	r7, #24
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e025      	b.n	8009c84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	32ae      	adds	r2, #174	; 0xae
 8009c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00f      	beq.n	8009c74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	32ae      	adds	r2, #174	; 0xae
 8009c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c64:	f107 020e 	add.w	r2, r7, #14
 8009c68:	4610      	mov	r0, r2
 8009c6a:	4798      	blx	r3
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009c7a:	1c5a      	adds	r2, r3, #1
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f004 ffa5 	bl	800ebe4 <USBD_LL_Start>
 8009c9a:	4603      	mov	r3, r0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009cac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	370c      	adds	r7, #12
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d009      	beq.n	8009ce8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	78fa      	ldrb	r2, [r7, #3]
 8009cde:	4611      	mov	r1, r2
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	4798      	blx	r3
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	78fa      	ldrb	r2, [r7, #3]
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	4798      	blx	r3
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b084      	sub	sp, #16
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d36:	6839      	ldr	r1, [r7, #0]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f001 f90e 	bl	800af5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d5a:	f003 031f 	and.w	r3, r3, #31
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d01a      	beq.n	8009d98 <USBD_LL_SetupStage+0x72>
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d822      	bhi.n	8009dac <USBD_LL_SetupStage+0x86>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d002      	beq.n	8009d70 <USBD_LL_SetupStage+0x4a>
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d00a      	beq.n	8009d84 <USBD_LL_SetupStage+0x5e>
 8009d6e:	e01d      	b.n	8009dac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fb65 	bl	800a448 <USBD_StdDevReq>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	73fb      	strb	r3, [r7, #15]
      break;
 8009d82:	e020      	b.n	8009dc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fbcd 	bl	800a52c <USBD_StdItfReq>
 8009d92:	4603      	mov	r3, r0
 8009d94:	73fb      	strb	r3, [r7, #15]
      break;
 8009d96:	e016      	b.n	8009dc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fc2f 	bl	800a604 <USBD_StdEPReq>
 8009da6:	4603      	mov	r3, r0
 8009da8:	73fb      	strb	r3, [r7, #15]
      break;
 8009daa:	e00c      	b.n	8009dc6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009db2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f004 ff72 	bl	800eca4 <USBD_LL_StallEP>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8009dc4:	bf00      	nop
  }

  return ret;
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009dde:	2300      	movs	r3, #0
 8009de0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009de2:	7afb      	ldrb	r3, [r7, #11]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d16e      	bne.n	8009ec6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009dee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	f040 8098 	bne.w	8009f2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	689a      	ldr	r2, [r3, #8]
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d913      	bls.n	8009e30 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	1ad2      	subs	r2, r2, r3
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	68da      	ldr	r2, [r3, #12]
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	bf28      	it	cs
 8009e22:	4613      	movcs	r3, r2
 8009e24:	461a      	mov	r2, r3
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f001 f98a 	bl	800b142 <USBD_CtlContinueRx>
 8009e2e:	e07d      	b.n	8009f2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e36:	f003 031f 	and.w	r3, r3, #31
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d014      	beq.n	8009e68 <USBD_LL_DataOutStage+0x98>
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d81d      	bhi.n	8009e7e <USBD_LL_DataOutStage+0xae>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <USBD_LL_DataOutStage+0x7c>
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d003      	beq.n	8009e52 <USBD_LL_DataOutStage+0x82>
 8009e4a:	e018      	b.n	8009e7e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	75bb      	strb	r3, [r7, #22]
            break;
 8009e50:	e018      	b.n	8009e84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f000 fa64 	bl	800a32a <USBD_CoreFindIF>
 8009e62:	4603      	mov	r3, r0
 8009e64:	75bb      	strb	r3, [r7, #22]
            break;
 8009e66:	e00d      	b.n	8009e84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	4619      	mov	r1, r3
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f000 fa66 	bl	800a344 <USBD_CoreFindEP>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	75bb      	strb	r3, [r7, #22]
            break;
 8009e7c:	e002      	b.n	8009e84 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	75bb      	strb	r3, [r7, #22]
            break;
 8009e82:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009e84:	7dbb      	ldrb	r3, [r7, #22]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d119      	bne.n	8009ebe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d113      	bne.n	8009ebe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009e96:	7dba      	ldrb	r2, [r7, #22]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	32ae      	adds	r2, #174	; 0xae
 8009e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00b      	beq.n	8009ebe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009ea6:	7dba      	ldrb	r2, [r7, #22]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009eae:	7dba      	ldrb	r2, [r7, #22]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	32ae      	adds	r2, #174	; 0xae
 8009eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f001 f950 	bl	800b164 <USBD_CtlSendStatus>
 8009ec4:	e032      	b.n	8009f2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009ec6:	7afb      	ldrb	r3, [r7, #11]
 8009ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	4619      	mov	r1, r3
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f000 fa37 	bl	800a344 <USBD_CoreFindEP>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009eda:	7dbb      	ldrb	r3, [r7, #22]
 8009edc:	2bff      	cmp	r3, #255	; 0xff
 8009ede:	d025      	beq.n	8009f2c <USBD_LL_DataOutStage+0x15c>
 8009ee0:	7dbb      	ldrb	r3, [r7, #22]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d122      	bne.n	8009f2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d117      	bne.n	8009f22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009ef2:	7dba      	ldrb	r2, [r7, #22]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	32ae      	adds	r2, #174	; 0xae
 8009ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009efc:	699b      	ldr	r3, [r3, #24]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00f      	beq.n	8009f22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009f02:	7dba      	ldrb	r2, [r7, #22]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009f0a:	7dba      	ldrb	r2, [r7, #22]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	32ae      	adds	r2, #174	; 0xae
 8009f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	7afa      	ldrb	r2, [r7, #11]
 8009f18:	4611      	mov	r1, r2
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	4798      	blx	r3
 8009f1e:	4603      	mov	r3, r0
 8009f20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009f22:	7dfb      	ldrb	r3, [r7, #23]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
 8009f2a:	e000      	b.n	8009f2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3718      	adds	r7, #24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b086      	sub	sp, #24
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	60f8      	str	r0, [r7, #12]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	607a      	str	r2, [r7, #4]
 8009f42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d16f      	bne.n	800a02a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3314      	adds	r3, #20
 8009f4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d15a      	bne.n	800a010 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	689a      	ldr	r2, [r3, #8]
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d914      	bls.n	8009f90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	689a      	ldr	r2, [r3, #8]
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	1ad2      	subs	r2, r2, r3
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	6879      	ldr	r1, [r7, #4]
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f001 f8b2 	bl	800b0e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f82:	2300      	movs	r3, #0
 8009f84:	2200      	movs	r2, #0
 8009f86:	2100      	movs	r1, #0
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f004 ff35 	bl	800edf8 <USBD_LL_PrepareReceive>
 8009f8e:	e03f      	b.n	800a010 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	68da      	ldr	r2, [r3, #12]
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d11c      	bne.n	8009fd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	685a      	ldr	r2, [r3, #4]
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d316      	bcc.n	8009fd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d20f      	bcs.n	8009fd6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2100      	movs	r1, #0
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f001 f893 	bl	800b0e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fc8:	2300      	movs	r3, #0
 8009fca:	2200      	movs	r2, #0
 8009fcc:	2100      	movs	r1, #0
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f004 ff12 	bl	800edf8 <USBD_LL_PrepareReceive>
 8009fd4:	e01c      	b.n	800a010 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	d10f      	bne.n	800a002 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d009      	beq.n	800a002 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a002:	2180      	movs	r1, #128	; 0x80
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f004 fe4d 	bl	800eca4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f001 f8bd 	bl	800b18a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d03a      	beq.n	800a090 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f7ff fe42 	bl	8009ca4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a028:	e032      	b.n	800a090 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a02a:	7afb      	ldrb	r3, [r7, #11]
 800a02c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a030:	b2db      	uxtb	r3, r3
 800a032:	4619      	mov	r1, r3
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f000 f985 	bl	800a344 <USBD_CoreFindEP>
 800a03a:	4603      	mov	r3, r0
 800a03c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a03e:	7dfb      	ldrb	r3, [r7, #23]
 800a040:	2bff      	cmp	r3, #255	; 0xff
 800a042:	d025      	beq.n	800a090 <USBD_LL_DataInStage+0x15a>
 800a044:	7dfb      	ldrb	r3, [r7, #23]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d122      	bne.n	800a090 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b03      	cmp	r3, #3
 800a054:	d11c      	bne.n	800a090 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a056:	7dfa      	ldrb	r2, [r7, #23]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	32ae      	adds	r2, #174	; 0xae
 800a05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d014      	beq.n	800a090 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a066:	7dfa      	ldrb	r2, [r7, #23]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a06e:	7dfa      	ldrb	r2, [r7, #23]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	32ae      	adds	r2, #174	; 0xae
 800a074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	7afa      	ldrb	r2, [r7, #11]
 800a07c:	4611      	mov	r1, r2
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	4798      	blx	r3
 800a082:	4603      	mov	r3, r0
 800a084:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a086:	7dbb      	ldrb	r3, [r7, #22]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d001      	beq.n	800a090 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a08c:	7dbb      	ldrb	r3, [r7, #22]
 800a08e:	e000      	b.n	800a092 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3718      	adds	r7, #24
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d014      	beq.n	800a100 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00e      	beq.n	800a100 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	6852      	ldr	r2, [r2, #4]
 800a0ee:	b2d2      	uxtb	r2, r2
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	4798      	blx	r3
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a100:	2340      	movs	r3, #64	; 0x40
 800a102:	2200      	movs	r2, #0
 800a104:	2100      	movs	r1, #0
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f004 fd87 	bl	800ec1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2240      	movs	r2, #64	; 0x40
 800a118:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a11c:	2340      	movs	r3, #64	; 0x40
 800a11e:	2200      	movs	r2, #0
 800a120:	2180      	movs	r1, #128	; 0x80
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f004 fd79 	bl	800ec1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2240      	movs	r2, #64	; 0x40
 800a132:	621a      	str	r2, [r3, #32]

  return ret;
 800a134:	7bfb      	ldrb	r3, [r7, #15]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	460b      	mov	r3, r1
 800a148:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	78fa      	ldrb	r2, [r7, #3]
 800a14e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a15e:	b480      	push	{r7}
 800a160:	b083      	sub	sp, #12
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d006      	beq.n	800a180 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2204      	movs	r2, #4
 800a184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a196:	b480      	push	{r7}
 800a198:	b083      	sub	sp, #12
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d106      	bne.n	800a1b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b082      	sub	sp, #8
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d110      	bne.n	800a1fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00b      	beq.n	800a1fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ea:	69db      	ldr	r3, [r3, #28]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d005      	beq.n	800a1fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f6:	69db      	ldr	r3, [r3, #28]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b082      	sub	sp, #8
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	460b      	mov	r3, r1
 800a210:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	32ae      	adds	r2, #174	; 0xae
 800a21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a224:	2303      	movs	r3, #3
 800a226:	e01c      	b.n	800a262 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	2b03      	cmp	r3, #3
 800a232:	d115      	bne.n	800a260 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	32ae      	adds	r2, #174	; 0xae
 800a23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00b      	beq.n	800a260 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	32ae      	adds	r2, #174	; 0xae
 800a252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a256:	6a1b      	ldr	r3, [r3, #32]
 800a258:	78fa      	ldrb	r2, [r7, #3]
 800a25a:	4611      	mov	r1, r2
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b082      	sub	sp, #8
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	460b      	mov	r3, r1
 800a274:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	32ae      	adds	r2, #174	; 0xae
 800a280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d101      	bne.n	800a28c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a288:	2303      	movs	r3, #3
 800a28a:	e01c      	b.n	800a2c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a292:	b2db      	uxtb	r3, r3
 800a294:	2b03      	cmp	r3, #3
 800a296:	d115      	bne.n	800a2c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	32ae      	adds	r2, #174	; 0xae
 800a2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00b      	beq.n	800a2c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	32ae      	adds	r2, #174	; 0xae
 800a2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2bc:	78fa      	ldrb	r2, [r7, #3]
 800a2be:	4611      	mov	r1, r2
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b083      	sub	sp, #12
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00e      	beq.n	800a320 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	6852      	ldr	r2, [r2, #4]
 800a30e:	b2d2      	uxtb	r2, r2
 800a310:	4611      	mov	r1, r2
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	4798      	blx	r3
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a31c:	2303      	movs	r3, #3
 800a31e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a320:	7bfb      	ldrb	r3, [r7, #15]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	460b      	mov	r3, r1
 800a334:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a336:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a338:	4618      	mov	r0, r3
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a350:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a352:	4618      	mov	r0, r3
 800a354:	370c      	adds	r7, #12
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b086      	sub	sp, #24
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	460b      	mov	r3, r1
 800a368:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a372:	2300      	movs	r3, #0
 800a374:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	885b      	ldrh	r3, [r3, #2]
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	b29b      	uxth	r3, r3
 800a382:	429a      	cmp	r2, r3
 800a384:	d920      	bls.n	800a3c8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a38e:	e013      	b.n	800a3b8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a390:	f107 030a 	add.w	r3, r7, #10
 800a394:	4619      	mov	r1, r3
 800a396:	6978      	ldr	r0, [r7, #20]
 800a398:	f000 f81b 	bl	800a3d2 <USBD_GetNextDesc>
 800a39c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	785b      	ldrb	r3, [r3, #1]
 800a3a2:	2b05      	cmp	r3, #5
 800a3a4:	d108      	bne.n	800a3b8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	789b      	ldrb	r3, [r3, #2]
 800a3ae:	78fa      	ldrb	r2, [r7, #3]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d008      	beq.n	800a3c6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	885b      	ldrh	r3, [r3, #2]
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	897b      	ldrh	r3, [r7, #10]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d8e5      	bhi.n	800a390 <USBD_GetEpDesc+0x32>
 800a3c4:	e000      	b.n	800a3c8 <USBD_GetEpDesc+0x6a>
          break;
 800a3c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a3c8:	693b      	ldr	r3, [r7, #16]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b085      	sub	sp, #20
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	881a      	ldrh	r2, [r3, #0]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	4413      	add	r3, r2
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3714      	adds	r7, #20
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	3301      	adds	r3, #1
 800a422:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a42a:	8a3b      	ldrh	r3, [r7, #16]
 800a42c:	021b      	lsls	r3, r3, #8
 800a42e:	b21a      	sxth	r2, r3
 800a430:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a434:	4313      	orrs	r3, r2
 800a436:	b21b      	sxth	r3, r3
 800a438:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a43a:	89fb      	ldrh	r3, [r7, #14]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	371c      	adds	r7, #28
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a45e:	2b40      	cmp	r3, #64	; 0x40
 800a460:	d005      	beq.n	800a46e <USBD_StdDevReq+0x26>
 800a462:	2b40      	cmp	r3, #64	; 0x40
 800a464:	d857      	bhi.n	800a516 <USBD_StdDevReq+0xce>
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00f      	beq.n	800a48a <USBD_StdDevReq+0x42>
 800a46a:	2b20      	cmp	r3, #32
 800a46c:	d153      	bne.n	800a516 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	32ae      	adds	r2, #174	; 0xae
 800a478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	4798      	blx	r3
 800a484:	4603      	mov	r3, r0
 800a486:	73fb      	strb	r3, [r7, #15]
      break;
 800a488:	e04a      	b.n	800a520 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	785b      	ldrb	r3, [r3, #1]
 800a48e:	2b09      	cmp	r3, #9
 800a490:	d83b      	bhi.n	800a50a <USBD_StdDevReq+0xc2>
 800a492:	a201      	add	r2, pc, #4	; (adr r2, 800a498 <USBD_StdDevReq+0x50>)
 800a494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a498:	0800a4ed 	.word	0x0800a4ed
 800a49c:	0800a501 	.word	0x0800a501
 800a4a0:	0800a50b 	.word	0x0800a50b
 800a4a4:	0800a4f7 	.word	0x0800a4f7
 800a4a8:	0800a50b 	.word	0x0800a50b
 800a4ac:	0800a4cb 	.word	0x0800a4cb
 800a4b0:	0800a4c1 	.word	0x0800a4c1
 800a4b4:	0800a50b 	.word	0x0800a50b
 800a4b8:	0800a4e3 	.word	0x0800a4e3
 800a4bc:	0800a4d5 	.word	0x0800a4d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a4c0:	6839      	ldr	r1, [r7, #0]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fa3c 	bl	800a940 <USBD_GetDescriptor>
          break;
 800a4c8:	e024      	b.n	800a514 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fba1 	bl	800ac14 <USBD_SetAddress>
          break;
 800a4d2:	e01f      	b.n	800a514 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fbe0 	bl	800ac9c <USBD_SetConfig>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73fb      	strb	r3, [r7, #15]
          break;
 800a4e0:	e018      	b.n	800a514 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fc83 	bl	800adf0 <USBD_GetConfig>
          break;
 800a4ea:	e013      	b.n	800a514 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fcb4 	bl	800ae5c <USBD_GetStatus>
          break;
 800a4f4:	e00e      	b.n	800a514 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fce3 	bl	800aec4 <USBD_SetFeature>
          break;
 800a4fe:	e009      	b.n	800a514 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a500:	6839      	ldr	r1, [r7, #0]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fd07 	bl	800af16 <USBD_ClrFeature>
          break;
 800a508:	e004      	b.n	800a514 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a50a:	6839      	ldr	r1, [r7, #0]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fd5e 	bl	800afce <USBD_CtlError>
          break;
 800a512:	bf00      	nop
      }
      break;
 800a514:	e004      	b.n	800a520 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fd58 	bl	800afce <USBD_CtlError>
      break;
 800a51e:	bf00      	nop
  }

  return ret;
 800a520:	7bfb      	ldrb	r3, [r7, #15]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop

0800a52c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a542:	2b40      	cmp	r3, #64	; 0x40
 800a544:	d005      	beq.n	800a552 <USBD_StdItfReq+0x26>
 800a546:	2b40      	cmp	r3, #64	; 0x40
 800a548:	d852      	bhi.n	800a5f0 <USBD_StdItfReq+0xc4>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <USBD_StdItfReq+0x26>
 800a54e:	2b20      	cmp	r3, #32
 800a550:	d14e      	bne.n	800a5f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	3b01      	subs	r3, #1
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d840      	bhi.n	800a5e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	889b      	ldrh	r3, [r3, #4]
 800a564:	b2db      	uxtb	r3, r3
 800a566:	2b01      	cmp	r3, #1
 800a568:	d836      	bhi.n	800a5d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	889b      	ldrh	r3, [r3, #4]
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	4619      	mov	r1, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7ff fed9 	bl	800a32a <USBD_CoreFindIF>
 800a578:	4603      	mov	r3, r0
 800a57a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	2bff      	cmp	r3, #255	; 0xff
 800a580:	d01d      	beq.n	800a5be <USBD_StdItfReq+0x92>
 800a582:	7bbb      	ldrb	r3, [r7, #14]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d11a      	bne.n	800a5be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a588:	7bba      	ldrb	r2, [r7, #14]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	32ae      	adds	r2, #174	; 0xae
 800a58e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00f      	beq.n	800a5b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a598:	7bba      	ldrb	r2, [r7, #14]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a5a0:	7bba      	ldrb	r2, [r7, #14]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	32ae      	adds	r2, #174	; 0xae
 800a5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	6839      	ldr	r1, [r7, #0]
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	4798      	blx	r3
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a5b6:	e004      	b.n	800a5c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a5bc:	e001      	b.n	800a5c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	88db      	ldrh	r3, [r3, #6]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d110      	bne.n	800a5ec <USBD_StdItfReq+0xc0>
 800a5ca:	7bfb      	ldrb	r3, [r7, #15]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10d      	bne.n	800a5ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fdc7 	bl	800b164 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a5d6:	e009      	b.n	800a5ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a5d8:	6839      	ldr	r1, [r7, #0]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 fcf7 	bl	800afce <USBD_CtlError>
          break;
 800a5e0:	e004      	b.n	800a5ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a5e2:	6839      	ldr	r1, [r7, #0]
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fcf2 	bl	800afce <USBD_CtlError>
          break;
 800a5ea:	e000      	b.n	800a5ee <USBD_StdItfReq+0xc2>
          break;
 800a5ec:	bf00      	nop
      }
      break;
 800a5ee:	e004      	b.n	800a5fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fceb 	bl	800afce <USBD_CtlError>
      break;
 800a5f8:	bf00      	nop
  }

  return ret;
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a60e:	2300      	movs	r3, #0
 800a610:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	889b      	ldrh	r3, [r3, #4]
 800a616:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a620:	2b40      	cmp	r3, #64	; 0x40
 800a622:	d007      	beq.n	800a634 <USBD_StdEPReq+0x30>
 800a624:	2b40      	cmp	r3, #64	; 0x40
 800a626:	f200 817f 	bhi.w	800a928 <USBD_StdEPReq+0x324>
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d02a      	beq.n	800a684 <USBD_StdEPReq+0x80>
 800a62e:	2b20      	cmp	r3, #32
 800a630:	f040 817a 	bne.w	800a928 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a634:	7bbb      	ldrb	r3, [r7, #14]
 800a636:	4619      	mov	r1, r3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f7ff fe83 	bl	800a344 <USBD_CoreFindEP>
 800a63e:	4603      	mov	r3, r0
 800a640:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a642:	7b7b      	ldrb	r3, [r7, #13]
 800a644:	2bff      	cmp	r3, #255	; 0xff
 800a646:	f000 8174 	beq.w	800a932 <USBD_StdEPReq+0x32e>
 800a64a:	7b7b      	ldrb	r3, [r7, #13]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f040 8170 	bne.w	800a932 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a652:	7b7a      	ldrb	r2, [r7, #13]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a65a:	7b7a      	ldrb	r2, [r7, #13]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	32ae      	adds	r2, #174	; 0xae
 800a660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	2b00      	cmp	r3, #0
 800a668:	f000 8163 	beq.w	800a932 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a66c:	7b7a      	ldrb	r2, [r7, #13]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	32ae      	adds	r2, #174	; 0xae
 800a672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	6839      	ldr	r1, [r7, #0]
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	4798      	blx	r3
 800a67e:	4603      	mov	r3, r0
 800a680:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a682:	e156      	b.n	800a932 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	785b      	ldrb	r3, [r3, #1]
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d008      	beq.n	800a69e <USBD_StdEPReq+0x9a>
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	f300 8145 	bgt.w	800a91c <USBD_StdEPReq+0x318>
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 809b 	beq.w	800a7ce <USBD_StdEPReq+0x1ca>
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d03c      	beq.n	800a716 <USBD_StdEPReq+0x112>
 800a69c:	e13e      	b.n	800a91c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d002      	beq.n	800a6b0 <USBD_StdEPReq+0xac>
 800a6aa:	2b03      	cmp	r3, #3
 800a6ac:	d016      	beq.n	800a6dc <USBD_StdEPReq+0xd8>
 800a6ae:	e02c      	b.n	800a70a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6b0:	7bbb      	ldrb	r3, [r7, #14]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00d      	beq.n	800a6d2 <USBD_StdEPReq+0xce>
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
 800a6b8:	2b80      	cmp	r3, #128	; 0x80
 800a6ba:	d00a      	beq.n	800a6d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6bc:	7bbb      	ldrb	r3, [r7, #14]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f004 faef 	bl	800eca4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6c6:	2180      	movs	r1, #128	; 0x80
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f004 faeb 	bl	800eca4 <USBD_LL_StallEP>
 800a6ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6d0:	e020      	b.n	800a714 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fc7a 	bl	800afce <USBD_CtlError>
              break;
 800a6da:	e01b      	b.n	800a714 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	885b      	ldrh	r3, [r3, #2]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10e      	bne.n	800a702 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00b      	beq.n	800a702 <USBD_StdEPReq+0xfe>
 800a6ea:	7bbb      	ldrb	r3, [r7, #14]
 800a6ec:	2b80      	cmp	r3, #128	; 0x80
 800a6ee:	d008      	beq.n	800a702 <USBD_StdEPReq+0xfe>
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	88db      	ldrh	r3, [r3, #6]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d104      	bne.n	800a702 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6f8:	7bbb      	ldrb	r3, [r7, #14]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f004 fad1 	bl	800eca4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fd2e 	bl	800b164 <USBD_CtlSendStatus>

              break;
 800a708:	e004      	b.n	800a714 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 fc5e 	bl	800afce <USBD_CtlError>
              break;
 800a712:	bf00      	nop
          }
          break;
 800a714:	e107      	b.n	800a926 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d002      	beq.n	800a728 <USBD_StdEPReq+0x124>
 800a722:	2b03      	cmp	r3, #3
 800a724:	d016      	beq.n	800a754 <USBD_StdEPReq+0x150>
 800a726:	e04b      	b.n	800a7c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a728:	7bbb      	ldrb	r3, [r7, #14]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00d      	beq.n	800a74a <USBD_StdEPReq+0x146>
 800a72e:	7bbb      	ldrb	r3, [r7, #14]
 800a730:	2b80      	cmp	r3, #128	; 0x80
 800a732:	d00a      	beq.n	800a74a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a734:	7bbb      	ldrb	r3, [r7, #14]
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f004 fab3 	bl	800eca4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a73e:	2180      	movs	r1, #128	; 0x80
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f004 faaf 	bl	800eca4 <USBD_LL_StallEP>
 800a746:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a748:	e040      	b.n	800a7cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fc3e 	bl	800afce <USBD_CtlError>
              break;
 800a752:	e03b      	b.n	800a7cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	885b      	ldrh	r3, [r3, #2]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d136      	bne.n	800a7ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
 800a75e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a762:	2b00      	cmp	r3, #0
 800a764:	d004      	beq.n	800a770 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a766:	7bbb      	ldrb	r3, [r7, #14]
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f004 fab9 	bl	800ece2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fcf7 	bl	800b164 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	4619      	mov	r1, r3
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7ff fde2 	bl	800a344 <USBD_CoreFindEP>
 800a780:	4603      	mov	r3, r0
 800a782:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a784:	7b7b      	ldrb	r3, [r7, #13]
 800a786:	2bff      	cmp	r3, #255	; 0xff
 800a788:	d01f      	beq.n	800a7ca <USBD_StdEPReq+0x1c6>
 800a78a:	7b7b      	ldrb	r3, [r7, #13]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d11c      	bne.n	800a7ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a790:	7b7a      	ldrb	r2, [r7, #13]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a798:	7b7a      	ldrb	r2, [r7, #13]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	32ae      	adds	r2, #174	; 0xae
 800a79e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d010      	beq.n	800a7ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a7a8:	7b7a      	ldrb	r2, [r7, #13]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	32ae      	adds	r2, #174	; 0xae
 800a7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	4798      	blx	r3
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a7be:	e004      	b.n	800a7ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a7c0:	6839      	ldr	r1, [r7, #0]
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fc03 	bl	800afce <USBD_CtlError>
              break;
 800a7c8:	e000      	b.n	800a7cc <USBD_StdEPReq+0x1c8>
              break;
 800a7ca:	bf00      	nop
          }
          break;
 800a7cc:	e0ab      	b.n	800a926 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d002      	beq.n	800a7e0 <USBD_StdEPReq+0x1dc>
 800a7da:	2b03      	cmp	r3, #3
 800a7dc:	d032      	beq.n	800a844 <USBD_StdEPReq+0x240>
 800a7de:	e097      	b.n	800a910 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7e0:	7bbb      	ldrb	r3, [r7, #14]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d007      	beq.n	800a7f6 <USBD_StdEPReq+0x1f2>
 800a7e6:	7bbb      	ldrb	r3, [r7, #14]
 800a7e8:	2b80      	cmp	r3, #128	; 0x80
 800a7ea:	d004      	beq.n	800a7f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a7ec:	6839      	ldr	r1, [r7, #0]
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fbed 	bl	800afce <USBD_CtlError>
                break;
 800a7f4:	e091      	b.n	800a91a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	da0b      	bge.n	800a816 <USBD_StdEPReq+0x212>
 800a7fe:	7bbb      	ldrb	r3, [r7, #14]
 800a800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a804:	4613      	mov	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	3310      	adds	r3, #16
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	4413      	add	r3, r2
 800a812:	3304      	adds	r3, #4
 800a814:	e00b      	b.n	800a82e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a816:	7bbb      	ldrb	r3, [r7, #14]
 800a818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a81c:	4613      	mov	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	4413      	add	r3, r2
 800a82c:	3304      	adds	r3, #4
 800a82e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2202      	movs	r2, #2
 800a83a:	4619      	mov	r1, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fc37 	bl	800b0b0 <USBD_CtlSendData>
              break;
 800a842:	e06a      	b.n	800a91a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a844:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	da11      	bge.n	800a870 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	f003 020f 	and.w	r2, r3, #15
 800a852:	6879      	ldr	r1, [r7, #4]
 800a854:	4613      	mov	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	440b      	add	r3, r1
 800a85e:	3324      	adds	r3, #36	; 0x24
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d117      	bne.n	800a896 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a866:	6839      	ldr	r1, [r7, #0]
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fbb0 	bl	800afce <USBD_CtlError>
                  break;
 800a86e:	e054      	b.n	800a91a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a870:	7bbb      	ldrb	r3, [r7, #14]
 800a872:	f003 020f 	and.w	r2, r3, #15
 800a876:	6879      	ldr	r1, [r7, #4]
 800a878:	4613      	mov	r3, r2
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	4413      	add	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	440b      	add	r3, r1
 800a882:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a886:	881b      	ldrh	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d104      	bne.n	800a896 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a88c:	6839      	ldr	r1, [r7, #0]
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fb9d 	bl	800afce <USBD_CtlError>
                  break;
 800a894:	e041      	b.n	800a91a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a896:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	da0b      	bge.n	800a8b6 <USBD_StdEPReq+0x2b2>
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
 800a8a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4413      	add	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	3310      	adds	r3, #16
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	e00b      	b.n	800a8ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8b6:	7bbb      	ldrb	r3, [r7, #14]
 800a8b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	3304      	adds	r3, #4
 800a8ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d002      	beq.n	800a8dc <USBD_StdEPReq+0x2d8>
 800a8d6:	7bbb      	ldrb	r3, [r7, #14]
 800a8d8:	2b80      	cmp	r3, #128	; 0x80
 800a8da:	d103      	bne.n	800a8e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	e00e      	b.n	800a902 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f004 fa19 	bl	800ed20 <USBD_LL_IsStallEP>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	e002      	b.n	800a902 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	2200      	movs	r2, #0
 800a900:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	2202      	movs	r2, #2
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fbd1 	bl	800b0b0 <USBD_CtlSendData>
              break;
 800a90e:	e004      	b.n	800a91a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a910:	6839      	ldr	r1, [r7, #0]
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fb5b 	bl	800afce <USBD_CtlError>
              break;
 800a918:	bf00      	nop
          }
          break;
 800a91a:	e004      	b.n	800a926 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fb55 	bl	800afce <USBD_CtlError>
          break;
 800a924:	bf00      	nop
      }
      break;
 800a926:	e005      	b.n	800a934 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a928:	6839      	ldr	r1, [r7, #0]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fb4f 	bl	800afce <USBD_CtlError>
      break;
 800a930:	e000      	b.n	800a934 <USBD_StdEPReq+0x330>
      break;
 800a932:	bf00      	nop
  }

  return ret;
 800a934:	7bfb      	ldrb	r3, [r7, #15]
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
	...

0800a940 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a952:	2300      	movs	r3, #0
 800a954:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	885b      	ldrh	r3, [r3, #2]
 800a95a:	0a1b      	lsrs	r3, r3, #8
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	3b01      	subs	r3, #1
 800a960:	2b06      	cmp	r3, #6
 800a962:	f200 8128 	bhi.w	800abb6 <USBD_GetDescriptor+0x276>
 800a966:	a201      	add	r2, pc, #4	; (adr r2, 800a96c <USBD_GetDescriptor+0x2c>)
 800a968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96c:	0800a989 	.word	0x0800a989
 800a970:	0800a9a1 	.word	0x0800a9a1
 800a974:	0800a9e1 	.word	0x0800a9e1
 800a978:	0800abb7 	.word	0x0800abb7
 800a97c:	0800abb7 	.word	0x0800abb7
 800a980:	0800ab57 	.word	0x0800ab57
 800a984:	0800ab83 	.word	0x0800ab83
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	7c12      	ldrb	r2, [r2, #16]
 800a994:	f107 0108 	add.w	r1, r7, #8
 800a998:	4610      	mov	r0, r2
 800a99a:	4798      	blx	r3
 800a99c:	60f8      	str	r0, [r7, #12]
      break;
 800a99e:	e112      	b.n	800abc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	7c1b      	ldrb	r3, [r3, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10d      	bne.n	800a9c4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b0:	f107 0208 	add.w	r2, r7, #8
 800a9b4:	4610      	mov	r0, r2
 800a9b6:	4798      	blx	r3
 800a9b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	2202      	movs	r2, #2
 800a9c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a9c2:	e100      	b.n	800abc6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9cc:	f107 0208 	add.w	r2, r7, #8
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	4798      	blx	r3
 800a9d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	2202      	movs	r2, #2
 800a9dc:	701a      	strb	r2, [r3, #0]
      break;
 800a9de:	e0f2      	b.n	800abc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	885b      	ldrh	r3, [r3, #2]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b05      	cmp	r3, #5
 800a9e8:	f200 80ac 	bhi.w	800ab44 <USBD_GetDescriptor+0x204>
 800a9ec:	a201      	add	r2, pc, #4	; (adr r2, 800a9f4 <USBD_GetDescriptor+0xb4>)
 800a9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f2:	bf00      	nop
 800a9f4:	0800aa0d 	.word	0x0800aa0d
 800a9f8:	0800aa41 	.word	0x0800aa41
 800a9fc:	0800aa75 	.word	0x0800aa75
 800aa00:	0800aaa9 	.word	0x0800aaa9
 800aa04:	0800aadd 	.word	0x0800aadd
 800aa08:	0800ab11 	.word	0x0800ab11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00b      	beq.n	800aa30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	7c12      	ldrb	r2, [r2, #16]
 800aa24:	f107 0108 	add.w	r1, r7, #8
 800aa28:	4610      	mov	r0, r2
 800aa2a:	4798      	blx	r3
 800aa2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa2e:	e091      	b.n	800ab54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 facb 	bl	800afce <USBD_CtlError>
            err++;
 800aa38:	7afb      	ldrb	r3, [r7, #11]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa3e:	e089      	b.n	800ab54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00b      	beq.n	800aa64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	7c12      	ldrb	r2, [r2, #16]
 800aa58:	f107 0108 	add.w	r1, r7, #8
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	4798      	blx	r3
 800aa60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa62:	e077      	b.n	800ab54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fab1 	bl	800afce <USBD_CtlError>
            err++;
 800aa6c:	7afb      	ldrb	r3, [r7, #11]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	72fb      	strb	r3, [r7, #11]
          break;
 800aa72:	e06f      	b.n	800ab54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00b      	beq.n	800aa98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	7c12      	ldrb	r2, [r2, #16]
 800aa8c:	f107 0108 	add.w	r1, r7, #8
 800aa90:	4610      	mov	r0, r2
 800aa92:	4798      	blx	r3
 800aa94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa96:	e05d      	b.n	800ab54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fa97 	bl	800afce <USBD_CtlError>
            err++;
 800aaa0:	7afb      	ldrb	r3, [r7, #11]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	72fb      	strb	r3, [r7, #11]
          break;
 800aaa6:	e055      	b.n	800ab54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00b      	beq.n	800aacc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	7c12      	ldrb	r2, [r2, #16]
 800aac0:	f107 0108 	add.w	r1, r7, #8
 800aac4:	4610      	mov	r0, r2
 800aac6:	4798      	blx	r3
 800aac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaca:	e043      	b.n	800ab54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fa7d 	bl	800afce <USBD_CtlError>
            err++;
 800aad4:	7afb      	ldrb	r3, [r7, #11]
 800aad6:	3301      	adds	r3, #1
 800aad8:	72fb      	strb	r3, [r7, #11]
          break;
 800aada:	e03b      	b.n	800ab54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aae2:	695b      	ldr	r3, [r3, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00b      	beq.n	800ab00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaee:	695b      	ldr	r3, [r3, #20]
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	7c12      	ldrb	r2, [r2, #16]
 800aaf4:	f107 0108 	add.w	r1, r7, #8
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4798      	blx	r3
 800aafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aafe:	e029      	b.n	800ab54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fa63 	bl	800afce <USBD_CtlError>
            err++;
 800ab08:	7afb      	ldrb	r3, [r7, #11]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab0e:	e021      	b.n	800ab54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00b      	beq.n	800ab34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	7c12      	ldrb	r2, [r2, #16]
 800ab28:	f107 0108 	add.w	r1, r7, #8
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	4798      	blx	r3
 800ab30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab32:	e00f      	b.n	800ab54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fa49 	bl	800afce <USBD_CtlError>
            err++;
 800ab3c:	7afb      	ldrb	r3, [r7, #11]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	72fb      	strb	r3, [r7, #11]
          break;
 800ab42:	e007      	b.n	800ab54 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fa41 	bl	800afce <USBD_CtlError>
          err++;
 800ab4c:	7afb      	ldrb	r3, [r7, #11]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ab52:	bf00      	nop
      }
      break;
 800ab54:	e037      	b.n	800abc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	7c1b      	ldrb	r3, [r3, #16]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d109      	bne.n	800ab72 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab66:	f107 0208 	add.w	r2, r7, #8
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	4798      	blx	r3
 800ab6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab70:	e029      	b.n	800abc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fa2a 	bl	800afce <USBD_CtlError>
        err++;
 800ab7a:	7afb      	ldrb	r3, [r7, #11]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	72fb      	strb	r3, [r7, #11]
      break;
 800ab80:	e021      	b.n	800abc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	7c1b      	ldrb	r3, [r3, #16]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10d      	bne.n	800aba6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab92:	f107 0208 	add.w	r2, r7, #8
 800ab96:	4610      	mov	r0, r2
 800ab98:	4798      	blx	r3
 800ab9a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	2207      	movs	r2, #7
 800aba2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aba4:	e00f      	b.n	800abc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fa10 	bl	800afce <USBD_CtlError>
        err++;
 800abae:	7afb      	ldrb	r3, [r7, #11]
 800abb0:	3301      	adds	r3, #1
 800abb2:	72fb      	strb	r3, [r7, #11]
      break;
 800abb4:	e007      	b.n	800abc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800abb6:	6839      	ldr	r1, [r7, #0]
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fa08 	bl	800afce <USBD_CtlError>
      err++;
 800abbe:	7afb      	ldrb	r3, [r7, #11]
 800abc0:	3301      	adds	r3, #1
 800abc2:	72fb      	strb	r3, [r7, #11]
      break;
 800abc4:	bf00      	nop
  }

  if (err != 0U)
 800abc6:	7afb      	ldrb	r3, [r7, #11]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d11e      	bne.n	800ac0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	88db      	ldrh	r3, [r3, #6]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d016      	beq.n	800ac02 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800abd4:	893b      	ldrh	r3, [r7, #8]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00e      	beq.n	800abf8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	88da      	ldrh	r2, [r3, #6]
 800abde:	893b      	ldrh	r3, [r7, #8]
 800abe0:	4293      	cmp	r3, r2
 800abe2:	bf28      	it	cs
 800abe4:	4613      	movcs	r3, r2
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800abea:	893b      	ldrh	r3, [r7, #8]
 800abec:	461a      	mov	r2, r3
 800abee:	68f9      	ldr	r1, [r7, #12]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fa5d 	bl	800b0b0 <USBD_CtlSendData>
 800abf6:	e009      	b.n	800ac0c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f9e7 	bl	800afce <USBD_CtlError>
 800ac00:	e004      	b.n	800ac0c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 faae 	bl	800b164 <USBD_CtlSendStatus>
 800ac08:	e000      	b.n	800ac0c <USBD_GetDescriptor+0x2cc>
    return;
 800ac0a:	bf00      	nop
  }
}
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop

0800ac14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	889b      	ldrh	r3, [r3, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d131      	bne.n	800ac8a <USBD_SetAddress+0x76>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	88db      	ldrh	r3, [r3, #6]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d12d      	bne.n	800ac8a <USBD_SetAddress+0x76>
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	885b      	ldrh	r3, [r3, #2]
 800ac32:	2b7f      	cmp	r3, #127	; 0x7f
 800ac34:	d829      	bhi.n	800ac8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	885b      	ldrh	r3, [r3, #2]
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	d104      	bne.n	800ac58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ac4e:	6839      	ldr	r1, [r7, #0]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f9bc 	bl	800afce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac56:	e01d      	b.n	800ac94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	7bfa      	ldrb	r2, [r7, #15]
 800ac5c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac60:	7bfb      	ldrb	r3, [r7, #15]
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f004 f887 	bl	800ed78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fa7a 	bl	800b164 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d004      	beq.n	800ac80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2202      	movs	r2, #2
 800ac7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac7e:	e009      	b.n	800ac94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac88:	e004      	b.n	800ac94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f99e 	bl	800afce <USBD_CtlError>
  }
}
 800ac92:	bf00      	nop
 800ac94:	bf00      	nop
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	885b      	ldrh	r3, [r3, #2]
 800acae:	b2da      	uxtb	r2, r3
 800acb0:	4b4e      	ldr	r3, [pc, #312]	; (800adec <USBD_SetConfig+0x150>)
 800acb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800acb4:	4b4d      	ldr	r3, [pc, #308]	; (800adec <USBD_SetConfig+0x150>)
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d905      	bls.n	800acc8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f985 	bl	800afce <USBD_CtlError>
    return USBD_FAIL;
 800acc4:	2303      	movs	r3, #3
 800acc6:	e08c      	b.n	800ade2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d002      	beq.n	800acda <USBD_SetConfig+0x3e>
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	d029      	beq.n	800ad2c <USBD_SetConfig+0x90>
 800acd8:	e075      	b.n	800adc6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800acda:	4b44      	ldr	r3, [pc, #272]	; (800adec <USBD_SetConfig+0x150>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d020      	beq.n	800ad24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ace2:	4b42      	ldr	r3, [pc, #264]	; (800adec <USBD_SetConfig+0x150>)
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800acec:	4b3f      	ldr	r3, [pc, #252]	; (800adec <USBD_SetConfig+0x150>)
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	4619      	mov	r1, r3
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7fe ffe1 	bl	8009cba <USBD_SetClassConfig>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d008      	beq.n	800ad14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f962 	bl	800afce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2202      	movs	r2, #2
 800ad0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad12:	e065      	b.n	800ade0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fa25 	bl	800b164 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2203      	movs	r2, #3
 800ad1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ad22:	e05d      	b.n	800ade0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fa1d 	bl	800b164 <USBD_CtlSendStatus>
      break;
 800ad2a:	e059      	b.n	800ade0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ad2c:	4b2f      	ldr	r3, [pc, #188]	; (800adec <USBD_SetConfig+0x150>)
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d112      	bne.n	800ad5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2202      	movs	r2, #2
 800ad38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ad3c:	4b2b      	ldr	r3, [pc, #172]	; (800adec <USBD_SetConfig+0x150>)
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	461a      	mov	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad46:	4b29      	ldr	r3, [pc, #164]	; (800adec <USBD_SetConfig+0x150>)
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7fe ffd0 	bl	8009cf2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fa06 	bl	800b164 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad58:	e042      	b.n	800ade0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ad5a:	4b24      	ldr	r3, [pc, #144]	; (800adec <USBD_SetConfig+0x150>)
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d02a      	beq.n	800adbe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7fe ffbe 	bl	8009cf2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ad76:	4b1d      	ldr	r3, [pc, #116]	; (800adec <USBD_SetConfig+0x150>)
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad80:	4b1a      	ldr	r3, [pc, #104]	; (800adec <USBD_SetConfig+0x150>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	4619      	mov	r1, r3
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7fe ff97 	bl	8009cba <USBD_SetClassConfig>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ad90:	7bfb      	ldrb	r3, [r7, #15]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00f      	beq.n	800adb6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ad96:	6839      	ldr	r1, [r7, #0]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f918 	bl	800afce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	4619      	mov	r1, r3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7fe ffa3 	bl	8009cf2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2202      	movs	r2, #2
 800adb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800adb4:	e014      	b.n	800ade0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f9d4 	bl	800b164 <USBD_CtlSendStatus>
      break;
 800adbc:	e010      	b.n	800ade0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f9d0 	bl	800b164 <USBD_CtlSendStatus>
      break;
 800adc4:	e00c      	b.n	800ade0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 f900 	bl	800afce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adce:	4b07      	ldr	r3, [pc, #28]	; (800adec <USBD_SetConfig+0x150>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	4619      	mov	r1, r3
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f7fe ff8c 	bl	8009cf2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800adda:	2303      	movs	r3, #3
 800addc:	73fb      	strb	r3, [r7, #15]
      break;
 800adde:	bf00      	nop
  }

  return ret;
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	200029b0 	.word	0x200029b0

0800adf0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	88db      	ldrh	r3, [r3, #6]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d004      	beq.n	800ae0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 f8e2 	bl	800afce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ae0a:	e023      	b.n	800ae54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	dc02      	bgt.n	800ae1e <USBD_GetConfig+0x2e>
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	dc03      	bgt.n	800ae24 <USBD_GetConfig+0x34>
 800ae1c:	e015      	b.n	800ae4a <USBD_GetConfig+0x5a>
 800ae1e:	2b03      	cmp	r3, #3
 800ae20:	d00b      	beq.n	800ae3a <USBD_GetConfig+0x4a>
 800ae22:	e012      	b.n	800ae4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	2201      	movs	r2, #1
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f93c 	bl	800b0b0 <USBD_CtlSendData>
        break;
 800ae38:	e00c      	b.n	800ae54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	2201      	movs	r2, #1
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f934 	bl	800b0b0 <USBD_CtlSendData>
        break;
 800ae48:	e004      	b.n	800ae54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f8be 	bl	800afce <USBD_CtlError>
        break;
 800ae52:	bf00      	nop
}
 800ae54:	bf00      	nop
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d81e      	bhi.n	800aeb2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	88db      	ldrh	r3, [r3, #6]
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d004      	beq.n	800ae86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f8a5 	bl	800afce <USBD_CtlError>
        break;
 800ae84:	e01a      	b.n	800aebc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d005      	beq.n	800aea2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	f043 0202 	orr.w	r2, r3, #2
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	330c      	adds	r3, #12
 800aea6:	2202      	movs	r2, #2
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f900 	bl	800b0b0 <USBD_CtlSendData>
      break;
 800aeb0:	e004      	b.n	800aebc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f88a 	bl	800afce <USBD_CtlError>
      break;
 800aeba:	bf00      	nop
  }
}
 800aebc:	bf00      	nop
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	885b      	ldrh	r3, [r3, #2]
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d107      	bne.n	800aee6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f940 	bl	800b164 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800aee4:	e013      	b.n	800af0e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	885b      	ldrh	r3, [r3, #2]
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d10b      	bne.n	800af06 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	889b      	ldrh	r3, [r3, #4]
 800aef2:	0a1b      	lsrs	r3, r3, #8
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f930 	bl	800b164 <USBD_CtlSendStatus>
}
 800af04:	e003      	b.n	800af0e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f860 	bl	800afce <USBD_CtlError>
}
 800af0e:	bf00      	nop
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b082      	sub	sp, #8
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af26:	b2db      	uxtb	r3, r3
 800af28:	3b01      	subs	r3, #1
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d80b      	bhi.n	800af46 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	885b      	ldrh	r3, [r3, #2]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d10c      	bne.n	800af50 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f910 	bl	800b164 <USBD_CtlSendStatus>
      }
      break;
 800af44:	e004      	b.n	800af50 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 f840 	bl	800afce <USBD_CtlError>
      break;
 800af4e:	e000      	b.n	800af52 <USBD_ClrFeature+0x3c>
      break;
 800af50:	bf00      	nop
  }
}
 800af52:	bf00      	nop
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b084      	sub	sp, #16
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	781a      	ldrb	r2, [r3, #0]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	3301      	adds	r3, #1
 800af74:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	781a      	ldrb	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3301      	adds	r3, #1
 800af82:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7ff fa41 	bl	800a40c <SWAPBYTE>
 800af8a:	4603      	mov	r3, r0
 800af8c:	461a      	mov	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	3301      	adds	r3, #1
 800af96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	3301      	adds	r3, #1
 800af9c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f7ff fa34 	bl	800a40c <SWAPBYTE>
 800afa4:	4603      	mov	r3, r0
 800afa6:	461a      	mov	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	3301      	adds	r3, #1
 800afb0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3301      	adds	r3, #1
 800afb6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f7ff fa27 	bl	800a40c <SWAPBYTE>
 800afbe:	4603      	mov	r3, r0
 800afc0:	461a      	mov	r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	80da      	strh	r2, [r3, #6]
}
 800afc6:	bf00      	nop
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b082      	sub	sp, #8
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800afd8:	2180      	movs	r1, #128	; 0x80
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f003 fe62 	bl	800eca4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800afe0:	2100      	movs	r1, #0
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f003 fe5e 	bl	800eca4 <USBD_LL_StallEP>
}
 800afe8:	bf00      	nop
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800affc:	2300      	movs	r3, #0
 800affe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d036      	beq.n	800b074 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b00a:	6938      	ldr	r0, [r7, #16]
 800b00c:	f000 f836 	bl	800b07c <USBD_GetLen>
 800b010:	4603      	mov	r3, r0
 800b012:	3301      	adds	r3, #1
 800b014:	b29b      	uxth	r3, r3
 800b016:	005b      	lsls	r3, r3, #1
 800b018:	b29a      	uxth	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	4413      	add	r3, r2
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	7812      	ldrb	r2, [r2, #0]
 800b028:	701a      	strb	r2, [r3, #0]
  idx++;
 800b02a:	7dfb      	ldrb	r3, [r7, #23]
 800b02c:	3301      	adds	r3, #1
 800b02e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b030:	7dfb      	ldrb	r3, [r7, #23]
 800b032:	68ba      	ldr	r2, [r7, #8]
 800b034:	4413      	add	r3, r2
 800b036:	2203      	movs	r2, #3
 800b038:	701a      	strb	r2, [r3, #0]
  idx++;
 800b03a:	7dfb      	ldrb	r3, [r7, #23]
 800b03c:	3301      	adds	r3, #1
 800b03e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b040:	e013      	b.n	800b06a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b042:	7dfb      	ldrb	r3, [r7, #23]
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	4413      	add	r3, r2
 800b048:	693a      	ldr	r2, [r7, #16]
 800b04a:	7812      	ldrb	r2, [r2, #0]
 800b04c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	3301      	adds	r3, #1
 800b052:	613b      	str	r3, [r7, #16]
    idx++;
 800b054:	7dfb      	ldrb	r3, [r7, #23]
 800b056:	3301      	adds	r3, #1
 800b058:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b05a:	7dfb      	ldrb	r3, [r7, #23]
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	4413      	add	r3, r2
 800b060:	2200      	movs	r2, #0
 800b062:	701a      	strb	r2, [r3, #0]
    idx++;
 800b064:	7dfb      	ldrb	r3, [r7, #23]
 800b066:	3301      	adds	r3, #1
 800b068:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1e7      	bne.n	800b042 <USBD_GetString+0x52>
 800b072:	e000      	b.n	800b076 <USBD_GetString+0x86>
    return;
 800b074:	bf00      	nop
  }
}
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b084:	2300      	movs	r3, #0
 800b086:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b08c:	e005      	b.n	800b09a <USBD_GetLen+0x1e>
  {
    len++;
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
 800b090:	3301      	adds	r3, #1
 800b092:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	3301      	adds	r3, #1
 800b098:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1f5      	bne.n	800b08e <USBD_GetLen+0x12>
  }

  return len;
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2202      	movs	r2, #2
 800b0c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f003 fe6d 	bl	800edb6 <USBD_LL_Transmit>

  return USBD_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b084      	sub	sp, #16
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	60f8      	str	r0, [r7, #12]
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f003 fe5c 	bl	800edb6 <USBD_LL_Transmit>

  return USBD_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2203      	movs	r2, #3
 800b118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	2100      	movs	r1, #0
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f003 fe60 	bl	800edf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b084      	sub	sp, #16
 800b146:	af00      	add	r7, sp, #0
 800b148:	60f8      	str	r0, [r7, #12]
 800b14a:	60b9      	str	r1, [r7, #8]
 800b14c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	2100      	movs	r1, #0
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f003 fe4f 	bl	800edf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2204      	movs	r2, #4
 800b170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b174:	2300      	movs	r3, #0
 800b176:	2200      	movs	r2, #0
 800b178:	2100      	movs	r1, #0
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f003 fe1b 	bl	800edb6 <USBD_LL_Transmit>

  return USBD_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b082      	sub	sp, #8
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2205      	movs	r2, #5
 800b196:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b19a:	2300      	movs	r3, #0
 800b19c:	2200      	movs	r2, #0
 800b19e:	2100      	movs	r1, #0
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f003 fe29 	bl	800edf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b1be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b1c2:	2b84      	cmp	r3, #132	; 0x84
 800b1c4:	d005      	beq.n	800b1d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b1c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	3303      	adds	r3, #3
 800b1d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b1e4:	f001 fa6c 	bl	800c6c0 <vTaskStartScheduler>
  
  return osOK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b1ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1f0:	b089      	sub	sp, #36	; 0x24
 800b1f2:	af04      	add	r7, sp, #16
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d020      	beq.n	800b242 <osThreadCreate+0x54>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d01c      	beq.n	800b242 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685c      	ldr	r4, [r3, #4]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	691e      	ldr	r6, [r3, #16]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7ff ffc8 	bl	800b1b0 <makeFreeRtosPriority>
 800b220:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	695b      	ldr	r3, [r3, #20]
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b22a:	9202      	str	r2, [sp, #8]
 800b22c:	9301      	str	r3, [sp, #4]
 800b22e:	9100      	str	r1, [sp, #0]
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	4632      	mov	r2, r6
 800b234:	4629      	mov	r1, r5
 800b236:	4620      	mov	r0, r4
 800b238:	f001 f852 	bl	800c2e0 <xTaskCreateStatic>
 800b23c:	4603      	mov	r3, r0
 800b23e:	60fb      	str	r3, [r7, #12]
 800b240:	e01c      	b.n	800b27c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	685c      	ldr	r4, [r3, #4]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b24e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b256:	4618      	mov	r0, r3
 800b258:	f7ff ffaa 	bl	800b1b0 <makeFreeRtosPriority>
 800b25c:	4602      	mov	r2, r0
 800b25e:	f107 030c 	add.w	r3, r7, #12
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	9200      	str	r2, [sp, #0]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	4632      	mov	r2, r6
 800b26a:	4629      	mov	r1, r5
 800b26c:	4620      	mov	r0, r4
 800b26e:	f001 f894 	bl	800c39a <xTaskCreate>
 800b272:	4603      	mov	r3, r0
 800b274:	2b01      	cmp	r3, #1
 800b276:	d001      	beq.n	800b27c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b278:	2300      	movs	r3, #0
 800b27a:	e000      	b.n	800b27e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b27c:	68fb      	ldr	r3, [r7, #12]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3714      	adds	r7, #20
 800b282:	46bd      	mov	sp, r7
 800b284:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b288 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a09      	ldr	r2, [pc, #36]	; (800b2b8 <osDelay+0x30>)
 800b294:	fba2 2303 	umull	r2, r3, r2, r3
 800b298:	099b      	lsrs	r3, r3, #6
 800b29a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <osDelay+0x1e>
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	e000      	b.n	800b2a8 <osDelay+0x20>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f001 f9d5 	bl	800c658 <vTaskDelay>
  
  return osOK;
 800b2ae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	10624dd3 	.word	0x10624dd3

0800b2bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f103 0208 	add.w	r2, r3, #8
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f103 0208 	add.w	r2, r3, #8
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f103 0208 	add.w	r2, r3, #8
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b30a:	bf00      	nop
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	689a      	ldr	r2, [r3, #8]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	683a      	ldr	r2, [r7, #0]
 800b33a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	1c5a      	adds	r2, r3, #1
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	601a      	str	r2, [r3, #0]
}
 800b352:	bf00      	nop
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b35e:	b480      	push	{r7}
 800b360:	b085      	sub	sp, #20
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b374:	d103      	bne.n	800b37e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	60fb      	str	r3, [r7, #12]
 800b37c:	e00c      	b.n	800b398 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	3308      	adds	r3, #8
 800b382:	60fb      	str	r3, [r7, #12]
 800b384:	e002      	b.n	800b38c <vListInsert+0x2e>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	60fb      	str	r3, [r7, #12]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	429a      	cmp	r2, r3
 800b396:	d2f6      	bcs.n	800b386 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	601a      	str	r2, [r3, #0]
}
 800b3c4:	bf00      	nop
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	6892      	ldr	r2, [r2, #8]
 800b3e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	6852      	ldr	r2, [r2, #4]
 800b3f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d103      	bne.n	800b404 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	689a      	ldr	r2, [r3, #8]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	1e5a      	subs	r2, r3, #1
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10a      	bne.n	800b44e <xQueueGenericReset+0x2a>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	60bb      	str	r3, [r7, #8]
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b44e:	f002 fd51 	bl	800def4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b45a:	68f9      	ldr	r1, [r7, #12]
 800b45c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b45e:	fb01 f303 	mul.w	r3, r1, r3
 800b462:	441a      	add	r2, r3
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b47e:	3b01      	subs	r3, #1
 800b480:	68f9      	ldr	r1, [r7, #12]
 800b482:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b484:	fb01 f303 	mul.w	r3, r1, r3
 800b488:	441a      	add	r2, r3
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	22ff      	movs	r2, #255	; 0xff
 800b492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	22ff      	movs	r2, #255	; 0xff
 800b49a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d114      	bne.n	800b4ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d01a      	beq.n	800b4e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	3310      	adds	r3, #16
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f001 fbd5 	bl	800cc60 <xTaskRemoveFromEventList>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d012      	beq.n	800b4e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b4bc:	4b0c      	ldr	r3, [pc, #48]	; (800b4f0 <xQueueGenericReset+0xcc>)
 800b4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	e009      	b.n	800b4e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3310      	adds	r3, #16
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7ff fef2 	bl	800b2bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	3324      	adds	r3, #36	; 0x24
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7ff feed 	bl	800b2bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b4e2:	f002 fd37 	bl	800df54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b4e6:	2301      	movs	r3, #1
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	e000ed04 	.word	0xe000ed04

0800b4f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08e      	sub	sp, #56	; 0x38
 800b4f8:	af02      	add	r7, sp, #8
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10a      	bne.n	800b51e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b51a:	bf00      	nop
 800b51c:	e7fe      	b.n	800b51c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10a      	bne.n	800b53a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <xQueueGenericCreateStatic+0x52>
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d001      	beq.n	800b54a <xQueueGenericCreateStatic+0x56>
 800b546:	2301      	movs	r3, #1
 800b548:	e000      	b.n	800b54c <xQueueGenericCreateStatic+0x58>
 800b54a:	2300      	movs	r3, #0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10a      	bne.n	800b566 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	623b      	str	r3, [r7, #32]
}
 800b562:	bf00      	nop
 800b564:	e7fe      	b.n	800b564 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d102      	bne.n	800b572 <xQueueGenericCreateStatic+0x7e>
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <xQueueGenericCreateStatic+0x82>
 800b572:	2301      	movs	r3, #1
 800b574:	e000      	b.n	800b578 <xQueueGenericCreateStatic+0x84>
 800b576:	2300      	movs	r3, #0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10a      	bne.n	800b592 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	61fb      	str	r3, [r7, #28]
}
 800b58e:	bf00      	nop
 800b590:	e7fe      	b.n	800b590 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b592:	2350      	movs	r3, #80	; 0x50
 800b594:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2b50      	cmp	r3, #80	; 0x50
 800b59a:	d00a      	beq.n	800b5b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a0:	f383 8811 	msr	BASEPRI, r3
 800b5a4:	f3bf 8f6f 	isb	sy
 800b5a8:	f3bf 8f4f 	dsb	sy
 800b5ac:	61bb      	str	r3, [r7, #24]
}
 800b5ae:	bf00      	nop
 800b5b0:	e7fe      	b.n	800b5b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b5b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00d      	beq.n	800b5da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	68b9      	ldr	r1, [r7, #8]
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 f805 	bl	800b5e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3730      	adds	r7, #48	; 0x30
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
 800b5f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d103      	bne.n	800b600 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	69ba      	ldr	r2, [r7, #24]
 800b5fc:	601a      	str	r2, [r3, #0]
 800b5fe:	e002      	b.n	800b606 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b612:	2101      	movs	r1, #1
 800b614:	69b8      	ldr	r0, [r7, #24]
 800b616:	f7ff ff05 	bl	800b424 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	78fa      	ldrb	r2, [r7, #3]
 800b61e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b622:	bf00      	nop
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b082      	sub	sp, #8
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00e      	beq.n	800b656 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b64a:	2300      	movs	r3, #0
 800b64c:	2200      	movs	r2, #0
 800b64e:	2100      	movs	r1, #0
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f81f 	bl	800b694 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b656:	bf00      	nop
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b088      	sub	sp, #32
 800b662:	af02      	add	r7, sp, #8
 800b664:	4603      	mov	r3, r0
 800b666:	6039      	str	r1, [r7, #0]
 800b668:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b66a:	2301      	movs	r3, #1
 800b66c:	617b      	str	r3, [r7, #20]
 800b66e:	2300      	movs	r3, #0
 800b670:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b672:	79fb      	ldrb	r3, [r7, #7]
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	2200      	movs	r2, #0
 800b67a:	6939      	ldr	r1, [r7, #16]
 800b67c:	6978      	ldr	r0, [r7, #20]
 800b67e:	f7ff ff39 	bl	800b4f4 <xQueueGenericCreateStatic>
 800b682:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f7ff ffd0 	bl	800b62a <prvInitialiseMutex>

		return xNewQueue;
 800b68a:	68fb      	ldr	r3, [r7, #12]
	}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3718      	adds	r7, #24
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b08e      	sub	sp, #56	; 0x38
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
 800b6a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10a      	bne.n	800b6c6 <xQueueGenericSend+0x32>
	__asm volatile
 800b6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b4:	f383 8811 	msr	BASEPRI, r3
 800b6b8:	f3bf 8f6f 	isb	sy
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6c2:	bf00      	nop
 800b6c4:	e7fe      	b.n	800b6c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d103      	bne.n	800b6d4 <xQueueGenericSend+0x40>
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d101      	bne.n	800b6d8 <xQueueGenericSend+0x44>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e000      	b.n	800b6da <xQueueGenericSend+0x46>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10a      	bne.n	800b6f4 <xQueueGenericSend+0x60>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6f0:	bf00      	nop
 800b6f2:	e7fe      	b.n	800b6f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d103      	bne.n	800b702 <xQueueGenericSend+0x6e>
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d101      	bne.n	800b706 <xQueueGenericSend+0x72>
 800b702:	2301      	movs	r3, #1
 800b704:	e000      	b.n	800b708 <xQueueGenericSend+0x74>
 800b706:	2300      	movs	r3, #0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10a      	bne.n	800b722 <xQueueGenericSend+0x8e>
	__asm volatile
 800b70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	623b      	str	r3, [r7, #32]
}
 800b71e:	bf00      	nop
 800b720:	e7fe      	b.n	800b720 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b722:	f001 fc5f 	bl	800cfe4 <xTaskGetSchedulerState>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d102      	bne.n	800b732 <xQueueGenericSend+0x9e>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <xQueueGenericSend+0xa2>
 800b732:	2301      	movs	r3, #1
 800b734:	e000      	b.n	800b738 <xQueueGenericSend+0xa4>
 800b736:	2300      	movs	r3, #0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10a      	bne.n	800b752 <xQueueGenericSend+0xbe>
	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	61fb      	str	r3, [r7, #28]
}
 800b74e:	bf00      	nop
 800b750:	e7fe      	b.n	800b750 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b752:	f002 fbcf 	bl	800def4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b75e:	429a      	cmp	r2, r3
 800b760:	d302      	bcc.n	800b768 <xQueueGenericSend+0xd4>
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2b02      	cmp	r3, #2
 800b766:	d129      	bne.n	800b7bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	68b9      	ldr	r1, [r7, #8]
 800b76c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b76e:	f000 fc49 	bl	800c004 <prvCopyDataToQueue>
 800b772:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d010      	beq.n	800b79e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	3324      	adds	r3, #36	; 0x24
 800b780:	4618      	mov	r0, r3
 800b782:	f001 fa6d 	bl	800cc60 <xTaskRemoveFromEventList>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d013      	beq.n	800b7b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b78c:	4b3f      	ldr	r3, [pc, #252]	; (800b88c <xQueueGenericSend+0x1f8>)
 800b78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	f3bf 8f6f 	isb	sy
 800b79c:	e00a      	b.n	800b7b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d007      	beq.n	800b7b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b7a4:	4b39      	ldr	r3, [pc, #228]	; (800b88c <xQueueGenericSend+0x1f8>)
 800b7a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b7b4:	f002 fbce 	bl	800df54 <vPortExitCritical>
				return pdPASS;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e063      	b.n	800b884 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d103      	bne.n	800b7ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b7c2:	f002 fbc7 	bl	800df54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	e05c      	b.n	800b884 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d106      	bne.n	800b7de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7d0:	f107 0314 	add.w	r3, r7, #20
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f001 faa5 	bl	800cd24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7de:	f002 fbb9 	bl	800df54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7e2:	f000 ffdf 	bl	800c7a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7e6:	f002 fb85 	bl	800def4 <vPortEnterCritical>
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7f0:	b25b      	sxtb	r3, r3
 800b7f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7f6:	d103      	bne.n	800b800 <xQueueGenericSend+0x16c>
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b806:	b25b      	sxtb	r3, r3
 800b808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b80c:	d103      	bne.n	800b816 <xQueueGenericSend+0x182>
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	2200      	movs	r2, #0
 800b812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b816:	f002 fb9d 	bl	800df54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b81a:	1d3a      	adds	r2, r7, #4
 800b81c:	f107 0314 	add.w	r3, r7, #20
 800b820:	4611      	mov	r1, r2
 800b822:	4618      	mov	r0, r3
 800b824:	f001 fa94 	bl	800cd50 <xTaskCheckForTimeOut>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d124      	bne.n	800b878 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b82e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b830:	f000 fce0 	bl	800c1f4 <prvIsQueueFull>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d018      	beq.n	800b86c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83c:	3310      	adds	r3, #16
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	4611      	mov	r1, r2
 800b842:	4618      	mov	r0, r3
 800b844:	f001 f9bc 	bl	800cbc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b84a:	f000 fc6b 	bl	800c124 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b84e:	f000 ffb7 	bl	800c7c0 <xTaskResumeAll>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	f47f af7c 	bne.w	800b752 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b85a:	4b0c      	ldr	r3, [pc, #48]	; (800b88c <xQueueGenericSend+0x1f8>)
 800b85c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b860:	601a      	str	r2, [r3, #0]
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	e772      	b.n	800b752 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b86c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b86e:	f000 fc59 	bl	800c124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b872:	f000 ffa5 	bl	800c7c0 <xTaskResumeAll>
 800b876:	e76c      	b.n	800b752 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b87a:	f000 fc53 	bl	800c124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b87e:	f000 ff9f 	bl	800c7c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b882:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b884:	4618      	mov	r0, r3
 800b886:	3738      	adds	r7, #56	; 0x38
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	e000ed04 	.word	0xe000ed04

0800b890 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b090      	sub	sp, #64	; 0x40
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
 800b89c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d10a      	bne.n	800b8be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ac:	f383 8811 	msr	BASEPRI, r3
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	f3bf 8f4f 	dsb	sy
 800b8b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8ba:	bf00      	nop
 800b8bc:	e7fe      	b.n	800b8bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d103      	bne.n	800b8cc <xQueueGenericSendFromISR+0x3c>
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <xQueueGenericSendFromISR+0x40>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e000      	b.n	800b8d2 <xQueueGenericSendFromISR+0x42>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d10a      	bne.n	800b8ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8e8:	bf00      	nop
 800b8ea:	e7fe      	b.n	800b8ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d103      	bne.n	800b8fa <xQueueGenericSendFromISR+0x6a>
 800b8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d101      	bne.n	800b8fe <xQueueGenericSendFromISR+0x6e>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e000      	b.n	800b900 <xQueueGenericSendFromISR+0x70>
 800b8fe:	2300      	movs	r3, #0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10a      	bne.n	800b91a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	623b      	str	r3, [r7, #32]
}
 800b916:	bf00      	nop
 800b918:	e7fe      	b.n	800b918 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b91a:	f002 fbc7 	bl	800e0ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b91e:	f3ef 8211 	mrs	r2, BASEPRI
 800b922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	61fa      	str	r2, [r7, #28]
 800b934:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b936:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b938:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b942:	429a      	cmp	r2, r3
 800b944:	d302      	bcc.n	800b94c <xQueueGenericSendFromISR+0xbc>
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	2b02      	cmp	r3, #2
 800b94a:	d12f      	bne.n	800b9ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b95c:	683a      	ldr	r2, [r7, #0]
 800b95e:	68b9      	ldr	r1, [r7, #8]
 800b960:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b962:	f000 fb4f 	bl	800c004 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b966:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b96a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b96e:	d112      	bne.n	800b996 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b974:	2b00      	cmp	r3, #0
 800b976:	d016      	beq.n	800b9a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97a:	3324      	adds	r3, #36	; 0x24
 800b97c:	4618      	mov	r0, r3
 800b97e:	f001 f96f 	bl	800cc60 <xTaskRemoveFromEventList>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00e      	beq.n	800b9a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00b      	beq.n	800b9a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2201      	movs	r2, #1
 800b992:	601a      	str	r2, [r3, #0]
 800b994:	e007      	b.n	800b9a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b996:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b99a:	3301      	adds	r3, #1
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	b25a      	sxtb	r2, r3
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b9aa:	e001      	b.n	800b9b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b9ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3740      	adds	r7, #64	; 0x40
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b08e      	sub	sp, #56	; 0x38
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10a      	bne.n	800b9f0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	623b      	str	r3, [r7, #32]
}
 800b9ec:	bf00      	nop
 800b9ee:	e7fe      	b.n	800b9ee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00a      	beq.n	800ba0e <xQueueGiveFromISR+0x48>
	__asm volatile
 800b9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	61fb      	str	r3, [r7, #28]
}
 800ba0a:	bf00      	nop
 800ba0c:	e7fe      	b.n	800ba0c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d103      	bne.n	800ba1e <xQueueGiveFromISR+0x58>
 800ba16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d101      	bne.n	800ba22 <xQueueGiveFromISR+0x5c>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e000      	b.n	800ba24 <xQueueGiveFromISR+0x5e>
 800ba22:	2300      	movs	r3, #0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10a      	bne.n	800ba3e <xQueueGiveFromISR+0x78>
	__asm volatile
 800ba28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2c:	f383 8811 	msr	BASEPRI, r3
 800ba30:	f3bf 8f6f 	isb	sy
 800ba34:	f3bf 8f4f 	dsb	sy
 800ba38:	61bb      	str	r3, [r7, #24]
}
 800ba3a:	bf00      	nop
 800ba3c:	e7fe      	b.n	800ba3c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba3e:	f002 fb35 	bl	800e0ac <vPortValidateInterruptPriority>
	__asm volatile
 800ba42:	f3ef 8211 	mrs	r2, BASEPRI
 800ba46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	617a      	str	r2, [r7, #20]
 800ba58:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ba5a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ba64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d22b      	bcs.n	800bac6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7a:	1c5a      	adds	r2, r3, #1
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba88:	d112      	bne.n	800bab0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d016      	beq.n	800bac0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba94:	3324      	adds	r3, #36	; 0x24
 800ba96:	4618      	mov	r0, r3
 800ba98:	f001 f8e2 	bl	800cc60 <xTaskRemoveFromEventList>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00e      	beq.n	800bac0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00b      	beq.n	800bac0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	2201      	movs	r2, #1
 800baac:	601a      	str	r2, [r3, #0]
 800baae:	e007      	b.n	800bac0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab4:	3301      	adds	r3, #1
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	b25a      	sxtb	r2, r3
 800baba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bac0:	2301      	movs	r3, #1
 800bac2:	637b      	str	r3, [r7, #52]	; 0x34
 800bac4:	e001      	b.n	800baca <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bac6:	2300      	movs	r3, #0
 800bac8:	637b      	str	r3, [r7, #52]	; 0x34
 800baca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bacc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f383 8811 	msr	BASEPRI, r3
}
 800bad4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3738      	adds	r7, #56	; 0x38
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b08c      	sub	sp, #48	; 0x30
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800baec:	2300      	movs	r3, #0
 800baee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10a      	bne.n	800bb10 <xQueueReceive+0x30>
	__asm volatile
 800bafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafe:	f383 8811 	msr	BASEPRI, r3
 800bb02:	f3bf 8f6f 	isb	sy
 800bb06:	f3bf 8f4f 	dsb	sy
 800bb0a:	623b      	str	r3, [r7, #32]
}
 800bb0c:	bf00      	nop
 800bb0e:	e7fe      	b.n	800bb0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d103      	bne.n	800bb1e <xQueueReceive+0x3e>
 800bb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d101      	bne.n	800bb22 <xQueueReceive+0x42>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e000      	b.n	800bb24 <xQueueReceive+0x44>
 800bb22:	2300      	movs	r3, #0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10a      	bne.n	800bb3e <xQueueReceive+0x5e>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	61fb      	str	r3, [r7, #28]
}
 800bb3a:	bf00      	nop
 800bb3c:	e7fe      	b.n	800bb3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb3e:	f001 fa51 	bl	800cfe4 <xTaskGetSchedulerState>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d102      	bne.n	800bb4e <xQueueReceive+0x6e>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d101      	bne.n	800bb52 <xQueueReceive+0x72>
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e000      	b.n	800bb54 <xQueueReceive+0x74>
 800bb52:	2300      	movs	r3, #0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10a      	bne.n	800bb6e <xQueueReceive+0x8e>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	61bb      	str	r3, [r7, #24]
}
 800bb6a:	bf00      	nop
 800bb6c:	e7fe      	b.n	800bb6c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb6e:	f002 f9c1 	bl	800def4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d01f      	beq.n	800bbbe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb7e:	68b9      	ldr	r1, [r7, #8]
 800bb80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb82:	f000 faa9 	bl	800c0d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	1e5a      	subs	r2, r3, #1
 800bb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00f      	beq.n	800bbb6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	3310      	adds	r3, #16
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f001 f860 	bl	800cc60 <xTaskRemoveFromEventList>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d007      	beq.n	800bbb6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bba6:	4b3d      	ldr	r3, [pc, #244]	; (800bc9c <xQueueReceive+0x1bc>)
 800bba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbac:	601a      	str	r2, [r3, #0]
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bbb6:	f002 f9cd 	bl	800df54 <vPortExitCritical>
				return pdPASS;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e069      	b.n	800bc92 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d103      	bne.n	800bbcc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bbc4:	f002 f9c6 	bl	800df54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	e062      	b.n	800bc92 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d106      	bne.n	800bbe0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbd2:	f107 0310 	add.w	r3, r7, #16
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f001 f8a4 	bl	800cd24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbe0:	f002 f9b8 	bl	800df54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbe4:	f000 fdde 	bl	800c7a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbe8:	f002 f984 	bl	800def4 <vPortEnterCritical>
 800bbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbf2:	b25b      	sxtb	r3, r3
 800bbf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbf8:	d103      	bne.n	800bc02 <xQueueReceive+0x122>
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc08:	b25b      	sxtb	r3, r3
 800bc0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc0e:	d103      	bne.n	800bc18 <xQueueReceive+0x138>
 800bc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc18:	f002 f99c 	bl	800df54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc1c:	1d3a      	adds	r2, r7, #4
 800bc1e:	f107 0310 	add.w	r3, r7, #16
 800bc22:	4611      	mov	r1, r2
 800bc24:	4618      	mov	r0, r3
 800bc26:	f001 f893 	bl	800cd50 <xTaskCheckForTimeOut>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d123      	bne.n	800bc78 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc32:	f000 fac9 	bl	800c1c8 <prvIsQueueEmpty>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d017      	beq.n	800bc6c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3e:	3324      	adds	r3, #36	; 0x24
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	4611      	mov	r1, r2
 800bc44:	4618      	mov	r0, r3
 800bc46:	f000 ffbb 	bl	800cbc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc4c:	f000 fa6a 	bl	800c124 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc50:	f000 fdb6 	bl	800c7c0 <xTaskResumeAll>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d189      	bne.n	800bb6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bc5a:	4b10      	ldr	r3, [pc, #64]	; (800bc9c <xQueueReceive+0x1bc>)
 800bc5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc60:	601a      	str	r2, [r3, #0]
 800bc62:	f3bf 8f4f 	dsb	sy
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	e780      	b.n	800bb6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc6e:	f000 fa59 	bl	800c124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc72:	f000 fda5 	bl	800c7c0 <xTaskResumeAll>
 800bc76:	e77a      	b.n	800bb6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc7a:	f000 fa53 	bl	800c124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc7e:	f000 fd9f 	bl	800c7c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc84:	f000 faa0 	bl	800c1c8 <prvIsQueueEmpty>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f43f af6f 	beq.w	800bb6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3730      	adds	r7, #48	; 0x30
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	e000ed04 	.word	0xe000ed04

0800bca0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b08e      	sub	sp, #56	; 0x38
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10a      	bne.n	800bcd2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc0:	f383 8811 	msr	BASEPRI, r3
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	623b      	str	r3, [r7, #32]
}
 800bcce:	bf00      	nop
 800bcd0:	e7fe      	b.n	800bcd0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00a      	beq.n	800bcf0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcde:	f383 8811 	msr	BASEPRI, r3
 800bce2:	f3bf 8f6f 	isb	sy
 800bce6:	f3bf 8f4f 	dsb	sy
 800bcea:	61fb      	str	r3, [r7, #28]
}
 800bcec:	bf00      	nop
 800bcee:	e7fe      	b.n	800bcee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcf0:	f001 f978 	bl	800cfe4 <xTaskGetSchedulerState>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d102      	bne.n	800bd00 <xQueueSemaphoreTake+0x60>
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d101      	bne.n	800bd04 <xQueueSemaphoreTake+0x64>
 800bd00:	2301      	movs	r3, #1
 800bd02:	e000      	b.n	800bd06 <xQueueSemaphoreTake+0x66>
 800bd04:	2300      	movs	r3, #0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10a      	bne.n	800bd20 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	61bb      	str	r3, [r7, #24]
}
 800bd1c:	bf00      	nop
 800bd1e:	e7fe      	b.n	800bd1e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd20:	f002 f8e8 	bl	800def4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd28:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d024      	beq.n	800bd7a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd32:	1e5a      	subs	r2, r3, #1
 800bd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd36:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d104      	bne.n	800bd4a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bd40:	f001 faf8 	bl	800d334 <pvTaskIncrementMutexHeldCount>
 800bd44:	4602      	mov	r2, r0
 800bd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd48:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00f      	beq.n	800bd72 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd54:	3310      	adds	r3, #16
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 ff82 	bl	800cc60 <xTaskRemoveFromEventList>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d007      	beq.n	800bd72 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd62:	4b54      	ldr	r3, [pc, #336]	; (800beb4 <xQueueSemaphoreTake+0x214>)
 800bd64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd72:	f002 f8ef 	bl	800df54 <vPortExitCritical>
				return pdPASS;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e097      	b.n	800beaa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d111      	bne.n	800bda4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00a      	beq.n	800bd9c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8a:	f383 8811 	msr	BASEPRI, r3
 800bd8e:	f3bf 8f6f 	isb	sy
 800bd92:	f3bf 8f4f 	dsb	sy
 800bd96:	617b      	str	r3, [r7, #20]
}
 800bd98:	bf00      	nop
 800bd9a:	e7fe      	b.n	800bd9a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bd9c:	f002 f8da 	bl	800df54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bda0:	2300      	movs	r3, #0
 800bda2:	e082      	b.n	800beaa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d106      	bne.n	800bdb8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdaa:	f107 030c 	add.w	r3, r7, #12
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 ffb8 	bl	800cd24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdb8:	f002 f8cc 	bl	800df54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdbc:	f000 fcf2 	bl	800c7a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdc0:	f002 f898 	bl	800def4 <vPortEnterCritical>
 800bdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdca:	b25b      	sxtb	r3, r3
 800bdcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdd0:	d103      	bne.n	800bdda <xQueueSemaphoreTake+0x13a>
 800bdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bde0:	b25b      	sxtb	r3, r3
 800bde2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bde6:	d103      	bne.n	800bdf0 <xQueueSemaphoreTake+0x150>
 800bde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdf0:	f002 f8b0 	bl	800df54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdf4:	463a      	mov	r2, r7
 800bdf6:	f107 030c 	add.w	r3, r7, #12
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 ffa7 	bl	800cd50 <xTaskCheckForTimeOut>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d132      	bne.n	800be6e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be0a:	f000 f9dd 	bl	800c1c8 <prvIsQueueEmpty>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d026      	beq.n	800be62 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d109      	bne.n	800be30 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800be1c:	f002 f86a 	bl	800def4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	4618      	mov	r0, r3
 800be26:	f001 f8fb 	bl	800d020 <xTaskPriorityInherit>
 800be2a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800be2c:	f002 f892 	bl	800df54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be32:	3324      	adds	r3, #36	; 0x24
 800be34:	683a      	ldr	r2, [r7, #0]
 800be36:	4611      	mov	r1, r2
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 fec1 	bl	800cbc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be40:	f000 f970 	bl	800c124 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be44:	f000 fcbc 	bl	800c7c0 <xTaskResumeAll>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f47f af68 	bne.w	800bd20 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800be50:	4b18      	ldr	r3, [pc, #96]	; (800beb4 <xQueueSemaphoreTake+0x214>)
 800be52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be56:	601a      	str	r2, [r3, #0]
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	e75e      	b.n	800bd20 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800be62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be64:	f000 f95e 	bl	800c124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be68:	f000 fcaa 	bl	800c7c0 <xTaskResumeAll>
 800be6c:	e758      	b.n	800bd20 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800be6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be70:	f000 f958 	bl	800c124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be74:	f000 fca4 	bl	800c7c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be7a:	f000 f9a5 	bl	800c1c8 <prvIsQueueEmpty>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	f43f af4d 	beq.w	800bd20 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00d      	beq.n	800bea8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800be8c:	f002 f832 	bl	800def4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800be90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be92:	f000 f89f 	bl	800bfd4 <prvGetDisinheritPriorityAfterTimeout>
 800be96:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800be98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be9e:	4618      	mov	r0, r3
 800bea0:	f001 f9ba 	bl	800d218 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bea4:	f002 f856 	bl	800df54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bea8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3738      	adds	r7, #56	; 0x38
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	e000ed04 	.word	0xe000ed04

0800beb8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b08e      	sub	sp, #56	; 0x38
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10a      	bne.n	800bee4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	623b      	str	r3, [r7, #32]
}
 800bee0:	bf00      	nop
 800bee2:	e7fe      	b.n	800bee2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d103      	bne.n	800bef2 <xQueueReceiveFromISR+0x3a>
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d101      	bne.n	800bef6 <xQueueReceiveFromISR+0x3e>
 800bef2:	2301      	movs	r3, #1
 800bef4:	e000      	b.n	800bef8 <xQueueReceiveFromISR+0x40>
 800bef6:	2300      	movs	r3, #0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10a      	bne.n	800bf12 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800befc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	61fb      	str	r3, [r7, #28]
}
 800bf0e:	bf00      	nop
 800bf10:	e7fe      	b.n	800bf10 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf12:	f002 f8cb 	bl	800e0ac <vPortValidateInterruptPriority>
	__asm volatile
 800bf16:	f3ef 8211 	mrs	r2, BASEPRI
 800bf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1e:	f383 8811 	msr	BASEPRI, r3
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	61ba      	str	r2, [r7, #24]
 800bf2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bf2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d02f      	beq.n	800bf9e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf48:	68b9      	ldr	r1, [r7, #8]
 800bf4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf4c:	f000 f8c4 	bl	800c0d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf52:	1e5a      	subs	r2, r3, #1
 800bf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bf58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf60:	d112      	bne.n	800bf88 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d016      	beq.n	800bf98 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6c:	3310      	adds	r3, #16
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 fe76 	bl	800cc60 <xTaskRemoveFromEventList>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00e      	beq.n	800bf98 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00b      	beq.n	800bf98 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	601a      	str	r2, [r3, #0]
 800bf86:	e007      	b.n	800bf98 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bf88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	b25a      	sxtb	r2, r3
 800bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	637b      	str	r3, [r7, #52]	; 0x34
 800bf9c:	e001      	b.n	800bfa2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	637b      	str	r3, [r7, #52]	; 0x34
 800bfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	f383 8811 	msr	BASEPRI, r3
}
 800bfac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bfae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3738      	adds	r7, #56	; 0x38
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	649a      	str	r2, [r3, #72]	; 0x48
	}
 800bfc8:	bf00      	nop
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d006      	beq.n	800bff2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f1c3 0314 	rsb	r3, r3, #20
 800bfee:	60fb      	str	r3, [r7, #12]
 800bff0:	e001      	b.n	800bff6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bff2:	2300      	movs	r3, #0
 800bff4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bff6:	68fb      	ldr	r3, [r7, #12]
	}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b086      	sub	sp, #24
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c010:	2300      	movs	r3, #0
 800c012:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c018:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10d      	bne.n	800c03e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d14d      	bne.n	800c0c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	4618      	mov	r0, r3
 800c030:	f001 f86c 	bl	800d10c <xTaskPriorityDisinherit>
 800c034:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2200      	movs	r2, #0
 800c03a:	609a      	str	r2, [r3, #8]
 800c03c:	e043      	b.n	800c0c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d119      	bne.n	800c078 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6858      	ldr	r0, [r3, #4]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04c:	461a      	mov	r2, r3
 800c04e:	68b9      	ldr	r1, [r7, #8]
 800c050:	f003 ff0f 	bl	800fe72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	685a      	ldr	r2, [r3, #4]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05c:	441a      	add	r2, r3
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	685a      	ldr	r2, [r3, #4]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d32b      	bcc.n	800c0c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	605a      	str	r2, [r3, #4]
 800c076:	e026      	b.n	800c0c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	68d8      	ldr	r0, [r3, #12]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c080:	461a      	mov	r2, r3
 800c082:	68b9      	ldr	r1, [r7, #8]
 800c084:	f003 fef5 	bl	800fe72 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	68da      	ldr	r2, [r3, #12]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c090:	425b      	negs	r3, r3
 800c092:	441a      	add	r2, r3
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	68da      	ldr	r2, [r3, #12]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d207      	bcs.n	800c0b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	689a      	ldr	r2, [r3, #8]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ac:	425b      	negs	r3, r3
 800c0ae:	441a      	add	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	d105      	bne.n	800c0c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	1c5a      	adds	r2, r3, #1
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c0ce:	697b      	ldr	r3, [r7, #20]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3718      	adds	r7, #24
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d018      	beq.n	800c11c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	68da      	ldr	r2, [r3, #12]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f2:	441a      	add	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	68da      	ldr	r2, [r3, #12]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	429a      	cmp	r2, r3
 800c102:	d303      	bcc.n	800c10c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	68d9      	ldr	r1, [r3, #12]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c114:	461a      	mov	r2, r3
 800c116:	6838      	ldr	r0, [r7, #0]
 800c118:	f003 feab 	bl	800fe72 <memcpy>
	}
}
 800c11c:	bf00      	nop
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c12c:	f001 fee2 	bl	800def4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c136:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c138:	e011      	b.n	800c15e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d012      	beq.n	800c168 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	3324      	adds	r3, #36	; 0x24
 800c146:	4618      	mov	r0, r3
 800c148:	f000 fd8a 	bl	800cc60 <xTaskRemoveFromEventList>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d001      	beq.n	800c156 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c152:	f000 fe5f 	bl	800ce14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c156:	7bfb      	ldrb	r3, [r7, #15]
 800c158:	3b01      	subs	r3, #1
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c15e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c162:	2b00      	cmp	r3, #0
 800c164:	dce9      	bgt.n	800c13a <prvUnlockQueue+0x16>
 800c166:	e000      	b.n	800c16a <prvUnlockQueue+0x46>
					break;
 800c168:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	22ff      	movs	r2, #255	; 0xff
 800c16e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c172:	f001 feef 	bl	800df54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c176:	f001 febd 	bl	800def4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c180:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c182:	e011      	b.n	800c1a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	691b      	ldr	r3, [r3, #16]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d012      	beq.n	800c1b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	3310      	adds	r3, #16
 800c190:	4618      	mov	r0, r3
 800c192:	f000 fd65 	bl	800cc60 <xTaskRemoveFromEventList>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d001      	beq.n	800c1a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c19c:	f000 fe3a 	bl	800ce14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c1a0:	7bbb      	ldrb	r3, [r7, #14]
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	dce9      	bgt.n	800c184 <prvUnlockQueue+0x60>
 800c1b0:	e000      	b.n	800c1b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c1b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	22ff      	movs	r2, #255	; 0xff
 800c1b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c1bc:	f001 feca 	bl	800df54 <vPortExitCritical>
}
 800c1c0:	bf00      	nop
 800c1c2:	3710      	adds	r7, #16
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1d0:	f001 fe90 	bl	800def4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d102      	bne.n	800c1e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	60fb      	str	r3, [r7, #12]
 800c1e0:	e001      	b.n	800c1e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1e6:	f001 feb5 	bl	800df54 <vPortExitCritical>

	return xReturn;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1fc:	f001 fe7a 	bl	800def4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c208:	429a      	cmp	r2, r3
 800c20a:	d102      	bne.n	800c212 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c20c:	2301      	movs	r3, #1
 800c20e:	60fb      	str	r3, [r7, #12]
 800c210:	e001      	b.n	800c216 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c212:	2300      	movs	r3, #0
 800c214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c216:	f001 fe9d 	bl	800df54 <vPortExitCritical>

	return xReturn;
 800c21a:	68fb      	ldr	r3, [r7, #12]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c22e:	2300      	movs	r3, #0
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	e014      	b.n	800c25e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c234:	4a0f      	ldr	r2, [pc, #60]	; (800c274 <vQueueAddToRegistry+0x50>)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10b      	bne.n	800c258 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c240:	490c      	ldr	r1, [pc, #48]	; (800c274 <vQueueAddToRegistry+0x50>)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	683a      	ldr	r2, [r7, #0]
 800c246:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c24a:	4a0a      	ldr	r2, [pc, #40]	; (800c274 <vQueueAddToRegistry+0x50>)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	4413      	add	r3, r2
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c256:	e006      	b.n	800c266 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	3301      	adds	r3, #1
 800c25c:	60fb      	str	r3, [r7, #12]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2b07      	cmp	r3, #7
 800c262:	d9e7      	bls.n	800c234 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c264:	bf00      	nop
 800c266:	bf00      	nop
 800c268:	3714      	adds	r7, #20
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	200029b4 	.word	0x200029b4

0800c278 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b086      	sub	sp, #24
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c288:	f001 fe34 	bl	800def4 <vPortEnterCritical>
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c292:	b25b      	sxtb	r3, r3
 800c294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c298:	d103      	bne.n	800c2a2 <vQueueWaitForMessageRestricted+0x2a>
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2200      	movs	r2, #0
 800c29e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2a8:	b25b      	sxtb	r3, r3
 800c2aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2ae:	d103      	bne.n	800c2b8 <vQueueWaitForMessageRestricted+0x40>
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2b8:	f001 fe4c 	bl	800df54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d106      	bne.n	800c2d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	3324      	adds	r3, #36	; 0x24
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	68b9      	ldr	r1, [r7, #8]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f000 fc9b 	bl	800cc08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c2d2:	6978      	ldr	r0, [r7, #20]
 800c2d4:	f7ff ff26 	bl	800c124 <prvUnlockQueue>
	}
 800c2d8:	bf00      	nop
 800c2da:	3718      	adds	r7, #24
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b08e      	sub	sp, #56	; 0x38
 800c2e4:	af04      	add	r7, sp, #16
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	607a      	str	r2, [r7, #4]
 800c2ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10a      	bne.n	800c30a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	623b      	str	r3, [r7, #32]
}
 800c306:	bf00      	nop
 800c308:	e7fe      	b.n	800c308 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d10a      	bne.n	800c326 <xTaskCreateStatic+0x46>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	61fb      	str	r3, [r7, #28]
}
 800c322:	bf00      	nop
 800c324:	e7fe      	b.n	800c324 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c326:	23b4      	movs	r3, #180	; 0xb4
 800c328:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	2bb4      	cmp	r3, #180	; 0xb4
 800c32e:	d00a      	beq.n	800c346 <xTaskCreateStatic+0x66>
	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	61bb      	str	r3, [r7, #24]
}
 800c342:	bf00      	nop
 800c344:	e7fe      	b.n	800c344 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c346:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d01e      	beq.n	800c38c <xTaskCreateStatic+0xac>
 800c34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c350:	2b00      	cmp	r3, #0
 800c352:	d01b      	beq.n	800c38c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c356:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c35c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c360:	2202      	movs	r2, #2
 800c362:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c366:	2300      	movs	r3, #0
 800c368:	9303      	str	r3, [sp, #12]
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	9302      	str	r3, [sp, #8]
 800c36e:	f107 0314 	add.w	r3, r7, #20
 800c372:	9301      	str	r3, [sp, #4]
 800c374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	68b9      	ldr	r1, [r7, #8]
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f000 f850 	bl	800c424 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c386:	f000 f8f9 	bl	800c57c <prvAddNewTaskToReadyList>
 800c38a:	e001      	b.n	800c390 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c38c:	2300      	movs	r3, #0
 800c38e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c390:	697b      	ldr	r3, [r7, #20]
	}
 800c392:	4618      	mov	r0, r3
 800c394:	3728      	adds	r7, #40	; 0x28
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b08c      	sub	sp, #48	; 0x30
 800c39e:	af04      	add	r7, sp, #16
 800c3a0:	60f8      	str	r0, [r7, #12]
 800c3a2:	60b9      	str	r1, [r7, #8]
 800c3a4:	603b      	str	r3, [r7, #0]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c3aa:	88fb      	ldrh	r3, [r7, #6]
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f001 febc 	bl	800e12c <pvPortMalloc>
 800c3b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00e      	beq.n	800c3da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c3bc:	20b4      	movs	r0, #180	; 0xb4
 800c3be:	f001 feb5 	bl	800e12c <pvPortMalloc>
 800c3c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d003      	beq.n	800c3d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	697a      	ldr	r2, [r7, #20]
 800c3ce:	631a      	str	r2, [r3, #48]	; 0x30
 800c3d0:	e005      	b.n	800c3de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c3d2:	6978      	ldr	r0, [r7, #20]
 800c3d4:	f001 ff76 	bl	800e2c4 <vPortFree>
 800c3d8:	e001      	b.n	800c3de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d017      	beq.n	800c414 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c3ec:	88fa      	ldrh	r2, [r7, #6]
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	9303      	str	r3, [sp, #12]
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	9302      	str	r3, [sp, #8]
 800c3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f8:	9301      	str	r3, [sp, #4]
 800c3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fc:	9300      	str	r3, [sp, #0]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	68b9      	ldr	r1, [r7, #8]
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f000 f80e 	bl	800c424 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c408:	69f8      	ldr	r0, [r7, #28]
 800c40a:	f000 f8b7 	bl	800c57c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c40e:	2301      	movs	r3, #1
 800c410:	61bb      	str	r3, [r7, #24]
 800c412:	e002      	b.n	800c41a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c418:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c41a:	69bb      	ldr	r3, [r7, #24]
	}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3720      	adds	r7, #32
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b088      	sub	sp, #32
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
 800c430:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c434:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	461a      	mov	r2, r3
 800c43c:	21a5      	movs	r1, #165	; 0xa5
 800c43e:	f003 fc2f 	bl	800fca0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c44c:	3b01      	subs	r3, #1
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	4413      	add	r3, r2
 800c452:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	f023 0307 	bic.w	r3, r3, #7
 800c45a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c45c:	69bb      	ldr	r3, [r7, #24]
 800c45e:	f003 0307 	and.w	r3, r3, #7
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00a      	beq.n	800c47c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	617b      	str	r3, [r7, #20]
}
 800c478:	bf00      	nop
 800c47a:	e7fe      	b.n	800c47a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d01f      	beq.n	800c4c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c482:	2300      	movs	r3, #0
 800c484:	61fb      	str	r3, [r7, #28]
 800c486:	e012      	b.n	800c4ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c488:	68ba      	ldr	r2, [r7, #8]
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	4413      	add	r3, r2
 800c48e:	7819      	ldrb	r1, [r3, #0]
 800c490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	4413      	add	r3, r2
 800c496:	3334      	adds	r3, #52	; 0x34
 800c498:	460a      	mov	r2, r1
 800c49a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d006      	beq.n	800c4b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	61fb      	str	r3, [r7, #28]
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	2b0f      	cmp	r3, #15
 800c4b2:	d9e9      	bls.n	800c488 <prvInitialiseNewTask+0x64>
 800c4b4:	e000      	b.n	800c4b8 <prvInitialiseNewTask+0x94>
			{
				break;
 800c4b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c4c0:	e003      	b.n	800c4ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4cc:	2b13      	cmp	r3, #19
 800c4ce:	d901      	bls.n	800c4d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c4d0:	2313      	movs	r3, #19
 800c4d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe ff06 	bl	800b2fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f2:	3318      	adds	r3, #24
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fe ff01 	bl	800b2fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c502:	f1c3 0214 	rsb	r2, r3, #20
 800c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c508:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c50e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c512:	2200      	movs	r2, #0
 800c514:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	2200      	movs	r2, #0
 800c51a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51e:	2200      	movs	r2, #0
 800c520:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c526:	2200      	movs	r2, #0
 800c528:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52e:	335c      	adds	r3, #92	; 0x5c
 800c530:	224c      	movs	r2, #76	; 0x4c
 800c532:	2100      	movs	r1, #0
 800c534:	4618      	mov	r0, r3
 800c536:	f003 fbb3 	bl	800fca0 <memset>
 800c53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53c:	4a0c      	ldr	r2, [pc, #48]	; (800c570 <prvInitialiseNewTask+0x14c>)
 800c53e:	661a      	str	r2, [r3, #96]	; 0x60
 800c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c542:	4a0c      	ldr	r2, [pc, #48]	; (800c574 <prvInitialiseNewTask+0x150>)
 800c544:	665a      	str	r2, [r3, #100]	; 0x64
 800c546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c548:	4a0b      	ldr	r2, [pc, #44]	; (800c578 <prvInitialiseNewTask+0x154>)
 800c54a:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c54c:	683a      	ldr	r2, [r7, #0]
 800c54e:	68f9      	ldr	r1, [r7, #12]
 800c550:	69b8      	ldr	r0, [r7, #24]
 800c552:	f001 fba3 	bl	800dc9c <pxPortInitialiseStack>
 800c556:	4602      	mov	r2, r0
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d002      	beq.n	800c568 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c566:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c568:	bf00      	nop
 800c56a:	3720      	adds	r7, #32
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	20008604 	.word	0x20008604
 800c574:	2000866c 	.word	0x2000866c
 800c578:	200086d4 	.word	0x200086d4

0800c57c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c584:	f001 fcb6 	bl	800def4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c588:	4b2c      	ldr	r3, [pc, #176]	; (800c63c <prvAddNewTaskToReadyList+0xc0>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	3301      	adds	r3, #1
 800c58e:	4a2b      	ldr	r2, [pc, #172]	; (800c63c <prvAddNewTaskToReadyList+0xc0>)
 800c590:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c592:	4b2b      	ldr	r3, [pc, #172]	; (800c640 <prvAddNewTaskToReadyList+0xc4>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d109      	bne.n	800c5ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c59a:	4a29      	ldr	r2, [pc, #164]	; (800c640 <prvAddNewTaskToReadyList+0xc4>)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c5a0:	4b26      	ldr	r3, [pc, #152]	; (800c63c <prvAddNewTaskToReadyList+0xc0>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d110      	bne.n	800c5ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c5a8:	f000 fc5a 	bl	800ce60 <prvInitialiseTaskLists>
 800c5ac:	e00d      	b.n	800c5ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c5ae:	4b25      	ldr	r3, [pc, #148]	; (800c644 <prvAddNewTaskToReadyList+0xc8>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d109      	bne.n	800c5ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c5b6:	4b22      	ldr	r3, [pc, #136]	; (800c640 <prvAddNewTaskToReadyList+0xc4>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d802      	bhi.n	800c5ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c5c4:	4a1e      	ldr	r2, [pc, #120]	; (800c640 <prvAddNewTaskToReadyList+0xc4>)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c5ca:	4b1f      	ldr	r3, [pc, #124]	; (800c648 <prvAddNewTaskToReadyList+0xcc>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	4a1d      	ldr	r2, [pc, #116]	; (800c648 <prvAddNewTaskToReadyList+0xcc>)
 800c5d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c5d4:	4b1c      	ldr	r3, [pc, #112]	; (800c648 <prvAddNewTaskToReadyList+0xcc>)
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	409a      	lsls	r2, r3
 800c5e4:	4b19      	ldr	r3, [pc, #100]	; (800c64c <prvAddNewTaskToReadyList+0xd0>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	4a18      	ldr	r2, [pc, #96]	; (800c64c <prvAddNewTaskToReadyList+0xd0>)
 800c5ec:	6013      	str	r3, [r2, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4413      	add	r3, r2
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	4a15      	ldr	r2, [pc, #84]	; (800c650 <prvAddNewTaskToReadyList+0xd4>)
 800c5fc:	441a      	add	r2, r3
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	3304      	adds	r3, #4
 800c602:	4619      	mov	r1, r3
 800c604:	4610      	mov	r0, r2
 800c606:	f7fe fe86 	bl	800b316 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c60a:	f001 fca3 	bl	800df54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c60e:	4b0d      	ldr	r3, [pc, #52]	; (800c644 <prvAddNewTaskToReadyList+0xc8>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00e      	beq.n	800c634 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c616:	4b0a      	ldr	r3, [pc, #40]	; (800c640 <prvAddNewTaskToReadyList+0xc4>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c620:	429a      	cmp	r2, r3
 800c622:	d207      	bcs.n	800c634 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c624:	4b0b      	ldr	r3, [pc, #44]	; (800c654 <prvAddNewTaskToReadyList+0xd8>)
 800c626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c634:	bf00      	nop
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	20002bfc 	.word	0x20002bfc
 800c640:	200029f4 	.word	0x200029f4
 800c644:	20002c08 	.word	0x20002c08
 800c648:	20002c18 	.word	0x20002c18
 800c64c:	20002c04 	.word	0x20002c04
 800c650:	200029f8 	.word	0x200029f8
 800c654:	e000ed04 	.word	0xe000ed04

0800c658 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c660:	2300      	movs	r3, #0
 800c662:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d017      	beq.n	800c69a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c66a:	4b13      	ldr	r3, [pc, #76]	; (800c6b8 <vTaskDelay+0x60>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00a      	beq.n	800c688 <vTaskDelay+0x30>
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	60bb      	str	r3, [r7, #8]
}
 800c684:	bf00      	nop
 800c686:	e7fe      	b.n	800c686 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c688:	f000 f88c 	bl	800c7a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c68c:	2100      	movs	r1, #0
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fed6 	bl	800d440 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c694:	f000 f894 	bl	800c7c0 <xTaskResumeAll>
 800c698:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d107      	bne.n	800c6b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c6a0:	4b06      	ldr	r3, [pc, #24]	; (800c6bc <vTaskDelay+0x64>)
 800c6a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a6:	601a      	str	r2, [r3, #0]
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6b0:	bf00      	nop
 800c6b2:	3710      	adds	r7, #16
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	20002c24 	.word	0x20002c24
 800c6bc:	e000ed04 	.word	0xe000ed04

0800c6c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b08a      	sub	sp, #40	; 0x28
 800c6c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c6ce:	463a      	mov	r2, r7
 800c6d0:	1d39      	adds	r1, r7, #4
 800c6d2:	f107 0308 	add.w	r3, r7, #8
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7f6 f9ce 	bl	8002a78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	9202      	str	r2, [sp, #8]
 800c6e4:	9301      	str	r3, [sp, #4]
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	9300      	str	r3, [sp, #0]
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	460a      	mov	r2, r1
 800c6ee:	4925      	ldr	r1, [pc, #148]	; (800c784 <vTaskStartScheduler+0xc4>)
 800c6f0:	4825      	ldr	r0, [pc, #148]	; (800c788 <vTaskStartScheduler+0xc8>)
 800c6f2:	f7ff fdf5 	bl	800c2e0 <xTaskCreateStatic>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	4a24      	ldr	r2, [pc, #144]	; (800c78c <vTaskStartScheduler+0xcc>)
 800c6fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c6fc:	4b23      	ldr	r3, [pc, #140]	; (800c78c <vTaskStartScheduler+0xcc>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c704:	2301      	movs	r3, #1
 800c706:	617b      	str	r3, [r7, #20]
 800c708:	e001      	b.n	800c70e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c70a:	2300      	movs	r3, #0
 800c70c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d102      	bne.n	800c71a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c714:	f000 fefa 	bl	800d50c <xTimerCreateTimerTask>
 800c718:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d11d      	bne.n	800c75c <vTaskStartScheduler+0x9c>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	f3bf 8f4f 	dsb	sy
 800c730:	613b      	str	r3, [r7, #16]
}
 800c732:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c734:	4b16      	ldr	r3, [pc, #88]	; (800c790 <vTaskStartScheduler+0xd0>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	335c      	adds	r3, #92	; 0x5c
 800c73a:	4a16      	ldr	r2, [pc, #88]	; (800c794 <vTaskStartScheduler+0xd4>)
 800c73c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c73e:	4b16      	ldr	r3, [pc, #88]	; (800c798 <vTaskStartScheduler+0xd8>)
 800c740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c744:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c746:	4b15      	ldr	r3, [pc, #84]	; (800c79c <vTaskStartScheduler+0xdc>)
 800c748:	2201      	movs	r2, #1
 800c74a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c74c:	4b14      	ldr	r3, [pc, #80]	; (800c7a0 <vTaskStartScheduler+0xe0>)
 800c74e:	2200      	movs	r2, #0
 800c750:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c752:	f7f6 f977 	bl	8002a44 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c756:	f001 fb2b 	bl	800ddb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c75a:	e00e      	b.n	800c77a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c762:	d10a      	bne.n	800c77a <vTaskStartScheduler+0xba>
	__asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	60fb      	str	r3, [r7, #12]
}
 800c776:	bf00      	nop
 800c778:	e7fe      	b.n	800c778 <vTaskStartScheduler+0xb8>
}
 800c77a:	bf00      	nop
 800c77c:	3718      	adds	r7, #24
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	08012480 	.word	0x08012480
 800c788:	0800ce2d 	.word	0x0800ce2d
 800c78c:	20002c20 	.word	0x20002c20
 800c790:	200029f4 	.word	0x200029f4
 800c794:	20000214 	.word	0x20000214
 800c798:	20002c1c 	.word	0x20002c1c
 800c79c:	20002c08 	.word	0x20002c08
 800c7a0:	20002c00 	.word	0x20002c00

0800c7a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c7a8:	4b04      	ldr	r3, [pc, #16]	; (800c7bc <vTaskSuspendAll+0x18>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	4a03      	ldr	r2, [pc, #12]	; (800c7bc <vTaskSuspendAll+0x18>)
 800c7b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c7b2:	bf00      	nop
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr
 800c7bc:	20002c24 	.word	0x20002c24

0800c7c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c7ce:	4b41      	ldr	r3, [pc, #260]	; (800c8d4 <xTaskResumeAll+0x114>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d10a      	bne.n	800c7ec <xTaskResumeAll+0x2c>
	__asm volatile
 800c7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	603b      	str	r3, [r7, #0]
}
 800c7e8:	bf00      	nop
 800c7ea:	e7fe      	b.n	800c7ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c7ec:	f001 fb82 	bl	800def4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c7f0:	4b38      	ldr	r3, [pc, #224]	; (800c8d4 <xTaskResumeAll+0x114>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	4a37      	ldr	r2, [pc, #220]	; (800c8d4 <xTaskResumeAll+0x114>)
 800c7f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7fa:	4b36      	ldr	r3, [pc, #216]	; (800c8d4 <xTaskResumeAll+0x114>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d161      	bne.n	800c8c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c802:	4b35      	ldr	r3, [pc, #212]	; (800c8d8 <xTaskResumeAll+0x118>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d05d      	beq.n	800c8c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c80a:	e02e      	b.n	800c86a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c80c:	4b33      	ldr	r3, [pc, #204]	; (800c8dc <xTaskResumeAll+0x11c>)
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	3318      	adds	r3, #24
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fe fdd9 	bl	800b3d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	3304      	adds	r3, #4
 800c822:	4618      	mov	r0, r3
 800c824:	f7fe fdd4 	bl	800b3d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82c:	2201      	movs	r2, #1
 800c82e:	409a      	lsls	r2, r3
 800c830:	4b2b      	ldr	r3, [pc, #172]	; (800c8e0 <xTaskResumeAll+0x120>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4313      	orrs	r3, r2
 800c836:	4a2a      	ldr	r2, [pc, #168]	; (800c8e0 <xTaskResumeAll+0x120>)
 800c838:	6013      	str	r3, [r2, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c83e:	4613      	mov	r3, r2
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4413      	add	r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4a27      	ldr	r2, [pc, #156]	; (800c8e4 <xTaskResumeAll+0x124>)
 800c848:	441a      	add	r2, r3
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3304      	adds	r3, #4
 800c84e:	4619      	mov	r1, r3
 800c850:	4610      	mov	r0, r2
 800c852:	f7fe fd60 	bl	800b316 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c85a:	4b23      	ldr	r3, [pc, #140]	; (800c8e8 <xTaskResumeAll+0x128>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c860:	429a      	cmp	r2, r3
 800c862:	d302      	bcc.n	800c86a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c864:	4b21      	ldr	r3, [pc, #132]	; (800c8ec <xTaskResumeAll+0x12c>)
 800c866:	2201      	movs	r2, #1
 800c868:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c86a:	4b1c      	ldr	r3, [pc, #112]	; (800c8dc <xTaskResumeAll+0x11c>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d1cc      	bne.n	800c80c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d001      	beq.n	800c87c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c878:	f000 fb94 	bl	800cfa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c87c:	4b1c      	ldr	r3, [pc, #112]	; (800c8f0 <xTaskResumeAll+0x130>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d010      	beq.n	800c8aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c888:	f000 f846 	bl	800c918 <xTaskIncrementTick>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d002      	beq.n	800c898 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c892:	4b16      	ldr	r3, [pc, #88]	; (800c8ec <xTaskResumeAll+0x12c>)
 800c894:	2201      	movs	r2, #1
 800c896:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	3b01      	subs	r3, #1
 800c89c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1f1      	bne.n	800c888 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c8a4:	4b12      	ldr	r3, [pc, #72]	; (800c8f0 <xTaskResumeAll+0x130>)
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c8aa:	4b10      	ldr	r3, [pc, #64]	; (800c8ec <xTaskResumeAll+0x12c>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d009      	beq.n	800c8c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c8b6:	4b0f      	ldr	r3, [pc, #60]	; (800c8f4 <xTaskResumeAll+0x134>)
 800c8b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8bc:	601a      	str	r2, [r3, #0]
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8c6:	f001 fb45 	bl	800df54 <vPortExitCritical>

	return xAlreadyYielded;
 800c8ca:	68bb      	ldr	r3, [r7, #8]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	20002c24 	.word	0x20002c24
 800c8d8:	20002bfc 	.word	0x20002bfc
 800c8dc:	20002bb8 	.word	0x20002bb8
 800c8e0:	20002c04 	.word	0x20002c04
 800c8e4:	200029f8 	.word	0x200029f8
 800c8e8:	200029f4 	.word	0x200029f4
 800c8ec:	20002c10 	.word	0x20002c10
 800c8f0:	20002c0c 	.word	0x20002c0c
 800c8f4:	e000ed04 	.word	0xe000ed04

0800c8f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c8fe:	4b05      	ldr	r3, [pc, #20]	; (800c914 <xTaskGetTickCount+0x1c>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c904:	687b      	ldr	r3, [r7, #4]
}
 800c906:	4618      	mov	r0, r3
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	20002c00 	.word	0x20002c00

0800c918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c91e:	2300      	movs	r3, #0
 800c920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c922:	4b4e      	ldr	r3, [pc, #312]	; (800ca5c <xTaskIncrementTick+0x144>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	f040 808e 	bne.w	800ca48 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c92c:	4b4c      	ldr	r3, [pc, #304]	; (800ca60 <xTaskIncrementTick+0x148>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	3301      	adds	r3, #1
 800c932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c934:	4a4a      	ldr	r2, [pc, #296]	; (800ca60 <xTaskIncrementTick+0x148>)
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d120      	bne.n	800c982 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c940:	4b48      	ldr	r3, [pc, #288]	; (800ca64 <xTaskIncrementTick+0x14c>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00a      	beq.n	800c960 <xTaskIncrementTick+0x48>
	__asm volatile
 800c94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94e:	f383 8811 	msr	BASEPRI, r3
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	603b      	str	r3, [r7, #0]
}
 800c95c:	bf00      	nop
 800c95e:	e7fe      	b.n	800c95e <xTaskIncrementTick+0x46>
 800c960:	4b40      	ldr	r3, [pc, #256]	; (800ca64 <xTaskIncrementTick+0x14c>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	60fb      	str	r3, [r7, #12]
 800c966:	4b40      	ldr	r3, [pc, #256]	; (800ca68 <xTaskIncrementTick+0x150>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a3e      	ldr	r2, [pc, #248]	; (800ca64 <xTaskIncrementTick+0x14c>)
 800c96c:	6013      	str	r3, [r2, #0]
 800c96e:	4a3e      	ldr	r2, [pc, #248]	; (800ca68 <xTaskIncrementTick+0x150>)
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6013      	str	r3, [r2, #0]
 800c974:	4b3d      	ldr	r3, [pc, #244]	; (800ca6c <xTaskIncrementTick+0x154>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	3301      	adds	r3, #1
 800c97a:	4a3c      	ldr	r2, [pc, #240]	; (800ca6c <xTaskIncrementTick+0x154>)
 800c97c:	6013      	str	r3, [r2, #0]
 800c97e:	f000 fb11 	bl	800cfa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c982:	4b3b      	ldr	r3, [pc, #236]	; (800ca70 <xTaskIncrementTick+0x158>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	693a      	ldr	r2, [r7, #16]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d348      	bcc.n	800ca1e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c98c:	4b35      	ldr	r3, [pc, #212]	; (800ca64 <xTaskIncrementTick+0x14c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d104      	bne.n	800c9a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c996:	4b36      	ldr	r3, [pc, #216]	; (800ca70 <xTaskIncrementTick+0x158>)
 800c998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c99c:	601a      	str	r2, [r3, #0]
					break;
 800c99e:	e03e      	b.n	800ca1e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9a0:	4b30      	ldr	r3, [pc, #192]	; (800ca64 <xTaskIncrementTick+0x14c>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c9b0:	693a      	ldr	r2, [r7, #16]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d203      	bcs.n	800c9c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c9b8:	4a2d      	ldr	r2, [pc, #180]	; (800ca70 <xTaskIncrementTick+0x158>)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c9be:	e02e      	b.n	800ca1e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fe fd03 	bl	800b3d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d004      	beq.n	800c9dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	3318      	adds	r3, #24
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fe fcfa 	bl	800b3d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	409a      	lsls	r2, r3
 800c9e4:	4b23      	ldr	r3, [pc, #140]	; (800ca74 <xTaskIncrementTick+0x15c>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	4a22      	ldr	r2, [pc, #136]	; (800ca74 <xTaskIncrementTick+0x15c>)
 800c9ec:	6013      	str	r3, [r2, #0]
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	4413      	add	r3, r2
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	4a1f      	ldr	r2, [pc, #124]	; (800ca78 <xTaskIncrementTick+0x160>)
 800c9fc:	441a      	add	r2, r3
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	3304      	adds	r3, #4
 800ca02:	4619      	mov	r1, r3
 800ca04:	4610      	mov	r0, r2
 800ca06:	f7fe fc86 	bl	800b316 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca0e:	4b1b      	ldr	r3, [pc, #108]	; (800ca7c <xTaskIncrementTick+0x164>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d3b9      	bcc.n	800c98c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca1c:	e7b6      	b.n	800c98c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca1e:	4b17      	ldr	r3, [pc, #92]	; (800ca7c <xTaskIncrementTick+0x164>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca24:	4914      	ldr	r1, [pc, #80]	; (800ca78 <xTaskIncrementTick+0x160>)
 800ca26:	4613      	mov	r3, r2
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	4413      	add	r3, r2
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	440b      	add	r3, r1
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d901      	bls.n	800ca3a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ca36:	2301      	movs	r3, #1
 800ca38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ca3a:	4b11      	ldr	r3, [pc, #68]	; (800ca80 <xTaskIncrementTick+0x168>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d007      	beq.n	800ca52 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ca42:	2301      	movs	r3, #1
 800ca44:	617b      	str	r3, [r7, #20]
 800ca46:	e004      	b.n	800ca52 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ca48:	4b0e      	ldr	r3, [pc, #56]	; (800ca84 <xTaskIncrementTick+0x16c>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	4a0d      	ldr	r2, [pc, #52]	; (800ca84 <xTaskIncrementTick+0x16c>)
 800ca50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ca52:	697b      	ldr	r3, [r7, #20]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3718      	adds	r7, #24
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	20002c24 	.word	0x20002c24
 800ca60:	20002c00 	.word	0x20002c00
 800ca64:	20002bb0 	.word	0x20002bb0
 800ca68:	20002bb4 	.word	0x20002bb4
 800ca6c:	20002c14 	.word	0x20002c14
 800ca70:	20002c1c 	.word	0x20002c1c
 800ca74:	20002c04 	.word	0x20002c04
 800ca78:	200029f8 	.word	0x200029f8
 800ca7c:	200029f4 	.word	0x200029f4
 800ca80:	20002c10 	.word	0x20002c10
 800ca84:	20002c0c 	.word	0x20002c0c

0800ca88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b086      	sub	sp, #24
 800ca8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca8e:	4b43      	ldr	r3, [pc, #268]	; (800cb9c <vTaskSwitchContext+0x114>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d003      	beq.n	800ca9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca96:	4b42      	ldr	r3, [pc, #264]	; (800cba0 <vTaskSwitchContext+0x118>)
 800ca98:	2201      	movs	r2, #1
 800ca9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca9c:	e07a      	b.n	800cb94 <vTaskSwitchContext+0x10c>
		xYieldPending = pdFALSE;
 800ca9e:	4b40      	ldr	r3, [pc, #256]	; (800cba0 <vTaskSwitchContext+0x118>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800caa4:	f7f5 ffd5 	bl	8002a52 <getRunTimeCounterValue>
 800caa8:	4603      	mov	r3, r0
 800caaa:	4a3e      	ldr	r2, [pc, #248]	; (800cba4 <vTaskSwitchContext+0x11c>)
 800caac:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800caae:	4b3d      	ldr	r3, [pc, #244]	; (800cba4 <vTaskSwitchContext+0x11c>)
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	4b3d      	ldr	r3, [pc, #244]	; (800cba8 <vTaskSwitchContext+0x120>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d909      	bls.n	800cace <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800caba:	4b3c      	ldr	r3, [pc, #240]	; (800cbac <vTaskSwitchContext+0x124>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800cac0:	4a38      	ldr	r2, [pc, #224]	; (800cba4 <vTaskSwitchContext+0x11c>)
 800cac2:	6810      	ldr	r0, [r2, #0]
 800cac4:	4a38      	ldr	r2, [pc, #224]	; (800cba8 <vTaskSwitchContext+0x120>)
 800cac6:	6812      	ldr	r2, [r2, #0]
 800cac8:	1a82      	subs	r2, r0, r2
 800caca:	440a      	add	r2, r1
 800cacc:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800cace:	4b35      	ldr	r3, [pc, #212]	; (800cba4 <vTaskSwitchContext+0x11c>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a35      	ldr	r2, [pc, #212]	; (800cba8 <vTaskSwitchContext+0x120>)
 800cad4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cad6:	4b35      	ldr	r3, [pc, #212]	; (800cbac <vTaskSwitchContext+0x124>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	4b33      	ldr	r3, [pc, #204]	; (800cbac <vTaskSwitchContext+0x124>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d808      	bhi.n	800caf8 <vTaskSwitchContext+0x70>
 800cae6:	4b31      	ldr	r3, [pc, #196]	; (800cbac <vTaskSwitchContext+0x124>)
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	4b30      	ldr	r3, [pc, #192]	; (800cbac <vTaskSwitchContext+0x124>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	3334      	adds	r3, #52	; 0x34
 800caf0:	4619      	mov	r1, r3
 800caf2:	4610      	mov	r0, r2
 800caf4:	f7f5 ffb5 	bl	8002a62 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800caf8:	4b2c      	ldr	r3, [pc, #176]	; (800cbac <vTaskSwitchContext+0x124>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a2c      	ldr	r2, [pc, #176]	; (800cbb0 <vTaskSwitchContext+0x128>)
 800cafe:	6812      	ldr	r2, [r2, #0]
 800cb00:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb04:	4b2b      	ldr	r3, [pc, #172]	; (800cbb4 <vTaskSwitchContext+0x12c>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	fab3 f383 	clz	r3, r3
 800cb10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cb12:	7afb      	ldrb	r3, [r7, #11]
 800cb14:	f1c3 031f 	rsb	r3, r3, #31
 800cb18:	617b      	str	r3, [r7, #20]
 800cb1a:	4927      	ldr	r1, [pc, #156]	; (800cbb8 <vTaskSwitchContext+0x130>)
 800cb1c:	697a      	ldr	r2, [r7, #20]
 800cb1e:	4613      	mov	r3, r2
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	4413      	add	r3, r2
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	440b      	add	r3, r1
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d10a      	bne.n	800cb44 <vTaskSwitchContext+0xbc>
	__asm volatile
 800cb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb32:	f383 8811 	msr	BASEPRI, r3
 800cb36:	f3bf 8f6f 	isb	sy
 800cb3a:	f3bf 8f4f 	dsb	sy
 800cb3e:	607b      	str	r3, [r7, #4]
}
 800cb40:	bf00      	nop
 800cb42:	e7fe      	b.n	800cb42 <vTaskSwitchContext+0xba>
 800cb44:	697a      	ldr	r2, [r7, #20]
 800cb46:	4613      	mov	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	4413      	add	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4a1a      	ldr	r2, [pc, #104]	; (800cbb8 <vTaskSwitchContext+0x130>)
 800cb50:	4413      	add	r3, r2
 800cb52:	613b      	str	r3, [r7, #16]
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	685a      	ldr	r2, [r3, #4]
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	605a      	str	r2, [r3, #4]
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	685a      	ldr	r2, [r3, #4]
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	3308      	adds	r3, #8
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d104      	bne.n	800cb74 <vTaskSwitchContext+0xec>
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	685a      	ldr	r2, [r3, #4]
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	605a      	str	r2, [r3, #4]
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	4a0c      	ldr	r2, [pc, #48]	; (800cbac <vTaskSwitchContext+0x124>)
 800cb7c:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800cb7e:	4b0b      	ldr	r3, [pc, #44]	; (800cbac <vTaskSwitchContext+0x124>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cb86:	4a0a      	ldr	r2, [pc, #40]	; (800cbb0 <vTaskSwitchContext+0x128>)
 800cb88:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb8a:	4b08      	ldr	r3, [pc, #32]	; (800cbac <vTaskSwitchContext+0x124>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	335c      	adds	r3, #92	; 0x5c
 800cb90:	4a0a      	ldr	r2, [pc, #40]	; (800cbbc <vTaskSwitchContext+0x134>)
 800cb92:	6013      	str	r3, [r2, #0]
}
 800cb94:	bf00      	nop
 800cb96:	3718      	adds	r7, #24
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	20002c24 	.word	0x20002c24
 800cba0:	20002c10 	.word	0x20002c10
 800cba4:	20002c2c 	.word	0x20002c2c
 800cba8:	20002c28 	.word	0x20002c28
 800cbac:	200029f4 	.word	0x200029f4
 800cbb0:	20002bf8 	.word	0x20002bf8
 800cbb4:	20002c04 	.word	0x20002c04
 800cbb8:	200029f8 	.word	0x200029f8
 800cbbc:	20000214 	.word	0x20000214

0800cbc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10a      	bne.n	800cbe6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	60fb      	str	r3, [r7, #12]
}
 800cbe2:	bf00      	nop
 800cbe4:	e7fe      	b.n	800cbe4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cbe6:	4b07      	ldr	r3, [pc, #28]	; (800cc04 <vTaskPlaceOnEventList+0x44>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	3318      	adds	r3, #24
 800cbec:	4619      	mov	r1, r3
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7fe fbb5 	bl	800b35e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cbf4:	2101      	movs	r1, #1
 800cbf6:	6838      	ldr	r0, [r7, #0]
 800cbf8:	f000 fc22 	bl	800d440 <prvAddCurrentTaskToDelayedList>
}
 800cbfc:	bf00      	nop
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	200029f4 	.word	0x200029f4

0800cc08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	60b9      	str	r1, [r7, #8]
 800cc12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10a      	bne.n	800cc30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1e:	f383 8811 	msr	BASEPRI, r3
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	617b      	str	r3, [r7, #20]
}
 800cc2c:	bf00      	nop
 800cc2e:	e7fe      	b.n	800cc2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc30:	4b0a      	ldr	r3, [pc, #40]	; (800cc5c <vTaskPlaceOnEventListRestricted+0x54>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	3318      	adds	r3, #24
 800cc36:	4619      	mov	r1, r3
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f7fe fb6c 	bl	800b316 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d002      	beq.n	800cc4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cc44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cc4a:	6879      	ldr	r1, [r7, #4]
 800cc4c:	68b8      	ldr	r0, [r7, #8]
 800cc4e:	f000 fbf7 	bl	800d440 <prvAddCurrentTaskToDelayedList>
	}
 800cc52:	bf00      	nop
 800cc54:	3718      	adds	r7, #24
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	200029f4 	.word	0x200029f4

0800cc60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10a      	bne.n	800cc8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7a:	f383 8811 	msr	BASEPRI, r3
 800cc7e:	f3bf 8f6f 	isb	sy
 800cc82:	f3bf 8f4f 	dsb	sy
 800cc86:	60fb      	str	r3, [r7, #12]
}
 800cc88:	bf00      	nop
 800cc8a:	e7fe      	b.n	800cc8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	3318      	adds	r3, #24
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fe fb9d 	bl	800b3d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc96:	4b1d      	ldr	r3, [pc, #116]	; (800cd0c <xTaskRemoveFromEventList+0xac>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d11c      	bne.n	800ccd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	3304      	adds	r3, #4
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7fe fb94 	bl	800b3d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccac:	2201      	movs	r2, #1
 800ccae:	409a      	lsls	r2, r3
 800ccb0:	4b17      	ldr	r3, [pc, #92]	; (800cd10 <xTaskRemoveFromEventList+0xb0>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	4a16      	ldr	r2, [pc, #88]	; (800cd10 <xTaskRemoveFromEventList+0xb0>)
 800ccb8:	6013      	str	r3, [r2, #0]
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	4413      	add	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4a13      	ldr	r2, [pc, #76]	; (800cd14 <xTaskRemoveFromEventList+0xb4>)
 800ccc8:	441a      	add	r2, r3
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	3304      	adds	r3, #4
 800ccce:	4619      	mov	r1, r3
 800ccd0:	4610      	mov	r0, r2
 800ccd2:	f7fe fb20 	bl	800b316 <vListInsertEnd>
 800ccd6:	e005      	b.n	800cce4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	3318      	adds	r3, #24
 800ccdc:	4619      	mov	r1, r3
 800ccde:	480e      	ldr	r0, [pc, #56]	; (800cd18 <xTaskRemoveFromEventList+0xb8>)
 800cce0:	f7fe fb19 	bl	800b316 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce8:	4b0c      	ldr	r3, [pc, #48]	; (800cd1c <xTaskRemoveFromEventList+0xbc>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d905      	bls.n	800ccfe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ccf6:	4b0a      	ldr	r3, [pc, #40]	; (800cd20 <xTaskRemoveFromEventList+0xc0>)
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	e001      	b.n	800cd02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cd02:	697b      	ldr	r3, [r7, #20]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3718      	adds	r7, #24
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	20002c24 	.word	0x20002c24
 800cd10:	20002c04 	.word	0x20002c04
 800cd14:	200029f8 	.word	0x200029f8
 800cd18:	20002bb8 	.word	0x20002bb8
 800cd1c:	200029f4 	.word	0x200029f4
 800cd20:	20002c10 	.word	0x20002c10

0800cd24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cd2c:	4b06      	ldr	r3, [pc, #24]	; (800cd48 <vTaskInternalSetTimeOutState+0x24>)
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cd34:	4b05      	ldr	r3, [pc, #20]	; (800cd4c <vTaskInternalSetTimeOutState+0x28>)
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	605a      	str	r2, [r3, #4]
}
 800cd3c:	bf00      	nop
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr
 800cd48:	20002c14 	.word	0x20002c14
 800cd4c:	20002c00 	.word	0x20002c00

0800cd50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b088      	sub	sp, #32
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10a      	bne.n	800cd76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	613b      	str	r3, [r7, #16]
}
 800cd72:	bf00      	nop
 800cd74:	e7fe      	b.n	800cd74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10a      	bne.n	800cd92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd80:	f383 8811 	msr	BASEPRI, r3
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	60fb      	str	r3, [r7, #12]
}
 800cd8e:	bf00      	nop
 800cd90:	e7fe      	b.n	800cd90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cd92:	f001 f8af 	bl	800def4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd96:	4b1d      	ldr	r3, [pc, #116]	; (800ce0c <xTaskCheckForTimeOut+0xbc>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	69ba      	ldr	r2, [r7, #24]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdae:	d102      	bne.n	800cdb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	61fb      	str	r3, [r7, #28]
 800cdb4:	e023      	b.n	800cdfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	4b15      	ldr	r3, [pc, #84]	; (800ce10 <xTaskCheckForTimeOut+0xc0>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d007      	beq.n	800cdd2 <xTaskCheckForTimeOut+0x82>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	69ba      	ldr	r2, [r7, #24]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d302      	bcc.n	800cdd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	61fb      	str	r3, [r7, #28]
 800cdd0:	e015      	b.n	800cdfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	697a      	ldr	r2, [r7, #20]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d20b      	bcs.n	800cdf4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	1ad2      	subs	r2, r2, r3
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f7ff ff9b 	bl	800cd24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	61fb      	str	r3, [r7, #28]
 800cdf2:	e004      	b.n	800cdfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cdfe:	f001 f8a9 	bl	800df54 <vPortExitCritical>

	return xReturn;
 800ce02:	69fb      	ldr	r3, [r7, #28]
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3720      	adds	r7, #32
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	20002c00 	.word	0x20002c00
 800ce10:	20002c14 	.word	0x20002c14

0800ce14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce14:	b480      	push	{r7}
 800ce16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce18:	4b03      	ldr	r3, [pc, #12]	; (800ce28 <vTaskMissedYield+0x14>)
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	601a      	str	r2, [r3, #0]
}
 800ce1e:	bf00      	nop
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr
 800ce28:	20002c10 	.word	0x20002c10

0800ce2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce34:	f000 f854 	bl	800cee0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce38:	4b07      	ldr	r3, [pc, #28]	; (800ce58 <prvIdleTask+0x2c>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d907      	bls.n	800ce50 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ce40:	4b06      	ldr	r3, [pc, #24]	; (800ce5c <prvIdleTask+0x30>)
 800ce42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce46:	601a      	str	r2, [r3, #0]
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ce50:	f7f6 fc3a 	bl	80036c8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ce54:	e7ee      	b.n	800ce34 <prvIdleTask+0x8>
 800ce56:	bf00      	nop
 800ce58:	200029f8 	.word	0x200029f8
 800ce5c:	e000ed04 	.word	0xe000ed04

0800ce60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce66:	2300      	movs	r3, #0
 800ce68:	607b      	str	r3, [r7, #4]
 800ce6a:	e00c      	b.n	800ce86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	4613      	mov	r3, r2
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	4413      	add	r3, r2
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	4a12      	ldr	r2, [pc, #72]	; (800cec0 <prvInitialiseTaskLists+0x60>)
 800ce78:	4413      	add	r3, r2
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fe fa1e 	bl	800b2bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	3301      	adds	r3, #1
 800ce84:	607b      	str	r3, [r7, #4]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b13      	cmp	r3, #19
 800ce8a:	d9ef      	bls.n	800ce6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce8c:	480d      	ldr	r0, [pc, #52]	; (800cec4 <prvInitialiseTaskLists+0x64>)
 800ce8e:	f7fe fa15 	bl	800b2bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce92:	480d      	ldr	r0, [pc, #52]	; (800cec8 <prvInitialiseTaskLists+0x68>)
 800ce94:	f7fe fa12 	bl	800b2bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce98:	480c      	ldr	r0, [pc, #48]	; (800cecc <prvInitialiseTaskLists+0x6c>)
 800ce9a:	f7fe fa0f 	bl	800b2bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce9e:	480c      	ldr	r0, [pc, #48]	; (800ced0 <prvInitialiseTaskLists+0x70>)
 800cea0:	f7fe fa0c 	bl	800b2bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cea4:	480b      	ldr	r0, [pc, #44]	; (800ced4 <prvInitialiseTaskLists+0x74>)
 800cea6:	f7fe fa09 	bl	800b2bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ceaa:	4b0b      	ldr	r3, [pc, #44]	; (800ced8 <prvInitialiseTaskLists+0x78>)
 800ceac:	4a05      	ldr	r2, [pc, #20]	; (800cec4 <prvInitialiseTaskLists+0x64>)
 800ceae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ceb0:	4b0a      	ldr	r3, [pc, #40]	; (800cedc <prvInitialiseTaskLists+0x7c>)
 800ceb2:	4a05      	ldr	r2, [pc, #20]	; (800cec8 <prvInitialiseTaskLists+0x68>)
 800ceb4:	601a      	str	r2, [r3, #0]
}
 800ceb6:	bf00      	nop
 800ceb8:	3708      	adds	r7, #8
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	200029f8 	.word	0x200029f8
 800cec4:	20002b88 	.word	0x20002b88
 800cec8:	20002b9c 	.word	0x20002b9c
 800cecc:	20002bb8 	.word	0x20002bb8
 800ced0:	20002bcc 	.word	0x20002bcc
 800ced4:	20002be4 	.word	0x20002be4
 800ced8:	20002bb0 	.word	0x20002bb0
 800cedc:	20002bb4 	.word	0x20002bb4

0800cee0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cee6:	e019      	b.n	800cf1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cee8:	f001 f804 	bl	800def4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceec:	4b10      	ldr	r3, [pc, #64]	; (800cf30 <prvCheckTasksWaitingTermination+0x50>)
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	3304      	adds	r3, #4
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fe fa69 	bl	800b3d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cefe:	4b0d      	ldr	r3, [pc, #52]	; (800cf34 <prvCheckTasksWaitingTermination+0x54>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	3b01      	subs	r3, #1
 800cf04:	4a0b      	ldr	r2, [pc, #44]	; (800cf34 <prvCheckTasksWaitingTermination+0x54>)
 800cf06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf08:	4b0b      	ldr	r3, [pc, #44]	; (800cf38 <prvCheckTasksWaitingTermination+0x58>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	3b01      	subs	r3, #1
 800cf0e:	4a0a      	ldr	r2, [pc, #40]	; (800cf38 <prvCheckTasksWaitingTermination+0x58>)
 800cf10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf12:	f001 f81f 	bl	800df54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 f810 	bl	800cf3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf1c:	4b06      	ldr	r3, [pc, #24]	; (800cf38 <prvCheckTasksWaitingTermination+0x58>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d1e1      	bne.n	800cee8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf24:	bf00      	nop
 800cf26:	bf00      	nop
 800cf28:	3708      	adds	r7, #8
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	20002bcc 	.word	0x20002bcc
 800cf34:	20002bfc 	.word	0x20002bfc
 800cf38:	20002be0 	.word	0x20002be0

0800cf3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b084      	sub	sp, #16
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	335c      	adds	r3, #92	; 0x5c
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f002 fed9 	bl	800fd00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d108      	bne.n	800cf6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f001 f9b1 	bl	800e2c4 <vPortFree>
				vPortFree( pxTCB );
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f001 f9ae 	bl	800e2c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf68:	e018      	b.n	800cf9c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d103      	bne.n	800cf7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f001 f9a5 	bl	800e2c4 <vPortFree>
	}
 800cf7a:	e00f      	b.n	800cf9c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d00a      	beq.n	800cf9c <prvDeleteTCB+0x60>
	__asm volatile
 800cf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	60fb      	str	r3, [r7, #12]
}
 800cf98:	bf00      	nop
 800cf9a:	e7fe      	b.n	800cf9a <prvDeleteTCB+0x5e>
	}
 800cf9c:	bf00      	nop
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfaa:	4b0c      	ldr	r3, [pc, #48]	; (800cfdc <prvResetNextTaskUnblockTime+0x38>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d104      	bne.n	800cfbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cfb4:	4b0a      	ldr	r3, [pc, #40]	; (800cfe0 <prvResetNextTaskUnblockTime+0x3c>)
 800cfb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cfbc:	e008      	b.n	800cfd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfbe:	4b07      	ldr	r3, [pc, #28]	; (800cfdc <prvResetNextTaskUnblockTime+0x38>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	4a04      	ldr	r2, [pc, #16]	; (800cfe0 <prvResetNextTaskUnblockTime+0x3c>)
 800cfce:	6013      	str	r3, [r2, #0]
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr
 800cfdc:	20002bb0 	.word	0x20002bb0
 800cfe0:	20002c1c 	.word	0x20002c1c

0800cfe4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cfea:	4b0b      	ldr	r3, [pc, #44]	; (800d018 <xTaskGetSchedulerState+0x34>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d102      	bne.n	800cff8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cff2:	2301      	movs	r3, #1
 800cff4:	607b      	str	r3, [r7, #4]
 800cff6:	e008      	b.n	800d00a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cff8:	4b08      	ldr	r3, [pc, #32]	; (800d01c <xTaskGetSchedulerState+0x38>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d102      	bne.n	800d006 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d000:	2302      	movs	r3, #2
 800d002:	607b      	str	r3, [r7, #4]
 800d004:	e001      	b.n	800d00a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d006:	2300      	movs	r3, #0
 800d008:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d00a:	687b      	ldr	r3, [r7, #4]
	}
 800d00c:	4618      	mov	r0, r3
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	20002c08 	.word	0x20002c08
 800d01c:	20002c24 	.word	0x20002c24

0800d020 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d02c:	2300      	movs	r3, #0
 800d02e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d05e      	beq.n	800d0f4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d03a:	4b31      	ldr	r3, [pc, #196]	; (800d100 <xTaskPriorityInherit+0xe0>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d040:	429a      	cmp	r2, r3
 800d042:	d24e      	bcs.n	800d0e2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	699b      	ldr	r3, [r3, #24]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	db06      	blt.n	800d05a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d04c:	4b2c      	ldr	r3, [pc, #176]	; (800d100 <xTaskPriorityInherit+0xe0>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d052:	f1c3 0214 	rsb	r2, r3, #20
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	6959      	ldr	r1, [r3, #20]
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d062:	4613      	mov	r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4413      	add	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	4a26      	ldr	r2, [pc, #152]	; (800d104 <xTaskPriorityInherit+0xe4>)
 800d06c:	4413      	add	r3, r2
 800d06e:	4299      	cmp	r1, r3
 800d070:	d12f      	bne.n	800d0d2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	3304      	adds	r3, #4
 800d076:	4618      	mov	r0, r3
 800d078:	f7fe f9aa 	bl	800b3d0 <uxListRemove>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d10a      	bne.n	800d098 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d086:	2201      	movs	r2, #1
 800d088:	fa02 f303 	lsl.w	r3, r2, r3
 800d08c:	43da      	mvns	r2, r3
 800d08e:	4b1e      	ldr	r3, [pc, #120]	; (800d108 <xTaskPriorityInherit+0xe8>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4013      	ands	r3, r2
 800d094:	4a1c      	ldr	r2, [pc, #112]	; (800d108 <xTaskPriorityInherit+0xe8>)
 800d096:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d098:	4b19      	ldr	r3, [pc, #100]	; (800d100 <xTaskPriorityInherit+0xe0>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	409a      	lsls	r2, r3
 800d0aa:	4b17      	ldr	r3, [pc, #92]	; (800d108 <xTaskPriorityInherit+0xe8>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	4a15      	ldr	r2, [pc, #84]	; (800d108 <xTaskPriorityInherit+0xe8>)
 800d0b2:	6013      	str	r3, [r2, #0]
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	4413      	add	r3, r2
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	4a10      	ldr	r2, [pc, #64]	; (800d104 <xTaskPriorityInherit+0xe4>)
 800d0c2:	441a      	add	r2, r3
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	4610      	mov	r0, r2
 800d0cc:	f7fe f923 	bl	800b316 <vListInsertEnd>
 800d0d0:	e004      	b.n	800d0dc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d0d2:	4b0b      	ldr	r3, [pc, #44]	; (800d100 <xTaskPriorityInherit+0xe0>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	60fb      	str	r3, [r7, #12]
 800d0e0:	e008      	b.n	800d0f4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0e6:	4b06      	ldr	r3, [pc, #24]	; (800d100 <xTaskPriorityInherit+0xe0>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d201      	bcs.n	800d0f4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
	}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	200029f4 	.word	0x200029f4
 800d104:	200029f8 	.word	0x200029f8
 800d108:	20002c04 	.word	0x20002c04

0800d10c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d118:	2300      	movs	r3, #0
 800d11a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d06e      	beq.n	800d200 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d122:	4b3a      	ldr	r3, [pc, #232]	; (800d20c <xTaskPriorityDisinherit+0x100>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	693a      	ldr	r2, [r7, #16]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d00a      	beq.n	800d142 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d130:	f383 8811 	msr	BASEPRI, r3
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	60fb      	str	r3, [r7, #12]
}
 800d13e:	bf00      	nop
 800d140:	e7fe      	b.n	800d140 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d146:	2b00      	cmp	r3, #0
 800d148:	d10a      	bne.n	800d160 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14e:	f383 8811 	msr	BASEPRI, r3
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	f3bf 8f4f 	dsb	sy
 800d15a:	60bb      	str	r3, [r7, #8]
}
 800d15c:	bf00      	nop
 800d15e:	e7fe      	b.n	800d15e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d164:	1e5a      	subs	r2, r3, #1
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d172:	429a      	cmp	r2, r3
 800d174:	d044      	beq.n	800d200 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d140      	bne.n	800d200 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	3304      	adds	r3, #4
 800d182:	4618      	mov	r0, r3
 800d184:	f7fe f924 	bl	800b3d0 <uxListRemove>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d115      	bne.n	800d1ba <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d192:	491f      	ldr	r1, [pc, #124]	; (800d210 <xTaskPriorityDisinherit+0x104>)
 800d194:	4613      	mov	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4413      	add	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	440b      	add	r3, r1
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10a      	bne.n	800d1ba <xTaskPriorityDisinherit+0xae>
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ae:	43da      	mvns	r2, r3
 800d1b0:	4b18      	ldr	r3, [pc, #96]	; (800d214 <xTaskPriorityDisinherit+0x108>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4013      	ands	r3, r2
 800d1b6:	4a17      	ldr	r2, [pc, #92]	; (800d214 <xTaskPriorityDisinherit+0x108>)
 800d1b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c6:	f1c3 0214 	rsb	r2, r3, #20
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	409a      	lsls	r2, r3
 800d1d6:	4b0f      	ldr	r3, [pc, #60]	; (800d214 <xTaskPriorityDisinherit+0x108>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	4a0d      	ldr	r2, [pc, #52]	; (800d214 <xTaskPriorityDisinherit+0x108>)
 800d1de:	6013      	str	r3, [r2, #0]
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e4:	4613      	mov	r3, r2
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	4413      	add	r3, r2
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	4a08      	ldr	r2, [pc, #32]	; (800d210 <xTaskPriorityDisinherit+0x104>)
 800d1ee:	441a      	add	r2, r3
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	3304      	adds	r3, #4
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	4610      	mov	r0, r2
 800d1f8:	f7fe f88d 	bl	800b316 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d200:	697b      	ldr	r3, [r7, #20]
	}
 800d202:	4618      	mov	r0, r3
 800d204:	3718      	adds	r7, #24
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	200029f4 	.word	0x200029f4
 800d210:	200029f8 	.word	0x200029f8
 800d214:	20002c04 	.word	0x20002c04

0800d218 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b088      	sub	sp, #32
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d226:	2301      	movs	r3, #1
 800d228:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d077      	beq.n	800d320 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d234:	2b00      	cmp	r3, #0
 800d236:	d10a      	bne.n	800d24e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23c:	f383 8811 	msr	BASEPRI, r3
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	60fb      	str	r3, [r7, #12]
}
 800d24a:	bf00      	nop
 800d24c:	e7fe      	b.n	800d24c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d252:	683a      	ldr	r2, [r7, #0]
 800d254:	429a      	cmp	r2, r3
 800d256:	d902      	bls.n	800d25e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	61fb      	str	r3, [r7, #28]
 800d25c:	e002      	b.n	800d264 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d262:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d268:	69fa      	ldr	r2, [r7, #28]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d058      	beq.n	800d320 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d272:	697a      	ldr	r2, [r7, #20]
 800d274:	429a      	cmp	r2, r3
 800d276:	d153      	bne.n	800d320 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d278:	4b2b      	ldr	r3, [pc, #172]	; (800d328 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	69ba      	ldr	r2, [r7, #24]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d10a      	bne.n	800d298 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d286:	f383 8811 	msr	BASEPRI, r3
 800d28a:	f3bf 8f6f 	isb	sy
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	60bb      	str	r3, [r7, #8]
}
 800d294:	bf00      	nop
 800d296:	e7fe      	b.n	800d296 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d29c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d29e:	69bb      	ldr	r3, [r7, #24]
 800d2a0:	69fa      	ldr	r2, [r7, #28]
 800d2a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	699b      	ldr	r3, [r3, #24]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	db04      	blt.n	800d2b6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	f1c3 0214 	rsb	r2, r3, #20
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	6959      	ldr	r1, [r3, #20]
 800d2ba:	693a      	ldr	r2, [r7, #16]
 800d2bc:	4613      	mov	r3, r2
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	4413      	add	r3, r2
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	4a19      	ldr	r2, [pc, #100]	; (800d32c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d2c6:	4413      	add	r3, r2
 800d2c8:	4299      	cmp	r1, r3
 800d2ca:	d129      	bne.n	800d320 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2cc:	69bb      	ldr	r3, [r7, #24]
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fe f87d 	bl	800b3d0 <uxListRemove>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d10a      	bne.n	800d2f2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2e6:	43da      	mvns	r2, r3
 800d2e8:	4b11      	ldr	r3, [pc, #68]	; (800d330 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4013      	ands	r3, r2
 800d2ee:	4a10      	ldr	r2, [pc, #64]	; (800d330 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d2f0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	409a      	lsls	r2, r3
 800d2fa:	4b0d      	ldr	r3, [pc, #52]	; (800d330 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4313      	orrs	r3, r2
 800d300:	4a0b      	ldr	r2, [pc, #44]	; (800d330 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d302:	6013      	str	r3, [r2, #0]
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d308:	4613      	mov	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	4413      	add	r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4a06      	ldr	r2, [pc, #24]	; (800d32c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d312:	441a      	add	r2, r3
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	3304      	adds	r3, #4
 800d318:	4619      	mov	r1, r3
 800d31a:	4610      	mov	r0, r2
 800d31c:	f7fd fffb 	bl	800b316 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d320:	bf00      	nop
 800d322:	3720      	adds	r7, #32
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	200029f4 	.word	0x200029f4
 800d32c:	200029f8 	.word	0x200029f8
 800d330:	20002c04 	.word	0x20002c04

0800d334 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d334:	b480      	push	{r7}
 800d336:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d338:	4b07      	ldr	r3, [pc, #28]	; (800d358 <pvTaskIncrementMutexHeldCount+0x24>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d004      	beq.n	800d34a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d340:	4b05      	ldr	r3, [pc, #20]	; (800d358 <pvTaskIncrementMutexHeldCount+0x24>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d346:	3201      	adds	r2, #1
 800d348:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d34a:	4b03      	ldr	r3, [pc, #12]	; (800d358 <pvTaskIncrementMutexHeldCount+0x24>)
 800d34c:	681b      	ldr	r3, [r3, #0]
	}
 800d34e:	4618      	mov	r0, r3
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr
 800d358:	200029f4 	.word	0x200029f4

0800d35c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d366:	f000 fdc5 	bl	800def4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d36a:	4b20      	ldr	r3, [pc, #128]	; (800d3ec <ulTaskNotifyTake+0x90>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d372:	2b00      	cmp	r3, #0
 800d374:	d113      	bne.n	800d39e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d376:	4b1d      	ldr	r3, [pc, #116]	; (800d3ec <ulTaskNotifyTake+0x90>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00b      	beq.n	800d39e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d386:	2101      	movs	r1, #1
 800d388:	6838      	ldr	r0, [r7, #0]
 800d38a:	f000 f859 	bl	800d440 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d38e:	4b18      	ldr	r3, [pc, #96]	; (800d3f0 <ulTaskNotifyTake+0x94>)
 800d390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d394:	601a      	str	r2, [r3, #0]
 800d396:	f3bf 8f4f 	dsb	sy
 800d39a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d39e:	f000 fdd9 	bl	800df54 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d3a2:	f000 fda7 	bl	800def4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d3a6:	4b11      	ldr	r3, [pc, #68]	; (800d3ec <ulTaskNotifyTake+0x90>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d3ae:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00e      	beq.n	800d3d4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d005      	beq.n	800d3c8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d3bc:	4b0b      	ldr	r3, [pc, #44]	; (800d3ec <ulTaskNotifyTake+0x90>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800d3c6:	e005      	b.n	800d3d4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d3c8:	4b08      	ldr	r3, [pc, #32]	; (800d3ec <ulTaskNotifyTake+0x90>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	68fa      	ldr	r2, [r7, #12]
 800d3ce:	3a01      	subs	r2, #1
 800d3d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d3d4:	4b05      	ldr	r3, [pc, #20]	; (800d3ec <ulTaskNotifyTake+0x90>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 800d3de:	f000 fdb9 	bl	800df54 <vPortExitCritical>

		return ulReturn;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
	}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3710      	adds	r7, #16
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	200029f4 	.word	0x200029f4
 800d3f0:	e000ed04 	.word	0xe000ed04

0800d3f4 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d102      	bne.n	800d40a <ulTaskNotifyValueClear+0x16>
 800d404:	4b0d      	ldr	r3, [pc, #52]	; (800d43c <ulTaskNotifyValueClear+0x48>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	e000      	b.n	800d40c <ulTaskNotifyValueClear+0x18>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 800d40e:	f000 fd71 	bl	800def4 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d412:	4b0a      	ldr	r3, [pc, #40]	; (800d43c <ulTaskNotifyValueClear+0x48>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d41a:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	43db      	mvns	r3, r3
 800d426:	401a      	ands	r2, r3
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		}
		taskEXIT_CRITICAL();
 800d42e:	f000 fd91 	bl	800df54 <vPortExitCritical>

		return ulReturn;
 800d432:	68bb      	ldr	r3, [r7, #8]
	}
 800d434:	4618      	mov	r0, r3
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	200029f4 	.word	0x200029f4

0800d440 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d44a:	4b29      	ldr	r3, [pc, #164]	; (800d4f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d450:	4b28      	ldr	r3, [pc, #160]	; (800d4f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	3304      	adds	r3, #4
 800d456:	4618      	mov	r0, r3
 800d458:	f7fd ffba 	bl	800b3d0 <uxListRemove>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10b      	bne.n	800d47a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d462:	4b24      	ldr	r3, [pc, #144]	; (800d4f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d468:	2201      	movs	r2, #1
 800d46a:	fa02 f303 	lsl.w	r3, r2, r3
 800d46e:	43da      	mvns	r2, r3
 800d470:	4b21      	ldr	r3, [pc, #132]	; (800d4f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4013      	ands	r3, r2
 800d476:	4a20      	ldr	r2, [pc, #128]	; (800d4f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d478:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d480:	d10a      	bne.n	800d498 <prvAddCurrentTaskToDelayedList+0x58>
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d007      	beq.n	800d498 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d488:	4b1a      	ldr	r3, [pc, #104]	; (800d4f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	3304      	adds	r3, #4
 800d48e:	4619      	mov	r1, r3
 800d490:	481a      	ldr	r0, [pc, #104]	; (800d4fc <prvAddCurrentTaskToDelayedList+0xbc>)
 800d492:	f7fd ff40 	bl	800b316 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d496:	e026      	b.n	800d4e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4413      	add	r3, r2
 800d49e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d4a0:	4b14      	ldr	r3, [pc, #80]	; (800d4f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	68ba      	ldr	r2, [r7, #8]
 800d4a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d4a8:	68ba      	ldr	r2, [r7, #8]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d209      	bcs.n	800d4c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4b0:	4b13      	ldr	r3, [pc, #76]	; (800d500 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	4b0f      	ldr	r3, [pc, #60]	; (800d4f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	3304      	adds	r3, #4
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	4610      	mov	r0, r2
 800d4be:	f7fd ff4e 	bl	800b35e <vListInsert>
}
 800d4c2:	e010      	b.n	800d4e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4c4:	4b0f      	ldr	r3, [pc, #60]	; (800d504 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	4b0a      	ldr	r3, [pc, #40]	; (800d4f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	f7fd ff44 	bl	800b35e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d4d6:	4b0c      	ldr	r3, [pc, #48]	; (800d508 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	68ba      	ldr	r2, [r7, #8]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d202      	bcs.n	800d4e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d4e0:	4a09      	ldr	r2, [pc, #36]	; (800d508 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	6013      	str	r3, [r2, #0]
}
 800d4e6:	bf00      	nop
 800d4e8:	3710      	adds	r7, #16
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	20002c00 	.word	0x20002c00
 800d4f4:	200029f4 	.word	0x200029f4
 800d4f8:	20002c04 	.word	0x20002c04
 800d4fc:	20002be4 	.word	0x20002be4
 800d500:	20002bb4 	.word	0x20002bb4
 800d504:	20002bb0 	.word	0x20002bb0
 800d508:	20002c1c 	.word	0x20002c1c

0800d50c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08a      	sub	sp, #40	; 0x28
 800d510:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d512:	2300      	movs	r3, #0
 800d514:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d516:	f000 fb81 	bl	800dc1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d51a:	4b1c      	ldr	r3, [pc, #112]	; (800d58c <xTimerCreateTimerTask+0x80>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d021      	beq.n	800d566 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d522:	2300      	movs	r3, #0
 800d524:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d526:	2300      	movs	r3, #0
 800d528:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d52a:	1d3a      	adds	r2, r7, #4
 800d52c:	f107 0108 	add.w	r1, r7, #8
 800d530:	f107 030c 	add.w	r3, r7, #12
 800d534:	4618      	mov	r0, r3
 800d536:	f7f5 fab9 	bl	8002aac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d53a:	6879      	ldr	r1, [r7, #4]
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	9202      	str	r2, [sp, #8]
 800d542:	9301      	str	r3, [sp, #4]
 800d544:	2301      	movs	r3, #1
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	2300      	movs	r3, #0
 800d54a:	460a      	mov	r2, r1
 800d54c:	4910      	ldr	r1, [pc, #64]	; (800d590 <xTimerCreateTimerTask+0x84>)
 800d54e:	4811      	ldr	r0, [pc, #68]	; (800d594 <xTimerCreateTimerTask+0x88>)
 800d550:	f7fe fec6 	bl	800c2e0 <xTaskCreateStatic>
 800d554:	4603      	mov	r3, r0
 800d556:	4a10      	ldr	r2, [pc, #64]	; (800d598 <xTimerCreateTimerTask+0x8c>)
 800d558:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d55a:	4b0f      	ldr	r3, [pc, #60]	; (800d598 <xTimerCreateTimerTask+0x8c>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d001      	beq.n	800d566 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d562:	2301      	movs	r3, #1
 800d564:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d10a      	bne.n	800d582 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	613b      	str	r3, [r7, #16]
}
 800d57e:	bf00      	nop
 800d580:	e7fe      	b.n	800d580 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d582:	697b      	ldr	r3, [r7, #20]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3718      	adds	r7, #24
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	20002c60 	.word	0x20002c60
 800d590:	080124b0 	.word	0x080124b0
 800d594:	0800d7c5 	.word	0x0800d7c5
 800d598:	20002c64 	.word	0x20002c64

0800d59c <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b08a      	sub	sp, #40	; 0x28
 800d5a0:	af02      	add	r7, sp, #8
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	607a      	str	r2, [r7, #4]
 800d5a8:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d5aa:	232c      	movs	r3, #44	; 0x2c
 800d5ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	2b2c      	cmp	r3, #44	; 0x2c
 800d5b2:	d00a      	beq.n	800d5ca <xTimerCreateStatic+0x2e>
	__asm volatile
 800d5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b8:	f383 8811 	msr	BASEPRI, r3
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	61bb      	str	r3, [r7, #24]
}
 800d5c6:	bf00      	nop
 800d5c8:	e7fe      	b.n	800d5c8 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d5ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d10a      	bne.n	800d5e8 <xTimerCreateStatic+0x4c>
	__asm volatile
 800d5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d6:	f383 8811 	msr	BASEPRI, r3
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	617b      	str	r3, [r7, #20]
}
 800d5e4:	bf00      	nop
 800d5e6:	e7fe      	b.n	800d5e6 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ea:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00d      	beq.n	800d60e <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	2202      	movs	r2, #2
 800d5f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	9301      	str	r3, [sp, #4]
 800d5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	687a      	ldr	r2, [r7, #4]
 800d606:	68b9      	ldr	r1, [r7, #8]
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f000 f805 	bl	800d618 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d60e:	69fb      	ldr	r3, [r7, #28]
	}
 800d610:	4618      	mov	r0, r3
 800d612:	3720      	adds	r7, #32
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b086      	sub	sp, #24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	607a      	str	r2, [r7, #4]
 800d624:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d10a      	bne.n	800d642 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d630:	f383 8811 	msr	BASEPRI, r3
 800d634:	f3bf 8f6f 	isb	sy
 800d638:	f3bf 8f4f 	dsb	sy
 800d63c:	617b      	str	r3, [r7, #20]
}
 800d63e:	bf00      	nop
 800d640:	e7fe      	b.n	800d640 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d644:	2b00      	cmp	r3, #0
 800d646:	d01e      	beq.n	800d686 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d648:	f000 fae8 	bl	800dc1c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d654:	68ba      	ldr	r2, [r7, #8]
 800d656:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65a:	683a      	ldr	r2, [r7, #0]
 800d65c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d660:	6a3a      	ldr	r2, [r7, #32]
 800d662:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d666:	3304      	adds	r3, #4
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fd fe47 	bl	800b2fc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d008      	beq.n	800d686 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d67a:	f043 0304 	orr.w	r3, r3, #4
 800d67e:	b2da      	uxtb	r2, r3
 800d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d686:	bf00      	nop
 800d688:	3718      	adds	r7, #24
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
	...

0800d690 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b08a      	sub	sp, #40	; 0x28
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	607a      	str	r2, [r7, #4]
 800d69c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d10a      	bne.n	800d6be <xTimerGenericCommand+0x2e>
	__asm volatile
 800d6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ac:	f383 8811 	msr	BASEPRI, r3
 800d6b0:	f3bf 8f6f 	isb	sy
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	623b      	str	r3, [r7, #32]
}
 800d6ba:	bf00      	nop
 800d6bc:	e7fe      	b.n	800d6bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d6be:	4b1a      	ldr	r3, [pc, #104]	; (800d728 <xTimerGenericCommand+0x98>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d02a      	beq.n	800d71c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	2b05      	cmp	r3, #5
 800d6d6:	dc18      	bgt.n	800d70a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d6d8:	f7ff fc84 	bl	800cfe4 <xTaskGetSchedulerState>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	d109      	bne.n	800d6f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d6e2:	4b11      	ldr	r3, [pc, #68]	; (800d728 <xTimerGenericCommand+0x98>)
 800d6e4:	6818      	ldr	r0, [r3, #0]
 800d6e6:	f107 0110 	add.w	r1, r7, #16
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ee:	f7fd ffd1 	bl	800b694 <xQueueGenericSend>
 800d6f2:	6278      	str	r0, [r7, #36]	; 0x24
 800d6f4:	e012      	b.n	800d71c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d6f6:	4b0c      	ldr	r3, [pc, #48]	; (800d728 <xTimerGenericCommand+0x98>)
 800d6f8:	6818      	ldr	r0, [r3, #0]
 800d6fa:	f107 0110 	add.w	r1, r7, #16
 800d6fe:	2300      	movs	r3, #0
 800d700:	2200      	movs	r2, #0
 800d702:	f7fd ffc7 	bl	800b694 <xQueueGenericSend>
 800d706:	6278      	str	r0, [r7, #36]	; 0x24
 800d708:	e008      	b.n	800d71c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d70a:	4b07      	ldr	r3, [pc, #28]	; (800d728 <xTimerGenericCommand+0x98>)
 800d70c:	6818      	ldr	r0, [r3, #0]
 800d70e:	f107 0110 	add.w	r1, r7, #16
 800d712:	2300      	movs	r3, #0
 800d714:	683a      	ldr	r2, [r7, #0]
 800d716:	f7fe f8bb 	bl	800b890 <xQueueGenericSendFromISR>
 800d71a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3728      	adds	r7, #40	; 0x28
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	20002c60 	.word	0x20002c60

0800d72c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b088      	sub	sp, #32
 800d730:	af02      	add	r7, sp, #8
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d736:	4b22      	ldr	r3, [pc, #136]	; (800d7c0 <prvProcessExpiredTimer+0x94>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	3304      	adds	r3, #4
 800d744:	4618      	mov	r0, r3
 800d746:	f7fd fe43 	bl	800b3d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d750:	f003 0304 	and.w	r3, r3, #4
 800d754:	2b00      	cmp	r3, #0
 800d756:	d022      	beq.n	800d79e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	699a      	ldr	r2, [r3, #24]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	18d1      	adds	r1, r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	683a      	ldr	r2, [r7, #0]
 800d764:	6978      	ldr	r0, [r7, #20]
 800d766:	f000 f8d1 	bl	800d90c <prvInsertTimerInActiveList>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d01f      	beq.n	800d7b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d770:	2300      	movs	r3, #0
 800d772:	9300      	str	r3, [sp, #0]
 800d774:	2300      	movs	r3, #0
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	2100      	movs	r1, #0
 800d77a:	6978      	ldr	r0, [r7, #20]
 800d77c:	f7ff ff88 	bl	800d690 <xTimerGenericCommand>
 800d780:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d113      	bne.n	800d7b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78c:	f383 8811 	msr	BASEPRI, r3
 800d790:	f3bf 8f6f 	isb	sy
 800d794:	f3bf 8f4f 	dsb	sy
 800d798:	60fb      	str	r3, [r7, #12]
}
 800d79a:	bf00      	nop
 800d79c:	e7fe      	b.n	800d79c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7a4:	f023 0301 	bic.w	r3, r3, #1
 800d7a8:	b2da      	uxtb	r2, r3
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	6a1b      	ldr	r3, [r3, #32]
 800d7b4:	6978      	ldr	r0, [r7, #20]
 800d7b6:	4798      	blx	r3
}
 800d7b8:	bf00      	nop
 800d7ba:	3718      	adds	r7, #24
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	20002c58 	.word	0x20002c58

0800d7c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7cc:	f107 0308 	add.w	r3, r7, #8
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f000 f857 	bl	800d884 <prvGetNextExpireTime>
 800d7d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	4619      	mov	r1, r3
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f000 f803 	bl	800d7e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d7e2:	f000 f8d5 	bl	800d990 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7e6:	e7f1      	b.n	800d7cc <prvTimerTask+0x8>

0800d7e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d7f2:	f7fe ffd7 	bl	800c7a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7f6:	f107 0308 	add.w	r3, r7, #8
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f000 f866 	bl	800d8cc <prvSampleTimeNow>
 800d800:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d130      	bne.n	800d86a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d10a      	bne.n	800d824 <prvProcessTimerOrBlockTask+0x3c>
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	429a      	cmp	r2, r3
 800d814:	d806      	bhi.n	800d824 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d816:	f7fe ffd3 	bl	800c7c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d81a:	68f9      	ldr	r1, [r7, #12]
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f7ff ff85 	bl	800d72c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d822:	e024      	b.n	800d86e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d008      	beq.n	800d83c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d82a:	4b13      	ldr	r3, [pc, #76]	; (800d878 <prvProcessTimerOrBlockTask+0x90>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d101      	bne.n	800d838 <prvProcessTimerOrBlockTask+0x50>
 800d834:	2301      	movs	r3, #1
 800d836:	e000      	b.n	800d83a <prvProcessTimerOrBlockTask+0x52>
 800d838:	2300      	movs	r3, #0
 800d83a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d83c:	4b0f      	ldr	r3, [pc, #60]	; (800d87c <prvProcessTimerOrBlockTask+0x94>)
 800d83e:	6818      	ldr	r0, [r3, #0]
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	1ad3      	subs	r3, r2, r3
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	4619      	mov	r1, r3
 800d84a:	f7fe fd15 	bl	800c278 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d84e:	f7fe ffb7 	bl	800c7c0 <xTaskResumeAll>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d10a      	bne.n	800d86e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d858:	4b09      	ldr	r3, [pc, #36]	; (800d880 <prvProcessTimerOrBlockTask+0x98>)
 800d85a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d85e:	601a      	str	r2, [r3, #0]
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	f3bf 8f6f 	isb	sy
}
 800d868:	e001      	b.n	800d86e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d86a:	f7fe ffa9 	bl	800c7c0 <xTaskResumeAll>
}
 800d86e:	bf00      	nop
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	20002c5c 	.word	0x20002c5c
 800d87c:	20002c60 	.word	0x20002c60
 800d880:	e000ed04 	.word	0xe000ed04

0800d884 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d88c:	4b0e      	ldr	r3, [pc, #56]	; (800d8c8 <prvGetNextExpireTime+0x44>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d101      	bne.n	800d89a <prvGetNextExpireTime+0x16>
 800d896:	2201      	movs	r2, #1
 800d898:	e000      	b.n	800d89c <prvGetNextExpireTime+0x18>
 800d89a:	2200      	movs	r2, #0
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d105      	bne.n	800d8b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d8a8:	4b07      	ldr	r3, [pc, #28]	; (800d8c8 <prvGetNextExpireTime+0x44>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	68db      	ldr	r3, [r3, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	60fb      	str	r3, [r7, #12]
 800d8b2:	e001      	b.n	800d8b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3714      	adds	r7, #20
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr
 800d8c6:	bf00      	nop
 800d8c8:	20002c58 	.word	0x20002c58

0800d8cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d8d4:	f7ff f810 	bl	800c8f8 <xTaskGetTickCount>
 800d8d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d8da:	4b0b      	ldr	r3, [pc, #44]	; (800d908 <prvSampleTimeNow+0x3c>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68fa      	ldr	r2, [r7, #12]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d205      	bcs.n	800d8f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d8e4:	f000 f936 	bl	800db54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	e002      	b.n	800d8f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d8f6:	4a04      	ldr	r2, [pc, #16]	; (800d908 <prvSampleTimeNow+0x3c>)
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3710      	adds	r7, #16
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	20002c68 	.word	0x20002c68

0800d90c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
 800d918:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d91a:	2300      	movs	r3, #0
 800d91c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	68ba      	ldr	r2, [r7, #8]
 800d922:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d812      	bhi.n	800d958 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	1ad2      	subs	r2, r2, r3
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	699b      	ldr	r3, [r3, #24]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d302      	bcc.n	800d946 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d940:	2301      	movs	r3, #1
 800d942:	617b      	str	r3, [r7, #20]
 800d944:	e01b      	b.n	800d97e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d946:	4b10      	ldr	r3, [pc, #64]	; (800d988 <prvInsertTimerInActiveList+0x7c>)
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	3304      	adds	r3, #4
 800d94e:	4619      	mov	r1, r3
 800d950:	4610      	mov	r0, r2
 800d952:	f7fd fd04 	bl	800b35e <vListInsert>
 800d956:	e012      	b.n	800d97e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d206      	bcs.n	800d96e <prvInsertTimerInActiveList+0x62>
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	429a      	cmp	r2, r3
 800d966:	d302      	bcc.n	800d96e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d968:	2301      	movs	r3, #1
 800d96a:	617b      	str	r3, [r7, #20]
 800d96c:	e007      	b.n	800d97e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d96e:	4b07      	ldr	r3, [pc, #28]	; (800d98c <prvInsertTimerInActiveList+0x80>)
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	3304      	adds	r3, #4
 800d976:	4619      	mov	r1, r3
 800d978:	4610      	mov	r0, r2
 800d97a:	f7fd fcf0 	bl	800b35e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d97e:	697b      	ldr	r3, [r7, #20]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3718      	adds	r7, #24
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	20002c5c 	.word	0x20002c5c
 800d98c:	20002c58 	.word	0x20002c58

0800d990 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b08e      	sub	sp, #56	; 0x38
 800d994:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d996:	e0ca      	b.n	800db2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	da18      	bge.n	800d9d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d99e:	1d3b      	adds	r3, r7, #4
 800d9a0:	3304      	adds	r3, #4
 800d9a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10a      	bne.n	800d9c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ae:	f383 8811 	msr	BASEPRI, r3
 800d9b2:	f3bf 8f6f 	isb	sy
 800d9b6:	f3bf 8f4f 	dsb	sy
 800d9ba:	61fb      	str	r3, [r7, #28]
}
 800d9bc:	bf00      	nop
 800d9be:	e7fe      	b.n	800d9be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9c6:	6850      	ldr	r0, [r2, #4]
 800d9c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9ca:	6892      	ldr	r2, [r2, #8]
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f2c0 80ab 	blt.w	800db2e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9de:	695b      	ldr	r3, [r3, #20]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d004      	beq.n	800d9ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7fd fcf1 	bl	800b3d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d9ee:	463b      	mov	r3, r7
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7ff ff6b 	bl	800d8cc <prvSampleTimeNow>
 800d9f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2b09      	cmp	r3, #9
 800d9fc:	f200 8096 	bhi.w	800db2c <prvProcessReceivedCommands+0x19c>
 800da00:	a201      	add	r2, pc, #4	; (adr r2, 800da08 <prvProcessReceivedCommands+0x78>)
 800da02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da06:	bf00      	nop
 800da08:	0800da31 	.word	0x0800da31
 800da0c:	0800da31 	.word	0x0800da31
 800da10:	0800da31 	.word	0x0800da31
 800da14:	0800daa5 	.word	0x0800daa5
 800da18:	0800dab9 	.word	0x0800dab9
 800da1c:	0800db03 	.word	0x0800db03
 800da20:	0800da31 	.word	0x0800da31
 800da24:	0800da31 	.word	0x0800da31
 800da28:	0800daa5 	.word	0x0800daa5
 800da2c:	0800dab9 	.word	0x0800dab9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da36:	f043 0301 	orr.w	r3, r3, #1
 800da3a:	b2da      	uxtb	r2, r3
 800da3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da42:	68ba      	ldr	r2, [r7, #8]
 800da44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da46:	699b      	ldr	r3, [r3, #24]
 800da48:	18d1      	adds	r1, r2, r3
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da50:	f7ff ff5c 	bl	800d90c <prvInsertTimerInActiveList>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d069      	beq.n	800db2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5c:	6a1b      	ldr	r3, [r3, #32]
 800da5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da68:	f003 0304 	and.w	r3, r3, #4
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d05e      	beq.n	800db2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800da70:	68ba      	ldr	r2, [r7, #8]
 800da72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da74:	699b      	ldr	r3, [r3, #24]
 800da76:	441a      	add	r2, r3
 800da78:	2300      	movs	r3, #0
 800da7a:	9300      	str	r3, [sp, #0]
 800da7c:	2300      	movs	r3, #0
 800da7e:	2100      	movs	r1, #0
 800da80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da82:	f7ff fe05 	bl	800d690 <xTimerGenericCommand>
 800da86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800da88:	6a3b      	ldr	r3, [r7, #32]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d14f      	bne.n	800db2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800da8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da92:	f383 8811 	msr	BASEPRI, r3
 800da96:	f3bf 8f6f 	isb	sy
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	61bb      	str	r3, [r7, #24]
}
 800daa0:	bf00      	nop
 800daa2:	e7fe      	b.n	800daa2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800daa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800daaa:	f023 0301 	bic.w	r3, r3, #1
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dab6:	e03a      	b.n	800db2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dabe:	f043 0301 	orr.w	r3, r3, #1
 800dac2:	b2da      	uxtb	r2, r3
 800dac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800daca:	68ba      	ldr	r2, [r7, #8]
 800dacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dace:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10a      	bne.n	800daee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dadc:	f383 8811 	msr	BASEPRI, r3
 800dae0:	f3bf 8f6f 	isb	sy
 800dae4:	f3bf 8f4f 	dsb	sy
 800dae8:	617b      	str	r3, [r7, #20]
}
 800daea:	bf00      	nop
 800daec:	e7fe      	b.n	800daec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800daee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf0:	699a      	ldr	r2, [r3, #24]
 800daf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf4:	18d1      	adds	r1, r2, r3
 800daf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dafa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dafc:	f7ff ff06 	bl	800d90c <prvInsertTimerInActiveList>
					break;
 800db00:	e015      	b.n	800db2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db08:	f003 0302 	and.w	r3, r3, #2
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d103      	bne.n	800db18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800db10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db12:	f000 fbd7 	bl	800e2c4 <vPortFree>
 800db16:	e00a      	b.n	800db2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db1e:	f023 0301 	bic.w	r3, r3, #1
 800db22:	b2da      	uxtb	r2, r3
 800db24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db2a:	e000      	b.n	800db2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800db2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db2e:	4b08      	ldr	r3, [pc, #32]	; (800db50 <prvProcessReceivedCommands+0x1c0>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	1d39      	adds	r1, r7, #4
 800db34:	2200      	movs	r2, #0
 800db36:	4618      	mov	r0, r3
 800db38:	f7fd ffd2 	bl	800bae0 <xQueueReceive>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f47f af2a 	bne.w	800d998 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800db44:	bf00      	nop
 800db46:	bf00      	nop
 800db48:	3730      	adds	r7, #48	; 0x30
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	20002c60 	.word	0x20002c60

0800db54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b088      	sub	sp, #32
 800db58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db5a:	e048      	b.n	800dbee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db5c:	4b2d      	ldr	r3, [pc, #180]	; (800dc14 <prvSwitchTimerLists+0xc0>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db66:	4b2b      	ldr	r3, [pc, #172]	; (800dc14 <prvSwitchTimerLists+0xc0>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	3304      	adds	r3, #4
 800db74:	4618      	mov	r0, r3
 800db76:	f7fd fc2b 	bl	800b3d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db88:	f003 0304 	and.w	r3, r3, #4
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d02e      	beq.n	800dbee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	693a      	ldr	r2, [r7, #16]
 800db96:	4413      	add	r3, r2
 800db98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d90e      	bls.n	800dbc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	68fa      	ldr	r2, [r7, #12]
 800dbac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbae:	4b19      	ldr	r3, [pc, #100]	; (800dc14 <prvSwitchTimerLists+0xc0>)
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	3304      	adds	r3, #4
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	4610      	mov	r0, r2
 800dbba:	f7fd fbd0 	bl	800b35e <vListInsert>
 800dbbe:	e016      	b.n	800dbee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	693a      	ldr	r2, [r7, #16]
 800dbc8:	2100      	movs	r1, #0
 800dbca:	68f8      	ldr	r0, [r7, #12]
 800dbcc:	f7ff fd60 	bl	800d690 <xTimerGenericCommand>
 800dbd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d10a      	bne.n	800dbee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbdc:	f383 8811 	msr	BASEPRI, r3
 800dbe0:	f3bf 8f6f 	isb	sy
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	603b      	str	r3, [r7, #0]
}
 800dbea:	bf00      	nop
 800dbec:	e7fe      	b.n	800dbec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dbee:	4b09      	ldr	r3, [pc, #36]	; (800dc14 <prvSwitchTimerLists+0xc0>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1b1      	bne.n	800db5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dbf8:	4b06      	ldr	r3, [pc, #24]	; (800dc14 <prvSwitchTimerLists+0xc0>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dbfe:	4b06      	ldr	r3, [pc, #24]	; (800dc18 <prvSwitchTimerLists+0xc4>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4a04      	ldr	r2, [pc, #16]	; (800dc14 <prvSwitchTimerLists+0xc0>)
 800dc04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc06:	4a04      	ldr	r2, [pc, #16]	; (800dc18 <prvSwitchTimerLists+0xc4>)
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	6013      	str	r3, [r2, #0]
}
 800dc0c:	bf00      	nop
 800dc0e:	3718      	adds	r7, #24
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	20002c58 	.word	0x20002c58
 800dc18:	20002c5c 	.word	0x20002c5c

0800dc1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dc22:	f000 f967 	bl	800def4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dc26:	4b15      	ldr	r3, [pc, #84]	; (800dc7c <prvCheckForValidListAndQueue+0x60>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d120      	bne.n	800dc70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dc2e:	4814      	ldr	r0, [pc, #80]	; (800dc80 <prvCheckForValidListAndQueue+0x64>)
 800dc30:	f7fd fb44 	bl	800b2bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dc34:	4813      	ldr	r0, [pc, #76]	; (800dc84 <prvCheckForValidListAndQueue+0x68>)
 800dc36:	f7fd fb41 	bl	800b2bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dc3a:	4b13      	ldr	r3, [pc, #76]	; (800dc88 <prvCheckForValidListAndQueue+0x6c>)
 800dc3c:	4a10      	ldr	r2, [pc, #64]	; (800dc80 <prvCheckForValidListAndQueue+0x64>)
 800dc3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dc40:	4b12      	ldr	r3, [pc, #72]	; (800dc8c <prvCheckForValidListAndQueue+0x70>)
 800dc42:	4a10      	ldr	r2, [pc, #64]	; (800dc84 <prvCheckForValidListAndQueue+0x68>)
 800dc44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc46:	2300      	movs	r3, #0
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	4b11      	ldr	r3, [pc, #68]	; (800dc90 <prvCheckForValidListAndQueue+0x74>)
 800dc4c:	4a11      	ldr	r2, [pc, #68]	; (800dc94 <prvCheckForValidListAndQueue+0x78>)
 800dc4e:	2110      	movs	r1, #16
 800dc50:	2014      	movs	r0, #20
 800dc52:	f7fd fc4f 	bl	800b4f4 <xQueueGenericCreateStatic>
 800dc56:	4603      	mov	r3, r0
 800dc58:	4a08      	ldr	r2, [pc, #32]	; (800dc7c <prvCheckForValidListAndQueue+0x60>)
 800dc5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc5c:	4b07      	ldr	r3, [pc, #28]	; (800dc7c <prvCheckForValidListAndQueue+0x60>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d005      	beq.n	800dc70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc64:	4b05      	ldr	r3, [pc, #20]	; (800dc7c <prvCheckForValidListAndQueue+0x60>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	490b      	ldr	r1, [pc, #44]	; (800dc98 <prvCheckForValidListAndQueue+0x7c>)
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fe fada 	bl	800c224 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc70:	f000 f970 	bl	800df54 <vPortExitCritical>
}
 800dc74:	bf00      	nop
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	20002c60 	.word	0x20002c60
 800dc80:	20002c30 	.word	0x20002c30
 800dc84:	20002c44 	.word	0x20002c44
 800dc88:	20002c58 	.word	0x20002c58
 800dc8c:	20002c5c 	.word	0x20002c5c
 800dc90:	20002dac 	.word	0x20002dac
 800dc94:	20002c6c 	.word	0x20002c6c
 800dc98:	080124b8 	.word	0x080124b8

0800dc9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b085      	sub	sp, #20
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	3b04      	subs	r3, #4
 800dcac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dcb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	3b04      	subs	r3, #4
 800dcba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	f023 0201 	bic.w	r2, r3, #1
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	3b04      	subs	r3, #4
 800dcca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dccc:	4a0c      	ldr	r2, [pc, #48]	; (800dd00 <pxPortInitialiseStack+0x64>)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	3b14      	subs	r3, #20
 800dcd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	3b04      	subs	r3, #4
 800dce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f06f 0202 	mvn.w	r2, #2
 800dcea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	3b20      	subs	r3, #32
 800dcf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3714      	adds	r7, #20
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr
 800dd00:	0800dd05 	.word	0x0800dd05

0800dd04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd04:	b480      	push	{r7}
 800dd06:	b085      	sub	sp, #20
 800dd08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd0e:	4b12      	ldr	r3, [pc, #72]	; (800dd58 <prvTaskExitError+0x54>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd16:	d00a      	beq.n	800dd2e <prvTaskExitError+0x2a>
	__asm volatile
 800dd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1c:	f383 8811 	msr	BASEPRI, r3
 800dd20:	f3bf 8f6f 	isb	sy
 800dd24:	f3bf 8f4f 	dsb	sy
 800dd28:	60fb      	str	r3, [r7, #12]
}
 800dd2a:	bf00      	nop
 800dd2c:	e7fe      	b.n	800dd2c <prvTaskExitError+0x28>
	__asm volatile
 800dd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd32:	f383 8811 	msr	BASEPRI, r3
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	60bb      	str	r3, [r7, #8]
}
 800dd40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd42:	bf00      	nop
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d0fc      	beq.n	800dd44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd4a:	bf00      	nop
 800dd4c:	bf00      	nop
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr
 800dd58:	20000154 	.word	0x20000154
 800dd5c:	00000000 	.word	0x00000000

0800dd60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd60:	4b07      	ldr	r3, [pc, #28]	; (800dd80 <pxCurrentTCBConst2>)
 800dd62:	6819      	ldr	r1, [r3, #0]
 800dd64:	6808      	ldr	r0, [r1, #0]
 800dd66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd6a:	f380 8809 	msr	PSP, r0
 800dd6e:	f3bf 8f6f 	isb	sy
 800dd72:	f04f 0000 	mov.w	r0, #0
 800dd76:	f380 8811 	msr	BASEPRI, r0
 800dd7a:	4770      	bx	lr
 800dd7c:	f3af 8000 	nop.w

0800dd80 <pxCurrentTCBConst2>:
 800dd80:	200029f4 	.word	0x200029f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd84:	bf00      	nop
 800dd86:	bf00      	nop

0800dd88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd88:	4808      	ldr	r0, [pc, #32]	; (800ddac <prvPortStartFirstTask+0x24>)
 800dd8a:	6800      	ldr	r0, [r0, #0]
 800dd8c:	6800      	ldr	r0, [r0, #0]
 800dd8e:	f380 8808 	msr	MSP, r0
 800dd92:	f04f 0000 	mov.w	r0, #0
 800dd96:	f380 8814 	msr	CONTROL, r0
 800dd9a:	b662      	cpsie	i
 800dd9c:	b661      	cpsie	f
 800dd9e:	f3bf 8f4f 	dsb	sy
 800dda2:	f3bf 8f6f 	isb	sy
 800dda6:	df00      	svc	0
 800dda8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ddaa:	bf00      	nop
 800ddac:	e000ed08 	.word	0xe000ed08

0800ddb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b086      	sub	sp, #24
 800ddb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ddb6:	4b46      	ldr	r3, [pc, #280]	; (800ded0 <xPortStartScheduler+0x120>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a46      	ldr	r2, [pc, #280]	; (800ded4 <xPortStartScheduler+0x124>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d10a      	bne.n	800ddd6 <xPortStartScheduler+0x26>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	613b      	str	r3, [r7, #16]
}
 800ddd2:	bf00      	nop
 800ddd4:	e7fe      	b.n	800ddd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ddd6:	4b3e      	ldr	r3, [pc, #248]	; (800ded0 <xPortStartScheduler+0x120>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a3f      	ldr	r2, [pc, #252]	; (800ded8 <xPortStartScheduler+0x128>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d10a      	bne.n	800ddf6 <xPortStartScheduler+0x46>
	__asm volatile
 800dde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	60fb      	str	r3, [r7, #12]
}
 800ddf2:	bf00      	nop
 800ddf4:	e7fe      	b.n	800ddf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ddf6:	4b39      	ldr	r3, [pc, #228]	; (800dedc <xPortStartScheduler+0x12c>)
 800ddf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	22ff      	movs	r2, #255	; 0xff
 800de06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de10:	78fb      	ldrb	r3, [r7, #3]
 800de12:	b2db      	uxtb	r3, r3
 800de14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	4b31      	ldr	r3, [pc, #196]	; (800dee0 <xPortStartScheduler+0x130>)
 800de1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de1e:	4b31      	ldr	r3, [pc, #196]	; (800dee4 <xPortStartScheduler+0x134>)
 800de20:	2207      	movs	r2, #7
 800de22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de24:	e009      	b.n	800de3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800de26:	4b2f      	ldr	r3, [pc, #188]	; (800dee4 <xPortStartScheduler+0x134>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	3b01      	subs	r3, #1
 800de2c:	4a2d      	ldr	r2, [pc, #180]	; (800dee4 <xPortStartScheduler+0x134>)
 800de2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de30:	78fb      	ldrb	r3, [r7, #3]
 800de32:	b2db      	uxtb	r3, r3
 800de34:	005b      	lsls	r3, r3, #1
 800de36:	b2db      	uxtb	r3, r3
 800de38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de3a:	78fb      	ldrb	r3, [r7, #3]
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de42:	2b80      	cmp	r3, #128	; 0x80
 800de44:	d0ef      	beq.n	800de26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de46:	4b27      	ldr	r3, [pc, #156]	; (800dee4 <xPortStartScheduler+0x134>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f1c3 0307 	rsb	r3, r3, #7
 800de4e:	2b04      	cmp	r3, #4
 800de50:	d00a      	beq.n	800de68 <xPortStartScheduler+0xb8>
	__asm volatile
 800de52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	60bb      	str	r3, [r7, #8]
}
 800de64:	bf00      	nop
 800de66:	e7fe      	b.n	800de66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de68:	4b1e      	ldr	r3, [pc, #120]	; (800dee4 <xPortStartScheduler+0x134>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	021b      	lsls	r3, r3, #8
 800de6e:	4a1d      	ldr	r2, [pc, #116]	; (800dee4 <xPortStartScheduler+0x134>)
 800de70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de72:	4b1c      	ldr	r3, [pc, #112]	; (800dee4 <xPortStartScheduler+0x134>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de7a:	4a1a      	ldr	r2, [pc, #104]	; (800dee4 <xPortStartScheduler+0x134>)
 800de7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	b2da      	uxtb	r2, r3
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de86:	4b18      	ldr	r3, [pc, #96]	; (800dee8 <xPortStartScheduler+0x138>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a17      	ldr	r2, [pc, #92]	; (800dee8 <xPortStartScheduler+0x138>)
 800de8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de92:	4b15      	ldr	r3, [pc, #84]	; (800dee8 <xPortStartScheduler+0x138>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4a14      	ldr	r2, [pc, #80]	; (800dee8 <xPortStartScheduler+0x138>)
 800de98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800de9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de9e:	f000 f8dd 	bl	800e05c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dea2:	4b12      	ldr	r3, [pc, #72]	; (800deec <xPortStartScheduler+0x13c>)
 800dea4:	2200      	movs	r2, #0
 800dea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dea8:	f000 f8f6 	bl	800e098 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800deac:	4b10      	ldr	r3, [pc, #64]	; (800def0 <xPortStartScheduler+0x140>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4a0f      	ldr	r2, [pc, #60]	; (800def0 <xPortStartScheduler+0x140>)
 800deb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800deb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800deb8:	f7ff ff66 	bl	800dd88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800debc:	f7fe fde4 	bl	800ca88 <vTaskSwitchContext>
	prvTaskExitError();
 800dec0:	f7ff ff20 	bl	800dd04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3718      	adds	r7, #24
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	e000ed00 	.word	0xe000ed00
 800ded4:	410fc271 	.word	0x410fc271
 800ded8:	410fc270 	.word	0x410fc270
 800dedc:	e000e400 	.word	0xe000e400
 800dee0:	20002dfc 	.word	0x20002dfc
 800dee4:	20002e00 	.word	0x20002e00
 800dee8:	e000ed20 	.word	0xe000ed20
 800deec:	20000154 	.word	0x20000154
 800def0:	e000ef34 	.word	0xe000ef34

0800def4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	607b      	str	r3, [r7, #4]
}
 800df0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df0e:	4b0f      	ldr	r3, [pc, #60]	; (800df4c <vPortEnterCritical+0x58>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	3301      	adds	r3, #1
 800df14:	4a0d      	ldr	r2, [pc, #52]	; (800df4c <vPortEnterCritical+0x58>)
 800df16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df18:	4b0c      	ldr	r3, [pc, #48]	; (800df4c <vPortEnterCritical+0x58>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d10f      	bne.n	800df40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df20:	4b0b      	ldr	r3, [pc, #44]	; (800df50 <vPortEnterCritical+0x5c>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	b2db      	uxtb	r3, r3
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00a      	beq.n	800df40 <vPortEnterCritical+0x4c>
	__asm volatile
 800df2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2e:	f383 8811 	msr	BASEPRI, r3
 800df32:	f3bf 8f6f 	isb	sy
 800df36:	f3bf 8f4f 	dsb	sy
 800df3a:	603b      	str	r3, [r7, #0]
}
 800df3c:	bf00      	nop
 800df3e:	e7fe      	b.n	800df3e <vPortEnterCritical+0x4a>
	}
}
 800df40:	bf00      	nop
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	20000154 	.word	0x20000154
 800df50:	e000ed04 	.word	0xe000ed04

0800df54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df5a:	4b12      	ldr	r3, [pc, #72]	; (800dfa4 <vPortExitCritical+0x50>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10a      	bne.n	800df78 <vPortExitCritical+0x24>
	__asm volatile
 800df62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	607b      	str	r3, [r7, #4]
}
 800df74:	bf00      	nop
 800df76:	e7fe      	b.n	800df76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800df78:	4b0a      	ldr	r3, [pc, #40]	; (800dfa4 <vPortExitCritical+0x50>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	3b01      	subs	r3, #1
 800df7e:	4a09      	ldr	r2, [pc, #36]	; (800dfa4 <vPortExitCritical+0x50>)
 800df80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df82:	4b08      	ldr	r3, [pc, #32]	; (800dfa4 <vPortExitCritical+0x50>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d105      	bne.n	800df96 <vPortExitCritical+0x42>
 800df8a:	2300      	movs	r3, #0
 800df8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	f383 8811 	msr	BASEPRI, r3
}
 800df94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df96:	bf00      	nop
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	20000154 	.word	0x20000154
	...

0800dfb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dfb0:	f3ef 8009 	mrs	r0, PSP
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	4b15      	ldr	r3, [pc, #84]	; (800e010 <pxCurrentTCBConst>)
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	f01e 0f10 	tst.w	lr, #16
 800dfc0:	bf08      	it	eq
 800dfc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dfc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfca:	6010      	str	r0, [r2, #0]
 800dfcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dfd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dfd4:	f380 8811 	msr	BASEPRI, r0
 800dfd8:	f3bf 8f4f 	dsb	sy
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f7fe fd52 	bl	800ca88 <vTaskSwitchContext>
 800dfe4:	f04f 0000 	mov.w	r0, #0
 800dfe8:	f380 8811 	msr	BASEPRI, r0
 800dfec:	bc09      	pop	{r0, r3}
 800dfee:	6819      	ldr	r1, [r3, #0]
 800dff0:	6808      	ldr	r0, [r1, #0]
 800dff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff6:	f01e 0f10 	tst.w	lr, #16
 800dffa:	bf08      	it	eq
 800dffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e000:	f380 8809 	msr	PSP, r0
 800e004:	f3bf 8f6f 	isb	sy
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	f3af 8000 	nop.w

0800e010 <pxCurrentTCBConst>:
 800e010:	200029f4 	.word	0x200029f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e014:	bf00      	nop
 800e016:	bf00      	nop

0800e018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
	__asm volatile
 800e01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	607b      	str	r3, [r7, #4]
}
 800e030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e032:	f7fe fc71 	bl	800c918 <xTaskIncrementTick>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d003      	beq.n	800e044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e03c:	4b06      	ldr	r3, [pc, #24]	; (800e058 <xPortSysTickHandler+0x40>)
 800e03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e042:	601a      	str	r2, [r3, #0]
 800e044:	2300      	movs	r3, #0
 800e046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	f383 8811 	msr	BASEPRI, r3
}
 800e04e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e050:	bf00      	nop
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	e000ed04 	.word	0xe000ed04

0800e05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e05c:	b480      	push	{r7}
 800e05e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e060:	4b09      	ldr	r3, [pc, #36]	; (800e088 <vPortSetupTimerInterrupt+0x2c>)
 800e062:	2200      	movs	r2, #0
 800e064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e066:	4b09      	ldr	r3, [pc, #36]	; (800e08c <vPortSetupTimerInterrupt+0x30>)
 800e068:	2200      	movs	r2, #0
 800e06a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e06c:	4b08      	ldr	r3, [pc, #32]	; (800e090 <vPortSetupTimerInterrupt+0x34>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a08      	ldr	r2, [pc, #32]	; (800e094 <vPortSetupTimerInterrupt+0x38>)
 800e072:	3b01      	subs	r3, #1
 800e074:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e076:	4b04      	ldr	r3, [pc, #16]	; (800e088 <vPortSetupTimerInterrupt+0x2c>)
 800e078:	2207      	movs	r2, #7
 800e07a:	601a      	str	r2, [r3, #0]
}
 800e07c:	bf00      	nop
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	e000e010 	.word	0xe000e010
 800e08c:	e000e018 	.word	0xe000e018
 800e090:	200000bc 	.word	0x200000bc
 800e094:	e000e014 	.word	0xe000e014

0800e098 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e098:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e0a8 <vPortEnableVFP+0x10>
 800e09c:	6801      	ldr	r1, [r0, #0]
 800e09e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e0a2:	6001      	str	r1, [r0, #0]
 800e0a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e0a6:	bf00      	nop
 800e0a8:	e000ed88 	.word	0xe000ed88

0800e0ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b085      	sub	sp, #20
 800e0b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e0b2:	f3ef 8305 	mrs	r3, IPSR
 800e0b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2b0f      	cmp	r3, #15
 800e0bc:	d914      	bls.n	800e0e8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e0be:	4a17      	ldr	r2, [pc, #92]	; (800e11c <vPortValidateInterruptPriority+0x70>)
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e0c8:	4b15      	ldr	r3, [pc, #84]	; (800e120 <vPortValidateInterruptPriority+0x74>)
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	7afa      	ldrb	r2, [r7, #11]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d20a      	bcs.n	800e0e8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d6:	f383 8811 	msr	BASEPRI, r3
 800e0da:	f3bf 8f6f 	isb	sy
 800e0de:	f3bf 8f4f 	dsb	sy
 800e0e2:	607b      	str	r3, [r7, #4]
}
 800e0e4:	bf00      	nop
 800e0e6:	e7fe      	b.n	800e0e6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e0e8:	4b0e      	ldr	r3, [pc, #56]	; (800e124 <vPortValidateInterruptPriority+0x78>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e0f0:	4b0d      	ldr	r3, [pc, #52]	; (800e128 <vPortValidateInterruptPriority+0x7c>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d90a      	bls.n	800e10e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	603b      	str	r3, [r7, #0]
}
 800e10a:	bf00      	nop
 800e10c:	e7fe      	b.n	800e10c <vPortValidateInterruptPriority+0x60>
	}
 800e10e:	bf00      	nop
 800e110:	3714      	adds	r7, #20
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr
 800e11a:	bf00      	nop
 800e11c:	e000e3f0 	.word	0xe000e3f0
 800e120:	20002dfc 	.word	0x20002dfc
 800e124:	e000ed0c 	.word	0xe000ed0c
 800e128:	20002e00 	.word	0x20002e00

0800e12c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b08a      	sub	sp, #40	; 0x28
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e134:	2300      	movs	r3, #0
 800e136:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e138:	f7fe fb34 	bl	800c7a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e13c:	4b5b      	ldr	r3, [pc, #364]	; (800e2ac <pvPortMalloc+0x180>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d101      	bne.n	800e148 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e144:	f000 f920 	bl	800e388 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e148:	4b59      	ldr	r3, [pc, #356]	; (800e2b0 <pvPortMalloc+0x184>)
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	4013      	ands	r3, r2
 800e150:	2b00      	cmp	r3, #0
 800e152:	f040 8093 	bne.w	800e27c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d01d      	beq.n	800e198 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e15c:	2208      	movs	r2, #8
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4413      	add	r3, r2
 800e162:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f003 0307 	and.w	r3, r3, #7
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d014      	beq.n	800e198 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f023 0307 	bic.w	r3, r3, #7
 800e174:	3308      	adds	r3, #8
 800e176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f003 0307 	and.w	r3, r3, #7
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d00a      	beq.n	800e198 <pvPortMalloc+0x6c>
	__asm volatile
 800e182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e186:	f383 8811 	msr	BASEPRI, r3
 800e18a:	f3bf 8f6f 	isb	sy
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	617b      	str	r3, [r7, #20]
}
 800e194:	bf00      	nop
 800e196:	e7fe      	b.n	800e196 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d06e      	beq.n	800e27c <pvPortMalloc+0x150>
 800e19e:	4b45      	ldr	r3, [pc, #276]	; (800e2b4 <pvPortMalloc+0x188>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d869      	bhi.n	800e27c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e1a8:	4b43      	ldr	r3, [pc, #268]	; (800e2b8 <pvPortMalloc+0x18c>)
 800e1aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e1ac:	4b42      	ldr	r3, [pc, #264]	; (800e2b8 <pvPortMalloc+0x18c>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1b2:	e004      	b.n	800e1be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d903      	bls.n	800e1d0 <pvPortMalloc+0xa4>
 800e1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1f1      	bne.n	800e1b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e1d0:	4b36      	ldr	r3, [pc, #216]	; (800e2ac <pvPortMalloc+0x180>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d050      	beq.n	800e27c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e1da:	6a3b      	ldr	r3, [r7, #32]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2208      	movs	r2, #8
 800e1e0:	4413      	add	r3, r2
 800e1e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	6a3b      	ldr	r3, [r7, #32]
 800e1ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	685a      	ldr	r2, [r3, #4]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	1ad2      	subs	r2, r2, r3
 800e1f4:	2308      	movs	r3, #8
 800e1f6:	005b      	lsls	r3, r3, #1
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d91f      	bls.n	800e23c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e1fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4413      	add	r3, r2
 800e202:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e204:	69bb      	ldr	r3, [r7, #24]
 800e206:	f003 0307 	and.w	r3, r3, #7
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00a      	beq.n	800e224 <pvPortMalloc+0xf8>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	613b      	str	r3, [r7, #16]
}
 800e220:	bf00      	nop
 800e222:	e7fe      	b.n	800e222 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e226:	685a      	ldr	r2, [r3, #4]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	1ad2      	subs	r2, r2, r3
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e236:	69b8      	ldr	r0, [r7, #24]
 800e238:	f000 f908 	bl	800e44c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e23c:	4b1d      	ldr	r3, [pc, #116]	; (800e2b4 <pvPortMalloc+0x188>)
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	1ad3      	subs	r3, r2, r3
 800e246:	4a1b      	ldr	r2, [pc, #108]	; (800e2b4 <pvPortMalloc+0x188>)
 800e248:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e24a:	4b1a      	ldr	r3, [pc, #104]	; (800e2b4 <pvPortMalloc+0x188>)
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	4b1b      	ldr	r3, [pc, #108]	; (800e2bc <pvPortMalloc+0x190>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	429a      	cmp	r2, r3
 800e254:	d203      	bcs.n	800e25e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e256:	4b17      	ldr	r3, [pc, #92]	; (800e2b4 <pvPortMalloc+0x188>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4a18      	ldr	r2, [pc, #96]	; (800e2bc <pvPortMalloc+0x190>)
 800e25c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e260:	685a      	ldr	r2, [r3, #4]
 800e262:	4b13      	ldr	r3, [pc, #76]	; (800e2b0 <pvPortMalloc+0x184>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	431a      	orrs	r2, r3
 800e268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	2200      	movs	r2, #0
 800e270:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e272:	4b13      	ldr	r3, [pc, #76]	; (800e2c0 <pvPortMalloc+0x194>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	3301      	adds	r3, #1
 800e278:	4a11      	ldr	r2, [pc, #68]	; (800e2c0 <pvPortMalloc+0x194>)
 800e27a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e27c:	f7fe faa0 	bl	800c7c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	f003 0307 	and.w	r3, r3, #7
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00a      	beq.n	800e2a0 <pvPortMalloc+0x174>
	__asm volatile
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	60fb      	str	r3, [r7, #12]
}
 800e29c:	bf00      	nop
 800e29e:	e7fe      	b.n	800e29e <pvPortMalloc+0x172>
	return pvReturn;
 800e2a0:	69fb      	ldr	r3, [r7, #28]
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3728      	adds	r7, #40	; 0x28
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	20006a0c 	.word	0x20006a0c
 800e2b0:	20006a20 	.word	0x20006a20
 800e2b4:	20006a10 	.word	0x20006a10
 800e2b8:	20006a04 	.word	0x20006a04
 800e2bc:	20006a14 	.word	0x20006a14
 800e2c0:	20006a18 	.word	0x20006a18

0800e2c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b086      	sub	sp, #24
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d04d      	beq.n	800e372 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e2d6:	2308      	movs	r3, #8
 800e2d8:	425b      	negs	r3, r3
 800e2da:	697a      	ldr	r2, [r7, #20]
 800e2dc:	4413      	add	r3, r2
 800e2de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	685a      	ldr	r2, [r3, #4]
 800e2e8:	4b24      	ldr	r3, [pc, #144]	; (800e37c <vPortFree+0xb8>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4013      	ands	r3, r2
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d10a      	bne.n	800e308 <vPortFree+0x44>
	__asm volatile
 800e2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f6:	f383 8811 	msr	BASEPRI, r3
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	60fb      	str	r3, [r7, #12]
}
 800e304:	bf00      	nop
 800e306:	e7fe      	b.n	800e306 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00a      	beq.n	800e326 <vPortFree+0x62>
	__asm volatile
 800e310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	60bb      	str	r3, [r7, #8]
}
 800e322:	bf00      	nop
 800e324:	e7fe      	b.n	800e324 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	685a      	ldr	r2, [r3, #4]
 800e32a:	4b14      	ldr	r3, [pc, #80]	; (800e37c <vPortFree+0xb8>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4013      	ands	r3, r2
 800e330:	2b00      	cmp	r3, #0
 800e332:	d01e      	beq.n	800e372 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d11a      	bne.n	800e372 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	685a      	ldr	r2, [r3, #4]
 800e340:	4b0e      	ldr	r3, [pc, #56]	; (800e37c <vPortFree+0xb8>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	43db      	mvns	r3, r3
 800e346:	401a      	ands	r2, r3
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e34c:	f7fe fa2a 	bl	800c7a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	685a      	ldr	r2, [r3, #4]
 800e354:	4b0a      	ldr	r3, [pc, #40]	; (800e380 <vPortFree+0xbc>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4413      	add	r3, r2
 800e35a:	4a09      	ldr	r2, [pc, #36]	; (800e380 <vPortFree+0xbc>)
 800e35c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e35e:	6938      	ldr	r0, [r7, #16]
 800e360:	f000 f874 	bl	800e44c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e364:	4b07      	ldr	r3, [pc, #28]	; (800e384 <vPortFree+0xc0>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	3301      	adds	r3, #1
 800e36a:	4a06      	ldr	r2, [pc, #24]	; (800e384 <vPortFree+0xc0>)
 800e36c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e36e:	f7fe fa27 	bl	800c7c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e372:	bf00      	nop
 800e374:	3718      	adds	r7, #24
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	20006a20 	.word	0x20006a20
 800e380:	20006a10 	.word	0x20006a10
 800e384:	20006a1c 	.word	0x20006a1c

0800e388 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e38e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e392:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e394:	4b27      	ldr	r3, [pc, #156]	; (800e434 <prvHeapInit+0xac>)
 800e396:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f003 0307 	and.w	r3, r3, #7
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d00c      	beq.n	800e3bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	3307      	adds	r3, #7
 800e3a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f023 0307 	bic.w	r3, r3, #7
 800e3ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e3b0:	68ba      	ldr	r2, [r7, #8]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	1ad3      	subs	r3, r2, r3
 800e3b6:	4a1f      	ldr	r2, [pc, #124]	; (800e434 <prvHeapInit+0xac>)
 800e3b8:	4413      	add	r3, r2
 800e3ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e3c0:	4a1d      	ldr	r2, [pc, #116]	; (800e438 <prvHeapInit+0xb0>)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e3c6:	4b1c      	ldr	r3, [pc, #112]	; (800e438 <prvHeapInit+0xb0>)
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	68ba      	ldr	r2, [r7, #8]
 800e3d0:	4413      	add	r3, r2
 800e3d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e3d4:	2208      	movs	r2, #8
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	1a9b      	subs	r3, r3, r2
 800e3da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f023 0307 	bic.w	r3, r3, #7
 800e3e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	4a15      	ldr	r2, [pc, #84]	; (800e43c <prvHeapInit+0xb4>)
 800e3e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e3ea:	4b14      	ldr	r3, [pc, #80]	; (800e43c <prvHeapInit+0xb4>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e3f2:	4b12      	ldr	r3, [pc, #72]	; (800e43c <prvHeapInit+0xb4>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	68fa      	ldr	r2, [r7, #12]
 800e402:	1ad2      	subs	r2, r2, r3
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e408:	4b0c      	ldr	r3, [pc, #48]	; (800e43c <prvHeapInit+0xb4>)
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	4a0a      	ldr	r2, [pc, #40]	; (800e440 <prvHeapInit+0xb8>)
 800e416:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	4a09      	ldr	r2, [pc, #36]	; (800e444 <prvHeapInit+0xbc>)
 800e41e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e420:	4b09      	ldr	r3, [pc, #36]	; (800e448 <prvHeapInit+0xc0>)
 800e422:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e426:	601a      	str	r2, [r3, #0]
}
 800e428:	bf00      	nop
 800e42a:	3714      	adds	r7, #20
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr
 800e434:	20002e04 	.word	0x20002e04
 800e438:	20006a04 	.word	0x20006a04
 800e43c:	20006a0c 	.word	0x20006a0c
 800e440:	20006a14 	.word	0x20006a14
 800e444:	20006a10 	.word	0x20006a10
 800e448:	20006a20 	.word	0x20006a20

0800e44c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e44c:	b480      	push	{r7}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e454:	4b28      	ldr	r3, [pc, #160]	; (800e4f8 <prvInsertBlockIntoFreeList+0xac>)
 800e456:	60fb      	str	r3, [r7, #12]
 800e458:	e002      	b.n	800e460 <prvInsertBlockIntoFreeList+0x14>
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	60fb      	str	r3, [r7, #12]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	429a      	cmp	r2, r3
 800e468:	d8f7      	bhi.n	800e45a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	68ba      	ldr	r2, [r7, #8]
 800e474:	4413      	add	r3, r2
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	429a      	cmp	r2, r3
 800e47a:	d108      	bne.n	800e48e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	685a      	ldr	r2, [r3, #4]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	441a      	add	r2, r3
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	68ba      	ldr	r2, [r7, #8]
 800e498:	441a      	add	r2, r3
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d118      	bne.n	800e4d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	4b15      	ldr	r3, [pc, #84]	; (800e4fc <prvInsertBlockIntoFreeList+0xb0>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d00d      	beq.n	800e4ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	685a      	ldr	r2, [r3, #4]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	441a      	add	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	601a      	str	r2, [r3, #0]
 800e4c8:	e008      	b.n	800e4dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e4ca:	4b0c      	ldr	r3, [pc, #48]	; (800e4fc <prvInsertBlockIntoFreeList+0xb0>)
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	601a      	str	r2, [r3, #0]
 800e4d2:	e003      	b.n	800e4dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e4dc:	68fa      	ldr	r2, [r7, #12]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d002      	beq.n	800e4ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4ea:	bf00      	nop
 800e4ec:	3714      	adds	r7, #20
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	20006a04 	.word	0x20006a04
 800e4fc:	20006a0c 	.word	0x20006a0c

0800e500 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e504:	2200      	movs	r2, #0
 800e506:	4912      	ldr	r1, [pc, #72]	; (800e550 <MX_USB_DEVICE_Init+0x50>)
 800e508:	4812      	ldr	r0, [pc, #72]	; (800e554 <MX_USB_DEVICE_Init+0x54>)
 800e50a:	f7fb fb59 	bl	8009bc0 <USBD_Init>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d001      	beq.n	800e518 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e514:	f7f4 fe28 	bl	8003168 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e518:	490f      	ldr	r1, [pc, #60]	; (800e558 <MX_USB_DEVICE_Init+0x58>)
 800e51a:	480e      	ldr	r0, [pc, #56]	; (800e554 <MX_USB_DEVICE_Init+0x54>)
 800e51c:	f7fb fb80 	bl	8009c20 <USBD_RegisterClass>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d001      	beq.n	800e52a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e526:	f7f4 fe1f 	bl	8003168 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e52a:	490c      	ldr	r1, [pc, #48]	; (800e55c <MX_USB_DEVICE_Init+0x5c>)
 800e52c:	4809      	ldr	r0, [pc, #36]	; (800e554 <MX_USB_DEVICE_Init+0x54>)
 800e52e:	f7fb fab7 	bl	8009aa0 <USBD_CDC_RegisterInterface>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e538:	f7f4 fe16 	bl	8003168 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e53c:	4805      	ldr	r0, [pc, #20]	; (800e554 <MX_USB_DEVICE_Init+0x54>)
 800e53e:	f7fb fba5 	bl	8009c8c <USBD_Start>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d001      	beq.n	800e54c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e548:	f7f4 fe0e 	bl	8003168 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e54c:	bf00      	nop
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	2000016c 	.word	0x2000016c
 800e554:	20006a24 	.word	0x20006a24
 800e558:	200000d4 	.word	0x200000d4
 800e55c:	20000158 	.word	0x20000158

0800e560 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e564:	2200      	movs	r2, #0
 800e566:	4905      	ldr	r1, [pc, #20]	; (800e57c <CDC_Init_FS+0x1c>)
 800e568:	4805      	ldr	r0, [pc, #20]	; (800e580 <CDC_Init_FS+0x20>)
 800e56a:	f7fb fab3 	bl	8009ad4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e56e:	4905      	ldr	r1, [pc, #20]	; (800e584 <CDC_Init_FS+0x24>)
 800e570:	4803      	ldr	r0, [pc, #12]	; (800e580 <CDC_Init_FS+0x20>)
 800e572:	f7fb fad1 	bl	8009b18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e576:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e578:	4618      	mov	r0, r3
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	20007500 	.word	0x20007500
 800e580:	20006a24 	.word	0x20006a24
 800e584:	20006d00 	.word	0x20006d00

0800e588 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e588:	b480      	push	{r7}
 800e58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e58c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e58e:	4618      	mov	r0, r3
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	4603      	mov	r3, r0
 800e5a0:	6039      	str	r1, [r7, #0]
 800e5a2:	71fb      	strb	r3, [r7, #7]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e5a8:	79fb      	ldrb	r3, [r7, #7]
 800e5aa:	2b23      	cmp	r3, #35	; 0x23
 800e5ac:	d84a      	bhi.n	800e644 <CDC_Control_FS+0xac>
 800e5ae:	a201      	add	r2, pc, #4	; (adr r2, 800e5b4 <CDC_Control_FS+0x1c>)
 800e5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b4:	0800e645 	.word	0x0800e645
 800e5b8:	0800e645 	.word	0x0800e645
 800e5bc:	0800e645 	.word	0x0800e645
 800e5c0:	0800e645 	.word	0x0800e645
 800e5c4:	0800e645 	.word	0x0800e645
 800e5c8:	0800e645 	.word	0x0800e645
 800e5cc:	0800e645 	.word	0x0800e645
 800e5d0:	0800e645 	.word	0x0800e645
 800e5d4:	0800e645 	.word	0x0800e645
 800e5d8:	0800e645 	.word	0x0800e645
 800e5dc:	0800e645 	.word	0x0800e645
 800e5e0:	0800e645 	.word	0x0800e645
 800e5e4:	0800e645 	.word	0x0800e645
 800e5e8:	0800e645 	.word	0x0800e645
 800e5ec:	0800e645 	.word	0x0800e645
 800e5f0:	0800e645 	.word	0x0800e645
 800e5f4:	0800e645 	.word	0x0800e645
 800e5f8:	0800e645 	.word	0x0800e645
 800e5fc:	0800e645 	.word	0x0800e645
 800e600:	0800e645 	.word	0x0800e645
 800e604:	0800e645 	.word	0x0800e645
 800e608:	0800e645 	.word	0x0800e645
 800e60c:	0800e645 	.word	0x0800e645
 800e610:	0800e645 	.word	0x0800e645
 800e614:	0800e645 	.word	0x0800e645
 800e618:	0800e645 	.word	0x0800e645
 800e61c:	0800e645 	.word	0x0800e645
 800e620:	0800e645 	.word	0x0800e645
 800e624:	0800e645 	.word	0x0800e645
 800e628:	0800e645 	.word	0x0800e645
 800e62c:	0800e645 	.word	0x0800e645
 800e630:	0800e645 	.word	0x0800e645
 800e634:	0800e645 	.word	0x0800e645
 800e638:	0800e645 	.word	0x0800e645
 800e63c:	0800e645 	.word	0x0800e645
 800e640:	0800e645 	.word	0x0800e645
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e644:	bf00      	nop
  }

  return (USBD_OK);
 800e646:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e648:	4618      	mov	r0, r3
 800e64a:	370c      	adds	r7, #12
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr

0800e654 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e65e:	6879      	ldr	r1, [r7, #4]
 800e660:	4805      	ldr	r0, [pc, #20]	; (800e678 <CDC_Receive_FS+0x24>)
 800e662:	f7fb fa59 	bl	8009b18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e666:	4804      	ldr	r0, [pc, #16]	; (800e678 <CDC_Receive_FS+0x24>)
 800e668:	f7fb fa74 	bl	8009b54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e66c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3708      	adds	r7, #8
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	20006a24 	.word	0x20006a24

0800e67c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b087      	sub	sp, #28
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	4613      	mov	r3, r2
 800e688:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e68a:	2300      	movs	r3, #0
 800e68c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e68e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e692:	4618      	mov	r0, r3
 800e694:	371c      	adds	r7, #28
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr
	...

0800e6a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b083      	sub	sp, #12
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	6039      	str	r1, [r7, #0]
 800e6aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	2212      	movs	r2, #18
 800e6b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e6b2:	4b03      	ldr	r3, [pc, #12]	; (800e6c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	370c      	adds	r7, #12
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr
 800e6c0:	20000188 	.word	0x20000188

0800e6c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	6039      	str	r1, [r7, #0]
 800e6ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	2204      	movs	r2, #4
 800e6d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e6d6:	4b03      	ldr	r3, [pc, #12]	; (800e6e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr
 800e6e4:	2000019c 	.word	0x2000019c

0800e6e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	6039      	str	r1, [r7, #0]
 800e6f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6f4:	79fb      	ldrb	r3, [r7, #7]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d105      	bne.n	800e706 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6fa:	683a      	ldr	r2, [r7, #0]
 800e6fc:	4907      	ldr	r1, [pc, #28]	; (800e71c <USBD_FS_ProductStrDescriptor+0x34>)
 800e6fe:	4808      	ldr	r0, [pc, #32]	; (800e720 <USBD_FS_ProductStrDescriptor+0x38>)
 800e700:	f7fc fc76 	bl	800aff0 <USBD_GetString>
 800e704:	e004      	b.n	800e710 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e706:	683a      	ldr	r2, [r7, #0]
 800e708:	4904      	ldr	r1, [pc, #16]	; (800e71c <USBD_FS_ProductStrDescriptor+0x34>)
 800e70a:	4805      	ldr	r0, [pc, #20]	; (800e720 <USBD_FS_ProductStrDescriptor+0x38>)
 800e70c:	f7fc fc70 	bl	800aff0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e710:	4b02      	ldr	r3, [pc, #8]	; (800e71c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e712:	4618      	mov	r0, r3
 800e714:	3708      	adds	r7, #8
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	20007d00 	.word	0x20007d00
 800e720:	080124c0 	.word	0x080124c0

0800e724 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	4603      	mov	r3, r0
 800e72c:	6039      	str	r1, [r7, #0]
 800e72e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e730:	683a      	ldr	r2, [r7, #0]
 800e732:	4904      	ldr	r1, [pc, #16]	; (800e744 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e734:	4804      	ldr	r0, [pc, #16]	; (800e748 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e736:	f7fc fc5b 	bl	800aff0 <USBD_GetString>
  return USBD_StrDesc;
 800e73a:	4b02      	ldr	r3, [pc, #8]	; (800e744 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3708      	adds	r7, #8
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	20007d00 	.word	0x20007d00
 800e748:	080124d8 	.word	0x080124d8

0800e74c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	4603      	mov	r3, r0
 800e754:	6039      	str	r1, [r7, #0]
 800e756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	221a      	movs	r2, #26
 800e75c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e75e:	f000 f843 	bl	800e7e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e762:	4b02      	ldr	r3, [pc, #8]	; (800e76c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e764:	4618      	mov	r0, r3
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	200001a0 	.word	0x200001a0

0800e770 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	4603      	mov	r3, r0
 800e778:	6039      	str	r1, [r7, #0]
 800e77a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e77c:	79fb      	ldrb	r3, [r7, #7]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d105      	bne.n	800e78e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e782:	683a      	ldr	r2, [r7, #0]
 800e784:	4907      	ldr	r1, [pc, #28]	; (800e7a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e786:	4808      	ldr	r0, [pc, #32]	; (800e7a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e788:	f7fc fc32 	bl	800aff0 <USBD_GetString>
 800e78c:	e004      	b.n	800e798 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e78e:	683a      	ldr	r2, [r7, #0]
 800e790:	4904      	ldr	r1, [pc, #16]	; (800e7a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e792:	4805      	ldr	r0, [pc, #20]	; (800e7a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e794:	f7fc fc2c 	bl	800aff0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e798:	4b02      	ldr	r3, [pc, #8]	; (800e7a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	20007d00 	.word	0x20007d00
 800e7a8:	080124ec 	.word	0x080124ec

0800e7ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	6039      	str	r1, [r7, #0]
 800e7b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e7b8:	79fb      	ldrb	r3, [r7, #7]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d105      	bne.n	800e7ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7be:	683a      	ldr	r2, [r7, #0]
 800e7c0:	4907      	ldr	r1, [pc, #28]	; (800e7e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7c2:	4808      	ldr	r0, [pc, #32]	; (800e7e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7c4:	f7fc fc14 	bl	800aff0 <USBD_GetString>
 800e7c8:	e004      	b.n	800e7d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7ca:	683a      	ldr	r2, [r7, #0]
 800e7cc:	4904      	ldr	r1, [pc, #16]	; (800e7e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7ce:	4805      	ldr	r0, [pc, #20]	; (800e7e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7d0:	f7fc fc0e 	bl	800aff0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7d4:	4b02      	ldr	r3, [pc, #8]	; (800e7e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3708      	adds	r7, #8
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	20007d00 	.word	0x20007d00
 800e7e4:	080124f8 	.word	0x080124f8

0800e7e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e7ee:	4b0f      	ldr	r3, [pc, #60]	; (800e82c <Get_SerialNum+0x44>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e7f4:	4b0e      	ldr	r3, [pc, #56]	; (800e830 <Get_SerialNum+0x48>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e7fa:	4b0e      	ldr	r3, [pc, #56]	; (800e834 <Get_SerialNum+0x4c>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4413      	add	r3, r2
 800e806:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d009      	beq.n	800e822 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e80e:	2208      	movs	r2, #8
 800e810:	4909      	ldr	r1, [pc, #36]	; (800e838 <Get_SerialNum+0x50>)
 800e812:	68f8      	ldr	r0, [r7, #12]
 800e814:	f000 f814 	bl	800e840 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e818:	2204      	movs	r2, #4
 800e81a:	4908      	ldr	r1, [pc, #32]	; (800e83c <Get_SerialNum+0x54>)
 800e81c:	68b8      	ldr	r0, [r7, #8]
 800e81e:	f000 f80f 	bl	800e840 <IntToUnicode>
  }
}
 800e822:	bf00      	nop
 800e824:	3710      	adds	r7, #16
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	1fff7a10 	.word	0x1fff7a10
 800e830:	1fff7a14 	.word	0x1fff7a14
 800e834:	1fff7a18 	.word	0x1fff7a18
 800e838:	200001a2 	.word	0x200001a2
 800e83c:	200001b2 	.word	0x200001b2

0800e840 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e840:	b480      	push	{r7}
 800e842:	b087      	sub	sp, #28
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	4613      	mov	r3, r2
 800e84c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e852:	2300      	movs	r3, #0
 800e854:	75fb      	strb	r3, [r7, #23]
 800e856:	e027      	b.n	800e8a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	0f1b      	lsrs	r3, r3, #28
 800e85c:	2b09      	cmp	r3, #9
 800e85e:	d80b      	bhi.n	800e878 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	0f1b      	lsrs	r3, r3, #28
 800e864:	b2da      	uxtb	r2, r3
 800e866:	7dfb      	ldrb	r3, [r7, #23]
 800e868:	005b      	lsls	r3, r3, #1
 800e86a:	4619      	mov	r1, r3
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	440b      	add	r3, r1
 800e870:	3230      	adds	r2, #48	; 0x30
 800e872:	b2d2      	uxtb	r2, r2
 800e874:	701a      	strb	r2, [r3, #0]
 800e876:	e00a      	b.n	800e88e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	0f1b      	lsrs	r3, r3, #28
 800e87c:	b2da      	uxtb	r2, r3
 800e87e:	7dfb      	ldrb	r3, [r7, #23]
 800e880:	005b      	lsls	r3, r3, #1
 800e882:	4619      	mov	r1, r3
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	440b      	add	r3, r1
 800e888:	3237      	adds	r2, #55	; 0x37
 800e88a:	b2d2      	uxtb	r2, r2
 800e88c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	011b      	lsls	r3, r3, #4
 800e892:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e894:	7dfb      	ldrb	r3, [r7, #23]
 800e896:	005b      	lsls	r3, r3, #1
 800e898:	3301      	adds	r3, #1
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	4413      	add	r3, r2
 800e89e:	2200      	movs	r2, #0
 800e8a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e8a2:	7dfb      	ldrb	r3, [r7, #23]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	75fb      	strb	r3, [r7, #23]
 800e8a8:	7dfa      	ldrb	r2, [r7, #23]
 800e8aa:	79fb      	ldrb	r3, [r7, #7]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d3d3      	bcc.n	800e858 <IntToUnicode+0x18>
  }
}
 800e8b0:	bf00      	nop
 800e8b2:	bf00      	nop
 800e8b4:	371c      	adds	r7, #28
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
	...

0800e8c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b08a      	sub	sp, #40	; 0x28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8c8:	f107 0314 	add.w	r3, r7, #20
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	601a      	str	r2, [r3, #0]
 800e8d0:	605a      	str	r2, [r3, #4]
 800e8d2:	609a      	str	r2, [r3, #8]
 800e8d4:	60da      	str	r2, [r3, #12]
 800e8d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8e0:	d13a      	bne.n	800e958 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	613b      	str	r3, [r7, #16]
 800e8e6:	4b1e      	ldr	r3, [pc, #120]	; (800e960 <HAL_PCD_MspInit+0xa0>)
 800e8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ea:	4a1d      	ldr	r2, [pc, #116]	; (800e960 <HAL_PCD_MspInit+0xa0>)
 800e8ec:	f043 0301 	orr.w	r3, r3, #1
 800e8f0:	6313      	str	r3, [r2, #48]	; 0x30
 800e8f2:	4b1b      	ldr	r3, [pc, #108]	; (800e960 <HAL_PCD_MspInit+0xa0>)
 800e8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8f6:	f003 0301 	and.w	r3, r3, #1
 800e8fa:	613b      	str	r3, [r7, #16]
 800e8fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e8fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e904:	2302      	movs	r3, #2
 800e906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e908:	2300      	movs	r3, #0
 800e90a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e90c:	2303      	movs	r3, #3
 800e90e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e910:	230a      	movs	r3, #10
 800e912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e914:	f107 0314 	add.w	r3, r7, #20
 800e918:	4619      	mov	r1, r3
 800e91a:	4812      	ldr	r0, [pc, #72]	; (800e964 <HAL_PCD_MspInit+0xa4>)
 800e91c:	f7f5 fc32 	bl	8004184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e920:	4b0f      	ldr	r3, [pc, #60]	; (800e960 <HAL_PCD_MspInit+0xa0>)
 800e922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e924:	4a0e      	ldr	r2, [pc, #56]	; (800e960 <HAL_PCD_MspInit+0xa0>)
 800e926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e92a:	6353      	str	r3, [r2, #52]	; 0x34
 800e92c:	2300      	movs	r3, #0
 800e92e:	60fb      	str	r3, [r7, #12]
 800e930:	4b0b      	ldr	r3, [pc, #44]	; (800e960 <HAL_PCD_MspInit+0xa0>)
 800e932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e934:	4a0a      	ldr	r2, [pc, #40]	; (800e960 <HAL_PCD_MspInit+0xa0>)
 800e936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e93a:	6453      	str	r3, [r2, #68]	; 0x44
 800e93c:	4b08      	ldr	r3, [pc, #32]	; (800e960 <HAL_PCD_MspInit+0xa0>)
 800e93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e944:	60fb      	str	r3, [r7, #12]
 800e946:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e948:	2200      	movs	r2, #0
 800e94a:	2105      	movs	r1, #5
 800e94c:	2043      	movs	r0, #67	; 0x43
 800e94e:	f7f5 f866 	bl	8003a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e952:	2043      	movs	r0, #67	; 0x43
 800e954:	f7f5 f87f 	bl	8003a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e958:	bf00      	nop
 800e95a:	3728      	adds	r7, #40	; 0x28
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	40023800 	.word	0x40023800
 800e964:	40020000 	.word	0x40020000

0800e968 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800e97c:	4619      	mov	r1, r3
 800e97e:	4610      	mov	r0, r2
 800e980:	f7fb f9d1 	bl	8009d26 <USBD_LL_SetupStage>
}
 800e984:	bf00      	nop
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	460b      	mov	r3, r1
 800e996:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800e99e:	78fa      	ldrb	r2, [r7, #3]
 800e9a0:	6879      	ldr	r1, [r7, #4]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	00db      	lsls	r3, r3, #3
 800e9a6:	4413      	add	r3, r2
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	440b      	add	r3, r1
 800e9ac:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e9b0:	681a      	ldr	r2, [r3, #0]
 800e9b2:	78fb      	ldrb	r3, [r7, #3]
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	f7fb fa0b 	bl	8009dd0 <USBD_LL_DataOutStage>
}
 800e9ba:	bf00      	nop
 800e9bc:	3708      	adds	r7, #8
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b082      	sub	sp, #8
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800e9d4:	78fa      	ldrb	r2, [r7, #3]
 800e9d6:	6879      	ldr	r1, [r7, #4]
 800e9d8:	4613      	mov	r3, r2
 800e9da:	00db      	lsls	r3, r3, #3
 800e9dc:	4413      	add	r3, r2
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	440b      	add	r3, r1
 800e9e2:	3320      	adds	r3, #32
 800e9e4:	681a      	ldr	r2, [r3, #0]
 800e9e6:	78fb      	ldrb	r3, [r7, #3]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	f7fb faa4 	bl	8009f36 <USBD_LL_DataInStage>
}
 800e9ee:	bf00      	nop
 800e9f0:	3708      	adds	r7, #8
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}

0800e9f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9f6:	b580      	push	{r7, lr}
 800e9f8:	b082      	sub	sp, #8
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fb fbde 	bl	800a1c6 <USBD_LL_SOF>
}
 800ea0a:	bf00      	nop
 800ea0c:	3708      	adds	r7, #8
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}

0800ea12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b084      	sub	sp, #16
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	79db      	ldrb	r3, [r3, #7]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d102      	bne.n	800ea2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ea26:	2300      	movs	r3, #0
 800ea28:	73fb      	strb	r3, [r7, #15]
 800ea2a:	e008      	b.n	800ea3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	79db      	ldrb	r3, [r3, #7]
 800ea30:	2b02      	cmp	r3, #2
 800ea32:	d102      	bne.n	800ea3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ea34:	2301      	movs	r3, #1
 800ea36:	73fb      	strb	r3, [r7, #15]
 800ea38:	e001      	b.n	800ea3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ea3a:	f7f4 fb95 	bl	8003168 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ea44:	7bfa      	ldrb	r2, [r7, #15]
 800ea46:	4611      	mov	r1, r2
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7fb fb78 	bl	800a13e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fb fb20 	bl	800a09a <USBD_LL_Reset>
}
 800ea5a:	bf00      	nop
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
	...

0800ea64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fb fb73 	bl	800a15e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	687a      	ldr	r2, [r7, #4]
 800ea84:	6812      	ldr	r2, [r2, #0]
 800ea86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea8a:	f043 0301 	orr.w	r3, r3, #1
 800ea8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	7adb      	ldrb	r3, [r3, #11]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d005      	beq.n	800eaa4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea98:	4b04      	ldr	r3, [pc, #16]	; (800eaac <HAL_PCD_SuspendCallback+0x48>)
 800ea9a:	691b      	ldr	r3, [r3, #16]
 800ea9c:	4a03      	ldr	r2, [pc, #12]	; (800eaac <HAL_PCD_SuspendCallback+0x48>)
 800ea9e:	f043 0306 	orr.w	r3, r3, #6
 800eaa2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eaa4:	bf00      	nop
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	e000ed00 	.word	0xe000ed00

0800eab0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fb fb69 	bl	800a196 <USBD_LL_Resume>
}
 800eac4:	bf00      	nop
 800eac6:	3708      	adds	r7, #8
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	460b      	mov	r3, r1
 800ead6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eade:	78fa      	ldrb	r2, [r7, #3]
 800eae0:	4611      	mov	r1, r2
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fb fbc1 	bl	800a26a <USBD_LL_IsoOUTIncomplete>
}
 800eae8:	bf00      	nop
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	460b      	mov	r3, r1
 800eafa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eb02:	78fa      	ldrb	r2, [r7, #3]
 800eb04:	4611      	mov	r1, r2
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fb fb7d 	bl	800a206 <USBD_LL_IsoINIncomplete>
}
 800eb0c:	bf00      	nop
 800eb0e:	3708      	adds	r7, #8
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7fb fbd3 	bl	800a2ce <USBD_LL_DevConnected>
}
 800eb28:	bf00      	nop
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fb fbd0 	bl	800a2e4 <USBD_LL_DevDisconnected>
}
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d13c      	bne.n	800ebd6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eb5c:	4a20      	ldr	r2, [pc, #128]	; (800ebe0 <USBD_LL_Init+0x94>)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	4a1e      	ldr	r2, [pc, #120]	; (800ebe0 <USBD_LL_Init+0x94>)
 800eb68:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb6c:	4b1c      	ldr	r3, [pc, #112]	; (800ebe0 <USBD_LL_Init+0x94>)
 800eb6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eb72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800eb74:	4b1a      	ldr	r3, [pc, #104]	; (800ebe0 <USBD_LL_Init+0x94>)
 800eb76:	2204      	movs	r2, #4
 800eb78:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eb7a:	4b19      	ldr	r3, [pc, #100]	; (800ebe0 <USBD_LL_Init+0x94>)
 800eb7c:	2202      	movs	r2, #2
 800eb7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb80:	4b17      	ldr	r3, [pc, #92]	; (800ebe0 <USBD_LL_Init+0x94>)
 800eb82:	2200      	movs	r2, #0
 800eb84:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb86:	4b16      	ldr	r3, [pc, #88]	; (800ebe0 <USBD_LL_Init+0x94>)
 800eb88:	2202      	movs	r2, #2
 800eb8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eb8c:	4b14      	ldr	r3, [pc, #80]	; (800ebe0 <USBD_LL_Init+0x94>)
 800eb8e:	2200      	movs	r2, #0
 800eb90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eb92:	4b13      	ldr	r3, [pc, #76]	; (800ebe0 <USBD_LL_Init+0x94>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eb98:	4b11      	ldr	r3, [pc, #68]	; (800ebe0 <USBD_LL_Init+0x94>)
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eb9e:	4b10      	ldr	r3, [pc, #64]	; (800ebe0 <USBD_LL_Init+0x94>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eba4:	4b0e      	ldr	r3, [pc, #56]	; (800ebe0 <USBD_LL_Init+0x94>)
 800eba6:	2200      	movs	r2, #0
 800eba8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ebaa:	480d      	ldr	r0, [pc, #52]	; (800ebe0 <USBD_LL_Init+0x94>)
 800ebac:	f7f5 fc9f 	bl	80044ee <HAL_PCD_Init>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d001      	beq.n	800ebba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ebb6:	f7f4 fad7 	bl	8003168 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ebba:	2180      	movs	r1, #128	; 0x80
 800ebbc:	4808      	ldr	r0, [pc, #32]	; (800ebe0 <USBD_LL_Init+0x94>)
 800ebbe:	f7f6 feca 	bl	8005956 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ebc2:	2240      	movs	r2, #64	; 0x40
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	4806      	ldr	r0, [pc, #24]	; (800ebe0 <USBD_LL_Init+0x94>)
 800ebc8:	f7f6 fe7e 	bl	80058c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ebcc:	2280      	movs	r2, #128	; 0x80
 800ebce:	2101      	movs	r1, #1
 800ebd0:	4803      	ldr	r0, [pc, #12]	; (800ebe0 <USBD_LL_Init+0x94>)
 800ebd2:	f7f6 fe79 	bl	80058c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ebd6:	2300      	movs	r3, #0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	20007f00 	.word	0x20007f00

0800ebe4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7f5 fd86 	bl	800470c <HAL_PCD_Start>
 800ec00:	4603      	mov	r3, r0
 800ec02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec04:	7bfb      	ldrb	r3, [r7, #15]
 800ec06:	4618      	mov	r0, r3
 800ec08:	f000 f942 	bl	800ee90 <USBD_Get_USB_Status>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3710      	adds	r7, #16
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b084      	sub	sp, #16
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
 800ec22:	4608      	mov	r0, r1
 800ec24:	4611      	mov	r1, r2
 800ec26:	461a      	mov	r2, r3
 800ec28:	4603      	mov	r3, r0
 800ec2a:	70fb      	strb	r3, [r7, #3]
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	70bb      	strb	r3, [r7, #2]
 800ec30:	4613      	mov	r3, r2
 800ec32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec34:	2300      	movs	r3, #0
 800ec36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec42:	78bb      	ldrb	r3, [r7, #2]
 800ec44:	883a      	ldrh	r2, [r7, #0]
 800ec46:	78f9      	ldrb	r1, [r7, #3]
 800ec48:	f7f6 fa5a 	bl	8005100 <HAL_PCD_EP_Open>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec50:	7bfb      	ldrb	r3, [r7, #15]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f000 f91c 	bl	800ee90 <USBD_Get_USB_Status>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b084      	sub	sp, #16
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
 800ec6e:	460b      	mov	r3, r1
 800ec70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec72:	2300      	movs	r3, #0
 800ec74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec76:	2300      	movs	r3, #0
 800ec78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec80:	78fa      	ldrb	r2, [r7, #3]
 800ec82:	4611      	mov	r1, r2
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7f6 faa3 	bl	80051d0 <HAL_PCD_EP_Close>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec8e:	7bfb      	ldrb	r3, [r7, #15]
 800ec90:	4618      	mov	r0, r3
 800ec92:	f000 f8fd 	bl	800ee90 <USBD_Get_USB_Status>
 800ec96:	4603      	mov	r3, r0
 800ec98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3710      	adds	r7, #16
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	460b      	mov	r3, r1
 800ecae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecbe:	78fa      	ldrb	r2, [r7, #3]
 800ecc0:	4611      	mov	r1, r2
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7f6 fb5b 	bl	800537e <HAL_PCD_EP_SetStall>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eccc:	7bfb      	ldrb	r3, [r7, #15]
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f000 f8de 	bl	800ee90 <USBD_Get_USB_Status>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b084      	sub	sp, #16
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
 800ecea:	460b      	mov	r3, r1
 800ecec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecfc:	78fa      	ldrb	r2, [r7, #3]
 800ecfe:	4611      	mov	r1, r2
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7f6 fb9f 	bl	8005444 <HAL_PCD_EP_ClrStall>
 800ed06:	4603      	mov	r3, r0
 800ed08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed0a:	7bfb      	ldrb	r3, [r7, #15]
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f000 f8bf 	bl	800ee90 <USBD_Get_USB_Status>
 800ed12:	4603      	mov	r3, r0
 800ed14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b085      	sub	sp, #20
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	460b      	mov	r3, r1
 800ed2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	da0b      	bge.n	800ed54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed3c:	78fb      	ldrb	r3, [r7, #3]
 800ed3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed42:	68f9      	ldr	r1, [r7, #12]
 800ed44:	4613      	mov	r3, r2
 800ed46:	00db      	lsls	r3, r3, #3
 800ed48:	4413      	add	r3, r2
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	440b      	add	r3, r1
 800ed4e:	3316      	adds	r3, #22
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	e00b      	b.n	800ed6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed54:	78fb      	ldrb	r3, [r7, #3]
 800ed56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed5a:	68f9      	ldr	r1, [r7, #12]
 800ed5c:	4613      	mov	r3, r2
 800ed5e:	00db      	lsls	r3, r3, #3
 800ed60:	4413      	add	r3, r2
 800ed62:	009b      	lsls	r3, r3, #2
 800ed64:	440b      	add	r3, r1
 800ed66:	f203 2356 	addw	r3, r3, #598	; 0x256
 800ed6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3714      	adds	r7, #20
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	460b      	mov	r3, r1
 800ed82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed92:	78fa      	ldrb	r2, [r7, #3]
 800ed94:	4611      	mov	r1, r2
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7f6 f98e 	bl	80050b8 <HAL_PCD_SetAddress>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eda0:	7bfb      	ldrb	r3, [r7, #15]
 800eda2:	4618      	mov	r0, r3
 800eda4:	f000 f874 	bl	800ee90 <USBD_Get_USB_Status>
 800eda8:	4603      	mov	r3, r0
 800edaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edac:	7bbb      	ldrb	r3, [r7, #14]
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}

0800edb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edb6:	b580      	push	{r7, lr}
 800edb8:	b086      	sub	sp, #24
 800edba:	af00      	add	r7, sp, #0
 800edbc:	60f8      	str	r0, [r7, #12]
 800edbe:	607a      	str	r2, [r7, #4]
 800edc0:	603b      	str	r3, [r7, #0]
 800edc2:	460b      	mov	r3, r1
 800edc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edc6:	2300      	movs	r3, #0
 800edc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edca:	2300      	movs	r3, #0
 800edcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800edd4:	7af9      	ldrb	r1, [r7, #11]
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	f7f6 fa96 	bl	800530a <HAL_PCD_EP_Transmit>
 800edde:	4603      	mov	r3, r0
 800ede0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ede2:	7dfb      	ldrb	r3, [r7, #23]
 800ede4:	4618      	mov	r0, r3
 800ede6:	f000 f853 	bl	800ee90 <USBD_Get_USB_Status>
 800edea:	4603      	mov	r3, r0
 800edec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800edee:	7dbb      	ldrb	r3, [r7, #22]
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3718      	adds	r7, #24
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	607a      	str	r2, [r7, #4]
 800ee02:	603b      	str	r3, [r7, #0]
 800ee04:	460b      	mov	r3, r1
 800ee06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ee16:	7af9      	ldrb	r1, [r7, #11]
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	f7f6 fa22 	bl	8005264 <HAL_PCD_EP_Receive>
 800ee20:	4603      	mov	r3, r0
 800ee22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee24:	7dfb      	ldrb	r3, [r7, #23]
 800ee26:	4618      	mov	r0, r3
 800ee28:	f000 f832 	bl	800ee90 <USBD_Get_USB_Status>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee30:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3718      	adds	r7, #24
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}

0800ee3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b082      	sub	sp, #8
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
 800ee42:	460b      	mov	r3, r1
 800ee44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee4c:	78fa      	ldrb	r2, [r7, #3]
 800ee4e:	4611      	mov	r1, r2
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7f6 fa42 	bl	80052da <HAL_PCD_EP_GetRxCount>
 800ee56:	4603      	mov	r3, r0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee68:	4b03      	ldr	r3, [pc, #12]	; (800ee78 <USBD_static_malloc+0x18>)
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	370c      	adds	r7, #12
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr
 800ee76:	bf00      	nop
 800ee78:	200083e4 	.word	0x200083e4

0800ee7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]

}
 800ee84:	bf00      	nop
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr

0800ee90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b085      	sub	sp, #20
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	4603      	mov	r3, r0
 800ee98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	2b03      	cmp	r3, #3
 800eea2:	d817      	bhi.n	800eed4 <USBD_Get_USB_Status+0x44>
 800eea4:	a201      	add	r2, pc, #4	; (adr r2, 800eeac <USBD_Get_USB_Status+0x1c>)
 800eea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeaa:	bf00      	nop
 800eeac:	0800eebd 	.word	0x0800eebd
 800eeb0:	0800eec3 	.word	0x0800eec3
 800eeb4:	0800eec9 	.word	0x0800eec9
 800eeb8:	0800eecf 	.word	0x0800eecf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eebc:	2300      	movs	r3, #0
 800eebe:	73fb      	strb	r3, [r7, #15]
    break;
 800eec0:	e00b      	b.n	800eeda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eec2:	2303      	movs	r3, #3
 800eec4:	73fb      	strb	r3, [r7, #15]
    break;
 800eec6:	e008      	b.n	800eeda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eec8:	2301      	movs	r3, #1
 800eeca:	73fb      	strb	r3, [r7, #15]
    break;
 800eecc:	e005      	b.n	800eeda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eece:	2303      	movs	r3, #3
 800eed0:	73fb      	strb	r3, [r7, #15]
    break;
 800eed2:	e002      	b.n	800eeda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eed4:	2303      	movs	r3, #3
 800eed6:	73fb      	strb	r3, [r7, #15]
    break;
 800eed8:	bf00      	nop
  }
  return usb_status;
 800eeda:	7bfb      	ldrb	r3, [r7, #15]
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3714      	adds	r7, #20
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <__cvt>:
 800eee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eeec:	ec55 4b10 	vmov	r4, r5, d0
 800eef0:	2d00      	cmp	r5, #0
 800eef2:	460e      	mov	r6, r1
 800eef4:	4619      	mov	r1, r3
 800eef6:	462b      	mov	r3, r5
 800eef8:	bfbb      	ittet	lt
 800eefa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800eefe:	461d      	movlt	r5, r3
 800ef00:	2300      	movge	r3, #0
 800ef02:	232d      	movlt	r3, #45	; 0x2d
 800ef04:	700b      	strb	r3, [r1, #0]
 800ef06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ef0c:	4691      	mov	r9, r2
 800ef0e:	f023 0820 	bic.w	r8, r3, #32
 800ef12:	bfbc      	itt	lt
 800ef14:	4622      	movlt	r2, r4
 800ef16:	4614      	movlt	r4, r2
 800ef18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ef1c:	d005      	beq.n	800ef2a <__cvt+0x42>
 800ef1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ef22:	d100      	bne.n	800ef26 <__cvt+0x3e>
 800ef24:	3601      	adds	r6, #1
 800ef26:	2102      	movs	r1, #2
 800ef28:	e000      	b.n	800ef2c <__cvt+0x44>
 800ef2a:	2103      	movs	r1, #3
 800ef2c:	ab03      	add	r3, sp, #12
 800ef2e:	9301      	str	r3, [sp, #4]
 800ef30:	ab02      	add	r3, sp, #8
 800ef32:	9300      	str	r3, [sp, #0]
 800ef34:	ec45 4b10 	vmov	d0, r4, r5
 800ef38:	4653      	mov	r3, sl
 800ef3a:	4632      	mov	r2, r6
 800ef3c:	f001 f830 	bl	800ffa0 <_dtoa_r>
 800ef40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ef44:	4607      	mov	r7, r0
 800ef46:	d102      	bne.n	800ef4e <__cvt+0x66>
 800ef48:	f019 0f01 	tst.w	r9, #1
 800ef4c:	d022      	beq.n	800ef94 <__cvt+0xac>
 800ef4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ef52:	eb07 0906 	add.w	r9, r7, r6
 800ef56:	d110      	bne.n	800ef7a <__cvt+0x92>
 800ef58:	783b      	ldrb	r3, [r7, #0]
 800ef5a:	2b30      	cmp	r3, #48	; 0x30
 800ef5c:	d10a      	bne.n	800ef74 <__cvt+0x8c>
 800ef5e:	2200      	movs	r2, #0
 800ef60:	2300      	movs	r3, #0
 800ef62:	4620      	mov	r0, r4
 800ef64:	4629      	mov	r1, r5
 800ef66:	f7f1 fdbf 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef6a:	b918      	cbnz	r0, 800ef74 <__cvt+0x8c>
 800ef6c:	f1c6 0601 	rsb	r6, r6, #1
 800ef70:	f8ca 6000 	str.w	r6, [sl]
 800ef74:	f8da 3000 	ldr.w	r3, [sl]
 800ef78:	4499      	add	r9, r3
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	4620      	mov	r0, r4
 800ef80:	4629      	mov	r1, r5
 800ef82:	f7f1 fdb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef86:	b108      	cbz	r0, 800ef8c <__cvt+0xa4>
 800ef88:	f8cd 900c 	str.w	r9, [sp, #12]
 800ef8c:	2230      	movs	r2, #48	; 0x30
 800ef8e:	9b03      	ldr	r3, [sp, #12]
 800ef90:	454b      	cmp	r3, r9
 800ef92:	d307      	bcc.n	800efa4 <__cvt+0xbc>
 800ef94:	9b03      	ldr	r3, [sp, #12]
 800ef96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef98:	1bdb      	subs	r3, r3, r7
 800ef9a:	4638      	mov	r0, r7
 800ef9c:	6013      	str	r3, [r2, #0]
 800ef9e:	b004      	add	sp, #16
 800efa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efa4:	1c59      	adds	r1, r3, #1
 800efa6:	9103      	str	r1, [sp, #12]
 800efa8:	701a      	strb	r2, [r3, #0]
 800efaa:	e7f0      	b.n	800ef8e <__cvt+0xa6>

0800efac <__exponent>:
 800efac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efae:	4603      	mov	r3, r0
 800efb0:	2900      	cmp	r1, #0
 800efb2:	bfb8      	it	lt
 800efb4:	4249      	neglt	r1, r1
 800efb6:	f803 2b02 	strb.w	r2, [r3], #2
 800efba:	bfb4      	ite	lt
 800efbc:	222d      	movlt	r2, #45	; 0x2d
 800efbe:	222b      	movge	r2, #43	; 0x2b
 800efc0:	2909      	cmp	r1, #9
 800efc2:	7042      	strb	r2, [r0, #1]
 800efc4:	dd2a      	ble.n	800f01c <__exponent+0x70>
 800efc6:	f10d 0207 	add.w	r2, sp, #7
 800efca:	4617      	mov	r7, r2
 800efcc:	260a      	movs	r6, #10
 800efce:	4694      	mov	ip, r2
 800efd0:	fb91 f5f6 	sdiv	r5, r1, r6
 800efd4:	fb06 1415 	mls	r4, r6, r5, r1
 800efd8:	3430      	adds	r4, #48	; 0x30
 800efda:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800efde:	460c      	mov	r4, r1
 800efe0:	2c63      	cmp	r4, #99	; 0x63
 800efe2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800efe6:	4629      	mov	r1, r5
 800efe8:	dcf1      	bgt.n	800efce <__exponent+0x22>
 800efea:	3130      	adds	r1, #48	; 0x30
 800efec:	f1ac 0402 	sub.w	r4, ip, #2
 800eff0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800eff4:	1c41      	adds	r1, r0, #1
 800eff6:	4622      	mov	r2, r4
 800eff8:	42ba      	cmp	r2, r7
 800effa:	d30a      	bcc.n	800f012 <__exponent+0x66>
 800effc:	f10d 0209 	add.w	r2, sp, #9
 800f000:	eba2 020c 	sub.w	r2, r2, ip
 800f004:	42bc      	cmp	r4, r7
 800f006:	bf88      	it	hi
 800f008:	2200      	movhi	r2, #0
 800f00a:	4413      	add	r3, r2
 800f00c:	1a18      	subs	r0, r3, r0
 800f00e:	b003      	add	sp, #12
 800f010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f012:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f016:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f01a:	e7ed      	b.n	800eff8 <__exponent+0x4c>
 800f01c:	2330      	movs	r3, #48	; 0x30
 800f01e:	3130      	adds	r1, #48	; 0x30
 800f020:	7083      	strb	r3, [r0, #2]
 800f022:	70c1      	strb	r1, [r0, #3]
 800f024:	1d03      	adds	r3, r0, #4
 800f026:	e7f1      	b.n	800f00c <__exponent+0x60>

0800f028 <_printf_float>:
 800f028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f02c:	ed2d 8b02 	vpush	{d8}
 800f030:	b08d      	sub	sp, #52	; 0x34
 800f032:	460c      	mov	r4, r1
 800f034:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f038:	4616      	mov	r6, r2
 800f03a:	461f      	mov	r7, r3
 800f03c:	4605      	mov	r5, r0
 800f03e:	f000 fe4b 	bl	800fcd8 <_localeconv_r>
 800f042:	f8d0 a000 	ldr.w	sl, [r0]
 800f046:	4650      	mov	r0, sl
 800f048:	f7f1 f922 	bl	8000290 <strlen>
 800f04c:	2300      	movs	r3, #0
 800f04e:	930a      	str	r3, [sp, #40]	; 0x28
 800f050:	6823      	ldr	r3, [r4, #0]
 800f052:	9305      	str	r3, [sp, #20]
 800f054:	f8d8 3000 	ldr.w	r3, [r8]
 800f058:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f05c:	3307      	adds	r3, #7
 800f05e:	f023 0307 	bic.w	r3, r3, #7
 800f062:	f103 0208 	add.w	r2, r3, #8
 800f066:	f8c8 2000 	str.w	r2, [r8]
 800f06a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f06e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f072:	9307      	str	r3, [sp, #28]
 800f074:	f8cd 8018 	str.w	r8, [sp, #24]
 800f078:	ee08 0a10 	vmov	s16, r0
 800f07c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f080:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f084:	4b9e      	ldr	r3, [pc, #632]	; (800f300 <_printf_float+0x2d8>)
 800f086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f08a:	f7f1 fd5f 	bl	8000b4c <__aeabi_dcmpun>
 800f08e:	bb88      	cbnz	r0, 800f0f4 <_printf_float+0xcc>
 800f090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f094:	4b9a      	ldr	r3, [pc, #616]	; (800f300 <_printf_float+0x2d8>)
 800f096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f09a:	f7f1 fd39 	bl	8000b10 <__aeabi_dcmple>
 800f09e:	bb48      	cbnz	r0, 800f0f4 <_printf_float+0xcc>
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	4640      	mov	r0, r8
 800f0a6:	4649      	mov	r1, r9
 800f0a8:	f7f1 fd28 	bl	8000afc <__aeabi_dcmplt>
 800f0ac:	b110      	cbz	r0, 800f0b4 <_printf_float+0x8c>
 800f0ae:	232d      	movs	r3, #45	; 0x2d
 800f0b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0b4:	4a93      	ldr	r2, [pc, #588]	; (800f304 <_printf_float+0x2dc>)
 800f0b6:	4b94      	ldr	r3, [pc, #592]	; (800f308 <_printf_float+0x2e0>)
 800f0b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f0bc:	bf94      	ite	ls
 800f0be:	4690      	movls	r8, r2
 800f0c0:	4698      	movhi	r8, r3
 800f0c2:	2303      	movs	r3, #3
 800f0c4:	6123      	str	r3, [r4, #16]
 800f0c6:	9b05      	ldr	r3, [sp, #20]
 800f0c8:	f023 0304 	bic.w	r3, r3, #4
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	f04f 0900 	mov.w	r9, #0
 800f0d2:	9700      	str	r7, [sp, #0]
 800f0d4:	4633      	mov	r3, r6
 800f0d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800f0d8:	4621      	mov	r1, r4
 800f0da:	4628      	mov	r0, r5
 800f0dc:	f000 f9da 	bl	800f494 <_printf_common>
 800f0e0:	3001      	adds	r0, #1
 800f0e2:	f040 8090 	bne.w	800f206 <_printf_float+0x1de>
 800f0e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0ea:	b00d      	add	sp, #52	; 0x34
 800f0ec:	ecbd 8b02 	vpop	{d8}
 800f0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f4:	4642      	mov	r2, r8
 800f0f6:	464b      	mov	r3, r9
 800f0f8:	4640      	mov	r0, r8
 800f0fa:	4649      	mov	r1, r9
 800f0fc:	f7f1 fd26 	bl	8000b4c <__aeabi_dcmpun>
 800f100:	b140      	cbz	r0, 800f114 <_printf_float+0xec>
 800f102:	464b      	mov	r3, r9
 800f104:	2b00      	cmp	r3, #0
 800f106:	bfbc      	itt	lt
 800f108:	232d      	movlt	r3, #45	; 0x2d
 800f10a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f10e:	4a7f      	ldr	r2, [pc, #508]	; (800f30c <_printf_float+0x2e4>)
 800f110:	4b7f      	ldr	r3, [pc, #508]	; (800f310 <_printf_float+0x2e8>)
 800f112:	e7d1      	b.n	800f0b8 <_printf_float+0x90>
 800f114:	6863      	ldr	r3, [r4, #4]
 800f116:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f11a:	9206      	str	r2, [sp, #24]
 800f11c:	1c5a      	adds	r2, r3, #1
 800f11e:	d13f      	bne.n	800f1a0 <_printf_float+0x178>
 800f120:	2306      	movs	r3, #6
 800f122:	6063      	str	r3, [r4, #4]
 800f124:	9b05      	ldr	r3, [sp, #20]
 800f126:	6861      	ldr	r1, [r4, #4]
 800f128:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f12c:	2300      	movs	r3, #0
 800f12e:	9303      	str	r3, [sp, #12]
 800f130:	ab0a      	add	r3, sp, #40	; 0x28
 800f132:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f136:	ab09      	add	r3, sp, #36	; 0x24
 800f138:	ec49 8b10 	vmov	d0, r8, r9
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	6022      	str	r2, [r4, #0]
 800f140:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f144:	4628      	mov	r0, r5
 800f146:	f7ff fecf 	bl	800eee8 <__cvt>
 800f14a:	9b06      	ldr	r3, [sp, #24]
 800f14c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f14e:	2b47      	cmp	r3, #71	; 0x47
 800f150:	4680      	mov	r8, r0
 800f152:	d108      	bne.n	800f166 <_printf_float+0x13e>
 800f154:	1cc8      	adds	r0, r1, #3
 800f156:	db02      	blt.n	800f15e <_printf_float+0x136>
 800f158:	6863      	ldr	r3, [r4, #4]
 800f15a:	4299      	cmp	r1, r3
 800f15c:	dd41      	ble.n	800f1e2 <_printf_float+0x1ba>
 800f15e:	f1ab 0302 	sub.w	r3, fp, #2
 800f162:	fa5f fb83 	uxtb.w	fp, r3
 800f166:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f16a:	d820      	bhi.n	800f1ae <_printf_float+0x186>
 800f16c:	3901      	subs	r1, #1
 800f16e:	465a      	mov	r2, fp
 800f170:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f174:	9109      	str	r1, [sp, #36]	; 0x24
 800f176:	f7ff ff19 	bl	800efac <__exponent>
 800f17a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f17c:	1813      	adds	r3, r2, r0
 800f17e:	2a01      	cmp	r2, #1
 800f180:	4681      	mov	r9, r0
 800f182:	6123      	str	r3, [r4, #16]
 800f184:	dc02      	bgt.n	800f18c <_printf_float+0x164>
 800f186:	6822      	ldr	r2, [r4, #0]
 800f188:	07d2      	lsls	r2, r2, #31
 800f18a:	d501      	bpl.n	800f190 <_printf_float+0x168>
 800f18c:	3301      	adds	r3, #1
 800f18e:	6123      	str	r3, [r4, #16]
 800f190:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f194:	2b00      	cmp	r3, #0
 800f196:	d09c      	beq.n	800f0d2 <_printf_float+0xaa>
 800f198:	232d      	movs	r3, #45	; 0x2d
 800f19a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f19e:	e798      	b.n	800f0d2 <_printf_float+0xaa>
 800f1a0:	9a06      	ldr	r2, [sp, #24]
 800f1a2:	2a47      	cmp	r2, #71	; 0x47
 800f1a4:	d1be      	bne.n	800f124 <_printf_float+0xfc>
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1bc      	bne.n	800f124 <_printf_float+0xfc>
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	e7b9      	b.n	800f122 <_printf_float+0xfa>
 800f1ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f1b2:	d118      	bne.n	800f1e6 <_printf_float+0x1be>
 800f1b4:	2900      	cmp	r1, #0
 800f1b6:	6863      	ldr	r3, [r4, #4]
 800f1b8:	dd0b      	ble.n	800f1d2 <_printf_float+0x1aa>
 800f1ba:	6121      	str	r1, [r4, #16]
 800f1bc:	b913      	cbnz	r3, 800f1c4 <_printf_float+0x19c>
 800f1be:	6822      	ldr	r2, [r4, #0]
 800f1c0:	07d0      	lsls	r0, r2, #31
 800f1c2:	d502      	bpl.n	800f1ca <_printf_float+0x1a2>
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	440b      	add	r3, r1
 800f1c8:	6123      	str	r3, [r4, #16]
 800f1ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800f1cc:	f04f 0900 	mov.w	r9, #0
 800f1d0:	e7de      	b.n	800f190 <_printf_float+0x168>
 800f1d2:	b913      	cbnz	r3, 800f1da <_printf_float+0x1b2>
 800f1d4:	6822      	ldr	r2, [r4, #0]
 800f1d6:	07d2      	lsls	r2, r2, #31
 800f1d8:	d501      	bpl.n	800f1de <_printf_float+0x1b6>
 800f1da:	3302      	adds	r3, #2
 800f1dc:	e7f4      	b.n	800f1c8 <_printf_float+0x1a0>
 800f1de:	2301      	movs	r3, #1
 800f1e0:	e7f2      	b.n	800f1c8 <_printf_float+0x1a0>
 800f1e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f1e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1e8:	4299      	cmp	r1, r3
 800f1ea:	db05      	blt.n	800f1f8 <_printf_float+0x1d0>
 800f1ec:	6823      	ldr	r3, [r4, #0]
 800f1ee:	6121      	str	r1, [r4, #16]
 800f1f0:	07d8      	lsls	r0, r3, #31
 800f1f2:	d5ea      	bpl.n	800f1ca <_printf_float+0x1a2>
 800f1f4:	1c4b      	adds	r3, r1, #1
 800f1f6:	e7e7      	b.n	800f1c8 <_printf_float+0x1a0>
 800f1f8:	2900      	cmp	r1, #0
 800f1fa:	bfd4      	ite	le
 800f1fc:	f1c1 0202 	rsble	r2, r1, #2
 800f200:	2201      	movgt	r2, #1
 800f202:	4413      	add	r3, r2
 800f204:	e7e0      	b.n	800f1c8 <_printf_float+0x1a0>
 800f206:	6823      	ldr	r3, [r4, #0]
 800f208:	055a      	lsls	r2, r3, #21
 800f20a:	d407      	bmi.n	800f21c <_printf_float+0x1f4>
 800f20c:	6923      	ldr	r3, [r4, #16]
 800f20e:	4642      	mov	r2, r8
 800f210:	4631      	mov	r1, r6
 800f212:	4628      	mov	r0, r5
 800f214:	47b8      	blx	r7
 800f216:	3001      	adds	r0, #1
 800f218:	d12c      	bne.n	800f274 <_printf_float+0x24c>
 800f21a:	e764      	b.n	800f0e6 <_printf_float+0xbe>
 800f21c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f220:	f240 80e0 	bls.w	800f3e4 <_printf_float+0x3bc>
 800f224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f228:	2200      	movs	r2, #0
 800f22a:	2300      	movs	r3, #0
 800f22c:	f7f1 fc5c 	bl	8000ae8 <__aeabi_dcmpeq>
 800f230:	2800      	cmp	r0, #0
 800f232:	d034      	beq.n	800f29e <_printf_float+0x276>
 800f234:	4a37      	ldr	r2, [pc, #220]	; (800f314 <_printf_float+0x2ec>)
 800f236:	2301      	movs	r3, #1
 800f238:	4631      	mov	r1, r6
 800f23a:	4628      	mov	r0, r5
 800f23c:	47b8      	blx	r7
 800f23e:	3001      	adds	r0, #1
 800f240:	f43f af51 	beq.w	800f0e6 <_printf_float+0xbe>
 800f244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f248:	429a      	cmp	r2, r3
 800f24a:	db02      	blt.n	800f252 <_printf_float+0x22a>
 800f24c:	6823      	ldr	r3, [r4, #0]
 800f24e:	07d8      	lsls	r0, r3, #31
 800f250:	d510      	bpl.n	800f274 <_printf_float+0x24c>
 800f252:	ee18 3a10 	vmov	r3, s16
 800f256:	4652      	mov	r2, sl
 800f258:	4631      	mov	r1, r6
 800f25a:	4628      	mov	r0, r5
 800f25c:	47b8      	blx	r7
 800f25e:	3001      	adds	r0, #1
 800f260:	f43f af41 	beq.w	800f0e6 <_printf_float+0xbe>
 800f264:	f04f 0800 	mov.w	r8, #0
 800f268:	f104 091a 	add.w	r9, r4, #26
 800f26c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f26e:	3b01      	subs	r3, #1
 800f270:	4543      	cmp	r3, r8
 800f272:	dc09      	bgt.n	800f288 <_printf_float+0x260>
 800f274:	6823      	ldr	r3, [r4, #0]
 800f276:	079b      	lsls	r3, r3, #30
 800f278:	f100 8107 	bmi.w	800f48a <_printf_float+0x462>
 800f27c:	68e0      	ldr	r0, [r4, #12]
 800f27e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f280:	4298      	cmp	r0, r3
 800f282:	bfb8      	it	lt
 800f284:	4618      	movlt	r0, r3
 800f286:	e730      	b.n	800f0ea <_printf_float+0xc2>
 800f288:	2301      	movs	r3, #1
 800f28a:	464a      	mov	r2, r9
 800f28c:	4631      	mov	r1, r6
 800f28e:	4628      	mov	r0, r5
 800f290:	47b8      	blx	r7
 800f292:	3001      	adds	r0, #1
 800f294:	f43f af27 	beq.w	800f0e6 <_printf_float+0xbe>
 800f298:	f108 0801 	add.w	r8, r8, #1
 800f29c:	e7e6      	b.n	800f26c <_printf_float+0x244>
 800f29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	dc39      	bgt.n	800f318 <_printf_float+0x2f0>
 800f2a4:	4a1b      	ldr	r2, [pc, #108]	; (800f314 <_printf_float+0x2ec>)
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	4631      	mov	r1, r6
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	47b8      	blx	r7
 800f2ae:	3001      	adds	r0, #1
 800f2b0:	f43f af19 	beq.w	800f0e6 <_printf_float+0xbe>
 800f2b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	d102      	bne.n	800f2c2 <_printf_float+0x29a>
 800f2bc:	6823      	ldr	r3, [r4, #0]
 800f2be:	07d9      	lsls	r1, r3, #31
 800f2c0:	d5d8      	bpl.n	800f274 <_printf_float+0x24c>
 800f2c2:	ee18 3a10 	vmov	r3, s16
 800f2c6:	4652      	mov	r2, sl
 800f2c8:	4631      	mov	r1, r6
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	47b8      	blx	r7
 800f2ce:	3001      	adds	r0, #1
 800f2d0:	f43f af09 	beq.w	800f0e6 <_printf_float+0xbe>
 800f2d4:	f04f 0900 	mov.w	r9, #0
 800f2d8:	f104 0a1a 	add.w	sl, r4, #26
 800f2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2de:	425b      	negs	r3, r3
 800f2e0:	454b      	cmp	r3, r9
 800f2e2:	dc01      	bgt.n	800f2e8 <_printf_float+0x2c0>
 800f2e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2e6:	e792      	b.n	800f20e <_printf_float+0x1e6>
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	4652      	mov	r2, sl
 800f2ec:	4631      	mov	r1, r6
 800f2ee:	4628      	mov	r0, r5
 800f2f0:	47b8      	blx	r7
 800f2f2:	3001      	adds	r0, #1
 800f2f4:	f43f aef7 	beq.w	800f0e6 <_printf_float+0xbe>
 800f2f8:	f109 0901 	add.w	r9, r9, #1
 800f2fc:	e7ee      	b.n	800f2dc <_printf_float+0x2b4>
 800f2fe:	bf00      	nop
 800f300:	7fefffff 	.word	0x7fefffff
 800f304:	08012639 	.word	0x08012639
 800f308:	0801263d 	.word	0x0801263d
 800f30c:	08012641 	.word	0x08012641
 800f310:	08012645 	.word	0x08012645
 800f314:	08012649 	.word	0x08012649
 800f318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f31a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f31c:	429a      	cmp	r2, r3
 800f31e:	bfa8      	it	ge
 800f320:	461a      	movge	r2, r3
 800f322:	2a00      	cmp	r2, #0
 800f324:	4691      	mov	r9, r2
 800f326:	dc37      	bgt.n	800f398 <_printf_float+0x370>
 800f328:	f04f 0b00 	mov.w	fp, #0
 800f32c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f330:	f104 021a 	add.w	r2, r4, #26
 800f334:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f336:	9305      	str	r3, [sp, #20]
 800f338:	eba3 0309 	sub.w	r3, r3, r9
 800f33c:	455b      	cmp	r3, fp
 800f33e:	dc33      	bgt.n	800f3a8 <_printf_float+0x380>
 800f340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f344:	429a      	cmp	r2, r3
 800f346:	db3b      	blt.n	800f3c0 <_printf_float+0x398>
 800f348:	6823      	ldr	r3, [r4, #0]
 800f34a:	07da      	lsls	r2, r3, #31
 800f34c:	d438      	bmi.n	800f3c0 <_printf_float+0x398>
 800f34e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f352:	eba2 0903 	sub.w	r9, r2, r3
 800f356:	9b05      	ldr	r3, [sp, #20]
 800f358:	1ad2      	subs	r2, r2, r3
 800f35a:	4591      	cmp	r9, r2
 800f35c:	bfa8      	it	ge
 800f35e:	4691      	movge	r9, r2
 800f360:	f1b9 0f00 	cmp.w	r9, #0
 800f364:	dc35      	bgt.n	800f3d2 <_printf_float+0x3aa>
 800f366:	f04f 0800 	mov.w	r8, #0
 800f36a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f36e:	f104 0a1a 	add.w	sl, r4, #26
 800f372:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f376:	1a9b      	subs	r3, r3, r2
 800f378:	eba3 0309 	sub.w	r3, r3, r9
 800f37c:	4543      	cmp	r3, r8
 800f37e:	f77f af79 	ble.w	800f274 <_printf_float+0x24c>
 800f382:	2301      	movs	r3, #1
 800f384:	4652      	mov	r2, sl
 800f386:	4631      	mov	r1, r6
 800f388:	4628      	mov	r0, r5
 800f38a:	47b8      	blx	r7
 800f38c:	3001      	adds	r0, #1
 800f38e:	f43f aeaa 	beq.w	800f0e6 <_printf_float+0xbe>
 800f392:	f108 0801 	add.w	r8, r8, #1
 800f396:	e7ec      	b.n	800f372 <_printf_float+0x34a>
 800f398:	4613      	mov	r3, r2
 800f39a:	4631      	mov	r1, r6
 800f39c:	4642      	mov	r2, r8
 800f39e:	4628      	mov	r0, r5
 800f3a0:	47b8      	blx	r7
 800f3a2:	3001      	adds	r0, #1
 800f3a4:	d1c0      	bne.n	800f328 <_printf_float+0x300>
 800f3a6:	e69e      	b.n	800f0e6 <_printf_float+0xbe>
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	4631      	mov	r1, r6
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	9205      	str	r2, [sp, #20]
 800f3b0:	47b8      	blx	r7
 800f3b2:	3001      	adds	r0, #1
 800f3b4:	f43f ae97 	beq.w	800f0e6 <_printf_float+0xbe>
 800f3b8:	9a05      	ldr	r2, [sp, #20]
 800f3ba:	f10b 0b01 	add.w	fp, fp, #1
 800f3be:	e7b9      	b.n	800f334 <_printf_float+0x30c>
 800f3c0:	ee18 3a10 	vmov	r3, s16
 800f3c4:	4652      	mov	r2, sl
 800f3c6:	4631      	mov	r1, r6
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	47b8      	blx	r7
 800f3cc:	3001      	adds	r0, #1
 800f3ce:	d1be      	bne.n	800f34e <_printf_float+0x326>
 800f3d0:	e689      	b.n	800f0e6 <_printf_float+0xbe>
 800f3d2:	9a05      	ldr	r2, [sp, #20]
 800f3d4:	464b      	mov	r3, r9
 800f3d6:	4442      	add	r2, r8
 800f3d8:	4631      	mov	r1, r6
 800f3da:	4628      	mov	r0, r5
 800f3dc:	47b8      	blx	r7
 800f3de:	3001      	adds	r0, #1
 800f3e0:	d1c1      	bne.n	800f366 <_printf_float+0x33e>
 800f3e2:	e680      	b.n	800f0e6 <_printf_float+0xbe>
 800f3e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3e6:	2a01      	cmp	r2, #1
 800f3e8:	dc01      	bgt.n	800f3ee <_printf_float+0x3c6>
 800f3ea:	07db      	lsls	r3, r3, #31
 800f3ec:	d53a      	bpl.n	800f464 <_printf_float+0x43c>
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	4642      	mov	r2, r8
 800f3f2:	4631      	mov	r1, r6
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	47b8      	blx	r7
 800f3f8:	3001      	adds	r0, #1
 800f3fa:	f43f ae74 	beq.w	800f0e6 <_printf_float+0xbe>
 800f3fe:	ee18 3a10 	vmov	r3, s16
 800f402:	4652      	mov	r2, sl
 800f404:	4631      	mov	r1, r6
 800f406:	4628      	mov	r0, r5
 800f408:	47b8      	blx	r7
 800f40a:	3001      	adds	r0, #1
 800f40c:	f43f ae6b 	beq.w	800f0e6 <_printf_float+0xbe>
 800f410:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f414:	2200      	movs	r2, #0
 800f416:	2300      	movs	r3, #0
 800f418:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f41c:	f7f1 fb64 	bl	8000ae8 <__aeabi_dcmpeq>
 800f420:	b9d8      	cbnz	r0, 800f45a <_printf_float+0x432>
 800f422:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f426:	f108 0201 	add.w	r2, r8, #1
 800f42a:	4631      	mov	r1, r6
 800f42c:	4628      	mov	r0, r5
 800f42e:	47b8      	blx	r7
 800f430:	3001      	adds	r0, #1
 800f432:	d10e      	bne.n	800f452 <_printf_float+0x42a>
 800f434:	e657      	b.n	800f0e6 <_printf_float+0xbe>
 800f436:	2301      	movs	r3, #1
 800f438:	4652      	mov	r2, sl
 800f43a:	4631      	mov	r1, r6
 800f43c:	4628      	mov	r0, r5
 800f43e:	47b8      	blx	r7
 800f440:	3001      	adds	r0, #1
 800f442:	f43f ae50 	beq.w	800f0e6 <_printf_float+0xbe>
 800f446:	f108 0801 	add.w	r8, r8, #1
 800f44a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f44c:	3b01      	subs	r3, #1
 800f44e:	4543      	cmp	r3, r8
 800f450:	dcf1      	bgt.n	800f436 <_printf_float+0x40e>
 800f452:	464b      	mov	r3, r9
 800f454:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f458:	e6da      	b.n	800f210 <_printf_float+0x1e8>
 800f45a:	f04f 0800 	mov.w	r8, #0
 800f45e:	f104 0a1a 	add.w	sl, r4, #26
 800f462:	e7f2      	b.n	800f44a <_printf_float+0x422>
 800f464:	2301      	movs	r3, #1
 800f466:	4642      	mov	r2, r8
 800f468:	e7df      	b.n	800f42a <_printf_float+0x402>
 800f46a:	2301      	movs	r3, #1
 800f46c:	464a      	mov	r2, r9
 800f46e:	4631      	mov	r1, r6
 800f470:	4628      	mov	r0, r5
 800f472:	47b8      	blx	r7
 800f474:	3001      	adds	r0, #1
 800f476:	f43f ae36 	beq.w	800f0e6 <_printf_float+0xbe>
 800f47a:	f108 0801 	add.w	r8, r8, #1
 800f47e:	68e3      	ldr	r3, [r4, #12]
 800f480:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f482:	1a5b      	subs	r3, r3, r1
 800f484:	4543      	cmp	r3, r8
 800f486:	dcf0      	bgt.n	800f46a <_printf_float+0x442>
 800f488:	e6f8      	b.n	800f27c <_printf_float+0x254>
 800f48a:	f04f 0800 	mov.w	r8, #0
 800f48e:	f104 0919 	add.w	r9, r4, #25
 800f492:	e7f4      	b.n	800f47e <_printf_float+0x456>

0800f494 <_printf_common>:
 800f494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f498:	4616      	mov	r6, r2
 800f49a:	4699      	mov	r9, r3
 800f49c:	688a      	ldr	r2, [r1, #8]
 800f49e:	690b      	ldr	r3, [r1, #16]
 800f4a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	bfb8      	it	lt
 800f4a8:	4613      	movlt	r3, r2
 800f4aa:	6033      	str	r3, [r6, #0]
 800f4ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f4b0:	4607      	mov	r7, r0
 800f4b2:	460c      	mov	r4, r1
 800f4b4:	b10a      	cbz	r2, 800f4ba <_printf_common+0x26>
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	6033      	str	r3, [r6, #0]
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	0699      	lsls	r1, r3, #26
 800f4be:	bf42      	ittt	mi
 800f4c0:	6833      	ldrmi	r3, [r6, #0]
 800f4c2:	3302      	addmi	r3, #2
 800f4c4:	6033      	strmi	r3, [r6, #0]
 800f4c6:	6825      	ldr	r5, [r4, #0]
 800f4c8:	f015 0506 	ands.w	r5, r5, #6
 800f4cc:	d106      	bne.n	800f4dc <_printf_common+0x48>
 800f4ce:	f104 0a19 	add.w	sl, r4, #25
 800f4d2:	68e3      	ldr	r3, [r4, #12]
 800f4d4:	6832      	ldr	r2, [r6, #0]
 800f4d6:	1a9b      	subs	r3, r3, r2
 800f4d8:	42ab      	cmp	r3, r5
 800f4da:	dc26      	bgt.n	800f52a <_printf_common+0x96>
 800f4dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f4e0:	1e13      	subs	r3, r2, #0
 800f4e2:	6822      	ldr	r2, [r4, #0]
 800f4e4:	bf18      	it	ne
 800f4e6:	2301      	movne	r3, #1
 800f4e8:	0692      	lsls	r2, r2, #26
 800f4ea:	d42b      	bmi.n	800f544 <_printf_common+0xb0>
 800f4ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f4f0:	4649      	mov	r1, r9
 800f4f2:	4638      	mov	r0, r7
 800f4f4:	47c0      	blx	r8
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	d01e      	beq.n	800f538 <_printf_common+0xa4>
 800f4fa:	6823      	ldr	r3, [r4, #0]
 800f4fc:	6922      	ldr	r2, [r4, #16]
 800f4fe:	f003 0306 	and.w	r3, r3, #6
 800f502:	2b04      	cmp	r3, #4
 800f504:	bf02      	ittt	eq
 800f506:	68e5      	ldreq	r5, [r4, #12]
 800f508:	6833      	ldreq	r3, [r6, #0]
 800f50a:	1aed      	subeq	r5, r5, r3
 800f50c:	68a3      	ldr	r3, [r4, #8]
 800f50e:	bf0c      	ite	eq
 800f510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f514:	2500      	movne	r5, #0
 800f516:	4293      	cmp	r3, r2
 800f518:	bfc4      	itt	gt
 800f51a:	1a9b      	subgt	r3, r3, r2
 800f51c:	18ed      	addgt	r5, r5, r3
 800f51e:	2600      	movs	r6, #0
 800f520:	341a      	adds	r4, #26
 800f522:	42b5      	cmp	r5, r6
 800f524:	d11a      	bne.n	800f55c <_printf_common+0xc8>
 800f526:	2000      	movs	r0, #0
 800f528:	e008      	b.n	800f53c <_printf_common+0xa8>
 800f52a:	2301      	movs	r3, #1
 800f52c:	4652      	mov	r2, sl
 800f52e:	4649      	mov	r1, r9
 800f530:	4638      	mov	r0, r7
 800f532:	47c0      	blx	r8
 800f534:	3001      	adds	r0, #1
 800f536:	d103      	bne.n	800f540 <_printf_common+0xac>
 800f538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f540:	3501      	adds	r5, #1
 800f542:	e7c6      	b.n	800f4d2 <_printf_common+0x3e>
 800f544:	18e1      	adds	r1, r4, r3
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	2030      	movs	r0, #48	; 0x30
 800f54a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f54e:	4422      	add	r2, r4
 800f550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f558:	3302      	adds	r3, #2
 800f55a:	e7c7      	b.n	800f4ec <_printf_common+0x58>
 800f55c:	2301      	movs	r3, #1
 800f55e:	4622      	mov	r2, r4
 800f560:	4649      	mov	r1, r9
 800f562:	4638      	mov	r0, r7
 800f564:	47c0      	blx	r8
 800f566:	3001      	adds	r0, #1
 800f568:	d0e6      	beq.n	800f538 <_printf_common+0xa4>
 800f56a:	3601      	adds	r6, #1
 800f56c:	e7d9      	b.n	800f522 <_printf_common+0x8e>
	...

0800f570 <_printf_i>:
 800f570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f574:	7e0f      	ldrb	r7, [r1, #24]
 800f576:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f578:	2f78      	cmp	r7, #120	; 0x78
 800f57a:	4691      	mov	r9, r2
 800f57c:	4680      	mov	r8, r0
 800f57e:	460c      	mov	r4, r1
 800f580:	469a      	mov	sl, r3
 800f582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f586:	d807      	bhi.n	800f598 <_printf_i+0x28>
 800f588:	2f62      	cmp	r7, #98	; 0x62
 800f58a:	d80a      	bhi.n	800f5a2 <_printf_i+0x32>
 800f58c:	2f00      	cmp	r7, #0
 800f58e:	f000 80d4 	beq.w	800f73a <_printf_i+0x1ca>
 800f592:	2f58      	cmp	r7, #88	; 0x58
 800f594:	f000 80c0 	beq.w	800f718 <_printf_i+0x1a8>
 800f598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f59c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f5a0:	e03a      	b.n	800f618 <_printf_i+0xa8>
 800f5a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f5a6:	2b15      	cmp	r3, #21
 800f5a8:	d8f6      	bhi.n	800f598 <_printf_i+0x28>
 800f5aa:	a101      	add	r1, pc, #4	; (adr r1, 800f5b0 <_printf_i+0x40>)
 800f5ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5b0:	0800f609 	.word	0x0800f609
 800f5b4:	0800f61d 	.word	0x0800f61d
 800f5b8:	0800f599 	.word	0x0800f599
 800f5bc:	0800f599 	.word	0x0800f599
 800f5c0:	0800f599 	.word	0x0800f599
 800f5c4:	0800f599 	.word	0x0800f599
 800f5c8:	0800f61d 	.word	0x0800f61d
 800f5cc:	0800f599 	.word	0x0800f599
 800f5d0:	0800f599 	.word	0x0800f599
 800f5d4:	0800f599 	.word	0x0800f599
 800f5d8:	0800f599 	.word	0x0800f599
 800f5dc:	0800f721 	.word	0x0800f721
 800f5e0:	0800f649 	.word	0x0800f649
 800f5e4:	0800f6db 	.word	0x0800f6db
 800f5e8:	0800f599 	.word	0x0800f599
 800f5ec:	0800f599 	.word	0x0800f599
 800f5f0:	0800f743 	.word	0x0800f743
 800f5f4:	0800f599 	.word	0x0800f599
 800f5f8:	0800f649 	.word	0x0800f649
 800f5fc:	0800f599 	.word	0x0800f599
 800f600:	0800f599 	.word	0x0800f599
 800f604:	0800f6e3 	.word	0x0800f6e3
 800f608:	682b      	ldr	r3, [r5, #0]
 800f60a:	1d1a      	adds	r2, r3, #4
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	602a      	str	r2, [r5, #0]
 800f610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f618:	2301      	movs	r3, #1
 800f61a:	e09f      	b.n	800f75c <_printf_i+0x1ec>
 800f61c:	6820      	ldr	r0, [r4, #0]
 800f61e:	682b      	ldr	r3, [r5, #0]
 800f620:	0607      	lsls	r7, r0, #24
 800f622:	f103 0104 	add.w	r1, r3, #4
 800f626:	6029      	str	r1, [r5, #0]
 800f628:	d501      	bpl.n	800f62e <_printf_i+0xbe>
 800f62a:	681e      	ldr	r6, [r3, #0]
 800f62c:	e003      	b.n	800f636 <_printf_i+0xc6>
 800f62e:	0646      	lsls	r6, r0, #25
 800f630:	d5fb      	bpl.n	800f62a <_printf_i+0xba>
 800f632:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f636:	2e00      	cmp	r6, #0
 800f638:	da03      	bge.n	800f642 <_printf_i+0xd2>
 800f63a:	232d      	movs	r3, #45	; 0x2d
 800f63c:	4276      	negs	r6, r6
 800f63e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f642:	485a      	ldr	r0, [pc, #360]	; (800f7ac <_printf_i+0x23c>)
 800f644:	230a      	movs	r3, #10
 800f646:	e012      	b.n	800f66e <_printf_i+0xfe>
 800f648:	682b      	ldr	r3, [r5, #0]
 800f64a:	6820      	ldr	r0, [r4, #0]
 800f64c:	1d19      	adds	r1, r3, #4
 800f64e:	6029      	str	r1, [r5, #0]
 800f650:	0605      	lsls	r5, r0, #24
 800f652:	d501      	bpl.n	800f658 <_printf_i+0xe8>
 800f654:	681e      	ldr	r6, [r3, #0]
 800f656:	e002      	b.n	800f65e <_printf_i+0xee>
 800f658:	0641      	lsls	r1, r0, #25
 800f65a:	d5fb      	bpl.n	800f654 <_printf_i+0xe4>
 800f65c:	881e      	ldrh	r6, [r3, #0]
 800f65e:	4853      	ldr	r0, [pc, #332]	; (800f7ac <_printf_i+0x23c>)
 800f660:	2f6f      	cmp	r7, #111	; 0x6f
 800f662:	bf0c      	ite	eq
 800f664:	2308      	moveq	r3, #8
 800f666:	230a      	movne	r3, #10
 800f668:	2100      	movs	r1, #0
 800f66a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f66e:	6865      	ldr	r5, [r4, #4]
 800f670:	60a5      	str	r5, [r4, #8]
 800f672:	2d00      	cmp	r5, #0
 800f674:	bfa2      	ittt	ge
 800f676:	6821      	ldrge	r1, [r4, #0]
 800f678:	f021 0104 	bicge.w	r1, r1, #4
 800f67c:	6021      	strge	r1, [r4, #0]
 800f67e:	b90e      	cbnz	r6, 800f684 <_printf_i+0x114>
 800f680:	2d00      	cmp	r5, #0
 800f682:	d04b      	beq.n	800f71c <_printf_i+0x1ac>
 800f684:	4615      	mov	r5, r2
 800f686:	fbb6 f1f3 	udiv	r1, r6, r3
 800f68a:	fb03 6711 	mls	r7, r3, r1, r6
 800f68e:	5dc7      	ldrb	r7, [r0, r7]
 800f690:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f694:	4637      	mov	r7, r6
 800f696:	42bb      	cmp	r3, r7
 800f698:	460e      	mov	r6, r1
 800f69a:	d9f4      	bls.n	800f686 <_printf_i+0x116>
 800f69c:	2b08      	cmp	r3, #8
 800f69e:	d10b      	bne.n	800f6b8 <_printf_i+0x148>
 800f6a0:	6823      	ldr	r3, [r4, #0]
 800f6a2:	07de      	lsls	r6, r3, #31
 800f6a4:	d508      	bpl.n	800f6b8 <_printf_i+0x148>
 800f6a6:	6923      	ldr	r3, [r4, #16]
 800f6a8:	6861      	ldr	r1, [r4, #4]
 800f6aa:	4299      	cmp	r1, r3
 800f6ac:	bfde      	ittt	le
 800f6ae:	2330      	movle	r3, #48	; 0x30
 800f6b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f6b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f6b8:	1b52      	subs	r2, r2, r5
 800f6ba:	6122      	str	r2, [r4, #16]
 800f6bc:	f8cd a000 	str.w	sl, [sp]
 800f6c0:	464b      	mov	r3, r9
 800f6c2:	aa03      	add	r2, sp, #12
 800f6c4:	4621      	mov	r1, r4
 800f6c6:	4640      	mov	r0, r8
 800f6c8:	f7ff fee4 	bl	800f494 <_printf_common>
 800f6cc:	3001      	adds	r0, #1
 800f6ce:	d14a      	bne.n	800f766 <_printf_i+0x1f6>
 800f6d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6d4:	b004      	add	sp, #16
 800f6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6da:	6823      	ldr	r3, [r4, #0]
 800f6dc:	f043 0320 	orr.w	r3, r3, #32
 800f6e0:	6023      	str	r3, [r4, #0]
 800f6e2:	4833      	ldr	r0, [pc, #204]	; (800f7b0 <_printf_i+0x240>)
 800f6e4:	2778      	movs	r7, #120	; 0x78
 800f6e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f6ea:	6823      	ldr	r3, [r4, #0]
 800f6ec:	6829      	ldr	r1, [r5, #0]
 800f6ee:	061f      	lsls	r7, r3, #24
 800f6f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800f6f4:	d402      	bmi.n	800f6fc <_printf_i+0x18c>
 800f6f6:	065f      	lsls	r7, r3, #25
 800f6f8:	bf48      	it	mi
 800f6fa:	b2b6      	uxthmi	r6, r6
 800f6fc:	07df      	lsls	r7, r3, #31
 800f6fe:	bf48      	it	mi
 800f700:	f043 0320 	orrmi.w	r3, r3, #32
 800f704:	6029      	str	r1, [r5, #0]
 800f706:	bf48      	it	mi
 800f708:	6023      	strmi	r3, [r4, #0]
 800f70a:	b91e      	cbnz	r6, 800f714 <_printf_i+0x1a4>
 800f70c:	6823      	ldr	r3, [r4, #0]
 800f70e:	f023 0320 	bic.w	r3, r3, #32
 800f712:	6023      	str	r3, [r4, #0]
 800f714:	2310      	movs	r3, #16
 800f716:	e7a7      	b.n	800f668 <_printf_i+0xf8>
 800f718:	4824      	ldr	r0, [pc, #144]	; (800f7ac <_printf_i+0x23c>)
 800f71a:	e7e4      	b.n	800f6e6 <_printf_i+0x176>
 800f71c:	4615      	mov	r5, r2
 800f71e:	e7bd      	b.n	800f69c <_printf_i+0x12c>
 800f720:	682b      	ldr	r3, [r5, #0]
 800f722:	6826      	ldr	r6, [r4, #0]
 800f724:	6961      	ldr	r1, [r4, #20]
 800f726:	1d18      	adds	r0, r3, #4
 800f728:	6028      	str	r0, [r5, #0]
 800f72a:	0635      	lsls	r5, r6, #24
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	d501      	bpl.n	800f734 <_printf_i+0x1c4>
 800f730:	6019      	str	r1, [r3, #0]
 800f732:	e002      	b.n	800f73a <_printf_i+0x1ca>
 800f734:	0670      	lsls	r0, r6, #25
 800f736:	d5fb      	bpl.n	800f730 <_printf_i+0x1c0>
 800f738:	8019      	strh	r1, [r3, #0]
 800f73a:	2300      	movs	r3, #0
 800f73c:	6123      	str	r3, [r4, #16]
 800f73e:	4615      	mov	r5, r2
 800f740:	e7bc      	b.n	800f6bc <_printf_i+0x14c>
 800f742:	682b      	ldr	r3, [r5, #0]
 800f744:	1d1a      	adds	r2, r3, #4
 800f746:	602a      	str	r2, [r5, #0]
 800f748:	681d      	ldr	r5, [r3, #0]
 800f74a:	6862      	ldr	r2, [r4, #4]
 800f74c:	2100      	movs	r1, #0
 800f74e:	4628      	mov	r0, r5
 800f750:	f7f0 fd4e 	bl	80001f0 <memchr>
 800f754:	b108      	cbz	r0, 800f75a <_printf_i+0x1ea>
 800f756:	1b40      	subs	r0, r0, r5
 800f758:	6060      	str	r0, [r4, #4]
 800f75a:	6863      	ldr	r3, [r4, #4]
 800f75c:	6123      	str	r3, [r4, #16]
 800f75e:	2300      	movs	r3, #0
 800f760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f764:	e7aa      	b.n	800f6bc <_printf_i+0x14c>
 800f766:	6923      	ldr	r3, [r4, #16]
 800f768:	462a      	mov	r2, r5
 800f76a:	4649      	mov	r1, r9
 800f76c:	4640      	mov	r0, r8
 800f76e:	47d0      	blx	sl
 800f770:	3001      	adds	r0, #1
 800f772:	d0ad      	beq.n	800f6d0 <_printf_i+0x160>
 800f774:	6823      	ldr	r3, [r4, #0]
 800f776:	079b      	lsls	r3, r3, #30
 800f778:	d413      	bmi.n	800f7a2 <_printf_i+0x232>
 800f77a:	68e0      	ldr	r0, [r4, #12]
 800f77c:	9b03      	ldr	r3, [sp, #12]
 800f77e:	4298      	cmp	r0, r3
 800f780:	bfb8      	it	lt
 800f782:	4618      	movlt	r0, r3
 800f784:	e7a6      	b.n	800f6d4 <_printf_i+0x164>
 800f786:	2301      	movs	r3, #1
 800f788:	4632      	mov	r2, r6
 800f78a:	4649      	mov	r1, r9
 800f78c:	4640      	mov	r0, r8
 800f78e:	47d0      	blx	sl
 800f790:	3001      	adds	r0, #1
 800f792:	d09d      	beq.n	800f6d0 <_printf_i+0x160>
 800f794:	3501      	adds	r5, #1
 800f796:	68e3      	ldr	r3, [r4, #12]
 800f798:	9903      	ldr	r1, [sp, #12]
 800f79a:	1a5b      	subs	r3, r3, r1
 800f79c:	42ab      	cmp	r3, r5
 800f79e:	dcf2      	bgt.n	800f786 <_printf_i+0x216>
 800f7a0:	e7eb      	b.n	800f77a <_printf_i+0x20a>
 800f7a2:	2500      	movs	r5, #0
 800f7a4:	f104 0619 	add.w	r6, r4, #25
 800f7a8:	e7f5      	b.n	800f796 <_printf_i+0x226>
 800f7aa:	bf00      	nop
 800f7ac:	0801264b 	.word	0x0801264b
 800f7b0:	0801265c 	.word	0x0801265c

0800f7b4 <__sflush_r>:
 800f7b4:	898a      	ldrh	r2, [r1, #12]
 800f7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	0710      	lsls	r0, r2, #28
 800f7be:	460c      	mov	r4, r1
 800f7c0:	d458      	bmi.n	800f874 <__sflush_r+0xc0>
 800f7c2:	684b      	ldr	r3, [r1, #4]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	dc05      	bgt.n	800f7d4 <__sflush_r+0x20>
 800f7c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	dc02      	bgt.n	800f7d4 <__sflush_r+0x20>
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7d6:	2e00      	cmp	r6, #0
 800f7d8:	d0f9      	beq.n	800f7ce <__sflush_r+0x1a>
 800f7da:	2300      	movs	r3, #0
 800f7dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f7e0:	682f      	ldr	r7, [r5, #0]
 800f7e2:	6a21      	ldr	r1, [r4, #32]
 800f7e4:	602b      	str	r3, [r5, #0]
 800f7e6:	d032      	beq.n	800f84e <__sflush_r+0x9a>
 800f7e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f7ea:	89a3      	ldrh	r3, [r4, #12]
 800f7ec:	075a      	lsls	r2, r3, #29
 800f7ee:	d505      	bpl.n	800f7fc <__sflush_r+0x48>
 800f7f0:	6863      	ldr	r3, [r4, #4]
 800f7f2:	1ac0      	subs	r0, r0, r3
 800f7f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f7f6:	b10b      	cbz	r3, 800f7fc <__sflush_r+0x48>
 800f7f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f7fa:	1ac0      	subs	r0, r0, r3
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	4602      	mov	r2, r0
 800f800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f802:	6a21      	ldr	r1, [r4, #32]
 800f804:	4628      	mov	r0, r5
 800f806:	47b0      	blx	r6
 800f808:	1c43      	adds	r3, r0, #1
 800f80a:	89a3      	ldrh	r3, [r4, #12]
 800f80c:	d106      	bne.n	800f81c <__sflush_r+0x68>
 800f80e:	6829      	ldr	r1, [r5, #0]
 800f810:	291d      	cmp	r1, #29
 800f812:	d82b      	bhi.n	800f86c <__sflush_r+0xb8>
 800f814:	4a29      	ldr	r2, [pc, #164]	; (800f8bc <__sflush_r+0x108>)
 800f816:	410a      	asrs	r2, r1
 800f818:	07d6      	lsls	r6, r2, #31
 800f81a:	d427      	bmi.n	800f86c <__sflush_r+0xb8>
 800f81c:	2200      	movs	r2, #0
 800f81e:	6062      	str	r2, [r4, #4]
 800f820:	04d9      	lsls	r1, r3, #19
 800f822:	6922      	ldr	r2, [r4, #16]
 800f824:	6022      	str	r2, [r4, #0]
 800f826:	d504      	bpl.n	800f832 <__sflush_r+0x7e>
 800f828:	1c42      	adds	r2, r0, #1
 800f82a:	d101      	bne.n	800f830 <__sflush_r+0x7c>
 800f82c:	682b      	ldr	r3, [r5, #0]
 800f82e:	b903      	cbnz	r3, 800f832 <__sflush_r+0x7e>
 800f830:	6560      	str	r0, [r4, #84]	; 0x54
 800f832:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f834:	602f      	str	r7, [r5, #0]
 800f836:	2900      	cmp	r1, #0
 800f838:	d0c9      	beq.n	800f7ce <__sflush_r+0x1a>
 800f83a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f83e:	4299      	cmp	r1, r3
 800f840:	d002      	beq.n	800f848 <__sflush_r+0x94>
 800f842:	4628      	mov	r0, r5
 800f844:	f001 f99e 	bl	8010b84 <_free_r>
 800f848:	2000      	movs	r0, #0
 800f84a:	6360      	str	r0, [r4, #52]	; 0x34
 800f84c:	e7c0      	b.n	800f7d0 <__sflush_r+0x1c>
 800f84e:	2301      	movs	r3, #1
 800f850:	4628      	mov	r0, r5
 800f852:	47b0      	blx	r6
 800f854:	1c41      	adds	r1, r0, #1
 800f856:	d1c8      	bne.n	800f7ea <__sflush_r+0x36>
 800f858:	682b      	ldr	r3, [r5, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d0c5      	beq.n	800f7ea <__sflush_r+0x36>
 800f85e:	2b1d      	cmp	r3, #29
 800f860:	d001      	beq.n	800f866 <__sflush_r+0xb2>
 800f862:	2b16      	cmp	r3, #22
 800f864:	d101      	bne.n	800f86a <__sflush_r+0xb6>
 800f866:	602f      	str	r7, [r5, #0]
 800f868:	e7b1      	b.n	800f7ce <__sflush_r+0x1a>
 800f86a:	89a3      	ldrh	r3, [r4, #12]
 800f86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f870:	81a3      	strh	r3, [r4, #12]
 800f872:	e7ad      	b.n	800f7d0 <__sflush_r+0x1c>
 800f874:	690f      	ldr	r7, [r1, #16]
 800f876:	2f00      	cmp	r7, #0
 800f878:	d0a9      	beq.n	800f7ce <__sflush_r+0x1a>
 800f87a:	0793      	lsls	r3, r2, #30
 800f87c:	680e      	ldr	r6, [r1, #0]
 800f87e:	bf08      	it	eq
 800f880:	694b      	ldreq	r3, [r1, #20]
 800f882:	600f      	str	r7, [r1, #0]
 800f884:	bf18      	it	ne
 800f886:	2300      	movne	r3, #0
 800f888:	eba6 0807 	sub.w	r8, r6, r7
 800f88c:	608b      	str	r3, [r1, #8]
 800f88e:	f1b8 0f00 	cmp.w	r8, #0
 800f892:	dd9c      	ble.n	800f7ce <__sflush_r+0x1a>
 800f894:	6a21      	ldr	r1, [r4, #32]
 800f896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f898:	4643      	mov	r3, r8
 800f89a:	463a      	mov	r2, r7
 800f89c:	4628      	mov	r0, r5
 800f89e:	47b0      	blx	r6
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	dc06      	bgt.n	800f8b2 <__sflush_r+0xfe>
 800f8a4:	89a3      	ldrh	r3, [r4, #12]
 800f8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8aa:	81a3      	strh	r3, [r4, #12]
 800f8ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8b0:	e78e      	b.n	800f7d0 <__sflush_r+0x1c>
 800f8b2:	4407      	add	r7, r0
 800f8b4:	eba8 0800 	sub.w	r8, r8, r0
 800f8b8:	e7e9      	b.n	800f88e <__sflush_r+0xda>
 800f8ba:	bf00      	nop
 800f8bc:	dfbffffe 	.word	0xdfbffffe

0800f8c0 <_fflush_r>:
 800f8c0:	b538      	push	{r3, r4, r5, lr}
 800f8c2:	690b      	ldr	r3, [r1, #16]
 800f8c4:	4605      	mov	r5, r0
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	b913      	cbnz	r3, 800f8d0 <_fflush_r+0x10>
 800f8ca:	2500      	movs	r5, #0
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	bd38      	pop	{r3, r4, r5, pc}
 800f8d0:	b118      	cbz	r0, 800f8da <_fflush_r+0x1a>
 800f8d2:	6a03      	ldr	r3, [r0, #32]
 800f8d4:	b90b      	cbnz	r3, 800f8da <_fflush_r+0x1a>
 800f8d6:	f000 f8bb 	bl	800fa50 <__sinit>
 800f8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d0f3      	beq.n	800f8ca <_fflush_r+0xa>
 800f8e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f8e4:	07d0      	lsls	r0, r2, #31
 800f8e6:	d404      	bmi.n	800f8f2 <_fflush_r+0x32>
 800f8e8:	0599      	lsls	r1, r3, #22
 800f8ea:	d402      	bmi.n	800f8f2 <_fflush_r+0x32>
 800f8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8ee:	f000 fabe 	bl	800fe6e <__retarget_lock_acquire_recursive>
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	4621      	mov	r1, r4
 800f8f6:	f7ff ff5d 	bl	800f7b4 <__sflush_r>
 800f8fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8fc:	07da      	lsls	r2, r3, #31
 800f8fe:	4605      	mov	r5, r0
 800f900:	d4e4      	bmi.n	800f8cc <_fflush_r+0xc>
 800f902:	89a3      	ldrh	r3, [r4, #12]
 800f904:	059b      	lsls	r3, r3, #22
 800f906:	d4e1      	bmi.n	800f8cc <_fflush_r+0xc>
 800f908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f90a:	f000 fab1 	bl	800fe70 <__retarget_lock_release_recursive>
 800f90e:	e7dd      	b.n	800f8cc <_fflush_r+0xc>

0800f910 <fflush>:
 800f910:	4601      	mov	r1, r0
 800f912:	b920      	cbnz	r0, 800f91e <fflush+0xe>
 800f914:	4a04      	ldr	r2, [pc, #16]	; (800f928 <fflush+0x18>)
 800f916:	4905      	ldr	r1, [pc, #20]	; (800f92c <fflush+0x1c>)
 800f918:	4805      	ldr	r0, [pc, #20]	; (800f930 <fflush+0x20>)
 800f91a:	f000 b8b1 	b.w	800fa80 <_fwalk_sglue>
 800f91e:	4b05      	ldr	r3, [pc, #20]	; (800f934 <fflush+0x24>)
 800f920:	6818      	ldr	r0, [r3, #0]
 800f922:	f7ff bfcd 	b.w	800f8c0 <_fflush_r>
 800f926:	bf00      	nop
 800f928:	200001bc 	.word	0x200001bc
 800f92c:	0800f8c1 	.word	0x0800f8c1
 800f930:	200001c8 	.word	0x200001c8
 800f934:	20000214 	.word	0x20000214

0800f938 <std>:
 800f938:	2300      	movs	r3, #0
 800f93a:	b510      	push	{r4, lr}
 800f93c:	4604      	mov	r4, r0
 800f93e:	e9c0 3300 	strd	r3, r3, [r0]
 800f942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f946:	6083      	str	r3, [r0, #8]
 800f948:	8181      	strh	r1, [r0, #12]
 800f94a:	6643      	str	r3, [r0, #100]	; 0x64
 800f94c:	81c2      	strh	r2, [r0, #14]
 800f94e:	6183      	str	r3, [r0, #24]
 800f950:	4619      	mov	r1, r3
 800f952:	2208      	movs	r2, #8
 800f954:	305c      	adds	r0, #92	; 0x5c
 800f956:	f000 f9a3 	bl	800fca0 <memset>
 800f95a:	4b0d      	ldr	r3, [pc, #52]	; (800f990 <std+0x58>)
 800f95c:	6263      	str	r3, [r4, #36]	; 0x24
 800f95e:	4b0d      	ldr	r3, [pc, #52]	; (800f994 <std+0x5c>)
 800f960:	62a3      	str	r3, [r4, #40]	; 0x28
 800f962:	4b0d      	ldr	r3, [pc, #52]	; (800f998 <std+0x60>)
 800f964:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f966:	4b0d      	ldr	r3, [pc, #52]	; (800f99c <std+0x64>)
 800f968:	6323      	str	r3, [r4, #48]	; 0x30
 800f96a:	4b0d      	ldr	r3, [pc, #52]	; (800f9a0 <std+0x68>)
 800f96c:	6224      	str	r4, [r4, #32]
 800f96e:	429c      	cmp	r4, r3
 800f970:	d006      	beq.n	800f980 <std+0x48>
 800f972:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f976:	4294      	cmp	r4, r2
 800f978:	d002      	beq.n	800f980 <std+0x48>
 800f97a:	33d0      	adds	r3, #208	; 0xd0
 800f97c:	429c      	cmp	r4, r3
 800f97e:	d105      	bne.n	800f98c <std+0x54>
 800f980:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f988:	f000 ba70 	b.w	800fe6c <__retarget_lock_init_recursive>
 800f98c:	bd10      	pop	{r4, pc}
 800f98e:	bf00      	nop
 800f990:	0800faf1 	.word	0x0800faf1
 800f994:	0800fb13 	.word	0x0800fb13
 800f998:	0800fb4b 	.word	0x0800fb4b
 800f99c:	0800fb6f 	.word	0x0800fb6f
 800f9a0:	20008604 	.word	0x20008604

0800f9a4 <stdio_exit_handler>:
 800f9a4:	4a02      	ldr	r2, [pc, #8]	; (800f9b0 <stdio_exit_handler+0xc>)
 800f9a6:	4903      	ldr	r1, [pc, #12]	; (800f9b4 <stdio_exit_handler+0x10>)
 800f9a8:	4803      	ldr	r0, [pc, #12]	; (800f9b8 <stdio_exit_handler+0x14>)
 800f9aa:	f000 b869 	b.w	800fa80 <_fwalk_sglue>
 800f9ae:	bf00      	nop
 800f9b0:	200001bc 	.word	0x200001bc
 800f9b4:	0800f8c1 	.word	0x0800f8c1
 800f9b8:	200001c8 	.word	0x200001c8

0800f9bc <cleanup_stdio>:
 800f9bc:	6841      	ldr	r1, [r0, #4]
 800f9be:	4b0c      	ldr	r3, [pc, #48]	; (800f9f0 <cleanup_stdio+0x34>)
 800f9c0:	4299      	cmp	r1, r3
 800f9c2:	b510      	push	{r4, lr}
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	d001      	beq.n	800f9cc <cleanup_stdio+0x10>
 800f9c8:	f7ff ff7a 	bl	800f8c0 <_fflush_r>
 800f9cc:	68a1      	ldr	r1, [r4, #8]
 800f9ce:	4b09      	ldr	r3, [pc, #36]	; (800f9f4 <cleanup_stdio+0x38>)
 800f9d0:	4299      	cmp	r1, r3
 800f9d2:	d002      	beq.n	800f9da <cleanup_stdio+0x1e>
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f7ff ff73 	bl	800f8c0 <_fflush_r>
 800f9da:	68e1      	ldr	r1, [r4, #12]
 800f9dc:	4b06      	ldr	r3, [pc, #24]	; (800f9f8 <cleanup_stdio+0x3c>)
 800f9de:	4299      	cmp	r1, r3
 800f9e0:	d004      	beq.n	800f9ec <cleanup_stdio+0x30>
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9e8:	f7ff bf6a 	b.w	800f8c0 <_fflush_r>
 800f9ec:	bd10      	pop	{r4, pc}
 800f9ee:	bf00      	nop
 800f9f0:	20008604 	.word	0x20008604
 800f9f4:	2000866c 	.word	0x2000866c
 800f9f8:	200086d4 	.word	0x200086d4

0800f9fc <global_stdio_init.part.0>:
 800f9fc:	b510      	push	{r4, lr}
 800f9fe:	4b0b      	ldr	r3, [pc, #44]	; (800fa2c <global_stdio_init.part.0+0x30>)
 800fa00:	4c0b      	ldr	r4, [pc, #44]	; (800fa30 <global_stdio_init.part.0+0x34>)
 800fa02:	4a0c      	ldr	r2, [pc, #48]	; (800fa34 <global_stdio_init.part.0+0x38>)
 800fa04:	601a      	str	r2, [r3, #0]
 800fa06:	4620      	mov	r0, r4
 800fa08:	2200      	movs	r2, #0
 800fa0a:	2104      	movs	r1, #4
 800fa0c:	f7ff ff94 	bl	800f938 <std>
 800fa10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fa14:	2201      	movs	r2, #1
 800fa16:	2109      	movs	r1, #9
 800fa18:	f7ff ff8e 	bl	800f938 <std>
 800fa1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fa20:	2202      	movs	r2, #2
 800fa22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa26:	2112      	movs	r1, #18
 800fa28:	f7ff bf86 	b.w	800f938 <std>
 800fa2c:	2000873c 	.word	0x2000873c
 800fa30:	20008604 	.word	0x20008604
 800fa34:	0800f9a5 	.word	0x0800f9a5

0800fa38 <__sfp_lock_acquire>:
 800fa38:	4801      	ldr	r0, [pc, #4]	; (800fa40 <__sfp_lock_acquire+0x8>)
 800fa3a:	f000 ba18 	b.w	800fe6e <__retarget_lock_acquire_recursive>
 800fa3e:	bf00      	nop
 800fa40:	20008745 	.word	0x20008745

0800fa44 <__sfp_lock_release>:
 800fa44:	4801      	ldr	r0, [pc, #4]	; (800fa4c <__sfp_lock_release+0x8>)
 800fa46:	f000 ba13 	b.w	800fe70 <__retarget_lock_release_recursive>
 800fa4a:	bf00      	nop
 800fa4c:	20008745 	.word	0x20008745

0800fa50 <__sinit>:
 800fa50:	b510      	push	{r4, lr}
 800fa52:	4604      	mov	r4, r0
 800fa54:	f7ff fff0 	bl	800fa38 <__sfp_lock_acquire>
 800fa58:	6a23      	ldr	r3, [r4, #32]
 800fa5a:	b11b      	cbz	r3, 800fa64 <__sinit+0x14>
 800fa5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa60:	f7ff bff0 	b.w	800fa44 <__sfp_lock_release>
 800fa64:	4b04      	ldr	r3, [pc, #16]	; (800fa78 <__sinit+0x28>)
 800fa66:	6223      	str	r3, [r4, #32]
 800fa68:	4b04      	ldr	r3, [pc, #16]	; (800fa7c <__sinit+0x2c>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d1f5      	bne.n	800fa5c <__sinit+0xc>
 800fa70:	f7ff ffc4 	bl	800f9fc <global_stdio_init.part.0>
 800fa74:	e7f2      	b.n	800fa5c <__sinit+0xc>
 800fa76:	bf00      	nop
 800fa78:	0800f9bd 	.word	0x0800f9bd
 800fa7c:	2000873c 	.word	0x2000873c

0800fa80 <_fwalk_sglue>:
 800fa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa84:	4607      	mov	r7, r0
 800fa86:	4688      	mov	r8, r1
 800fa88:	4614      	mov	r4, r2
 800fa8a:	2600      	movs	r6, #0
 800fa8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa90:	f1b9 0901 	subs.w	r9, r9, #1
 800fa94:	d505      	bpl.n	800faa2 <_fwalk_sglue+0x22>
 800fa96:	6824      	ldr	r4, [r4, #0]
 800fa98:	2c00      	cmp	r4, #0
 800fa9a:	d1f7      	bne.n	800fa8c <_fwalk_sglue+0xc>
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faa2:	89ab      	ldrh	r3, [r5, #12]
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d907      	bls.n	800fab8 <_fwalk_sglue+0x38>
 800faa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800faac:	3301      	adds	r3, #1
 800faae:	d003      	beq.n	800fab8 <_fwalk_sglue+0x38>
 800fab0:	4629      	mov	r1, r5
 800fab2:	4638      	mov	r0, r7
 800fab4:	47c0      	blx	r8
 800fab6:	4306      	orrs	r6, r0
 800fab8:	3568      	adds	r5, #104	; 0x68
 800faba:	e7e9      	b.n	800fa90 <_fwalk_sglue+0x10>

0800fabc <iprintf>:
 800fabc:	b40f      	push	{r0, r1, r2, r3}
 800fabe:	b507      	push	{r0, r1, r2, lr}
 800fac0:	4906      	ldr	r1, [pc, #24]	; (800fadc <iprintf+0x20>)
 800fac2:	ab04      	add	r3, sp, #16
 800fac4:	6808      	ldr	r0, [r1, #0]
 800fac6:	f853 2b04 	ldr.w	r2, [r3], #4
 800faca:	6881      	ldr	r1, [r0, #8]
 800facc:	9301      	str	r3, [sp, #4]
 800face:	f001 fcff 	bl	80114d0 <_vfiprintf_r>
 800fad2:	b003      	add	sp, #12
 800fad4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fad8:	b004      	add	sp, #16
 800fada:	4770      	bx	lr
 800fadc:	20000214 	.word	0x20000214

0800fae0 <putchar>:
 800fae0:	4b02      	ldr	r3, [pc, #8]	; (800faec <putchar+0xc>)
 800fae2:	4601      	mov	r1, r0
 800fae4:	6818      	ldr	r0, [r3, #0]
 800fae6:	6882      	ldr	r2, [r0, #8]
 800fae8:	f001 be6e 	b.w	80117c8 <_putc_r>
 800faec:	20000214 	.word	0x20000214

0800faf0 <__sread>:
 800faf0:	b510      	push	{r4, lr}
 800faf2:	460c      	mov	r4, r1
 800faf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faf8:	f000 f96a 	bl	800fdd0 <_read_r>
 800fafc:	2800      	cmp	r0, #0
 800fafe:	bfab      	itete	ge
 800fb00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fb02:	89a3      	ldrhlt	r3, [r4, #12]
 800fb04:	181b      	addge	r3, r3, r0
 800fb06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fb0a:	bfac      	ite	ge
 800fb0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fb0e:	81a3      	strhlt	r3, [r4, #12]
 800fb10:	bd10      	pop	{r4, pc}

0800fb12 <__swrite>:
 800fb12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb16:	461f      	mov	r7, r3
 800fb18:	898b      	ldrh	r3, [r1, #12]
 800fb1a:	05db      	lsls	r3, r3, #23
 800fb1c:	4605      	mov	r5, r0
 800fb1e:	460c      	mov	r4, r1
 800fb20:	4616      	mov	r6, r2
 800fb22:	d505      	bpl.n	800fb30 <__swrite+0x1e>
 800fb24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb28:	2302      	movs	r3, #2
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	f000 f93e 	bl	800fdac <_lseek_r>
 800fb30:	89a3      	ldrh	r3, [r4, #12]
 800fb32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb3a:	81a3      	strh	r3, [r4, #12]
 800fb3c:	4632      	mov	r2, r6
 800fb3e:	463b      	mov	r3, r7
 800fb40:	4628      	mov	r0, r5
 800fb42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb46:	f000 b955 	b.w	800fdf4 <_write_r>

0800fb4a <__sseek>:
 800fb4a:	b510      	push	{r4, lr}
 800fb4c:	460c      	mov	r4, r1
 800fb4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb52:	f000 f92b 	bl	800fdac <_lseek_r>
 800fb56:	1c43      	adds	r3, r0, #1
 800fb58:	89a3      	ldrh	r3, [r4, #12]
 800fb5a:	bf15      	itete	ne
 800fb5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb66:	81a3      	strheq	r3, [r4, #12]
 800fb68:	bf18      	it	ne
 800fb6a:	81a3      	strhne	r3, [r4, #12]
 800fb6c:	bd10      	pop	{r4, pc}

0800fb6e <__sclose>:
 800fb6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb72:	f000 b8b5 	b.w	800fce0 <_close_r>

0800fb76 <__swbuf_r>:
 800fb76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb78:	460e      	mov	r6, r1
 800fb7a:	4614      	mov	r4, r2
 800fb7c:	4605      	mov	r5, r0
 800fb7e:	b118      	cbz	r0, 800fb88 <__swbuf_r+0x12>
 800fb80:	6a03      	ldr	r3, [r0, #32]
 800fb82:	b90b      	cbnz	r3, 800fb88 <__swbuf_r+0x12>
 800fb84:	f7ff ff64 	bl	800fa50 <__sinit>
 800fb88:	69a3      	ldr	r3, [r4, #24]
 800fb8a:	60a3      	str	r3, [r4, #8]
 800fb8c:	89a3      	ldrh	r3, [r4, #12]
 800fb8e:	071a      	lsls	r2, r3, #28
 800fb90:	d525      	bpl.n	800fbde <__swbuf_r+0x68>
 800fb92:	6923      	ldr	r3, [r4, #16]
 800fb94:	b31b      	cbz	r3, 800fbde <__swbuf_r+0x68>
 800fb96:	6823      	ldr	r3, [r4, #0]
 800fb98:	6922      	ldr	r2, [r4, #16]
 800fb9a:	1a98      	subs	r0, r3, r2
 800fb9c:	6963      	ldr	r3, [r4, #20]
 800fb9e:	b2f6      	uxtb	r6, r6
 800fba0:	4283      	cmp	r3, r0
 800fba2:	4637      	mov	r7, r6
 800fba4:	dc04      	bgt.n	800fbb0 <__swbuf_r+0x3a>
 800fba6:	4621      	mov	r1, r4
 800fba8:	4628      	mov	r0, r5
 800fbaa:	f7ff fe89 	bl	800f8c0 <_fflush_r>
 800fbae:	b9e0      	cbnz	r0, 800fbea <__swbuf_r+0x74>
 800fbb0:	68a3      	ldr	r3, [r4, #8]
 800fbb2:	3b01      	subs	r3, #1
 800fbb4:	60a3      	str	r3, [r4, #8]
 800fbb6:	6823      	ldr	r3, [r4, #0]
 800fbb8:	1c5a      	adds	r2, r3, #1
 800fbba:	6022      	str	r2, [r4, #0]
 800fbbc:	701e      	strb	r6, [r3, #0]
 800fbbe:	6962      	ldr	r2, [r4, #20]
 800fbc0:	1c43      	adds	r3, r0, #1
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d004      	beq.n	800fbd0 <__swbuf_r+0x5a>
 800fbc6:	89a3      	ldrh	r3, [r4, #12]
 800fbc8:	07db      	lsls	r3, r3, #31
 800fbca:	d506      	bpl.n	800fbda <__swbuf_r+0x64>
 800fbcc:	2e0a      	cmp	r6, #10
 800fbce:	d104      	bne.n	800fbda <__swbuf_r+0x64>
 800fbd0:	4621      	mov	r1, r4
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	f7ff fe74 	bl	800f8c0 <_fflush_r>
 800fbd8:	b938      	cbnz	r0, 800fbea <__swbuf_r+0x74>
 800fbda:	4638      	mov	r0, r7
 800fbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbde:	4621      	mov	r1, r4
 800fbe0:	4628      	mov	r0, r5
 800fbe2:	f000 f805 	bl	800fbf0 <__swsetup_r>
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	d0d5      	beq.n	800fb96 <__swbuf_r+0x20>
 800fbea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fbee:	e7f4      	b.n	800fbda <__swbuf_r+0x64>

0800fbf0 <__swsetup_r>:
 800fbf0:	b538      	push	{r3, r4, r5, lr}
 800fbf2:	4b2a      	ldr	r3, [pc, #168]	; (800fc9c <__swsetup_r+0xac>)
 800fbf4:	4605      	mov	r5, r0
 800fbf6:	6818      	ldr	r0, [r3, #0]
 800fbf8:	460c      	mov	r4, r1
 800fbfa:	b118      	cbz	r0, 800fc04 <__swsetup_r+0x14>
 800fbfc:	6a03      	ldr	r3, [r0, #32]
 800fbfe:	b90b      	cbnz	r3, 800fc04 <__swsetup_r+0x14>
 800fc00:	f7ff ff26 	bl	800fa50 <__sinit>
 800fc04:	89a3      	ldrh	r3, [r4, #12]
 800fc06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc0a:	0718      	lsls	r0, r3, #28
 800fc0c:	d422      	bmi.n	800fc54 <__swsetup_r+0x64>
 800fc0e:	06d9      	lsls	r1, r3, #27
 800fc10:	d407      	bmi.n	800fc22 <__swsetup_r+0x32>
 800fc12:	2309      	movs	r3, #9
 800fc14:	602b      	str	r3, [r5, #0]
 800fc16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fc1a:	81a3      	strh	r3, [r4, #12]
 800fc1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc20:	e034      	b.n	800fc8c <__swsetup_r+0x9c>
 800fc22:	0758      	lsls	r0, r3, #29
 800fc24:	d512      	bpl.n	800fc4c <__swsetup_r+0x5c>
 800fc26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc28:	b141      	cbz	r1, 800fc3c <__swsetup_r+0x4c>
 800fc2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc2e:	4299      	cmp	r1, r3
 800fc30:	d002      	beq.n	800fc38 <__swsetup_r+0x48>
 800fc32:	4628      	mov	r0, r5
 800fc34:	f000 ffa6 	bl	8010b84 <_free_r>
 800fc38:	2300      	movs	r3, #0
 800fc3a:	6363      	str	r3, [r4, #52]	; 0x34
 800fc3c:	89a3      	ldrh	r3, [r4, #12]
 800fc3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fc42:	81a3      	strh	r3, [r4, #12]
 800fc44:	2300      	movs	r3, #0
 800fc46:	6063      	str	r3, [r4, #4]
 800fc48:	6923      	ldr	r3, [r4, #16]
 800fc4a:	6023      	str	r3, [r4, #0]
 800fc4c:	89a3      	ldrh	r3, [r4, #12]
 800fc4e:	f043 0308 	orr.w	r3, r3, #8
 800fc52:	81a3      	strh	r3, [r4, #12]
 800fc54:	6923      	ldr	r3, [r4, #16]
 800fc56:	b94b      	cbnz	r3, 800fc6c <__swsetup_r+0x7c>
 800fc58:	89a3      	ldrh	r3, [r4, #12]
 800fc5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fc5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc62:	d003      	beq.n	800fc6c <__swsetup_r+0x7c>
 800fc64:	4621      	mov	r1, r4
 800fc66:	4628      	mov	r0, r5
 800fc68:	f001 fd72 	bl	8011750 <__smakebuf_r>
 800fc6c:	89a0      	ldrh	r0, [r4, #12]
 800fc6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc72:	f010 0301 	ands.w	r3, r0, #1
 800fc76:	d00a      	beq.n	800fc8e <__swsetup_r+0x9e>
 800fc78:	2300      	movs	r3, #0
 800fc7a:	60a3      	str	r3, [r4, #8]
 800fc7c:	6963      	ldr	r3, [r4, #20]
 800fc7e:	425b      	negs	r3, r3
 800fc80:	61a3      	str	r3, [r4, #24]
 800fc82:	6923      	ldr	r3, [r4, #16]
 800fc84:	b943      	cbnz	r3, 800fc98 <__swsetup_r+0xa8>
 800fc86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fc8a:	d1c4      	bne.n	800fc16 <__swsetup_r+0x26>
 800fc8c:	bd38      	pop	{r3, r4, r5, pc}
 800fc8e:	0781      	lsls	r1, r0, #30
 800fc90:	bf58      	it	pl
 800fc92:	6963      	ldrpl	r3, [r4, #20]
 800fc94:	60a3      	str	r3, [r4, #8]
 800fc96:	e7f4      	b.n	800fc82 <__swsetup_r+0x92>
 800fc98:	2000      	movs	r0, #0
 800fc9a:	e7f7      	b.n	800fc8c <__swsetup_r+0x9c>
 800fc9c:	20000214 	.word	0x20000214

0800fca0 <memset>:
 800fca0:	4402      	add	r2, r0
 800fca2:	4603      	mov	r3, r0
 800fca4:	4293      	cmp	r3, r2
 800fca6:	d100      	bne.n	800fcaa <memset+0xa>
 800fca8:	4770      	bx	lr
 800fcaa:	f803 1b01 	strb.w	r1, [r3], #1
 800fcae:	e7f9      	b.n	800fca4 <memset+0x4>

0800fcb0 <strncpy>:
 800fcb0:	b510      	push	{r4, lr}
 800fcb2:	3901      	subs	r1, #1
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	b132      	cbz	r2, 800fcc6 <strncpy+0x16>
 800fcb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fcbc:	f803 4b01 	strb.w	r4, [r3], #1
 800fcc0:	3a01      	subs	r2, #1
 800fcc2:	2c00      	cmp	r4, #0
 800fcc4:	d1f7      	bne.n	800fcb6 <strncpy+0x6>
 800fcc6:	441a      	add	r2, r3
 800fcc8:	2100      	movs	r1, #0
 800fcca:	4293      	cmp	r3, r2
 800fccc:	d100      	bne.n	800fcd0 <strncpy+0x20>
 800fcce:	bd10      	pop	{r4, pc}
 800fcd0:	f803 1b01 	strb.w	r1, [r3], #1
 800fcd4:	e7f9      	b.n	800fcca <strncpy+0x1a>
	...

0800fcd8 <_localeconv_r>:
 800fcd8:	4800      	ldr	r0, [pc, #0]	; (800fcdc <_localeconv_r+0x4>)
 800fcda:	4770      	bx	lr
 800fcdc:	20000308 	.word	0x20000308

0800fce0 <_close_r>:
 800fce0:	b538      	push	{r3, r4, r5, lr}
 800fce2:	4d06      	ldr	r5, [pc, #24]	; (800fcfc <_close_r+0x1c>)
 800fce4:	2300      	movs	r3, #0
 800fce6:	4604      	mov	r4, r0
 800fce8:	4608      	mov	r0, r1
 800fcea:	602b      	str	r3, [r5, #0]
 800fcec:	f7f3 fc6f 	bl	80035ce <_close>
 800fcf0:	1c43      	adds	r3, r0, #1
 800fcf2:	d102      	bne.n	800fcfa <_close_r+0x1a>
 800fcf4:	682b      	ldr	r3, [r5, #0]
 800fcf6:	b103      	cbz	r3, 800fcfa <_close_r+0x1a>
 800fcf8:	6023      	str	r3, [r4, #0]
 800fcfa:	bd38      	pop	{r3, r4, r5, pc}
 800fcfc:	20008740 	.word	0x20008740

0800fd00 <_reclaim_reent>:
 800fd00:	4b29      	ldr	r3, [pc, #164]	; (800fda8 <_reclaim_reent+0xa8>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4283      	cmp	r3, r0
 800fd06:	b570      	push	{r4, r5, r6, lr}
 800fd08:	4604      	mov	r4, r0
 800fd0a:	d04b      	beq.n	800fda4 <_reclaim_reent+0xa4>
 800fd0c:	69c3      	ldr	r3, [r0, #28]
 800fd0e:	b143      	cbz	r3, 800fd22 <_reclaim_reent+0x22>
 800fd10:	68db      	ldr	r3, [r3, #12]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d144      	bne.n	800fda0 <_reclaim_reent+0xa0>
 800fd16:	69e3      	ldr	r3, [r4, #28]
 800fd18:	6819      	ldr	r1, [r3, #0]
 800fd1a:	b111      	cbz	r1, 800fd22 <_reclaim_reent+0x22>
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	f000 ff31 	bl	8010b84 <_free_r>
 800fd22:	6961      	ldr	r1, [r4, #20]
 800fd24:	b111      	cbz	r1, 800fd2c <_reclaim_reent+0x2c>
 800fd26:	4620      	mov	r0, r4
 800fd28:	f000 ff2c 	bl	8010b84 <_free_r>
 800fd2c:	69e1      	ldr	r1, [r4, #28]
 800fd2e:	b111      	cbz	r1, 800fd36 <_reclaim_reent+0x36>
 800fd30:	4620      	mov	r0, r4
 800fd32:	f000 ff27 	bl	8010b84 <_free_r>
 800fd36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fd38:	b111      	cbz	r1, 800fd40 <_reclaim_reent+0x40>
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f000 ff22 	bl	8010b84 <_free_r>
 800fd40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd42:	b111      	cbz	r1, 800fd4a <_reclaim_reent+0x4a>
 800fd44:	4620      	mov	r0, r4
 800fd46:	f000 ff1d 	bl	8010b84 <_free_r>
 800fd4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd4c:	b111      	cbz	r1, 800fd54 <_reclaim_reent+0x54>
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f000 ff18 	bl	8010b84 <_free_r>
 800fd54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fd56:	b111      	cbz	r1, 800fd5e <_reclaim_reent+0x5e>
 800fd58:	4620      	mov	r0, r4
 800fd5a:	f000 ff13 	bl	8010b84 <_free_r>
 800fd5e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800fd60:	b111      	cbz	r1, 800fd68 <_reclaim_reent+0x68>
 800fd62:	4620      	mov	r0, r4
 800fd64:	f000 ff0e 	bl	8010b84 <_free_r>
 800fd68:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fd6a:	b111      	cbz	r1, 800fd72 <_reclaim_reent+0x72>
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	f000 ff09 	bl	8010b84 <_free_r>
 800fd72:	6a23      	ldr	r3, [r4, #32]
 800fd74:	b1b3      	cbz	r3, 800fda4 <_reclaim_reent+0xa4>
 800fd76:	4620      	mov	r0, r4
 800fd78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd7c:	4718      	bx	r3
 800fd7e:	5949      	ldr	r1, [r1, r5]
 800fd80:	b941      	cbnz	r1, 800fd94 <_reclaim_reent+0x94>
 800fd82:	3504      	adds	r5, #4
 800fd84:	69e3      	ldr	r3, [r4, #28]
 800fd86:	2d80      	cmp	r5, #128	; 0x80
 800fd88:	68d9      	ldr	r1, [r3, #12]
 800fd8a:	d1f8      	bne.n	800fd7e <_reclaim_reent+0x7e>
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	f000 fef9 	bl	8010b84 <_free_r>
 800fd92:	e7c0      	b.n	800fd16 <_reclaim_reent+0x16>
 800fd94:	680e      	ldr	r6, [r1, #0]
 800fd96:	4620      	mov	r0, r4
 800fd98:	f000 fef4 	bl	8010b84 <_free_r>
 800fd9c:	4631      	mov	r1, r6
 800fd9e:	e7ef      	b.n	800fd80 <_reclaim_reent+0x80>
 800fda0:	2500      	movs	r5, #0
 800fda2:	e7ef      	b.n	800fd84 <_reclaim_reent+0x84>
 800fda4:	bd70      	pop	{r4, r5, r6, pc}
 800fda6:	bf00      	nop
 800fda8:	20000214 	.word	0x20000214

0800fdac <_lseek_r>:
 800fdac:	b538      	push	{r3, r4, r5, lr}
 800fdae:	4d07      	ldr	r5, [pc, #28]	; (800fdcc <_lseek_r+0x20>)
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	4608      	mov	r0, r1
 800fdb4:	4611      	mov	r1, r2
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	602a      	str	r2, [r5, #0]
 800fdba:	461a      	mov	r2, r3
 800fdbc:	f7f3 fc2e 	bl	800361c <_lseek>
 800fdc0:	1c43      	adds	r3, r0, #1
 800fdc2:	d102      	bne.n	800fdca <_lseek_r+0x1e>
 800fdc4:	682b      	ldr	r3, [r5, #0]
 800fdc6:	b103      	cbz	r3, 800fdca <_lseek_r+0x1e>
 800fdc8:	6023      	str	r3, [r4, #0]
 800fdca:	bd38      	pop	{r3, r4, r5, pc}
 800fdcc:	20008740 	.word	0x20008740

0800fdd0 <_read_r>:
 800fdd0:	b538      	push	{r3, r4, r5, lr}
 800fdd2:	4d07      	ldr	r5, [pc, #28]	; (800fdf0 <_read_r+0x20>)
 800fdd4:	4604      	mov	r4, r0
 800fdd6:	4608      	mov	r0, r1
 800fdd8:	4611      	mov	r1, r2
 800fdda:	2200      	movs	r2, #0
 800fddc:	602a      	str	r2, [r5, #0]
 800fdde:	461a      	mov	r2, r3
 800fde0:	f7f3 fbbc 	bl	800355c <_read>
 800fde4:	1c43      	adds	r3, r0, #1
 800fde6:	d102      	bne.n	800fdee <_read_r+0x1e>
 800fde8:	682b      	ldr	r3, [r5, #0]
 800fdea:	b103      	cbz	r3, 800fdee <_read_r+0x1e>
 800fdec:	6023      	str	r3, [r4, #0]
 800fdee:	bd38      	pop	{r3, r4, r5, pc}
 800fdf0:	20008740 	.word	0x20008740

0800fdf4 <_write_r>:
 800fdf4:	b538      	push	{r3, r4, r5, lr}
 800fdf6:	4d07      	ldr	r5, [pc, #28]	; (800fe14 <_write_r+0x20>)
 800fdf8:	4604      	mov	r4, r0
 800fdfa:	4608      	mov	r0, r1
 800fdfc:	4611      	mov	r1, r2
 800fdfe:	2200      	movs	r2, #0
 800fe00:	602a      	str	r2, [r5, #0]
 800fe02:	461a      	mov	r2, r3
 800fe04:	f7f3 fbc7 	bl	8003596 <_write>
 800fe08:	1c43      	adds	r3, r0, #1
 800fe0a:	d102      	bne.n	800fe12 <_write_r+0x1e>
 800fe0c:	682b      	ldr	r3, [r5, #0]
 800fe0e:	b103      	cbz	r3, 800fe12 <_write_r+0x1e>
 800fe10:	6023      	str	r3, [r4, #0]
 800fe12:	bd38      	pop	{r3, r4, r5, pc}
 800fe14:	20008740 	.word	0x20008740

0800fe18 <__errno>:
 800fe18:	4b01      	ldr	r3, [pc, #4]	; (800fe20 <__errno+0x8>)
 800fe1a:	6818      	ldr	r0, [r3, #0]
 800fe1c:	4770      	bx	lr
 800fe1e:	bf00      	nop
 800fe20:	20000214 	.word	0x20000214

0800fe24 <__libc_init_array>:
 800fe24:	b570      	push	{r4, r5, r6, lr}
 800fe26:	4d0d      	ldr	r5, [pc, #52]	; (800fe5c <__libc_init_array+0x38>)
 800fe28:	4c0d      	ldr	r4, [pc, #52]	; (800fe60 <__libc_init_array+0x3c>)
 800fe2a:	1b64      	subs	r4, r4, r5
 800fe2c:	10a4      	asrs	r4, r4, #2
 800fe2e:	2600      	movs	r6, #0
 800fe30:	42a6      	cmp	r6, r4
 800fe32:	d109      	bne.n	800fe48 <__libc_init_array+0x24>
 800fe34:	4d0b      	ldr	r5, [pc, #44]	; (800fe64 <__libc_init_array+0x40>)
 800fe36:	4c0c      	ldr	r4, [pc, #48]	; (800fe68 <__libc_init_array+0x44>)
 800fe38:	f001 fdde 	bl	80119f8 <_init>
 800fe3c:	1b64      	subs	r4, r4, r5
 800fe3e:	10a4      	asrs	r4, r4, #2
 800fe40:	2600      	movs	r6, #0
 800fe42:	42a6      	cmp	r6, r4
 800fe44:	d105      	bne.n	800fe52 <__libc_init_array+0x2e>
 800fe46:	bd70      	pop	{r4, r5, r6, pc}
 800fe48:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe4c:	4798      	blx	r3
 800fe4e:	3601      	adds	r6, #1
 800fe50:	e7ee      	b.n	800fe30 <__libc_init_array+0xc>
 800fe52:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe56:	4798      	blx	r3
 800fe58:	3601      	adds	r6, #1
 800fe5a:	e7f2      	b.n	800fe42 <__libc_init_array+0x1e>
 800fe5c:	080128b4 	.word	0x080128b4
 800fe60:	080128b4 	.word	0x080128b4
 800fe64:	080128b4 	.word	0x080128b4
 800fe68:	080128b8 	.word	0x080128b8

0800fe6c <__retarget_lock_init_recursive>:
 800fe6c:	4770      	bx	lr

0800fe6e <__retarget_lock_acquire_recursive>:
 800fe6e:	4770      	bx	lr

0800fe70 <__retarget_lock_release_recursive>:
 800fe70:	4770      	bx	lr

0800fe72 <memcpy>:
 800fe72:	440a      	add	r2, r1
 800fe74:	4291      	cmp	r1, r2
 800fe76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fe7a:	d100      	bne.n	800fe7e <memcpy+0xc>
 800fe7c:	4770      	bx	lr
 800fe7e:	b510      	push	{r4, lr}
 800fe80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe88:	4291      	cmp	r1, r2
 800fe8a:	d1f9      	bne.n	800fe80 <memcpy+0xe>
 800fe8c:	bd10      	pop	{r4, pc}

0800fe8e <quorem>:
 800fe8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe92:	6903      	ldr	r3, [r0, #16]
 800fe94:	690c      	ldr	r4, [r1, #16]
 800fe96:	42a3      	cmp	r3, r4
 800fe98:	4607      	mov	r7, r0
 800fe9a:	db7e      	blt.n	800ff9a <quorem+0x10c>
 800fe9c:	3c01      	subs	r4, #1
 800fe9e:	f101 0814 	add.w	r8, r1, #20
 800fea2:	f100 0514 	add.w	r5, r0, #20
 800fea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800feaa:	9301      	str	r3, [sp, #4]
 800feac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800feb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800feb4:	3301      	adds	r3, #1
 800feb6:	429a      	cmp	r2, r3
 800feb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800febc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fec0:	fbb2 f6f3 	udiv	r6, r2, r3
 800fec4:	d331      	bcc.n	800ff2a <quorem+0x9c>
 800fec6:	f04f 0e00 	mov.w	lr, #0
 800feca:	4640      	mov	r0, r8
 800fecc:	46ac      	mov	ip, r5
 800fece:	46f2      	mov	sl, lr
 800fed0:	f850 2b04 	ldr.w	r2, [r0], #4
 800fed4:	b293      	uxth	r3, r2
 800fed6:	fb06 e303 	mla	r3, r6, r3, lr
 800feda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fede:	0c1a      	lsrs	r2, r3, #16
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	ebaa 0303 	sub.w	r3, sl, r3
 800fee6:	f8dc a000 	ldr.w	sl, [ip]
 800feea:	fa13 f38a 	uxtah	r3, r3, sl
 800feee:	fb06 220e 	mla	r2, r6, lr, r2
 800fef2:	9300      	str	r3, [sp, #0]
 800fef4:	9b00      	ldr	r3, [sp, #0]
 800fef6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fefa:	b292      	uxth	r2, r2
 800fefc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ff00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ff04:	f8bd 3000 	ldrh.w	r3, [sp]
 800ff08:	4581      	cmp	r9, r0
 800ff0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff0e:	f84c 3b04 	str.w	r3, [ip], #4
 800ff12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ff16:	d2db      	bcs.n	800fed0 <quorem+0x42>
 800ff18:	f855 300b 	ldr.w	r3, [r5, fp]
 800ff1c:	b92b      	cbnz	r3, 800ff2a <quorem+0x9c>
 800ff1e:	9b01      	ldr	r3, [sp, #4]
 800ff20:	3b04      	subs	r3, #4
 800ff22:	429d      	cmp	r5, r3
 800ff24:	461a      	mov	r2, r3
 800ff26:	d32c      	bcc.n	800ff82 <quorem+0xf4>
 800ff28:	613c      	str	r4, [r7, #16]
 800ff2a:	4638      	mov	r0, r7
 800ff2c:	f001 f9a6 	bl	801127c <__mcmp>
 800ff30:	2800      	cmp	r0, #0
 800ff32:	db22      	blt.n	800ff7a <quorem+0xec>
 800ff34:	3601      	adds	r6, #1
 800ff36:	4629      	mov	r1, r5
 800ff38:	2000      	movs	r0, #0
 800ff3a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ff3e:	f8d1 c000 	ldr.w	ip, [r1]
 800ff42:	b293      	uxth	r3, r2
 800ff44:	1ac3      	subs	r3, r0, r3
 800ff46:	0c12      	lsrs	r2, r2, #16
 800ff48:	fa13 f38c 	uxtah	r3, r3, ip
 800ff4c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ff50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff5a:	45c1      	cmp	r9, r8
 800ff5c:	f841 3b04 	str.w	r3, [r1], #4
 800ff60:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ff64:	d2e9      	bcs.n	800ff3a <quorem+0xac>
 800ff66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff6e:	b922      	cbnz	r2, 800ff7a <quorem+0xec>
 800ff70:	3b04      	subs	r3, #4
 800ff72:	429d      	cmp	r5, r3
 800ff74:	461a      	mov	r2, r3
 800ff76:	d30a      	bcc.n	800ff8e <quorem+0x100>
 800ff78:	613c      	str	r4, [r7, #16]
 800ff7a:	4630      	mov	r0, r6
 800ff7c:	b003      	add	sp, #12
 800ff7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff82:	6812      	ldr	r2, [r2, #0]
 800ff84:	3b04      	subs	r3, #4
 800ff86:	2a00      	cmp	r2, #0
 800ff88:	d1ce      	bne.n	800ff28 <quorem+0x9a>
 800ff8a:	3c01      	subs	r4, #1
 800ff8c:	e7c9      	b.n	800ff22 <quorem+0x94>
 800ff8e:	6812      	ldr	r2, [r2, #0]
 800ff90:	3b04      	subs	r3, #4
 800ff92:	2a00      	cmp	r2, #0
 800ff94:	d1f0      	bne.n	800ff78 <quorem+0xea>
 800ff96:	3c01      	subs	r4, #1
 800ff98:	e7eb      	b.n	800ff72 <quorem+0xe4>
 800ff9a:	2000      	movs	r0, #0
 800ff9c:	e7ee      	b.n	800ff7c <quorem+0xee>
	...

0800ffa0 <_dtoa_r>:
 800ffa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa4:	ed2d 8b04 	vpush	{d8-d9}
 800ffa8:	69c5      	ldr	r5, [r0, #28]
 800ffaa:	b093      	sub	sp, #76	; 0x4c
 800ffac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ffb0:	ec57 6b10 	vmov	r6, r7, d0
 800ffb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ffb8:	9107      	str	r1, [sp, #28]
 800ffba:	4604      	mov	r4, r0
 800ffbc:	920a      	str	r2, [sp, #40]	; 0x28
 800ffbe:	930d      	str	r3, [sp, #52]	; 0x34
 800ffc0:	b975      	cbnz	r5, 800ffe0 <_dtoa_r+0x40>
 800ffc2:	2010      	movs	r0, #16
 800ffc4:	f000 fe2a 	bl	8010c1c <malloc>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	61e0      	str	r0, [r4, #28]
 800ffcc:	b920      	cbnz	r0, 800ffd8 <_dtoa_r+0x38>
 800ffce:	4bae      	ldr	r3, [pc, #696]	; (8010288 <_dtoa_r+0x2e8>)
 800ffd0:	21ef      	movs	r1, #239	; 0xef
 800ffd2:	48ae      	ldr	r0, [pc, #696]	; (801028c <_dtoa_r+0x2ec>)
 800ffd4:	f001 fc5e 	bl	8011894 <__assert_func>
 800ffd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ffdc:	6005      	str	r5, [r0, #0]
 800ffde:	60c5      	str	r5, [r0, #12]
 800ffe0:	69e3      	ldr	r3, [r4, #28]
 800ffe2:	6819      	ldr	r1, [r3, #0]
 800ffe4:	b151      	cbz	r1, 800fffc <_dtoa_r+0x5c>
 800ffe6:	685a      	ldr	r2, [r3, #4]
 800ffe8:	604a      	str	r2, [r1, #4]
 800ffea:	2301      	movs	r3, #1
 800ffec:	4093      	lsls	r3, r2
 800ffee:	608b      	str	r3, [r1, #8]
 800fff0:	4620      	mov	r0, r4
 800fff2:	f000 ff07 	bl	8010e04 <_Bfree>
 800fff6:	69e3      	ldr	r3, [r4, #28]
 800fff8:	2200      	movs	r2, #0
 800fffa:	601a      	str	r2, [r3, #0]
 800fffc:	1e3b      	subs	r3, r7, #0
 800fffe:	bfbb      	ittet	lt
 8010000:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010004:	9303      	strlt	r3, [sp, #12]
 8010006:	2300      	movge	r3, #0
 8010008:	2201      	movlt	r2, #1
 801000a:	bfac      	ite	ge
 801000c:	f8c8 3000 	strge.w	r3, [r8]
 8010010:	f8c8 2000 	strlt.w	r2, [r8]
 8010014:	4b9e      	ldr	r3, [pc, #632]	; (8010290 <_dtoa_r+0x2f0>)
 8010016:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801001a:	ea33 0308 	bics.w	r3, r3, r8
 801001e:	d11b      	bne.n	8010058 <_dtoa_r+0xb8>
 8010020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010022:	f242 730f 	movw	r3, #9999	; 0x270f
 8010026:	6013      	str	r3, [r2, #0]
 8010028:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801002c:	4333      	orrs	r3, r6
 801002e:	f000 8593 	beq.w	8010b58 <_dtoa_r+0xbb8>
 8010032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010034:	b963      	cbnz	r3, 8010050 <_dtoa_r+0xb0>
 8010036:	4b97      	ldr	r3, [pc, #604]	; (8010294 <_dtoa_r+0x2f4>)
 8010038:	e027      	b.n	801008a <_dtoa_r+0xea>
 801003a:	4b97      	ldr	r3, [pc, #604]	; (8010298 <_dtoa_r+0x2f8>)
 801003c:	9300      	str	r3, [sp, #0]
 801003e:	3308      	adds	r3, #8
 8010040:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010042:	6013      	str	r3, [r2, #0]
 8010044:	9800      	ldr	r0, [sp, #0]
 8010046:	b013      	add	sp, #76	; 0x4c
 8010048:	ecbd 8b04 	vpop	{d8-d9}
 801004c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010050:	4b90      	ldr	r3, [pc, #576]	; (8010294 <_dtoa_r+0x2f4>)
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	3303      	adds	r3, #3
 8010056:	e7f3      	b.n	8010040 <_dtoa_r+0xa0>
 8010058:	ed9d 7b02 	vldr	d7, [sp, #8]
 801005c:	2200      	movs	r2, #0
 801005e:	ec51 0b17 	vmov	r0, r1, d7
 8010062:	eeb0 8a47 	vmov.f32	s16, s14
 8010066:	eef0 8a67 	vmov.f32	s17, s15
 801006a:	2300      	movs	r3, #0
 801006c:	f7f0 fd3c 	bl	8000ae8 <__aeabi_dcmpeq>
 8010070:	4681      	mov	r9, r0
 8010072:	b160      	cbz	r0, 801008e <_dtoa_r+0xee>
 8010074:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010076:	2301      	movs	r3, #1
 8010078:	6013      	str	r3, [r2, #0]
 801007a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801007c:	2b00      	cmp	r3, #0
 801007e:	f000 8568 	beq.w	8010b52 <_dtoa_r+0xbb2>
 8010082:	4b86      	ldr	r3, [pc, #536]	; (801029c <_dtoa_r+0x2fc>)
 8010084:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010086:	6013      	str	r3, [r2, #0]
 8010088:	3b01      	subs	r3, #1
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	e7da      	b.n	8010044 <_dtoa_r+0xa4>
 801008e:	aa10      	add	r2, sp, #64	; 0x40
 8010090:	a911      	add	r1, sp, #68	; 0x44
 8010092:	4620      	mov	r0, r4
 8010094:	eeb0 0a48 	vmov.f32	s0, s16
 8010098:	eef0 0a68 	vmov.f32	s1, s17
 801009c:	f001 f994 	bl	80113c8 <__d2b>
 80100a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80100a4:	4682      	mov	sl, r0
 80100a6:	2d00      	cmp	r5, #0
 80100a8:	d07f      	beq.n	80101aa <_dtoa_r+0x20a>
 80100aa:	ee18 3a90 	vmov	r3, s17
 80100ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80100b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80100b6:	ec51 0b18 	vmov	r0, r1, d8
 80100ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80100be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80100c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80100c6:	4619      	mov	r1, r3
 80100c8:	2200      	movs	r2, #0
 80100ca:	4b75      	ldr	r3, [pc, #468]	; (80102a0 <_dtoa_r+0x300>)
 80100cc:	f7f0 f8ec 	bl	80002a8 <__aeabi_dsub>
 80100d0:	a367      	add	r3, pc, #412	; (adr r3, 8010270 <_dtoa_r+0x2d0>)
 80100d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d6:	f7f0 fa9f 	bl	8000618 <__aeabi_dmul>
 80100da:	a367      	add	r3, pc, #412	; (adr r3, 8010278 <_dtoa_r+0x2d8>)
 80100dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e0:	f7f0 f8e4 	bl	80002ac <__adddf3>
 80100e4:	4606      	mov	r6, r0
 80100e6:	4628      	mov	r0, r5
 80100e8:	460f      	mov	r7, r1
 80100ea:	f7f0 fa2b 	bl	8000544 <__aeabi_i2d>
 80100ee:	a364      	add	r3, pc, #400	; (adr r3, 8010280 <_dtoa_r+0x2e0>)
 80100f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f4:	f7f0 fa90 	bl	8000618 <__aeabi_dmul>
 80100f8:	4602      	mov	r2, r0
 80100fa:	460b      	mov	r3, r1
 80100fc:	4630      	mov	r0, r6
 80100fe:	4639      	mov	r1, r7
 8010100:	f7f0 f8d4 	bl	80002ac <__adddf3>
 8010104:	4606      	mov	r6, r0
 8010106:	460f      	mov	r7, r1
 8010108:	f7f0 fd36 	bl	8000b78 <__aeabi_d2iz>
 801010c:	2200      	movs	r2, #0
 801010e:	4683      	mov	fp, r0
 8010110:	2300      	movs	r3, #0
 8010112:	4630      	mov	r0, r6
 8010114:	4639      	mov	r1, r7
 8010116:	f7f0 fcf1 	bl	8000afc <__aeabi_dcmplt>
 801011a:	b148      	cbz	r0, 8010130 <_dtoa_r+0x190>
 801011c:	4658      	mov	r0, fp
 801011e:	f7f0 fa11 	bl	8000544 <__aeabi_i2d>
 8010122:	4632      	mov	r2, r6
 8010124:	463b      	mov	r3, r7
 8010126:	f7f0 fcdf 	bl	8000ae8 <__aeabi_dcmpeq>
 801012a:	b908      	cbnz	r0, 8010130 <_dtoa_r+0x190>
 801012c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010130:	f1bb 0f16 	cmp.w	fp, #22
 8010134:	d857      	bhi.n	80101e6 <_dtoa_r+0x246>
 8010136:	4b5b      	ldr	r3, [pc, #364]	; (80102a4 <_dtoa_r+0x304>)
 8010138:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801013c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010140:	ec51 0b18 	vmov	r0, r1, d8
 8010144:	f7f0 fcda 	bl	8000afc <__aeabi_dcmplt>
 8010148:	2800      	cmp	r0, #0
 801014a:	d04e      	beq.n	80101ea <_dtoa_r+0x24a>
 801014c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010150:	2300      	movs	r3, #0
 8010152:	930c      	str	r3, [sp, #48]	; 0x30
 8010154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010156:	1b5b      	subs	r3, r3, r5
 8010158:	1e5a      	subs	r2, r3, #1
 801015a:	bf45      	ittet	mi
 801015c:	f1c3 0301 	rsbmi	r3, r3, #1
 8010160:	9305      	strmi	r3, [sp, #20]
 8010162:	2300      	movpl	r3, #0
 8010164:	2300      	movmi	r3, #0
 8010166:	9206      	str	r2, [sp, #24]
 8010168:	bf54      	ite	pl
 801016a:	9305      	strpl	r3, [sp, #20]
 801016c:	9306      	strmi	r3, [sp, #24]
 801016e:	f1bb 0f00 	cmp.w	fp, #0
 8010172:	db3c      	blt.n	80101ee <_dtoa_r+0x24e>
 8010174:	9b06      	ldr	r3, [sp, #24]
 8010176:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801017a:	445b      	add	r3, fp
 801017c:	9306      	str	r3, [sp, #24]
 801017e:	2300      	movs	r3, #0
 8010180:	9308      	str	r3, [sp, #32]
 8010182:	9b07      	ldr	r3, [sp, #28]
 8010184:	2b09      	cmp	r3, #9
 8010186:	d868      	bhi.n	801025a <_dtoa_r+0x2ba>
 8010188:	2b05      	cmp	r3, #5
 801018a:	bfc4      	itt	gt
 801018c:	3b04      	subgt	r3, #4
 801018e:	9307      	strgt	r3, [sp, #28]
 8010190:	9b07      	ldr	r3, [sp, #28]
 8010192:	f1a3 0302 	sub.w	r3, r3, #2
 8010196:	bfcc      	ite	gt
 8010198:	2500      	movgt	r5, #0
 801019a:	2501      	movle	r5, #1
 801019c:	2b03      	cmp	r3, #3
 801019e:	f200 8085 	bhi.w	80102ac <_dtoa_r+0x30c>
 80101a2:	e8df f003 	tbb	[pc, r3]
 80101a6:	3b2e      	.short	0x3b2e
 80101a8:	5839      	.short	0x5839
 80101aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80101ae:	441d      	add	r5, r3
 80101b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80101b4:	2b20      	cmp	r3, #32
 80101b6:	bfc1      	itttt	gt
 80101b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80101bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80101c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80101c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80101c8:	bfd6      	itet	le
 80101ca:	f1c3 0320 	rsble	r3, r3, #32
 80101ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80101d2:	fa06 f003 	lslle.w	r0, r6, r3
 80101d6:	f7f0 f9a5 	bl	8000524 <__aeabi_ui2d>
 80101da:	2201      	movs	r2, #1
 80101dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80101e0:	3d01      	subs	r5, #1
 80101e2:	920e      	str	r2, [sp, #56]	; 0x38
 80101e4:	e76f      	b.n	80100c6 <_dtoa_r+0x126>
 80101e6:	2301      	movs	r3, #1
 80101e8:	e7b3      	b.n	8010152 <_dtoa_r+0x1b2>
 80101ea:	900c      	str	r0, [sp, #48]	; 0x30
 80101ec:	e7b2      	b.n	8010154 <_dtoa_r+0x1b4>
 80101ee:	9b05      	ldr	r3, [sp, #20]
 80101f0:	eba3 030b 	sub.w	r3, r3, fp
 80101f4:	9305      	str	r3, [sp, #20]
 80101f6:	f1cb 0300 	rsb	r3, fp, #0
 80101fa:	9308      	str	r3, [sp, #32]
 80101fc:	2300      	movs	r3, #0
 80101fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8010200:	e7bf      	b.n	8010182 <_dtoa_r+0x1e2>
 8010202:	2300      	movs	r3, #0
 8010204:	9309      	str	r3, [sp, #36]	; 0x24
 8010206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010208:	2b00      	cmp	r3, #0
 801020a:	dc52      	bgt.n	80102b2 <_dtoa_r+0x312>
 801020c:	2301      	movs	r3, #1
 801020e:	9301      	str	r3, [sp, #4]
 8010210:	9304      	str	r3, [sp, #16]
 8010212:	461a      	mov	r2, r3
 8010214:	920a      	str	r2, [sp, #40]	; 0x28
 8010216:	e00b      	b.n	8010230 <_dtoa_r+0x290>
 8010218:	2301      	movs	r3, #1
 801021a:	e7f3      	b.n	8010204 <_dtoa_r+0x264>
 801021c:	2300      	movs	r3, #0
 801021e:	9309      	str	r3, [sp, #36]	; 0x24
 8010220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010222:	445b      	add	r3, fp
 8010224:	9301      	str	r3, [sp, #4]
 8010226:	3301      	adds	r3, #1
 8010228:	2b01      	cmp	r3, #1
 801022a:	9304      	str	r3, [sp, #16]
 801022c:	bfb8      	it	lt
 801022e:	2301      	movlt	r3, #1
 8010230:	69e0      	ldr	r0, [r4, #28]
 8010232:	2100      	movs	r1, #0
 8010234:	2204      	movs	r2, #4
 8010236:	f102 0614 	add.w	r6, r2, #20
 801023a:	429e      	cmp	r6, r3
 801023c:	d93d      	bls.n	80102ba <_dtoa_r+0x31a>
 801023e:	6041      	str	r1, [r0, #4]
 8010240:	4620      	mov	r0, r4
 8010242:	f000 fd9f 	bl	8010d84 <_Balloc>
 8010246:	9000      	str	r0, [sp, #0]
 8010248:	2800      	cmp	r0, #0
 801024a:	d139      	bne.n	80102c0 <_dtoa_r+0x320>
 801024c:	4b16      	ldr	r3, [pc, #88]	; (80102a8 <_dtoa_r+0x308>)
 801024e:	4602      	mov	r2, r0
 8010250:	f240 11af 	movw	r1, #431	; 0x1af
 8010254:	e6bd      	b.n	800ffd2 <_dtoa_r+0x32>
 8010256:	2301      	movs	r3, #1
 8010258:	e7e1      	b.n	801021e <_dtoa_r+0x27e>
 801025a:	2501      	movs	r5, #1
 801025c:	2300      	movs	r3, #0
 801025e:	9307      	str	r3, [sp, #28]
 8010260:	9509      	str	r5, [sp, #36]	; 0x24
 8010262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010266:	9301      	str	r3, [sp, #4]
 8010268:	9304      	str	r3, [sp, #16]
 801026a:	2200      	movs	r2, #0
 801026c:	2312      	movs	r3, #18
 801026e:	e7d1      	b.n	8010214 <_dtoa_r+0x274>
 8010270:	636f4361 	.word	0x636f4361
 8010274:	3fd287a7 	.word	0x3fd287a7
 8010278:	8b60c8b3 	.word	0x8b60c8b3
 801027c:	3fc68a28 	.word	0x3fc68a28
 8010280:	509f79fb 	.word	0x509f79fb
 8010284:	3fd34413 	.word	0x3fd34413
 8010288:	0801267a 	.word	0x0801267a
 801028c:	08012691 	.word	0x08012691
 8010290:	7ff00000 	.word	0x7ff00000
 8010294:	08012676 	.word	0x08012676
 8010298:	0801266d 	.word	0x0801266d
 801029c:	0801264a 	.word	0x0801264a
 80102a0:	3ff80000 	.word	0x3ff80000
 80102a4:	08012780 	.word	0x08012780
 80102a8:	080126e9 	.word	0x080126e9
 80102ac:	2301      	movs	r3, #1
 80102ae:	9309      	str	r3, [sp, #36]	; 0x24
 80102b0:	e7d7      	b.n	8010262 <_dtoa_r+0x2c2>
 80102b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102b4:	9301      	str	r3, [sp, #4]
 80102b6:	9304      	str	r3, [sp, #16]
 80102b8:	e7ba      	b.n	8010230 <_dtoa_r+0x290>
 80102ba:	3101      	adds	r1, #1
 80102bc:	0052      	lsls	r2, r2, #1
 80102be:	e7ba      	b.n	8010236 <_dtoa_r+0x296>
 80102c0:	69e3      	ldr	r3, [r4, #28]
 80102c2:	9a00      	ldr	r2, [sp, #0]
 80102c4:	601a      	str	r2, [r3, #0]
 80102c6:	9b04      	ldr	r3, [sp, #16]
 80102c8:	2b0e      	cmp	r3, #14
 80102ca:	f200 80a8 	bhi.w	801041e <_dtoa_r+0x47e>
 80102ce:	2d00      	cmp	r5, #0
 80102d0:	f000 80a5 	beq.w	801041e <_dtoa_r+0x47e>
 80102d4:	f1bb 0f00 	cmp.w	fp, #0
 80102d8:	dd38      	ble.n	801034c <_dtoa_r+0x3ac>
 80102da:	4bc0      	ldr	r3, [pc, #768]	; (80105dc <_dtoa_r+0x63c>)
 80102dc:	f00b 020f 	and.w	r2, fp, #15
 80102e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80102e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80102ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 80102f0:	d019      	beq.n	8010326 <_dtoa_r+0x386>
 80102f2:	4bbb      	ldr	r3, [pc, #748]	; (80105e0 <_dtoa_r+0x640>)
 80102f4:	ec51 0b18 	vmov	r0, r1, d8
 80102f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80102fc:	f7f0 fab6 	bl	800086c <__aeabi_ddiv>
 8010300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010304:	f008 080f 	and.w	r8, r8, #15
 8010308:	2503      	movs	r5, #3
 801030a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80105e0 <_dtoa_r+0x640>
 801030e:	f1b8 0f00 	cmp.w	r8, #0
 8010312:	d10a      	bne.n	801032a <_dtoa_r+0x38a>
 8010314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010318:	4632      	mov	r2, r6
 801031a:	463b      	mov	r3, r7
 801031c:	f7f0 faa6 	bl	800086c <__aeabi_ddiv>
 8010320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010324:	e02b      	b.n	801037e <_dtoa_r+0x3de>
 8010326:	2502      	movs	r5, #2
 8010328:	e7ef      	b.n	801030a <_dtoa_r+0x36a>
 801032a:	f018 0f01 	tst.w	r8, #1
 801032e:	d008      	beq.n	8010342 <_dtoa_r+0x3a2>
 8010330:	4630      	mov	r0, r6
 8010332:	4639      	mov	r1, r7
 8010334:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010338:	f7f0 f96e 	bl	8000618 <__aeabi_dmul>
 801033c:	3501      	adds	r5, #1
 801033e:	4606      	mov	r6, r0
 8010340:	460f      	mov	r7, r1
 8010342:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010346:	f109 0908 	add.w	r9, r9, #8
 801034a:	e7e0      	b.n	801030e <_dtoa_r+0x36e>
 801034c:	f000 809f 	beq.w	801048e <_dtoa_r+0x4ee>
 8010350:	f1cb 0600 	rsb	r6, fp, #0
 8010354:	4ba1      	ldr	r3, [pc, #644]	; (80105dc <_dtoa_r+0x63c>)
 8010356:	4fa2      	ldr	r7, [pc, #648]	; (80105e0 <_dtoa_r+0x640>)
 8010358:	f006 020f 	and.w	r2, r6, #15
 801035c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010364:	ec51 0b18 	vmov	r0, r1, d8
 8010368:	f7f0 f956 	bl	8000618 <__aeabi_dmul>
 801036c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010370:	1136      	asrs	r6, r6, #4
 8010372:	2300      	movs	r3, #0
 8010374:	2502      	movs	r5, #2
 8010376:	2e00      	cmp	r6, #0
 8010378:	d17e      	bne.n	8010478 <_dtoa_r+0x4d8>
 801037a:	2b00      	cmp	r3, #0
 801037c:	d1d0      	bne.n	8010320 <_dtoa_r+0x380>
 801037e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010380:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010384:	2b00      	cmp	r3, #0
 8010386:	f000 8084 	beq.w	8010492 <_dtoa_r+0x4f2>
 801038a:	4b96      	ldr	r3, [pc, #600]	; (80105e4 <_dtoa_r+0x644>)
 801038c:	2200      	movs	r2, #0
 801038e:	4640      	mov	r0, r8
 8010390:	4649      	mov	r1, r9
 8010392:	f7f0 fbb3 	bl	8000afc <__aeabi_dcmplt>
 8010396:	2800      	cmp	r0, #0
 8010398:	d07b      	beq.n	8010492 <_dtoa_r+0x4f2>
 801039a:	9b04      	ldr	r3, [sp, #16]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d078      	beq.n	8010492 <_dtoa_r+0x4f2>
 80103a0:	9b01      	ldr	r3, [sp, #4]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	dd39      	ble.n	801041a <_dtoa_r+0x47a>
 80103a6:	4b90      	ldr	r3, [pc, #576]	; (80105e8 <_dtoa_r+0x648>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	4640      	mov	r0, r8
 80103ac:	4649      	mov	r1, r9
 80103ae:	f7f0 f933 	bl	8000618 <__aeabi_dmul>
 80103b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103b6:	9e01      	ldr	r6, [sp, #4]
 80103b8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80103bc:	3501      	adds	r5, #1
 80103be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80103c2:	4628      	mov	r0, r5
 80103c4:	f7f0 f8be 	bl	8000544 <__aeabi_i2d>
 80103c8:	4642      	mov	r2, r8
 80103ca:	464b      	mov	r3, r9
 80103cc:	f7f0 f924 	bl	8000618 <__aeabi_dmul>
 80103d0:	4b86      	ldr	r3, [pc, #536]	; (80105ec <_dtoa_r+0x64c>)
 80103d2:	2200      	movs	r2, #0
 80103d4:	f7ef ff6a 	bl	80002ac <__adddf3>
 80103d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80103dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103e0:	9303      	str	r3, [sp, #12]
 80103e2:	2e00      	cmp	r6, #0
 80103e4:	d158      	bne.n	8010498 <_dtoa_r+0x4f8>
 80103e6:	4b82      	ldr	r3, [pc, #520]	; (80105f0 <_dtoa_r+0x650>)
 80103e8:	2200      	movs	r2, #0
 80103ea:	4640      	mov	r0, r8
 80103ec:	4649      	mov	r1, r9
 80103ee:	f7ef ff5b 	bl	80002a8 <__aeabi_dsub>
 80103f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80103f6:	4680      	mov	r8, r0
 80103f8:	4689      	mov	r9, r1
 80103fa:	f7f0 fb9d 	bl	8000b38 <__aeabi_dcmpgt>
 80103fe:	2800      	cmp	r0, #0
 8010400:	f040 8296 	bne.w	8010930 <_dtoa_r+0x990>
 8010404:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010408:	4640      	mov	r0, r8
 801040a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801040e:	4649      	mov	r1, r9
 8010410:	f7f0 fb74 	bl	8000afc <__aeabi_dcmplt>
 8010414:	2800      	cmp	r0, #0
 8010416:	f040 8289 	bne.w	801092c <_dtoa_r+0x98c>
 801041a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801041e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010420:	2b00      	cmp	r3, #0
 8010422:	f2c0 814e 	blt.w	80106c2 <_dtoa_r+0x722>
 8010426:	f1bb 0f0e 	cmp.w	fp, #14
 801042a:	f300 814a 	bgt.w	80106c2 <_dtoa_r+0x722>
 801042e:	4b6b      	ldr	r3, [pc, #428]	; (80105dc <_dtoa_r+0x63c>)
 8010430:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010434:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801043a:	2b00      	cmp	r3, #0
 801043c:	f280 80dc 	bge.w	80105f8 <_dtoa_r+0x658>
 8010440:	9b04      	ldr	r3, [sp, #16]
 8010442:	2b00      	cmp	r3, #0
 8010444:	f300 80d8 	bgt.w	80105f8 <_dtoa_r+0x658>
 8010448:	f040 826f 	bne.w	801092a <_dtoa_r+0x98a>
 801044c:	4b68      	ldr	r3, [pc, #416]	; (80105f0 <_dtoa_r+0x650>)
 801044e:	2200      	movs	r2, #0
 8010450:	4640      	mov	r0, r8
 8010452:	4649      	mov	r1, r9
 8010454:	f7f0 f8e0 	bl	8000618 <__aeabi_dmul>
 8010458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801045c:	f7f0 fb62 	bl	8000b24 <__aeabi_dcmpge>
 8010460:	9e04      	ldr	r6, [sp, #16]
 8010462:	4637      	mov	r7, r6
 8010464:	2800      	cmp	r0, #0
 8010466:	f040 8245 	bne.w	80108f4 <_dtoa_r+0x954>
 801046a:	9d00      	ldr	r5, [sp, #0]
 801046c:	2331      	movs	r3, #49	; 0x31
 801046e:	f805 3b01 	strb.w	r3, [r5], #1
 8010472:	f10b 0b01 	add.w	fp, fp, #1
 8010476:	e241      	b.n	80108fc <_dtoa_r+0x95c>
 8010478:	07f2      	lsls	r2, r6, #31
 801047a:	d505      	bpl.n	8010488 <_dtoa_r+0x4e8>
 801047c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010480:	f7f0 f8ca 	bl	8000618 <__aeabi_dmul>
 8010484:	3501      	adds	r5, #1
 8010486:	2301      	movs	r3, #1
 8010488:	1076      	asrs	r6, r6, #1
 801048a:	3708      	adds	r7, #8
 801048c:	e773      	b.n	8010376 <_dtoa_r+0x3d6>
 801048e:	2502      	movs	r5, #2
 8010490:	e775      	b.n	801037e <_dtoa_r+0x3de>
 8010492:	9e04      	ldr	r6, [sp, #16]
 8010494:	465f      	mov	r7, fp
 8010496:	e792      	b.n	80103be <_dtoa_r+0x41e>
 8010498:	9900      	ldr	r1, [sp, #0]
 801049a:	4b50      	ldr	r3, [pc, #320]	; (80105dc <_dtoa_r+0x63c>)
 801049c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80104a0:	4431      	add	r1, r6
 80104a2:	9102      	str	r1, [sp, #8]
 80104a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104a6:	eeb0 9a47 	vmov.f32	s18, s14
 80104aa:	eef0 9a67 	vmov.f32	s19, s15
 80104ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80104b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80104b6:	2900      	cmp	r1, #0
 80104b8:	d044      	beq.n	8010544 <_dtoa_r+0x5a4>
 80104ba:	494e      	ldr	r1, [pc, #312]	; (80105f4 <_dtoa_r+0x654>)
 80104bc:	2000      	movs	r0, #0
 80104be:	f7f0 f9d5 	bl	800086c <__aeabi_ddiv>
 80104c2:	ec53 2b19 	vmov	r2, r3, d9
 80104c6:	f7ef feef 	bl	80002a8 <__aeabi_dsub>
 80104ca:	9d00      	ldr	r5, [sp, #0]
 80104cc:	ec41 0b19 	vmov	d9, r0, r1
 80104d0:	4649      	mov	r1, r9
 80104d2:	4640      	mov	r0, r8
 80104d4:	f7f0 fb50 	bl	8000b78 <__aeabi_d2iz>
 80104d8:	4606      	mov	r6, r0
 80104da:	f7f0 f833 	bl	8000544 <__aeabi_i2d>
 80104de:	4602      	mov	r2, r0
 80104e0:	460b      	mov	r3, r1
 80104e2:	4640      	mov	r0, r8
 80104e4:	4649      	mov	r1, r9
 80104e6:	f7ef fedf 	bl	80002a8 <__aeabi_dsub>
 80104ea:	3630      	adds	r6, #48	; 0x30
 80104ec:	f805 6b01 	strb.w	r6, [r5], #1
 80104f0:	ec53 2b19 	vmov	r2, r3, d9
 80104f4:	4680      	mov	r8, r0
 80104f6:	4689      	mov	r9, r1
 80104f8:	f7f0 fb00 	bl	8000afc <__aeabi_dcmplt>
 80104fc:	2800      	cmp	r0, #0
 80104fe:	d164      	bne.n	80105ca <_dtoa_r+0x62a>
 8010500:	4642      	mov	r2, r8
 8010502:	464b      	mov	r3, r9
 8010504:	4937      	ldr	r1, [pc, #220]	; (80105e4 <_dtoa_r+0x644>)
 8010506:	2000      	movs	r0, #0
 8010508:	f7ef fece 	bl	80002a8 <__aeabi_dsub>
 801050c:	ec53 2b19 	vmov	r2, r3, d9
 8010510:	f7f0 faf4 	bl	8000afc <__aeabi_dcmplt>
 8010514:	2800      	cmp	r0, #0
 8010516:	f040 80b6 	bne.w	8010686 <_dtoa_r+0x6e6>
 801051a:	9b02      	ldr	r3, [sp, #8]
 801051c:	429d      	cmp	r5, r3
 801051e:	f43f af7c 	beq.w	801041a <_dtoa_r+0x47a>
 8010522:	4b31      	ldr	r3, [pc, #196]	; (80105e8 <_dtoa_r+0x648>)
 8010524:	ec51 0b19 	vmov	r0, r1, d9
 8010528:	2200      	movs	r2, #0
 801052a:	f7f0 f875 	bl	8000618 <__aeabi_dmul>
 801052e:	4b2e      	ldr	r3, [pc, #184]	; (80105e8 <_dtoa_r+0x648>)
 8010530:	ec41 0b19 	vmov	d9, r0, r1
 8010534:	2200      	movs	r2, #0
 8010536:	4640      	mov	r0, r8
 8010538:	4649      	mov	r1, r9
 801053a:	f7f0 f86d 	bl	8000618 <__aeabi_dmul>
 801053e:	4680      	mov	r8, r0
 8010540:	4689      	mov	r9, r1
 8010542:	e7c5      	b.n	80104d0 <_dtoa_r+0x530>
 8010544:	ec51 0b17 	vmov	r0, r1, d7
 8010548:	f7f0 f866 	bl	8000618 <__aeabi_dmul>
 801054c:	9b02      	ldr	r3, [sp, #8]
 801054e:	9d00      	ldr	r5, [sp, #0]
 8010550:	930f      	str	r3, [sp, #60]	; 0x3c
 8010552:	ec41 0b19 	vmov	d9, r0, r1
 8010556:	4649      	mov	r1, r9
 8010558:	4640      	mov	r0, r8
 801055a:	f7f0 fb0d 	bl	8000b78 <__aeabi_d2iz>
 801055e:	4606      	mov	r6, r0
 8010560:	f7ef fff0 	bl	8000544 <__aeabi_i2d>
 8010564:	3630      	adds	r6, #48	; 0x30
 8010566:	4602      	mov	r2, r0
 8010568:	460b      	mov	r3, r1
 801056a:	4640      	mov	r0, r8
 801056c:	4649      	mov	r1, r9
 801056e:	f7ef fe9b 	bl	80002a8 <__aeabi_dsub>
 8010572:	f805 6b01 	strb.w	r6, [r5], #1
 8010576:	9b02      	ldr	r3, [sp, #8]
 8010578:	429d      	cmp	r5, r3
 801057a:	4680      	mov	r8, r0
 801057c:	4689      	mov	r9, r1
 801057e:	f04f 0200 	mov.w	r2, #0
 8010582:	d124      	bne.n	80105ce <_dtoa_r+0x62e>
 8010584:	4b1b      	ldr	r3, [pc, #108]	; (80105f4 <_dtoa_r+0x654>)
 8010586:	ec51 0b19 	vmov	r0, r1, d9
 801058a:	f7ef fe8f 	bl	80002ac <__adddf3>
 801058e:	4602      	mov	r2, r0
 8010590:	460b      	mov	r3, r1
 8010592:	4640      	mov	r0, r8
 8010594:	4649      	mov	r1, r9
 8010596:	f7f0 facf 	bl	8000b38 <__aeabi_dcmpgt>
 801059a:	2800      	cmp	r0, #0
 801059c:	d173      	bne.n	8010686 <_dtoa_r+0x6e6>
 801059e:	ec53 2b19 	vmov	r2, r3, d9
 80105a2:	4914      	ldr	r1, [pc, #80]	; (80105f4 <_dtoa_r+0x654>)
 80105a4:	2000      	movs	r0, #0
 80105a6:	f7ef fe7f 	bl	80002a8 <__aeabi_dsub>
 80105aa:	4602      	mov	r2, r0
 80105ac:	460b      	mov	r3, r1
 80105ae:	4640      	mov	r0, r8
 80105b0:	4649      	mov	r1, r9
 80105b2:	f7f0 faa3 	bl	8000afc <__aeabi_dcmplt>
 80105b6:	2800      	cmp	r0, #0
 80105b8:	f43f af2f 	beq.w	801041a <_dtoa_r+0x47a>
 80105bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80105be:	1e6b      	subs	r3, r5, #1
 80105c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80105c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80105c6:	2b30      	cmp	r3, #48	; 0x30
 80105c8:	d0f8      	beq.n	80105bc <_dtoa_r+0x61c>
 80105ca:	46bb      	mov	fp, r7
 80105cc:	e04a      	b.n	8010664 <_dtoa_r+0x6c4>
 80105ce:	4b06      	ldr	r3, [pc, #24]	; (80105e8 <_dtoa_r+0x648>)
 80105d0:	f7f0 f822 	bl	8000618 <__aeabi_dmul>
 80105d4:	4680      	mov	r8, r0
 80105d6:	4689      	mov	r9, r1
 80105d8:	e7bd      	b.n	8010556 <_dtoa_r+0x5b6>
 80105da:	bf00      	nop
 80105dc:	08012780 	.word	0x08012780
 80105e0:	08012758 	.word	0x08012758
 80105e4:	3ff00000 	.word	0x3ff00000
 80105e8:	40240000 	.word	0x40240000
 80105ec:	401c0000 	.word	0x401c0000
 80105f0:	40140000 	.word	0x40140000
 80105f4:	3fe00000 	.word	0x3fe00000
 80105f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80105fc:	9d00      	ldr	r5, [sp, #0]
 80105fe:	4642      	mov	r2, r8
 8010600:	464b      	mov	r3, r9
 8010602:	4630      	mov	r0, r6
 8010604:	4639      	mov	r1, r7
 8010606:	f7f0 f931 	bl	800086c <__aeabi_ddiv>
 801060a:	f7f0 fab5 	bl	8000b78 <__aeabi_d2iz>
 801060e:	9001      	str	r0, [sp, #4]
 8010610:	f7ef ff98 	bl	8000544 <__aeabi_i2d>
 8010614:	4642      	mov	r2, r8
 8010616:	464b      	mov	r3, r9
 8010618:	f7ef fffe 	bl	8000618 <__aeabi_dmul>
 801061c:	4602      	mov	r2, r0
 801061e:	460b      	mov	r3, r1
 8010620:	4630      	mov	r0, r6
 8010622:	4639      	mov	r1, r7
 8010624:	f7ef fe40 	bl	80002a8 <__aeabi_dsub>
 8010628:	9e01      	ldr	r6, [sp, #4]
 801062a:	9f04      	ldr	r7, [sp, #16]
 801062c:	3630      	adds	r6, #48	; 0x30
 801062e:	f805 6b01 	strb.w	r6, [r5], #1
 8010632:	9e00      	ldr	r6, [sp, #0]
 8010634:	1bae      	subs	r6, r5, r6
 8010636:	42b7      	cmp	r7, r6
 8010638:	4602      	mov	r2, r0
 801063a:	460b      	mov	r3, r1
 801063c:	d134      	bne.n	80106a8 <_dtoa_r+0x708>
 801063e:	f7ef fe35 	bl	80002ac <__adddf3>
 8010642:	4642      	mov	r2, r8
 8010644:	464b      	mov	r3, r9
 8010646:	4606      	mov	r6, r0
 8010648:	460f      	mov	r7, r1
 801064a:	f7f0 fa75 	bl	8000b38 <__aeabi_dcmpgt>
 801064e:	b9c8      	cbnz	r0, 8010684 <_dtoa_r+0x6e4>
 8010650:	4642      	mov	r2, r8
 8010652:	464b      	mov	r3, r9
 8010654:	4630      	mov	r0, r6
 8010656:	4639      	mov	r1, r7
 8010658:	f7f0 fa46 	bl	8000ae8 <__aeabi_dcmpeq>
 801065c:	b110      	cbz	r0, 8010664 <_dtoa_r+0x6c4>
 801065e:	9b01      	ldr	r3, [sp, #4]
 8010660:	07db      	lsls	r3, r3, #31
 8010662:	d40f      	bmi.n	8010684 <_dtoa_r+0x6e4>
 8010664:	4651      	mov	r1, sl
 8010666:	4620      	mov	r0, r4
 8010668:	f000 fbcc 	bl	8010e04 <_Bfree>
 801066c:	2300      	movs	r3, #0
 801066e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010670:	702b      	strb	r3, [r5, #0]
 8010672:	f10b 0301 	add.w	r3, fp, #1
 8010676:	6013      	str	r3, [r2, #0]
 8010678:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801067a:	2b00      	cmp	r3, #0
 801067c:	f43f ace2 	beq.w	8010044 <_dtoa_r+0xa4>
 8010680:	601d      	str	r5, [r3, #0]
 8010682:	e4df      	b.n	8010044 <_dtoa_r+0xa4>
 8010684:	465f      	mov	r7, fp
 8010686:	462b      	mov	r3, r5
 8010688:	461d      	mov	r5, r3
 801068a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801068e:	2a39      	cmp	r2, #57	; 0x39
 8010690:	d106      	bne.n	80106a0 <_dtoa_r+0x700>
 8010692:	9a00      	ldr	r2, [sp, #0]
 8010694:	429a      	cmp	r2, r3
 8010696:	d1f7      	bne.n	8010688 <_dtoa_r+0x6e8>
 8010698:	9900      	ldr	r1, [sp, #0]
 801069a:	2230      	movs	r2, #48	; 0x30
 801069c:	3701      	adds	r7, #1
 801069e:	700a      	strb	r2, [r1, #0]
 80106a0:	781a      	ldrb	r2, [r3, #0]
 80106a2:	3201      	adds	r2, #1
 80106a4:	701a      	strb	r2, [r3, #0]
 80106a6:	e790      	b.n	80105ca <_dtoa_r+0x62a>
 80106a8:	4ba3      	ldr	r3, [pc, #652]	; (8010938 <_dtoa_r+0x998>)
 80106aa:	2200      	movs	r2, #0
 80106ac:	f7ef ffb4 	bl	8000618 <__aeabi_dmul>
 80106b0:	2200      	movs	r2, #0
 80106b2:	2300      	movs	r3, #0
 80106b4:	4606      	mov	r6, r0
 80106b6:	460f      	mov	r7, r1
 80106b8:	f7f0 fa16 	bl	8000ae8 <__aeabi_dcmpeq>
 80106bc:	2800      	cmp	r0, #0
 80106be:	d09e      	beq.n	80105fe <_dtoa_r+0x65e>
 80106c0:	e7d0      	b.n	8010664 <_dtoa_r+0x6c4>
 80106c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106c4:	2a00      	cmp	r2, #0
 80106c6:	f000 80ca 	beq.w	801085e <_dtoa_r+0x8be>
 80106ca:	9a07      	ldr	r2, [sp, #28]
 80106cc:	2a01      	cmp	r2, #1
 80106ce:	f300 80ad 	bgt.w	801082c <_dtoa_r+0x88c>
 80106d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80106d4:	2a00      	cmp	r2, #0
 80106d6:	f000 80a5 	beq.w	8010824 <_dtoa_r+0x884>
 80106da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80106de:	9e08      	ldr	r6, [sp, #32]
 80106e0:	9d05      	ldr	r5, [sp, #20]
 80106e2:	9a05      	ldr	r2, [sp, #20]
 80106e4:	441a      	add	r2, r3
 80106e6:	9205      	str	r2, [sp, #20]
 80106e8:	9a06      	ldr	r2, [sp, #24]
 80106ea:	2101      	movs	r1, #1
 80106ec:	441a      	add	r2, r3
 80106ee:	4620      	mov	r0, r4
 80106f0:	9206      	str	r2, [sp, #24]
 80106f2:	f000 fc3d 	bl	8010f70 <__i2b>
 80106f6:	4607      	mov	r7, r0
 80106f8:	b165      	cbz	r5, 8010714 <_dtoa_r+0x774>
 80106fa:	9b06      	ldr	r3, [sp, #24]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	dd09      	ble.n	8010714 <_dtoa_r+0x774>
 8010700:	42ab      	cmp	r3, r5
 8010702:	9a05      	ldr	r2, [sp, #20]
 8010704:	bfa8      	it	ge
 8010706:	462b      	movge	r3, r5
 8010708:	1ad2      	subs	r2, r2, r3
 801070a:	9205      	str	r2, [sp, #20]
 801070c:	9a06      	ldr	r2, [sp, #24]
 801070e:	1aed      	subs	r5, r5, r3
 8010710:	1ad3      	subs	r3, r2, r3
 8010712:	9306      	str	r3, [sp, #24]
 8010714:	9b08      	ldr	r3, [sp, #32]
 8010716:	b1f3      	cbz	r3, 8010756 <_dtoa_r+0x7b6>
 8010718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801071a:	2b00      	cmp	r3, #0
 801071c:	f000 80a3 	beq.w	8010866 <_dtoa_r+0x8c6>
 8010720:	2e00      	cmp	r6, #0
 8010722:	dd10      	ble.n	8010746 <_dtoa_r+0x7a6>
 8010724:	4639      	mov	r1, r7
 8010726:	4632      	mov	r2, r6
 8010728:	4620      	mov	r0, r4
 801072a:	f000 fce1 	bl	80110f0 <__pow5mult>
 801072e:	4652      	mov	r2, sl
 8010730:	4601      	mov	r1, r0
 8010732:	4607      	mov	r7, r0
 8010734:	4620      	mov	r0, r4
 8010736:	f000 fc31 	bl	8010f9c <__multiply>
 801073a:	4651      	mov	r1, sl
 801073c:	4680      	mov	r8, r0
 801073e:	4620      	mov	r0, r4
 8010740:	f000 fb60 	bl	8010e04 <_Bfree>
 8010744:	46c2      	mov	sl, r8
 8010746:	9b08      	ldr	r3, [sp, #32]
 8010748:	1b9a      	subs	r2, r3, r6
 801074a:	d004      	beq.n	8010756 <_dtoa_r+0x7b6>
 801074c:	4651      	mov	r1, sl
 801074e:	4620      	mov	r0, r4
 8010750:	f000 fcce 	bl	80110f0 <__pow5mult>
 8010754:	4682      	mov	sl, r0
 8010756:	2101      	movs	r1, #1
 8010758:	4620      	mov	r0, r4
 801075a:	f000 fc09 	bl	8010f70 <__i2b>
 801075e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010760:	2b00      	cmp	r3, #0
 8010762:	4606      	mov	r6, r0
 8010764:	f340 8081 	ble.w	801086a <_dtoa_r+0x8ca>
 8010768:	461a      	mov	r2, r3
 801076a:	4601      	mov	r1, r0
 801076c:	4620      	mov	r0, r4
 801076e:	f000 fcbf 	bl	80110f0 <__pow5mult>
 8010772:	9b07      	ldr	r3, [sp, #28]
 8010774:	2b01      	cmp	r3, #1
 8010776:	4606      	mov	r6, r0
 8010778:	dd7a      	ble.n	8010870 <_dtoa_r+0x8d0>
 801077a:	f04f 0800 	mov.w	r8, #0
 801077e:	6933      	ldr	r3, [r6, #16]
 8010780:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010784:	6918      	ldr	r0, [r3, #16]
 8010786:	f000 fba5 	bl	8010ed4 <__hi0bits>
 801078a:	f1c0 0020 	rsb	r0, r0, #32
 801078e:	9b06      	ldr	r3, [sp, #24]
 8010790:	4418      	add	r0, r3
 8010792:	f010 001f 	ands.w	r0, r0, #31
 8010796:	f000 8094 	beq.w	80108c2 <_dtoa_r+0x922>
 801079a:	f1c0 0320 	rsb	r3, r0, #32
 801079e:	2b04      	cmp	r3, #4
 80107a0:	f340 8085 	ble.w	80108ae <_dtoa_r+0x90e>
 80107a4:	9b05      	ldr	r3, [sp, #20]
 80107a6:	f1c0 001c 	rsb	r0, r0, #28
 80107aa:	4403      	add	r3, r0
 80107ac:	9305      	str	r3, [sp, #20]
 80107ae:	9b06      	ldr	r3, [sp, #24]
 80107b0:	4403      	add	r3, r0
 80107b2:	4405      	add	r5, r0
 80107b4:	9306      	str	r3, [sp, #24]
 80107b6:	9b05      	ldr	r3, [sp, #20]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	dd05      	ble.n	80107c8 <_dtoa_r+0x828>
 80107bc:	4651      	mov	r1, sl
 80107be:	461a      	mov	r2, r3
 80107c0:	4620      	mov	r0, r4
 80107c2:	f000 fcef 	bl	80111a4 <__lshift>
 80107c6:	4682      	mov	sl, r0
 80107c8:	9b06      	ldr	r3, [sp, #24]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	dd05      	ble.n	80107da <_dtoa_r+0x83a>
 80107ce:	4631      	mov	r1, r6
 80107d0:	461a      	mov	r2, r3
 80107d2:	4620      	mov	r0, r4
 80107d4:	f000 fce6 	bl	80111a4 <__lshift>
 80107d8:	4606      	mov	r6, r0
 80107da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d072      	beq.n	80108c6 <_dtoa_r+0x926>
 80107e0:	4631      	mov	r1, r6
 80107e2:	4650      	mov	r0, sl
 80107e4:	f000 fd4a 	bl	801127c <__mcmp>
 80107e8:	2800      	cmp	r0, #0
 80107ea:	da6c      	bge.n	80108c6 <_dtoa_r+0x926>
 80107ec:	2300      	movs	r3, #0
 80107ee:	4651      	mov	r1, sl
 80107f0:	220a      	movs	r2, #10
 80107f2:	4620      	mov	r0, r4
 80107f4:	f000 fb28 	bl	8010e48 <__multadd>
 80107f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107fa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80107fe:	4682      	mov	sl, r0
 8010800:	2b00      	cmp	r3, #0
 8010802:	f000 81b0 	beq.w	8010b66 <_dtoa_r+0xbc6>
 8010806:	2300      	movs	r3, #0
 8010808:	4639      	mov	r1, r7
 801080a:	220a      	movs	r2, #10
 801080c:	4620      	mov	r0, r4
 801080e:	f000 fb1b 	bl	8010e48 <__multadd>
 8010812:	9b01      	ldr	r3, [sp, #4]
 8010814:	2b00      	cmp	r3, #0
 8010816:	4607      	mov	r7, r0
 8010818:	f300 8096 	bgt.w	8010948 <_dtoa_r+0x9a8>
 801081c:	9b07      	ldr	r3, [sp, #28]
 801081e:	2b02      	cmp	r3, #2
 8010820:	dc59      	bgt.n	80108d6 <_dtoa_r+0x936>
 8010822:	e091      	b.n	8010948 <_dtoa_r+0x9a8>
 8010824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010826:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801082a:	e758      	b.n	80106de <_dtoa_r+0x73e>
 801082c:	9b04      	ldr	r3, [sp, #16]
 801082e:	1e5e      	subs	r6, r3, #1
 8010830:	9b08      	ldr	r3, [sp, #32]
 8010832:	42b3      	cmp	r3, r6
 8010834:	bfbf      	itttt	lt
 8010836:	9b08      	ldrlt	r3, [sp, #32]
 8010838:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801083a:	9608      	strlt	r6, [sp, #32]
 801083c:	1af3      	sublt	r3, r6, r3
 801083e:	bfb4      	ite	lt
 8010840:	18d2      	addlt	r2, r2, r3
 8010842:	1b9e      	subge	r6, r3, r6
 8010844:	9b04      	ldr	r3, [sp, #16]
 8010846:	bfbc      	itt	lt
 8010848:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801084a:	2600      	movlt	r6, #0
 801084c:	2b00      	cmp	r3, #0
 801084e:	bfb7      	itett	lt
 8010850:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010854:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010858:	1a9d      	sublt	r5, r3, r2
 801085a:	2300      	movlt	r3, #0
 801085c:	e741      	b.n	80106e2 <_dtoa_r+0x742>
 801085e:	9e08      	ldr	r6, [sp, #32]
 8010860:	9d05      	ldr	r5, [sp, #20]
 8010862:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010864:	e748      	b.n	80106f8 <_dtoa_r+0x758>
 8010866:	9a08      	ldr	r2, [sp, #32]
 8010868:	e770      	b.n	801074c <_dtoa_r+0x7ac>
 801086a:	9b07      	ldr	r3, [sp, #28]
 801086c:	2b01      	cmp	r3, #1
 801086e:	dc19      	bgt.n	80108a4 <_dtoa_r+0x904>
 8010870:	9b02      	ldr	r3, [sp, #8]
 8010872:	b9bb      	cbnz	r3, 80108a4 <_dtoa_r+0x904>
 8010874:	9b03      	ldr	r3, [sp, #12]
 8010876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801087a:	b99b      	cbnz	r3, 80108a4 <_dtoa_r+0x904>
 801087c:	9b03      	ldr	r3, [sp, #12]
 801087e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010882:	0d1b      	lsrs	r3, r3, #20
 8010884:	051b      	lsls	r3, r3, #20
 8010886:	b183      	cbz	r3, 80108aa <_dtoa_r+0x90a>
 8010888:	9b05      	ldr	r3, [sp, #20]
 801088a:	3301      	adds	r3, #1
 801088c:	9305      	str	r3, [sp, #20]
 801088e:	9b06      	ldr	r3, [sp, #24]
 8010890:	3301      	adds	r3, #1
 8010892:	9306      	str	r3, [sp, #24]
 8010894:	f04f 0801 	mov.w	r8, #1
 8010898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801089a:	2b00      	cmp	r3, #0
 801089c:	f47f af6f 	bne.w	801077e <_dtoa_r+0x7de>
 80108a0:	2001      	movs	r0, #1
 80108a2:	e774      	b.n	801078e <_dtoa_r+0x7ee>
 80108a4:	f04f 0800 	mov.w	r8, #0
 80108a8:	e7f6      	b.n	8010898 <_dtoa_r+0x8f8>
 80108aa:	4698      	mov	r8, r3
 80108ac:	e7f4      	b.n	8010898 <_dtoa_r+0x8f8>
 80108ae:	d082      	beq.n	80107b6 <_dtoa_r+0x816>
 80108b0:	9a05      	ldr	r2, [sp, #20]
 80108b2:	331c      	adds	r3, #28
 80108b4:	441a      	add	r2, r3
 80108b6:	9205      	str	r2, [sp, #20]
 80108b8:	9a06      	ldr	r2, [sp, #24]
 80108ba:	441a      	add	r2, r3
 80108bc:	441d      	add	r5, r3
 80108be:	9206      	str	r2, [sp, #24]
 80108c0:	e779      	b.n	80107b6 <_dtoa_r+0x816>
 80108c2:	4603      	mov	r3, r0
 80108c4:	e7f4      	b.n	80108b0 <_dtoa_r+0x910>
 80108c6:	9b04      	ldr	r3, [sp, #16]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	dc37      	bgt.n	801093c <_dtoa_r+0x99c>
 80108cc:	9b07      	ldr	r3, [sp, #28]
 80108ce:	2b02      	cmp	r3, #2
 80108d0:	dd34      	ble.n	801093c <_dtoa_r+0x99c>
 80108d2:	9b04      	ldr	r3, [sp, #16]
 80108d4:	9301      	str	r3, [sp, #4]
 80108d6:	9b01      	ldr	r3, [sp, #4]
 80108d8:	b963      	cbnz	r3, 80108f4 <_dtoa_r+0x954>
 80108da:	4631      	mov	r1, r6
 80108dc:	2205      	movs	r2, #5
 80108de:	4620      	mov	r0, r4
 80108e0:	f000 fab2 	bl	8010e48 <__multadd>
 80108e4:	4601      	mov	r1, r0
 80108e6:	4606      	mov	r6, r0
 80108e8:	4650      	mov	r0, sl
 80108ea:	f000 fcc7 	bl	801127c <__mcmp>
 80108ee:	2800      	cmp	r0, #0
 80108f0:	f73f adbb 	bgt.w	801046a <_dtoa_r+0x4ca>
 80108f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108f6:	9d00      	ldr	r5, [sp, #0]
 80108f8:	ea6f 0b03 	mvn.w	fp, r3
 80108fc:	f04f 0800 	mov.w	r8, #0
 8010900:	4631      	mov	r1, r6
 8010902:	4620      	mov	r0, r4
 8010904:	f000 fa7e 	bl	8010e04 <_Bfree>
 8010908:	2f00      	cmp	r7, #0
 801090a:	f43f aeab 	beq.w	8010664 <_dtoa_r+0x6c4>
 801090e:	f1b8 0f00 	cmp.w	r8, #0
 8010912:	d005      	beq.n	8010920 <_dtoa_r+0x980>
 8010914:	45b8      	cmp	r8, r7
 8010916:	d003      	beq.n	8010920 <_dtoa_r+0x980>
 8010918:	4641      	mov	r1, r8
 801091a:	4620      	mov	r0, r4
 801091c:	f000 fa72 	bl	8010e04 <_Bfree>
 8010920:	4639      	mov	r1, r7
 8010922:	4620      	mov	r0, r4
 8010924:	f000 fa6e 	bl	8010e04 <_Bfree>
 8010928:	e69c      	b.n	8010664 <_dtoa_r+0x6c4>
 801092a:	2600      	movs	r6, #0
 801092c:	4637      	mov	r7, r6
 801092e:	e7e1      	b.n	80108f4 <_dtoa_r+0x954>
 8010930:	46bb      	mov	fp, r7
 8010932:	4637      	mov	r7, r6
 8010934:	e599      	b.n	801046a <_dtoa_r+0x4ca>
 8010936:	bf00      	nop
 8010938:	40240000 	.word	0x40240000
 801093c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801093e:	2b00      	cmp	r3, #0
 8010940:	f000 80c8 	beq.w	8010ad4 <_dtoa_r+0xb34>
 8010944:	9b04      	ldr	r3, [sp, #16]
 8010946:	9301      	str	r3, [sp, #4]
 8010948:	2d00      	cmp	r5, #0
 801094a:	dd05      	ble.n	8010958 <_dtoa_r+0x9b8>
 801094c:	4639      	mov	r1, r7
 801094e:	462a      	mov	r2, r5
 8010950:	4620      	mov	r0, r4
 8010952:	f000 fc27 	bl	80111a4 <__lshift>
 8010956:	4607      	mov	r7, r0
 8010958:	f1b8 0f00 	cmp.w	r8, #0
 801095c:	d05b      	beq.n	8010a16 <_dtoa_r+0xa76>
 801095e:	6879      	ldr	r1, [r7, #4]
 8010960:	4620      	mov	r0, r4
 8010962:	f000 fa0f 	bl	8010d84 <_Balloc>
 8010966:	4605      	mov	r5, r0
 8010968:	b928      	cbnz	r0, 8010976 <_dtoa_r+0x9d6>
 801096a:	4b83      	ldr	r3, [pc, #524]	; (8010b78 <_dtoa_r+0xbd8>)
 801096c:	4602      	mov	r2, r0
 801096e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010972:	f7ff bb2e 	b.w	800ffd2 <_dtoa_r+0x32>
 8010976:	693a      	ldr	r2, [r7, #16]
 8010978:	3202      	adds	r2, #2
 801097a:	0092      	lsls	r2, r2, #2
 801097c:	f107 010c 	add.w	r1, r7, #12
 8010980:	300c      	adds	r0, #12
 8010982:	f7ff fa76 	bl	800fe72 <memcpy>
 8010986:	2201      	movs	r2, #1
 8010988:	4629      	mov	r1, r5
 801098a:	4620      	mov	r0, r4
 801098c:	f000 fc0a 	bl	80111a4 <__lshift>
 8010990:	9b00      	ldr	r3, [sp, #0]
 8010992:	3301      	adds	r3, #1
 8010994:	9304      	str	r3, [sp, #16]
 8010996:	e9dd 2300 	ldrd	r2, r3, [sp]
 801099a:	4413      	add	r3, r2
 801099c:	9308      	str	r3, [sp, #32]
 801099e:	9b02      	ldr	r3, [sp, #8]
 80109a0:	f003 0301 	and.w	r3, r3, #1
 80109a4:	46b8      	mov	r8, r7
 80109a6:	9306      	str	r3, [sp, #24]
 80109a8:	4607      	mov	r7, r0
 80109aa:	9b04      	ldr	r3, [sp, #16]
 80109ac:	4631      	mov	r1, r6
 80109ae:	3b01      	subs	r3, #1
 80109b0:	4650      	mov	r0, sl
 80109b2:	9301      	str	r3, [sp, #4]
 80109b4:	f7ff fa6b 	bl	800fe8e <quorem>
 80109b8:	4641      	mov	r1, r8
 80109ba:	9002      	str	r0, [sp, #8]
 80109bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80109c0:	4650      	mov	r0, sl
 80109c2:	f000 fc5b 	bl	801127c <__mcmp>
 80109c6:	463a      	mov	r2, r7
 80109c8:	9005      	str	r0, [sp, #20]
 80109ca:	4631      	mov	r1, r6
 80109cc:	4620      	mov	r0, r4
 80109ce:	f000 fc71 	bl	80112b4 <__mdiff>
 80109d2:	68c2      	ldr	r2, [r0, #12]
 80109d4:	4605      	mov	r5, r0
 80109d6:	bb02      	cbnz	r2, 8010a1a <_dtoa_r+0xa7a>
 80109d8:	4601      	mov	r1, r0
 80109da:	4650      	mov	r0, sl
 80109dc:	f000 fc4e 	bl	801127c <__mcmp>
 80109e0:	4602      	mov	r2, r0
 80109e2:	4629      	mov	r1, r5
 80109e4:	4620      	mov	r0, r4
 80109e6:	9209      	str	r2, [sp, #36]	; 0x24
 80109e8:	f000 fa0c 	bl	8010e04 <_Bfree>
 80109ec:	9b07      	ldr	r3, [sp, #28]
 80109ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109f0:	9d04      	ldr	r5, [sp, #16]
 80109f2:	ea43 0102 	orr.w	r1, r3, r2
 80109f6:	9b06      	ldr	r3, [sp, #24]
 80109f8:	4319      	orrs	r1, r3
 80109fa:	d110      	bne.n	8010a1e <_dtoa_r+0xa7e>
 80109fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010a00:	d029      	beq.n	8010a56 <_dtoa_r+0xab6>
 8010a02:	9b05      	ldr	r3, [sp, #20]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	dd02      	ble.n	8010a0e <_dtoa_r+0xa6e>
 8010a08:	9b02      	ldr	r3, [sp, #8]
 8010a0a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010a0e:	9b01      	ldr	r3, [sp, #4]
 8010a10:	f883 9000 	strb.w	r9, [r3]
 8010a14:	e774      	b.n	8010900 <_dtoa_r+0x960>
 8010a16:	4638      	mov	r0, r7
 8010a18:	e7ba      	b.n	8010990 <_dtoa_r+0x9f0>
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	e7e1      	b.n	80109e2 <_dtoa_r+0xa42>
 8010a1e:	9b05      	ldr	r3, [sp, #20]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	db04      	blt.n	8010a2e <_dtoa_r+0xa8e>
 8010a24:	9907      	ldr	r1, [sp, #28]
 8010a26:	430b      	orrs	r3, r1
 8010a28:	9906      	ldr	r1, [sp, #24]
 8010a2a:	430b      	orrs	r3, r1
 8010a2c:	d120      	bne.n	8010a70 <_dtoa_r+0xad0>
 8010a2e:	2a00      	cmp	r2, #0
 8010a30:	dded      	ble.n	8010a0e <_dtoa_r+0xa6e>
 8010a32:	4651      	mov	r1, sl
 8010a34:	2201      	movs	r2, #1
 8010a36:	4620      	mov	r0, r4
 8010a38:	f000 fbb4 	bl	80111a4 <__lshift>
 8010a3c:	4631      	mov	r1, r6
 8010a3e:	4682      	mov	sl, r0
 8010a40:	f000 fc1c 	bl	801127c <__mcmp>
 8010a44:	2800      	cmp	r0, #0
 8010a46:	dc03      	bgt.n	8010a50 <_dtoa_r+0xab0>
 8010a48:	d1e1      	bne.n	8010a0e <_dtoa_r+0xa6e>
 8010a4a:	f019 0f01 	tst.w	r9, #1
 8010a4e:	d0de      	beq.n	8010a0e <_dtoa_r+0xa6e>
 8010a50:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010a54:	d1d8      	bne.n	8010a08 <_dtoa_r+0xa68>
 8010a56:	9a01      	ldr	r2, [sp, #4]
 8010a58:	2339      	movs	r3, #57	; 0x39
 8010a5a:	7013      	strb	r3, [r2, #0]
 8010a5c:	462b      	mov	r3, r5
 8010a5e:	461d      	mov	r5, r3
 8010a60:	3b01      	subs	r3, #1
 8010a62:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010a66:	2a39      	cmp	r2, #57	; 0x39
 8010a68:	d06c      	beq.n	8010b44 <_dtoa_r+0xba4>
 8010a6a:	3201      	adds	r2, #1
 8010a6c:	701a      	strb	r2, [r3, #0]
 8010a6e:	e747      	b.n	8010900 <_dtoa_r+0x960>
 8010a70:	2a00      	cmp	r2, #0
 8010a72:	dd07      	ble.n	8010a84 <_dtoa_r+0xae4>
 8010a74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010a78:	d0ed      	beq.n	8010a56 <_dtoa_r+0xab6>
 8010a7a:	9a01      	ldr	r2, [sp, #4]
 8010a7c:	f109 0301 	add.w	r3, r9, #1
 8010a80:	7013      	strb	r3, [r2, #0]
 8010a82:	e73d      	b.n	8010900 <_dtoa_r+0x960>
 8010a84:	9b04      	ldr	r3, [sp, #16]
 8010a86:	9a08      	ldr	r2, [sp, #32]
 8010a88:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d043      	beq.n	8010b18 <_dtoa_r+0xb78>
 8010a90:	4651      	mov	r1, sl
 8010a92:	2300      	movs	r3, #0
 8010a94:	220a      	movs	r2, #10
 8010a96:	4620      	mov	r0, r4
 8010a98:	f000 f9d6 	bl	8010e48 <__multadd>
 8010a9c:	45b8      	cmp	r8, r7
 8010a9e:	4682      	mov	sl, r0
 8010aa0:	f04f 0300 	mov.w	r3, #0
 8010aa4:	f04f 020a 	mov.w	r2, #10
 8010aa8:	4641      	mov	r1, r8
 8010aaa:	4620      	mov	r0, r4
 8010aac:	d107      	bne.n	8010abe <_dtoa_r+0xb1e>
 8010aae:	f000 f9cb 	bl	8010e48 <__multadd>
 8010ab2:	4680      	mov	r8, r0
 8010ab4:	4607      	mov	r7, r0
 8010ab6:	9b04      	ldr	r3, [sp, #16]
 8010ab8:	3301      	adds	r3, #1
 8010aba:	9304      	str	r3, [sp, #16]
 8010abc:	e775      	b.n	80109aa <_dtoa_r+0xa0a>
 8010abe:	f000 f9c3 	bl	8010e48 <__multadd>
 8010ac2:	4639      	mov	r1, r7
 8010ac4:	4680      	mov	r8, r0
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	220a      	movs	r2, #10
 8010aca:	4620      	mov	r0, r4
 8010acc:	f000 f9bc 	bl	8010e48 <__multadd>
 8010ad0:	4607      	mov	r7, r0
 8010ad2:	e7f0      	b.n	8010ab6 <_dtoa_r+0xb16>
 8010ad4:	9b04      	ldr	r3, [sp, #16]
 8010ad6:	9301      	str	r3, [sp, #4]
 8010ad8:	9d00      	ldr	r5, [sp, #0]
 8010ada:	4631      	mov	r1, r6
 8010adc:	4650      	mov	r0, sl
 8010ade:	f7ff f9d6 	bl	800fe8e <quorem>
 8010ae2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010ae6:	9b00      	ldr	r3, [sp, #0]
 8010ae8:	f805 9b01 	strb.w	r9, [r5], #1
 8010aec:	1aea      	subs	r2, r5, r3
 8010aee:	9b01      	ldr	r3, [sp, #4]
 8010af0:	4293      	cmp	r3, r2
 8010af2:	dd07      	ble.n	8010b04 <_dtoa_r+0xb64>
 8010af4:	4651      	mov	r1, sl
 8010af6:	2300      	movs	r3, #0
 8010af8:	220a      	movs	r2, #10
 8010afa:	4620      	mov	r0, r4
 8010afc:	f000 f9a4 	bl	8010e48 <__multadd>
 8010b00:	4682      	mov	sl, r0
 8010b02:	e7ea      	b.n	8010ada <_dtoa_r+0xb3a>
 8010b04:	9b01      	ldr	r3, [sp, #4]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	bfc8      	it	gt
 8010b0a:	461d      	movgt	r5, r3
 8010b0c:	9b00      	ldr	r3, [sp, #0]
 8010b0e:	bfd8      	it	le
 8010b10:	2501      	movle	r5, #1
 8010b12:	441d      	add	r5, r3
 8010b14:	f04f 0800 	mov.w	r8, #0
 8010b18:	4651      	mov	r1, sl
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	f000 fb41 	bl	80111a4 <__lshift>
 8010b22:	4631      	mov	r1, r6
 8010b24:	4682      	mov	sl, r0
 8010b26:	f000 fba9 	bl	801127c <__mcmp>
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	dc96      	bgt.n	8010a5c <_dtoa_r+0xabc>
 8010b2e:	d102      	bne.n	8010b36 <_dtoa_r+0xb96>
 8010b30:	f019 0f01 	tst.w	r9, #1
 8010b34:	d192      	bne.n	8010a5c <_dtoa_r+0xabc>
 8010b36:	462b      	mov	r3, r5
 8010b38:	461d      	mov	r5, r3
 8010b3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b3e:	2a30      	cmp	r2, #48	; 0x30
 8010b40:	d0fa      	beq.n	8010b38 <_dtoa_r+0xb98>
 8010b42:	e6dd      	b.n	8010900 <_dtoa_r+0x960>
 8010b44:	9a00      	ldr	r2, [sp, #0]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d189      	bne.n	8010a5e <_dtoa_r+0xabe>
 8010b4a:	f10b 0b01 	add.w	fp, fp, #1
 8010b4e:	2331      	movs	r3, #49	; 0x31
 8010b50:	e796      	b.n	8010a80 <_dtoa_r+0xae0>
 8010b52:	4b0a      	ldr	r3, [pc, #40]	; (8010b7c <_dtoa_r+0xbdc>)
 8010b54:	f7ff ba99 	b.w	801008a <_dtoa_r+0xea>
 8010b58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	f47f aa6d 	bne.w	801003a <_dtoa_r+0x9a>
 8010b60:	4b07      	ldr	r3, [pc, #28]	; (8010b80 <_dtoa_r+0xbe0>)
 8010b62:	f7ff ba92 	b.w	801008a <_dtoa_r+0xea>
 8010b66:	9b01      	ldr	r3, [sp, #4]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	dcb5      	bgt.n	8010ad8 <_dtoa_r+0xb38>
 8010b6c:	9b07      	ldr	r3, [sp, #28]
 8010b6e:	2b02      	cmp	r3, #2
 8010b70:	f73f aeb1 	bgt.w	80108d6 <_dtoa_r+0x936>
 8010b74:	e7b0      	b.n	8010ad8 <_dtoa_r+0xb38>
 8010b76:	bf00      	nop
 8010b78:	080126e9 	.word	0x080126e9
 8010b7c:	08012649 	.word	0x08012649
 8010b80:	0801266d 	.word	0x0801266d

08010b84 <_free_r>:
 8010b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b86:	2900      	cmp	r1, #0
 8010b88:	d044      	beq.n	8010c14 <_free_r+0x90>
 8010b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b8e:	9001      	str	r0, [sp, #4]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	f1a1 0404 	sub.w	r4, r1, #4
 8010b96:	bfb8      	it	lt
 8010b98:	18e4      	addlt	r4, r4, r3
 8010b9a:	f000 f8e7 	bl	8010d6c <__malloc_lock>
 8010b9e:	4a1e      	ldr	r2, [pc, #120]	; (8010c18 <_free_r+0x94>)
 8010ba0:	9801      	ldr	r0, [sp, #4]
 8010ba2:	6813      	ldr	r3, [r2, #0]
 8010ba4:	b933      	cbnz	r3, 8010bb4 <_free_r+0x30>
 8010ba6:	6063      	str	r3, [r4, #4]
 8010ba8:	6014      	str	r4, [r2, #0]
 8010baa:	b003      	add	sp, #12
 8010bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bb0:	f000 b8e2 	b.w	8010d78 <__malloc_unlock>
 8010bb4:	42a3      	cmp	r3, r4
 8010bb6:	d908      	bls.n	8010bca <_free_r+0x46>
 8010bb8:	6825      	ldr	r5, [r4, #0]
 8010bba:	1961      	adds	r1, r4, r5
 8010bbc:	428b      	cmp	r3, r1
 8010bbe:	bf01      	itttt	eq
 8010bc0:	6819      	ldreq	r1, [r3, #0]
 8010bc2:	685b      	ldreq	r3, [r3, #4]
 8010bc4:	1949      	addeq	r1, r1, r5
 8010bc6:	6021      	streq	r1, [r4, #0]
 8010bc8:	e7ed      	b.n	8010ba6 <_free_r+0x22>
 8010bca:	461a      	mov	r2, r3
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	b10b      	cbz	r3, 8010bd4 <_free_r+0x50>
 8010bd0:	42a3      	cmp	r3, r4
 8010bd2:	d9fa      	bls.n	8010bca <_free_r+0x46>
 8010bd4:	6811      	ldr	r1, [r2, #0]
 8010bd6:	1855      	adds	r5, r2, r1
 8010bd8:	42a5      	cmp	r5, r4
 8010bda:	d10b      	bne.n	8010bf4 <_free_r+0x70>
 8010bdc:	6824      	ldr	r4, [r4, #0]
 8010bde:	4421      	add	r1, r4
 8010be0:	1854      	adds	r4, r2, r1
 8010be2:	42a3      	cmp	r3, r4
 8010be4:	6011      	str	r1, [r2, #0]
 8010be6:	d1e0      	bne.n	8010baa <_free_r+0x26>
 8010be8:	681c      	ldr	r4, [r3, #0]
 8010bea:	685b      	ldr	r3, [r3, #4]
 8010bec:	6053      	str	r3, [r2, #4]
 8010bee:	440c      	add	r4, r1
 8010bf0:	6014      	str	r4, [r2, #0]
 8010bf2:	e7da      	b.n	8010baa <_free_r+0x26>
 8010bf4:	d902      	bls.n	8010bfc <_free_r+0x78>
 8010bf6:	230c      	movs	r3, #12
 8010bf8:	6003      	str	r3, [r0, #0]
 8010bfa:	e7d6      	b.n	8010baa <_free_r+0x26>
 8010bfc:	6825      	ldr	r5, [r4, #0]
 8010bfe:	1961      	adds	r1, r4, r5
 8010c00:	428b      	cmp	r3, r1
 8010c02:	bf04      	itt	eq
 8010c04:	6819      	ldreq	r1, [r3, #0]
 8010c06:	685b      	ldreq	r3, [r3, #4]
 8010c08:	6063      	str	r3, [r4, #4]
 8010c0a:	bf04      	itt	eq
 8010c0c:	1949      	addeq	r1, r1, r5
 8010c0e:	6021      	streq	r1, [r4, #0]
 8010c10:	6054      	str	r4, [r2, #4]
 8010c12:	e7ca      	b.n	8010baa <_free_r+0x26>
 8010c14:	b003      	add	sp, #12
 8010c16:	bd30      	pop	{r4, r5, pc}
 8010c18:	20008748 	.word	0x20008748

08010c1c <malloc>:
 8010c1c:	4b02      	ldr	r3, [pc, #8]	; (8010c28 <malloc+0xc>)
 8010c1e:	4601      	mov	r1, r0
 8010c20:	6818      	ldr	r0, [r3, #0]
 8010c22:	f000 b823 	b.w	8010c6c <_malloc_r>
 8010c26:	bf00      	nop
 8010c28:	20000214 	.word	0x20000214

08010c2c <sbrk_aligned>:
 8010c2c:	b570      	push	{r4, r5, r6, lr}
 8010c2e:	4e0e      	ldr	r6, [pc, #56]	; (8010c68 <sbrk_aligned+0x3c>)
 8010c30:	460c      	mov	r4, r1
 8010c32:	6831      	ldr	r1, [r6, #0]
 8010c34:	4605      	mov	r5, r0
 8010c36:	b911      	cbnz	r1, 8010c3e <sbrk_aligned+0x12>
 8010c38:	f000 fe1c 	bl	8011874 <_sbrk_r>
 8010c3c:	6030      	str	r0, [r6, #0]
 8010c3e:	4621      	mov	r1, r4
 8010c40:	4628      	mov	r0, r5
 8010c42:	f000 fe17 	bl	8011874 <_sbrk_r>
 8010c46:	1c43      	adds	r3, r0, #1
 8010c48:	d00a      	beq.n	8010c60 <sbrk_aligned+0x34>
 8010c4a:	1cc4      	adds	r4, r0, #3
 8010c4c:	f024 0403 	bic.w	r4, r4, #3
 8010c50:	42a0      	cmp	r0, r4
 8010c52:	d007      	beq.n	8010c64 <sbrk_aligned+0x38>
 8010c54:	1a21      	subs	r1, r4, r0
 8010c56:	4628      	mov	r0, r5
 8010c58:	f000 fe0c 	bl	8011874 <_sbrk_r>
 8010c5c:	3001      	adds	r0, #1
 8010c5e:	d101      	bne.n	8010c64 <sbrk_aligned+0x38>
 8010c60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010c64:	4620      	mov	r0, r4
 8010c66:	bd70      	pop	{r4, r5, r6, pc}
 8010c68:	2000874c 	.word	0x2000874c

08010c6c <_malloc_r>:
 8010c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c70:	1ccd      	adds	r5, r1, #3
 8010c72:	f025 0503 	bic.w	r5, r5, #3
 8010c76:	3508      	adds	r5, #8
 8010c78:	2d0c      	cmp	r5, #12
 8010c7a:	bf38      	it	cc
 8010c7c:	250c      	movcc	r5, #12
 8010c7e:	2d00      	cmp	r5, #0
 8010c80:	4607      	mov	r7, r0
 8010c82:	db01      	blt.n	8010c88 <_malloc_r+0x1c>
 8010c84:	42a9      	cmp	r1, r5
 8010c86:	d905      	bls.n	8010c94 <_malloc_r+0x28>
 8010c88:	230c      	movs	r3, #12
 8010c8a:	603b      	str	r3, [r7, #0]
 8010c8c:	2600      	movs	r6, #0
 8010c8e:	4630      	mov	r0, r6
 8010c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010d68 <_malloc_r+0xfc>
 8010c98:	f000 f868 	bl	8010d6c <__malloc_lock>
 8010c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8010ca0:	461c      	mov	r4, r3
 8010ca2:	bb5c      	cbnz	r4, 8010cfc <_malloc_r+0x90>
 8010ca4:	4629      	mov	r1, r5
 8010ca6:	4638      	mov	r0, r7
 8010ca8:	f7ff ffc0 	bl	8010c2c <sbrk_aligned>
 8010cac:	1c43      	adds	r3, r0, #1
 8010cae:	4604      	mov	r4, r0
 8010cb0:	d155      	bne.n	8010d5e <_malloc_r+0xf2>
 8010cb2:	f8d8 4000 	ldr.w	r4, [r8]
 8010cb6:	4626      	mov	r6, r4
 8010cb8:	2e00      	cmp	r6, #0
 8010cba:	d145      	bne.n	8010d48 <_malloc_r+0xdc>
 8010cbc:	2c00      	cmp	r4, #0
 8010cbe:	d048      	beq.n	8010d52 <_malloc_r+0xe6>
 8010cc0:	6823      	ldr	r3, [r4, #0]
 8010cc2:	4631      	mov	r1, r6
 8010cc4:	4638      	mov	r0, r7
 8010cc6:	eb04 0903 	add.w	r9, r4, r3
 8010cca:	f000 fdd3 	bl	8011874 <_sbrk_r>
 8010cce:	4581      	cmp	r9, r0
 8010cd0:	d13f      	bne.n	8010d52 <_malloc_r+0xe6>
 8010cd2:	6821      	ldr	r1, [r4, #0]
 8010cd4:	1a6d      	subs	r5, r5, r1
 8010cd6:	4629      	mov	r1, r5
 8010cd8:	4638      	mov	r0, r7
 8010cda:	f7ff ffa7 	bl	8010c2c <sbrk_aligned>
 8010cde:	3001      	adds	r0, #1
 8010ce0:	d037      	beq.n	8010d52 <_malloc_r+0xe6>
 8010ce2:	6823      	ldr	r3, [r4, #0]
 8010ce4:	442b      	add	r3, r5
 8010ce6:	6023      	str	r3, [r4, #0]
 8010ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d038      	beq.n	8010d62 <_malloc_r+0xf6>
 8010cf0:	685a      	ldr	r2, [r3, #4]
 8010cf2:	42a2      	cmp	r2, r4
 8010cf4:	d12b      	bne.n	8010d4e <_malloc_r+0xe2>
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	605a      	str	r2, [r3, #4]
 8010cfa:	e00f      	b.n	8010d1c <_malloc_r+0xb0>
 8010cfc:	6822      	ldr	r2, [r4, #0]
 8010cfe:	1b52      	subs	r2, r2, r5
 8010d00:	d41f      	bmi.n	8010d42 <_malloc_r+0xd6>
 8010d02:	2a0b      	cmp	r2, #11
 8010d04:	d917      	bls.n	8010d36 <_malloc_r+0xca>
 8010d06:	1961      	adds	r1, r4, r5
 8010d08:	42a3      	cmp	r3, r4
 8010d0a:	6025      	str	r5, [r4, #0]
 8010d0c:	bf18      	it	ne
 8010d0e:	6059      	strne	r1, [r3, #4]
 8010d10:	6863      	ldr	r3, [r4, #4]
 8010d12:	bf08      	it	eq
 8010d14:	f8c8 1000 	streq.w	r1, [r8]
 8010d18:	5162      	str	r2, [r4, r5]
 8010d1a:	604b      	str	r3, [r1, #4]
 8010d1c:	4638      	mov	r0, r7
 8010d1e:	f104 060b 	add.w	r6, r4, #11
 8010d22:	f000 f829 	bl	8010d78 <__malloc_unlock>
 8010d26:	f026 0607 	bic.w	r6, r6, #7
 8010d2a:	1d23      	adds	r3, r4, #4
 8010d2c:	1af2      	subs	r2, r6, r3
 8010d2e:	d0ae      	beq.n	8010c8e <_malloc_r+0x22>
 8010d30:	1b9b      	subs	r3, r3, r6
 8010d32:	50a3      	str	r3, [r4, r2]
 8010d34:	e7ab      	b.n	8010c8e <_malloc_r+0x22>
 8010d36:	42a3      	cmp	r3, r4
 8010d38:	6862      	ldr	r2, [r4, #4]
 8010d3a:	d1dd      	bne.n	8010cf8 <_malloc_r+0x8c>
 8010d3c:	f8c8 2000 	str.w	r2, [r8]
 8010d40:	e7ec      	b.n	8010d1c <_malloc_r+0xb0>
 8010d42:	4623      	mov	r3, r4
 8010d44:	6864      	ldr	r4, [r4, #4]
 8010d46:	e7ac      	b.n	8010ca2 <_malloc_r+0x36>
 8010d48:	4634      	mov	r4, r6
 8010d4a:	6876      	ldr	r6, [r6, #4]
 8010d4c:	e7b4      	b.n	8010cb8 <_malloc_r+0x4c>
 8010d4e:	4613      	mov	r3, r2
 8010d50:	e7cc      	b.n	8010cec <_malloc_r+0x80>
 8010d52:	230c      	movs	r3, #12
 8010d54:	603b      	str	r3, [r7, #0]
 8010d56:	4638      	mov	r0, r7
 8010d58:	f000 f80e 	bl	8010d78 <__malloc_unlock>
 8010d5c:	e797      	b.n	8010c8e <_malloc_r+0x22>
 8010d5e:	6025      	str	r5, [r4, #0]
 8010d60:	e7dc      	b.n	8010d1c <_malloc_r+0xb0>
 8010d62:	605b      	str	r3, [r3, #4]
 8010d64:	deff      	udf	#255	; 0xff
 8010d66:	bf00      	nop
 8010d68:	20008748 	.word	0x20008748

08010d6c <__malloc_lock>:
 8010d6c:	4801      	ldr	r0, [pc, #4]	; (8010d74 <__malloc_lock+0x8>)
 8010d6e:	f7ff b87e 	b.w	800fe6e <__retarget_lock_acquire_recursive>
 8010d72:	bf00      	nop
 8010d74:	20008744 	.word	0x20008744

08010d78 <__malloc_unlock>:
 8010d78:	4801      	ldr	r0, [pc, #4]	; (8010d80 <__malloc_unlock+0x8>)
 8010d7a:	f7ff b879 	b.w	800fe70 <__retarget_lock_release_recursive>
 8010d7e:	bf00      	nop
 8010d80:	20008744 	.word	0x20008744

08010d84 <_Balloc>:
 8010d84:	b570      	push	{r4, r5, r6, lr}
 8010d86:	69c6      	ldr	r6, [r0, #28]
 8010d88:	4604      	mov	r4, r0
 8010d8a:	460d      	mov	r5, r1
 8010d8c:	b976      	cbnz	r6, 8010dac <_Balloc+0x28>
 8010d8e:	2010      	movs	r0, #16
 8010d90:	f7ff ff44 	bl	8010c1c <malloc>
 8010d94:	4602      	mov	r2, r0
 8010d96:	61e0      	str	r0, [r4, #28]
 8010d98:	b920      	cbnz	r0, 8010da4 <_Balloc+0x20>
 8010d9a:	4b18      	ldr	r3, [pc, #96]	; (8010dfc <_Balloc+0x78>)
 8010d9c:	4818      	ldr	r0, [pc, #96]	; (8010e00 <_Balloc+0x7c>)
 8010d9e:	216b      	movs	r1, #107	; 0x6b
 8010da0:	f000 fd78 	bl	8011894 <__assert_func>
 8010da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010da8:	6006      	str	r6, [r0, #0]
 8010daa:	60c6      	str	r6, [r0, #12]
 8010dac:	69e6      	ldr	r6, [r4, #28]
 8010dae:	68f3      	ldr	r3, [r6, #12]
 8010db0:	b183      	cbz	r3, 8010dd4 <_Balloc+0x50>
 8010db2:	69e3      	ldr	r3, [r4, #28]
 8010db4:	68db      	ldr	r3, [r3, #12]
 8010db6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010dba:	b9b8      	cbnz	r0, 8010dec <_Balloc+0x68>
 8010dbc:	2101      	movs	r1, #1
 8010dbe:	fa01 f605 	lsl.w	r6, r1, r5
 8010dc2:	1d72      	adds	r2, r6, #5
 8010dc4:	0092      	lsls	r2, r2, #2
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	f000 fd82 	bl	80118d0 <_calloc_r>
 8010dcc:	b160      	cbz	r0, 8010de8 <_Balloc+0x64>
 8010dce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010dd2:	e00e      	b.n	8010df2 <_Balloc+0x6e>
 8010dd4:	2221      	movs	r2, #33	; 0x21
 8010dd6:	2104      	movs	r1, #4
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f000 fd79 	bl	80118d0 <_calloc_r>
 8010dde:	69e3      	ldr	r3, [r4, #28]
 8010de0:	60f0      	str	r0, [r6, #12]
 8010de2:	68db      	ldr	r3, [r3, #12]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d1e4      	bne.n	8010db2 <_Balloc+0x2e>
 8010de8:	2000      	movs	r0, #0
 8010dea:	bd70      	pop	{r4, r5, r6, pc}
 8010dec:	6802      	ldr	r2, [r0, #0]
 8010dee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010df2:	2300      	movs	r3, #0
 8010df4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010df8:	e7f7      	b.n	8010dea <_Balloc+0x66>
 8010dfa:	bf00      	nop
 8010dfc:	0801267a 	.word	0x0801267a
 8010e00:	080126fa 	.word	0x080126fa

08010e04 <_Bfree>:
 8010e04:	b570      	push	{r4, r5, r6, lr}
 8010e06:	69c6      	ldr	r6, [r0, #28]
 8010e08:	4605      	mov	r5, r0
 8010e0a:	460c      	mov	r4, r1
 8010e0c:	b976      	cbnz	r6, 8010e2c <_Bfree+0x28>
 8010e0e:	2010      	movs	r0, #16
 8010e10:	f7ff ff04 	bl	8010c1c <malloc>
 8010e14:	4602      	mov	r2, r0
 8010e16:	61e8      	str	r0, [r5, #28]
 8010e18:	b920      	cbnz	r0, 8010e24 <_Bfree+0x20>
 8010e1a:	4b09      	ldr	r3, [pc, #36]	; (8010e40 <_Bfree+0x3c>)
 8010e1c:	4809      	ldr	r0, [pc, #36]	; (8010e44 <_Bfree+0x40>)
 8010e1e:	218f      	movs	r1, #143	; 0x8f
 8010e20:	f000 fd38 	bl	8011894 <__assert_func>
 8010e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e28:	6006      	str	r6, [r0, #0]
 8010e2a:	60c6      	str	r6, [r0, #12]
 8010e2c:	b13c      	cbz	r4, 8010e3e <_Bfree+0x3a>
 8010e2e:	69eb      	ldr	r3, [r5, #28]
 8010e30:	6862      	ldr	r2, [r4, #4]
 8010e32:	68db      	ldr	r3, [r3, #12]
 8010e34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e38:	6021      	str	r1, [r4, #0]
 8010e3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e3e:	bd70      	pop	{r4, r5, r6, pc}
 8010e40:	0801267a 	.word	0x0801267a
 8010e44:	080126fa 	.word	0x080126fa

08010e48 <__multadd>:
 8010e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e4c:	690d      	ldr	r5, [r1, #16]
 8010e4e:	4607      	mov	r7, r0
 8010e50:	460c      	mov	r4, r1
 8010e52:	461e      	mov	r6, r3
 8010e54:	f101 0c14 	add.w	ip, r1, #20
 8010e58:	2000      	movs	r0, #0
 8010e5a:	f8dc 3000 	ldr.w	r3, [ip]
 8010e5e:	b299      	uxth	r1, r3
 8010e60:	fb02 6101 	mla	r1, r2, r1, r6
 8010e64:	0c1e      	lsrs	r6, r3, #16
 8010e66:	0c0b      	lsrs	r3, r1, #16
 8010e68:	fb02 3306 	mla	r3, r2, r6, r3
 8010e6c:	b289      	uxth	r1, r1
 8010e6e:	3001      	adds	r0, #1
 8010e70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010e74:	4285      	cmp	r5, r0
 8010e76:	f84c 1b04 	str.w	r1, [ip], #4
 8010e7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010e7e:	dcec      	bgt.n	8010e5a <__multadd+0x12>
 8010e80:	b30e      	cbz	r6, 8010ec6 <__multadd+0x7e>
 8010e82:	68a3      	ldr	r3, [r4, #8]
 8010e84:	42ab      	cmp	r3, r5
 8010e86:	dc19      	bgt.n	8010ebc <__multadd+0x74>
 8010e88:	6861      	ldr	r1, [r4, #4]
 8010e8a:	4638      	mov	r0, r7
 8010e8c:	3101      	adds	r1, #1
 8010e8e:	f7ff ff79 	bl	8010d84 <_Balloc>
 8010e92:	4680      	mov	r8, r0
 8010e94:	b928      	cbnz	r0, 8010ea2 <__multadd+0x5a>
 8010e96:	4602      	mov	r2, r0
 8010e98:	4b0c      	ldr	r3, [pc, #48]	; (8010ecc <__multadd+0x84>)
 8010e9a:	480d      	ldr	r0, [pc, #52]	; (8010ed0 <__multadd+0x88>)
 8010e9c:	21ba      	movs	r1, #186	; 0xba
 8010e9e:	f000 fcf9 	bl	8011894 <__assert_func>
 8010ea2:	6922      	ldr	r2, [r4, #16]
 8010ea4:	3202      	adds	r2, #2
 8010ea6:	f104 010c 	add.w	r1, r4, #12
 8010eaa:	0092      	lsls	r2, r2, #2
 8010eac:	300c      	adds	r0, #12
 8010eae:	f7fe ffe0 	bl	800fe72 <memcpy>
 8010eb2:	4621      	mov	r1, r4
 8010eb4:	4638      	mov	r0, r7
 8010eb6:	f7ff ffa5 	bl	8010e04 <_Bfree>
 8010eba:	4644      	mov	r4, r8
 8010ebc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ec0:	3501      	adds	r5, #1
 8010ec2:	615e      	str	r6, [r3, #20]
 8010ec4:	6125      	str	r5, [r4, #16]
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ecc:	080126e9 	.word	0x080126e9
 8010ed0:	080126fa 	.word	0x080126fa

08010ed4 <__hi0bits>:
 8010ed4:	0c03      	lsrs	r3, r0, #16
 8010ed6:	041b      	lsls	r3, r3, #16
 8010ed8:	b9d3      	cbnz	r3, 8010f10 <__hi0bits+0x3c>
 8010eda:	0400      	lsls	r0, r0, #16
 8010edc:	2310      	movs	r3, #16
 8010ede:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010ee2:	bf04      	itt	eq
 8010ee4:	0200      	lsleq	r0, r0, #8
 8010ee6:	3308      	addeq	r3, #8
 8010ee8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010eec:	bf04      	itt	eq
 8010eee:	0100      	lsleq	r0, r0, #4
 8010ef0:	3304      	addeq	r3, #4
 8010ef2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010ef6:	bf04      	itt	eq
 8010ef8:	0080      	lsleq	r0, r0, #2
 8010efa:	3302      	addeq	r3, #2
 8010efc:	2800      	cmp	r0, #0
 8010efe:	db05      	blt.n	8010f0c <__hi0bits+0x38>
 8010f00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010f04:	f103 0301 	add.w	r3, r3, #1
 8010f08:	bf08      	it	eq
 8010f0a:	2320      	moveq	r3, #32
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	4770      	bx	lr
 8010f10:	2300      	movs	r3, #0
 8010f12:	e7e4      	b.n	8010ede <__hi0bits+0xa>

08010f14 <__lo0bits>:
 8010f14:	6803      	ldr	r3, [r0, #0]
 8010f16:	f013 0207 	ands.w	r2, r3, #7
 8010f1a:	d00c      	beq.n	8010f36 <__lo0bits+0x22>
 8010f1c:	07d9      	lsls	r1, r3, #31
 8010f1e:	d422      	bmi.n	8010f66 <__lo0bits+0x52>
 8010f20:	079a      	lsls	r2, r3, #30
 8010f22:	bf49      	itett	mi
 8010f24:	085b      	lsrmi	r3, r3, #1
 8010f26:	089b      	lsrpl	r3, r3, #2
 8010f28:	6003      	strmi	r3, [r0, #0]
 8010f2a:	2201      	movmi	r2, #1
 8010f2c:	bf5c      	itt	pl
 8010f2e:	6003      	strpl	r3, [r0, #0]
 8010f30:	2202      	movpl	r2, #2
 8010f32:	4610      	mov	r0, r2
 8010f34:	4770      	bx	lr
 8010f36:	b299      	uxth	r1, r3
 8010f38:	b909      	cbnz	r1, 8010f3e <__lo0bits+0x2a>
 8010f3a:	0c1b      	lsrs	r3, r3, #16
 8010f3c:	2210      	movs	r2, #16
 8010f3e:	b2d9      	uxtb	r1, r3
 8010f40:	b909      	cbnz	r1, 8010f46 <__lo0bits+0x32>
 8010f42:	3208      	adds	r2, #8
 8010f44:	0a1b      	lsrs	r3, r3, #8
 8010f46:	0719      	lsls	r1, r3, #28
 8010f48:	bf04      	itt	eq
 8010f4a:	091b      	lsreq	r3, r3, #4
 8010f4c:	3204      	addeq	r2, #4
 8010f4e:	0799      	lsls	r1, r3, #30
 8010f50:	bf04      	itt	eq
 8010f52:	089b      	lsreq	r3, r3, #2
 8010f54:	3202      	addeq	r2, #2
 8010f56:	07d9      	lsls	r1, r3, #31
 8010f58:	d403      	bmi.n	8010f62 <__lo0bits+0x4e>
 8010f5a:	085b      	lsrs	r3, r3, #1
 8010f5c:	f102 0201 	add.w	r2, r2, #1
 8010f60:	d003      	beq.n	8010f6a <__lo0bits+0x56>
 8010f62:	6003      	str	r3, [r0, #0]
 8010f64:	e7e5      	b.n	8010f32 <__lo0bits+0x1e>
 8010f66:	2200      	movs	r2, #0
 8010f68:	e7e3      	b.n	8010f32 <__lo0bits+0x1e>
 8010f6a:	2220      	movs	r2, #32
 8010f6c:	e7e1      	b.n	8010f32 <__lo0bits+0x1e>
	...

08010f70 <__i2b>:
 8010f70:	b510      	push	{r4, lr}
 8010f72:	460c      	mov	r4, r1
 8010f74:	2101      	movs	r1, #1
 8010f76:	f7ff ff05 	bl	8010d84 <_Balloc>
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	b928      	cbnz	r0, 8010f8a <__i2b+0x1a>
 8010f7e:	4b05      	ldr	r3, [pc, #20]	; (8010f94 <__i2b+0x24>)
 8010f80:	4805      	ldr	r0, [pc, #20]	; (8010f98 <__i2b+0x28>)
 8010f82:	f240 1145 	movw	r1, #325	; 0x145
 8010f86:	f000 fc85 	bl	8011894 <__assert_func>
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	6144      	str	r4, [r0, #20]
 8010f8e:	6103      	str	r3, [r0, #16]
 8010f90:	bd10      	pop	{r4, pc}
 8010f92:	bf00      	nop
 8010f94:	080126e9 	.word	0x080126e9
 8010f98:	080126fa 	.word	0x080126fa

08010f9c <__multiply>:
 8010f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa0:	4691      	mov	r9, r2
 8010fa2:	690a      	ldr	r2, [r1, #16]
 8010fa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	bfb8      	it	lt
 8010fac:	460b      	movlt	r3, r1
 8010fae:	460c      	mov	r4, r1
 8010fb0:	bfbc      	itt	lt
 8010fb2:	464c      	movlt	r4, r9
 8010fb4:	4699      	movlt	r9, r3
 8010fb6:	6927      	ldr	r7, [r4, #16]
 8010fb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010fbc:	68a3      	ldr	r3, [r4, #8]
 8010fbe:	6861      	ldr	r1, [r4, #4]
 8010fc0:	eb07 060a 	add.w	r6, r7, sl
 8010fc4:	42b3      	cmp	r3, r6
 8010fc6:	b085      	sub	sp, #20
 8010fc8:	bfb8      	it	lt
 8010fca:	3101      	addlt	r1, #1
 8010fcc:	f7ff feda 	bl	8010d84 <_Balloc>
 8010fd0:	b930      	cbnz	r0, 8010fe0 <__multiply+0x44>
 8010fd2:	4602      	mov	r2, r0
 8010fd4:	4b44      	ldr	r3, [pc, #272]	; (80110e8 <__multiply+0x14c>)
 8010fd6:	4845      	ldr	r0, [pc, #276]	; (80110ec <__multiply+0x150>)
 8010fd8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010fdc:	f000 fc5a 	bl	8011894 <__assert_func>
 8010fe0:	f100 0514 	add.w	r5, r0, #20
 8010fe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010fe8:	462b      	mov	r3, r5
 8010fea:	2200      	movs	r2, #0
 8010fec:	4543      	cmp	r3, r8
 8010fee:	d321      	bcc.n	8011034 <__multiply+0x98>
 8010ff0:	f104 0314 	add.w	r3, r4, #20
 8010ff4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010ff8:	f109 0314 	add.w	r3, r9, #20
 8010ffc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011000:	9202      	str	r2, [sp, #8]
 8011002:	1b3a      	subs	r2, r7, r4
 8011004:	3a15      	subs	r2, #21
 8011006:	f022 0203 	bic.w	r2, r2, #3
 801100a:	3204      	adds	r2, #4
 801100c:	f104 0115 	add.w	r1, r4, #21
 8011010:	428f      	cmp	r7, r1
 8011012:	bf38      	it	cc
 8011014:	2204      	movcc	r2, #4
 8011016:	9201      	str	r2, [sp, #4]
 8011018:	9a02      	ldr	r2, [sp, #8]
 801101a:	9303      	str	r3, [sp, #12]
 801101c:	429a      	cmp	r2, r3
 801101e:	d80c      	bhi.n	801103a <__multiply+0x9e>
 8011020:	2e00      	cmp	r6, #0
 8011022:	dd03      	ble.n	801102c <__multiply+0x90>
 8011024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011028:	2b00      	cmp	r3, #0
 801102a:	d05b      	beq.n	80110e4 <__multiply+0x148>
 801102c:	6106      	str	r6, [r0, #16]
 801102e:	b005      	add	sp, #20
 8011030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011034:	f843 2b04 	str.w	r2, [r3], #4
 8011038:	e7d8      	b.n	8010fec <__multiply+0x50>
 801103a:	f8b3 a000 	ldrh.w	sl, [r3]
 801103e:	f1ba 0f00 	cmp.w	sl, #0
 8011042:	d024      	beq.n	801108e <__multiply+0xf2>
 8011044:	f104 0e14 	add.w	lr, r4, #20
 8011048:	46a9      	mov	r9, r5
 801104a:	f04f 0c00 	mov.w	ip, #0
 801104e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011052:	f8d9 1000 	ldr.w	r1, [r9]
 8011056:	fa1f fb82 	uxth.w	fp, r2
 801105a:	b289      	uxth	r1, r1
 801105c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011060:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011064:	f8d9 2000 	ldr.w	r2, [r9]
 8011068:	4461      	add	r1, ip
 801106a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801106e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011072:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011076:	b289      	uxth	r1, r1
 8011078:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801107c:	4577      	cmp	r7, lr
 801107e:	f849 1b04 	str.w	r1, [r9], #4
 8011082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011086:	d8e2      	bhi.n	801104e <__multiply+0xb2>
 8011088:	9a01      	ldr	r2, [sp, #4]
 801108a:	f845 c002 	str.w	ip, [r5, r2]
 801108e:	9a03      	ldr	r2, [sp, #12]
 8011090:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011094:	3304      	adds	r3, #4
 8011096:	f1b9 0f00 	cmp.w	r9, #0
 801109a:	d021      	beq.n	80110e0 <__multiply+0x144>
 801109c:	6829      	ldr	r1, [r5, #0]
 801109e:	f104 0c14 	add.w	ip, r4, #20
 80110a2:	46ae      	mov	lr, r5
 80110a4:	f04f 0a00 	mov.w	sl, #0
 80110a8:	f8bc b000 	ldrh.w	fp, [ip]
 80110ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80110b0:	fb09 220b 	mla	r2, r9, fp, r2
 80110b4:	4452      	add	r2, sl
 80110b6:	b289      	uxth	r1, r1
 80110b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80110bc:	f84e 1b04 	str.w	r1, [lr], #4
 80110c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80110c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80110c8:	f8be 1000 	ldrh.w	r1, [lr]
 80110cc:	fb09 110a 	mla	r1, r9, sl, r1
 80110d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80110d4:	4567      	cmp	r7, ip
 80110d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80110da:	d8e5      	bhi.n	80110a8 <__multiply+0x10c>
 80110dc:	9a01      	ldr	r2, [sp, #4]
 80110de:	50a9      	str	r1, [r5, r2]
 80110e0:	3504      	adds	r5, #4
 80110e2:	e799      	b.n	8011018 <__multiply+0x7c>
 80110e4:	3e01      	subs	r6, #1
 80110e6:	e79b      	b.n	8011020 <__multiply+0x84>
 80110e8:	080126e9 	.word	0x080126e9
 80110ec:	080126fa 	.word	0x080126fa

080110f0 <__pow5mult>:
 80110f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110f4:	4615      	mov	r5, r2
 80110f6:	f012 0203 	ands.w	r2, r2, #3
 80110fa:	4606      	mov	r6, r0
 80110fc:	460f      	mov	r7, r1
 80110fe:	d007      	beq.n	8011110 <__pow5mult+0x20>
 8011100:	4c25      	ldr	r4, [pc, #148]	; (8011198 <__pow5mult+0xa8>)
 8011102:	3a01      	subs	r2, #1
 8011104:	2300      	movs	r3, #0
 8011106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801110a:	f7ff fe9d 	bl	8010e48 <__multadd>
 801110e:	4607      	mov	r7, r0
 8011110:	10ad      	asrs	r5, r5, #2
 8011112:	d03d      	beq.n	8011190 <__pow5mult+0xa0>
 8011114:	69f4      	ldr	r4, [r6, #28]
 8011116:	b97c      	cbnz	r4, 8011138 <__pow5mult+0x48>
 8011118:	2010      	movs	r0, #16
 801111a:	f7ff fd7f 	bl	8010c1c <malloc>
 801111e:	4602      	mov	r2, r0
 8011120:	61f0      	str	r0, [r6, #28]
 8011122:	b928      	cbnz	r0, 8011130 <__pow5mult+0x40>
 8011124:	4b1d      	ldr	r3, [pc, #116]	; (801119c <__pow5mult+0xac>)
 8011126:	481e      	ldr	r0, [pc, #120]	; (80111a0 <__pow5mult+0xb0>)
 8011128:	f240 11b3 	movw	r1, #435	; 0x1b3
 801112c:	f000 fbb2 	bl	8011894 <__assert_func>
 8011130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011134:	6004      	str	r4, [r0, #0]
 8011136:	60c4      	str	r4, [r0, #12]
 8011138:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801113c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011140:	b94c      	cbnz	r4, 8011156 <__pow5mult+0x66>
 8011142:	f240 2171 	movw	r1, #625	; 0x271
 8011146:	4630      	mov	r0, r6
 8011148:	f7ff ff12 	bl	8010f70 <__i2b>
 801114c:	2300      	movs	r3, #0
 801114e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011152:	4604      	mov	r4, r0
 8011154:	6003      	str	r3, [r0, #0]
 8011156:	f04f 0900 	mov.w	r9, #0
 801115a:	07eb      	lsls	r3, r5, #31
 801115c:	d50a      	bpl.n	8011174 <__pow5mult+0x84>
 801115e:	4639      	mov	r1, r7
 8011160:	4622      	mov	r2, r4
 8011162:	4630      	mov	r0, r6
 8011164:	f7ff ff1a 	bl	8010f9c <__multiply>
 8011168:	4639      	mov	r1, r7
 801116a:	4680      	mov	r8, r0
 801116c:	4630      	mov	r0, r6
 801116e:	f7ff fe49 	bl	8010e04 <_Bfree>
 8011172:	4647      	mov	r7, r8
 8011174:	106d      	asrs	r5, r5, #1
 8011176:	d00b      	beq.n	8011190 <__pow5mult+0xa0>
 8011178:	6820      	ldr	r0, [r4, #0]
 801117a:	b938      	cbnz	r0, 801118c <__pow5mult+0x9c>
 801117c:	4622      	mov	r2, r4
 801117e:	4621      	mov	r1, r4
 8011180:	4630      	mov	r0, r6
 8011182:	f7ff ff0b 	bl	8010f9c <__multiply>
 8011186:	6020      	str	r0, [r4, #0]
 8011188:	f8c0 9000 	str.w	r9, [r0]
 801118c:	4604      	mov	r4, r0
 801118e:	e7e4      	b.n	801115a <__pow5mult+0x6a>
 8011190:	4638      	mov	r0, r7
 8011192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011196:	bf00      	nop
 8011198:	08012848 	.word	0x08012848
 801119c:	0801267a 	.word	0x0801267a
 80111a0:	080126fa 	.word	0x080126fa

080111a4 <__lshift>:
 80111a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111a8:	460c      	mov	r4, r1
 80111aa:	6849      	ldr	r1, [r1, #4]
 80111ac:	6923      	ldr	r3, [r4, #16]
 80111ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80111b2:	68a3      	ldr	r3, [r4, #8]
 80111b4:	4607      	mov	r7, r0
 80111b6:	4691      	mov	r9, r2
 80111b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80111bc:	f108 0601 	add.w	r6, r8, #1
 80111c0:	42b3      	cmp	r3, r6
 80111c2:	db0b      	blt.n	80111dc <__lshift+0x38>
 80111c4:	4638      	mov	r0, r7
 80111c6:	f7ff fddd 	bl	8010d84 <_Balloc>
 80111ca:	4605      	mov	r5, r0
 80111cc:	b948      	cbnz	r0, 80111e2 <__lshift+0x3e>
 80111ce:	4602      	mov	r2, r0
 80111d0:	4b28      	ldr	r3, [pc, #160]	; (8011274 <__lshift+0xd0>)
 80111d2:	4829      	ldr	r0, [pc, #164]	; (8011278 <__lshift+0xd4>)
 80111d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80111d8:	f000 fb5c 	bl	8011894 <__assert_func>
 80111dc:	3101      	adds	r1, #1
 80111de:	005b      	lsls	r3, r3, #1
 80111e0:	e7ee      	b.n	80111c0 <__lshift+0x1c>
 80111e2:	2300      	movs	r3, #0
 80111e4:	f100 0114 	add.w	r1, r0, #20
 80111e8:	f100 0210 	add.w	r2, r0, #16
 80111ec:	4618      	mov	r0, r3
 80111ee:	4553      	cmp	r3, sl
 80111f0:	db33      	blt.n	801125a <__lshift+0xb6>
 80111f2:	6920      	ldr	r0, [r4, #16]
 80111f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111f8:	f104 0314 	add.w	r3, r4, #20
 80111fc:	f019 091f 	ands.w	r9, r9, #31
 8011200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011208:	d02b      	beq.n	8011262 <__lshift+0xbe>
 801120a:	f1c9 0e20 	rsb	lr, r9, #32
 801120e:	468a      	mov	sl, r1
 8011210:	2200      	movs	r2, #0
 8011212:	6818      	ldr	r0, [r3, #0]
 8011214:	fa00 f009 	lsl.w	r0, r0, r9
 8011218:	4310      	orrs	r0, r2
 801121a:	f84a 0b04 	str.w	r0, [sl], #4
 801121e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011222:	459c      	cmp	ip, r3
 8011224:	fa22 f20e 	lsr.w	r2, r2, lr
 8011228:	d8f3      	bhi.n	8011212 <__lshift+0x6e>
 801122a:	ebac 0304 	sub.w	r3, ip, r4
 801122e:	3b15      	subs	r3, #21
 8011230:	f023 0303 	bic.w	r3, r3, #3
 8011234:	3304      	adds	r3, #4
 8011236:	f104 0015 	add.w	r0, r4, #21
 801123a:	4584      	cmp	ip, r0
 801123c:	bf38      	it	cc
 801123e:	2304      	movcc	r3, #4
 8011240:	50ca      	str	r2, [r1, r3]
 8011242:	b10a      	cbz	r2, 8011248 <__lshift+0xa4>
 8011244:	f108 0602 	add.w	r6, r8, #2
 8011248:	3e01      	subs	r6, #1
 801124a:	4638      	mov	r0, r7
 801124c:	612e      	str	r6, [r5, #16]
 801124e:	4621      	mov	r1, r4
 8011250:	f7ff fdd8 	bl	8010e04 <_Bfree>
 8011254:	4628      	mov	r0, r5
 8011256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801125a:	f842 0f04 	str.w	r0, [r2, #4]!
 801125e:	3301      	adds	r3, #1
 8011260:	e7c5      	b.n	80111ee <__lshift+0x4a>
 8011262:	3904      	subs	r1, #4
 8011264:	f853 2b04 	ldr.w	r2, [r3], #4
 8011268:	f841 2f04 	str.w	r2, [r1, #4]!
 801126c:	459c      	cmp	ip, r3
 801126e:	d8f9      	bhi.n	8011264 <__lshift+0xc0>
 8011270:	e7ea      	b.n	8011248 <__lshift+0xa4>
 8011272:	bf00      	nop
 8011274:	080126e9 	.word	0x080126e9
 8011278:	080126fa 	.word	0x080126fa

0801127c <__mcmp>:
 801127c:	b530      	push	{r4, r5, lr}
 801127e:	6902      	ldr	r2, [r0, #16]
 8011280:	690c      	ldr	r4, [r1, #16]
 8011282:	1b12      	subs	r2, r2, r4
 8011284:	d10e      	bne.n	80112a4 <__mcmp+0x28>
 8011286:	f100 0314 	add.w	r3, r0, #20
 801128a:	3114      	adds	r1, #20
 801128c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011290:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011294:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011298:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801129c:	42a5      	cmp	r5, r4
 801129e:	d003      	beq.n	80112a8 <__mcmp+0x2c>
 80112a0:	d305      	bcc.n	80112ae <__mcmp+0x32>
 80112a2:	2201      	movs	r2, #1
 80112a4:	4610      	mov	r0, r2
 80112a6:	bd30      	pop	{r4, r5, pc}
 80112a8:	4283      	cmp	r3, r0
 80112aa:	d3f3      	bcc.n	8011294 <__mcmp+0x18>
 80112ac:	e7fa      	b.n	80112a4 <__mcmp+0x28>
 80112ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80112b2:	e7f7      	b.n	80112a4 <__mcmp+0x28>

080112b4 <__mdiff>:
 80112b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b8:	460c      	mov	r4, r1
 80112ba:	4606      	mov	r6, r0
 80112bc:	4611      	mov	r1, r2
 80112be:	4620      	mov	r0, r4
 80112c0:	4690      	mov	r8, r2
 80112c2:	f7ff ffdb 	bl	801127c <__mcmp>
 80112c6:	1e05      	subs	r5, r0, #0
 80112c8:	d110      	bne.n	80112ec <__mdiff+0x38>
 80112ca:	4629      	mov	r1, r5
 80112cc:	4630      	mov	r0, r6
 80112ce:	f7ff fd59 	bl	8010d84 <_Balloc>
 80112d2:	b930      	cbnz	r0, 80112e2 <__mdiff+0x2e>
 80112d4:	4b3a      	ldr	r3, [pc, #232]	; (80113c0 <__mdiff+0x10c>)
 80112d6:	4602      	mov	r2, r0
 80112d8:	f240 2137 	movw	r1, #567	; 0x237
 80112dc:	4839      	ldr	r0, [pc, #228]	; (80113c4 <__mdiff+0x110>)
 80112de:	f000 fad9 	bl	8011894 <__assert_func>
 80112e2:	2301      	movs	r3, #1
 80112e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80112e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ec:	bfa4      	itt	ge
 80112ee:	4643      	movge	r3, r8
 80112f0:	46a0      	movge	r8, r4
 80112f2:	4630      	mov	r0, r6
 80112f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80112f8:	bfa6      	itte	ge
 80112fa:	461c      	movge	r4, r3
 80112fc:	2500      	movge	r5, #0
 80112fe:	2501      	movlt	r5, #1
 8011300:	f7ff fd40 	bl	8010d84 <_Balloc>
 8011304:	b920      	cbnz	r0, 8011310 <__mdiff+0x5c>
 8011306:	4b2e      	ldr	r3, [pc, #184]	; (80113c0 <__mdiff+0x10c>)
 8011308:	4602      	mov	r2, r0
 801130a:	f240 2145 	movw	r1, #581	; 0x245
 801130e:	e7e5      	b.n	80112dc <__mdiff+0x28>
 8011310:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011314:	6926      	ldr	r6, [r4, #16]
 8011316:	60c5      	str	r5, [r0, #12]
 8011318:	f104 0914 	add.w	r9, r4, #20
 801131c:	f108 0514 	add.w	r5, r8, #20
 8011320:	f100 0e14 	add.w	lr, r0, #20
 8011324:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011328:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801132c:	f108 0210 	add.w	r2, r8, #16
 8011330:	46f2      	mov	sl, lr
 8011332:	2100      	movs	r1, #0
 8011334:	f859 3b04 	ldr.w	r3, [r9], #4
 8011338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801133c:	fa11 f88b 	uxtah	r8, r1, fp
 8011340:	b299      	uxth	r1, r3
 8011342:	0c1b      	lsrs	r3, r3, #16
 8011344:	eba8 0801 	sub.w	r8, r8, r1
 8011348:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801134c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011350:	fa1f f888 	uxth.w	r8, r8
 8011354:	1419      	asrs	r1, r3, #16
 8011356:	454e      	cmp	r6, r9
 8011358:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801135c:	f84a 3b04 	str.w	r3, [sl], #4
 8011360:	d8e8      	bhi.n	8011334 <__mdiff+0x80>
 8011362:	1b33      	subs	r3, r6, r4
 8011364:	3b15      	subs	r3, #21
 8011366:	f023 0303 	bic.w	r3, r3, #3
 801136a:	3304      	adds	r3, #4
 801136c:	3415      	adds	r4, #21
 801136e:	42a6      	cmp	r6, r4
 8011370:	bf38      	it	cc
 8011372:	2304      	movcc	r3, #4
 8011374:	441d      	add	r5, r3
 8011376:	4473      	add	r3, lr
 8011378:	469e      	mov	lr, r3
 801137a:	462e      	mov	r6, r5
 801137c:	4566      	cmp	r6, ip
 801137e:	d30e      	bcc.n	801139e <__mdiff+0xea>
 8011380:	f10c 0203 	add.w	r2, ip, #3
 8011384:	1b52      	subs	r2, r2, r5
 8011386:	f022 0203 	bic.w	r2, r2, #3
 801138a:	3d03      	subs	r5, #3
 801138c:	45ac      	cmp	ip, r5
 801138e:	bf38      	it	cc
 8011390:	2200      	movcc	r2, #0
 8011392:	4413      	add	r3, r2
 8011394:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011398:	b17a      	cbz	r2, 80113ba <__mdiff+0x106>
 801139a:	6107      	str	r7, [r0, #16]
 801139c:	e7a4      	b.n	80112e8 <__mdiff+0x34>
 801139e:	f856 8b04 	ldr.w	r8, [r6], #4
 80113a2:	fa11 f288 	uxtah	r2, r1, r8
 80113a6:	1414      	asrs	r4, r2, #16
 80113a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80113ac:	b292      	uxth	r2, r2
 80113ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80113b2:	f84e 2b04 	str.w	r2, [lr], #4
 80113b6:	1421      	asrs	r1, r4, #16
 80113b8:	e7e0      	b.n	801137c <__mdiff+0xc8>
 80113ba:	3f01      	subs	r7, #1
 80113bc:	e7ea      	b.n	8011394 <__mdiff+0xe0>
 80113be:	bf00      	nop
 80113c0:	080126e9 	.word	0x080126e9
 80113c4:	080126fa 	.word	0x080126fa

080113c8 <__d2b>:
 80113c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80113cc:	460f      	mov	r7, r1
 80113ce:	2101      	movs	r1, #1
 80113d0:	ec59 8b10 	vmov	r8, r9, d0
 80113d4:	4616      	mov	r6, r2
 80113d6:	f7ff fcd5 	bl	8010d84 <_Balloc>
 80113da:	4604      	mov	r4, r0
 80113dc:	b930      	cbnz	r0, 80113ec <__d2b+0x24>
 80113de:	4602      	mov	r2, r0
 80113e0:	4b24      	ldr	r3, [pc, #144]	; (8011474 <__d2b+0xac>)
 80113e2:	4825      	ldr	r0, [pc, #148]	; (8011478 <__d2b+0xb0>)
 80113e4:	f240 310f 	movw	r1, #783	; 0x30f
 80113e8:	f000 fa54 	bl	8011894 <__assert_func>
 80113ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80113f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80113f4:	bb2d      	cbnz	r5, 8011442 <__d2b+0x7a>
 80113f6:	9301      	str	r3, [sp, #4]
 80113f8:	f1b8 0300 	subs.w	r3, r8, #0
 80113fc:	d026      	beq.n	801144c <__d2b+0x84>
 80113fe:	4668      	mov	r0, sp
 8011400:	9300      	str	r3, [sp, #0]
 8011402:	f7ff fd87 	bl	8010f14 <__lo0bits>
 8011406:	e9dd 1200 	ldrd	r1, r2, [sp]
 801140a:	b1e8      	cbz	r0, 8011448 <__d2b+0x80>
 801140c:	f1c0 0320 	rsb	r3, r0, #32
 8011410:	fa02 f303 	lsl.w	r3, r2, r3
 8011414:	430b      	orrs	r3, r1
 8011416:	40c2      	lsrs	r2, r0
 8011418:	6163      	str	r3, [r4, #20]
 801141a:	9201      	str	r2, [sp, #4]
 801141c:	9b01      	ldr	r3, [sp, #4]
 801141e:	61a3      	str	r3, [r4, #24]
 8011420:	2b00      	cmp	r3, #0
 8011422:	bf14      	ite	ne
 8011424:	2202      	movne	r2, #2
 8011426:	2201      	moveq	r2, #1
 8011428:	6122      	str	r2, [r4, #16]
 801142a:	b1bd      	cbz	r5, 801145c <__d2b+0x94>
 801142c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011430:	4405      	add	r5, r0
 8011432:	603d      	str	r5, [r7, #0]
 8011434:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011438:	6030      	str	r0, [r6, #0]
 801143a:	4620      	mov	r0, r4
 801143c:	b003      	add	sp, #12
 801143e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011446:	e7d6      	b.n	80113f6 <__d2b+0x2e>
 8011448:	6161      	str	r1, [r4, #20]
 801144a:	e7e7      	b.n	801141c <__d2b+0x54>
 801144c:	a801      	add	r0, sp, #4
 801144e:	f7ff fd61 	bl	8010f14 <__lo0bits>
 8011452:	9b01      	ldr	r3, [sp, #4]
 8011454:	6163      	str	r3, [r4, #20]
 8011456:	3020      	adds	r0, #32
 8011458:	2201      	movs	r2, #1
 801145a:	e7e5      	b.n	8011428 <__d2b+0x60>
 801145c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011464:	6038      	str	r0, [r7, #0]
 8011466:	6918      	ldr	r0, [r3, #16]
 8011468:	f7ff fd34 	bl	8010ed4 <__hi0bits>
 801146c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011470:	e7e2      	b.n	8011438 <__d2b+0x70>
 8011472:	bf00      	nop
 8011474:	080126e9 	.word	0x080126e9
 8011478:	080126fa 	.word	0x080126fa

0801147c <__sfputc_r>:
 801147c:	6893      	ldr	r3, [r2, #8]
 801147e:	3b01      	subs	r3, #1
 8011480:	2b00      	cmp	r3, #0
 8011482:	b410      	push	{r4}
 8011484:	6093      	str	r3, [r2, #8]
 8011486:	da08      	bge.n	801149a <__sfputc_r+0x1e>
 8011488:	6994      	ldr	r4, [r2, #24]
 801148a:	42a3      	cmp	r3, r4
 801148c:	db01      	blt.n	8011492 <__sfputc_r+0x16>
 801148e:	290a      	cmp	r1, #10
 8011490:	d103      	bne.n	801149a <__sfputc_r+0x1e>
 8011492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011496:	f7fe bb6e 	b.w	800fb76 <__swbuf_r>
 801149a:	6813      	ldr	r3, [r2, #0]
 801149c:	1c58      	adds	r0, r3, #1
 801149e:	6010      	str	r0, [r2, #0]
 80114a0:	7019      	strb	r1, [r3, #0]
 80114a2:	4608      	mov	r0, r1
 80114a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114a8:	4770      	bx	lr

080114aa <__sfputs_r>:
 80114aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ac:	4606      	mov	r6, r0
 80114ae:	460f      	mov	r7, r1
 80114b0:	4614      	mov	r4, r2
 80114b2:	18d5      	adds	r5, r2, r3
 80114b4:	42ac      	cmp	r4, r5
 80114b6:	d101      	bne.n	80114bc <__sfputs_r+0x12>
 80114b8:	2000      	movs	r0, #0
 80114ba:	e007      	b.n	80114cc <__sfputs_r+0x22>
 80114bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114c0:	463a      	mov	r2, r7
 80114c2:	4630      	mov	r0, r6
 80114c4:	f7ff ffda 	bl	801147c <__sfputc_r>
 80114c8:	1c43      	adds	r3, r0, #1
 80114ca:	d1f3      	bne.n	80114b4 <__sfputs_r+0xa>
 80114cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080114d0 <_vfiprintf_r>:
 80114d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d4:	460d      	mov	r5, r1
 80114d6:	b09d      	sub	sp, #116	; 0x74
 80114d8:	4614      	mov	r4, r2
 80114da:	4698      	mov	r8, r3
 80114dc:	4606      	mov	r6, r0
 80114de:	b118      	cbz	r0, 80114e8 <_vfiprintf_r+0x18>
 80114e0:	6a03      	ldr	r3, [r0, #32]
 80114e2:	b90b      	cbnz	r3, 80114e8 <_vfiprintf_r+0x18>
 80114e4:	f7fe fab4 	bl	800fa50 <__sinit>
 80114e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114ea:	07d9      	lsls	r1, r3, #31
 80114ec:	d405      	bmi.n	80114fa <_vfiprintf_r+0x2a>
 80114ee:	89ab      	ldrh	r3, [r5, #12]
 80114f0:	059a      	lsls	r2, r3, #22
 80114f2:	d402      	bmi.n	80114fa <_vfiprintf_r+0x2a>
 80114f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114f6:	f7fe fcba 	bl	800fe6e <__retarget_lock_acquire_recursive>
 80114fa:	89ab      	ldrh	r3, [r5, #12]
 80114fc:	071b      	lsls	r3, r3, #28
 80114fe:	d501      	bpl.n	8011504 <_vfiprintf_r+0x34>
 8011500:	692b      	ldr	r3, [r5, #16]
 8011502:	b99b      	cbnz	r3, 801152c <_vfiprintf_r+0x5c>
 8011504:	4629      	mov	r1, r5
 8011506:	4630      	mov	r0, r6
 8011508:	f7fe fb72 	bl	800fbf0 <__swsetup_r>
 801150c:	b170      	cbz	r0, 801152c <_vfiprintf_r+0x5c>
 801150e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011510:	07dc      	lsls	r4, r3, #31
 8011512:	d504      	bpl.n	801151e <_vfiprintf_r+0x4e>
 8011514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011518:	b01d      	add	sp, #116	; 0x74
 801151a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801151e:	89ab      	ldrh	r3, [r5, #12]
 8011520:	0598      	lsls	r0, r3, #22
 8011522:	d4f7      	bmi.n	8011514 <_vfiprintf_r+0x44>
 8011524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011526:	f7fe fca3 	bl	800fe70 <__retarget_lock_release_recursive>
 801152a:	e7f3      	b.n	8011514 <_vfiprintf_r+0x44>
 801152c:	2300      	movs	r3, #0
 801152e:	9309      	str	r3, [sp, #36]	; 0x24
 8011530:	2320      	movs	r3, #32
 8011532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011536:	f8cd 800c 	str.w	r8, [sp, #12]
 801153a:	2330      	movs	r3, #48	; 0x30
 801153c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80116f0 <_vfiprintf_r+0x220>
 8011540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011544:	f04f 0901 	mov.w	r9, #1
 8011548:	4623      	mov	r3, r4
 801154a:	469a      	mov	sl, r3
 801154c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011550:	b10a      	cbz	r2, 8011556 <_vfiprintf_r+0x86>
 8011552:	2a25      	cmp	r2, #37	; 0x25
 8011554:	d1f9      	bne.n	801154a <_vfiprintf_r+0x7a>
 8011556:	ebba 0b04 	subs.w	fp, sl, r4
 801155a:	d00b      	beq.n	8011574 <_vfiprintf_r+0xa4>
 801155c:	465b      	mov	r3, fp
 801155e:	4622      	mov	r2, r4
 8011560:	4629      	mov	r1, r5
 8011562:	4630      	mov	r0, r6
 8011564:	f7ff ffa1 	bl	80114aa <__sfputs_r>
 8011568:	3001      	adds	r0, #1
 801156a:	f000 80a9 	beq.w	80116c0 <_vfiprintf_r+0x1f0>
 801156e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011570:	445a      	add	r2, fp
 8011572:	9209      	str	r2, [sp, #36]	; 0x24
 8011574:	f89a 3000 	ldrb.w	r3, [sl]
 8011578:	2b00      	cmp	r3, #0
 801157a:	f000 80a1 	beq.w	80116c0 <_vfiprintf_r+0x1f0>
 801157e:	2300      	movs	r3, #0
 8011580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011588:	f10a 0a01 	add.w	sl, sl, #1
 801158c:	9304      	str	r3, [sp, #16]
 801158e:	9307      	str	r3, [sp, #28]
 8011590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011594:	931a      	str	r3, [sp, #104]	; 0x68
 8011596:	4654      	mov	r4, sl
 8011598:	2205      	movs	r2, #5
 801159a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801159e:	4854      	ldr	r0, [pc, #336]	; (80116f0 <_vfiprintf_r+0x220>)
 80115a0:	f7ee fe26 	bl	80001f0 <memchr>
 80115a4:	9a04      	ldr	r2, [sp, #16]
 80115a6:	b9d8      	cbnz	r0, 80115e0 <_vfiprintf_r+0x110>
 80115a8:	06d1      	lsls	r1, r2, #27
 80115aa:	bf44      	itt	mi
 80115ac:	2320      	movmi	r3, #32
 80115ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115b2:	0713      	lsls	r3, r2, #28
 80115b4:	bf44      	itt	mi
 80115b6:	232b      	movmi	r3, #43	; 0x2b
 80115b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115bc:	f89a 3000 	ldrb.w	r3, [sl]
 80115c0:	2b2a      	cmp	r3, #42	; 0x2a
 80115c2:	d015      	beq.n	80115f0 <_vfiprintf_r+0x120>
 80115c4:	9a07      	ldr	r2, [sp, #28]
 80115c6:	4654      	mov	r4, sl
 80115c8:	2000      	movs	r0, #0
 80115ca:	f04f 0c0a 	mov.w	ip, #10
 80115ce:	4621      	mov	r1, r4
 80115d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115d4:	3b30      	subs	r3, #48	; 0x30
 80115d6:	2b09      	cmp	r3, #9
 80115d8:	d94d      	bls.n	8011676 <_vfiprintf_r+0x1a6>
 80115da:	b1b0      	cbz	r0, 801160a <_vfiprintf_r+0x13a>
 80115dc:	9207      	str	r2, [sp, #28]
 80115de:	e014      	b.n	801160a <_vfiprintf_r+0x13a>
 80115e0:	eba0 0308 	sub.w	r3, r0, r8
 80115e4:	fa09 f303 	lsl.w	r3, r9, r3
 80115e8:	4313      	orrs	r3, r2
 80115ea:	9304      	str	r3, [sp, #16]
 80115ec:	46a2      	mov	sl, r4
 80115ee:	e7d2      	b.n	8011596 <_vfiprintf_r+0xc6>
 80115f0:	9b03      	ldr	r3, [sp, #12]
 80115f2:	1d19      	adds	r1, r3, #4
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	9103      	str	r1, [sp, #12]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	bfbb      	ittet	lt
 80115fc:	425b      	neglt	r3, r3
 80115fe:	f042 0202 	orrlt.w	r2, r2, #2
 8011602:	9307      	strge	r3, [sp, #28]
 8011604:	9307      	strlt	r3, [sp, #28]
 8011606:	bfb8      	it	lt
 8011608:	9204      	strlt	r2, [sp, #16]
 801160a:	7823      	ldrb	r3, [r4, #0]
 801160c:	2b2e      	cmp	r3, #46	; 0x2e
 801160e:	d10c      	bne.n	801162a <_vfiprintf_r+0x15a>
 8011610:	7863      	ldrb	r3, [r4, #1]
 8011612:	2b2a      	cmp	r3, #42	; 0x2a
 8011614:	d134      	bne.n	8011680 <_vfiprintf_r+0x1b0>
 8011616:	9b03      	ldr	r3, [sp, #12]
 8011618:	1d1a      	adds	r2, r3, #4
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	9203      	str	r2, [sp, #12]
 801161e:	2b00      	cmp	r3, #0
 8011620:	bfb8      	it	lt
 8011622:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011626:	3402      	adds	r4, #2
 8011628:	9305      	str	r3, [sp, #20]
 801162a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011700 <_vfiprintf_r+0x230>
 801162e:	7821      	ldrb	r1, [r4, #0]
 8011630:	2203      	movs	r2, #3
 8011632:	4650      	mov	r0, sl
 8011634:	f7ee fddc 	bl	80001f0 <memchr>
 8011638:	b138      	cbz	r0, 801164a <_vfiprintf_r+0x17a>
 801163a:	9b04      	ldr	r3, [sp, #16]
 801163c:	eba0 000a 	sub.w	r0, r0, sl
 8011640:	2240      	movs	r2, #64	; 0x40
 8011642:	4082      	lsls	r2, r0
 8011644:	4313      	orrs	r3, r2
 8011646:	3401      	adds	r4, #1
 8011648:	9304      	str	r3, [sp, #16]
 801164a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801164e:	4829      	ldr	r0, [pc, #164]	; (80116f4 <_vfiprintf_r+0x224>)
 8011650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011654:	2206      	movs	r2, #6
 8011656:	f7ee fdcb 	bl	80001f0 <memchr>
 801165a:	2800      	cmp	r0, #0
 801165c:	d03f      	beq.n	80116de <_vfiprintf_r+0x20e>
 801165e:	4b26      	ldr	r3, [pc, #152]	; (80116f8 <_vfiprintf_r+0x228>)
 8011660:	bb1b      	cbnz	r3, 80116aa <_vfiprintf_r+0x1da>
 8011662:	9b03      	ldr	r3, [sp, #12]
 8011664:	3307      	adds	r3, #7
 8011666:	f023 0307 	bic.w	r3, r3, #7
 801166a:	3308      	adds	r3, #8
 801166c:	9303      	str	r3, [sp, #12]
 801166e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011670:	443b      	add	r3, r7
 8011672:	9309      	str	r3, [sp, #36]	; 0x24
 8011674:	e768      	b.n	8011548 <_vfiprintf_r+0x78>
 8011676:	fb0c 3202 	mla	r2, ip, r2, r3
 801167a:	460c      	mov	r4, r1
 801167c:	2001      	movs	r0, #1
 801167e:	e7a6      	b.n	80115ce <_vfiprintf_r+0xfe>
 8011680:	2300      	movs	r3, #0
 8011682:	3401      	adds	r4, #1
 8011684:	9305      	str	r3, [sp, #20]
 8011686:	4619      	mov	r1, r3
 8011688:	f04f 0c0a 	mov.w	ip, #10
 801168c:	4620      	mov	r0, r4
 801168e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011692:	3a30      	subs	r2, #48	; 0x30
 8011694:	2a09      	cmp	r2, #9
 8011696:	d903      	bls.n	80116a0 <_vfiprintf_r+0x1d0>
 8011698:	2b00      	cmp	r3, #0
 801169a:	d0c6      	beq.n	801162a <_vfiprintf_r+0x15a>
 801169c:	9105      	str	r1, [sp, #20]
 801169e:	e7c4      	b.n	801162a <_vfiprintf_r+0x15a>
 80116a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80116a4:	4604      	mov	r4, r0
 80116a6:	2301      	movs	r3, #1
 80116a8:	e7f0      	b.n	801168c <_vfiprintf_r+0x1bc>
 80116aa:	ab03      	add	r3, sp, #12
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	462a      	mov	r2, r5
 80116b0:	4b12      	ldr	r3, [pc, #72]	; (80116fc <_vfiprintf_r+0x22c>)
 80116b2:	a904      	add	r1, sp, #16
 80116b4:	4630      	mov	r0, r6
 80116b6:	f7fd fcb7 	bl	800f028 <_printf_float>
 80116ba:	4607      	mov	r7, r0
 80116bc:	1c78      	adds	r0, r7, #1
 80116be:	d1d6      	bne.n	801166e <_vfiprintf_r+0x19e>
 80116c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116c2:	07d9      	lsls	r1, r3, #31
 80116c4:	d405      	bmi.n	80116d2 <_vfiprintf_r+0x202>
 80116c6:	89ab      	ldrh	r3, [r5, #12]
 80116c8:	059a      	lsls	r2, r3, #22
 80116ca:	d402      	bmi.n	80116d2 <_vfiprintf_r+0x202>
 80116cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116ce:	f7fe fbcf 	bl	800fe70 <__retarget_lock_release_recursive>
 80116d2:	89ab      	ldrh	r3, [r5, #12]
 80116d4:	065b      	lsls	r3, r3, #25
 80116d6:	f53f af1d 	bmi.w	8011514 <_vfiprintf_r+0x44>
 80116da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116dc:	e71c      	b.n	8011518 <_vfiprintf_r+0x48>
 80116de:	ab03      	add	r3, sp, #12
 80116e0:	9300      	str	r3, [sp, #0]
 80116e2:	462a      	mov	r2, r5
 80116e4:	4b05      	ldr	r3, [pc, #20]	; (80116fc <_vfiprintf_r+0x22c>)
 80116e6:	a904      	add	r1, sp, #16
 80116e8:	4630      	mov	r0, r6
 80116ea:	f7fd ff41 	bl	800f570 <_printf_i>
 80116ee:	e7e4      	b.n	80116ba <_vfiprintf_r+0x1ea>
 80116f0:	08012854 	.word	0x08012854
 80116f4:	0801285e 	.word	0x0801285e
 80116f8:	0800f029 	.word	0x0800f029
 80116fc:	080114ab 	.word	0x080114ab
 8011700:	0801285a 	.word	0x0801285a

08011704 <__swhatbuf_r>:
 8011704:	b570      	push	{r4, r5, r6, lr}
 8011706:	460c      	mov	r4, r1
 8011708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801170c:	2900      	cmp	r1, #0
 801170e:	b096      	sub	sp, #88	; 0x58
 8011710:	4615      	mov	r5, r2
 8011712:	461e      	mov	r6, r3
 8011714:	da0d      	bge.n	8011732 <__swhatbuf_r+0x2e>
 8011716:	89a3      	ldrh	r3, [r4, #12]
 8011718:	f013 0f80 	tst.w	r3, #128	; 0x80
 801171c:	f04f 0100 	mov.w	r1, #0
 8011720:	bf0c      	ite	eq
 8011722:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011726:	2340      	movne	r3, #64	; 0x40
 8011728:	2000      	movs	r0, #0
 801172a:	6031      	str	r1, [r6, #0]
 801172c:	602b      	str	r3, [r5, #0]
 801172e:	b016      	add	sp, #88	; 0x58
 8011730:	bd70      	pop	{r4, r5, r6, pc}
 8011732:	466a      	mov	r2, sp
 8011734:	f000 f87c 	bl	8011830 <_fstat_r>
 8011738:	2800      	cmp	r0, #0
 801173a:	dbec      	blt.n	8011716 <__swhatbuf_r+0x12>
 801173c:	9901      	ldr	r1, [sp, #4]
 801173e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011742:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011746:	4259      	negs	r1, r3
 8011748:	4159      	adcs	r1, r3
 801174a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801174e:	e7eb      	b.n	8011728 <__swhatbuf_r+0x24>

08011750 <__smakebuf_r>:
 8011750:	898b      	ldrh	r3, [r1, #12]
 8011752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011754:	079d      	lsls	r5, r3, #30
 8011756:	4606      	mov	r6, r0
 8011758:	460c      	mov	r4, r1
 801175a:	d507      	bpl.n	801176c <__smakebuf_r+0x1c>
 801175c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011760:	6023      	str	r3, [r4, #0]
 8011762:	6123      	str	r3, [r4, #16]
 8011764:	2301      	movs	r3, #1
 8011766:	6163      	str	r3, [r4, #20]
 8011768:	b002      	add	sp, #8
 801176a:	bd70      	pop	{r4, r5, r6, pc}
 801176c:	ab01      	add	r3, sp, #4
 801176e:	466a      	mov	r2, sp
 8011770:	f7ff ffc8 	bl	8011704 <__swhatbuf_r>
 8011774:	9900      	ldr	r1, [sp, #0]
 8011776:	4605      	mov	r5, r0
 8011778:	4630      	mov	r0, r6
 801177a:	f7ff fa77 	bl	8010c6c <_malloc_r>
 801177e:	b948      	cbnz	r0, 8011794 <__smakebuf_r+0x44>
 8011780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011784:	059a      	lsls	r2, r3, #22
 8011786:	d4ef      	bmi.n	8011768 <__smakebuf_r+0x18>
 8011788:	f023 0303 	bic.w	r3, r3, #3
 801178c:	f043 0302 	orr.w	r3, r3, #2
 8011790:	81a3      	strh	r3, [r4, #12]
 8011792:	e7e3      	b.n	801175c <__smakebuf_r+0xc>
 8011794:	89a3      	ldrh	r3, [r4, #12]
 8011796:	6020      	str	r0, [r4, #0]
 8011798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801179c:	81a3      	strh	r3, [r4, #12]
 801179e:	9b00      	ldr	r3, [sp, #0]
 80117a0:	6163      	str	r3, [r4, #20]
 80117a2:	9b01      	ldr	r3, [sp, #4]
 80117a4:	6120      	str	r0, [r4, #16]
 80117a6:	b15b      	cbz	r3, 80117c0 <__smakebuf_r+0x70>
 80117a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117ac:	4630      	mov	r0, r6
 80117ae:	f000 f851 	bl	8011854 <_isatty_r>
 80117b2:	b128      	cbz	r0, 80117c0 <__smakebuf_r+0x70>
 80117b4:	89a3      	ldrh	r3, [r4, #12]
 80117b6:	f023 0303 	bic.w	r3, r3, #3
 80117ba:	f043 0301 	orr.w	r3, r3, #1
 80117be:	81a3      	strh	r3, [r4, #12]
 80117c0:	89a3      	ldrh	r3, [r4, #12]
 80117c2:	431d      	orrs	r5, r3
 80117c4:	81a5      	strh	r5, [r4, #12]
 80117c6:	e7cf      	b.n	8011768 <__smakebuf_r+0x18>

080117c8 <_putc_r>:
 80117c8:	b570      	push	{r4, r5, r6, lr}
 80117ca:	460d      	mov	r5, r1
 80117cc:	4614      	mov	r4, r2
 80117ce:	4606      	mov	r6, r0
 80117d0:	b118      	cbz	r0, 80117da <_putc_r+0x12>
 80117d2:	6a03      	ldr	r3, [r0, #32]
 80117d4:	b90b      	cbnz	r3, 80117da <_putc_r+0x12>
 80117d6:	f7fe f93b 	bl	800fa50 <__sinit>
 80117da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117dc:	07d8      	lsls	r0, r3, #31
 80117de:	d405      	bmi.n	80117ec <_putc_r+0x24>
 80117e0:	89a3      	ldrh	r3, [r4, #12]
 80117e2:	0599      	lsls	r1, r3, #22
 80117e4:	d402      	bmi.n	80117ec <_putc_r+0x24>
 80117e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117e8:	f7fe fb41 	bl	800fe6e <__retarget_lock_acquire_recursive>
 80117ec:	68a3      	ldr	r3, [r4, #8]
 80117ee:	3b01      	subs	r3, #1
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	60a3      	str	r3, [r4, #8]
 80117f4:	da05      	bge.n	8011802 <_putc_r+0x3a>
 80117f6:	69a2      	ldr	r2, [r4, #24]
 80117f8:	4293      	cmp	r3, r2
 80117fa:	db12      	blt.n	8011822 <_putc_r+0x5a>
 80117fc:	b2eb      	uxtb	r3, r5
 80117fe:	2b0a      	cmp	r3, #10
 8011800:	d00f      	beq.n	8011822 <_putc_r+0x5a>
 8011802:	6823      	ldr	r3, [r4, #0]
 8011804:	1c5a      	adds	r2, r3, #1
 8011806:	6022      	str	r2, [r4, #0]
 8011808:	701d      	strb	r5, [r3, #0]
 801180a:	b2ed      	uxtb	r5, r5
 801180c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801180e:	07da      	lsls	r2, r3, #31
 8011810:	d405      	bmi.n	801181e <_putc_r+0x56>
 8011812:	89a3      	ldrh	r3, [r4, #12]
 8011814:	059b      	lsls	r3, r3, #22
 8011816:	d402      	bmi.n	801181e <_putc_r+0x56>
 8011818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801181a:	f7fe fb29 	bl	800fe70 <__retarget_lock_release_recursive>
 801181e:	4628      	mov	r0, r5
 8011820:	bd70      	pop	{r4, r5, r6, pc}
 8011822:	4629      	mov	r1, r5
 8011824:	4622      	mov	r2, r4
 8011826:	4630      	mov	r0, r6
 8011828:	f7fe f9a5 	bl	800fb76 <__swbuf_r>
 801182c:	4605      	mov	r5, r0
 801182e:	e7ed      	b.n	801180c <_putc_r+0x44>

08011830 <_fstat_r>:
 8011830:	b538      	push	{r3, r4, r5, lr}
 8011832:	4d07      	ldr	r5, [pc, #28]	; (8011850 <_fstat_r+0x20>)
 8011834:	2300      	movs	r3, #0
 8011836:	4604      	mov	r4, r0
 8011838:	4608      	mov	r0, r1
 801183a:	4611      	mov	r1, r2
 801183c:	602b      	str	r3, [r5, #0]
 801183e:	f7f1 fed2 	bl	80035e6 <_fstat>
 8011842:	1c43      	adds	r3, r0, #1
 8011844:	d102      	bne.n	801184c <_fstat_r+0x1c>
 8011846:	682b      	ldr	r3, [r5, #0]
 8011848:	b103      	cbz	r3, 801184c <_fstat_r+0x1c>
 801184a:	6023      	str	r3, [r4, #0]
 801184c:	bd38      	pop	{r3, r4, r5, pc}
 801184e:	bf00      	nop
 8011850:	20008740 	.word	0x20008740

08011854 <_isatty_r>:
 8011854:	b538      	push	{r3, r4, r5, lr}
 8011856:	4d06      	ldr	r5, [pc, #24]	; (8011870 <_isatty_r+0x1c>)
 8011858:	2300      	movs	r3, #0
 801185a:	4604      	mov	r4, r0
 801185c:	4608      	mov	r0, r1
 801185e:	602b      	str	r3, [r5, #0]
 8011860:	f7f1 fed1 	bl	8003606 <_isatty>
 8011864:	1c43      	adds	r3, r0, #1
 8011866:	d102      	bne.n	801186e <_isatty_r+0x1a>
 8011868:	682b      	ldr	r3, [r5, #0]
 801186a:	b103      	cbz	r3, 801186e <_isatty_r+0x1a>
 801186c:	6023      	str	r3, [r4, #0]
 801186e:	bd38      	pop	{r3, r4, r5, pc}
 8011870:	20008740 	.word	0x20008740

08011874 <_sbrk_r>:
 8011874:	b538      	push	{r3, r4, r5, lr}
 8011876:	4d06      	ldr	r5, [pc, #24]	; (8011890 <_sbrk_r+0x1c>)
 8011878:	2300      	movs	r3, #0
 801187a:	4604      	mov	r4, r0
 801187c:	4608      	mov	r0, r1
 801187e:	602b      	str	r3, [r5, #0]
 8011880:	f7f1 feda 	bl	8003638 <_sbrk>
 8011884:	1c43      	adds	r3, r0, #1
 8011886:	d102      	bne.n	801188e <_sbrk_r+0x1a>
 8011888:	682b      	ldr	r3, [r5, #0]
 801188a:	b103      	cbz	r3, 801188e <_sbrk_r+0x1a>
 801188c:	6023      	str	r3, [r4, #0]
 801188e:	bd38      	pop	{r3, r4, r5, pc}
 8011890:	20008740 	.word	0x20008740

08011894 <__assert_func>:
 8011894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011896:	4614      	mov	r4, r2
 8011898:	461a      	mov	r2, r3
 801189a:	4b09      	ldr	r3, [pc, #36]	; (80118c0 <__assert_func+0x2c>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	4605      	mov	r5, r0
 80118a0:	68d8      	ldr	r0, [r3, #12]
 80118a2:	b14c      	cbz	r4, 80118b8 <__assert_func+0x24>
 80118a4:	4b07      	ldr	r3, [pc, #28]	; (80118c4 <__assert_func+0x30>)
 80118a6:	9100      	str	r1, [sp, #0]
 80118a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80118ac:	4906      	ldr	r1, [pc, #24]	; (80118c8 <__assert_func+0x34>)
 80118ae:	462b      	mov	r3, r5
 80118b0:	f000 f844 	bl	801193c <fiprintf>
 80118b4:	f000 f854 	bl	8011960 <abort>
 80118b8:	4b04      	ldr	r3, [pc, #16]	; (80118cc <__assert_func+0x38>)
 80118ba:	461c      	mov	r4, r3
 80118bc:	e7f3      	b.n	80118a6 <__assert_func+0x12>
 80118be:	bf00      	nop
 80118c0:	20000214 	.word	0x20000214
 80118c4:	0801286f 	.word	0x0801286f
 80118c8:	0801287c 	.word	0x0801287c
 80118cc:	080128aa 	.word	0x080128aa

080118d0 <_calloc_r>:
 80118d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118d2:	fba1 2402 	umull	r2, r4, r1, r2
 80118d6:	b94c      	cbnz	r4, 80118ec <_calloc_r+0x1c>
 80118d8:	4611      	mov	r1, r2
 80118da:	9201      	str	r2, [sp, #4]
 80118dc:	f7ff f9c6 	bl	8010c6c <_malloc_r>
 80118e0:	9a01      	ldr	r2, [sp, #4]
 80118e2:	4605      	mov	r5, r0
 80118e4:	b930      	cbnz	r0, 80118f4 <_calloc_r+0x24>
 80118e6:	4628      	mov	r0, r5
 80118e8:	b003      	add	sp, #12
 80118ea:	bd30      	pop	{r4, r5, pc}
 80118ec:	220c      	movs	r2, #12
 80118ee:	6002      	str	r2, [r0, #0]
 80118f0:	2500      	movs	r5, #0
 80118f2:	e7f8      	b.n	80118e6 <_calloc_r+0x16>
 80118f4:	4621      	mov	r1, r4
 80118f6:	f7fe f9d3 	bl	800fca0 <memset>
 80118fa:	e7f4      	b.n	80118e6 <_calloc_r+0x16>

080118fc <__ascii_mbtowc>:
 80118fc:	b082      	sub	sp, #8
 80118fe:	b901      	cbnz	r1, 8011902 <__ascii_mbtowc+0x6>
 8011900:	a901      	add	r1, sp, #4
 8011902:	b142      	cbz	r2, 8011916 <__ascii_mbtowc+0x1a>
 8011904:	b14b      	cbz	r3, 801191a <__ascii_mbtowc+0x1e>
 8011906:	7813      	ldrb	r3, [r2, #0]
 8011908:	600b      	str	r3, [r1, #0]
 801190a:	7812      	ldrb	r2, [r2, #0]
 801190c:	1e10      	subs	r0, r2, #0
 801190e:	bf18      	it	ne
 8011910:	2001      	movne	r0, #1
 8011912:	b002      	add	sp, #8
 8011914:	4770      	bx	lr
 8011916:	4610      	mov	r0, r2
 8011918:	e7fb      	b.n	8011912 <__ascii_mbtowc+0x16>
 801191a:	f06f 0001 	mvn.w	r0, #1
 801191e:	e7f8      	b.n	8011912 <__ascii_mbtowc+0x16>

08011920 <__ascii_wctomb>:
 8011920:	b149      	cbz	r1, 8011936 <__ascii_wctomb+0x16>
 8011922:	2aff      	cmp	r2, #255	; 0xff
 8011924:	bf85      	ittet	hi
 8011926:	238a      	movhi	r3, #138	; 0x8a
 8011928:	6003      	strhi	r3, [r0, #0]
 801192a:	700a      	strbls	r2, [r1, #0]
 801192c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011930:	bf98      	it	ls
 8011932:	2001      	movls	r0, #1
 8011934:	4770      	bx	lr
 8011936:	4608      	mov	r0, r1
 8011938:	4770      	bx	lr
	...

0801193c <fiprintf>:
 801193c:	b40e      	push	{r1, r2, r3}
 801193e:	b503      	push	{r0, r1, lr}
 8011940:	4601      	mov	r1, r0
 8011942:	ab03      	add	r3, sp, #12
 8011944:	4805      	ldr	r0, [pc, #20]	; (801195c <fiprintf+0x20>)
 8011946:	f853 2b04 	ldr.w	r2, [r3], #4
 801194a:	6800      	ldr	r0, [r0, #0]
 801194c:	9301      	str	r3, [sp, #4]
 801194e:	f7ff fdbf 	bl	80114d0 <_vfiprintf_r>
 8011952:	b002      	add	sp, #8
 8011954:	f85d eb04 	ldr.w	lr, [sp], #4
 8011958:	b003      	add	sp, #12
 801195a:	4770      	bx	lr
 801195c:	20000214 	.word	0x20000214

08011960 <abort>:
 8011960:	b508      	push	{r3, lr}
 8011962:	2006      	movs	r0, #6
 8011964:	f000 f82c 	bl	80119c0 <raise>
 8011968:	2001      	movs	r0, #1
 801196a:	f7f1 fded 	bl	8003548 <_exit>

0801196e <_raise_r>:
 801196e:	291f      	cmp	r1, #31
 8011970:	b538      	push	{r3, r4, r5, lr}
 8011972:	4604      	mov	r4, r0
 8011974:	460d      	mov	r5, r1
 8011976:	d904      	bls.n	8011982 <_raise_r+0x14>
 8011978:	2316      	movs	r3, #22
 801197a:	6003      	str	r3, [r0, #0]
 801197c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011980:	bd38      	pop	{r3, r4, r5, pc}
 8011982:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011984:	b112      	cbz	r2, 801198c <_raise_r+0x1e>
 8011986:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801198a:	b94b      	cbnz	r3, 80119a0 <_raise_r+0x32>
 801198c:	4620      	mov	r0, r4
 801198e:	f000 f831 	bl	80119f4 <_getpid_r>
 8011992:	462a      	mov	r2, r5
 8011994:	4601      	mov	r1, r0
 8011996:	4620      	mov	r0, r4
 8011998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801199c:	f000 b818 	b.w	80119d0 <_kill_r>
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d00a      	beq.n	80119ba <_raise_r+0x4c>
 80119a4:	1c59      	adds	r1, r3, #1
 80119a6:	d103      	bne.n	80119b0 <_raise_r+0x42>
 80119a8:	2316      	movs	r3, #22
 80119aa:	6003      	str	r3, [r0, #0]
 80119ac:	2001      	movs	r0, #1
 80119ae:	e7e7      	b.n	8011980 <_raise_r+0x12>
 80119b0:	2400      	movs	r4, #0
 80119b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80119b6:	4628      	mov	r0, r5
 80119b8:	4798      	blx	r3
 80119ba:	2000      	movs	r0, #0
 80119bc:	e7e0      	b.n	8011980 <_raise_r+0x12>
	...

080119c0 <raise>:
 80119c0:	4b02      	ldr	r3, [pc, #8]	; (80119cc <raise+0xc>)
 80119c2:	4601      	mov	r1, r0
 80119c4:	6818      	ldr	r0, [r3, #0]
 80119c6:	f7ff bfd2 	b.w	801196e <_raise_r>
 80119ca:	bf00      	nop
 80119cc:	20000214 	.word	0x20000214

080119d0 <_kill_r>:
 80119d0:	b538      	push	{r3, r4, r5, lr}
 80119d2:	4d07      	ldr	r5, [pc, #28]	; (80119f0 <_kill_r+0x20>)
 80119d4:	2300      	movs	r3, #0
 80119d6:	4604      	mov	r4, r0
 80119d8:	4608      	mov	r0, r1
 80119da:	4611      	mov	r1, r2
 80119dc:	602b      	str	r3, [r5, #0]
 80119de:	f7f1 fda3 	bl	8003528 <_kill>
 80119e2:	1c43      	adds	r3, r0, #1
 80119e4:	d102      	bne.n	80119ec <_kill_r+0x1c>
 80119e6:	682b      	ldr	r3, [r5, #0]
 80119e8:	b103      	cbz	r3, 80119ec <_kill_r+0x1c>
 80119ea:	6023      	str	r3, [r4, #0]
 80119ec:	bd38      	pop	{r3, r4, r5, pc}
 80119ee:	bf00      	nop
 80119f0:	20008740 	.word	0x20008740

080119f4 <_getpid_r>:
 80119f4:	f7f1 bd90 	b.w	8003518 <_getpid>

080119f8 <_init>:
 80119f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119fa:	bf00      	nop
 80119fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119fe:	bc08      	pop	{r3}
 8011a00:	469e      	mov	lr, r3
 8011a02:	4770      	bx	lr

08011a04 <_fini>:
 8011a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a06:	bf00      	nop
 8011a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a0a:	bc08      	pop	{r3}
 8011a0c:	469e      	mov	lr, r3
 8011a0e:	4770      	bx	lr
