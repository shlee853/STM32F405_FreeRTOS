
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019ae4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a6c  08019c78  08019c78  00029c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c6e4  0801c6e4  000340d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c6e4  0801c6e4  0002c6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c6ec  0801c6ec  000340d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c6ec  0801c6ec  0002c6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c6f0  0801c6f0  0002c6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000608  20000000  0801c6f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       00003aa0  20000608  0801ccfc  00030608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  200040a8  0802079c  000340a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  000340d0  2**0
                  CONTENTS
 12 .bss          00009bdc  200040d0  200040d0  000340d0  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000dcac  2000dcac  000340d0  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000340d0  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00034100  2**0
                  CONTENTS, READONLY
 16 .debug_info   00041555  00000000  00000000  00034143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000c51b  00000000  00000000  00075698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003000  00000000  00000000  00081bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002421  00000000  00000000  00084bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001a25f  00000000  00000000  00086fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004c8de  00000000  00000000  000a1238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000fa92d  00000000  00000000  000edb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000cee8  00000000  00000000  001e8444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  001f532c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200040d0 	.word	0x200040d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080196bc 	.word	0x080196bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200040d4 	.word	0x200040d4
 80001cc:	080196bc 	.word	0x080196bc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <estimatorEnqueue>:
const char* stateEstimatorGetName() {
  return estimatorFunctions[currentEstimator].name;
}


void estimatorEnqueue(const measurement_t *measurement) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if (!measurementsQueue) {
 8000f6c:	4b64      	ldr	r3, [pc, #400]	; (8001100 <estimatorEnqueue+0x19c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80bf 	beq.w	80010f4 <estimatorEnqueue+0x190>
    return;
  }

  portBASE_TYPE result;
  bool isInInterrupt = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8000f76:	4b63      	ldr	r3, [pc, #396]	; (8001104 <estimatorEnqueue+0x1a0>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf14      	ite	ne
 8000f82:	2301      	movne	r3, #1
 8000f84:	2300      	moveq	r3, #0
 8000f86:	74fb      	strb	r3, [r7, #19]
  if (isInInterrupt) {
 8000f88:	7cfb      	ldrb	r3, [r7, #19]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d016      	beq.n	8000fbc <estimatorEnqueue+0x58>
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
    result = xQueueSendFromISR(measurementsQueue, measurement, &xHigherPriorityTaskWoken);
 8000f92:	4b5b      	ldr	r3, [pc, #364]	; (8001100 <estimatorEnqueue+0x19c>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	f107 020c 	add.w	r2, r7, #12
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	f012 f9a9 	bl	80132f4 <xQueueGenericSendFromISR>
 8000fa2:	6178      	str	r0, [r7, #20]
    if (xHigherPriorityTaskWoken == pdTRUE) {
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d110      	bne.n	8000fcc <estimatorEnqueue+0x68>
      portYIELD();
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <estimatorEnqueue+0x1a4>)
 8000fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	f3bf 8f4f 	dsb	sy
 8000fb6:	f3bf 8f6f 	isb	sy
 8000fba:	e007      	b.n	8000fcc <estimatorEnqueue+0x68>
    }
  } else {
    result = xQueueSend(measurementsQueue, measurement, 0);
 8000fbc:	4b50      	ldr	r3, [pc, #320]	; (8001100 <estimatorEnqueue+0x19c>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	f012 f887 	bl	80130d8 <xQueueGenericSend>
 8000fca:	6178      	str	r0, [r7, #20]
  }

  if (result == pdTRUE) {
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d105      	bne.n	8000fde <estimatorEnqueue+0x7a>
    STATS_CNT_RATE_EVENT(&measurementAppendedCounter);
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <estimatorEnqueue+0x1a8>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	; (800110c <estimatorEnqueue+0x1a8>)
 8000fda:	6093      	str	r3, [r2, #8]
 8000fdc:	e004      	b.n	8000fe8 <estimatorEnqueue+0x84>
  } else {
    STATS_CNT_RATE_EVENT(&measurementNotAppendedCounter);
 8000fde:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <estimatorEnqueue+0x1ac>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a4a      	ldr	r2, [pc, #296]	; (8001110 <estimatorEnqueue+0x1ac>)
 8000fe6:	6093      	str	r3, [r2, #8]
  }

  // events
  switch (measurement->type) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b0b      	cmp	r3, #11
 8000fee:	f200 8083 	bhi.w	80010f8 <estimatorEnqueue+0x194>
 8000ff2:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <estimatorEnqueue+0x94>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	08001029 	.word	0x08001029
 8000ffc:	0800104f 	.word	0x0800104f
 8001000:	0800105f 	.word	0x0800105f
 8001004:	08001067 	.word	0x08001067
 8001008:	08001081 	.word	0x08001081
 800100c:	08001089 	.word	0x08001089
 8001010:	08001091 	.word	0x08001091
 8001014:	08001099 	.word	0x08001099
 8001018:	080010a9 	.word	0x080010a9
 800101c:	080010dd 	.word	0x080010dd
 8001020:	080010e5 	.word	0x080010e5
 8001024:	080010ed 	.word	0x080010ed
    case MeasurementTypeTDOA:
      eventTrigger_estTDOA_payload.idA = measurement->data.tdoa.anchorIds[0];
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800102e:	4b39      	ldr	r3, [pc, #228]	; (8001114 <estimatorEnqueue+0x1b0>)
 8001030:	701a      	strb	r2, [r3, #0]
      eventTrigger_estTDOA_payload.idB = measurement->data.tdoa.anchorIds[1];
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001038:	4b36      	ldr	r3, [pc, #216]	; (8001114 <estimatorEnqueue+0x1b0>)
 800103a:	705a      	strb	r2, [r3, #1]
      eventTrigger_estTDOA_payload.distanceDiff = measurement->data.tdoa.distanceDiff;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <estimatorEnqueue+0x1b0>)
 8001042:	f8c3 2002 	str.w	r2, [r3, #2]
      eventTrigger(&eventTrigger_estTDOA);
 8001046:	4834      	ldr	r0, [pc, #208]	; (8001118 <estimatorEnqueue+0x1b4>)
 8001048:	f004 fc0a 	bl	8005860 <eventTrigger>
      break;
 800104c:	e055      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypePosition:
      // for additional data, see locSrv.{x,y,z} and lighthouse.{x,y,z}
      eventTrigger_estPosition_payload.source = measurement->data.position.source;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7d1a      	ldrb	r2, [r3, #20]
 8001052:	4b32      	ldr	r3, [pc, #200]	; (800111c <estimatorEnqueue+0x1b8>)
 8001054:	701a      	strb	r2, [r3, #0]
      eventTrigger(&eventTrigger_estPosition);
 8001056:	4832      	ldr	r0, [pc, #200]	; (8001120 <estimatorEnqueue+0x1bc>)
 8001058:	f004 fc02 	bl	8005860 <eventTrigger>
      break;
 800105c:	e04d      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypePose:
      // no payload needed, see locSrv.{x,y,z,qx,qy,qz,qw}
      eventTrigger(&eventTrigger_estPose);
 800105e:	4831      	ldr	r0, [pc, #196]	; (8001124 <estimatorEnqueue+0x1c0>)
 8001060:	f004 fbfe 	bl	8005860 <eventTrigger>
      break;
 8001064:	e049      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeDistance:
      eventTrigger_estDistance_payload.id = measurement->data.distance.anchorId;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7c1a      	ldrb	r2, [r3, #16]
 800106a:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <estimatorEnqueue+0x1c4>)
 800106c:	701a      	strb	r2, [r3, #0]
      eventTrigger_estDistance_payload.distance = measurement->data.distance.distance;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	695a      	ldr	r2, [r3, #20]
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <estimatorEnqueue+0x1c4>)
 8001074:	f8c3 2001 	str.w	r2, [r3, #1]
      eventTrigger(&eventTrigger_estDistance);
 8001078:	482c      	ldr	r0, [pc, #176]	; (800112c <estimatorEnqueue+0x1c8>)
 800107a:	f004 fbf1 	bl	8005860 <eventTrigger>
      break;
 800107e:	e03c      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeTOF:
      // no payload needed, see range.zrange
      eventTrigger(&eventTrigger_estTOF);
 8001080:	482b      	ldr	r0, [pc, #172]	; (8001130 <estimatorEnqueue+0x1cc>)
 8001082:	f004 fbed 	bl	8005860 <eventTrigger>
      break;
 8001086:	e038      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeAbsoluteHeight:
      // no payload needed, see CONFIG_DECK_LOCO_2D_POSITION
      eventTrigger(&eventTrigger_estAbsoluteHeight);
 8001088:	482a      	ldr	r0, [pc, #168]	; (8001134 <estimatorEnqueue+0x1d0>)
 800108a:	f004 fbe9 	bl	8005860 <eventTrigger>
      break;
 800108e:	e034      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeFlow:
      // no payload needed, see motion.{deltaX,deltaY}
      eventTrigger(&eventTrigger_estFlow);
 8001090:	4829      	ldr	r0, [pc, #164]	; (8001138 <estimatorEnqueue+0x1d4>)
 8001092:	f004 fbe5 	bl	8005860 <eventTrigger>
      break;
 8001096:	e030      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeYawError:
      eventTrigger_estYawError_payload.yawError = measurement->data.yawError.yawError;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <estimatorEnqueue+0x1d8>)
 800109e:	6013      	str	r3, [r2, #0]
      eventTrigger(&eventTrigger_estYawError);
 80010a0:	4827      	ldr	r0, [pc, #156]	; (8001140 <estimatorEnqueue+0x1dc>)
 80010a2:	f004 fbdd 	bl	8005860 <eventTrigger>
      break;
 80010a6:	e028      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeSweepAngle:
      eventTrigger_estSweepAngle_payload.sensorId = measurement->data.sweepAngle.sensorId;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7e1a      	ldrb	r2, [r3, #24]
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010ae:	701a      	strb	r2, [r3, #0]
      eventTrigger_estSweepAngle_payload.baseStationId = measurement->data.sweepAngle.baseStationId;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7e5a      	ldrb	r2, [r3, #25]
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010b6:	705a      	strb	r2, [r3, #1]
      eventTrigger_estSweepAngle_payload.sweepId = measurement->data.sweepAngle.sweepId;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7e9a      	ldrb	r2, [r3, #26]
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010be:	709a      	strb	r2, [r3, #2]
      eventTrigger_estSweepAngle_payload.t = measurement->data.sweepAngle.t;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69da      	ldr	r2, [r3, #28]
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010c6:	f8c3 2003 	str.w	r2, [r3, #3]
      eventTrigger_estSweepAngle_payload.sweepAngle = measurement->data.sweepAngle.measuredSweepAngle;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1a      	ldr	r2, [r3, #32]
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010d0:	f8c3 2007 	str.w	r2, [r3, #7]
      eventTrigger(&eventTrigger_estSweepAngle);
 80010d4:	481c      	ldr	r0, [pc, #112]	; (8001148 <estimatorEnqueue+0x1e4>)
 80010d6:	f004 fbc3 	bl	8005860 <eventTrigger>
      break;
 80010da:	e00e      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeGyroscope:
      // no payload needed, see gyro.{x,y,z}
      eventTrigger(&eventTrigger_estGyroscope);
 80010dc:	481b      	ldr	r0, [pc, #108]	; (800114c <estimatorEnqueue+0x1e8>)
 80010de:	f004 fbbf 	bl	8005860 <eventTrigger>
      break;
 80010e2:	e00a      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeAcceleration:
      // no payload needed, see acc.{x,y,z}
      eventTrigger(&eventTrigger_estAcceleration);
 80010e4:	481a      	ldr	r0, [pc, #104]	; (8001150 <estimatorEnqueue+0x1ec>)
 80010e6:	f004 fbbb 	bl	8005860 <eventTrigger>
      break;
 80010ea:	e006      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeBarometer:
      // no payload needed, see baro.asl
      eventTrigger(&eventTrigger_estBarometer);
 80010ec:	4819      	ldr	r0, [pc, #100]	; (8001154 <estimatorEnqueue+0x1f0>)
 80010ee:	f004 fbb7 	bl	8005860 <eventTrigger>
      break;
 80010f2:	e002      	b.n	80010fa <estimatorEnqueue+0x196>
    return;
 80010f4:	bf00      	nop
 80010f6:	e000      	b.n	80010fa <estimatorEnqueue+0x196>
    default:
      break;
 80010f8:	bf00      	nop
  }
}
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200040ec 	.word	0x200040ec
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	e000ed04 	.word	0xe000ed04
 800110c:	20000000 	.word	0x20000000
 8001110:	2000001c 	.word	0x2000001c
 8001114:	200040f0 	.word	0x200040f0
 8001118:	08019b84 	.word	0x08019b84
 800111c:	200040f8 	.word	0x200040f8
 8001120:	08019b98 	.word	0x08019b98
 8001124:	08019bac 	.word	0x08019bac
 8001128:	200040fc 	.word	0x200040fc
 800112c:	08019bc0 	.word	0x08019bc0
 8001130:	08019bd4 	.word	0x08019bd4
 8001134:	08019be8 	.word	0x08019be8
 8001138:	08019bfc 	.word	0x08019bfc
 800113c:	20004104 	.word	0x20004104
 8001140:	08019c10 	.word	0x08019c10
 8001144:	20004108 	.word	0x20004108
 8001148:	08019c24 	.word	0x08019c24
 800114c:	08019c38 	.word	0x08019c38
 8001150:	08019c4c 	.word	0x08019c4c
 8001154:	08019c60 	.word	0x08019c60

08001158 <peerLocalizationInit>:
#include "task.h"
#include "peer_localization.h"


void peerLocalizationInit()
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  // All other_positions[in].id will be set to zero due to static initialization.
  // If we ever switch to dynamic allocation, we need to set them to zero explicitly.
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <peerLocalizationTellPosition>:

// array of other's position
static peerLocalizationOtherPosition_t other_positions[PEER_LOCALIZATION_MAX_NEIGHBORS];

bool peerLocalizationTellPosition(int cfid, positionMeasurement_t const *pos)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < PEER_LOCALIZATION_MAX_NEIGHBORS; ++i) {
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e052      	b.n	800121e <peerLocalizationTellPosition+0xb6>
    if (other_positions[i].id == 0 || other_positions[i].id == cfid) {
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	492d      	ldr	r1, [pc, #180]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00b      	beq.n	80011a4 <peerLocalizationTellPosition+0x3c>
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	4928      	ldr	r1, [pc, #160]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d139      	bne.n	8001218 <peerLocalizationTellPosition+0xb0>
      other_positions[i].id = cfid;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	b2d8      	uxtb	r0, r3
 80011aa:	4921      	ldr	r1, [pc, #132]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	4602      	mov	r2, r0
 80011b8:	701a      	strb	r2, [r3, #0]
      other_positions[i].pos.x = pos->x;
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	481b      	ldr	r0, [pc, #108]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4403      	add	r3, r0
 80011cc:	3308      	adds	r3, #8
 80011ce:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.y = pos->y;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	6859      	ldr	r1, [r3, #4]
 80011d6:	4816      	ldr	r0, [pc, #88]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4403      	add	r3, r0
 80011e2:	330c      	adds	r3, #12
 80011e4:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.z = pos->z;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6899      	ldr	r1, [r3, #8]
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4403      	add	r3, r0
 80011f8:	3310      	adds	r3, #16
 80011fa:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.timestamp = xTaskGetTickCount();
 80011fc:	7bfc      	ldrb	r4, [r7, #15]
 80011fe:	f013 f801 	bl	8014204 <xTaskGetTickCount>
 8001202:	4602      	mov	r2, r0
 8001204:	490a      	ldr	r1, [pc, #40]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 8001206:	4623      	mov	r3, r4
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4423      	add	r3, r4
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	3304      	adds	r3, #4
 8001212:	601a      	str	r2, [r3, #0]
      return true;
 8001214:	2301      	movs	r3, #1
 8001216:	e006      	b.n	8001226 <peerLocalizationTellPosition+0xbe>
  for (uint8_t i = 0; i < PEER_LOCALIZATION_MAX_NEIGHBORS; ++i) {
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	3301      	adds	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	2b09      	cmp	r3, #9
 8001222:	d9a9      	bls.n	8001178 <peerLocalizationTellPosition+0x10>
    }
  }
  return false;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}
 800122e:	bf00      	nop
 8001230:	20004114 	.word	0x20004114

08001234 <appchannelInit>:
bool appchannelHasOverflowOccured() {
    return appchannelHasOverflowOccurred();
}

void appchannelInit()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  sendMutex = xSemaphoreCreateMutex();
 8001238:	2001      	movs	r0, #1
 800123a:	f011 ff1a 	bl	8013072 <xQueueCreateMutex>
 800123e:	4603      	mov	r3, r0
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <appchannelInit+0x2c>)
 8001242:	6013      	str	r3, [r2, #0]

  rxQueue = xQueueCreate(10, sizeof(CRTPPacket));
 8001244:	2200      	movs	r2, #0
 8001246:	2120      	movs	r1, #32
 8001248:	200a      	movs	r0, #10
 800124a:	f011 fe9b 	bl	8012f84 <xQueueGenericCreate>
 800124e:	4603      	mov	r3, r0
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <appchannelInit+0x30>)
 8001252:	6013      	str	r3, [r2, #0]

  overflow = false;
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <appchannelInit+0x34>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200041dc 	.word	0x200041dc
 8001264:	200041e0 	.word	0x200041e0
 8001268:	200041e4 	.word	0x200041e4

0800126c <appchannelIncomingPacket>:

void appchannelIncomingPacket(CRTPPacket *p)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  int res = xQueueSend(rxQueue, p, 0);
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <appchannelIncomingPacket+0x2c>)
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	2300      	movs	r3, #0
 800127a:	2200      	movs	r2, #0
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	f011 ff2b 	bl	80130d8 <xQueueGenericSend>
 8001282:	60f8      	str	r0, [r7, #12]

  if (res != pdTRUE) {
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d002      	beq.n	8001290 <appchannelIncomingPacket+0x24>
    overflow = true;
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <appchannelIncomingPacket+0x30>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
  }
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200041e0 	.word	0x200041e0
 800129c:	200041e4 	.word	0x200041e4

080012a0 <appInit>:

static void appTask(void *param);


void __attribute__((weak)) appInit()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af04      	add	r7, sp, #16
  if (isInit) {
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <appInit+0x38>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d111      	bne.n	80012d2 <appInit+0x32>
    return;
  }

  STATIC_MEM_TASK_CREATE(appTask, appTask, APP_TASK_NAME, NULL, CONFIG_APP_PRIORITY);
 80012ae:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <appInit+0x3c>)
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <appInit+0x40>)
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2300      	movs	r3, #0
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2300      	movs	r3, #0
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <appInit+0x44>)
 80012c4:	4808      	ldr	r0, [pc, #32]	; (80012e8 <appInit+0x48>)
 80012c6:	f012 fc27 	bl	8013b18 <xTaskCreateStatic>
  isInit = true;
 80012ca:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <appInit+0x38>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e000      	b.n	80012d4 <appInit+0x34>
    return;
 80012d2:	bf00      	nop
}
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200041e5 	.word	0x200041e5
 80012dc:	20000608 	.word	0x20000608
 80012e0:	200041e8 	.word	0x200041e8
 80012e4:	08019e00 	.word	0x08019e00
 80012e8:	080012ed 	.word	0x080012ed

080012ec <appTask>:

static void appTask(void *param)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 80012f4:	f002 fd68 	bl	8003dc8 <systemWaitStart>

  appMain();
 80012f8:	f000 f806 	bl	8001308 <appMain>

  while(1) {
    vTaskDelay(portMAX_DELAY);
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001300:	f012 fdc2 	bl	8013e88 <vTaskDelay>
 8001304:	e7fa      	b.n	80012fc <appTask+0x10>
	...

08001308 <appMain>:
    int myNum;
    std::string myString;
};
*/
void appMain()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Waiting for activation ...\n");
 800130c:	4906      	ldr	r1, [pc, #24]	; (8001328 <appMain+0x20>)
 800130e:	2000      	movs	r0, #0
 8001310:	f004 f8a2 	bl	8005458 <SEGGER_RTT_printf>
  /* make sure that the assertion is not simple enough to be optimized away
   * by the compiler */
//  assert(cl->myNum + cl->myString.size() == 0);

  while(1) {
    vTaskDelay(M2T(2000));
 8001314:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001318:	f012 fdb6 	bl	8013e88 <vTaskDelay>
    DEBUG_PRINT("Hello World!\n");
 800131c:	4903      	ldr	r1, [pc, #12]	; (800132c <appMain+0x24>)
 800131e:	2000      	movs	r0, #0
 8001320:	f004 f89a 	bl	8005458 <SEGGER_RTT_printf>
    vTaskDelay(M2T(2000));
 8001324:	e7f6      	b.n	8001314 <appMain+0xc>
 8001326:	bf00      	nop
 8001328:	08019e04 	.word	0x08019e04
 800132c:	08019e20 	.word	0x08019e20

08001330 <commInit>:
#include "crtp_localization_service.h"

static bool isInit;

void commInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  if (isInit)
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <commInit+0x40>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d117      	bne.n	800136c <commInit+0x3c>
    return;

  uartslkInit();
 800133c:	f002 fe60 	bl	8004000 <uartslkInit>
  radiolinkInit();
 8001340:	f000 ff76 	bl	8002230 <radiolinkInit>

  crtpSetLink(radiolinkGetLink());
 8001344:	f001 f8c4 	bl	80024d0 <radiolinkGetLink>
 8001348:	4603      	mov	r3, r0
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f9e6 	bl	800171c <crtpSetLink>

  crtpserviceInit();
 8001350:	f000 fe00 	bl	8001f54 <crtpserviceInit>
  platformserviceInit();
 8001354:	f000 fe72 	bl	800203c <platformserviceInit>
  logInit();
 8001358:	f004 faa2 	bl	80058a0 <logInit>
  paramInit();
 800135c:	f006 fed4 	bl	8008108 <paramInit>
  locSrvInit();
 8001360:	f000 fb14 	bl	800198c <locSrvInit>
  //if (usbTest())
  //  crtpSetLink(usbGetLink);
  //else if(radiolinkTest())
  //  crtpSetLink(radiolinkGetLink());
  
  isInit = true;
 8001364:	4b02      	ldr	r3, [pc, #8]	; (8001370 <commInit+0x40>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
 800136a:	e000      	b.n	800136e <commInit+0x3e>
    return;
 800136c:	bf00      	nop
}
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20004698 	.word	0x20004698

08001374 <crtpInit>:

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpTxTask, CRTP_TX_TASK_STACKSIZE);
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpRxTask, CRTP_RX_TASK_STACKSIZE);

void crtpInit(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af04      	add	r7, sp, #16
  if(isInit)
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <crtpInit+0x70>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d12d      	bne.n	80013de <crtpInit+0x6a>
    return;

  txQueue = xQueueCreate(CRTP_TX_QUEUE_SIZE, sizeof(CRTPPacket));
 8001382:	2200      	movs	r2, #0
 8001384:	2120      	movs	r1, #32
 8001386:	2078      	movs	r0, #120	; 0x78
 8001388:	f011 fdfc 	bl	8012f84 <xQueueGenericCreate>
 800138c:	4603      	mov	r3, r0
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <crtpInit+0x74>)
 8001390:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <crtpInit+0x74>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a15      	ldr	r2, [pc, #84]	; (80013ec <crtpInit+0x78>)
 8001398:	4915      	ldr	r1, [pc, #84]	; (80013f0 <crtpInit+0x7c>)
 800139a:	4618      	mov	r0, r3
 800139c:	f006 ff8e 	bl	80082bc <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(crtpTxTask, crtpTxTask, CRTP_TX_TASK_NAME, NULL, CRTP_TX_TASK_PRI);
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <crtpInit+0x80>)
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <crtpInit+0x84>)
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	2302      	movs	r3, #2
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2300      	movs	r3, #0
 80013b2:	4912      	ldr	r1, [pc, #72]	; (80013fc <crtpInit+0x88>)
 80013b4:	4812      	ldr	r0, [pc, #72]	; (8001400 <crtpInit+0x8c>)
 80013b6:	f012 fbaf 	bl	8013b18 <xTaskCreateStatic>
  STATIC_MEM_TASK_CREATE(crtpRxTask, crtpRxTask, CRTP_RX_TASK_NAME, NULL, CRTP_RX_TASK_PRI);
 80013ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013be:	461a      	mov	r2, r3
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <crtpInit+0x90>)
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <crtpInit+0x94>)
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	2302      	movs	r3, #2
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2300      	movs	r3, #0
 80013ce:	490f      	ldr	r1, [pc, #60]	; (800140c <crtpInit+0x98>)
 80013d0:	480f      	ldr	r0, [pc, #60]	; (8001410 <crtpInit+0x9c>)
 80013d2:	f012 fba1 	bl	8013b18 <xTaskCreateStatic>

  isInit = true;
 80013d6:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <crtpInit+0x70>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
 80013dc:	e000      	b.n	80013e0 <crtpInit+0x6c>
    return;
 80013de:	bf00      	nop
}
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20004699 	.word	0x20004699
 80013e8:	200046b0 	.word	0x200046b0
 80013ec:	08019e30 	.word	0x08019e30
 80013f0:	08019e38 	.word	0x08019e38
 80013f4:	200008c0 	.word	0x200008c0
 80013f8:	200006c0 	.word	0x200006c0
 80013fc:	08019e54 	.word	0x08019e54
 8001400:	080014d5 	.word	0x080014d5
 8001404:	20000d78 	.word	0x20000d78
 8001408:	20000978 	.word	0x20000978
 800140c:	08019e5c 	.word	0x08019e5c
 8001410:	08001545 	.word	0x08001545

08001414 <crtpInitTaskQueue>:
{
  return isInit;
}

void crtpInitTaskQueue(CRTPPort portId)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  ASSERT(queues[portId] == NULL);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4a10      	ldr	r2, [pc, #64]	; (8001464 <crtpInitTaskQueue+0x50>)
 8001422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d004      	beq.n	8001434 <crtpInitTaskQueue+0x20>
 800142a:	226b      	movs	r2, #107	; 0x6b
 800142c:	490e      	ldr	r1, [pc, #56]	; (8001468 <crtpInitTaskQueue+0x54>)
 800142e:	480f      	ldr	r0, [pc, #60]	; (800146c <crtpInitTaskQueue+0x58>)
 8001430:	f004 f840 	bl	80054b4 <assertFail>

  queues[portId] = xQueueCreate(CRTP_RX_QUEUE_SIZE, sizeof(CRTPPacket));
 8001434:	79fc      	ldrb	r4, [r7, #7]
 8001436:	2200      	movs	r2, #0
 8001438:	2120      	movs	r1, #32
 800143a:	2010      	movs	r0, #16
 800143c:	f011 fda2 	bl	8012f84 <xQueueGenericCreate>
 8001440:	4603      	mov	r3, r0
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <crtpInitTaskQueue+0x50>)
 8001444:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  DEBUG_QUEUE_MONITOR_REGISTER(queues[portId]);
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	4a06      	ldr	r2, [pc, #24]	; (8001464 <crtpInitTaskQueue+0x50>)
 800144c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <crtpInitTaskQueue+0x5c>)
 8001452:	4905      	ldr	r1, [pc, #20]	; (8001468 <crtpInitTaskQueue+0x54>)
 8001454:	4618      	mov	r0, r3
 8001456:	f006 ff31 	bl	80082bc <qmRegisterQueue>
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bd90      	pop	{r4, r7, pc}
 8001462:	bf00      	nop
 8001464:	200046b4 	.word	0x200046b4
 8001468:	08019e38 	.word	0x08019e38
 800146c:	08019e64 	.word	0x08019e64
 8001470:	08019e7c 	.word	0x08019e7c

08001474 <crtpReceivePacketBlock>:

  return xQueueReceive(queues[portId], p, 0);
}

int crtpReceivePacketBlock(CRTPPort portId, CRTPPacket *p)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  ASSERT(queues[portId]);
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <crtpReceivePacketBlock+0x50>)
 8001484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d104      	bne.n	8001496 <crtpReceivePacketBlock+0x22>
 800148c:	227b      	movs	r2, #123	; 0x7b
 800148e:	490e      	ldr	r1, [pc, #56]	; (80014c8 <crtpReceivePacketBlock+0x54>)
 8001490:	480e      	ldr	r0, [pc, #56]	; (80014cc <crtpReceivePacketBlock+0x58>)
 8001492:	f004 f80f 	bl	80054b4 <assertFail>
  ASSERT(p);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d104      	bne.n	80014a6 <crtpReceivePacketBlock+0x32>
 800149c:	227c      	movs	r2, #124	; 0x7c
 800149e:	490a      	ldr	r1, [pc, #40]	; (80014c8 <crtpReceivePacketBlock+0x54>)
 80014a0:	480b      	ldr	r0, [pc, #44]	; (80014d0 <crtpReceivePacketBlock+0x5c>)
 80014a2:	f004 f807 	bl	80054b4 <assertFail>

  return xQueueReceive(queues[portId], p, portMAX_DELAY);
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <crtpReceivePacketBlock+0x50>)
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014b2:	6839      	ldr	r1, [r7, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f011 ffb1 	bl	801341c <xQueueReceive>
 80014ba:	4603      	mov	r3, r0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200046b4 	.word	0x200046b4
 80014c8:	08019e38 	.word	0x08019e38
 80014cc:	08019e7c 	.word	0x08019e7c
 80014d0:	08019e8c 	.word	0x08019e8c

080014d4 <crtpTxTask>:
{
  return (CRTP_TX_QUEUE_SIZE - uxQueueMessagesWaiting(txQueue));
}

void crtpTxTask(void *param)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <crtpTxTask+0x60>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a15      	ldr	r2, [pc, #84]	; (8001538 <crtpTxTask+0x64>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d021      	beq.n	800152a <crtpTxTask+0x56>
    {
      if (xQueueReceive(txQueue, &p, portMAX_DELAY) == pdTRUE)
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <crtpTxTask+0x68>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f107 0108 	add.w	r1, r7, #8
 80014ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014f2:	4618      	mov	r0, r3
 80014f4:	f011 ff92 	bl	801341c <xQueueReceive>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d1ee      	bne.n	80014dc <crtpTxTask+0x8>
      {
        // Keep testing, if the link changes to USB it will go though
        while (link->sendPacket(&p) == false)
 80014fe:	e002      	b.n	8001506 <crtpTxTask+0x32>
        {
          // Relaxation time
          vTaskDelay((10));
 8001500:	200a      	movs	r0, #10
 8001502:	f012 fcc1 	bl	8013e88 <vTaskDelay>
        while (link->sendPacket(&p) == false)
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <crtpTxTask+0x60>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f107 0208 	add.w	r2, r7, #8
 8001510:	4610      	mov	r0, r2
 8001512:	4798      	blx	r3
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f2      	beq.n	8001500 <crtpTxTask+0x2c>
        }
        stats.txCount++;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <crtpTxTask+0x6c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	3301      	adds	r3, #1
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <crtpTxTask+0x6c>)
 8001522:	6053      	str	r3, [r2, #4]
        updateStats();
 8001524:	f000 f936 	bl	8001794 <updateStats>
 8001528:	e7d8      	b.n	80014dc <crtpTxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 800152a:	200a      	movs	r0, #10
 800152c:	f012 fcac 	bl	8013e88 <vTaskDelay>
    if (link != &nopLink)
 8001530:	e7d4      	b.n	80014dc <crtpTxTask+0x8>
 8001532:	bf00      	nop
 8001534:	2000004c 	.word	0x2000004c
 8001538:	20000038 	.word	0x20000038
 800153c:	200046b0 	.word	0x200046b0
 8001540:	2000469c 	.word	0x2000469c

08001544 <crtpRxTask>:
    }
  }
}

void crtpRxTask(void *param)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <crtpRxTask+0x9c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a24      	ldr	r2, [pc, #144]	; (80015e4 <crtpRxTask+0xa0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d040      	beq.n	80015d8 <crtpRxTask+0x94>
    {
      if (!link->receivePacket(&p))
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <crtpRxTask+0x9c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f107 0208 	add.w	r2, r7, #8
 8001560:	4610      	mov	r0, r2
 8001562:	4798      	blx	r3
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <crtpRxTask+0x8>
      {
        if (queues[p.port])
 800156a:	7a7b      	ldrb	r3, [r7, #9]
 800156c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001570:	b2db      	uxtb	r3, r3
 8001572:	461a      	mov	r2, r3
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <crtpRxTask+0xa4>)
 8001576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00e      	beq.n	800159c <crtpRxTask+0x58>
        {
          // Block, since we should never drop a packet
          xQueueSend(queues[p.port], &p, portMAX_DELAY);
 800157e:	7a7b      	ldrb	r3, [r7, #9]
 8001580:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001584:	b2db      	uxtb	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <crtpRxTask+0xa4>)
 800158a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800158e:	f107 0108 	add.w	r1, r7, #8
 8001592:	2300      	movs	r3, #0
 8001594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001598:	f011 fd9e 	bl	80130d8 <xQueueGenericSend>
        }

        if (callbacks[p.port])
 800159c:	7a7b      	ldrb	r3, [r7, #9]
 800159e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <crtpRxTask+0xa8>)
 80015a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00b      	beq.n	80015c8 <crtpRxTask+0x84>
        {
          callbacks[p.port](&p);
 80015b0:	7a7b      	ldrb	r3, [r7, #9]
 80015b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <crtpRxTask+0xa8>)
 80015bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c0:	f107 0208 	add.w	r2, r7, #8
 80015c4:	4610      	mov	r0, r2
 80015c6:	4798      	blx	r3
        }

        stats.rxCount++;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <crtpRxTask+0xac>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <crtpRxTask+0xac>)
 80015d0:	6013      	str	r3, [r2, #0]
        updateStats();
 80015d2:	f000 f8df 	bl	8001794 <updateStats>
 80015d6:	e7b9      	b.n	800154c <crtpRxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 80015d8:	200a      	movs	r0, #10
 80015da:	f012 fc55 	bl	8013e88 <vTaskDelay>
    if (link != &nopLink)
 80015de:	e7b5      	b.n	800154c <crtpRxTask+0x8>
 80015e0:	2000004c 	.word	0x2000004c
 80015e4:	20000038 	.word	0x20000038
 80015e8:	200046b4 	.word	0x200046b4
 80015ec:	200046f4 	.word	0x200046f4
 80015f0:	2000469c 	.word	0x2000469c

080015f4 <crtpRegisterPortCB>:
    }
  }
}

void crtpRegisterPortCB(int port, CrtpCallback cb)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  if (port>CRTP_NBR_OF_PORTS)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b10      	cmp	r3, #16
 8001602:	dc05      	bgt.n	8001610 <crtpRegisterPortCB+0x1c>
    return;

  callbacks[port] = cb;
 8001604:	4905      	ldr	r1, [pc, #20]	; (800161c <crtpRegisterPortCB+0x28>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800160e:	e000      	b.n	8001612 <crtpRegisterPortCB+0x1e>
    return;
 8001610:	bf00      	nop
}
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	200046f4 	.word	0x200046f4

08001620 <crtpSendPacket>:

int crtpSendPacket(CRTPPacket *p)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  ASSERT(p);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d104      	bne.n	8001638 <crtpSendPacket+0x18>
 800162e:	22d4      	movs	r2, #212	; 0xd4
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <crtpSendPacket+0x44>)
 8001632:	480d      	ldr	r0, [pc, #52]	; (8001668 <crtpSendPacket+0x48>)
 8001634:	f003 ff3e 	bl	80054b4 <assertFail>
  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b1e      	cmp	r3, #30
 800163e:	d904      	bls.n	800164a <crtpSendPacket+0x2a>
 8001640:	22d5      	movs	r2, #213	; 0xd5
 8001642:	4908      	ldr	r1, [pc, #32]	; (8001664 <crtpSendPacket+0x44>)
 8001644:	4809      	ldr	r0, [pc, #36]	; (800166c <crtpSendPacket+0x4c>)
 8001646:	f003 ff35 	bl	80054b4 <assertFail>

  return xQueueSend(txQueue, p, 0);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <crtpSendPacket+0x50>)
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	2300      	movs	r3, #0
 8001650:	2200      	movs	r2, #0
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f011 fd40 	bl	80130d8 <xQueueGenericSend>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	08019e38 	.word	0x08019e38
 8001668:	08019e8c 	.word	0x08019e8c
 800166c:	08019e90 	.word	0x08019e90
 8001670:	200046b0 	.word	0x200046b0

08001674 <crtpSendPacketBlock>:

int crtpSendPacketBlock(CRTPPacket *p)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  ASSERT(p);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d104      	bne.n	800168c <crtpSendPacketBlock+0x18>
 8001682:	22dc      	movs	r2, #220	; 0xdc
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <crtpSendPacketBlock+0x44>)
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <crtpSendPacketBlock+0x48>)
 8001688:	f003 ff14 	bl	80054b4 <assertFail>
  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b1e      	cmp	r3, #30
 8001692:	d904      	bls.n	800169e <crtpSendPacketBlock+0x2a>
 8001694:	22dd      	movs	r2, #221	; 0xdd
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <crtpSendPacketBlock+0x44>)
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <crtpSendPacketBlock+0x4c>)
 800169a:	f003 ff0b 	bl	80054b4 <assertFail>

  return xQueueSend(txQueue, p, portMAX_DELAY);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <crtpSendPacketBlock+0x50>)
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	2300      	movs	r3, #0
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	f011 fd15 	bl	80130d8 <xQueueGenericSend>
 80016ae:	4603      	mov	r3, r0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	08019e38 	.word	0x08019e38
 80016bc:	08019e8c 	.word	0x08019e8c
 80016c0:	08019e90 	.word	0x08019e90
 80016c4:	200046b0 	.word	0x200046b0

080016c8 <crtpReset>:

int crtpReset(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  xQueueReset(txQueue);
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <crtpReset+0x28>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f011 fb82 	bl	8012ddc <xQueueGenericReset>
  if (link->reset) {
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <crtpReset+0x2c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <crtpReset+0x22>
    link->reset();
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <crtpReset+0x2c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	4798      	blx	r3
  }

  return 0;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200046b0 	.word	0x200046b0
 80016f4:	2000004c 	.word	0x2000004c

080016f8 <crtpIsConnected>:

bool crtpIsConnected(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  if (link->isConnected)
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <crtpIsConnected+0x20>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <crtpIsConnected+0x1a>
    return link->isConnected();
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <crtpIsConnected+0x20>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4798      	blx	r3
 800170e:	4603      	mov	r3, r0
 8001710:	e000      	b.n	8001714 <crtpIsConnected+0x1c>
  return true;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000004c 	.word	0x2000004c

0800171c <crtpSetLink>:

void crtpSetLink(struct crtpLinkOperations * lk)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if(link)
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <crtpSetLink+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <crtpSetLink+0x1a>
    link->setEnable(false);
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <crtpSetLink+0x40>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2000      	movs	r0, #0
 8001734:	4798      	blx	r3

  if (lk)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <crtpSetLink+0x28>
    link = lk;
 800173c:	4a07      	ldr	r2, [pc, #28]	; (800175c <crtpSetLink+0x40>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e002      	b.n	800174a <crtpSetLink+0x2e>
  else
    link = &nopLink;
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <crtpSetLink+0x40>)
 8001746:	4a06      	ldr	r2, [pc, #24]	; (8001760 <crtpSetLink+0x44>)
 8001748:	601a      	str	r2, [r3, #0]

  link->setEnable(true);
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <crtpSetLink+0x40>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2001      	movs	r0, #1
 8001752:	4798      	blx	r3
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	2000004c 	.word	0x2000004c
 8001760:	20000038 	.word	0x20000038

08001764 <nopFunc>:

static int nopFunc(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return ENETDOWN;
 8001768:	2373      	movs	r3, #115	; 0x73
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <clearStats>:

static void clearStats()
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  stats.rxCount = 0;
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <clearStats+0x1c>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
  stats.txCount = 0;
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <clearStats+0x1c>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	2000469c 	.word	0x2000469c

08001794 <updateStats>:

static void updateStats()
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  uint32_t now = xTaskGetTickCount();
 800179a:	f012 fd33 	bl	8014204 <xTaskGetTickCount>
 800179e:	6078      	str	r0, [r7, #4]
  if (now > stats.nextStatisticsTime) {
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <updateStats+0x9c>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d93d      	bls.n	8001826 <updateStats+0x92>
    float interval = now - stats.previousStatisticsTime;
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <updateStats+0x9c>)
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ba:	edc7 7a00 	vstr	s15, [r7]
    stats.rxRate = (uint16_t)(1000.0f * stats.rxCount / interval);
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <updateStats+0x9c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001834 <updateStats+0xa0>
 80017ce:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017d2:	ed97 7a00 	vldr	s14, [r7]
 80017d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017de:	ee17 3a90 	vmov	r3, s15
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <updateStats+0x9c>)
 80017e6:	811a      	strh	r2, [r3, #8]
    stats.txRate = (uint16_t)(1000.0f * stats.txCount / interval);
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <updateStats+0x9c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001834 <updateStats+0xa0>
 80017f8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017fc:	ed97 7a00 	vldr	s14, [r7]
 8001800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001808:	ee17 3a90 	vmov	r3, s15
 800180c:	b29a      	uxth	r2, r3
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <updateStats+0x9c>)
 8001810:	815a      	strh	r2, [r3, #10]

    clearStats();
 8001812:	f7ff ffaf 	bl	8001774 <clearStats>
    stats.previousStatisticsTime = now;
 8001816:	4a06      	ldr	r2, [pc, #24]	; (8001830 <updateStats+0x9c>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6113      	str	r3, [r2, #16]
    stats.nextStatisticsTime = now + STATS_INTERVAL;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001822:	4a03      	ldr	r2, [pc, #12]	; (8001830 <updateStats+0x9c>)
 8001824:	60d3      	str	r3, [r2, #12]
  }
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000469c 	.word	0x2000469c
 8001834:	447a0000 	.word	0x447a0000

08001838 <estimatorEnqueuePosition>:
  m.data.tdoa = *tdoa;
  estimatorEnqueue(&m);
}

static inline void estimatorEnqueuePosition(const positionMeasurement_t *position)
{
 8001838:	b5b0      	push	{r4, r5, r7, lr}
 800183a:	b08e      	sub	sp, #56	; 0x38
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypePosition;
 8001840:	2301      	movs	r3, #1
 8001842:	723b      	strb	r3, [r7, #8]
  m.data.position = *position;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f107 040c 	add.w	r4, r7, #12
 800184a:	461d      	mov	r5, r3
 800184c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800184e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001850:	682b      	ldr	r3, [r5, #0]
 8001852:	6023      	str	r3, [r4, #0]
  estimatorEnqueue(&m);
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fb83 	bl	8000f64 <estimatorEnqueue>
}
 800185e:	bf00      	nop
 8001860:	3738      	adds	r7, #56	; 0x38
 8001862:	46bd      	mov	sp, r7
 8001864:	bdb0      	pop	{r4, r5, r7, pc}

08001866 <estimatorEnqueuePose>:

static inline void estimatorEnqueuePose(const poseMeasurement_t *pose)
{
 8001866:	b5b0      	push	{r4, r5, r7, lr}
 8001868:	b08e      	sub	sp, #56	; 0x38
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypePose;
 800186e:	2302      	movs	r3, #2
 8001870:	723b      	strb	r3, [r7, #8]
  m.data.pose = *pose;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f107 040c 	add.w	r4, r7, #12
 8001878:	461d      	mov	r5, r3
 800187a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001882:	682b      	ldr	r3, [r5, #0]
 8001884:	6023      	str	r3, [r4, #0]
  estimatorEnqueue(&m);
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fb6a 	bl	8000f64 <estimatorEnqueue>
}
 8001890:	bf00      	nop
 8001892:	3738      	adds	r7, #56	; 0x38
 8001894:	46bd      	mov	sp, r7
 8001896:	bdb0      	pop	{r4, r5, r7, pc}

08001898 <quatdecompress>:

	return comp;
}

static inline void quatdecompress(uint32_t comp, float q[4])
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
	unsigned const mask = (1 << 9) - 1;
 80018a2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80018a6:	617b      	str	r3, [r7, #20]

	int const i_largest = comp >> 30;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	0f9b      	lsrs	r3, r3, #30
 80018ac:	613b      	str	r3, [r7, #16]
	float sum_squares = 0;
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 80018b4:	2303      	movs	r3, #3
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	e04d      	b.n	8001956 <quatdecompress+0xbe>
		if (i != i_largest) {
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d046      	beq.n	8001950 <quatdecompress+0xb8>
			unsigned mag = comp & mask;
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	4013      	ands	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
			unsigned negbit = (comp >> 9) & 0x1;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	0a5b      	lsrs	r3, r3, #9
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
			comp = comp >> 10;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	0a9b      	lsrs	r3, r3, #10
 80018d8:	607b      	str	r3, [r7, #4]
			q[i] = ((float)M_SQRT1_2) * ((float)mag) / mask;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001988 <quatdecompress+0xf0>
 80018e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001902:	edc3 7a00 	vstr	s15, [r3]
			if (negbit == 1) {
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d10d      	bne.n	8001928 <quatdecompress+0x90>
				q[i] = -q[i];
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	4413      	add	r3, r2
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	4413      	add	r3, r2
 8001920:	eef1 7a67 	vneg.f32	s15, s15
 8001924:	edc3 7a00 	vstr	s15, [r3]
			}
			sum_squares += q[i] * q[i];
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	4413      	add	r3, r2
 8001930:	ed93 7a00 	vldr	s14, [r3]
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	4413      	add	r3, r2
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001944:	ed97 7a07 	vldr	s14, [r7, #28]
 8001948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194c:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	3b01      	subs	r3, #1
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b00      	cmp	r3, #0
 800195a:	daae      	bge.n	80018ba <quatdecompress+0x22>
		}
	}
	q[i_largest] = sqrtf(1.0f - sum_squares);
 800195c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001960:	edd7 7a07 	vldr	s15, [r7, #28]
 8001964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	18d4      	adds	r4, r2, r3
 8001970:	eeb0 0a67 	vmov.f32	s0, s15
 8001974:	f017 fe80 	bl	8019678 <sqrtf>
 8001978:	eef0 7a40 	vmov.f32	s15, s0
 800197c:	edc4 7a00 	vstr	s15, [r4]
}
 8001980:	bf00      	nop
 8001982:	3724      	adds	r7, #36	; 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd90      	pop	{r4, r7, pc}
 8001988:	3f3504f3 	.word	0x3f3504f3

0800198c <locSrvInit>:

static bool isEmergencyStopRequested = false;
static uint32_t emergencyStopWatchdogNotificationTick = 0;

void locSrvInit()
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
  if (isInit) {
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <locSrvInit+0x38>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d110      	bne.n	80019bc <locSrvInit+0x30>
    return;
  }

  //  uint64_t address = configblockGetRadioAddress();
  uint64_t address = RADIO_CHANNEL_ADDRESS;
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9c7 2300 	strd	r2, r3, [r7]
  my_id = address & 0xFF;
 80019a6:	783a      	ldrb	r2, [r7, #0]
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <locSrvInit+0x3c>)
 80019aa:	701a      	strb	r2, [r3, #0]

  crtpRegisterPortCB(CRTP_PORT_LOCALIZATION, locSrvCrtpCB);
 80019ac:	4907      	ldr	r1, [pc, #28]	; (80019cc <locSrvInit+0x40>)
 80019ae:	2006      	movs	r0, #6
 80019b0:	f7ff fe20 	bl	80015f4 <crtpRegisterPortCB>
  isInit = true;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <locSrvInit+0x38>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	e000      	b.n	80019be <locSrvInit+0x32>
    return;
 80019bc:	bf00      	nop
}
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2000476e 	.word	0x2000476e
 80019c8:	2000476f 	.word	0x2000476f
 80019cc:	080019d1 	.word	0x080019d1

080019d0 <locSrvCrtpCB>:

static void locSrvCrtpCB(CRTPPacket* pk)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  switch (pk->channel)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	785b      	ldrb	r3, [r3, #1]
 80019dc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d00e      	beq.n	8001a04 <locSrvCrtpCB+0x34>
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	dc10      	bgt.n	8001a0c <locSrvCrtpCB+0x3c>
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <locSrvCrtpCB+0x24>
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d004      	beq.n	80019fc <locSrvCrtpCB+0x2c>
      break;
    case EXT_POSITION_PACKED:
      extPositionPackedHandler(pk);
      break;
    default:
      break;
 80019f2:	e00b      	b.n	8001a0c <locSrvCrtpCB+0x3c>
      extPositionHandler(pk);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f827 	bl	8001a48 <extPositionHandler>
      break;
 80019fa:	e008      	b.n	8001a0e <locSrvCrtpCB+0x3e>
      genericLocHandle(pk);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f9e1 	bl	8001dc4 <genericLocHandle>
      break;
 8001a02:	e004      	b.n	8001a0e <locSrvCrtpCB+0x3e>
      extPositionPackedHandler(pk);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fa27 	bl	8001e58 <extPositionPackedHandler>
      break;
 8001a0a:	e000      	b.n	8001a0e <locSrvCrtpCB+0x3e>
      break;
 8001a0c:	bf00      	nop
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <updateLogFromExtPos>:

static void updateLogFromExtPos()
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  ext_pose.x = ext_pos.x;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <updateLogFromExtPos+0x28>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <updateLogFromExtPos+0x2c>)
 8001a22:	6013      	str	r3, [r2, #0]
  ext_pose.y = ext_pos.y;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <updateLogFromExtPos+0x28>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <updateLogFromExtPos+0x2c>)
 8001a2a:	6053      	str	r3, [r2, #4]
  ext_pose.z = ext_pos.z;
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <updateLogFromExtPos+0x28>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <updateLogFromExtPos+0x2c>)
 8001a32:	6093      	str	r3, [r2, #8]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20004734 	.word	0x20004734
 8001a44:	20004748 	.word	0x20004748

08001a48 <extPositionHandler>:

static void extPositionHandler(CRTPPacket* pk) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  const struct CrtpExtPosition* data = (const struct CrtpExtPosition*)pk->data;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3302      	adds	r3, #2
 8001a54:	60fb      	str	r3, [r7, #12]

  ext_pos.x = data->x;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <extPositionHandler+0x54>)
 8001a5c:	6013      	str	r3, [r2, #0]
  ext_pos.y = data->y;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <extPositionHandler+0x54>)
 8001a64:	6053      	str	r3, [r2, #4]
  ext_pos.z = data->z;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <extPositionHandler+0x54>)
 8001a6c:	6093      	str	r3, [r2, #8]
  ext_pos.stdDev = extPosStdDev;
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <extPositionHandler+0x58>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <extPositionHandler+0x54>)
 8001a74:	60d3      	str	r3, [r2, #12]
  ext_pos.source = MeasurementSourceLocationService;
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <extPositionHandler+0x54>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	741a      	strb	r2, [r3, #16]
  updateLogFromExtPos();
 8001a7c:	f7ff ffcc 	bl	8001a18 <updateLogFromExtPos>

  estimatorEnqueuePosition(&ext_pos);
 8001a80:	4806      	ldr	r0, [pc, #24]	; (8001a9c <extPositionHandler+0x54>)
 8001a82:	f7ff fed9 	bl	8001838 <estimatorEnqueuePosition>
  tickOfLastPacket = xTaskGetTickCount();
 8001a86:	f012 fbbd 	bl	8014204 <xTaskGetTickCount>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <extPositionHandler+0x5c>)
 8001a90:	801a      	strh	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20004734 	.word	0x20004734
 8001aa0:	20000050 	.word	0x20000050
 8001aa4:	20004770 	.word	0x20004770

08001aa8 <extPoseHandler>:

static void extPoseHandler(const CRTPPacket* pk) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  const struct CrtpExtPose* data = (const struct CrtpExtPose*)&pk->data[1];
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3303      	adds	r3, #3
 8001ab4:	60fb      	str	r3, [r7, #12]

  ext_pose.x = data->x;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <extPoseHandler+0x70>)
 8001abc:	6013      	str	r3, [r2, #0]
  ext_pose.y = data->y;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <extPoseHandler+0x70>)
 8001ac4:	6053      	str	r3, [r2, #4]
  ext_pose.z = data->z;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <extPoseHandler+0x70>)
 8001acc:	6093      	str	r3, [r2, #8]
  ext_pose.quat.x = data->qx;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <extPoseHandler+0x70>)
 8001ad4:	60d3      	str	r3, [r2, #12]
  ext_pose.quat.y = data->qy;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <extPoseHandler+0x70>)
 8001adc:	6113      	str	r3, [r2, #16]
  ext_pose.quat.z = data->qz;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <extPoseHandler+0x70>)
 8001ae4:	6153      	str	r3, [r2, #20]
  ext_pose.quat.w = data->qw;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <extPoseHandler+0x70>)
 8001aec:	6193      	str	r3, [r2, #24]
  ext_pose.stdDevPos = extPosStdDev;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <extPoseHandler+0x74>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <extPoseHandler+0x70>)
 8001af4:	61d3      	str	r3, [r2, #28]
  ext_pose.stdDevQuat = extQuatStdDev;
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <extPoseHandler+0x78>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <extPoseHandler+0x70>)
 8001afc:	6213      	str	r3, [r2, #32]

  estimatorEnqueuePose(&ext_pose);
 8001afe:	4806      	ldr	r0, [pc, #24]	; (8001b18 <extPoseHandler+0x70>)
 8001b00:	f7ff feb1 	bl	8001866 <estimatorEnqueuePose>
  tickOfLastPacket = xTaskGetTickCount();
 8001b04:	f012 fb7e 	bl	8014204 <xTaskGetTickCount>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <extPoseHandler+0x7c>)
 8001b0e:	801a      	strh	r2, [r3, #0]
}
 8001b10:	bf00      	nop
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20004748 	.word	0x20004748
 8001b1c:	20000050 	.word	0x20000050
 8001b20:	20000054 	.word	0x20000054
 8001b24:	20004770 	.word	0x20004770

08001b28 <extPosePackedHandler>:

static void extPosePackedHandler(const CRTPPacket* pk) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint8_t numItems = (pk->size - 1) / sizeof(extPosePackedItem);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b51      	ldr	r3, [pc, #324]	; (8001c80 <extPosePackedHandler+0x158>)
 8001b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b3e:	08db      	lsrs	r3, r3, #3
 8001b40:	73bb      	strb	r3, [r7, #14]
  for (uint8_t i = 0; i < numItems; ++i) {
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	e090      	b.n	8001c6a <extPosePackedHandler+0x142>
    const extPosePackedItem* item = (const extPosePackedItem*)&pk->data[1 + i * sizeof(extPosePackedItem)];
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	3301      	adds	r3, #1
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	60bb      	str	r3, [r7, #8]
    if (item->id == my_id) {
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	4b48      	ldr	r3, [pc, #288]	; (8001c84 <extPosePackedHandler+0x15c>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d145      	bne.n	8001bf6 <extPosePackedHandler+0xce>
      ext_pose.x = item->x / 1000.0f;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001c88 <extPosePackedHandler+0x160>
 8001b7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b82:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <extPosePackedHandler+0x164>)
 8001b84:	edc3 7a00 	vstr	s15, [r3]
      ext_pose.y = item->y / 1000.0f;
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	ee07 3a90 	vmov	s15, r3
 8001b94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b98:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001c88 <extPosePackedHandler+0x160>
 8001b9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <extPosePackedHandler+0x164>)
 8001ba2:	edc3 7a01 	vstr	s15, [r3, #4]
      ext_pose.z = item->z / 1000.0f;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	ee07 3a90 	vmov	s15, r3
 8001bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb6:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001c88 <extPosePackedHandler+0x160>
 8001bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <extPosePackedHandler+0x164>)
 8001bc0:	edc3 7a02 	vstr	s15, [r3, #8]
      quatdecompress(item->quat, (float *)&ext_pose.quat.q0);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001bca:	4931      	ldr	r1, [pc, #196]	; (8001c90 <extPosePackedHandler+0x168>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fe63 	bl	8001898 <quatdecompress>
      ext_pose.stdDevPos = extPosStdDev;
 8001bd2:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <extPosePackedHandler+0x16c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <extPosePackedHandler+0x164>)
 8001bd8:	61d3      	str	r3, [r2, #28]
      ext_pose.stdDevQuat = extQuatStdDev;
 8001bda:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <extPosePackedHandler+0x170>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <extPosePackedHandler+0x164>)
 8001be0:	6213      	str	r3, [r2, #32]
      estimatorEnqueuePose(&ext_pose);
 8001be2:	482a      	ldr	r0, [pc, #168]	; (8001c8c <extPosePackedHandler+0x164>)
 8001be4:	f7ff fe3f 	bl	8001866 <estimatorEnqueuePose>
      tickOfLastPacket = xTaskGetTickCount();
 8001be8:	f012 fb0c 	bl	8014204 <xTaskGetTickCount>
 8001bec:	4603      	mov	r3, r0
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <extPosePackedHandler+0x174>)
 8001bf2:	801a      	strh	r2, [r3, #0]
 8001bf4:	e036      	b.n	8001c64 <extPosePackedHandler+0x13c>
    } else {
      ext_pos.x = item->x / 1000.0f;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c06:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001c88 <extPosePackedHandler+0x160>
 8001c0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <extPosePackedHandler+0x178>)
 8001c10:	edc3 7a00 	vstr	s15, [r3]
      ext_pos.y = item->y / 1000.0f;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c24:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001c88 <extPosePackedHandler+0x160>
 8001c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <extPosePackedHandler+0x178>)
 8001c2e:	edc3 7a01 	vstr	s15, [r3, #4]
      ext_pos.z = item->z / 1000.0f;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c42:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001c88 <extPosePackedHandler+0x160>
 8001c46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <extPosePackedHandler+0x178>)
 8001c4c:	edc3 7a02 	vstr	s15, [r3, #8]
      ext_pos.stdDev = extPosStdDev;
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <extPosePackedHandler+0x16c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <extPosePackedHandler+0x178>)
 8001c56:	60d3      	str	r3, [r2, #12]
      peerLocalizationTellPosition(item->id, &ext_pos);
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4910      	ldr	r1, [pc, #64]	; (8001ca0 <extPosePackedHandler+0x178>)
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fa82 	bl	8001168 <peerLocalizationTellPosition>
  for (uint8_t i = 0; i < numItems; ++i) {
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	3301      	adds	r3, #1
 8001c68:	73fb      	strb	r3, [r7, #15]
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	7bbb      	ldrb	r3, [r7, #14]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	f4ff af6a 	bcc.w	8001b48 <extPosePackedHandler+0x20>
    }
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	ba2e8ba3 	.word	0xba2e8ba3
 8001c84:	2000476f 	.word	0x2000476f
 8001c88:	447a0000 	.word	0x447a0000
 8001c8c:	20004748 	.word	0x20004748
 8001c90:	20004754 	.word	0x20004754
 8001c94:	20000050 	.word	0x20000050
 8001c98:	20000054 	.word	0x20000054
 8001c9c:	20004770 	.word	0x20004770
 8001ca0:	20004734 	.word	0x20004734

08001ca4 <lpsShortLppPacketHandler>:

static void lpsShortLppPacketHandler(CRTPPacket* pk) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  bool success = false;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]
  if (pk->size >= 2) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d918      	bls.n	8001cea <lpsShortLppPacketHandler+0x46>
#ifdef CONFIG_DECK_LOCO
//    bool success = lpsSendLppShort(pk->data[1], &pk->data[2], pk->size-2);
#else
    bool success = false;
#endif
    pk->port = CRTP_PORT_LOCALIZATION;
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	7853      	ldrb	r3, [r2, #1]
 8001cbc:	2106      	movs	r1, #6
 8001cbe:	f361 1307 	bfi	r3, r1, #4, #4
 8001cc2:	7053      	strb	r3, [r2, #1]
    pk->channel = GENERIC_TYPE;
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	7853      	ldrb	r3, [r2, #1]
 8001cc8:	2101      	movs	r1, #1
 8001cca:	f361 0301 	bfi	r3, r1, #0, #2
 8001cce:	7053      	strb	r3, [r2, #1]
    pk->size = 3;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	701a      	strb	r2, [r3, #0]
    pk->data[0] = LPS_SHORT_LPP_PACKET;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	709a      	strb	r2, [r3, #2]
    pk->data[2] = success?1:0;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	711a      	strb	r2, [r3, #4]
    // This is best effort, i.e. the blocking version is not needed
    crtpSendPacket(pk);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff fc9b 	bl	8001620 <crtpSendPacket>
  }
}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <lhPersistDataWorker>:
    uint16_t calibrationDataBsField;
  } __attribute__((packed));
  uint32_t combinedField;
} __attribute__((packed)) LhPersistArgs_t;

static void lhPersistDataWorker(void* arg) {
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b08e      	sub	sp, #56	; 0x38
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_DECK_LIGHTHOUSE
  LhPersistArgs_t* args = (LhPersistArgs_t*) &arg;
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30

  bool result = true;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  for (int baseStation = 0; baseStation < CONFIG_DECK_LIGHTHOUSE_MAX_N_BS; baseStation++) {
 8001d04:	2300      	movs	r3, #0
 8001d06:	637b      	str	r3, [r7, #52]	; 0x34
 8001d08:	e01f      	b.n	8001d4a <lhPersistDataWorker+0x58>
    uint16_t mask = 1 << baseStation;
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	85bb      	strh	r3, [r7, #44]	; 0x2c
    bool storeGeo = (args->geoDataBsField & mask) != 0;
 8001d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf14      	ite	ne
 8001d24:	2301      	movne	r3, #1
 8001d26:	2300      	moveq	r3, #0
 8001d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    bool storeCalibration = (args->calibrationDataBsField & mask) != 0;
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2e:	885b      	ldrh	r3, [r3, #2]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001d34:	4013      	ands	r3, r2
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  for (int baseStation = 0; baseStation < CONFIG_DECK_LIGHTHOUSE_MAX_N_BS; baseStation++) {
 8001d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d46:	3301      	adds	r3, #1
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	dddc      	ble.n	8001d0a <lhPersistDataWorker+0x18>

  }
#else
  bool result = false;
#endif
  CRTPPacket response = {
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	2220      	movs	r2, #32
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f015 fdc5 	bl	80178e8 <memset>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	723b      	strb	r3, [r7, #8]
 8001d62:	7a7b      	ldrb	r3, [r7, #9]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f362 0301 	bfi	r3, r2, #0, #2
 8001d6a:	727b      	strb	r3, [r7, #9]
 8001d6c:	7a7b      	ldrb	r3, [r7, #9]
 8001d6e:	2206      	movs	r2, #6
 8001d70:	f362 1307 	bfi	r3, r2, #4, #4
 8001d74:	727b      	strb	r3, [r7, #9]
 8001d76:	230b      	movs	r3, #11
 8001d78:	72bb      	strb	r3, [r7, #10]
 8001d7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d7e:	72fb      	strb	r3, [r7, #11]
    .channel = GENERIC_TYPE,
    .size = 2,
    .data = {LH_PERSIST_DATA, result}
  };

  crtpSendPacketBlock(&response);
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fc75 	bl	8001674 <crtpSendPacketBlock>
}
 8001d8a:	bf00      	nop
 8001d8c:	3738      	adds	r7, #56	; 0x38
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <lhPersistDataHandler>:

static void lhPersistDataHandler(CRTPPacket* pk) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if (pk->size >= (1 + sizeof(LhPersistArgs_t))) {
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d908      	bls.n	8001db6 <lhPersistDataHandler+0x22>
    LhPersistArgs_t* args = (LhPersistArgs_t*) &pk->data[1];
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3303      	adds	r3, #3
 8001da8:	60fb      	str	r3, [r7, #12]
    workerSchedule(lhPersistDataWorker, (void*)args->combinedField);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4619      	mov	r1, r3
 8001db0:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <lhPersistDataHandler+0x2c>)
 8001db2:	f006 fd3f 	bl	8008834 <workerSchedule>
  }
}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	08001cf3 	.word	0x08001cf3

08001dc4 <genericLocHandle>:

static void genericLocHandle(CRTPPacket* pk)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  const uint8_t type = pk->data[0];
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	789b      	ldrb	r3, [r3, #2]
 8001dd0:	73fb      	strb	r3, [r7, #15]
  if (pk->size < 1) return;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d034      	beq.n	8001e44 <genericLocHandle+0x80>

  switch (type) {
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	3b02      	subs	r3, #2
 8001dde:	2b09      	cmp	r3, #9
 8001de0:	d832      	bhi.n	8001e48 <genericLocHandle+0x84>
 8001de2:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <genericLocHandle+0x24>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001e11 	.word	0x08001e11
 8001dec:	08001e19 	.word	0x08001e19
 8001df0:	08001e21 	.word	0x08001e21
 8001df4:	08001e49 	.word	0x08001e49
 8001df8:	08001e49 	.word	0x08001e49
 8001dfc:	08001e49 	.word	0x08001e49
 8001e00:	08001e2d 	.word	0x08001e2d
 8001e04:	08001e35 	.word	0x08001e35
 8001e08:	08001e49 	.word	0x08001e49
 8001e0c:	08001e3d 	.word	0x08001e3d
    case LPS_SHORT_LPP_PACKET:
      lpsShortLppPacketHandler(pk);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff47 	bl	8001ca4 <lpsShortLppPacketHandler>
      break;
 8001e16:	e018      	b.n	8001e4a <genericLocHandle+0x86>
    case EMERGENCY_STOP:
      isEmergencyStopRequested = true;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <genericLocHandle+0x8c>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
      break;
 8001e1e:	e014      	b.n	8001e4a <genericLocHandle+0x86>
    case EMERGENCY_STOP_WATCHDOG:
      emergencyStopWatchdogNotificationTick = xTaskGetTickCount();
 8001e20:	f012 f9f0 	bl	8014204 <xTaskGetTickCount>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <genericLocHandle+0x90>)
 8001e28:	6013      	str	r3, [r2, #0]
      break;
 8001e2a:	e00e      	b.n	8001e4a <genericLocHandle+0x86>
    case EXT_POSE:
      extPoseHandler(pk);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fe3b 	bl	8001aa8 <extPoseHandler>
      break;
 8001e32:	e00a      	b.n	8001e4a <genericLocHandle+0x86>
    case EXT_POSE_PACKED:
      extPosePackedHandler(pk);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff fe77 	bl	8001b28 <extPosePackedHandler>
      break;
 8001e3a:	e006      	b.n	8001e4a <genericLocHandle+0x86>
    case LH_PERSIST_DATA:
      lhPersistDataHandler(pk);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ffa9 	bl	8001d94 <lhPersistDataHandler>
      break;
 8001e42:	e002      	b.n	8001e4a <genericLocHandle+0x86>
  if (pk->size < 1) return;
 8001e44:	bf00      	nop
 8001e46:	e000      	b.n	8001e4a <genericLocHandle+0x86>
    default:
      // Nothing here
      break;
 8001e48:	bf00      	nop
  }
}
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20004772 	.word	0x20004772
 8001e54:	20004774 	.word	0x20004774

08001e58 <extPositionPackedHandler>:

static void extPositionPackedHandler(CRTPPacket* pk)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint8_t numItems = pk->size / sizeof(extPositionPackedItem);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <extPositionPackedHandler+0xe4>)
 8001e66:	fba3 1302 	umull	r1, r3, r3, r2
 8001e6a:	1ad2      	subs	r2, r2, r3
 8001e6c:	0852      	lsrs	r2, r2, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	73bb      	strb	r3, [r7, #14]
  for (uint8_t i = 0; i < numItems; ++i) {
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	e056      	b.n	8001f28 <extPositionPackedHandler+0xd0>
    const extPositionPackedItem* item = (const extPositionPackedItem*)&pk->data[i * sizeof(extPositionPackedItem)];
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	3302      	adds	r3, #2
 8001e88:	60bb      	str	r3, [r7, #8]
    ext_pos.x = item->x / 1000.0f;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e9a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001f40 <extPositionPackedHandler+0xe8>
 8001e9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <extPositionPackedHandler+0xec>)
 8001ea4:	edc3 7a00 	vstr	s15, [r3]
    ext_pos.y = item->y / 1000.0f;
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	ee07 3a90 	vmov	s15, r3
 8001eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001f40 <extPositionPackedHandler+0xe8>
 8001ebc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <extPositionPackedHandler+0xec>)
 8001ec2:	edc3 7a01 	vstr	s15, [r3, #4]
    ext_pos.z = item->z / 1000.0f;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001f40 <extPositionPackedHandler+0xe8>
 8001eda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <extPositionPackedHandler+0xec>)
 8001ee0:	edc3 7a02 	vstr	s15, [r3, #8]
    ext_pos.stdDev = extPosStdDev;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <extPositionPackedHandler+0xf0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <extPositionPackedHandler+0xec>)
 8001eea:	60d3      	str	r3, [r2, #12]
    ext_pos.source = MeasurementSourceLocationService;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <extPositionPackedHandler+0xec>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	741a      	strb	r2, [r3, #16]
    if (item->id == my_id) {
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <extPositionPackedHandler+0xf4>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d10b      	bne.n	8001f16 <extPositionPackedHandler+0xbe>
      updateLogFromExtPos();
 8001efe:	f7ff fd8b 	bl	8001a18 <updateLogFromExtPos>
      estimatorEnqueuePosition(&ext_pos);
 8001f02:	4810      	ldr	r0, [pc, #64]	; (8001f44 <extPositionPackedHandler+0xec>)
 8001f04:	f7ff fc98 	bl	8001838 <estimatorEnqueuePosition>
      tickOfLastPacket = xTaskGetTickCount();
 8001f08:	f012 f97c 	bl	8014204 <xTaskGetTickCount>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <extPositionPackedHandler+0xf8>)
 8001f12:	801a      	strh	r2, [r3, #0]
 8001f14:	e005      	b.n	8001f22 <extPositionPackedHandler+0xca>
    }
    else {
      peerLocalizationTellPosition(item->id, &ext_pos);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	490a      	ldr	r1, [pc, #40]	; (8001f44 <extPositionPackedHandler+0xec>)
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f923 	bl	8001168 <peerLocalizationTellPosition>
  for (uint8_t i = 0; i < numItems; ++i) {
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	3301      	adds	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	7bbb      	ldrb	r3, [r7, #14]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3a4      	bcc.n	8001e7a <extPositionPackedHandler+0x22>
    }
  }
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	24924925 	.word	0x24924925
 8001f40:	447a0000 	.word	0x447a0000
 8001f44:	20004734 	.word	0x20004734
 8001f48:	20000050 	.word	0x20000050
 8001f4c:	2000476f 	.word	0x2000476f
 8001f50:	20004770 	.word	0x20004770

08001f54 <crtpserviceInit>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpSrvTask, CRTP_SRV_TASK_STACKSIZE);

static void crtpSrvTask(void*);

void crtpserviceInit(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af04      	add	r7, sp, #16
  if (isInit)
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <crtpserviceInit+0x38>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d110      	bne.n	8001f84 <crtpserviceInit+0x30>
    return;

  //Start the task
  STATIC_MEM_TASK_CREATE(crtpSrvTask, crtpSrvTask, CRTP_SRV_TASK_NAME, NULL, CRTP_SRV_TASK_PRI);
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <crtpserviceInit+0x3c>)
 8001f68:	9302      	str	r3, [sp, #8]
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <crtpserviceInit+0x40>)
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2300      	movs	r3, #0
 8001f74:	4908      	ldr	r1, [pc, #32]	; (8001f98 <crtpserviceInit+0x44>)
 8001f76:	4809      	ldr	r0, [pc, #36]	; (8001f9c <crtpserviceInit+0x48>)
 8001f78:	f011 fdce 	bl	8013b18 <xTaskCreateStatic>

  isInit = true;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <crtpserviceInit+0x38>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	e000      	b.n	8001f86 <crtpserviceInit+0x32>
    return;
 8001f84:	bf00      	nop
}
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20004778 	.word	0x20004778
 8001f90:	20001030 	.word	0x20001030
 8001f94:	20000e30 	.word	0x20000e30
 8001f98:	08019fc0 	.word	0x08019fc0
 8001f9c:	08001fa1 	.word	0x08001fa1

08001fa0 <crtpSrvTask>:
{
  return isInit;
}

static void crtpSrvTask(void* prm)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  static CRTPPacket p;

  crtpInitTaskQueue(CRTP_PORT_LINK);
 8001fa8:	200f      	movs	r0, #15
 8001faa:	f7ff fa33 	bl	8001414 <crtpInitTaskQueue>

  while(1) {
    crtpReceivePacketBlock(CRTP_PORT_LINK, &p);
 8001fae:	491f      	ldr	r1, [pc, #124]	; (800202c <crtpSrvTask+0x8c>)
 8001fb0:	200f      	movs	r0, #15
 8001fb2:	f7ff fa5f 	bl	8001474 <crtpReceivePacketBlock>

    switch (p.channel)
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <crtpSrvTask+0x8c>)
 8001fb8:	785b      	ldrb	r3, [r3, #1]
 8001fba:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d02f      	beq.n	8002024 <crtpSrvTask+0x84>
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	dc2f      	bgt.n	8002028 <crtpSrvTask+0x88>
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <crtpSrvTask+0x32>
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d00d      	beq.n	8001fec <crtpSrvTask+0x4c>
        break;
      case linkSink:
        /* Ignore packet */
        break;
      default:
        break;
 8001fd0:	e02a      	b.n	8002028 <crtpSrvTask+0x88>
        if (echoDelay > 0) {
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <crtpSrvTask+0x90>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d004      	beq.n	8001fe4 <crtpSrvTask+0x44>
          vTaskDelay(M2T(echoDelay));
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <crtpSrvTask+0x90>)
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f011 ff52 	bl	8013e88 <vTaskDelay>
        crtpSendPacketBlock(&p);
 8001fe4:	4811      	ldr	r0, [pc, #68]	; (800202c <crtpSrvTask+0x8c>)
 8001fe6:	f7ff fb45 	bl	8001674 <crtpSendPacketBlock>
        break;
 8001fea:	e01e      	b.n	800202a <crtpSrvTask+0x8a>
        p.size = CRTP_MAX_DATA_SIZE;
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <crtpSrvTask+0x8c>)
 8001fee:	221e      	movs	r2, #30
 8001ff0:	701a      	strb	r2, [r3, #0]
        bzero(p.data, CRTP_MAX_DATA_SIZE);
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <crtpSrvTask+0x94>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	231e      	movs	r3, #30
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	f015 fc74 	bl	80178e8 <memset>
        strcpy((char*)p.data, "Bitcraze Crazyflie");
 8002000:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <crtpSrvTask+0x94>)
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <crtpSrvTask+0x98>)
 8002004:	4615      	mov	r5, r2
 8002006:	461c      	mov	r4, r3
 8002008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200a:	6028      	str	r0, [r5, #0]
 800200c:	6069      	str	r1, [r5, #4]
 800200e:	60aa      	str	r2, [r5, #8]
 8002010:	60eb      	str	r3, [r5, #12]
 8002012:	8823      	ldrh	r3, [r4, #0]
 8002014:	78a2      	ldrb	r2, [r4, #2]
 8002016:	822b      	strh	r3, [r5, #16]
 8002018:	4613      	mov	r3, r2
 800201a:	74ab      	strb	r3, [r5, #18]
        crtpSendPacketBlock(&p);
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <crtpSrvTask+0x8c>)
 800201e:	f7ff fb29 	bl	8001674 <crtpSendPacketBlock>
        break;
 8002022:	e002      	b.n	800202a <crtpSrvTask+0x8a>
        break;
 8002024:	bf00      	nop
 8002026:	e7c2      	b.n	8001fae <crtpSrvTask+0xe>
        break;
 8002028:	bf00      	nop
    crtpReceivePacketBlock(CRTP_PORT_LINK, &p);
 800202a:	e7c0      	b.n	8001fae <crtpSrvTask+0xe>
 800202c:	2000477c 	.word	0x2000477c
 8002030:	2000477a 	.word	0x2000477a
 8002034:	2000477e 	.word	0x2000477e
 8002038:	08019fcc 	.word	0x08019fcc

0800203c <platformserviceInit>:
static void platformSrvTask(void*);
static void platformCommandProcess(CRTPPacket *p);
static void versionCommandProcess(CRTPPacket *p);

void platformserviceInit(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af04      	add	r7, sp, #16
  if (isInit)
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <platformserviceInit+0x3c>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d112      	bne.n	8002070 <platformserviceInit+0x34>
    return;

  appchannelInit();
 800204a:	f7ff f8f3 	bl	8001234 <appchannelInit>

  //Start the task
  STATIC_MEM_TASK_CREATE(platformSrvTask, platformSrvTask, PLATFORM_SRV_TASK_NAME, NULL, PLATFORM_SRV_TASK_PRI);
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	461a      	mov	r2, r3
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <platformserviceInit+0x40>)
 8002054:	9302      	str	r3, [sp, #8]
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <platformserviceInit+0x44>)
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	2300      	movs	r3, #0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	4908      	ldr	r1, [pc, #32]	; (8002084 <platformserviceInit+0x48>)
 8002062:	4809      	ldr	r0, [pc, #36]	; (8002088 <platformserviceInit+0x4c>)
 8002064:	f011 fd58 	bl	8013b18 <xTaskCreateStatic>

  isInit = true;
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <platformserviceInit+0x3c>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e000      	b.n	8002072 <platformserviceInit+0x36>
    return;
 8002070:	bf00      	nop
}
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000479c 	.word	0x2000479c
 800207c:	200012e8 	.word	0x200012e8
 8002080:	200010e8 	.word	0x200010e8
 8002084:	0801a004 	.word	0x0801a004
 8002088:	0800208d 	.word	0x0800208d

0800208c <platformSrvTask>:
{
  return isInit;
}

static void platformSrvTask(void* prm)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  static CRTPPacket p;

  crtpInitTaskQueue(CRTP_PORT_PLATFORM);
 8002094:	200d      	movs	r0, #13
 8002096:	f7ff f9bd 	bl	8001414 <crtpInitTaskQueue>

  while(1) {
    crtpReceivePacketBlock(CRTP_PORT_PLATFORM, &p);
 800209a:	4911      	ldr	r1, [pc, #68]	; (80020e0 <platformSrvTask+0x54>)
 800209c:	200d      	movs	r0, #13
 800209e:	f7ff f9e9 	bl	8001474 <crtpReceivePacketBlock>

    switch (p.channel)
 80020a2:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <platformSrvTask+0x54>)
 80020a4:	785b      	ldrb	r3, [r3, #1]
 80020a6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d011      	beq.n	80020d4 <platformSrvTask+0x48>
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	dc13      	bgt.n	80020dc <platformSrvTask+0x50>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <platformSrvTask+0x32>
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d007      	beq.n	80020cc <platformSrvTask+0x40>
        break;
      case appChannel:
        appchannelIncomingPacket(&p);
        break;
      default:
        break;
 80020bc:	e00e      	b.n	80020dc <platformSrvTask+0x50>
        platformCommandProcess(&p);
 80020be:	4808      	ldr	r0, [pc, #32]	; (80020e0 <platformSrvTask+0x54>)
 80020c0:	f000 f810 	bl	80020e4 <platformCommandProcess>
        crtpSendPacketBlock(&p);
 80020c4:	4806      	ldr	r0, [pc, #24]	; (80020e0 <platformSrvTask+0x54>)
 80020c6:	f7ff fad5 	bl	8001674 <crtpSendPacketBlock>
        break;
 80020ca:	e008      	b.n	80020de <platformSrvTask+0x52>
        versionCommandProcess(&p);
 80020cc:	4804      	ldr	r0, [pc, #16]	; (80020e0 <platformSrvTask+0x54>)
 80020ce:	f000 f839 	bl	8002144 <versionCommandProcess>
        break;
 80020d2:	e004      	b.n	80020de <platformSrvTask+0x52>
        appchannelIncomingPacket(&p);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <platformSrvTask+0x54>)
 80020d6:	f7ff f8c9 	bl	800126c <appchannelIncomingPacket>
        break;
 80020da:	e000      	b.n	80020de <platformSrvTask+0x52>
        break;
 80020dc:	bf00      	nop
    crtpReceivePacketBlock(CRTP_PORT_PLATFORM, &p);
 80020de:	e7dc      	b.n	800209a <platformSrvTask+0xe>
 80020e0:	200047a0 	.word	0x200047a0

080020e4 <platformCommandProcess>:
    }
  }
}

static void platformCommandProcess(CRTPPacket *p)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint8_t command = p->data[0];
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	789b      	ldrb	r3, [r3, #2]
 80020f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *data = &p->data[1];
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3303      	adds	r3, #3
 80020f6:	613b      	str	r3, [r7, #16]

  switch (command) {
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <platformCommandProcess+0x20>
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d00e      	beq.n	8002120 <platformCommandProcess+0x3c>
//      data[1] = supervisorIsArmed();
      p->size = 2;
      break;
    }
    default:
      break;
 8002102:	e018      	b.n	8002136 <platformCommandProcess+0x52>
      slp.type = SYSLINK_RADIO_CONTWAVE;
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <platformCommandProcess+0x5c>)
 8002106:	2203      	movs	r2, #3
 8002108:	701a      	strb	r2, [r3, #0]
      slp.length = 1;
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <platformCommandProcess+0x5c>)
 800210c:	2201      	movs	r2, #1
 800210e:	705a      	strb	r2, [r3, #1]
      slp.data[0] = data[0];
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <platformCommandProcess+0x5c>)
 8002116:	709a      	strb	r2, [r3, #2]
      syslinkSendPacket(&slp);
 8002118:	4809      	ldr	r0, [pc, #36]	; (8002140 <platformCommandProcess+0x5c>)
 800211a:	f000 fa99 	bl	8002650 <syslinkSendPacket>
      break;
 800211e:	e00a      	b.n	8002136 <platformCommandProcess+0x52>
      const bool doArm = data[0];
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf14      	ite	ne
 8002128:	2301      	movne	r3, #1
 800212a:	2300      	moveq	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
      p->size = 2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2202      	movs	r2, #2
 8002132:	701a      	strb	r2, [r3, #0]
      break;
 8002134:	bf00      	nop
  }
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200047c0 	.word	0x200047c0

08002144 <versionCommandProcess>:
  p->channel = appChannel;
  return crtpSendPacketBlock(p);
}

static void versionCommandProcess(CRTPPacket *p)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  switch (p->data[0]) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	789b      	ldrb	r3, [r3, #2]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d032      	beq.n	80021ba <versionCommandProcess+0x76>
 8002154:	2b02      	cmp	r3, #2
 8002156:	dc4f      	bgt.n	80021f8 <versionCommandProcess+0xb4>
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <versionCommandProcess+0x1e>
 800215c:	2b01      	cmp	r3, #1
 800215e:	d00b      	beq.n	8002178 <versionCommandProcess+0x34>
      p->size = (strlen(name)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(name)+1;
      crtpSendPacketBlock(p);
      }
      break;
    default:
      break;
 8002160:	e04a      	b.n	80021f8 <versionCommandProcess+0xb4>
      *(int*)&p->data[1] = CRTP_PROTOCOL_VERSION;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3303      	adds	r3, #3
 8002166:	2207      	movs	r2, #7
 8002168:	601a      	str	r2, [r3, #0]
      p->size = 5;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2205      	movs	r2, #5
 800216e:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fa7f 	bl	8001674 <crtpSendPacketBlock>
      break;
 8002176:	e040      	b.n	80021fa <versionCommandProcess+0xb6>
      strncpy((char*)&p->data[1], V_STAG, CRTP_MAX_DATA_SIZE-1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3303      	adds	r3, #3
 800217c:	4a21      	ldr	r2, [pc, #132]	; (8002204 <versionCommandProcess+0xc0>)
 800217e:	6811      	ldr	r1, [r2, #0]
 8002180:	221d      	movs	r2, #29
 8002182:	4618      	mov	r0, r3
 8002184:	f015 fbd4 	bl	8017930 <strncpy>
      p->size = (strlen(V_STAG)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(V_STAG)+1;
 8002188:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <versionCommandProcess+0xc0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f87f 	bl	8000290 <strlen>
 8002192:	4603      	mov	r3, r0
 8002194:	2b1d      	cmp	r3, #29
 8002196:	d809      	bhi.n	80021ac <versionCommandProcess+0x68>
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <versionCommandProcess+0xc0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f877 	bl	8000290 <strlen>
 80021a2:	4603      	mov	r3, r0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	e000      	b.n	80021ae <versionCommandProcess+0x6a>
 80021ac:	221e      	movs	r2, #30
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fa5e 	bl	8001674 <crtpSendPacketBlock>
      break;
 80021b8:	e01f      	b.n	80021fa <versionCommandProcess+0xb6>
      const char* name = platformConfigGetDeviceTypeName();
 80021ba:	f002 faad 	bl	8004718 <platformConfigGetDeviceTypeName>
 80021be:	60f8      	str	r0, [r7, #12]
      strncpy((char*)&p->data[1], name, CRTP_MAX_DATA_SIZE-1);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3303      	adds	r3, #3
 80021c4:	221d      	movs	r2, #29
 80021c6:	68f9      	ldr	r1, [r7, #12]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f015 fbb1 	bl	8017930 <strncpy>
      p->size = (strlen(name)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(name)+1;
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f7fe f85e 	bl	8000290 <strlen>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b1d      	cmp	r3, #29
 80021d8:	d807      	bhi.n	80021ea <versionCommandProcess+0xa6>
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f7fe f858 	bl	8000290 <strlen>
 80021e0:	4603      	mov	r3, r0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	e000      	b.n	80021ec <versionCommandProcess+0xa8>
 80021ea:	221e      	movs	r2, #30
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fa3f 	bl	8001674 <crtpSendPacketBlock>
      break;
 80021f6:	e000      	b.n	80021fa <versionCommandProcess+0xb6>
      break;
 80021f8:	bf00      	nop
  }
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000033c 	.word	0x2000033c

08002208 <radiolinkIsConnected>:
static bool isConnected;
static uint32_t lastPacketTick;

static volatile P2PCallback p2p_callback;

static bool radiolinkIsConnected(void) {
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  return (xTaskGetTickCount() - lastPacketTick) < M2T(RADIO_ACTIVITY_TIMEOUT_MS);
 800220c:	f011 fffa 	bl	8014204 <xTaskGetTickCount>
 8002210:	4602      	mov	r2, r0
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <radiolinkIsConnected+0x24>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f240 32e7 	movw	r2, #999	; 0x3e7
 800221c:	4293      	cmp	r3, r2
 800221e:	bf94      	ite	ls
 8002220:	2301      	movls	r3, #1
 8002222:	2300      	movhi	r3, #0
 8002224:	b2db      	uxtb	r3, r3
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20004810 	.word	0x20004810

08002230 <radiolinkInit>:
  .receivePacket     = radiolinkReceiveCRTPPacket,
  .isConnected       = radiolinkIsConnected
};

void radiolinkInit(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af02      	add	r7, sp, #8
  if (isInit)
 8002236:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <radiolinkInit+0x84>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d136      	bne.n	80022ac <radiolinkInit+0x7c>
    return;

  txQueue = STATIC_MEM_QUEUE_CREATE(txQueue);
 800223e:	2301      	movs	r3, #1
 8002240:	4618      	mov	r0, r3
 8002242:	2342      	movs	r3, #66	; 0x42
 8002244:	4619      	mov	r1, r3
 8002246:	2300      	movs	r3, #0
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <radiolinkInit+0x88>)
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <radiolinkInit+0x8c>)
 800224e:	f010 fe2d 	bl	8012eac <xQueueGenericCreateStatic>
 8002252:	4603      	mov	r3, r0
 8002254:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <radiolinkInit+0x90>)
 8002256:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <radiolinkInit+0x90>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <radiolinkInit+0x94>)
 800225e:	491a      	ldr	r1, [pc, #104]	; (80022c8 <radiolinkInit+0x98>)
 8002260:	4618      	mov	r0, r3
 8002262:	f006 f82b 	bl	80082bc <qmRegisterQueue>
  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 8002266:	2305      	movs	r3, #5
 8002268:	4618      	mov	r0, r3
 800226a:	2320      	movs	r3, #32
 800226c:	4619      	mov	r1, r3
 800226e:	2300      	movs	r3, #0
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <radiolinkInit+0x9c>)
 8002274:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <radiolinkInit+0xa0>)
 8002276:	f010 fe19 	bl	8012eac <xQueueGenericCreateStatic>
 800227a:	4603      	mov	r3, r0
 800227c:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <radiolinkInit+0xa4>)
 800227e:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <radiolinkInit+0xa4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <radiolinkInit+0xa8>)
 8002286:	4910      	ldr	r1, [pc, #64]	; (80022c8 <radiolinkInit+0x98>)
 8002288:	4618      	mov	r0, r3
 800228a:	f006 f817 	bl	80082bc <qmRegisterQueue>

  ASSERT(crtpPacketDelivery);
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <radiolinkInit+0xa4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d104      	bne.n	80022a0 <radiolinkInit+0x70>
 8002296:	225f      	movs	r2, #95	; 0x5f
 8002298:	490b      	ldr	r1, [pc, #44]	; (80022c8 <radiolinkInit+0x98>)
 800229a:	480f      	ldr	r0, [pc, #60]	; (80022d8 <radiolinkInit+0xa8>)
 800229c:	f003 f90a 	bl	80054b4 <assertFail>

  syslinkInit();
 80022a0:	f000 f97a 	bl	8002598 <syslinkInit>

//  radiolinkSetChannel(configblockGetRadioChannel());
//  radiolinkSetDatarate(configblockGetRadioSpeed());
//  radiolinkSetAddress(configblockGetRadioAddress());

  isInit = true;
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <radiolinkInit+0x84>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e000      	b.n	80022ae <radiolinkInit+0x7e>
    return;
 80022ac:	bf00      	nop
}
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	2000480c 	.word	0x2000480c
 80022b8:	200013e4 	.word	0x200013e4
 80022bc:	200013a0 	.word	0x200013a0
 80022c0:	20004804 	.word	0x20004804
 80022c4:	0801a014 	.word	0x0801a014
 80022c8:	0801a01c 	.word	0x0801a01c
 80022cc:	200014d4 	.word	0x200014d4
 80022d0:	20001434 	.word	0x20001434
 80022d4:	20004808 	.word	0x20004808
 80022d8:	0801a03c 	.word	0x0801a03c

080022dc <radiolinkSyslinkDispatch>:
  syslinkSendPacket(&slp);
}


void radiolinkSyslinkDispatch(SyslinkPacket *slp)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b092      	sub	sp, #72	; 0x48
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  static SyslinkPacket txPacket;

  if (slp->type == SYSLINK_RADIO_RAW || slp->type == SYSLINK_RADIO_RAW_BROADCAST) {
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <radiolinkSyslinkDispatch+0x18>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d104      	bne.n	80022fe <radiolinkSyslinkDispatch+0x22>
    lastPacketTick = xTaskGetTickCount();
 80022f4:	f011 ff86 	bl	8014204 <xTaskGetTickCount>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4a41      	ldr	r2, [pc, #260]	; (8002400 <radiolinkSyslinkDispatch+0x124>)
 80022fc:	6013      	str	r3, [r2, #0]
  }

  if (slp->type == SYSLINK_RADIO_RAW)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d129      	bne.n	800235a <radiolinkSyslinkDispatch+0x7e>
  {
    slp->length--; // Decrease to get CRTP size.
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	785b      	ldrb	r3, [r3, #1]
 800230a:	3b01      	subs	r3, #1
 800230c:	b2da      	uxtb	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	705a      	strb	r2, [r3, #1]
    // Assert that we are not dropping any packets
    ASSERT(xQueueSend(crtpPacketDelivery, &slp->length, 0) == pdPASS);
 8002312:	4b3c      	ldr	r3, [pc, #240]	; (8002404 <radiolinkSyslinkDispatch+0x128>)
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	1c59      	adds	r1, r3, #1
 800231a:	2300      	movs	r3, #0
 800231c:	2200      	movs	r2, #0
 800231e:	f010 fedb 	bl	80130d8 <xQueueGenericSend>
 8002322:	4603      	mov	r3, r0
 8002324:	2b01      	cmp	r3, #1
 8002326:	d004      	beq.n	8002332 <radiolinkSyslinkDispatch+0x56>
 8002328:	22a4      	movs	r2, #164	; 0xa4
 800232a:	4937      	ldr	r1, [pc, #220]	; (8002408 <radiolinkSyslinkDispatch+0x12c>)
 800232c:	4837      	ldr	r0, [pc, #220]	; (800240c <radiolinkSyslinkDispatch+0x130>)
 800232e:	f003 f8c1 	bl	80054b4 <assertFail>
    ledseqRun(&seq_linkUp);
 8002332:	4837      	ldr	r0, [pc, #220]	; (8002410 <radiolinkSyslinkDispatch+0x134>)
 8002334:	f000 ff26 	bl	8003184 <ledseqRun>
    // If a radio packet is received, one can be sent
    if (xQueueReceive(txQueue, &txPacket, 0) == pdTRUE)
 8002338:	4b36      	ldr	r3, [pc, #216]	; (8002414 <radiolinkSyslinkDispatch+0x138>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2200      	movs	r2, #0
 800233e:	4936      	ldr	r1, [pc, #216]	; (8002418 <radiolinkSyslinkDispatch+0x13c>)
 8002340:	4618      	mov	r0, r3
 8002342:	f011 f86b 	bl	801341c <xQueueReceive>
 8002346:	4603      	mov	r3, r0
 8002348:	2b01      	cmp	r3, #1
 800234a:	d14f      	bne.n	80023ec <radiolinkSyslinkDispatch+0x110>
    {
      ledseqRun(&seq_linkDown);
 800234c:	4833      	ldr	r0, [pc, #204]	; (800241c <radiolinkSyslinkDispatch+0x140>)
 800234e:	f000 ff19 	bl	8003184 <ledseqRun>
      syslinkSendPacket(&txPacket);
 8002352:	4831      	ldr	r0, [pc, #196]	; (8002418 <radiolinkSyslinkDispatch+0x13c>)
 8002354:	f000 f97c 	bl	8002650 <syslinkSendPacket>
 8002358:	e048      	b.n	80023ec <radiolinkSyslinkDispatch+0x110>
    }
  } else if (slp->type == SYSLINK_RADIO_RAW_BROADCAST)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b06      	cmp	r3, #6
 8002360:	d111      	bne.n	8002386 <radiolinkSyslinkDispatch+0xaa>
  {
    slp->length--; // Decrease to get CRTP size.
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	785b      	ldrb	r3, [r3, #1]
 8002366:	3b01      	subs	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	705a      	strb	r2, [r3, #1]
    // broadcasts are best effort, so no need to handle the case where the queue is full
    xQueueSend(crtpPacketDelivery, &slp->length, 0);
 800236e:	4b25      	ldr	r3, [pc, #148]	; (8002404 <radiolinkSyslinkDispatch+0x128>)
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	1c59      	adds	r1, r3, #1
 8002376:	2300      	movs	r3, #0
 8002378:	2200      	movs	r2, #0
 800237a:	f010 fead 	bl	80130d8 <xQueueGenericSend>
    ledseqRun(&seq_linkUp);
 800237e:	4824      	ldr	r0, [pc, #144]	; (8002410 <radiolinkSyslinkDispatch+0x134>)
 8002380:	f000 ff00 	bl	8003184 <ledseqRun>
 8002384:	e032      	b.n	80023ec <radiolinkSyslinkDispatch+0x110>
    // no ack for broadcasts
  } else if (slp->type == SYSLINK_RADIO_RSSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b04      	cmp	r3, #4
 800238c:	d105      	bne.n	800239a <radiolinkSyslinkDispatch+0xbe>
  {
    //Extract RSSI sample sent from radio
    memcpy(&rssi, slp->data, sizeof(uint8_t)); //rssi will not change on disconnect
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3302      	adds	r3, #2
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	4b22      	ldr	r3, [pc, #136]	; (8002420 <radiolinkSyslinkDispatch+0x144>)
 8002396:	701a      	strb	r2, [r3, #0]
 8002398:	e028      	b.n	80023ec <radiolinkSyslinkDispatch+0x110>
  } else if (slp->type == SYSLINK_RADIO_P2P_BROADCAST)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b0a      	cmp	r3, #10
 80023a0:	d124      	bne.n	80023ec <radiolinkSyslinkDispatch+0x110>
  {
    ledseqRun(&seq_linkUp);
 80023a2:	481b      	ldr	r0, [pc, #108]	; (8002410 <radiolinkSyslinkDispatch+0x134>)
 80023a4:	f000 feee 	bl	8003184 <ledseqRun>
    P2PPacket p2pp;
    p2pp.port=slp->data[0];
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	789b      	ldrb	r3, [r3, #2]
 80023ac:	72bb      	strb	r3, [r7, #10]
    p2pp.rssi = slp->data[1];
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	78db      	ldrb	r3, [r3, #3]
 80023b2:	727b      	strb	r3, [r7, #9]

    const uint8_t p2pDataLength = slp->length - 2;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	785b      	ldrb	r3, [r3, #1]
 80023b8:	3b02      	subs	r3, #2
 80023ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    memcpy(&p2pp.data[0], &slp->data[2], p2pDataLength);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	1d19      	adds	r1, r3, #4
 80023c2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80023c6:	f107 0308 	add.w	r3, r7, #8
 80023ca:	3303      	adds	r3, #3
 80023cc:	4618      	mov	r0, r3
 80023ce:	f015 fb90 	bl	8017af2 <memcpy>
    p2pp.size = p2pDataLength;
 80023d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023d6:	723b      	strb	r3, [r7, #8]

    if (p2p_callback) {
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <radiolinkSyslinkDispatch+0x148>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <radiolinkSyslinkDispatch+0x110>
        p2p_callback(&p2pp);
 80023e0:	4b10      	ldr	r3, [pc, #64]	; (8002424 <radiolinkSyslinkDispatch+0x148>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f107 0208 	add.w	r2, r7, #8
 80023e8:	4610      	mov	r0, r2
 80023ea:	4798      	blx	r3
    }
  }

  isConnected = radiolinkIsConnected();
 80023ec:	f7ff ff0c 	bl	8002208 <radiolinkIsConnected>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <radiolinkSyslinkDispatch+0x14c>)
 80023f6:	701a      	strb	r2, [r3, #0]
}
 80023f8:	bf00      	nop
 80023fa:	3748      	adds	r7, #72	; 0x48
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20004810 	.word	0x20004810
 8002404:	20004808 	.word	0x20004808
 8002408:	0801a01c 	.word	0x0801a01c
 800240c:	0801a050 	.word	0x0801a050
 8002410:	200001ac 	.word	0x200001ac
 8002414:	20004804 	.word	0x20004804
 8002418:	20004818 	.word	0x20004818
 800241c:	200001bc 	.word	0x200001bc
 8002420:	2000480d 	.word	0x2000480d
 8002424:	20004814 	.word	0x20004814
 8002428:	2000480e 	.word	0x2000480e

0800242c <radiolinkReceiveCRTPPacket>:

static int radiolinkReceiveCRTPPacket(CRTPPacket *p)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if (xQueueReceive(crtpPacketDelivery, p, M2T(100)) == pdTRUE)
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <radiolinkReceiveCRTPPacket+0x2c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2264      	movs	r2, #100	; 0x64
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4618      	mov	r0, r3
 800243e:	f010 ffed 	bl	801341c <xQueueReceive>
 8002442:	4603      	mov	r3, r0
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <radiolinkReceiveCRTPPacket+0x20>
  {
    return 0;
 8002448:	2300      	movs	r3, #0
 800244a:	e001      	b.n	8002450 <radiolinkReceiveCRTPPacket+0x24>
  }

  return -1;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20004808 	.word	0x20004808

0800245c <radiolinkSendCRTPPacket>:
{
    p2p_callback = cb;
}

static int radiolinkSendCRTPPacket(CRTPPacket *p)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  static SyslinkPacket slp;

  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b1e      	cmp	r3, #30
 800246a:	d904      	bls.n	8002476 <radiolinkSendCRTPPacket+0x1a>
 800246c:	22dd      	movs	r2, #221	; 0xdd
 800246e:	4913      	ldr	r1, [pc, #76]	; (80024bc <radiolinkSendCRTPPacket+0x60>)
 8002470:	4813      	ldr	r0, [pc, #76]	; (80024c0 <radiolinkSendCRTPPacket+0x64>)
 8002472:	f003 f81f 	bl	80054b4 <assertFail>

  slp.type = SYSLINK_RADIO_RAW;
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <radiolinkSendCRTPPacket+0x68>)
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
  slp.length = p->size + 1;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	b2da      	uxtb	r2, r3
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <radiolinkSendCRTPPacket+0x68>)
 8002486:	705a      	strb	r2, [r3, #1]
  memcpy(slp.data, &p->header, p->size + 1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	1c59      	adds	r1, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	3301      	adds	r3, #1
 8002492:	461a      	mov	r2, r3
 8002494:	480c      	ldr	r0, [pc, #48]	; (80024c8 <radiolinkSendCRTPPacket+0x6c>)
 8002496:	f015 fb2c 	bl	8017af2 <memcpy>

  if (xQueueSend(txQueue, &slp, M2T(100)) == pdTRUE)
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <radiolinkSendCRTPPacket+0x70>)
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	2300      	movs	r3, #0
 80024a0:	2264      	movs	r2, #100	; 0x64
 80024a2:	4908      	ldr	r1, [pc, #32]	; (80024c4 <radiolinkSendCRTPPacket+0x68>)
 80024a4:	f010 fe18 	bl	80130d8 <xQueueGenericSend>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <radiolinkSendCRTPPacket+0x56>
  {
    return true;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <radiolinkSendCRTPPacket+0x58>
  }

  return false;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	0801a01c 	.word	0x0801a01c
 80024c0:	0801a08c 	.word	0x0801a08c
 80024c4:	2000485c 	.word	0x2000485c
 80024c8:	2000485e 	.word	0x2000485e
 80024cc:	20004804 	.word	0x20004804

080024d0 <radiolinkGetLink>:
  return true;
}


struct crtpLinkOperations * radiolinkGetLink()
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return &radiolinkOp;
 80024d4:	4b02      	ldr	r3, [pc, #8]	; (80024e0 <radiolinkGetLink+0x10>)
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	20000058 	.word	0x20000058

080024e4 <radiolinkSetEnable>:

static int radiolinkSetEnable(bool enable)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  return 0;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <syslinkTask>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(syslinkTask, SYSLINK_TASK_STACKSIZE);

/* Syslink task, handles communication between nrf and stm and dispatch messages
 */
static void syslinkTask(void *param)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b094      	sub	sp, #80	; 0x50
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  SyslinkPacket slp;
  while(1)
  {
    uartslkGetPacketBlocking(&slp);
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	4618      	mov	r0, r3
 800250a:	f001 fe21 	bl	8004150 <uartslkGetPacketBlocking>
    syslinkRouteIncommingPacket(&slp);
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f802 	bl	800251c <syslinkRouteIncommingPacket>
    uartslkGetPacketBlocking(&slp);
 8002518:	e7f4      	b.n	8002504 <syslinkTask+0x8>
	...

0800251c <syslinkRouteIncommingPacket>:
  }
}

static void syslinkRouteIncommingPacket(SyslinkPacket *slp)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint8_t groupType;

  groupType = slp->type & SYSLINK_GROUP_MASK;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	f023 030f 	bic.w	r3, r3, #15
 800252c:	73fb      	strb	r3, [r7, #15]

  switch (groupType)
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	2bf0      	cmp	r3, #240	; 0xf0
 8002532:	d01e      	beq.n	8002572 <syslinkRouteIncommingPacket+0x56>
 8002534:	2bf0      	cmp	r3, #240	; 0xf0
 8002536:	dc20      	bgt.n	800257a <syslinkRouteIncommingPacket+0x5e>
 8002538:	2b30      	cmp	r3, #48	; 0x30
 800253a:	d016      	beq.n	800256a <syslinkRouteIncommingPacket+0x4e>
 800253c:	2b30      	cmp	r3, #48	; 0x30
 800253e:	dc1c      	bgt.n	800257a <syslinkRouteIncommingPacket+0x5e>
 8002540:	2b20      	cmp	r3, #32
 8002542:	d00e      	beq.n	8002562 <syslinkRouteIncommingPacket+0x46>
 8002544:	2b20      	cmp	r3, #32
 8002546:	dc18      	bgt.n	800257a <syslinkRouteIncommingPacket+0x5e>
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <syslinkRouteIncommingPacket+0x36>
 800254c:	2b10      	cmp	r3, #16
 800254e:	d004      	beq.n	800255a <syslinkRouteIncommingPacket+0x3e>
 8002550:	e013      	b.n	800257a <syslinkRouteIncommingPacket+0x5e>
  {
    case SYSLINK_RADIO_GROUP:
      radiolinkSyslinkDispatch(slp);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fec2 	bl	80022dc <radiolinkSyslinkDispatch>
      break;
 8002558:	e017      	b.n	800258a <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_PM_GROUP:
      pmSyslinkUpdate(slp);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f001 f8ce 	bl	80036fc <pmSyslinkUpdate>
      break;
 8002560:	e013      	b.n	800258a <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_OW_GROUP:
      owSyslinkReceive(slp);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 ffc0 	bl	80034e8 <owSyslinkReceive>
      break;
 8002568:	e00f      	b.n	800258a <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_SYS_GROUP:
      systemSyslinkReceive(slp);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f001 fd14 	bl	8003f98 <systemSyslinkReceive>
      break;
 8002570:	e00b      	b.n	800258a <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_DEBUG_GROUP:
      debugSyslinkReceive(slp);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f900 	bl	8002778 <debugSyslinkReceive>
      break;
 8002578:	e007      	b.n	800258a <syslinkRouteIncommingPacket+0x6e>
    default:
      DEBUG_PRINT("Unknown packet:%X.\n", slp->type);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	4904      	ldr	r1, [pc, #16]	; (8002594 <syslinkRouteIncommingPacket+0x78>)
 8002582:	2000      	movs	r0, #0
 8002584:	f002 ff68 	bl	8005458 <SEGGER_RTT_printf>
      break;
 8002588:	bf00      	nop
  }
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	0801a0f4 	.word	0x0801a0f4

08002598 <syslinkInit>:
/*
 * Public functions
 */

void syslinkInit()
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b085      	sub	sp, #20
 800259c:	af04      	add	r7, sp, #16
  if(isInit) {
 800259e:	4b23      	ldr	r3, [pc, #140]	; (800262c <syslinkInit+0x94>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d13d      	bne.n	8002622 <syslinkInit+0x8a>
    return;
  }

  vSemaphoreCreateBinary(syslinkAccess);
 80025a6:	2203      	movs	r2, #3
 80025a8:	2100      	movs	r1, #0
 80025aa:	2001      	movs	r0, #1
 80025ac:	f010 fcea 	bl	8012f84 <xQueueGenericCreate>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4a1f      	ldr	r2, [pc, #124]	; (8002630 <syslinkInit+0x98>)
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <syslinkInit+0x98>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <syslinkInit+0x34>
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <syslinkInit+0x98>)
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	2300      	movs	r3, #0
 80025c4:	2200      	movs	r2, #0
 80025c6:	2100      	movs	r1, #0
 80025c8:	f010 fd86 	bl	80130d8 <xQueueGenericSend>

  STATIC_MEM_TASK_CREATE(syslinkTask, syslinkTask, SYSLINK_TASK_NAME, NULL, SYSLINK_TASK_PRI);
 80025cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b18      	ldr	r3, [pc, #96]	; (8002634 <syslinkInit+0x9c>)
 80025d4:	9302      	str	r3, [sp, #8]
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <syslinkInit+0xa0>)
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	2303      	movs	r3, #3
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2300      	movs	r3, #0
 80025e0:	4916      	ldr	r1, [pc, #88]	; (800263c <syslinkInit+0xa4>)
 80025e2:	4817      	ldr	r0, [pc, #92]	; (8002640 <syslinkInit+0xa8>)
 80025e4:	f011 fa98 	bl	8013b18 <xTaskCreateStatic>

  debugTimer = xTimerCreate( "syslinkTimer", M2T(1000), pdTRUE, NULL, debugHandler );
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <syslinkInit+0xac>)
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2300      	movs	r3, #0
 80025ee:	2201      	movs	r2, #1
 80025f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025f4:	4814      	ldr	r0, [pc, #80]	; (8002648 <syslinkInit+0xb0>)
 80025f6:	f012 fdd5 	bl	80151a4 <xTimerCreate>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4a13      	ldr	r2, [pc, #76]	; (800264c <syslinkInit+0xb4>)
 80025fe:	6013      	str	r3, [r2, #0]
  xTimerStart(debugTimer, M2T(1000));
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <syslinkInit+0xb4>)
 8002602:	681c      	ldr	r4, [r3, #0]
 8002604:	f011 fdfe 	bl	8014204 <xTaskGetTickCount>
 8002608:	4602      	mov	r2, r0
 800260a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2300      	movs	r3, #0
 8002612:	2101      	movs	r1, #1
 8002614:	4620      	mov	r0, r4
 8002616:	f012 fe5b 	bl	80152d0 <xTimerGenericCommand>

  isInit = true;
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <syslinkInit+0x94>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	e000      	b.n	8002624 <syslinkInit+0x8c>
    return;
 8002622:	bf00      	nop
}
 8002624:	3704      	adds	r7, #4
 8002626:	46bd      	mov	sp, r7
 8002628:	bd90      	pop	{r4, r7, pc}
 800262a:	bf00      	nop
 800262c:	2000489e 	.word	0x2000489e
 8002630:	200048f0 	.word	0x200048f0
 8002634:	20001924 	.word	0x20001924
 8002638:	20001524 	.word	0x20001524
 800263c:	0801a108 	.word	0x0801a108
 8002640:	080024fd 	.word	0x080024fd
 8002644:	08002731 	.word	0x08002731
 8002648:	0801a110 	.word	0x0801a110
 800264c:	200048e8 	.word	0x200048e8

08002650 <syslinkSendPacket>:
  return isInit;
}


int syslinkSendPacket(SyslinkPacket *slp)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  int i = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  int dataSize;
  uint8_t cksum[2] = {0};
 800265c:	2300      	movs	r3, #0
 800265e:	81bb      	strh	r3, [r7, #12]

  xSemaphoreTake(syslinkAccess, portMAX_DELAY);
 8002660:	4b2e      	ldr	r3, [pc, #184]	; (800271c <syslinkSendPacket+0xcc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002668:	4618      	mov	r0, r3
 800266a:	f010 ffb7 	bl	80135dc <xQueueSemaphoreTake>

  ASSERT(slp->length <= SYSLINK_MTU);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	2b40      	cmp	r3, #64	; 0x40
 8002674:	d904      	bls.n	8002680 <syslinkSendPacket+0x30>
 8002676:	2291      	movs	r2, #145	; 0x91
 8002678:	4929      	ldr	r1, [pc, #164]	; (8002720 <syslinkSendPacket+0xd0>)
 800267a:	482a      	ldr	r0, [pc, #168]	; (8002724 <syslinkSendPacket+0xd4>)
 800267c:	f002 ff1a 	bl	80054b4 <assertFail>

  sendBuffer[0] = SYSLINK_START_BYTE1;
 8002680:	4b29      	ldr	r3, [pc, #164]	; (8002728 <syslinkSendPacket+0xd8>)
 8002682:	22bc      	movs	r2, #188	; 0xbc
 8002684:	701a      	strb	r2, [r3, #0]
  sendBuffer[1] = SYSLINK_START_BYTE2;
 8002686:	4b28      	ldr	r3, [pc, #160]	; (8002728 <syslinkSendPacket+0xd8>)
 8002688:	22cf      	movs	r2, #207	; 0xcf
 800268a:	705a      	strb	r2, [r3, #1]
  sendBuffer[2] = slp->type;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	781a      	ldrb	r2, [r3, #0]
 8002690:	4b25      	ldr	r3, [pc, #148]	; (8002728 <syslinkSendPacket+0xd8>)
 8002692:	709a      	strb	r2, [r3, #2]
  sendBuffer[3] = slp->length;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	785a      	ldrb	r2, [r3, #1]
 8002698:	4b23      	ldr	r3, [pc, #140]	; (8002728 <syslinkSendPacket+0xd8>)
 800269a:	70da      	strb	r2, [r3, #3]

  memcpy(&sendBuffer[4], slp->data, slp->length);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	1c99      	adds	r1, r3, #2
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	785b      	ldrb	r3, [r3, #1]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4821      	ldr	r0, [pc, #132]	; (800272c <syslinkSendPacket+0xdc>)
 80026a8:	f015 fa23 	bl	8017af2 <memcpy>
  dataSize = slp->length + 6;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	785b      	ldrb	r3, [r3, #1]
 80026b0:	3306      	adds	r3, #6
 80026b2:	613b      	str	r3, [r7, #16]
  // Calculate checksum delux
  for (i = 2; i < dataSize - 2; i++)
 80026b4:	2302      	movs	r3, #2
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e00f      	b.n	80026da <syslinkSendPacket+0x8a>
  {
    cksum[0] += sendBuffer[i];
 80026ba:	7b3a      	ldrb	r2, [r7, #12]
 80026bc:	491a      	ldr	r1, [pc, #104]	; (8002728 <syslinkSendPacket+0xd8>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	440b      	add	r3, r1
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4413      	add	r3, r2
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	733b      	strb	r3, [r7, #12]
    cksum[1] += cksum[0];
 80026ca:	7b7a      	ldrb	r2, [r7, #13]
 80026cc:	7b3b      	ldrb	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	737b      	strb	r3, [r7, #13]
  for (i = 2; i < dataSize - 2; i++)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3301      	adds	r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	3b02      	subs	r3, #2
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	dbea      	blt.n	80026ba <syslinkSendPacket+0x6a>
  }
  sendBuffer[dataSize-2] = cksum[0];
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	3b02      	subs	r3, #2
 80026e8:	7b39      	ldrb	r1, [r7, #12]
 80026ea:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <syslinkSendPacket+0xd8>)
 80026ec:	54d1      	strb	r1, [r2, r3]
  sendBuffer[dataSize-1] = cksum[1];
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	7b79      	ldrb	r1, [r7, #13]
 80026f4:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <syslinkSendPacket+0xd8>)
 80026f6:	54d1      	strb	r1, [r2, r3]

  uartslkSendDataDmaBlocking(dataSize, sendBuffer);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	490b      	ldr	r1, [pc, #44]	; (8002728 <syslinkSendPacket+0xd8>)
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 fd39 	bl	8004174 <uartslkSendDataDmaBlocking>

  xSemaphoreGive(syslinkAccess);
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <syslinkSendPacket+0xcc>)
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	2300      	movs	r3, #0
 8002708:	2200      	movs	r2, #0
 800270a:	2100      	movs	r1, #0
 800270c:	f010 fce4 	bl	80130d8 <xQueueGenericSend>

  return 0;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200048f0 	.word	0x200048f0
 8002720:	0801a120 	.word	0x0801a120
 8002724:	0801a13c 	.word	0x0801a13c
 8002728:	200048a0 	.word	0x200048a0
 800272c:	200048a4 	.word	0x200048a4

08002730 <debugHandler>:

static void debugHandler(xTimerHandle timer) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  static SyslinkPacket txPacket;

  if (triggerDebugProbe) {
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <debugHandler+0x3c>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d011      	beq.n	8002764 <debugHandler+0x34>
    triggerDebugProbe = 0;
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <debugHandler+0x3c>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]

    uartSyslinkDumpDebugProbe();
 8002746:	f001 fd73 	bl	8004230 <uartSyslinkDumpDebugProbe>
    DEBUG_PRINT("Syslink NRF debug probe initialized\n");
 800274a:	4909      	ldr	r1, [pc, #36]	; (8002770 <debugHandler+0x40>)
 800274c:	2000      	movs	r0, #0
 800274e:	f002 fe83 	bl	8005458 <SEGGER_RTT_printf>

    txPacket.type = SYSLINK_DEBUG_PROBE;
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <debugHandler+0x44>)
 8002754:	22f0      	movs	r2, #240	; 0xf0
 8002756:	701a      	strb	r2, [r3, #0]
    txPacket.length = 0;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <debugHandler+0x44>)
 800275a:	2200      	movs	r2, #0
 800275c:	705a      	strb	r2, [r3, #1]
    syslinkSendPacket(&txPacket);
 800275e:	4805      	ldr	r0, [pc, #20]	; (8002774 <debugHandler+0x44>)
 8002760:	f7ff ff76 	bl	8002650 <syslinkSendPacket>
  }
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	200048ec 	.word	0x200048ec
 8002770:	0801a158 	.word	0x0801a158
 8002774:	200048f4 	.word	0x200048f4

08002778 <debugSyslinkReceive>:

static void debugSyslinkReceive(SyslinkPacket *slp) {
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_DEBUG_PROBE) {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2bf0      	cmp	r3, #240	; 0xf0
 8002786:	d137      	bne.n	80027f8 <debugSyslinkReceive+0x80>
    DEBUG_PRINT("NRF Address received: %d\n", slp->data[0]);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	789b      	ldrb	r3, [r3, #2]
 800278c:	461a      	mov	r2, r3
 800278e:	491c      	ldr	r1, [pc, #112]	; (8002800 <debugSyslinkReceive+0x88>)
 8002790:	2000      	movs	r0, #0
 8002792:	f002 fe61 	bl	8005458 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Chan received: %d\n", slp->data[1]);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	78db      	ldrb	r3, [r3, #3]
 800279a:	461a      	mov	r2, r3
 800279c:	4919      	ldr	r1, [pc, #100]	; (8002804 <debugSyslinkReceive+0x8c>)
 800279e:	2000      	movs	r0, #0
 80027a0:	f002 fe5a 	bl	8005458 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Rate received: %d\n", slp->data[2]);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	791b      	ldrb	r3, [r3, #4]
 80027a8:	461a      	mov	r2, r3
 80027aa:	4917      	ldr	r1, [pc, #92]	; (8002808 <debugSyslinkReceive+0x90>)
 80027ac:	2000      	movs	r0, #0
 80027ae:	f002 fe53 	bl	8005458 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Dropped: %d\n", slp->data[3]);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	795b      	ldrb	r3, [r3, #5]
 80027b6:	461a      	mov	r2, r3
 80027b8:	4914      	ldr	r1, [pc, #80]	; (800280c <debugSyslinkReceive+0x94>)
 80027ba:	2000      	movs	r0, #0
 80027bc:	f002 fe4c 	bl	8005458 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart error code: %d\n", slp->data[4]);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	799b      	ldrb	r3, [r3, #6]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4912      	ldr	r1, [pc, #72]	; (8002810 <debugSyslinkReceive+0x98>)
 80027c8:	2000      	movs	r0, #0
 80027ca:	f002 fe45 	bl	8005458 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart error count: %d\n", slp->data[5]);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	79db      	ldrb	r3, [r3, #7]
 80027d2:	461a      	mov	r2, r3
 80027d4:	490f      	ldr	r1, [pc, #60]	; (8002814 <debugSyslinkReceive+0x9c>)
 80027d6:	2000      	movs	r0, #0
 80027d8:	f002 fe3e 	bl	8005458 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart checksum 1 fail count: %d\n", slp->data[6]);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7a1b      	ldrb	r3, [r3, #8]
 80027e0:	461a      	mov	r2, r3
 80027e2:	490d      	ldr	r1, [pc, #52]	; (8002818 <debugSyslinkReceive+0xa0>)
 80027e4:	2000      	movs	r0, #0
 80027e6:	f002 fe37 	bl	8005458 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart checksum 2 fail count: %d\n", slp->data[7]);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7a5b      	ldrb	r3, [r3, #9]
 80027ee:	461a      	mov	r2, r3
 80027f0:	490a      	ldr	r1, [pc, #40]	; (800281c <debugSyslinkReceive+0xa4>)
 80027f2:	2000      	movs	r0, #0
 80027f4:	f002 fe30 	bl	8005458 <SEGGER_RTT_printf>
  }
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	0801a180 	.word	0x0801a180
 8002804:	0801a19c 	.word	0x0801a19c
 8002808:	0801a1b4 	.word	0x0801a1b4
 800280c:	0801a1cc 	.word	0x0801a1cc
 8002810:	0801a1e0 	.word	0x0801a1e0
 8002814:	0801a1fc 	.word	0x0801a1fc
 8002818:	0801a218 	.word	0x0801a218
 800281c:	0801a23c 	.word	0x0801a23c

08002820 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	601a      	str	r2, [r3, #0]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f023 0210 	bic.w	r2, r3, #16
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	605a      	str	r2, [r3, #4]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b02      	cmp	r3, #2
 800289e:	d101      	bne.n	80028a4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	330c      	adds	r3, #12
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	b2db      	uxtb	r3, r3
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	330c      	adds	r3, #12
 80028de:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002900:	4907      	ldr	r1, [pc, #28]	; (8002920 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4313      	orrs	r3, r2
 8002906:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800290a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4013      	ands	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002912:	68fb      	ldr	r3, [r7, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40023800 	.word	0x40023800

08002924 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <LL_APB2_GRP1_EnableClock+0x2c>)
 800292e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002930:	4907      	ldr	r1, [pc, #28]	; (8002950 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4313      	orrs	r3, r2
 8002936:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <LL_APB2_GRP1_EnableClock+0x2c>)
 800293a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4013      	ands	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40023800 	.word	0x40023800

08002954 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	619a      	str	r2, [r3, #24]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	041a      	lsls	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	619a      	str	r2, [r3, #24]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b090      	sub	sp, #64	; 0x40
 8002994:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002996:	f107 0318 	add.w	r3, r7, #24
 800299a:	2228      	movs	r2, #40	; 0x28
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f014 ffa2 	bl	80178e8 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	463b      	mov	r3, r7
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]
 80029b0:	611a      	str	r2, [r3, #16]
 80029b2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80029b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80029b8:	f7ff ffb4 	bl	8002924 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80029bc:	2001      	movs	r0, #1
 80029be:	f7ff ff99 	bl	80028f4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80029c2:	2004      	movs	r0, #4
 80029c4:	f7ff ff96 	bl	80028f4 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80029c8:	23e0      	movs	r3, #224	; 0xe0
 80029ca:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80029cc:	2302      	movs	r3, #2
 80029ce:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80029d0:	2303      	movs	r3, #3
 80029d2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80029dc:	2305      	movs	r3, #5
 80029de:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e0:	463b      	mov	r3, r7
 80029e2:	4619      	mov	r1, r3
 80029e4:	4825      	ldr	r0, [pc, #148]	; (8002a7c <ICM20602_GPIO_SPI_Initialization+0xec>)
 80029e6:	f00c fcfe 	bl	800f3e6 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80029ee:	f44f 7382 	mov.w	r3, #260	; 0x104
 80029f2:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80029f4:	2300      	movs	r3, #0
 80029f6:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80029f8:	2302      	movs	r3, #2
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80029fc:	2301      	movs	r3, #1
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8002a06:	2310      	movs	r3, #16
 8002a08:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002a12:	230a      	movs	r3, #10
 8002a14:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8002a16:	f107 0318 	add.w	r3, r7, #24
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4818      	ldr	r0, [pc, #96]	; (8002a80 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002a1e:	f00c fd86 	bl	800f52e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002a22:	2100      	movs	r1, #0
 8002a24:	4816      	ldr	r0, [pc, #88]	; (8002a80 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002a26:	f7ff ff0b 	bl	8002840 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8002a2a:	2110      	movs	r1, #16
 8002a2c:	4813      	ldr	r0, [pc, #76]	; (8002a7c <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002a2e:	f7ff ff9f 	bl	8002970 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8002a32:	2310      	movs	r3, #16
 8002a34:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a36:	2301      	movs	r3, #1
 8002a38:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8002a46:	463b      	mov	r3, r7
 8002a48:	4619      	mov	r1, r3
 8002a4a:	480c      	ldr	r0, [pc, #48]	; (8002a7c <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002a4c:	f00c fccb 	bl	800f3e6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8002a50:	2310      	movs	r3, #16
 8002a52:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002a54:	2300      	movs	r3, #0
 8002a56:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4808      	ldr	r0, [pc, #32]	; (8002a84 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002a62:	f00c fcc0 	bl	800f3e6 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8002a66:	4806      	ldr	r0, [pc, #24]	; (8002a80 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002a68:	f7ff feda 	bl	8002820 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002a6c:	2110      	movs	r1, #16
 8002a6e:	4803      	ldr	r0, [pc, #12]	; (8002a7c <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002a70:	f7ff ff70 	bl	8002954 <LL_GPIO_SetOutputPin>
}
 8002a74:	bf00      	nop
 8002a76:	3740      	adds	r7, #64	; 0x40
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40020000 	.word	0x40020000
 8002a80:	40013000 	.word	0x40013000
 8002a84:	40020800 	.word	0x40020800

08002a88 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8002a92:	bf00      	nop
 8002a94:	480c      	ldr	r0, [pc, #48]	; (8002ac8 <SPI1_SendByte+0x40>)
 8002a96:	f7ff fef9 	bl	800288c <LL_SPI_IsActiveFlag_TXE>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f9      	beq.n	8002a94 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4808      	ldr	r0, [pc, #32]	; (8002ac8 <SPI1_SendByte+0x40>)
 8002aa6:	f7ff ff12 	bl	80028ce <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8002aaa:	bf00      	nop
 8002aac:	4806      	ldr	r0, [pc, #24]	; (8002ac8 <SPI1_SendByte+0x40>)
 8002aae:	f7ff feda 	bl	8002866 <LL_SPI_IsActiveFlag_RXNE>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f9      	beq.n	8002aac <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8002ab8:	4803      	ldr	r0, [pc, #12]	; (8002ac8 <SPI1_SendByte+0x40>)
 8002aba:	f7ff fefa 	bl	80028b2 <LL_SPI_ReceiveData8>
 8002abe:	4603      	mov	r3, r0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40013000 	.word	0x40013000

08002acc <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8002ad6:	2110      	movs	r1, #16
 8002ad8:	480b      	ldr	r0, [pc, #44]	; (8002b08 <ICM20602_Readbyte+0x3c>)
 8002ada:	f7ff ff49 	bl	8002970 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ffce 	bl	8002a88 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7ff ffcb 	bl	8002a88 <SPI1_SendByte>
 8002af2:	4603      	mov	r3, r0
 8002af4:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8002af6:	2110      	movs	r1, #16
 8002af8:	4803      	ldr	r0, [pc, #12]	; (8002b08 <ICM20602_Readbyte+0x3c>)
 8002afa:	f7ff ff2b 	bl	8002954 <LL_GPIO_SetOutputPin>
	
	return val;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40020000 	.word	0x40020000

08002b0c <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	460a      	mov	r2, r1
 8002b16:	71fb      	strb	r3, [r7, #7]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8002b1c:	2110      	movs	r1, #16
 8002b1e:	480b      	ldr	r0, [pc, #44]	; (8002b4c <ICM20602_Writebyte+0x40>)
 8002b20:	f7ff ff26 	bl	8002970 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ffab 	bl	8002a88 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8002b32:	79bb      	ldrb	r3, [r7, #6]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ffa7 	bl	8002a88 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8002b3a:	2110      	movs	r1, #16
 8002b3c:	4803      	ldr	r0, [pc, #12]	; (8002b4c <ICM20602_Writebyte+0x40>)
 8002b3e:	f7ff ff09 	bl	8002954 <LL_GPIO_SetOutputPin>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40020000 	.word	0x40020000

08002b50 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8002b64:	463b      	mov	r3, r7
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8002b6c:	f7ff ff10 	bl	8002990 <ICM20602_GPIO_SPI_Initialization>
	
	DEBUG_PRINT("Checking ICM20602...");
 8002b70:	4934      	ldr	r1, [pc, #208]	; (8002c44 <ICM20602_Initialization+0xf4>)
 8002b72:	2000      	movs	r0, #0
 8002b74:	f002 fc70 	bl	8005458 <SEGGER_RTT_printf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8002b78:	2075      	movs	r0, #117	; 0x75
 8002b7a:	f7ff ffa7 	bl	8002acc <ICM20602_Readbyte>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b12      	cmp	r3, #18
 8002b86:	d106      	bne.n	8002b96 <ICM20602_Initialization+0x46>
	{
		DEBUG_PRINT("\r\nICM20602 who_am_i = 0x%02x.................Pass\n", who_am_i);
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	492e      	ldr	r1, [pc, #184]	; (8002c48 <ICM20602_Initialization+0xf8>)
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f002 fc62 	bl	8005458 <SEGGER_RTT_printf>
 8002b94:	e012      	b.n	8002bbc <ICM20602_Initialization+0x6c>
	}
	// recheck
	else if(who_am_i != 0x12)
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	2b12      	cmp	r3, #18
 8002b9a:	d00f      	beq.n	8002bbc <ICM20602_Initialization+0x6c>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002b9c:	2075      	movs	r0, #117	; 0x75
 8002b9e:	f7ff ff95 	bl	8002acc <ICM20602_Readbyte>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	2b12      	cmp	r3, #18
 8002baa:	d007      	beq.n	8002bbc <ICM20602_Initialization+0x6c>
			DEBUG_PRINT( "ICM20602 is not found: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	2312      	movs	r3, #18
 8002bb0:	4926      	ldr	r1, [pc, #152]	; (8002c4c <ICM20602_Initialization+0xfc>)
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f002 fc50 	bl	8005458 <SEGGER_RTT_printf>
			return 1; //ERROR
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e03f      	b.n	8002c3c <ICM20602_Initialization+0xec>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	206b      	movs	r0, #107	; 0x6b
 8002bc0:	f7ff ffa4 	bl	8002b0c <ICM20602_Writebyte>
	delay_us(5000000);
 8002bc4:	4822      	ldr	r0, [pc, #136]	; (8002c50 <ICM20602_Initialization+0x100>)
 8002bc6:	f006 fae5 	bl	8009194 <delay_us>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8002bca:	2101      	movs	r1, #1
 8002bcc:	206b      	movs	r0, #107	; 0x6b
 8002bce:	f7ff ff9d 	bl	8002b0c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	delay_us(5000000);
 8002bd2:	481f      	ldr	r0, [pc, #124]	; (8002c50 <ICM20602_Initialization+0x100>)
 8002bd4:	f006 fade 	bl	8009194 <delay_us>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 8002bd8:	2100      	movs	r1, #0
 8002bda:	206c      	movs	r0, #108	; 0x6c
 8002bdc:	f7ff ff96 	bl	8002b0c <ICM20602_Writebyte>
	delay_us(5000000);
 8002be0:	481b      	ldr	r0, [pc, #108]	; (8002c50 <ICM20602_Initialization+0x100>)
 8002be2:	f006 fad7 	bl	8009194 <delay_us>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8002be6:	2100      	movs	r1, #0
 8002be8:	2019      	movs	r0, #25
 8002bea:	f7ff ff8f 	bl	8002b0c <ICM20602_Writebyte>
	delay_us(5000000);
 8002bee:	4818      	ldr	r0, [pc, #96]	; (8002c50 <ICM20602_Initialization+0x100>)
 8002bf0:	f006 fad0 	bl	8009194 <delay_us>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002bf4:	2105      	movs	r1, #5
 8002bf6:	201a      	movs	r0, #26
 8002bf8:	f7ff ff88 	bl	8002b0c <ICM20602_Writebyte>
	delay_us(5000000);
 8002bfc:	4814      	ldr	r0, [pc, #80]	; (8002c50 <ICM20602_Initialization+0x100>)
 8002bfe:	f006 fac9 	bl	8009194 <delay_us>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8002c02:	2118      	movs	r1, #24
 8002c04:	201b      	movs	r0, #27
 8002c06:	f7ff ff81 	bl	8002b0c <ICM20602_Writebyte>
	delay_us(5000000);
 8002c0a:	4811      	ldr	r0, [pc, #68]	; (8002c50 <ICM20602_Initialization+0x100>)
 8002c0c:	f006 fac2 	bl	8009194 <delay_us>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8002c10:	2118      	movs	r1, #24
 8002c12:	201c      	movs	r0, #28
 8002c14:	f7ff ff7a 	bl	8002b0c <ICM20602_Writebyte>
	delay_us(5000000);
 8002c18:	480d      	ldr	r0, [pc, #52]	; (8002c50 <ICM20602_Initialization+0x100>)
 8002c1a:	f006 fabb 	bl	8009194 <delay_us>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8002c1e:	2103      	movs	r1, #3
 8002c20:	201d      	movs	r0, #29
 8002c22:	f7ff ff73 	bl	8002b0c <ICM20602_Writebyte>
	delay_us(5000000);
 8002c26:	480a      	ldr	r0, [pc, #40]	; (8002c50 <ICM20602_Initialization+0x100>)
 8002c28:	f006 fab4 	bl	8009194 <delay_us>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	2038      	movs	r0, #56	; 0x38
 8002c30:	f7ff ff6c 	bl	8002b0c <ICM20602_Writebyte>
	delay_us(5000000);
 8002c34:	4806      	ldr	r0, [pc, #24]	; (8002c50 <ICM20602_Initialization+0x100>)
 8002c36:	f006 faad 	bl	8009194 <delay_us>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	0801a280 	.word	0x0801a280
 8002c48:	0801a298 	.word	0x0801a298
 8002c4c:	0801a2cc 	.word	0x0801a2cc
 8002c50:	004c4b40 	.word	0x004c4b40

08002c54 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
    __asm volatile (
 8002c5e:	680a      	ldr	r2, [r1, #0]
 8002c60:	f382 8808 	msr	MSP, r2
 8002c64:	684a      	ldr	r2, [r1, #4]
 8002c66:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 8002c68:	e7fe      	b.n	8002c68 <branch_to_bootloader+0x14>
	...

08002c6c <check_enter_bootloader>:
}

void check_enter_bootloader(){
 8002c6c:	b5b0      	push	{r4, r5, r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 8002c72:	491d      	ldr	r1, [pc, #116]	; (8002ce8 <check_enter_bootloader+0x7c>)
 8002c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c78:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 8002c7c:	4c1a      	ldr	r4, [pc, #104]	; (8002ce8 <check_enter_bootloader+0x7c>)
 8002c7e:	f04f 0000 	mov.w	r0, #0
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 8002c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c8e:	f04f 0000 	mov.w	r0, #0
 8002c92:	f04f 0100 	mov.w	r1, #0
 8002c96:	0028      	movs	r0, r5
 8002c98:	2100      	movs	r1, #0
 8002c9a:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	4912      	ldr	r1, [pc, #72]	; (8002cec <check_enter_bootloader+0x80>)
 8002ca2:	4411      	add	r1, r2
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	d11a      	bne.n	8002cde <check_enter_bootloader+0x72>
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <check_enter_bootloader+0x84>)
 8002caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d014      	beq.n	8002cde <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <check_enter_bootloader+0x88>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 8002cba:	683c      	ldr	r4, [r7, #0]
 8002cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	000a      	movs	r2, r1
 8002cca:	2300      	movs	r3, #0
 8002ccc:	4613      	mov	r3, r2
 8002cce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002cd2:	f023 030f 	bic.w	r3, r3, #15
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7ff ffbb 	bl	8002c54 <branch_to_bootloader>
    }
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2001c000 	.word	0x2001c000
 8002cec:	fffffa5b 	.word	0xfffffa5b
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40013800 	.word	0x40013800

08002cf8 <buzzerInit>:




void buzzerInit()
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
	 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4804      	ldr	r0, [pc, #16]	; (8002d10 <buzzerInit+0x18>)
 8002d00:	f00a fa32 	bl	800d168 <HAL_TIM_PWM_Start>
	 TIM3->PSC= 0;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <buzzerInit+0x1c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20007d48 	.word	0x20007d48
 8002d14:	40000400 	.word	0x40000400

08002d18 <buzzerOff>:
{
  return true;
}

void buzzerOff()
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  TIM3->PSC= 0;
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <buzzerOff+0x18>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002d22:	2100      	movs	r1, #0
 8002d24:	4803      	ldr	r0, [pc, #12]	; (8002d34 <buzzerOff+0x1c>)
 8002d26:	f00a fae7 	bl	800d2f8 <HAL_TIM_PWM_Stop>
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40000400 	.word	0x40000400
 8002d34:	20007d48 	.word	0x20007d48

08002d38 <ledRestoreSavedState>:
static uint8_t ledControlBitmask;
static uint8_t ledLastState[LED_NUM];
ledSwitch_t ledSwitchState;

static void ledRestoreSavedState(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
  for (int i = 0; i < LED_NUM; i++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	e011      	b.n	8002d68 <ledRestoreSavedState+0x30>
  {
    ledSet(i, ledLastState[i]);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	490b      	ldr	r1, [pc, #44]	; (8002d78 <ledRestoreSavedState+0x40>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	440b      	add	r3, r1
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f000 f917 	bl	8002f90 <ledSet>
  for (int i = 0; i < LED_NUM; i++)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3301      	adds	r3, #1
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	ddea      	ble.n	8002d44 <ledRestoreSavedState+0xc>
  }
}
 8002d6e:	bf00      	nop
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20004938 	.word	0x20004938

08002d7c <ledSetForce>:

static void ledSetForce(led_t led, bool value)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	460a      	mov	r2, r1
 8002d86:	71fb      	strb	r3, [r7, #7]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	2b06      	cmp	r3, #6
 8002d90:	d832      	bhi.n	8002df8 <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	4a1a      	ldr	r2, [pc, #104]	; (8002e00 <ledSetForce+0x84>)
 8002d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d10d      	bne.n	8002dba <ledSetForce+0x3e>
  {
    value = !value;
 8002d9e:	79bb      	ldrb	r3, [r7, #6]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f083 0301 	eor.w	r3, r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	71bb      	strb	r3, [r7, #6]
 8002db2:	79bb      	ldrb	r3, [r7, #6]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 8002dba:	79bb      	ldrb	r3, [r7, #6]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00d      	beq.n	8002ddc <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <ledSetForce+0x88>)
 8002dc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	4a0f      	ldr	r2, [pc, #60]	; (8002e08 <ledSetForce+0x8c>)
 8002dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f008 f97d 	bl	800b0d4 <HAL_GPIO_WritePin>
 8002dda:	e00e      	b.n	8002dfa <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <ledSetForce+0x88>)
 8002de0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <ledSetForce+0x8c>)
 8002de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2200      	movs	r2, #0
 8002df0:	4619      	mov	r1, r3
 8002df2:	f008 f96f 	bl	800b0d4 <HAL_GPIO_WritePin>
 8002df6:	e000      	b.n	8002dfa <ledSetForce+0x7e>
    return;
 8002df8:	bf00      	nop
    }

//  }

}
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	2000009c 	.word	0x2000009c
 8002e04:	2000006c 	.word	0x2000006c
 8002e08:	20000084 	.word	0x20000084

08002e0c <ledSetSwitch>:

static void ledSetSwitch(ledSwitch_t ledSwitch)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  if (ledSwitchState != ledSwitch)
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <ledSetSwitch+0x38>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	79fa      	ldrb	r2, [r7, #7]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d00c      	beq.n	8002e3a <ledSetSwitch+0x2e>
  {
    ledSwitchState = ledSwitch;
 8002e20:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <ledSetSwitch+0x38>)
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	7013      	strb	r3, [r2, #0]
    switch (ledSwitch)
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <ledSetSwitch+0x26>
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d003      	beq.n	8002e38 <ledSetSwitch+0x2c>
        ledRestoreSavedState();
        break;
      case LED_PARAM_BITMASK:
        break;
      default:
        break;
 8002e30:	e003      	b.n	8002e3a <ledSetSwitch+0x2e>
        ledRestoreSavedState();
 8002e32:	f7ff ff81 	bl	8002d38 <ledRestoreSavedState>
        break;
 8002e36:	e000      	b.n	8002e3a <ledSetSwitch+0x2e>
        break;
 8002e38:	bf00      	nop
    }
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	2000493e 	.word	0x2000493e

08002e48 <ledBitmaskParamCallback>:

static void ledBitmaskParamCallback(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0

  if (ledControlBitmask & (1 << LED_ENABLE_BITMASK_BIT))
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <ledBitmaskParamCallback+0x60>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da1f      	bge.n	8002e98 <ledBitmaskParamCallback+0x50>
  {
    ledSetSwitch(LED_PARAM_BITMASK);
 8002e58:	2001      	movs	r0, #1
 8002e5a:	f7ff ffd7 	bl	8002e0c <ledSetSwitch>
    for (int i = 0; i < LED_NUM; i++)
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	e015      	b.n	8002e90 <ledBitmaskParamCallback+0x48>
    {
      ledSetForce(i, ledControlBitmask & (1<<i));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <ledBitmaskParamCallback+0x60>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	2101      	movs	r1, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	4003      	ands	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf14      	ite	ne
 8002e7c:	2301      	movne	r3, #1
 8002e7e:	2300      	moveq	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f7ff ff79 	bl	8002d7c <ledSetForce>
    for (int i = 0; i < LED_NUM; i++)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	dde6      	ble.n	8002e64 <ledBitmaskParamCallback+0x1c>
  }
  else
  {
    ledSetSwitch(LED_LEDSEQ);
  }
}
 8002e96:	e002      	b.n	8002e9e <ledBitmaskParamCallback+0x56>
    ledSetSwitch(LED_LEDSEQ);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7ff ffb7 	bl	8002e0c <ledSetSwitch>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20004937 	.word	0x20004937

08002eac <ledInit>:

void ledInit(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 8002eb2:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <ledInit+0xd0>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d15b      	bne.n	8002f72 <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eba:	f107 0308 	add.w	r3, r7, #8
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]
 8002ec8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	4b2c      	ldr	r3, [pc, #176]	; (8002f80 <ledInit+0xd4>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a2b      	ldr	r2, [pc, #172]	; (8002f80 <ledInit+0xd4>)
 8002ed4:	f043 0304 	orr.w	r3, r3, #4
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <ledInit+0xd4>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <ledInit+0xd4>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4a24      	ldr	r2, [pc, #144]	; (8002f80 <ledInit+0xd4>)
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <ledInit+0xd4>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e02a      	b.n	8002f5e <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 8002f08:	4a1e      	ldr	r2, [pc, #120]	; (8002f84 <ledInit+0xd8>)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f10:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <ledInit+0xdc>)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f008 f8d9 	bl	800b0d4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 8002f22:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <ledInit+0xdc>)
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002f30:	2301      	movs	r3, #1
 8002f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 8002f38:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <ledInit+0xd8>)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f40:	f107 0208 	add.w	r2, r7, #8
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f007 ff28 	bl	800ad9c <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f81c 	bl	8002f90 <ledSet>
  for (i = 0; i < LED_NUM; i++)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	ddd1      	ble.n	8002f08 <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 8002f64:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <ledInit+0xe0>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
  isInit = true;
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <ledInit+0xd0>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e000      	b.n	8002f74 <ledInit+0xc8>
    return;
 8002f72:	bf00      	nop
}
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20004936 	.word	0x20004936
 8002f80:	40023800 	.word	0x40023800
 8002f84:	2000006c 	.word	0x2000006c
 8002f88:	20000084 	.word	0x20000084
 8002f8c:	2000493e 	.word	0x2000493e

08002f90 <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	460a      	mov	r2, r1
 8002f9a:	71fb      	strb	r3, [r7, #7]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	2b05      	cmp	r3, #5
 8002fa4:	d904      	bls.n	8002fb0 <ledSet+0x20>
 8002fa6:	22e4      	movs	r2, #228	; 0xe4
 8002fa8:	490a      	ldr	r1, [pc, #40]	; (8002fd4 <ledSet+0x44>)
 8002faa:	480b      	ldr	r0, [pc, #44]	; (8002fd8 <ledSet+0x48>)
 8002fac:	f002 fa82 	bl	80054b4 <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <ledSet+0x4c>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d105      	bne.n	8002fc4 <ledSet+0x34>
  {
    ledSetForce(led, value);
 8002fb8:	79ba      	ldrb	r2, [r7, #6]
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fedc 	bl	8002d7c <ledSetForce>
  }

  ledLastState[led] = value;
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	79b9      	ldrb	r1, [r7, #6]
 8002fc8:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <ledSet+0x50>)
 8002fca:	54d1      	strb	r1, [r2, r3]
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	0801a2fc 	.word	0x0801a2fc
 8002fd8:	0801a318 	.word	0x0801a318
 8002fdc:	2000493e 	.word	0x2000493e
 8002fe0:	20004938 	.word	0x20004938

08002fe4 <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2001      	movs	r0, #1
 8002fec:	f7ff ffd0 	bl	8002f90 <ledSet>
  ledSet(LED_GREEN_R, 0);
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	2003      	movs	r0, #3
 8002ff4:	f7ff ffcc 	bl	8002f90 <ledSet>
  ledSet(LED_RED_L, 1);
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	2002      	movs	r0, #2
 8002ffc:	f7ff ffc8 	bl	8002f90 <ledSet>
  ledSet(LED_RED_R, 1);
 8003000:	2101      	movs	r1, #1
 8003002:	2004      	movs	r0, #4
 8003004:	f7ff ffc4 	bl	8002f90 <ledSet>
  ledSet(LED_BLUE_L, 0);
 8003008:	2100      	movs	r1, #0
 800300a:	2000      	movs	r0, #0
 800300c:	f7ff ffc0 	bl	8002f90 <ledSet>
}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}

08003014 <ledseqInit>:
static bool isInit = false;
static bool ledseqEnabled = false;

static void lesdeqCmdTask(void* param);

void ledseqInit() {
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af02      	add	r7, sp, #8
  if(isInit) {
 800301a:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <ledseqInit+0xe4>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d165      	bne.n	80030ee <ledseqInit+0xda>
    return;
  }

  ledInit();
 8003022:	f7ff ff43 	bl	8002eac <ledInit>

  /* Led sequence priority */
  ledseqRegisterSequence(&seq_testPassed);
 8003026:	4835      	ldr	r0, [pc, #212]	; (80030fc <ledseqInit+0xe8>)
 8003028:	f000 f9f8 	bl	800341c <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_testFailed);
 800302c:	4834      	ldr	r0, [pc, #208]	; (8003100 <ledseqInit+0xec>)
 800302e:	f000 f9f5 	bl	800341c <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_lowbat);
 8003032:	4834      	ldr	r0, [pc, #208]	; (8003104 <ledseqInit+0xf0>)
 8003034:	f000 f9f2 	bl	800341c <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charged);
 8003038:	4833      	ldr	r0, [pc, #204]	; (8003108 <ledseqInit+0xf4>)
 800303a:	f000 f9ef 	bl	800341c <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charging);
 800303e:	4833      	ldr	r0, [pc, #204]	; (800310c <ledseqInit+0xf8>)
 8003040:	f000 f9ec 	bl	800341c <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_calibrated);
 8003044:	4832      	ldr	r0, [pc, #200]	; (8003110 <ledseqInit+0xfc>)
 8003046:	f000 f9e9 	bl	800341c <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_alive);
 800304a:	4832      	ldr	r0, [pc, #200]	; (8003114 <ledseqInit+0x100>)
 800304c:	f000 f9e6 	bl	800341c <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkUp);
 8003050:	4831      	ldr	r0, [pc, #196]	; (8003118 <ledseqInit+0x104>)
 8003052:	f000 f9e3 	bl	800341c <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkDown);
 8003056:	4831      	ldr	r0, [pc, #196]	; (800311c <ledseqInit+0x108>)
 8003058:	f000 f9e0 	bl	800341c <ledseqRegisterSequence>

  //Initialise the sequences state
  for(int i=0; i<LED_NUM; i++) {
 800305c:	2300      	movs	r3, #0
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	e007      	b.n	8003072 <ledseqInit+0x5e>
    activeSeq[i] = 0;
 8003062:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <ledseqInit+0x10c>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2100      	movs	r1, #0
 8003068:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3301      	adds	r3, #1
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b05      	cmp	r3, #5
 8003076:	ddf4      	ble.n	8003062 <ledseqInit+0x4e>
  }

  //Init the soft timers that runs the led sequences for each leds
  for(int i=0; i<LED_NUM; i++) {
 8003078:	2300      	movs	r3, #0
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	e018      	b.n	80030b0 <ledseqInit+0x9c>
    timer[i] = xTimerCreateStatic("ledseqTimer", (1000), pdFALSE, (void*)i, runLedseq, &timerBuffer[i]);
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4926      	ldr	r1, [pc, #152]	; (8003124 <ledseqInit+0x110>)
 800308a:	440b      	add	r3, r1
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <ledseqInit+0x114>)
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	4613      	mov	r3, r2
 8003094:	2200      	movs	r2, #0
 8003096:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800309a:	4824      	ldr	r0, [pc, #144]	; (800312c <ledseqInit+0x118>)
 800309c:	f012 f8a4 	bl	80151e8 <xTimerCreateStatic>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4923      	ldr	r1, [pc, #140]	; (8003130 <ledseqInit+0x11c>)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	dde3      	ble.n	800307e <ledseqInit+0x6a>
  }

  ledseqMutex = xSemaphoreCreateMutex();
 80030b6:	2001      	movs	r0, #1
 80030b8:	f00f ffdb 	bl	8013072 <xQueueCreateMutex>
 80030bc:	4603      	mov	r3, r0
 80030be:	4a1d      	ldr	r2, [pc, #116]	; (8003134 <ledseqInit+0x120>)
 80030c0:	6013      	str	r3, [r2, #0]

  ledseqCmdQueue = xQueueCreate(10, sizeof(struct ledseqCmd_s));
 80030c2:	2200      	movs	r2, #0
 80030c4:	2108      	movs	r1, #8
 80030c6:	200a      	movs	r0, #10
 80030c8:	f00f ff5c 	bl	8012f84 <xQueueGenericCreate>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4a1a      	ldr	r2, [pc, #104]	; (8003138 <ledseqInit+0x124>)
 80030d0:	6013      	str	r3, [r2, #0]
  xTaskCreate(lesdeqCmdTask, LEDSEQCMD_TASK_NAME, LEDSEQCMD_TASK_STACKSIZE, NULL, LEDSEQCMD_TASK_PRI, NULL);
 80030d2:	2300      	movs	r3, #0
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	2301      	movs	r3, #1
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	2300      	movs	r3, #0
 80030dc:	2280      	movs	r2, #128	; 0x80
 80030de:	4917      	ldr	r1, [pc, #92]	; (800313c <ledseqInit+0x128>)
 80030e0:	4817      	ldr	r0, [pc, #92]	; (8003140 <ledseqInit+0x12c>)
 80030e2:	f010 fd6f 	bl	8013bc4 <xTaskCreate>

  isInit = true;
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <ledseqInit+0xe4>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e000      	b.n	80030f0 <ledseqInit+0xdc>
    return;
 80030ee:	bf00      	nop
}
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	2000494c 	.word	0x2000494c
 80030fc:	2000028c 	.word	0x2000028c
 8003100:	2000029c 	.word	0x2000029c
 8003104:	200000c4 	.word	0x200000c4
 8003108:	200001dc 	.word	0x200001dc
 800310c:	20000204 	.word	0x20000204
 8003110:	2000015c 	.word	0x2000015c
 8003114:	20000184 	.word	0x20000184
 8003118:	200001ac 	.word	0x200001ac
 800311c:	200001bc 	.word	0x200001bc
 8003120:	200019dc 	.word	0x200019dc
 8003124:	20001a0c 	.word	0x20001a0c
 8003128:	08003305 	.word	0x08003305
 800312c:	0801a340 	.word	0x0801a340
 8003130:	200019f4 	.word	0x200019f4
 8003134:	20004944 	.word	0x20004944
 8003138:	20004948 	.word	0x20004948
 800313c:	0801a34c 	.word	0x0801a34c
 8003140:	08003145 	.word	0x08003145

08003144 <lesdeqCmdTask>:

static void lesdeqCmdTask(void* param) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  while(1) {
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <lesdeqCmdTask+0x3c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f107 0108 	add.w	r1, r7, #8
 8003154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003158:	4618      	mov	r0, r3
 800315a:	f010 f95f 	bl	801341c <xQueueReceive>

    switch(command.command) {
 800315e:	7a3b      	ldrb	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <lesdeqCmdTask+0x26>
 8003164:	2b01      	cmp	r3, #1
 8003166:	d005      	beq.n	8003174 <lesdeqCmdTask+0x30>
 8003168:	e009      	b.n	800317e <lesdeqCmdTask+0x3a>
      case run:
        ledseqRunBlocking(command.sequence);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4618      	mov	r0, r3
 800316e:	f000 f825 	bl	80031bc <ledseqRunBlocking>
        break;
 8003172:	e004      	b.n	800317e <lesdeqCmdTask+0x3a>
      case stop:
        ledseqStopBlocking(command.sequence);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f898 	bl	80032ac <ledseqStopBlocking>
        break;
 800317c:	bf00      	nop
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 800317e:	e7e5      	b.n	800314c <lesdeqCmdTask+0x8>
 8003180:	20004948 	.word	0x20004948

08003184 <ledseqRun>:

void ledseqEnable(bool enable) {
  ledseqEnabled = enable;
}

bool ledseqRun(ledseqContext_t *context) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = run;
 800318c:	2300      	movs	r3, #0
 800318e:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <ledseqRun+0x34>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	f107 0108 	add.w	r1, r7, #8
 800319c:	2300      	movs	r3, #0
 800319e:	2200      	movs	r2, #0
 80031a0:	f00f ff9a 	bl	80130d8 <xQueueGenericSend>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <ledseqRun+0x2a>
    return true;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <ledseqRun+0x2c>
  }
  return false;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20004948 	.word	0x20004948

080031bc <ledseqRunBlocking>:

void ledseqRunBlocking(ledseqContext_t *context) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7b1b      	ldrb	r3, [r3, #12]
 80031c8:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 80031ca:	4b13      	ldr	r3, [pc, #76]	; (8003218 <ledseqRunBlocking+0x5c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031d2:	4618      	mov	r0, r3
 80031d4:	f010 fa02 	bl	80135dc <xQueueSemaphoreTake>
  context->state = 0;  //Reset the seq. to its first step
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
  updateActive(led);
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 f94f 	bl	8003484 <updateActive>
  xSemaphoreGive(ledseqMutex);
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <ledseqRunBlocking+0x5c>)
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	2300      	movs	r3, #0
 80031ec:	2200      	movs	r2, #0
 80031ee:	2100      	movs	r1, #0
 80031f0:	f00f ff72 	bl	80130d8 <xQueueGenericSend>

  // Run the first step if the new seq is the active sequence
  if(activeSeq[led] == context) {
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <ledseqRunBlocking+0x60>)
 80031f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d106      	bne.n	8003210 <ledseqRunBlocking+0x54>
    runLedseq(timer[led]);
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	4a06      	ldr	r2, [pc, #24]	; (8003220 <ledseqRunBlocking+0x64>)
 8003206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f87a 	bl	8003304 <runLedseq>
  }
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20004944 	.word	0x20004944
 800321c:	200019dc 	.word	0x200019dc
 8003220:	200019f4 	.word	0x200019f4

08003224 <ledseqSetChargeLevel>:

void ledseqSetChargeLevel(const float chargeLevel) {
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	ed87 0a01 	vstr	s0, [r7, #4]
  int onTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA * chargeLevel;
 800322e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003232:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800326c <ledseqSetChargeLevel+0x48>
 8003236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800323a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800323e:	ee17 3a90 	vmov	r3, s15
 8003242:	60fb      	str	r3, [r7, #12]
  int offTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA - onTime;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800324a:	60bb      	str	r3, [r7, #8]

  seq_charging.sequence[0].action = onTime;
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <ledseqSetChargeLevel+0x4c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	605a      	str	r2, [r3, #4]
  seq_charging.sequence[1].action = offTime;
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <ledseqSetChargeLevel+0x4c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3308      	adds	r3, #8
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	605a      	str	r2, [r3, #4]
}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	447a0000 	.word	0x447a0000
 8003270:	20000204 	.word	0x20000204

08003274 <ledseqStop>:

bool ledseqStop(ledseqContext_t *context) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = stop;
 800327c:	2301      	movs	r3, #1
 800327e:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <ledseqStop+0x34>)
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	f107 0108 	add.w	r1, r7, #8
 800328c:	2300      	movs	r3, #0
 800328e:	2200      	movs	r2, #0
 8003290:	f00f ff22 	bl	80130d8 <xQueueGenericSend>
 8003294:	4603      	mov	r3, r0
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <ledseqStop+0x2a>
    return true;
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <ledseqStop+0x2c>
  }
  return false;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20004948 	.word	0x20004948

080032ac <ledseqStopBlocking>:

void ledseqStopBlocking(ledseqContext_t *context) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7b1b      	ldrb	r3, [r3, #12]
 80032b8:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <ledseqStopBlocking+0x50>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032c2:	4618      	mov	r0, r3
 80032c4:	f010 f98a 	bl	80135dc <xQueueSemaphoreTake>
  context->state = LEDSEQ_STOP;  //Stop the seq.
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032ce:	609a      	str	r2, [r3, #8]
  updateActive(led);
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f8d6 	bl	8003484 <updateActive>
  xSemaphoreGive(ledseqMutex);
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <ledseqStopBlocking+0x50>)
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	2200      	movs	r2, #0
 80032e0:	2100      	movs	r1, #0
 80032e2:	f00f fef9 	bl	80130d8 <xQueueGenericSend>

  //Run the next active sequence (if any...)
  runLedseq(timer[led]);
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	4a05      	ldr	r2, [pc, #20]	; (8003300 <ledseqStopBlocking+0x54>)
 80032ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f808 	bl	8003304 <runLedseq>
}
 80032f4:	bf00      	nop
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20004944 	.word	0x20004944
 8003300:	200019f4 	.word	0x200019f4

08003304 <runLedseq>:

/* Center of the led sequence machine. This function is executed by the FreeRTOS
 * timers and runs the sequences
 */
static void runLedseq( xTimerHandle xTimer ) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af02      	add	r7, sp, #8
 800330a:	6078      	str	r0, [r7, #4]
  if (!ledseqEnabled) {
 800330c:	4b40      	ldr	r3, [pc, #256]	; (8003410 <runLedseq+0x10c>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	f083 0301 	eor.w	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d171      	bne.n	80033fe <runLedseq+0xfa>
    return;
  }

  led_t led = (led_t)pvTimerGetTimerID(xTimer);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f012 fad8 	bl	80158d0 <pvTimerGetTimerID>
 8003320:	4603      	mov	r3, r0
 8003322:	75bb      	strb	r3, [r7, #22]
  ledseqContext_t* context = activeSeq[led];
 8003324:	7dbb      	ldrb	r3, [r7, #22]
 8003326:	4a3b      	ldr	r2, [pc, #236]	; (8003414 <runLedseq+0x110>)
 8003328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332c:	613b      	str	r3, [r7, #16]
  if (NO_CONTEXT == context) {
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d066      	beq.n	8003402 <runLedseq+0xfe>
    return;
  }

  bool leave = false;
 8003334:	2300      	movs	r3, #0
 8003336:	75fb      	strb	r3, [r7, #23]
  while(!leave) {
 8003338:	e05a      	b.n	80033f0 <runLedseq+0xec>
    if (context->state == LEDSEQ_STOP) {
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003342:	d060      	beq.n	8003406 <runLedseq+0x102>
      return;
    }

    const ledseqStep_t* step = &context->sequence[context->state];
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

    xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8003352:	4b31      	ldr	r3, [pc, #196]	; (8003418 <runLedseq+0x114>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800335a:	4618      	mov	r0, r3
 800335c:	f010 f93e 	bl	80135dc <xQueueSemaphoreTake>
    context->state++;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	609a      	str	r2, [r3, #8]
    led_t led = context->led;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	7b1b      	ldrb	r3, [r3, #12]
 800336e:	72fb      	strb	r3, [r7, #11]

    switch(step->action) {
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f113 0f02 	cmn.w	r3, #2
 8003378:	d003      	beq.n	8003382 <runLedseq+0x7e>
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800337e:	d004      	beq.n	800338a <runLedseq+0x86>
 8003380:	e00c      	b.n	800339c <runLedseq+0x98>
      case LEDSEQ_LOOP:
        context->state = 0;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2200      	movs	r2, #0
 8003386:	609a      	str	r2, [r3, #8]
        break;
 8003388:	e02b      	b.n	80033e2 <runLedseq+0xde>
      case LEDSEQ_STOP:
        context->state = LEDSEQ_STOP;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003390:	609a      	str	r2, [r3, #8]
        updateActive(led);
 8003392:	7afb      	ldrb	r3, [r7, #11]
 8003394:	4618      	mov	r0, r3
 8003396:	f000 f875 	bl	8003484 <updateActive>
        break;
 800339a:	e022      	b.n	80033e2 <runLedseq+0xde>
      default:  //The step is a LED action and a time
        ledSet(led, step->value);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	7afb      	ldrb	r3, [r7, #11]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fdf3 	bl	8002f90 <ledSet>
        if (step->action == 0) {
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d016      	beq.n	80033e0 <runLedseq+0xdc>
          break;
        }
        xTimerChangePeriod(xTimer, (step->action), 0);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	461a      	mov	r2, r3
 80033b8:	2300      	movs	r3, #0
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	2300      	movs	r3, #0
 80033be:	2104      	movs	r1, #4
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f011 ff85 	bl	80152d0 <xTimerGenericCommand>
        xTimerStart(xTimer, 0);
 80033c6:	f010 ff1d 	bl	8014204 <xTaskGetTickCount>
 80033ca:	4602      	mov	r2, r0
 80033cc:	2300      	movs	r3, #0
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	2300      	movs	r3, #0
 80033d2:	2101      	movs	r1, #1
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f011 ff7b 	bl	80152d0 <xTimerGenericCommand>
        leave = true;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
        break;
 80033de:	e000      	b.n	80033e2 <runLedseq+0xde>
          break;
 80033e0:	bf00      	nop
    }
    xSemaphoreGive(ledseqMutex);
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <runLedseq+0x114>)
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	2300      	movs	r3, #0
 80033e8:	2200      	movs	r2, #0
 80033ea:	2100      	movs	r1, #0
 80033ec:	f00f fe74 	bl	80130d8 <xQueueGenericSend>
  while(!leave) {
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	f083 0301 	eor.w	r3, r3, #1
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d19e      	bne.n	800333a <runLedseq+0x36>
 80033fc:	e004      	b.n	8003408 <runLedseq+0x104>
    return;
 80033fe:	bf00      	nop
 8003400:	e002      	b.n	8003408 <runLedseq+0x104>
    return;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <runLedseq+0x104>
      return;
 8003406:	bf00      	nop
  }
}
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	2000494d 	.word	0x2000494d
 8003414:	200019dc 	.word	0x200019dc
 8003418:	20004944 	.word	0x20004944

0800341c <ledseqRegisterSequence>:

void ledseqRegisterSequence(ledseqContext_t* context) {
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  context->state = LEDSEQ_STOP;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800342a:	609a      	str	r2, [r3, #8]
  context->nextContext = NO_CONTEXT;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	605a      	str	r2, [r3, #4]

  if (sequences == NO_CONTEXT) {
 8003432:	4b13      	ldr	r3, [pc, #76]	; (8003480 <ledseqRegisterSequence+0x64>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <ledseqRegisterSequence+0x26>
    sequences = context;
 800343a:	4a11      	ldr	r2, [pc, #68]	; (8003480 <ledseqRegisterSequence+0x64>)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	e019      	b.n	8003476 <ledseqRegisterSequence+0x5a>
  } else {
    ledseqContext_t* last = sequences;
 8003442:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <ledseqRegisterSequence+0x64>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]
    if (last == context) {
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d00f      	beq.n	8003470 <ledseqRegisterSequence+0x54>
      // Skip if already registered
      return;
    }

    while (last->nextContext != NO_CONTEXT) {
 8003450:	e006      	b.n	8003460 <ledseqRegisterSequence+0x44>
      last = last->nextContext;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	60fb      	str	r3, [r7, #12]
      if (last == context) {
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d009      	beq.n	8003474 <ledseqRegisterSequence+0x58>
    while (last->nextContext != NO_CONTEXT) {
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f4      	bne.n	8003452 <ledseqRegisterSequence+0x36>
        // Skip if already registered
        return;
      }
    }

    last->nextContext = context;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	e002      	b.n	8003476 <ledseqRegisterSequence+0x5a>
      return;
 8003470:	bf00      	nop
 8003472:	e000      	b.n	8003476 <ledseqRegisterSequence+0x5a>
        return;
 8003474:	bf00      	nop
  }
}
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	20004940 	.word	0x20004940

08003484 <updateActive>:

// Utility functions

static void updateActive(led_t led) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  activeSeq[led] = NO_CONTEXT;
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <updateActive+0x5c>)
 8003492:	2100      	movs	r1, #0
 8003494:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  ledSet(led, false);
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fd77 	bl	8002f90 <ledSet>

  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <updateActive+0x60>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	e012      	b.n	80034d0 <updateActive+0x4c>
    if (sequence->led == led && sequence->state != LEDSEQ_STOP) {
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	7b1b      	ldrb	r3, [r3, #12]
 80034ae:	79fa      	ldrb	r2, [r7, #7]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d10a      	bne.n	80034ca <updateActive+0x46>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034bc:	d005      	beq.n	80034ca <updateActive+0x46>
      activeSeq[led] = sequence;
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	4907      	ldr	r1, [pc, #28]	; (80034e0 <updateActive+0x5c>)
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      break;
 80034c8:	e006      	b.n	80034d8 <updateActive+0x54>
  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e9      	bne.n	80034aa <updateActive+0x26>
    }
  }
}
 80034d6:	bf00      	nop
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	200019dc 	.word	0x200019dc
 80034e4:	20004940 	.word	0x20004940

080034e8 <owSyslinkReceive>:
{
  return owCommonTest();
}

void owSyslinkReceive(SyslinkPacket *slp)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <pmInit>:
};

STATIC_MEM_TASK_ALLOC(pmTask, PM_TASK_STACKSIZE);

void pmInit(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af04      	add	r7, sp, #16
  if(isInit) {
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <pmInit+0x60>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d125      	bne.n	8003556 <pmInit+0x5a>
    return;
  }

  HAL_ADC_Start_DMA(&hadc1, &adc1Val, 1);	// Current measurement
 800350a:	2201      	movs	r2, #1
 800350c:	4914      	ldr	r1, [pc, #80]	; (8003560 <pmInit+0x64>)
 800350e:	4815      	ldr	r0, [pc, #84]	; (8003564 <pmInit+0x68>)
 8003510:	f006 fb54 	bl	8009bbc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &adc2Val, 1);	// Voltage measurement
 8003514:	2201      	movs	r2, #1
 8003516:	4914      	ldr	r1, [pc, #80]	; (8003568 <pmInit+0x6c>)
 8003518:	4814      	ldr	r0, [pc, #80]	; (800356c <pmInit+0x70>)
 800351a:	f006 fb4f 	bl	8009bbc <HAL_ADC_Start_DMA>

  STATIC_MEM_TASK_CREATE(pmTask, pmTask, PM_TASK_NAME, NULL, PM_TASK_PRI);
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	461a      	mov	r2, r3
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <pmInit+0x74>)
 8003524:	9302      	str	r3, [sp, #8]
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <pmInit+0x78>)
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	2300      	movs	r3, #0
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	2300      	movs	r3, #0
 8003530:	4911      	ldr	r1, [pc, #68]	; (8003578 <pmInit+0x7c>)
 8003532:	4812      	ldr	r0, [pc, #72]	; (800357c <pmInit+0x80>)
 8003534:	f010 faf0 	bl	8013b18 <xTaskCreateStatic>

  isInit = true;
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <pmInit+0x60>)
 800353a:	2201      	movs	r2, #1
 800353c:	701a      	strb	r2, [r3, #0]

  pmSyslinkInfo.vBat = 3.7f;
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <pmInit+0x84>)
 8003540:	4a10      	ldr	r2, [pc, #64]	; (8003584 <pmInit+0x88>)
 8003542:	f8c3 2001 	str.w	r2, [r3, #1]
  pmSetBatteryVoltage(pmSyslinkInfo.vBat); //TODO remove
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <pmInit+0x84>)
 8003548:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800354c:	ee00 3a10 	vmov	s0, r3
 8003550:	f000 f81a 	bl	8003588 <pmSetBatteryVoltage>
 8003554:	e000      	b.n	8003558 <pmInit+0x5c>
    return;
 8003556:	bf00      	nop
}
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	2000497c 	.word	0x2000497c
 8003560:	2000498c 	.word	0x2000498c
 8003564:	20007bf8 	.word	0x20007bf8
 8003568:	2000498e 	.word	0x2000498e
 800356c:	20007c40 	.word	0x20007c40
 8003570:	20001b14 	.word	0x20001b14
 8003574:	20004990 	.word	0x20004990
 8003578:	0801a358 	.word	0x0801a358
 800357c:	080038c9 	.word	0x080038c9
 8003580:	20004980 	.word	0x20004980
 8003584:	406ccccd 	.word	0x406ccccd

08003588 <pmSetBatteryVoltage>:

/**
 * Sets the battery voltage and its min and max values
 */
static void pmSetBatteryVoltage(float voltage)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	ed87 0a01 	vstr	s0, [r7, #4]
  batteryVoltage = voltage;
 8003592:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <pmSetBatteryVoltage+0x6c>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6013      	str	r3, [r2, #0]
  batteryVoltageMV = (uint16_t)(voltage * 1000);
 8003598:	edd7 7a01 	vldr	s15, [r7, #4]
 800359c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80035f8 <pmSetBatteryVoltage+0x70>
 80035a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035a8:	ee17 3a90 	vmov	r3, s15
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <pmSetBatteryVoltage+0x74>)
 80035b0:	801a      	strh	r2, [r3, #0]
  if (batteryVoltageMax < voltage)
 80035b2:	4b13      	ldr	r3, [pc, #76]	; (8003600 <pmSetBatteryVoltage+0x78>)
 80035b4:	edd3 7a00 	vldr	s15, [r3]
 80035b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80035bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c4:	dd02      	ble.n	80035cc <pmSetBatteryVoltage+0x44>
  {
    batteryVoltageMax = voltage;
 80035c6:	4a0e      	ldr	r2, [pc, #56]	; (8003600 <pmSetBatteryVoltage+0x78>)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6013      	str	r3, [r2, #0]
  }
  if (batteryVoltageMin > voltage)
 80035cc:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <pmSetBatteryVoltage+0x7c>)
 80035ce:	edd3 7a00 	vldr	s15, [r3]
 80035d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80035d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035de:	d400      	bmi.n	80035e2 <pmSetBatteryVoltage+0x5a>
  {
    batteryVoltageMin = voltage;
  }
}
 80035e0:	e002      	b.n	80035e8 <pmSetBatteryVoltage+0x60>
    batteryVoltageMin = voltage;
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <pmSetBatteryVoltage+0x7c>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6013      	str	r3, [r2, #0]
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	20004950 	.word	0x20004950
 80035f8:	447a0000 	.word	0x447a0000
 80035fc:	20004954 	.word	0x20004954
 8003600:	20004958 	.word	0x20004958
 8003604:	200002ac 	.word	0x200002ac

08003608 <pmSystemShutdown>:

/**
 * Shutdown system
 */
static void pmSystemShutdown(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
#ifdef CONFIG_PM_AUTO_SHUTDOWN
  systemRequestShutdown();
#endif
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <pmBatteryChargeFromVoltage>:
/**
 * Returns a number from 0 to 9 where 0 is completely discharged
 * and 9 is 90% charged.
 */
static int32_t pmBatteryChargeFromVoltage(float voltage)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	ed87 0a01 	vstr	s0, [r7, #4]
  int charge = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]

  if (voltage < LiPoTypicalChargeCurve[0])
 8003626:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800362a:	edd7 7a01 	vldr	s15, [r7, #4]
 800362e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003636:	d501      	bpl.n	800363c <pmBatteryChargeFromVoltage+0x24>
  {
    return 0;
 8003638:	2300      	movs	r3, #0
 800363a:	e01c      	b.n	8003676 <pmBatteryChargeFromVoltage+0x5e>
  }
  if (voltage > LiPoTypicalChargeCurve[9])
 800363c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003684 <pmBatteryChargeFromVoltage+0x6c>
 8003640:	edd7 7a01 	vldr	s15, [r7, #4]
 8003644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364c:	dd01      	ble.n	8003652 <pmBatteryChargeFromVoltage+0x3a>
  {
    return 9;
 800364e:	2309      	movs	r3, #9
 8003650:	e011      	b.n	8003676 <pmBatteryChargeFromVoltage+0x5e>
  }
  while (voltage >  LiPoTypicalChargeCurve[charge])
 8003652:	e002      	b.n	800365a <pmBatteryChargeFromVoltage+0x42>
  {
    charge++;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3301      	adds	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
  while (voltage >  LiPoTypicalChargeCurve[charge])
 800365a:	4a0b      	ldr	r2, [pc, #44]	; (8003688 <pmBatteryChargeFromVoltage+0x70>)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	edd3 7a00 	vldr	s15, [r3]
 8003666:	ed97 7a01 	vldr	s14, [r7, #4]
 800366a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800366e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003672:	dcef      	bgt.n	8003654 <pmBatteryChargeFromVoltage+0x3c>
  }

  return charge;
 8003674:	68fb      	ldr	r3, [r7, #12]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40833333 	.word	0x40833333
 8003688:	0801c2f8 	.word	0x0801c2f8

0800368c <pmGetBatteryVoltage>:


float pmGetBatteryVoltage(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return batteryVoltage;
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <pmGetBatteryVoltage+0x18>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	ee07 3a90 	vmov	s15, r3
}
 8003698:	eeb0 0a67 	vmov.f32	s0, s15
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	20004950 	.word	0x20004950

080036a8 <pmGracefulShutdown>:
/*
 * Iterate through all registered shutdown callbacks and call them one after
 * the other, when all is done, send the ACK back to nrf to allow power off.
 */
static void pmGracefulShutdown()
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b094      	sub	sp, #80	; 0x50
 80036ac:	af00      	add	r7, sp, #0
  for (int i = 0; i < graceful_shutdown_callbacks_index; i++) {
 80036ae:	2300      	movs	r3, #0
 80036b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b2:	e009      	b.n	80036c8 <pmGracefulShutdown+0x20>
    graceful_shutdown_callback_t callback = graceful_shutdown_callbacks[i];
 80036b4:	4a0f      	ldr	r2, [pc, #60]	; (80036f4 <pmGracefulShutdown+0x4c>)
 80036b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036bc:	64bb      	str	r3, [r7, #72]	; 0x48

    callback();
 80036be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c0:	4798      	blx	r3
  for (int i = 0; i < graceful_shutdown_callbacks_index; i++) {
 80036c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c4:	3301      	adds	r3, #1
 80036c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <pmGracefulShutdown+0x50>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036ce:	429a      	cmp	r2, r3
 80036d0:	dbf0      	blt.n	80036b4 <pmGracefulShutdown+0xc>
  }

  SyslinkPacket slp = {
 80036d2:	1d3b      	adds	r3, r7, #4
 80036d4:	2242      	movs	r2, #66	; 0x42
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f014 f905 	bl	80178e8 <memset>
 80036de:	2316      	movs	r3, #22
 80036e0:	713b      	strb	r3, [r7, #4]
    .type = SYSLINK_PM_SHUTDOWN_ACK,
  };

  syslinkSendPacket(&slp);
 80036e2:	1d3b      	adds	r3, r7, #4
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fe ffb3 	bl	8002650 <syslinkSendPacket>
}
 80036ea:	bf00      	nop
 80036ec:	3750      	adds	r7, #80	; 0x50
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20004b94 	.word	0x20004b94
 80036f8:	20004b90 	.word	0x20004b90

080036fc <pmSyslinkUpdate>:

  syslinkSendPacket(&slp);
}
*/
void pmSyslinkUpdate(SyslinkPacket *slp)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_PM_BATTERY_STATE) {
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b13      	cmp	r3, #19
 800370a:	d11b      	bne.n	8003744 <pmSyslinkUpdate+0x48>
    // First byte of the packet contains some PM flags such as USB power, charging etc.
    memcpy(&pmSyslinkInfo, &slp->data[0], sizeof(pmSyslinkInfo));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1c9a      	adds	r2, r3, #2
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <pmSyslinkUpdate+0x60>)
 8003712:	6810      	ldr	r0, [r2, #0]
 8003714:	6851      	ldr	r1, [r2, #4]
 8003716:	c303      	stmia	r3!, {r0, r1}
 8003718:	7a12      	ldrb	r2, [r2, #8]
 800371a:	701a      	strb	r2, [r3, #0]

    // If using voltage measurements from external battery, we'll set the
    // voltage to this instead of the one sent from syslink.
    if (isExtBatVoltDeckPinSet) {
 800371c:	4b10      	ldr	r3, [pc, #64]	; (8003760 <pmSyslinkUpdate+0x64>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d007      	beq.n	8003734 <pmSyslinkUpdate+0x38>
      pmSetBatteryVoltage(extBatteryVoltage);
 8003724:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <pmSyslinkUpdate+0x68>)
 8003726:	edd3 7a00 	vldr	s15, [r3]
 800372a:	eeb0 0a67 	vmov.f32	s0, s15
 800372e:	f7ff ff2b 	bl	8003588 <pmSetBatteryVoltage>
    temp = pmSyslinkInfo.temp;
#endif
  } else if (slp->type == SYSLINK_PM_SHUTDOWN_REQUEST) {
    workerSchedule(pmGracefulShutdown, NULL);
  }
}
 8003732:	e00f      	b.n	8003754 <pmSyslinkUpdate+0x58>
      pmSetBatteryVoltage(pmSyslinkInfo.vBat);
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <pmSyslinkUpdate+0x60>)
 8003736:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800373a:	ee00 3a10 	vmov	s0, r3
 800373e:	f7ff ff23 	bl	8003588 <pmSetBatteryVoltage>
}
 8003742:	e007      	b.n	8003754 <pmSyslinkUpdate+0x58>
  } else if (slp->type == SYSLINK_PM_SHUTDOWN_REQUEST) {
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b15      	cmp	r3, #21
 800374a:	d103      	bne.n	8003754 <pmSyslinkUpdate+0x58>
    workerSchedule(pmGracefulShutdown, NULL);
 800374c:	2100      	movs	r1, #0
 800374e:	4806      	ldr	r0, [pc, #24]	; (8003768 <pmSyslinkUpdate+0x6c>)
 8003750:	f005 f870 	bl	8008834 <workerSchedule>
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20004980 	.word	0x20004980
 8003760:	20004962 	.word	0x20004962
 8003764:	2000495c 	.word	0x2000495c
 8003768:	080036a9 	.word	0x080036a9

0800376c <pmSetChargeState>:

void pmSetChargeState(PMChargeStates chgState)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
  // TODO: Send syslink package with charge state
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <pmUpdateState>:

PMStates pmUpdateState()
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
  bool usbPluggedIn = pmSyslinkInfo.usbPluggedIn;
 800378a:	4b24      	ldr	r3, [pc, #144]	; (800381c <pmUpdateState+0x98>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	bf14      	ite	ne
 8003798:	2301      	movne	r3, #1
 800379a:	2300      	moveq	r3, #0
 800379c:	71bb      	strb	r3, [r7, #6]
  bool isCharging = pmSyslinkInfo.isCharging;
 800379e:	4b1f      	ldr	r3, [pc, #124]	; (800381c <pmUpdateState+0x98>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	717b      	strb	r3, [r7, #5]
  PMStates nextState;

  uint32_t batteryLowTime = xTaskGetTickCount() - batteryLowTimeStamp;
 80037b2:	f010 fd27 	bl	8014204 <xTaskGetTickCount>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <pmUpdateState+0x9c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	603b      	str	r3, [r7, #0]

  if (ignoreChargedState)
 80037c0:	4b18      	ldr	r3, [pc, #96]	; (8003824 <pmUpdateState+0xa0>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <pmUpdateState+0x4a>
  {
    // For some scenarios we might not care about the charging/charged state.
    nextState = battery;
 80037c8:	2300      	movs	r3, #0
 80037ca:	71fb      	strb	r3, [r7, #7]
 80037cc:	e016      	b.n	80037fc <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && !isCharging)
 80037ce:	79bb      	ldrb	r3, [r7, #6]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <pmUpdateState+0x62>
 80037d4:	797b      	ldrb	r3, [r7, #5]
 80037d6:	f083 0301 	eor.w	r3, r3, #1
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <pmUpdateState+0x62>
  {
    nextState = charged;
 80037e0:	2302      	movs	r3, #2
 80037e2:	71fb      	strb	r3, [r7, #7]
 80037e4:	e00a      	b.n	80037fc <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && isCharging)
 80037e6:	79bb      	ldrb	r3, [r7, #6]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <pmUpdateState+0x74>
 80037ec:	797b      	ldrb	r3, [r7, #5]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <pmUpdateState+0x74>
  {
    nextState = charging;
 80037f2:	2301      	movs	r3, #1
 80037f4:	71fb      	strb	r3, [r7, #7]
 80037f6:	e001      	b.n	80037fc <pmUpdateState+0x78>
  }
  else
  {
    nextState = battery;
 80037f8:	2300      	movs	r3, #0
 80037fa:	71fb      	strb	r3, [r7, #7]
  }

  if (nextState == battery && batteryLowTime > PM_BAT_LOW_TIMEOUT)
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <pmUpdateState+0x8c>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	f241 3288 	movw	r2, #5000	; 0x1388
 8003808:	4293      	cmp	r3, r2
 800380a:	d901      	bls.n	8003810 <pmUpdateState+0x8c>
  {
    // This is to avoid setting state to lowPower when we're plugged in to USB.
    nextState = lowPower;
 800380c:	2303      	movs	r3, #3
 800380e:	71fb      	strb	r3, [r7, #7]
  }

  return nextState;
 8003810:	79fb      	ldrb	r3, [r7, #7]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20004980 	.word	0x20004980
 8003820:	20004974 	.word	0x20004974
 8003824:	2000498a 	.word	0x2000498a

08003828 <pmMeasureExtBatteryCurrent>:
  extBatCurrAmpPerVolt = ampPerVolt;
}
*/

float pmMeasureExtBatteryCurrent(void)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
  float current;

  if (isExtBatCurrDeckPinSet)
 800382e:	4b0f      	ldr	r3, [pc, #60]	; (800386c <pmMeasureExtBatteryCurrent+0x44>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <pmMeasureExtBatteryCurrent+0x2a>
  {
    current = adc1Val * extBatCurrAmpPerVolt;
 8003836:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <pmMeasureExtBatteryCurrent+0x48>)
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <pmMeasureExtBatteryCurrent+0x4c>)
 8003844:	edd3 7a00 	vldr	s15, [r3]
 8003848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003850:	e002      	b.n	8003858 <pmMeasureExtBatteryCurrent+0x30>
  }
  else
  {
    current = 0.0;
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	607b      	str	r3, [r7, #4]
  }

  return current;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	ee07 3a90 	vmov	s15, r3
}
 800385e:	eeb0 0a67 	vmov.f32	s0, s15
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	2000496c 	.word	0x2000496c
 8003870:	2000498c 	.word	0x2000498c
 8003874:	20004970 	.word	0x20004970

08003878 <pmMeasureExtBatteryVoltage>:
  extBatVoltMultiplier = multiplier;
}
*/

float pmMeasureExtBatteryVoltage(void)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
  float voltage;

  if (isExtBatVoltDeckPinSet)
 800387e:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <pmMeasureExtBatteryVoltage+0x44>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00d      	beq.n	80038a2 <pmMeasureExtBatteryVoltage+0x2a>
  {
    voltage =  adc2Val * extBatVoltMultiplier;
 8003886:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <pmMeasureExtBatteryVoltage+0x48>)
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003892:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <pmMeasureExtBatteryVoltage+0x4c>)
 8003894:	edd3 7a00 	vldr	s15, [r3]
 8003898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389c:	edc7 7a01 	vstr	s15, [r7, #4]
 80038a0:	e002      	b.n	80038a8 <pmMeasureExtBatteryVoltage+0x30>
  }
  else
  {
    voltage = 0.0;
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	607b      	str	r3, [r7, #4]
  }

  return voltage;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	ee07 3a90 	vmov	s15, r3
}
 80038ae:	eeb0 0a67 	vmov.f32	s0, s15
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	20004962 	.word	0x20004962
 80038c0:	2000498e 	.word	0x2000498e
 80038c4:	20004964 	.word	0x20004964

080038c8 <pmTask>:
bool pmIsDischarging(void) {
  return (pmState == lowPower) || (pmState == battery);
}
*/
void pmTask(void *param)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  PMStates pmStateOld = battery;
 80038d0:	2300      	movs	r3, #0
 80038d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickCount;

  vTaskSetApplicationTaskTag(0, (void*)TASK_PM_ID_NBR);
 80038d4:	2105      	movs	r1, #5
 80038d6:	2000      	movs	r0, #0
 80038d8:	f010 fdf2 	bl	80144c0 <vTaskSetApplicationTaskTag>

  tickCount = xTaskGetTickCount();
 80038dc:	f010 fc92 	bl	8014204 <xTaskGetTickCount>
 80038e0:	6138      	str	r0, [r7, #16]
  batteryLowTimeStamp = tickCount;
 80038e2:	4a6f      	ldr	r2, [pc, #444]	; (8003aa0 <pmTask+0x1d8>)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6013      	str	r3, [r2, #0]
  batteryCriticalLowTimeStamp = tickCount;
 80038e8:	4a6e      	ldr	r2, [pc, #440]	; (8003aa4 <pmTask+0x1dc>)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6013      	str	r3, [r2, #0]

  pmSetChargeState(charge500mA);
 80038ee:	2001      	movs	r0, #1
 80038f0:	f7ff ff3c 	bl	800376c <pmSetChargeState>
  systemWaitStart();
 80038f4:	f000 fa68 	bl	8003dc8 <systemWaitStart>
  // after system startup to avoid syslink queue overflow.
//  pmEnableBatteryStatusAutoupdate();

  while(1)
  {
    vTaskDelay(100);
 80038f8:	2064      	movs	r0, #100	; 0x64
 80038fa:	f010 fac5 	bl	8013e88 <vTaskDelay>
    tickCount = xTaskGetTickCount();
 80038fe:	f010 fc81 	bl	8014204 <xTaskGetTickCount>
 8003902:	6138      	str	r0, [r7, #16]

    extBatteryVoltage = pmMeasureExtBatteryVoltage();
 8003904:	f7ff ffb8 	bl	8003878 <pmMeasureExtBatteryVoltage>
 8003908:	eef0 7a40 	vmov.f32	s15, s0
 800390c:	4b66      	ldr	r3, [pc, #408]	; (8003aa8 <pmTask+0x1e0>)
 800390e:	edc3 7a00 	vstr	s15, [r3]
    extBatteryVoltageMV = (uint16_t)(extBatteryVoltage * 1000);
 8003912:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <pmTask+0x1e0>)
 8003914:	edd3 7a00 	vldr	s15, [r3]
 8003918:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003aac <pmTask+0x1e4>
 800391c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003924:	ee17 3a90 	vmov	r3, s15
 8003928:	b29a      	uxth	r2, r3
 800392a:	4b61      	ldr	r3, [pc, #388]	; (8003ab0 <pmTask+0x1e8>)
 800392c:	801a      	strh	r2, [r3, #0]
    extBatteryCurrent = pmMeasureExtBatteryCurrent();
 800392e:	f7ff ff7b 	bl	8003828 <pmMeasureExtBatteryCurrent>
 8003932:	eef0 7a40 	vmov.f32	s15, s0
 8003936:	4b5f      	ldr	r3, [pc, #380]	; (8003ab4 <pmTask+0x1ec>)
 8003938:	edc3 7a00 	vstr	s15, [r3]
    batteryLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) * 10;
 800393c:	f7ff fea6 	bl	800368c <pmGetBatteryVoltage>
 8003940:	eef0 7a40 	vmov.f32	s15, s0
 8003944:	eeb0 0a67 	vmov.f32	s0, s15
 8003948:	f7ff fe66 	bl	8003618 <pmBatteryChargeFromVoltage>
 800394c:	4603      	mov	r3, r0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	0092      	lsls	r2, r2, #2
 8003954:	4413      	add	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4b57      	ldr	r3, [pc, #348]	; (8003ab8 <pmTask+0x1f0>)
 800395c:	701a      	strb	r2, [r3, #0]

    if (pmGetBatteryVoltage() > batteryLowVoltage)
 800395e:	f7ff fe95 	bl	800368c <pmGetBatteryVoltage>
 8003962:	eeb0 7a40 	vmov.f32	s14, s0
 8003966:	4b55      	ldr	r3, [pc, #340]	; (8003abc <pmTask+0x1f4>)
 8003968:	edd3 7a00 	vldr	s15, [r3]
 800396c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003974:	dd02      	ble.n	800397c <pmTask+0xb4>
    {
      batteryLowTimeStamp = tickCount;
 8003976:	4a4a      	ldr	r2, [pc, #296]	; (8003aa0 <pmTask+0x1d8>)
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	6013      	str	r3, [r2, #0]
    }
    if (pmGetBatteryVoltage() > batteryCriticalLowVoltage)
 800397c:	f7ff fe86 	bl	800368c <pmGetBatteryVoltage>
 8003980:	eeb0 7a40 	vmov.f32	s14, s0
 8003984:	4b4e      	ldr	r3, [pc, #312]	; (8003ac0 <pmTask+0x1f8>)
 8003986:	edd3 7a00 	vldr	s15, [r3]
 800398a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800398e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003992:	dd02      	ble.n	800399a <pmTask+0xd2>
    {
      batteryCriticalLowTimeStamp = tickCount;
 8003994:	4a43      	ldr	r2, [pc, #268]	; (8003aa4 <pmTask+0x1dc>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6013      	str	r3, [r2, #0]
    }

    pmState = pmUpdateState();
 800399a:	f7ff fef3 	bl	8003784 <pmUpdateState>
 800399e:	4603      	mov	r3, r0
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b48      	ldr	r3, [pc, #288]	; (8003ac4 <pmTask+0x1fc>)
 80039a4:	701a      	strb	r2, [r3, #0]

    if (pmState != pmStateOld)
 80039a6:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <pmTask+0x1fc>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	7dfa      	ldrb	r2, [r7, #23]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d03b      	beq.n	8003a28 <pmTask+0x160>
    {
      // Actions on state change
      switch (pmState)
 80039b0:	4b44      	ldr	r3, [pc, #272]	; (8003ac4 <pmTask+0x1fc>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d833      	bhi.n	8003a20 <pmTask+0x158>
 80039b8:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <pmTask+0xf8>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	08003a0d 	.word	0x08003a0d
 80039c4:	080039e5 	.word	0x080039e5
 80039c8:	080039d1 	.word	0x080039d1
 80039cc:	080039ff 	.word	0x080039ff
      {
        case charged:
          ledseqStop(&seq_charging);
 80039d0:	483d      	ldr	r0, [pc, #244]	; (8003ac8 <pmTask+0x200>)
 80039d2:	f7ff fc4f 	bl	8003274 <ledseqStop>
          ledseqRunBlocking(&seq_charged);
 80039d6:	483d      	ldr	r0, [pc, #244]	; (8003acc <pmTask+0x204>)
 80039d8:	f7ff fbf0 	bl	80031bc <ledseqRunBlocking>
          soundSetEffect(SND_BAT_FULL);
 80039dc:	2004      	movs	r0, #4
 80039de:	f000 f879 	bl	8003ad4 <soundSetEffect>
          break;
 80039e2:	e01e      	b.n	8003a22 <pmTask+0x15a>
        case charging:
          ledseqStop(&seq_lowbat);
 80039e4:	483a      	ldr	r0, [pc, #232]	; (8003ad0 <pmTask+0x208>)
 80039e6:	f7ff fc45 	bl	8003274 <ledseqStop>
          ledseqStop(&seq_charged);
 80039ea:	4838      	ldr	r0, [pc, #224]	; (8003acc <pmTask+0x204>)
 80039ec:	f7ff fc42 	bl	8003274 <ledseqStop>
          ledseqRunBlocking(&seq_charging);
 80039f0:	4835      	ldr	r0, [pc, #212]	; (8003ac8 <pmTask+0x200>)
 80039f2:	f7ff fbe3 	bl	80031bc <ledseqRunBlocking>
          soundSetEffect(SND_USB_CONN);
 80039f6:	2003      	movs	r0, #3
 80039f8:	f000 f86c 	bl	8003ad4 <soundSetEffect>
          break;
 80039fc:	e011      	b.n	8003a22 <pmTask+0x15a>
        case lowPower:
          ledseqRunBlocking(&seq_lowbat);
 80039fe:	4834      	ldr	r0, [pc, #208]	; (8003ad0 <pmTask+0x208>)
 8003a00:	f7ff fbdc 	bl	80031bc <ledseqRunBlocking>
          soundSetEffect(SND_BAT_LOW);
 8003a04:	2005      	movs	r0, #5
 8003a06:	f000 f865 	bl	8003ad4 <soundSetEffect>
          break;
 8003a0a:	e00a      	b.n	8003a22 <pmTask+0x15a>
        case battery:
          ledseqRunBlocking(&seq_charging);
 8003a0c:	482e      	ldr	r0, [pc, #184]	; (8003ac8 <pmTask+0x200>)
 8003a0e:	f7ff fbd5 	bl	80031bc <ledseqRunBlocking>
          ledseqRun(&seq_charged);
 8003a12:	482e      	ldr	r0, [pc, #184]	; (8003acc <pmTask+0x204>)
 8003a14:	f7ff fbb6 	bl	8003184 <ledseqRun>
          soundSetEffect(SND_USB_DISC);
 8003a18:	2002      	movs	r0, #2
 8003a1a:	f000 f85b 	bl	8003ad4 <soundSetEffect>
          break;
 8003a1e:	e000      	b.n	8003a22 <pmTask+0x15a>
        default:
          break;
 8003a20:	bf00      	nop
      }
      pmStateOld = pmState;
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <pmTask+0x1fc>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	75fb      	strb	r3, [r7, #23]
    }
    // Actions during state
    switch (pmState)
 8003a28:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <pmTask+0x1fc>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d832      	bhi.n	8003a96 <pmTask+0x1ce>
 8003a30:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <pmTask+0x170>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003a91 	.word	0x08003a91
 8003a3c:	08003a49 	.word	0x08003a49
 8003a40:	08003a97 	.word	0x08003a97
 8003a44:	08003a77 	.word	0x08003a77
      case charged:
        break;
      case charging:
        {
          // Charge level between 0.0 and 1.0
          float chargeLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) / 10.0f;
 8003a48:	f7ff fe20 	bl	800368c <pmGetBatteryVoltage>
 8003a4c:	eef0 7a40 	vmov.f32	s15, s0
 8003a50:	eeb0 0a67 	vmov.f32	s0, s15
 8003a54:	f7ff fde0 	bl	8003618 <pmBatteryChargeFromVoltage>
 8003a58:	ee07 0a90 	vmov	s15, r0
 8003a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a60:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003a64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a68:	edc7 7a02 	vstr	s15, [r7, #8]
          ledseqSetChargeLevel(chargeLevel);
 8003a6c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003a70:	f7ff fbd8 	bl	8003224 <ledseqSetChargeLevel>
        }
        break;
 8003a74:	e012      	b.n	8003a9c <pmTask+0x1d4>
      case lowPower:
        {
          uint32_t batteryCriticalLowTime;

          batteryCriticalLowTime = tickCount - batteryCriticalLowTimeStamp;
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <pmTask+0x1dc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	60fb      	str	r3, [r7, #12]
          if (batteryCriticalLowTime > PM_BAT_CRITICAL_LOW_TIMEOUT)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d907      	bls.n	8003a9a <pmTask+0x1d2>
          {
            pmSystemShutdown();
 8003a8a:	f7ff fdbd 	bl	8003608 <pmSystemShutdown>
          }
        }
        break;
 8003a8e:	e004      	b.n	8003a9a <pmTask+0x1d2>
      case battery:
        {
//          if ((commanderGetInactivityTime() > PM_SYSTEM_SHUTDOWN_TIMEOUT))
          {
            pmSystemShutdown();
 8003a90:	f7ff fdba 	bl	8003608 <pmSystemShutdown>
          }
        }
        break;
 8003a94:	e002      	b.n	8003a9c <pmTask+0x1d4>
      default:
        break;
 8003a96:	bf00      	nop
 8003a98:	e72e      	b.n	80038f8 <pmTask+0x30>
        break;
 8003a9a:	bf00      	nop
    vTaskDelay(100);
 8003a9c:	e72c      	b.n	80038f8 <pmTask+0x30>
 8003a9e:	bf00      	nop
 8003aa0:	20004974 	.word	0x20004974
 8003aa4:	20004978 	.word	0x20004978
 8003aa8:	2000495c 	.word	0x2000495c
 8003aac:	447a0000 	.word	0x447a0000
 8003ab0:	20004960 	.word	0x20004960
 8003ab4:	20004968 	.word	0x20004968
 8003ab8:	20004989 	.word	0x20004989
 8003abc:	200002b4 	.word	0x200002b4
 8003ac0:	200002b0 	.word	0x200002b0
 8003ac4:	2000497d 	.word	0x2000497d
 8003ac8:	20000204 	.word	0x20000204
 8003acc:	200001dc 	.word	0x200001dc
 8003ad0:	200000c4 	.word	0x200000c4

08003ad4 <soundSetEffect>:
{
  return isInit;
}

void soundSetEffect(uint32_t effect)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  sys_effect = effect;
 8003adc:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <soundSetEffect+0x1c>)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6013      	str	r3, [r2, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20004bac 	.word	0x20004bac

08003af4 <storageStore>:

  return pass;
}

bool storageStore(const char* key, const void* buffer, size_t length)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  if (!isInit) {
 8003b00:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <storageStore+0x48>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	f083 0301 	eor.w	r3, r3, #1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <storageStore+0x1e>
    return false;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e010      	b.n	8003b34 <storageStore+0x40>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <storageStore+0x4c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f00f fd5e 	bl	80135dc <xQueueSemaphoreTake>

//  bool result = kveStore(&kve, key, buffer, length);

  bool result = true;
 8003b20:	2301      	movs	r3, #1
 8003b22:	75fb      	strb	r3, [r7, #23]

  xSemaphoreGive(storageMutex);
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <storageStore+0x4c>)
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	f00f fad3 	bl	80130d8 <xQueueGenericSend>

  return result;
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20004bb8 	.word	0x20004bb8
 8003b40:	20004bb4 	.word	0x20004bb4

08003b44 <storageForeach>:


bool storageForeach(const char *prefix, storageFunc_t func)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
   if (!isInit) {
 8003b4e:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <storageForeach+0x48>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	f083 0301 	eor.w	r3, r3, #1
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <storageForeach+0x1c>
    return 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e010      	b.n	8003b82 <storageForeach+0x3e>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <storageForeach+0x4c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f00f fd37 	bl	80135dc <xQueueSemaphoreTake>

//  bool success = kveForeach(&kve, prefix, func);

  bool success = true;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]

  xSemaphoreGive(storageMutex);
 8003b72:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <storageForeach+0x4c>)
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	2300      	movs	r3, #0
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	f00f faac 	bl	80130d8 <xQueueGenericSend>

  return success;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20004bb8 	.word	0x20004bb8
 8003b90:	20004bb4 	.word	0x20004bb4

08003b94 <storageFetch>:

size_t storageFetch(const char *key, void* buffer, size_t length)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  if (!isInit) {
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <storageFetch+0x48>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	f083 0301 	eor.w	r3, r3, #1
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <storageFetch+0x1e>
    return 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e010      	b.n	8003bd4 <storageFetch+0x40>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <storageFetch+0x4c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f00f fd0e 	bl	80135dc <xQueueSemaphoreTake>

//  size_t result = kveFetch(&kve, key, buffer, length);


  size_t result = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]

  xSemaphoreGive(storageMutex);
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <storageFetch+0x4c>)
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2100      	movs	r1, #0
 8003bce:	f00f fa83 	bl	80130d8 <xQueueGenericSend>

  return result;
 8003bd2:	697b      	ldr	r3, [r7, #20]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20004bb8 	.word	0x20004bb8
 8003be0:	20004bb4 	.word	0x20004bb4

08003be4 <storageDelete>:

bool storageDelete(const char* key)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if (!isInit) {
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <storageDelete+0x44>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	f083 0301 	eor.w	r3, r3, #1
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <storageDelete+0x1a>
    return false;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e010      	b.n	8003c20 <storageDelete+0x3c>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <storageDelete+0x48>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c06:	4618      	mov	r0, r3
 8003c08:	f00f fce8 	bl	80135dc <xQueueSemaphoreTake>

//  bool result = kveDelete(&kve, key);

  bool result = true;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]

  xSemaphoreGive(storageMutex);
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <storageDelete+0x48>)
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	2300      	movs	r3, #0
 8003c16:	2200      	movs	r2, #0
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f00f fa5d 	bl	80130d8 <xQueueGenericSend>

  return result;
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20004bb8 	.word	0x20004bb8
 8003c2c:	20004bb4 	.word	0x20004bb4

08003c30 <storageReformat>:

bool storageReformat() {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Reformatting storage ...\n");
 8003c36:	4917      	ldr	r1, [pc, #92]	; (8003c94 <storageReformat+0x64>)
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f001 fc0d 	bl	8005458 <SEGGER_RTT_printf>

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8003c3e:	4b16      	ldr	r3, [pc, #88]	; (8003c98 <storageReformat+0x68>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c46:	4618      	mov	r0, r3
 8003c48:	f00f fcc8 	bl	80135dc <xQueueSemaphoreTake>

//  kveFormat(&kve);
//  bool pass = kveCheck(&kve);

  bool pass = true;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	71fb      	strb	r3, [r7, #7]

  xSemaphoreGive(storageMutex);
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <storageReformat+0x68>)
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	2300      	movs	r3, #0
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	f00f fa3d 	bl	80130d8 <xQueueGenericSend>

  DEBUG_PRINT("Storage check %s.\n", pass?"[OK]":"[FAIL]");
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <storageReformat+0x38>
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <storageReformat+0x6c>)
 8003c66:	e000      	b.n	8003c6a <storageReformat+0x3a>
 8003c68:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <storageReformat+0x70>)
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	490d      	ldr	r1, [pc, #52]	; (8003ca4 <storageReformat+0x74>)
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f001 fbf2 	bl	8005458 <SEGGER_RTT_printf>

  if (pass == false) {
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	f083 0301 	eor.w	r3, r3, #1
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <storageReformat+0x58>
    DEBUG_PRINT("Error: Cannot format storage!\n");
 8003c80:	4909      	ldr	r1, [pc, #36]	; (8003ca8 <storageReformat+0x78>)
 8003c82:	2000      	movs	r0, #0
 8003c84:	f001 fbe8 	bl	8005458 <SEGGER_RTT_printf>
  }

  return pass;
 8003c88:	79fb      	ldrb	r3, [r7, #7]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	0801a47c 	.word	0x0801a47c
 8003c98:	20004bb4 	.word	0x20004bb4
 8003c9c:	0801a458 	.word	0x0801a458
 8003ca0:	0801a460 	.word	0x0801a460
 8003ca4:	0801a468 	.word	0x0801a468
 8003ca8:	0801a498 	.word	0x0801a498

08003cac <storagePrintStats>:

void storagePrintStats()
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Efficiency: Data: %d Bytes (%d%%), Keys: %d Bytes (%d%%), Metadata: %d Bytes (%d%%)\n",
    stats.dataSize, (stats.dataSize*100)/stats.totalSize,
    stats.keySize, (stats.keySize*100)/stats.totalSize,
    stats.metadataSize, (stats.metadataSize*100)/stats.totalSize);
    */
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <printStats>:

static bool storageStats;

static void printStats(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  if (storageStats) {
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <printStats+0x1c>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d004      	beq.n	8003cd2 <printStats+0x16>
    storagePrintStats();
 8003cc8:	f7ff fff0 	bl	8003cac <storagePrintStats>

    storageStats = false;
 8003ccc:	4b02      	ldr	r3, [pc, #8]	; (8003cd8 <printStats+0x1c>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
  }
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20004bb9 	.word	0x20004bb9

08003cdc <doReformat>:

static bool reformatValue;

static void doReformat(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  if (reformatValue) {
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <doReformat+0x14>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <doReformat+0x10>
    storageReformat();
 8003ce8:	f7ff ffa2 	bl	8003c30 <storageReformat>
  }
}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20004bba 	.word	0x20004bba

08003cf4 <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 8003cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <systemLaunch+0x30>)
 8003d02:	9302      	str	r3, [sp, #8]
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <systemLaunch+0x34>)
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	2302      	movs	r3, #2
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	4907      	ldr	r1, [pc, #28]	; (8003d2c <systemLaunch+0x38>)
 8003d10:	4807      	ldr	r0, [pc, #28]	; (8003d30 <systemLaunch+0x3c>)
 8003d12:	f00f ff01 	bl	8013b18 <xTaskCreateStatic>
  DEBUG_PRINT("[TASK] systemTask is running!\n");
 8003d16:	4907      	ldr	r1, [pc, #28]	; (8003d34 <systemLaunch+0x40>)
 8003d18:	2000      	movs	r0, #0
 8003d1a:	f001 fb9d 	bl	8005458 <SEGGER_RTT_printf>

}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20001bcc 	.word	0x20001bcc
 8003d28:	20004bd4 	.word	0x20004bd4
 8003d2c:	0801a4ec 	.word	0x0801a4ec
 8003d30:	08003d39 	.word	0x08003d39
 8003d34:	0801a4f4 	.word	0x0801a4f4

08003d38 <systemTask>:


/* Private functions implementation */

void systemTask(void *arg)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  bool pass = true;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]


  uint32_t ld = SysTick->LOAD;
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <systemTask+0x74>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	60bb      	str	r3, [r7, #8]
  time1 = DWT->CYCCNT;
 8003d4a:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <systemTask+0x78>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <systemTask+0x7c>)
 8003d50:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1ms
 8003d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d56:	f005 fa1d 	bl	8009194 <delay_us>
  time2 = DWT->CYCCNT;
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <systemTask+0x78>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <systemTask+0x80>)
 8003d60:	6013      	str	r3, [r2, #0]
  DEBUG_PRINT("delay = %d(us)\n",(uint32_t)(time2-time1)/CLOCK_PER_USEC);
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <systemTask+0x80>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <systemTask+0x7c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <systemTask+0x84>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	091b      	lsrs	r3, r3, #4
 8003d74:	461a      	mov	r2, r3
 8003d76:	4912      	ldr	r1, [pc, #72]	; (8003dc0 <systemTask+0x88>)
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f001 fb6d 	bl	8005458 <SEGGER_RTT_printf>


  ledInit();
 8003d7e:	f7ff f895 	bl	8002eac <ledInit>
  ledSet(CHG_LED, SET);
 8003d82:	2101      	movs	r1, #1
 8003d84:	2000      	movs	r0, #0
 8003d86:	f7ff f903 	bl	8002f90 <ledSet>


#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  queueMonitorInit();
 8003d8a:	f004 fa4f 	bl	800822c <queueMonitorInit>

  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

  ICM20602_Initialization();	// 여기서 일정 시간 지연이 있어야 STM32 VCP 포트가 활성화됨 원인파악중
 8003d8e:	f7fe fedf 	bl	8002b50 <ICM20602_Initialization>

  delay_us(5000000);
 8003d92:	480c      	ldr	r0, [pc, #48]	; (8003dc4 <systemTask+0x8c>)
 8003d94:	f005 f9fe 	bl	8009194 <delay_us>

  passthroughInit();	// Create passthrough task
 8003d98:	f000 fbac 	bl	80044f4 <passthroughInit>

  systemInit();
 8003d9c:	f000 f836 	bl	8003e0c <systemInit>
  commInit();
 8003da0:	f7fd fac6 	bl	8001330 <commInit>
    vTaskDelay(portMAX_DELAY);


    */

}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	e000e010 	.word	0xe000e010
 8003db0:	e0001000 	.word	0xe0001000
 8003db4:	20004bcc 	.word	0x20004bcc
 8003db8:	20004bd0 	.word	0x20004bd0
 8003dbc:	38e38e39 	.word	0x38e38e39
 8003dc0:	0801a514 	.word	0x0801a514
 8003dc4:	004c4b40 	.word	0x004c4b40

08003dc8 <systemWaitStart>:



void systemWaitStart(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  //This permits to guarantee that the system task is initialized before other
  //tasks waits for the start event.
  while(!isInit)
 8003dcc:	e002      	b.n	8003dd4 <systemWaitStart+0xc>
    vTaskDelay(2);
 8003dce:	2002      	movs	r0, #2
 8003dd0:	f010 f85a 	bl	8013e88 <vTaskDelay>
  while(!isInit)
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <systemWaitStart+0x3c>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	f083 0301 	eor.w	r3, r3, #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f5      	bne.n	8003dce <systemWaitStart+0x6>

  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <systemWaitStart+0x40>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003dea:	4618      	mov	r0, r3
 8003dec:	f00f fbf6 	bl	80135dc <xQueueSemaphoreTake>
  xSemaphoreGive(canStartMutex);
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <systemWaitStart+0x40>)
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	2300      	movs	r3, #0
 8003df6:	2200      	movs	r2, #0
 8003df8:	2100      	movs	r1, #0
 8003dfa:	f00f f96d 	bl	80130d8 <xQueueGenericSend>
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20004bbb 	.word	0x20004bbb
 8003e08:	20004fd4 	.word	0x20004fd4

08003e0c <systemInit>:



// This must be the first module to be initialized!
void systemInit(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af02      	add	r7, sp, #8
  if(isInit)
 8003e12:	4b46      	ldr	r3, [pc, #280]	; (8003f2c <systemInit+0x120>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 8085 	bne.w	8003f26 <systemInit+0x11a>
    return;

  canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 8003e1c:	4944      	ldr	r1, [pc, #272]	; (8003f30 <systemInit+0x124>)
 8003e1e:	2001      	movs	r0, #1
 8003e20:	f00f f93f 	bl	80130a2 <xQueueCreateMutexStatic>
 8003e24:	4603      	mov	r3, r0
 8003e26:	4a43      	ldr	r2, [pc, #268]	; (8003f34 <systemInit+0x128>)
 8003e28:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8003e2a:	4b42      	ldr	r3, [pc, #264]	; (8003f34 <systemInit+0x128>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e32:	4618      	mov	r0, r3
 8003e34:	f00f fbd2 	bl	80135dc <xQueueSemaphoreTake>

  usblinkInit();
 8003e38:	f000 fb16 	bl	8004468 <usblinkInit>
  DEBUG_PRINT("[TASK] usblinkTask is running!\n");
 8003e3c:	493e      	ldr	r1, [pc, #248]	; (8003f38 <systemInit+0x12c>)
 8003e3e:	2000      	movs	r0, #0
 8003e40:	f001 fb0a 	bl	8005458 <SEGGER_RTT_printf>

  sysLoadInit();
 8003e44:	f004 fb68 	bl	8008518 <sysLoadInit>
  DEBUG_PRINT("sysLoadMonitorTimer is Initialized\n");
 8003e48:	493c      	ldr	r1, [pc, #240]	; (8003f3c <systemInit+0x130>)
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	f001 fb04 	bl	8005458 <SEGGER_RTT_printf>
//  cpxlinkInit();
#endif

  /* Initialized here so that DEBUG_PRINT (buffered) can be used early */
//  debugInit();
  crtpInit();
 8003e50:	f7fd fa90 	bl	8001374 <crtpInit>
  DEBUG_PRINT("[TASK] crtpTxTask is running!\n");
 8003e54:	493a      	ldr	r1, [pc, #232]	; (8003f40 <systemInit+0x134>)
 8003e56:	2000      	movs	r0, #0
 8003e58:	f001 fafe 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("[TASK] crtpRxTask is running!\n");
 8003e5c:	4939      	ldr	r1, [pc, #228]	; (8003f44 <systemInit+0x138>)
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f001 fafa 	bl	8005458 <SEGGER_RTT_printf>

  consoleInit();
 8003e64:	f001 fb6c 	bl	8005540 <consoleInit>

  DEBUG_PRINT("%s is up and running!\n", platformConfigGetDeviceTypeName());
 8003e68:	f000 fc56 	bl	8004718 <platformConfigGetDeviceTypeName>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4935      	ldr	r1, [pc, #212]	; (8003f48 <systemInit+0x13c>)
 8003e72:	2000      	movs	r0, #0
 8003e74:	f001 faf0 	bl	8005458 <SEGGER_RTT_printf>

  if (V_PRODUCTION_RELEASE) {
 8003e78:	4b34      	ldr	r3, [pc, #208]	; (8003f4c <systemInit+0x140>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <systemInit+0x84>
    DEBUG_PRINT("Production release %s\n", V_STAG);
 8003e80:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <systemInit+0x144>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	4933      	ldr	r1, [pc, #204]	; (8003f54 <systemInit+0x148>)
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f001 fae5 	bl	8005458 <SEGGER_RTT_printf>
 8003e8e:	e014      	b.n	8003eba <systemInit+0xae>
  } else {
    DEBUG_PRINT("Build %s:%s (%s) %s\n", V_SLOCAL_REVISION,
 8003e90:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <systemInit+0x14c>)
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	4b31      	ldr	r3, [pc, #196]	; (8003f5c <systemInit+0x150>)
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	4b2d      	ldr	r3, [pc, #180]	; (8003f50 <systemInit+0x144>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a30      	ldr	r2, [pc, #192]	; (8003f60 <systemInit+0x154>)
 8003e9e:	7812      	ldrb	r2, [r2, #0]
 8003ea0:	2a00      	cmp	r2, #0
 8003ea2:	d001      	beq.n	8003ea8 <systemInit+0x9c>
 8003ea4:	4a2f      	ldr	r2, [pc, #188]	; (8003f64 <systemInit+0x158>)
 8003ea6:	e000      	b.n	8003eaa <systemInit+0x9e>
 8003ea8:	4a2f      	ldr	r2, [pc, #188]	; (8003f68 <systemInit+0x15c>)
 8003eaa:	9201      	str	r2, [sp, #4]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	4603      	mov	r3, r0
 8003eb0:	460a      	mov	r2, r1
 8003eb2:	492e      	ldr	r1, [pc, #184]	; (8003f6c <systemInit+0x160>)
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	f001 facf 	bl	8005458 <SEGGER_RTT_printf>
                V_SREVISION, V_STAG, (V_MODIFIED)?"MODIFIED":"CLEAN");
  }
  DEBUG_PRINT("I am 0x%08X%08X%08X and I have %dKB of flash!\n",
 8003eba:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <systemInit+0x164>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <systemInit+0x168>)
 8003ec0:	6819      	ldr	r1, [r3, #0]
 8003ec2:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <systemInit+0x16c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	482d      	ldr	r0, [pc, #180]	; (8003f7c <systemInit+0x170>)
 8003ec8:	f9b0 0000 	ldrsh.w	r0, [r0]
 8003ecc:	9001      	str	r0, [sp, #4]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	492b      	ldr	r1, [pc, #172]	; (8003f80 <systemInit+0x174>)
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f001 fabf 	bl	8005458 <SEGGER_RTT_printf>
              *((int*)(MCU_ID_ADDRESS+8)), *((int*)(MCU_ID_ADDRESS+4)),
              *((int*)(MCU_ID_ADDRESS+0)), *((short*)(MCU_FLASH_SIZE_ADDRESS)));

//  configblockInit();			// 현재 디바이스에 EEPROM이 존재하지 않음
//  storageInit();
  workerInit();
 8003eda:	f004 fc81 	bl	80087e0 <workerInit>
  ledseqInit();
 8003ede:	f7ff f899 	bl	8003014 <ledseqInit>
  DEBUG_PRINT("[TASK] lesdeqCmdTask is running!\n");
 8003ee2:	4928      	ldr	r1, [pc, #160]	; (8003f84 <systemInit+0x178>)
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f001 fab7 	bl	8005458 <SEGGER_RTT_printf>


  pmInit();
 8003eea:	f7ff fb07 	bl	80034fc <pmInit>
  DEBUG_PRINT("[TASK] pmTask is running!\n");
 8003eee:	4926      	ldr	r1, [pc, #152]	; (8003f88 <systemInit+0x17c>)
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	f001 fab1 	bl	8005458 <SEGGER_RTT_printf>

  buzzerInit();
 8003ef6:	f7fe feff 	bl	8002cf8 <buzzerInit>
  buzzerOn(3000);
  HAL_Delay(2);
  buzzerOn(2000);
  HAL_Delay(2);
  */
  buzzerOff();
 8003efa:	f7fe ff0d 	bl	8002d18 <buzzerOff>

  peerLocalizationInit();
 8003efe:	f7fd f92b 	bl	8001158 <peerLocalizationInit>
  DEBUG_PRINT("peerLocalization is Initialized!\n");
 8003f02:	4922      	ldr	r1, [pc, #136]	; (8003f8c <systemInit+0x180>)
 8003f04:	2000      	movs	r0, #0
 8003f06:	f001 faa7 	bl	8005458 <SEGGER_RTT_printf>


#ifdef CONFIG_APP_ENABLE
  DEBUG_PRINT("-------------- Start User application -----------------\n");
 8003f0a:	4921      	ldr	r1, [pc, #132]	; (8003f90 <systemInit+0x184>)
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f001 faa3 	bl	8005458 <SEGGER_RTT_printf>
  appInit();
 8003f12:	f7fd f9c5 	bl	80012a0 <appInit>
  DEBUG_PRINT("[TASK] appTask is running!\n");
 8003f16:	491f      	ldr	r1, [pc, #124]	; (8003f94 <systemInit+0x188>)
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f001 fa9d 	bl	8005458 <SEGGER_RTT_printf>
#endif

  isInit = true;
 8003f1e:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <systemInit+0x120>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	e000      	b.n	8003f28 <systemInit+0x11c>
    return;
 8003f26:	bf00      	nop
}
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20004bbb 	.word	0x20004bbb
 8003f30:	20004fd8 	.word	0x20004fd8
 8003f34:	20004fd4 	.word	0x20004fd4
 8003f38:	0801a524 	.word	0x0801a524
 8003f3c:	0801a544 	.word	0x0801a544
 8003f40:	0801a568 	.word	0x0801a568
 8003f44:	0801a588 	.word	0x0801a588
 8003f48:	0801a5a8 	.word	0x0801a5a8
 8003f4c:	0801c349 	.word	0x0801c349
 8003f50:	2000033c 	.word	0x2000033c
 8003f54:	0801a5c0 	.word	0x0801a5c0
 8003f58:	20000334 	.word	0x20000334
 8003f5c:	20000338 	.word	0x20000338
 8003f60:	0801c348 	.word	0x0801c348
 8003f64:	0801a5d8 	.word	0x0801a5d8
 8003f68:	0801a5e4 	.word	0x0801a5e4
 8003f6c:	0801a5ec 	.word	0x0801a5ec
 8003f70:	1fff7a18 	.word	0x1fff7a18
 8003f74:	1fff7a14 	.word	0x1fff7a14
 8003f78:	1fff7a10 	.word	0x1fff7a10
 8003f7c:	1fff7a22 	.word	0x1fff7a22
 8003f80:	0801a604 	.word	0x0801a604
 8003f84:	0801a634 	.word	0x0801a634
 8003f88:	0801a658 	.word	0x0801a658
 8003f8c:	0801a674 	.word	0x0801a674
 8003f90:	0801a698 	.word	0x0801a698
 8003f94:	0801a6d4 	.word	0x0801a6d4

08003f98 <systemSyslinkReceive>:

void systemSyslinkReceive(SyslinkPacket *slp)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_SYS_NRF_VERSION)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b30      	cmp	r3, #48	; 0x30
 8003fa6:	d114      	bne.n	8003fd2 <systemSyslinkReceive+0x3a>
  {
    size_t len = slp->length - 1;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	785b      	ldrb	r3, [r3, #1]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	60fb      	str	r3, [r7, #12]

    if (sizeof(nrf_version) - 1 <=  len) {
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b0e      	cmp	r3, #14
 8003fb4:	d901      	bls.n	8003fba <systemSyslinkReceive+0x22>
      len = sizeof(nrf_version) - 1;
 8003fb6:	230f      	movs	r3, #15
 8003fb8:	60fb      	str	r3, [r7, #12]
    }
    memcpy(&nrf_version, &slp->data[0], len );
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4806      	ldr	r0, [pc, #24]	; (8003fdc <systemSyslinkReceive+0x44>)
 8003fc4:	f013 fd95 	bl	8017af2 <memcpy>
    DEBUG_PRINT("NRF51 version: %s\n", nrf_version);
 8003fc8:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <systemSyslinkReceive+0x44>)
 8003fca:	4905      	ldr	r1, [pc, #20]	; (8003fe0 <systemSyslinkReceive+0x48>)
 8003fcc:	2000      	movs	r0, #0
 8003fce:	f001 fa43 	bl	8005458 <SEGGER_RTT_printf>
  }
}
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20004bbc 	.word	0x20004bbc
 8003fe0:	0801a6f0 	.word	0x0801a6f0

08003fe4 <uartslkDmaInit>:
/**
  * Configures the UART DMA. Mainly used for FreeRTOS trace
  * data transfer.
  */
void uartslkDmaInit(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0

#ifdef CONFIG_SYSLINK_DMA

	HAL_UART_MspInit(&huart6);
 8003fe8:	4803      	ldr	r0, [pc, #12]	; (8003ff8 <uartslkDmaInit+0x14>)
 8003fea:	f005 fa8d 	bl	8009508 <HAL_UART_MspInit>

#endif

isUartDmaInitialized = true;
 8003fee:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <uartslkDmaInit+0x18>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	701a      	strb	r2, [r3, #0]

}
 8003ff4:	bf00      	nop
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20007dd8 	.word	0x20007dd8
 8003ffc:	20005118 	.word	0x20005118

08004000 <uartslkInit>:

void uartslkInit(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af02      	add	r7, sp, #8
  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 8004006:	2303      	movs	r3, #3
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4b42      	ldr	r3, [pc, #264]	; (8004114 <uartslkInit+0x114>)
 800400c:	2200      	movs	r2, #0
 800400e:	2100      	movs	r1, #0
 8004010:	2001      	movs	r0, #1
 8004012:	f00e ff4b 	bl	8012eac <xQueueGenericCreateStatic>
 8004016:	4603      	mov	r3, r0
 8004018:	4a3f      	ldr	r2, [pc, #252]	; (8004118 <uartslkInit+0x118>)
 800401a:	6013      	str	r3, [r2, #0]
  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 800401c:	2303      	movs	r3, #3
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	4b3e      	ldr	r3, [pc, #248]	; (800411c <uartslkInit+0x11c>)
 8004022:	2200      	movs	r2, #0
 8004024:	2100      	movs	r1, #0
 8004026:	2001      	movs	r0, #1
 8004028:	f00e ff40 	bl	8012eac <xQueueGenericCreateStatic>
 800402c:	4603      	mov	r3, r0
 800402e:	4a3c      	ldr	r2, [pc, #240]	; (8004120 <uartslkInit+0x120>)
 8004030:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 8004032:	4b3b      	ldr	r3, [pc, #236]	; (8004120 <uartslkInit+0x120>)
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	2300      	movs	r3, #0
 8004038:	2200      	movs	r2, #0
 800403a:	2100      	movs	r1, #0
 800403c:	f00f f84c 	bl	80130d8 <xQueueGenericSend>

  syslinkPacketDelivery = STATIC_MEM_QUEUE_CREATE(syslinkPacketDelivery);
 8004040:	2308      	movs	r3, #8
 8004042:	4618      	mov	r0, r3
 8004044:	2342      	movs	r3, #66	; 0x42
 8004046:	4619      	mov	r1, r3
 8004048:	2300      	movs	r3, #0
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	4b35      	ldr	r3, [pc, #212]	; (8004124 <uartslkInit+0x124>)
 800404e:	4a36      	ldr	r2, [pc, #216]	; (8004128 <uartslkInit+0x128>)
 8004050:	f00e ff2c 	bl	8012eac <xQueueGenericCreateStatic>
 8004054:	4603      	mov	r3, r0
 8004056:	4a35      	ldr	r2, [pc, #212]	; (800412c <uartslkInit+0x12c>)
 8004058:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(syslinkPacketDelivery);
 800405a:	4b34      	ldr	r3, [pc, #208]	; (800412c <uartslkInit+0x12c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a34      	ldr	r2, [pc, #208]	; (8004130 <uartslkInit+0x130>)
 8004060:	4934      	ldr	r1, [pc, #208]	; (8004134 <uartslkInit+0x134>)
 8004062:	4618      	mov	r0, r3
 8004064:	f004 f92a 	bl	80082bc <qmRegisterQueue>


  GPIO_InitTypeDef GPIO_InitStruct;
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004068:	2300      	movs	r3, #0
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4b32      	ldr	r3, [pc, #200]	; (8004138 <uartslkInit+0x138>)
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	4a31      	ldr	r2, [pc, #196]	; (8004138 <uartslkInit+0x138>)
 8004072:	f043 0304 	orr.w	r3, r3, #4
 8004076:	6313      	str	r3, [r2, #48]	; 0x30
 8004078:	4b2f      	ldr	r3, [pc, #188]	; (8004138 <uartslkInit+0x138>)
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	603b      	str	r3, [r7, #0]
 8004082:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004084:	2200      	movs	r2, #0
 8004086:	2140      	movs	r1, #64	; 0x40
 8004088:	482c      	ldr	r0, [pc, #176]	; (800413c <uartslkInit+0x13c>)
 800408a:	f007 f823 	bl	800b0d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800408e:	2200      	movs	r2, #0
 8004090:	2180      	movs	r1, #128	; 0x80
 8004092:	482a      	ldr	r0, [pc, #168]	; (800413c <uartslkInit+0x13c>)
 8004094:	f007 f81e 	bl	800b0d4 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 8004098:	23c0      	movs	r3, #192	; 0xc0
 800409a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409c:	2302      	movs	r3, #2
 800409e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040a0:	2301      	movs	r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a4:	2303      	movs	r3, #3
 80040a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4823      	ldr	r0, [pc, #140]	; (800413c <uartslkInit+0x13c>)
 80040ae:	f006 fe75 	bl	800ad9c <HAL_GPIO_Init>
  huart6.Init.BaudRate = 2000000;
  huart6.Init.Mode = UART_MODE_TX;

#else

  huart6.Instance = USART6;
 80040b2:	4b23      	ldr	r3, [pc, #140]	; (8004140 <uartslkInit+0x140>)
 80040b4:	4a23      	ldr	r2, [pc, #140]	; (8004144 <uartslkInit+0x144>)
 80040b6:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1000000;
 80040b8:	4b21      	ldr	r3, [pc, #132]	; (8004140 <uartslkInit+0x140>)
 80040ba:	4a23      	ldr	r2, [pc, #140]	; (8004148 <uartslkInit+0x148>)
 80040bc:	605a      	str	r2, [r3, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80040be:	4b20      	ldr	r3, [pc, #128]	; (8004140 <uartslkInit+0x140>)
 80040c0:	220c      	movs	r2, #12
 80040c2:	615a      	str	r2, [r3, #20]

#endif

  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80040c4:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <uartslkInit+0x140>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80040ca:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <uartslkInit+0x140>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80040d0:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <uartslkInit+0x140>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	611a      	str	r2, [r3, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <uartslkInit+0x140>)
 80040d8:	2200      	movs	r2, #0
 80040da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80040dc:	4b18      	ldr	r3, [pc, #96]	; (8004140 <uartslkInit+0x140>)
 80040de:	2200      	movs	r2, #0
 80040e0:	61da      	str	r2, [r3, #28]


  if (HAL_UART_Init(&huart6) != HAL_OK)
 80040e2:	4817      	ldr	r0, [pc, #92]	; (8004140 <uartslkInit+0x140>)
 80040e4:	f009 ffd0 	bl	800e088 <HAL_UART_Init>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <uartslkInit+0xf2>
  {
    Error_Handler();
 80040ee:	f005 f87d 	bl	80091ec <Error_Handler>
  }


  uartslkDmaInit();
 80040f2:	f7ff ff77 	bl	8003fe4 <uartslkDmaInit>

  // Setting up TXEN pin (NRF flow control)
  // 향후 외부핀 PA4 연결 필요

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <uartslkInit+0x140>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <uartslkInit+0x140>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0220 	orr.w	r2, r2, #32
 8004104:	60da      	str	r2, [r3, #12]

  isInit = true;
 8004106:	4b11      	ldr	r3, [pc, #68]	; (800414c <uartslkInit+0x14c>)
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
}
 800410c:	bf00      	nop
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20005030 	.word	0x20005030
 8004118:	2000502c 	.word	0x2000502c
 800411c:	20005084 	.word	0x20005084
 8004120:	20005080 	.word	0x20005080
 8004124:	20001e94 	.word	0x20001e94
 8004128:	20001c84 	.word	0x20001c84
 800412c:	200050d4 	.word	0x200050d4
 8004130:	0801a704 	.word	0x0801a704
 8004134:	0801a71c 	.word	0x0801a71c
 8004138:	40023800 	.word	0x40023800
 800413c:	40020800 	.word	0x40020800
 8004140:	20007dd8 	.word	0x20007dd8
 8004144:	40011400 	.word	0x40011400
 8004148:	000f4240 	.word	0x000f4240
 800414c:	20005028 	.word	0x20005028

08004150 <uartslkGetPacketBlocking>:
{
  syslinkPacketDeliveryReadyToReceive = true;
}

void uartslkGetPacketBlocking(SyslinkPacket* packet)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  xQueueReceive(syslinkPacketDelivery, packet, portMAX_DELAY);
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <uartslkGetPacketBlocking+0x20>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	4618      	mov	r0, r3
 8004164:	f00f f95a 	bl	801341c <xQueueReceive>
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	200050d4 	.word	0x200050d4

08004174 <uartslkSendDataDmaBlocking>:

    return (unsigned char)ch;
}

void uartslkSendDataDmaBlocking(uint32_t size, uint8_t* data)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  if (dmaNrfFlowControlBufferFull) {
 800417e:	4b22      	ldr	r3, [pc, #136]	; (8004208 <uartslkSendDataDmaBlocking+0x94>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <uartslkSendDataDmaBlocking+0x1c>
    dmaSendWhileNrfBufferFull++;
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <uartslkSendDataDmaBlocking+0x98>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3301      	adds	r3, #1
 800418c:	4a1f      	ldr	r2, [pc, #124]	; (800420c <uartslkSendDataDmaBlocking+0x98>)
 800418e:	6013      	str	r3, [r2, #0]
  }

  if (isUartDmaInitialized)
 8004190:	4b1f      	ldr	r3, [pc, #124]	; (8004210 <uartslkSendDataDmaBlocking+0x9c>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d032      	beq.n	80041fe <uartslkSendDataDmaBlocking+0x8a>
  {
    xSemaphoreTake(uartBusy, portMAX_DELAY);
 8004198:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <uartslkSendDataDmaBlocking+0xa0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041a0:	4618      	mov	r0, r3
 80041a2:	f00f fa1b 	bl	80135dc <xQueueSemaphoreTake>
    // Wait for DMA to be free
    while(HAL_DMA_GetState(&hdma_usart6_tx) != HAL_DMA_STATE_READY);
 80041a6:	bf00      	nop
 80041a8:	481b      	ldr	r0, [pc, #108]	; (8004218 <uartslkSendDataDmaBlocking+0xa4>)
 80041aa:	f006 fd09 	bl	800abc0 <HAL_DMA_GetState>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d1f9      	bne.n	80041a8 <uartslkSendDataDmaBlocking+0x34>

    //Copy data in DMA buffer
    memcpy(dmaTXBuffer, data, size);
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6839      	ldr	r1, [r7, #0]
 80041b8:	4818      	ldr	r0, [pc, #96]	; (800421c <uartslkSendDataDmaBlocking+0xa8>)
 80041ba:	f013 fc9a 	bl	8017af2 <memcpy>
    initialDMACount = (uint16_t)size;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	4b17      	ldr	r3, [pc, #92]	; (8004220 <uartslkSendDataDmaBlocking+0xac>)
 80041c4:	801a      	strh	r2, [r3, #0]

    if(HAL_UART_Transmit_DMA(&huart6, dmaTXBuffer, size)!=HAL_OK){
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	4913      	ldr	r1, [pc, #76]	; (800421c <uartslkSendDataDmaBlocking+0xa8>)
 80041ce:	4815      	ldr	r0, [pc, #84]	; (8004224 <uartslkSendDataDmaBlocking+0xb0>)
 80041d0:	f009 ffaa 	bl	800e128 <HAL_UART_Transmit_DMA>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <uartslkSendDataDmaBlocking+0x6e>
    	DEBUG_PRINT("DMA transfer failed\n");
 80041da:	4913      	ldr	r1, [pc, #76]	; (8004228 <uartslkSendDataDmaBlocking+0xb4>)
 80041dc:	2000      	movs	r0, #0
 80041de:	f001 f93b 	bl	8005458 <SEGGER_RTT_printf>
    }
    xSemaphoreTake(waitUntilSendDone, portMAX_DELAY);
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <uartslkSendDataDmaBlocking+0xb8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041ea:	4618      	mov	r0, r3
 80041ec:	f00f f9f6 	bl	80135dc <xQueueSemaphoreTake>
    xSemaphoreGive(uartBusy);
 80041f0:	4b08      	ldr	r3, [pc, #32]	; (8004214 <uartslkSendDataDmaBlocking+0xa0>)
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	2300      	movs	r3, #0
 80041f6:	2200      	movs	r2, #0
 80041f8:	2100      	movs	r1, #0
 80041fa:	f00e ff6d 	bl	80130d8 <xQueueGenericSend>

  }
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	2000512c 	.word	0x2000512c
 800420c:	20005130 	.word	0x20005130
 8004210:	20005118 	.word	0x20005118
 8004214:	20005080 	.word	0x20005080
 8004218:	20007e20 	.word	0x20007e20
 800421c:	200050d8 	.word	0x200050d8
 8004220:	2000511a 	.word	0x2000511a
 8004224:	20007dd8 	.word	0x20007dd8
 8004228:	0801a740 	.word	0x0801a740
 800422c:	2000502c 	.word	0x2000502c

08004230 <uartSyslinkDumpDebugProbe>:
#endif

*/


void uartSyslinkDumpDebugProbe() {
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  DEBUG_PRINT("STM dmaPausedCounter: %ld\n",dmaPausedCounter);
 8004234:	4b12      	ldr	r3, [pc, #72]	; (8004280 <uartSyslinkDumpDebugProbe+0x50>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	4912      	ldr	r1, [pc, #72]	; (8004284 <uartSyslinkDumpDebugProbe+0x54>)
 800423c:	2000      	movs	r0, #0
 800423e:	f001 f90b 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaTxStreamPausedCounter: %ld\n", dmaTxStreamPausedCounter);
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <uartSyslinkDumpDebugProbe+0x58>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	4910      	ldr	r1, [pc, #64]	; (800428c <uartSyslinkDumpDebugProbe+0x5c>)
 800424a:	2000      	movs	r0, #0
 800424c:	f001 f904 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaResumedCounter: %ld\n", dmaResumedCounter);
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <uartSyslinkDumpDebugProbe+0x60>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	490f      	ldr	r1, [pc, #60]	; (8004294 <uartSyslinkDumpDebugProbe+0x64>)
 8004258:	2000      	movs	r0, #0
 800425a:	f001 f8fd 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaTxStreamResumedCounter: %ld\n", dmaTxStreamResumedCounter);
 800425e:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <uartSyslinkDumpDebugProbe+0x68>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	490d      	ldr	r1, [pc, #52]	; (800429c <uartSyslinkDumpDebugProbe+0x6c>)
 8004266:	2000      	movs	r0, #0
 8004268:	f001 f8f6 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaSendWhileNrfBufferFull: %ld\n", dmaSendWhileNrfBufferFull);
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <uartSyslinkDumpDebugProbe+0x70>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	490c      	ldr	r1, [pc, #48]	; (80042a4 <uartSyslinkDumpDebugProbe+0x74>)
 8004274:	2000      	movs	r0, #0
 8004276:	f001 f8ef 	bl	8005458 <SEGGER_RTT_printf>
}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	2000511c 	.word	0x2000511c
 8004284:	0801a758 	.word	0x0801a758
 8004288:	20005120 	.word	0x20005120
 800428c:	0801a774 	.word	0x0801a774
 8004290:	20005124 	.word	0x20005124
 8004294:	0801a798 	.word	0x0801a798
 8004298:	20005128 	.word	0x20005128
 800429c:	0801a7b4 	.word	0x0801a7b4
 80042a0:	20005130 	.word	0x20005130
 80042a4:	0801a7d8 	.word	0x0801a7d8

080042a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	db0b      	blt.n	80042d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	f003 021f 	and.w	r2, r3, #31
 80042c0:	4907      	ldr	r1, [pc, #28]	; (80042e0 <__NVIC_EnableIRQ+0x38>)
 80042c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	2001      	movs	r0, #1
 80042ca:	fa00 f202 	lsl.w	r2, r0, r2
 80042ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	e000e100 	.word	0xe000e100

080042e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	db12      	blt.n	800431c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	f003 021f 	and.w	r2, r3, #31
 80042fc:	490a      	ldr	r1, [pc, #40]	; (8004328 <__NVIC_DisableIRQ+0x44>)
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	2001      	movs	r0, #1
 8004306:	fa00 f202 	lsl.w	r2, r0, r2
 800430a:	3320      	adds	r3, #32
 800430c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004310:	f3bf 8f4f 	dsb	sy
}
 8004314:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004316:	f3bf 8f6f 	isb	sy
}
 800431a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000e100 	.word	0xe000e100

0800432c <usbGetDataBlocking>:
};
*/


bool usbGetDataBlocking(USBPacket *in)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  while (xQueueReceive(usbDataRx, in, portMAX_DELAY) != pdTRUE); // Don't return until we get some data on the USB
 8004334:	bf00      	nop
 8004336:	4b11      	ldr	r3, [pc, #68]	; (800437c <usbGetDataBlocking+0x50>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4618      	mov	r0, r3
 8004342:	f00f f86b 	bl	801341c <xQueueReceive>
 8004346:	4603      	mov	r3, r0
 8004348:	2b01      	cmp	r3, #1
 800434a:	d1f4      	bne.n	8004336 <usbGetDataBlocking+0xa>

  // Disabling USB interrupt to make sure we can check and re-enable the endpoint
  // if it is not currently accepting data (ie. can happen if the RX queue was full)
  NVIC_DisableIRQ(OTG_FS_IRQn);
 800434c:	2043      	movs	r0, #67	; 0x43
 800434e:	f7ff ffc9 	bl	80042e4 <__NVIC_DisableIRQ>
  if (rxStopped) {
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <usbGetDataBlocking+0x54>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d008      	beq.n	800436c <usbGetDataBlocking+0x40>
	  USBD_LL_PrepareReceive(&hUsbDeviceFS, CF_OUT_EP, (uint8_t*)(inPacket.data), USB_RX_TX_PACKET_SIZE);
 800435a:	2340      	movs	r3, #64	; 0x40
 800435c:	4a09      	ldr	r2, [pc, #36]	; (8004384 <usbGetDataBlocking+0x58>)
 800435e:	2101      	movs	r1, #1
 8004360:	4809      	ldr	r0, [pc, #36]	; (8004388 <usbGetDataBlocking+0x5c>)
 8004362:	f012 fb6d 	bl	8016a40 <USBD_LL_PrepareReceive>
    rxStopped = false;
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <usbGetDataBlocking+0x54>)
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
  }
  NVIC_EnableIRQ(OTG_FS_IRQn);
 800436c:	2043      	movs	r0, #67	; 0x43
 800436e:	f7ff ff9b 	bl	80042a8 <__NVIC_EnableIRQ>

  return true;
 8004372:	2301      	movs	r3, #1
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20005138 	.word	0x20005138
 8004380:	200002ba 	.word	0x200002ba
 8004384:	20005141 	.word	0x20005141
 8004388:	2000bf80 	.word	0x2000bf80

0800438c <usbInit>:

void usbInit(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af02      	add	r7, sp, #8

//  MX_USB_DEVICE_Init();		// HAL 드라이버에서 생성됨
  usbDataRx = STATIC_MEM_QUEUE_CREATE(usbDataRx);
 8004392:	2305      	movs	r3, #5
 8004394:	4618      	mov	r0, r3
 8004396:	2341      	movs	r3, #65	; 0x41
 8004398:	4619      	mov	r1, r3
 800439a:	2300      	movs	r3, #0
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <usbInit+0x64>)
 80043a0:	4a14      	ldr	r2, [pc, #80]	; (80043f4 <usbInit+0x68>)
 80043a2:	f00e fd83 	bl	8012eac <xQueueGenericCreateStatic>
 80043a6:	4603      	mov	r3, r0
 80043a8:	4a13      	ldr	r2, [pc, #76]	; (80043f8 <usbInit+0x6c>)
 80043aa:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataRx);
 80043ac:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <usbInit+0x6c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a12      	ldr	r2, [pc, #72]	; (80043fc <usbInit+0x70>)
 80043b2:	4913      	ldr	r1, [pc, #76]	; (8004400 <usbInit+0x74>)
 80043b4:	4618      	mov	r0, r3
 80043b6:	f003 ff81 	bl	80082bc <qmRegisterQueue>
  usbDataTx = STATIC_MEM_QUEUE_CREATE(usbDataTx);
 80043ba:	2301      	movs	r3, #1
 80043bc:	4618      	mov	r0, r3
 80043be:	2341      	movs	r3, #65	; 0x41
 80043c0:	4619      	mov	r1, r3
 80043c2:	2300      	movs	r3, #0
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <usbInit+0x78>)
 80043c8:	4a0f      	ldr	r2, [pc, #60]	; (8004408 <usbInit+0x7c>)
 80043ca:	f00e fd6f 	bl	8012eac <xQueueGenericCreateStatic>
 80043ce:	4603      	mov	r3, r0
 80043d0:	4a0e      	ldr	r2, [pc, #56]	; (800440c <usbInit+0x80>)
 80043d2:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataTx);
 80043d4:	4b0d      	ldr	r3, [pc, #52]	; (800440c <usbInit+0x80>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a0d      	ldr	r2, [pc, #52]	; (8004410 <usbInit+0x84>)
 80043da:	4909      	ldr	r1, [pc, #36]	; (8004400 <usbInit+0x74>)
 80043dc:	4618      	mov	r0, r3
 80043de:	f003 ff6d 	bl	80082bc <qmRegisterQueue>

  isInit = true;
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <usbInit+0x88>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	2000202c 	.word	0x2000202c
 80043f4:	20001ee4 	.word	0x20001ee4
 80043f8:	20005138 	.word	0x20005138
 80043fc:	0801a7fc 	.word	0x0801a7fc
 8004400:	0801a808 	.word	0x0801a808
 8004404:	200020c0 	.word	0x200020c0
 8004408:	2000207c 	.word	0x2000207c
 800440c:	2000513c 	.word	0x2000513c
 8004410:	0801a824 	.word	0x0801a824
 8004414:	20005134 	.word	0x20005134

08004418 <usblinkTask>:
 * and so much other cool things that I don't have time for it ...)
 */
static USBPacket usbIn;
static CRTPPacket p;
static void usblinkTask(void *param)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  while(1)
  {
    // Fetch a USB packet off the queue
    usbGetDataBlocking(&usbIn);
 8004420:	480c      	ldr	r0, [pc, #48]	; (8004454 <usblinkTask+0x3c>)
 8004422:	f7ff ff83 	bl	800432c <usbGetDataBlocking>
    p.size = usbIn.size - 1;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <usblinkTask+0x3c>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	3b01      	subs	r3, #1
 800442c:	b2da      	uxtb	r2, r3
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <usblinkTask+0x40>)
 8004430:	701a      	strb	r2, [r3, #0]
    memcpy(&p.raw, usbIn.data, usbIn.size);
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <usblinkTask+0x3c>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	4908      	ldr	r1, [pc, #32]	; (800445c <usblinkTask+0x44>)
 800443a:	4809      	ldr	r0, [pc, #36]	; (8004460 <usblinkTask+0x48>)
 800443c:	f013 fb59 	bl	8017af2 <memcpy>
    // This queuing will copy a CRTP packet size from usbIn
    xQueueSend(crtpPacketDelivery, &p, portMAX_DELAY);
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <usblinkTask+0x4c>)
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	2300      	movs	r3, #0
 8004446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800444a:	4903      	ldr	r1, [pc, #12]	; (8004458 <usblinkTask+0x40>)
 800444c:	f00e fe44 	bl	80130d8 <xQueueGenericSend>
    usbGetDataBlocking(&usbIn);
 8004450:	e7e6      	b.n	8004420 <usblinkTask+0x8>
 8004452:	bf00      	nop
 8004454:	20005388 	.word	0x20005388
 8004458:	200053cc 	.word	0x200053cc
 800445c:	20005389 	.word	0x20005389
 8004460:	200053cd 	.word	0x200053cd
 8004464:	20005184 	.word	0x20005184

08004468 <usblinkInit>:
/*
 * Public functions
 */

void usblinkInit()
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af04      	add	r7, sp, #16
  if(isInit)
 800446e:	4b17      	ldr	r3, [pc, #92]	; (80044cc <usblinkInit+0x64>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d126      	bne.n	80044c4 <usblinkInit+0x5c>
    return;

  // Initialize the USB peripheral
  usbInit();
 8004476:	f7ff ff89 	bl	800438c <usbInit>

  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 800447a:	2310      	movs	r3, #16
 800447c:	4618      	mov	r0, r3
 800447e:	2320      	movs	r3, #32
 8004480:	4619      	mov	r1, r3
 8004482:	2300      	movs	r3, #0
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <usblinkInit+0x68>)
 8004488:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <usblinkInit+0x6c>)
 800448a:	f00e fd0f 	bl	8012eac <xQueueGenericCreateStatic>
 800448e:	4603      	mov	r3, r0
 8004490:	4a11      	ldr	r2, [pc, #68]	; (80044d8 <usblinkInit+0x70>)
 8004492:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 8004494:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <usblinkInit+0x70>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a10      	ldr	r2, [pc, #64]	; (80044dc <usblinkInit+0x74>)
 800449a:	4911      	ldr	r1, [pc, #68]	; (80044e0 <usblinkInit+0x78>)
 800449c:	4618      	mov	r0, r3
 800449e:	f003 ff0d 	bl	80082bc <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(usblinkTask, usblinkTask, USBLINK_TASK_NAME, NULL, USBLINK_TASK_PRI);
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	461a      	mov	r2, r3
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <usblinkInit+0x7c>)
 80044a8:	9302      	str	r3, [sp, #8]
 80044aa:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <usblinkInit+0x80>)
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	2303      	movs	r3, #3
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	2300      	movs	r3, #0
 80044b4:	490d      	ldr	r1, [pc, #52]	; (80044ec <usblinkInit+0x84>)
 80044b6:	480e      	ldr	r0, [pc, #56]	; (80044f0 <usblinkInit+0x88>)
 80044b8:	f00f fb2e 	bl	8013b18 <xTaskCreateStatic>

  isInit = true;
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <usblinkInit+0x64>)
 80044be:	2201      	movs	r2, #1
 80044c0:	701a      	strb	r2, [r3, #0]
 80044c2:	e000      	b.n	80044c6 <usblinkInit+0x5e>
    return;
 80044c4:	bf00      	nop
}
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20005181 	.word	0x20005181
 80044d0:	20002310 	.word	0x20002310
 80044d4:	20002110 	.word	0x20002110
 80044d8:	20005184 	.word	0x20005184
 80044dc:	0801a830 	.word	0x0801a830
 80044e0:	0801a844 	.word	0x0801a844
 80044e4:	20002360 	.word	0x20002360
 80044e8:	20005188 	.word	0x20005188
 80044ec:	0801a864 	.word	0x0801a864
 80044f0:	08004419 	.word	0x08004419

080044f4 <passthroughInit>:
static void blHeliConfigHandshake();

void passthroughTask(void *param);

void passthroughInit()
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af04      	add	r7, sp, #16
  if(isInit)
 80044fa:	4b21      	ldr	r3, [pc, #132]	; (8004580 <passthroughInit+0x8c>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d13b      	bne.n	800457a <passthroughInit+0x86>
    return;

  ptRxQueue = STATIC_MEM_QUEUE_CREATE(ptRxQueue);
 8004502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004506:	4618      	mov	r0, r3
 8004508:	2301      	movs	r3, #1
 800450a:	4619      	mov	r1, r3
 800450c:	2300      	movs	r3, #0
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	4b1c      	ldr	r3, [pc, #112]	; (8004584 <passthroughInit+0x90>)
 8004512:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <passthroughInit+0x94>)
 8004514:	f00e fcca 	bl	8012eac <xQueueGenericCreateStatic>
 8004518:	4603      	mov	r3, r0
 800451a:	4a1c      	ldr	r2, [pc, #112]	; (800458c <passthroughInit+0x98>)
 800451c:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 800451e:	4b1b      	ldr	r3, [pc, #108]	; (800458c <passthroughInit+0x98>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a1b      	ldr	r2, [pc, #108]	; (8004590 <passthroughInit+0x9c>)
 8004524:	491b      	ldr	r1, [pc, #108]	; (8004594 <passthroughInit+0xa0>)
 8004526:	4618      	mov	r0, r3
 8004528:	f003 fec8 	bl	80082bc <qmRegisterQueue>
  ptTxQueue = STATIC_MEM_QUEUE_CREATE(ptTxQueue);
 800452c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004530:	4618      	mov	r0, r3
 8004532:	2301      	movs	r3, #1
 8004534:	4619      	mov	r1, r3
 8004536:	2300      	movs	r3, #0
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	4b17      	ldr	r3, [pc, #92]	; (8004598 <passthroughInit+0xa4>)
 800453c:	4a17      	ldr	r2, [pc, #92]	; (800459c <passthroughInit+0xa8>)
 800453e:	f00e fcb5 	bl	8012eac <xQueueGenericCreateStatic>
 8004542:	4603      	mov	r3, r0
 8004544:	4a16      	ldr	r2, [pc, #88]	; (80045a0 <passthroughInit+0xac>)
 8004546:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <passthroughInit+0x98>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a10      	ldr	r2, [pc, #64]	; (8004590 <passthroughInit+0x9c>)
 800454e:	4911      	ldr	r1, [pc, #68]	; (8004594 <passthroughInit+0xa0>)
 8004550:	4618      	mov	r0, r3
 8004552:	f003 feb3 	bl	80082bc <qmRegisterQueue>

  passthroughTaskHandle = STATIC_MEM_TASK_CREATE(passthroughTask, passthroughTask, PASSTHROUGH_TASK_NAME, NULL, PASSTHROUGH_TASK_PRI);
 8004556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800455a:	461a      	mov	r2, r3
 800455c:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <passthroughInit+0xb0>)
 800455e:	9302      	str	r3, [sp, #8]
 8004560:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <passthroughInit+0xb4>)
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	2305      	movs	r3, #5
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	2300      	movs	r3, #0
 800456a:	4910      	ldr	r1, [pc, #64]	; (80045ac <passthroughInit+0xb8>)
 800456c:	4810      	ldr	r0, [pc, #64]	; (80045b0 <passthroughInit+0xbc>)
 800456e:	f00f fad3 	bl	8013b18 <xTaskCreateStatic>
 8004572:	4603      	mov	r3, r0
 8004574:	4a0f      	ldr	r2, [pc, #60]	; (80045b4 <passthroughInit+0xc0>)
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	e000      	b.n	800457c <passthroughInit+0x88>
    return;
 800457a:	bf00      	nop
}
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	200057f0 	.word	0x200057f0
 8004584:	200026d0 	.word	0x200026d0
 8004588:	200024d0 	.word	0x200024d0
 800458c:	200057f4 	.word	0x200057f4
 8004590:	0801a86c 	.word	0x0801a86c
 8004594:	0801a878 	.word	0x0801a878
 8004598:	20002920 	.word	0x20002920
 800459c:	20002720 	.word	0x20002720
 80045a0:	200057f8 	.word	0x200057f8
 80045a4:	20002418 	.word	0x20002418
 80045a8:	200053f0 	.word	0x200053f0
 80045ac:	0801a8a4 	.word	0x0801a8a4
 80045b0:	080045b9 	.word	0x080045b9
 80045b4:	200053ec 	.word	0x200053ec

080045b8 <passthroughTask>:
  BaseType_t xHigherPriorityTaskWoken;
  return xQueueReceiveFromISR(ptTxQueue, receiveChPtr, &xHigherPriorityTaskWoken);
}

void passthroughTask(void *param)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 80045c0:	f7ff fc02 	bl	8003dc8 <systemWaitStart>

  while (true)
  {
    // Wait for interface to be activated, typically when ACM or COM port control message is sent
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80045c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045c8:	2001      	movs	r0, #1
 80045ca:	f010 fccd 	bl	8014f68 <ulTaskNotifyTake>
//    paramVarId_t motorPowerSetEnableParam;
//    motorPowerSetEnableParam = paramGetVarId("motorPowerSet", "enable");
//    paramSetInt(motorPowerSetEnableParam, 0);

    // Clear any notifications that was queued during 4way process.
    ulTaskNotifyValueClear(NULL, 0xFFFFFFFF);
 80045ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045d2:	2000      	movs	r0, #0
 80045d4:	f010 fd14 	bl	8015000 <ulTaskNotifyValueClear>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80045d8:	e7f4      	b.n	80045c4 <passthroughTask+0xc>

080045da <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f8a2 	bl	8004730 <platformGetListOfConfigurations>
 80045ec:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4619      	mov	r1, r3
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f854 	bl	80046a0 <platformInitConfiguration>
 80045f8:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b30      	cmp	r3, #48	; 0x30
 800461e:	d104      	bne.n	800462a <platformParseDeviceTypeString+0x1c>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3301      	adds	r3, #1
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b3b      	cmp	r3, #59	; 0x3b
 8004628:	d001      	beq.n	800462e <platformParseDeviceTypeString+0x20>
    return 1;
 800462a:	2301      	movs	r3, #1
 800462c:	e034      	b.n	8004698 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 800462e:	2302      	movs	r3, #2
 8004630:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	3304      	adds	r3, #4
 8004636:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	e00e      	b.n	8004660 <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	4413      	add	r3, r2
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00c      	beq.n	8004668 <platformParseDeviceTypeString+0x5a>
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	4413      	add	r3, r2
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b3b      	cmp	r3, #59	; 0x3b
 8004658:	d006      	beq.n	8004668 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	3301      	adds	r3, #1
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	429a      	cmp	r2, r3
 8004666:	ddec      	ble.n	8004642 <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	429a      	cmp	r2, r3
 800466e:	dd01      	ble.n	8004674 <platformParseDeviceTypeString+0x66>
    return 1;
 8004670:	2301      	movs	r3, #1
 8004672:	e011      	b.n	8004698 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4413      	add	r3, r2
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	4619      	mov	r1, r3
 8004686:	6838      	ldr	r0, [r7, #0]
 8004688:	f013 fa33 	bl	8017af2 <memcpy>
  deviceType[length] = '\0';
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	4413      	add	r3, r2
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
  return 0;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b090      	sub	sp, #64	; 0x40
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 80046aa:	f107 0314 	add.w	r3, r7, #20
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f85e 	bl	8004770 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 80046b4:	f107 020c 	add.w	r2, r7, #12
 80046b8:	f107 0314 	add.w	r3, r7, #20
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff ffa5 	bl	800460e <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 80046c4:	2300      	movs	r3, #0
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c8:	e01a      	b.n	8004700 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 80046ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 80046dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046de:	f107 020c 	add.w	r2, r7, #12
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fb fd73 	bl	80001d0 <strcmp>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d104      	bne.n	80046fa <platformInitConfiguration+0x5a>
      active_config = config;
 80046f0:	4a08      	ldr	r2, [pc, #32]	; (8004714 <platformInitConfiguration+0x74>)
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	6013      	str	r3, [r2, #0]
      return 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e007      	b.n	800470a <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 80046fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fc:	3301      	adds	r3, #1
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	dbe0      	blt.n	80046ca <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8004708:	2301      	movs	r3, #1
}
 800470a:	4618      	mov	r0, r3
 800470c:	3740      	adds	r7, #64	; 0x40
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	200057fc 	.word	0x200057fc

08004718 <platformConfigGetDeviceTypeName>:

const char* platformConfigGetDeviceType() {
  return active_config->deviceType;
}

const char* platformConfigGetDeviceTypeName() {
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return active_config->deviceTypeName;
 800471c:	4b03      	ldr	r3, [pc, #12]	; (800472c <platformConfigGetDeviceTypeName+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3305      	adds	r3, #5
}
 8004722:	4618      	mov	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	200057fc 	.word	0x200057fc

08004730 <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2203      	movs	r2, #3
 800473c:	601a      	str	r2, [r3, #0]
  return configs;
 800473e:	4b03      	ldr	r3, [pc, #12]	; (800474c <platformGetListOfConfigurations+0x1c>)
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	200002bc 	.word	0x200002bc

08004750 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800475e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8004762:	015b      	lsls	r3, r3, #5
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 800477c:	2300      	movs	r3, #0
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	e00d      	b.n	800479e <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 8004782:	6938      	ldr	r0, [r7, #16]
 8004784:	f7ff ffe4 	bl	8004750 <getAddressOfOtpMemoryBlock>
 8004788:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	617b      	str	r3, [r7, #20]
      break;
 8004796:	e005      	b.n	80047a4 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	3301      	adds	r3, #1
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b0f      	cmp	r3, #15
 80047a2:	ddee      	ble.n	8004782 <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <platformGetDeviceTypeString+0x42>
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2bff      	cmp	r3, #255	; 0xff
 80047b0:	d101      	bne.n	80047b6 <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 80047b2:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <platformGetDeviceTypeString+0x60>)
 80047b4:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 80047b6:	2220      	movs	r2, #32
 80047b8:	6979      	ldr	r1, [r7, #20]
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f013 f8b8 	bl	8017930 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3320      	adds	r3, #32
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
}
 80047c8:	bf00      	nop
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	0801a998 	.word	0x0801a998

080047d4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80047da:	4b21      	ldr	r3, [pc, #132]	; (8004860 <_DoInit+0x8c>)
 80047dc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2203      	movs	r2, #3
 80047e2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2203      	movs	r2, #3
 80047e8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <_DoInit+0x90>)
 80047ee:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a1d      	ldr	r2, [pc, #116]	; (8004868 <_DoInit+0x94>)
 80047f4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047fc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a14      	ldr	r2, [pc, #80]	; (8004864 <_DoInit+0x90>)
 8004814:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a14      	ldr	r2, [pc, #80]	; (800486c <_DoInit+0x98>)
 800481a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3307      	adds	r3, #7
 8004838:	4a0d      	ldr	r2, [pc, #52]	; (8004870 <_DoInit+0x9c>)
 800483a:	6810      	ldr	r0, [r2, #0]
 800483c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a0c      	ldr	r2, [pc, #48]	; (8004874 <_DoInit+0xa0>)
 8004842:	6810      	ldr	r0, [r2, #0]
 8004844:	6018      	str	r0, [r3, #0]
 8004846:	8891      	ldrh	r1, [r2, #4]
 8004848:	7992      	ldrb	r2, [r2, #6]
 800484a:	8099      	strh	r1, [r3, #4]
 800484c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	719a      	strb	r2, [r3, #6]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	20005800 	.word	0x20005800
 8004864:	0801a9a0 	.word	0x0801a9a0
 8004868:	200058a8 	.word	0x200058a8
 800486c:	200068a8 	.word	0x200068a8
 8004870:	0801a9ac 	.word	0x0801a9ac
 8004874:	0801a9b0 	.word	0x0801a9b0

08004878 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004884:	2300      	movs	r3, #0
 8004886:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	429a      	cmp	r2, r3
 800489a:	d905      	bls.n	80048a8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	e007      	b.n	80048b8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	6939      	ldr	r1, [r7, #16]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	1acb      	subs	r3, r1, r3
 80048b2:	4413      	add	r3, r2
 80048b4:	3b01      	subs	r3, #1
 80048b6:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	4293      	cmp	r3, r2
 80048c4:	bf28      	it	cs
 80048c6:	4613      	movcs	r3, r2
 80048c8:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4293      	cmp	r3, r2
 80048d0:	bf28      	it	cs
 80048d2:	4613      	movcs	r3, r2
 80048d4:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	4413      	add	r3, r2
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f013 f905 	bl	8017af2 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	4413      	add	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	4413      	add	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	4413      	add	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	429a      	cmp	r2, r3
 8004910:	d101      	bne.n	8004916 <_WriteBlocking+0x9e>
      WrOff = 0u;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1b5      	bne.n	800488e <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8004922:	69bb      	ldr	r3, [r7, #24]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	429a      	cmp	r2, r3
 800494e:	d90e      	bls.n	800496e <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	4413      	add	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	4618      	mov	r0, r3
 800495e:	f013 f8c8 	bl	8017af2 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	441a      	add	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800496c:	e01a      	b.n	80049a4 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	4618      	mov	r0, r3
 8004980:	f013 f8b7 	bl	8017af2 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6858      	ldr	r0, [r3, #4]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	4413      	add	r3, r2
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4619      	mov	r1, r3
 800499a:	f013 f8aa 	bl	8017af2 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	60da      	str	r2, [r3, #12]
}
 80049a4:	bf00      	nop
 80049a6:	3720      	adds	r7, #32
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d808      	bhi.n	80049da <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4413      	add	r3, r2
 80049d4:	3b01      	subs	r3, #1
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	e004      	b.n	80049e4 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	617b      	str	r3, [r7, #20]
  }
  return r;
 80049e4:	697b      	ldr	r3, [r7, #20]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	4613      	mov	r3, r2
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	4413      	add	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4a1f      	ldr	r2, [pc, #124]	; (8004a90 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004a12:	4413      	add	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d029      	beq.n	8004a72 <SEGGER_RTT_WriteNoLock+0x7e>
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d82e      	bhi.n	8004a80 <SEGGER_RTT_WriteNoLock+0x8c>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <SEGGER_RTT_WriteNoLock+0x38>
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d013      	beq.n	8004a52 <SEGGER_RTT_WriteNoLock+0x5e>
 8004a2a:	e029      	b.n	8004a80 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004a2c:	6978      	ldr	r0, [r7, #20]
 8004a2e:	f7ff ffbd 	bl	80049ac <_GetAvailWriteSpace>
 8004a32:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d202      	bcs.n	8004a42 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004a40:	e021      	b.n	8004a86 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	69b9      	ldr	r1, [r7, #24]
 8004a4a:	6978      	ldr	r0, [r7, #20]
 8004a4c:	f7ff ff6e 	bl	800492c <_WriteNoCheck>
    break;
 8004a50:	e019      	b.n	8004a86 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004a52:	6978      	ldr	r0, [r7, #20]
 8004a54:	f7ff ffaa 	bl	80049ac <_GetAvailWriteSpace>
 8004a58:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	bf28      	it	cs
 8004a62:	4613      	movcs	r3, r2
 8004a64:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	69b9      	ldr	r1, [r7, #24]
 8004a6a:	6978      	ldr	r0, [r7, #20]
 8004a6c:	f7ff ff5e 	bl	800492c <_WriteNoCheck>
    break;
 8004a70:	e009      	b.n	8004a86 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	69b9      	ldr	r1, [r7, #24]
 8004a76:	6978      	ldr	r0, [r7, #20]
 8004a78:	f7ff fefe 	bl	8004878 <_WriteBlocking>
 8004a7c:	61f8      	str	r0, [r7, #28]
    break;
 8004a7e:	e002      	b.n	8004a86 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61fb      	str	r3, [r7, #28]
    break;
 8004a84:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004a86:	69fb      	ldr	r3, [r7, #28]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20005800 	.word	0x20005800

08004a94 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <SEGGER_RTT_Write+0x44>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <SEGGER_RTT_Write+0x18>
 8004aa8:	f7ff fe94 	bl	80047d4 <_DoInit>
  SEGGER_RTT_LOCK();
 8004aac:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab0:	f04f 0120 	mov.w	r1, #32
 8004ab4:	f381 8811 	msr	BASEPRI, r1
 8004ab8:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff ff98 	bl	80049f4 <SEGGER_RTT_WriteNoLock>
 8004ac4:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8004acc:	693b      	ldr	r3, [r7, #16]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20005800 	.word	0x20005800

08004adc <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8004aea:	4b30      	ldr	r3, [pc, #192]	; (8004bac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8004af2:	f7ff fe6f 	bl	80047d4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8004af6:	4b2d      	ldr	r3, [pc, #180]	; (8004bac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	461a      	mov	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d24c      	bcs.n	8004b9c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8004b02:	f3ef 8311 	mrs	r3, BASEPRI
 8004b06:	f04f 0120 	mov.w	r1, #32
 8004b0a:	f381 8811 	msr	BASEPRI, r1
 8004b0e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d032      	beq.n	8004b7c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8004b16:	4925      	ldr	r1, [pc, #148]	; (8004bac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	440b      	add	r3, r1
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004b2a:	4920      	ldr	r1, [pc, #128]	; (8004bac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	4613      	mov	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	4413      	add	r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	440b      	add	r3, r1
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004b40:	491a      	ldr	r1, [pc, #104]	; (8004bac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4613      	mov	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4413      	add	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	440b      	add	r3, r1
 8004b4e:	3320      	adds	r3, #32
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8004b54:	4915      	ldr	r1, [pc, #84]	; (8004bac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4413      	add	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	440b      	add	r3, r1
 8004b62:	3328      	adds	r3, #40	; 0x28
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8004b68:	4910      	ldr	r1, [pc, #64]	; (8004bac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	4413      	add	r3, r2
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	440b      	add	r3, r1
 8004b76:	3324      	adds	r3, #36	; 0x24
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8004b7c:	490b      	ldr	r1, [pc, #44]	; (8004bac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4613      	mov	r3, r2
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	4413      	add	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	440b      	add	r3, r1
 8004b8a:	332c      	adds	r3, #44	; 0x2c
 8004b8c:	6a3a      	ldr	r2, [r7, #32]
 8004b8e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e002      	b.n	8004ba2 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8004b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ba0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004ba2:	697b      	ldr	r3, [r7, #20]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20005800 	.word	0x20005800

08004bb0 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  _DoInit();
 8004bb4:	f7ff fe0e 	bl	80047d4 <_DoInit>
}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d80e      	bhi.n	8004bf8 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4413      	add	r3, r2
 8004be2:	78fa      	ldrb	r2, [r7, #3]
 8004be4:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d115      	bne.n	8004c30 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6918      	ldr	r0, [r3, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6819      	ldr	r1, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	461a      	mov	r2, r3
 8004c12:	f7ff ff3f 	bl	8004a94 <SEGGER_RTT_Write>
 8004c16:	4602      	mov	r2, r0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d004      	beq.n	8004c2a <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c26:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8004c28:	e002      	b.n	8004c30 <_StoreChar+0x74>
      p->Cnt = 0u;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004c52:	e007      	b.n	8004c64 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004c54:	6a3a      	ldr	r2, [r7, #32]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	623b      	str	r3, [r7, #32]
    Width++;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3301      	adds	r3, #1
 8004c62:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004c64:	6a3a      	ldr	r2, [r7, #32]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d2f3      	bcs.n	8004c54 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d901      	bls.n	8004c78 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d125      	bne.n	8004cce <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d022      	beq.n	8004cce <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <_PrintUnsigned+0x66>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d102      	bne.n	8004c9e <_PrintUnsigned+0x66>
        c = '0';
 8004c98:	2330      	movs	r3, #48	; 0x30
 8004c9a:	76fb      	strb	r3, [r7, #27]
 8004c9c:	e001      	b.n	8004ca2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004c9e:	2320      	movs	r3, #32
 8004ca0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ca2:	e00b      	b.n	8004cbc <_PrintUnsigned+0x84>
        FieldWidth--;
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004caa:	7efb      	ldrb	r3, [r7, #27]
 8004cac:	4619      	mov	r1, r3
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff ff84 	bl	8004bbc <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	db07      	blt.n	8004ccc <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d005      	beq.n	8004cce <_PrintUnsigned+0x96>
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d3ec      	bcc.n	8004ca4 <_PrintUnsigned+0x6c>
 8004cca:	e000      	b.n	8004cce <_PrintUnsigned+0x96>
          break;
 8004ccc:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	db55      	blt.n	8004d82 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d903      	bls.n	8004ce4 <_PrintUnsigned+0xac>
        NumDigits--;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	e009      	b.n	8004cf8 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cec:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d200      	bcs.n	8004cf8 <_PrintUnsigned+0xc0>
          break;
 8004cf6:	e005      	b.n	8004d04 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	fb02 f303 	mul.w	r3, r2, r3
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004d02:	e7e8      	b.n	8004cd6 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d12:	fb02 f303 	mul.w	r3, r2, r3
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8004d1c:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <_PrintUnsigned+0x154>)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	4413      	add	r3, r2
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	4619      	mov	r1, r3
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff ff48 	bl	8004bbc <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	db08      	blt.n	8004d46 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8004d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1df      	bne.n	8004d04 <_PrintUnsigned+0xcc>
 8004d44:	e000      	b.n	8004d48 <_PrintUnsigned+0x110>
        break;
 8004d46:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d017      	beq.n	8004d82 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d014      	beq.n	8004d82 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d58:	e00a      	b.n	8004d70 <_PrintUnsigned+0x138>
          FieldWidth--;
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8004d60:	2120      	movs	r1, #32
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff ff2a 	bl	8004bbc <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	db07      	blt.n	8004d80 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <_PrintUnsigned+0x14a>
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d3ed      	bcc.n	8004d5a <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8004d7e:	e000      	b.n	8004d82 <_PrintUnsigned+0x14a>
            break;
 8004d80:	bf00      	nop
}
 8004d82:	bf00      	nop
 8004d84:	3728      	adds	r7, #40	; 0x28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	0801c320 	.word	0x0801c320

08004d90 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bfb8      	it	lt
 8004da4:	425b      	neglt	r3, r3
 8004da6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004da8:	2301      	movs	r3, #1
 8004daa:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004dac:	e007      	b.n	8004dbe <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	fb92 f3f3 	sdiv	r3, r2, r3
 8004db6:	613b      	str	r3, [r7, #16]
    Width++;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	daf3      	bge.n	8004dae <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d901      	bls.n	8004dd2 <_PrintInt+0x42>
    Width = NumDigits;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <_PrintInt+0x5e>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	db04      	blt.n	8004de8 <_PrintInt+0x58>
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <_PrintInt+0x5e>
    FieldWidth--;
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <_PrintInt+0x6e>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01c      	beq.n	8004e38 <_PrintInt+0xa8>
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d117      	bne.n	8004e38 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d014      	beq.n	8004e38 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e0e:	e00a      	b.n	8004e26 <_PrintInt+0x96>
        FieldWidth--;
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004e16:	2120      	movs	r1, #32
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff fecf 	bl	8004bbc <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	db07      	blt.n	8004e36 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <_PrintInt+0xa8>
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d3ed      	bcc.n	8004e10 <_PrintInt+0x80>
 8004e34:	e000      	b.n	8004e38 <_PrintInt+0xa8>
          break;
 8004e36:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	db4a      	blt.n	8004ed6 <_PrintInt+0x146>
    if (v < 0) {
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	da07      	bge.n	8004e56 <_PrintInt+0xc6>
      v = -v;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	425b      	negs	r3, r3
 8004e4a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8004e4c:	212d      	movs	r1, #45	; 0x2d
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f7ff feb4 	bl	8004bbc <_StoreChar>
 8004e54:	e008      	b.n	8004e68 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8004e60:	212b      	movs	r1, #43	; 0x2b
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff feaa 	bl	8004bbc <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	db32      	blt.n	8004ed6 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01f      	beq.n	8004eba <_PrintInt+0x12a>
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d11a      	bne.n	8004eba <_PrintInt+0x12a>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d117      	bne.n	8004eba <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d014      	beq.n	8004eba <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e90:	e00a      	b.n	8004ea8 <_PrintInt+0x118>
            FieldWidth--;
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8004e98:	2130      	movs	r1, #48	; 0x30
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7ff fe8e 	bl	8004bbc <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	db07      	blt.n	8004eb8 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <_PrintInt+0x12a>
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d3ed      	bcc.n	8004e92 <_PrintInt+0x102>
 8004eb6:	e000      	b.n	8004eba <_PrintInt+0x12a>
              break;
 8004eb8:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	db09      	blt.n	8004ed6 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004ec2:	68b9      	ldr	r1, [r7, #8]
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f7ff feb1 	bl	8004c38 <_PrintUnsigned>
      }
    }
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b0d2      	sub	sp, #328	; 0x148
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004eea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004eee:	6018      	str	r0, [r3, #0]
 8004ef0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004ef4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004ef8:	6019      	str	r1, [r3, #0]
 8004efa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004efe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f02:	601a      	str	r2, [r3, #0]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8004f04:	f107 0310 	add.w	r3, r7, #16
 8004f08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8004f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  BufferDesc.Cnt            = 0u;
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  BufferDesc.RTTBufferIndex = BufferIndex;
 8004f1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004f1e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  BufferDesc.ReturnValue    = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

  do {
    c = *sFormat;
 8004f2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004f32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    sFormat++;
 8004f3e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004f42:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f46:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004f4a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	3201      	adds	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
    if (c == 0u) {
 8004f54:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 825a 	beq.w	8005412 <SEGGER_RTT_vprintf+0x532>
      break;
    }
    if (c == '%') {
 8004f5e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8004f62:	2b25      	cmp	r3, #37	; 0x25
 8004f64:	f040 8247 	bne.w	80053f6 <SEGGER_RTT_vprintf+0x516>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
      v = 1;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
      do {
        c = *sFormat;
 8004f74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004f78:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        switch (c) {
 8004f84:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8004f88:	3b23      	subs	r3, #35	; 0x23
 8004f8a:	2b0d      	cmp	r3, #13
 8004f8c:	d866      	bhi.n	800505c <SEGGER_RTT_vprintf+0x17c>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <SEGGER_RTT_vprintf+0xb4>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08005039 	.word	0x08005039
 8004f98:	0800505d 	.word	0x0800505d
 8004f9c:	0800505d 	.word	0x0800505d
 8004fa0:	0800505d 	.word	0x0800505d
 8004fa4:	0800505d 	.word	0x0800505d
 8004fa8:	0800505d 	.word	0x0800505d
 8004fac:	0800505d 	.word	0x0800505d
 8004fb0:	0800505d 	.word	0x0800505d
 8004fb4:	08005015 	.word	0x08005015
 8004fb8:	0800505d 	.word	0x0800505d
 8004fbc:	08004fcd 	.word	0x08004fcd
 8004fc0:	0800505d 	.word	0x0800505d
 8004fc4:	0800505d 	.word	0x0800505d
 8004fc8:	08004ff1 	.word	0x08004ff1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004fcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004fd8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004fdc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004fe0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004fe4:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	3201      	adds	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e039      	b.n	8005064 <SEGGER_RTT_vprintf+0x184>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004ff0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ff4:	f043 0302 	orr.w	r3, r3, #2
 8004ff8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004ffc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005000:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005004:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005008:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800500c:	6812      	ldr	r2, [r2, #0]
 800500e:	3201      	adds	r2, #1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	e027      	b.n	8005064 <SEGGER_RTT_vprintf+0x184>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005014:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005018:	f043 0304 	orr.w	r3, r3, #4
 800501c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005020:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005024:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005028:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800502c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	3201      	adds	r2, #1
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	e015      	b.n	8005064 <SEGGER_RTT_vprintf+0x184>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005038:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800503c:	f043 0308 	orr.w	r3, r3, #8
 8005040:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005044:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005048:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800504c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005050:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	3201      	adds	r2, #1
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	e003      	b.n	8005064 <SEGGER_RTT_vprintf+0x184>
        default:  v = 0; break;
 800505c:	2300      	movs	r3, #0
 800505e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005062:	bf00      	nop
        }
      } while (v);
 8005064:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005068:	2b00      	cmp	r3, #0
 800506a:	d183      	bne.n	8004f74 <SEGGER_RTT_vprintf+0x94>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800506c:	2300      	movs	r3, #0
 800506e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      do {
        c = *sFormat;
 8005072:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005076:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c < '0') || (c > '9')) {
 8005082:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005086:	2b2f      	cmp	r3, #47	; 0x2f
 8005088:	d91c      	bls.n	80050c4 <SEGGER_RTT_vprintf+0x1e4>
 800508a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800508e:	2b39      	cmp	r3, #57	; 0x39
 8005090:	d818      	bhi.n	80050c4 <SEGGER_RTT_vprintf+0x1e4>
          break;
        }
        sFormat++;
 8005092:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005096:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800509a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800509e:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	3201      	adds	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 80050a8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	461a      	mov	r2, r3
 80050b6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80050ba:	4413      	add	r3, r2
 80050bc:	3b30      	subs	r3, #48	; 0x30
 80050be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        c = *sFormat;
 80050c2:	e7d6      	b.n	8005072 <SEGGER_RTT_vprintf+0x192>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80050c4:	2300      	movs	r3, #0
 80050c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      c = *sFormat;
 80050ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80050ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      if (c == '.') {
 80050da:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80050de:	2b2e      	cmp	r3, #46	; 0x2e
 80050e0:	d133      	bne.n	800514a <SEGGER_RTT_vprintf+0x26a>
        sFormat++;
 80050e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80050e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80050ea:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80050ee:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	3201      	adds	r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
        do {
          c = *sFormat;
 80050f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80050fc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
          if ((c < '0') || (c > '9')) {
 8005108:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800510c:	2b2f      	cmp	r3, #47	; 0x2f
 800510e:	d91c      	bls.n	800514a <SEGGER_RTT_vprintf+0x26a>
 8005110:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005114:	2b39      	cmp	r3, #57	; 0x39
 8005116:	d818      	bhi.n	800514a <SEGGER_RTT_vprintf+0x26a>
            break;
          }
          sFormat++;
 8005118:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800511c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005120:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005124:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	3201      	adds	r2, #1
 800512c:	601a      	str	r2, [r3, #0]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800512e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	461a      	mov	r2, r3
 800513c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005140:	4413      	add	r3, r2
 8005142:	3b30      	subs	r3, #48	; 0x30
 8005144:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          c = *sFormat;
 8005148:	e7d6      	b.n	80050f8 <SEGGER_RTT_vprintf+0x218>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800514a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800514e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      do {
        if ((c == 'l') || (c == 'h')) {
 800515a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800515e:	2b6c      	cmp	r3, #108	; 0x6c
 8005160:	d003      	beq.n	800516a <SEGGER_RTT_vprintf+0x28a>
 8005162:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005166:	2b68      	cmp	r3, #104	; 0x68
 8005168:	d113      	bne.n	8005192 <SEGGER_RTT_vprintf+0x2b2>
          sFormat++;
 800516a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800516e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005172:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005176:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	3201      	adds	r2, #1
 800517e:	601a      	str	r2, [r3, #0]
          c = *sFormat;
 8005180:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005184:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c == 'l') || (c == 'h')) {
 8005190:	e7e3      	b.n	800515a <SEGGER_RTT_vprintf+0x27a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005192:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005196:	2b25      	cmp	r3, #37	; 0x25
 8005198:	f000 8119 	beq.w	80053ce <SEGGER_RTT_vprintf+0x4ee>
 800519c:	2b25      	cmp	r3, #37	; 0x25
 800519e:	f2c0 811d 	blt.w	80053dc <SEGGER_RTT_vprintf+0x4fc>
 80051a2:	2b78      	cmp	r3, #120	; 0x78
 80051a4:	f300 811a 	bgt.w	80053dc <SEGGER_RTT_vprintf+0x4fc>
 80051a8:	2b58      	cmp	r3, #88	; 0x58
 80051aa:	f2c0 8117 	blt.w	80053dc <SEGGER_RTT_vprintf+0x4fc>
 80051ae:	3b58      	subs	r3, #88	; 0x58
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	f200 8113 	bhi.w	80053dc <SEGGER_RTT_vprintf+0x4fc>
 80051b6:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <SEGGER_RTT_vprintf+0x2dc>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	080052fb 	.word	0x080052fb
 80051c0:	080053dd 	.word	0x080053dd
 80051c4:	080053dd 	.word	0x080053dd
 80051c8:	080053dd 	.word	0x080053dd
 80051cc:	080053dd 	.word	0x080053dd
 80051d0:	080053dd 	.word	0x080053dd
 80051d4:	080053dd 	.word	0x080053dd
 80051d8:	080053dd 	.word	0x080053dd
 80051dc:	080053dd 	.word	0x080053dd
 80051e0:	080053dd 	.word	0x080053dd
 80051e4:	080053dd 	.word	0x080053dd
 80051e8:	08005241 	.word	0x08005241
 80051ec:	0800527b 	.word	0x0800527b
 80051f0:	080053dd 	.word	0x080053dd
 80051f4:	080053dd 	.word	0x080053dd
 80051f8:	080053dd 	.word	0x080053dd
 80051fc:	080053dd 	.word	0x080053dd
 8005200:	080053dd 	.word	0x080053dd
 8005204:	080053dd 	.word	0x080053dd
 8005208:	080053dd 	.word	0x080053dd
 800520c:	080053dd 	.word	0x080053dd
 8005210:	080053dd 	.word	0x080053dd
 8005214:	080053dd 	.word	0x080053dd
 8005218:	080053dd 	.word	0x080053dd
 800521c:	08005395 	.word	0x08005395
 8005220:	080053dd 	.word	0x080053dd
 8005224:	080053dd 	.word	0x080053dd
 8005228:	0800533b 	.word	0x0800533b
 800522c:	080053dd 	.word	0x080053dd
 8005230:	080052bb 	.word	0x080052bb
 8005234:	080053dd 	.word	0x080053dd
 8005238:	080053dd 	.word	0x080053dd
 800523c:	080052fb 	.word	0x080052fb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005240:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005244:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	1d19      	adds	r1, r3, #4
 800524e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005252:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	6011      	str	r1, [r2, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        c0 = (char)v;
 8005260:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        _StoreChar(&BufferDesc, c0);
 8005268:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 800526c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005270:	4611      	mov	r1, r2
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff fca2 	bl	8004bbc <_StoreChar>
        break;
 8005278:	e0b1      	b.n	80053de <SEGGER_RTT_vprintf+0x4fe>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800527a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800527e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	1d19      	adds	r1, r3, #4
 8005288:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800528c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	6011      	str	r1, [r2, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800529a:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800529e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052ae:	220a      	movs	r2, #10
 80052b0:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80052b4:	f7ff fd6c 	bl	8004d90 <_PrintInt>
        break;
 80052b8:	e091      	b.n	80053de <SEGGER_RTT_vprintf+0x4fe>
      case 'u':
        v = va_arg(*pParamList, int);
 80052ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80052be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	1d19      	adds	r1, r3, #4
 80052c8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80052cc:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	6011      	str	r1, [r2, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80052da:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80052de:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80052e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052f2:	220a      	movs	r2, #10
 80052f4:	f7ff fca0 	bl	8004c38 <_PrintUnsigned>
        break;
 80052f8:	e071      	b.n	80053de <SEGGER_RTT_vprintf+0x4fe>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80052fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80052fe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	1d19      	adds	r1, r3, #4
 8005308:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800530c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	6011      	str	r1, [r2, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800531a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800531e:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8005322:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005332:	2210      	movs	r2, #16
 8005334:	f7ff fc80 	bl	8004c38 <_PrintUnsigned>
        break;
 8005338:	e051      	b.n	80053de <SEGGER_RTT_vprintf+0x4fe>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 800533a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800533e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	1d19      	adds	r1, r3, #4
 8005348:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800534c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	6011      	str	r1, [r2, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          do {
            c = *s;
 800535a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
            s++;
 8005364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005368:	3301      	adds	r3, #1
 800536a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if (c == '\0') {
 800536e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <SEGGER_RTT_vprintf+0x4b0>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8005376:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800537a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800537e:	4611      	mov	r1, r2
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fc1b 	bl	8004bbc <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8005386:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800538a:	2b00      	cmp	r3, #0
 800538c:	dae5      	bge.n	800535a <SEGGER_RTT_vprintf+0x47a>
        }
        break;
 800538e:	e026      	b.n	80053de <SEGGER_RTT_vprintf+0x4fe>
              break;
 8005390:	bf00      	nop
        break;
 8005392:	e024      	b.n	80053de <SEGGER_RTT_vprintf+0x4fe>
      case 'p':
        v = va_arg(*pParamList, int);
 8005394:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005398:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	1d19      	adds	r1, r3, #4
 80053a2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80053a6:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80053aa:	6812      	ldr	r2, [r2, #0]
 80053ac:	6011      	str	r1, [r2, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 80053b4:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80053b8:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80053bc:	2300      	movs	r3, #0
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	2308      	movs	r3, #8
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	2308      	movs	r3, #8
 80053c6:	2210      	movs	r2, #16
 80053c8:	f7ff fc36 	bl	8004c38 <_PrintUnsigned>
        break;
 80053cc:	e007      	b.n	80053de <SEGGER_RTT_vprintf+0x4fe>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80053ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053d2:	2125      	movs	r1, #37	; 0x25
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff fbf1 	bl	8004bbc <_StoreChar>
        break;
 80053da:	e000      	b.n	80053de <SEGGER_RTT_vprintf+0x4fe>
      default:
        break;
 80053dc:	bf00      	nop
      }
      sFormat++;
 80053de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80053e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80053e6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80053ea:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	3201      	adds	r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e007      	b.n	8005406 <SEGGER_RTT_vprintf+0x526>
    } else {
      _StoreChar(&BufferDesc, c);
 80053f6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80053fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053fe:	4611      	mov	r1, r2
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff fbdb 	bl	8004bbc <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8005406:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800540a:	2b00      	cmp	r3, #0
 800540c:	f6bf ad8f 	bge.w	8004f2e <SEGGER_RTT_vprintf+0x4e>
 8005410:	e000      	b.n	8005414 <SEGGER_RTT_vprintf+0x534>
      break;
 8005412:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8005414:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005418:	2b00      	cmp	r3, #0
 800541a:	dd15      	ble.n	8005448 <SEGGER_RTT_vprintf+0x568>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 800541c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <SEGGER_RTT_vprintf+0x55a>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8005424:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005428:	f107 0110 	add.w	r1, r7, #16
 800542c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005430:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	f7ff fb2d 	bl	8004a94 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 800543a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800543e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005442:	4413      	add	r3, r2
 8005444:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  }
  return BufferDesc.ReturnValue;
 8005448:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 800544c:	4618      	mov	r0, r3
 800544e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop

08005458 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8005458:	b40e      	push	{r1, r2, r3}
 800545a:	b580      	push	{r7, lr}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8005462:	f107 0320 	add.w	r3, r7, #32
 8005466:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8005468:	f107 0308 	add.w	r3, r7, #8
 800546c:	461a      	mov	r2, r3
 800546e:	69f9      	ldr	r1, [r7, #28]
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff fd35 	bl	8004ee0 <SEGGER_RTT_vprintf>
 8005476:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8005478:	68fb      	ldr	r3, [r7, #12]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005484:	b003      	add	sp, #12
 8005486:	4770      	bx	lr

08005488 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800548c:	f3bf 8f4f 	dsb	sy
}
 8005490:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <__NVIC_SystemReset+0x24>)
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800549a:	4904      	ldr	r1, [pc, #16]	; (80054ac <__NVIC_SystemReset+0x24>)
 800549c:	4b04      	ldr	r3, [pc, #16]	; (80054b0 <__NVIC_SystemReset+0x28>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80054a2:	f3bf 8f4f 	dsb	sy
}
 80054a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80054a8:	bf00      	nop
 80054aa:	e7fd      	b.n	80054a8 <__NVIC_SystemReset+0x20>
 80054ac:	e000ed00 	.word	0xe000ed00
 80054b0:	05fa0004 	.word	0x05fa0004

080054b4 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054d2:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	68b8      	ldr	r0, [r7, #8]
 80054d8:	f000 f810 	bl	80054fc <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 80054dc:	f7fd fd82 	bl	8002fe4 <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 80054e0:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <assertFail+0x44>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 80054ec:	f7ff ffcc 	bl	8005488 <__NVIC_SystemReset>
  }
}
 80054f0:	bf00      	nop
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	e000edf0 	.word	0xe000edf0

080054fc <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 8005506:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <storeAssertFileData+0x38>)
 8005508:	4a0b      	ldr	r2, [pc, #44]	; (8005538 <storeAssertFileData+0x3c>)
 800550a:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <storeAssertFileData+0x38>)
 800550e:	2201      	movs	r2, #1
 8005510:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8005512:	4b08      	ldr	r3, [pc, #32]	; (8005534 <storeAssertFileData+0x38>)
 8005514:	791a      	ldrb	r2, [r3, #4]
 8005516:	4b09      	ldr	r3, [pc, #36]	; (800553c <storeAssertFileData+0x40>)
 8005518:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 800551a:	4a06      	ldr	r2, [pc, #24]	; (8005534 <storeAssertFileData+0x38>)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8005520:	4a04      	ldr	r2, [pc, #16]	; (8005534 <storeAssertFileData+0x38>)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	60d3      	str	r3, [r2, #12]
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	200040a8 	.word	0x200040a8
 8005538:	2f8a001f 	.word	0x2f8a001f
 800553c:	200068c8 	.word	0x200068c8

08005540 <consoleInit>:

  return true;
}

void consoleInit()
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  if (isInit)
 8005544:	4b12      	ldr	r3, [pc, #72]	; (8005590 <consoleInit+0x50>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d11f      	bne.n	800558c <consoleInit+0x4c>
    return;

  messageToPrint.size = 0;
 800554c:	4b11      	ldr	r3, [pc, #68]	; (8005594 <consoleInit+0x54>)
 800554e:	2200      	movs	r2, #0
 8005550:	701a      	strb	r2, [r3, #0]
  messageToPrint.header = CRTP_HEADER(CRTP_PORT_CONSOLE, 0);
 8005552:	4b10      	ldr	r3, [pc, #64]	; (8005594 <consoleInit+0x54>)
 8005554:	2200      	movs	r2, #0
 8005556:	705a      	strb	r2, [r3, #1]
  vSemaphoreCreateBinary(synch);
 8005558:	2203      	movs	r2, #3
 800555a:	2100      	movs	r1, #0
 800555c:	2001      	movs	r0, #1
 800555e:	f00d fd11 	bl	8012f84 <xQueueGenericCreate>
 8005562:	4603      	mov	r3, r0
 8005564:	4a0c      	ldr	r2, [pc, #48]	; (8005598 <consoleInit+0x58>)
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <consoleInit+0x58>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d006      	beq.n	800557e <consoleInit+0x3e>
 8005570:	4b09      	ldr	r3, [pc, #36]	; (8005598 <consoleInit+0x58>)
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	2300      	movs	r3, #0
 8005576:	2200      	movs	r2, #0
 8005578:	2100      	movs	r1, #0
 800557a:	f00d fdad 	bl	80130d8 <xQueueGenericSend>
  messageSendingIsPending = false;
 800557e:	4b07      	ldr	r3, [pc, #28]	; (800559c <consoleInit+0x5c>)
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]

  isInit = true;
 8005584:	4b02      	ldr	r3, [pc, #8]	; (8005590 <consoleInit+0x50>)
 8005586:	2201      	movs	r2, #1
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	e000      	b.n	800558e <consoleInit+0x4e>
    return;
 800558c:	bf00      	nop
}
 800558e:	bd80      	pop	{r7, pc}
 8005590:	200068f4 	.word	0x200068f4
 8005594:	200068cc 	.word	0x200068cc
 8005598:	200068f0 	.word	0x200068f0
 800559c:	200068ec 	.word	0x200068ec

080055a0 <crc32ContextInit>:
static bool crcTableInitialized = false;

// *** Public API ***

void crc32ContextInit(crc32Context_t *context)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  // Lazy static ...
  if (crcTableInitialized == false) {
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <crc32ContextInit+0x34>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	f083 0301 	eor.w	r3, r3, #1
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <crc32ContextInit+0x22>
    // initialize crcTable
    crcTableInit(crcTable);
 80055b6:	4808      	ldr	r0, [pc, #32]	; (80055d8 <crc32ContextInit+0x38>)
 80055b8:	f000 f8af 	bl	800571a <crcTableInit>
    crcTableInitialized = true;
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <crc32ContextInit+0x34>)
 80055be:	2201      	movs	r2, #1
 80055c0:	701a      	strb	r2, [r3, #0]
  }

  context->remainder = INITIAL_REMAINDER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055c8:	601a      	str	r2, [r3, #0]
}
 80055ca:	bf00      	nop
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	200068f5 	.word	0x200068f5
 80055d8:	20002970 	.word	0x20002970

080055dc <crc32Update>:

void crc32Update(crc32Context_t *context, const void* data, size_t size)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  context->remainder = crcByByte(data, size, context->remainder, crcTable);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <crc32Update+0x28>)
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	68b8      	ldr	r0, [r7, #8]
 80055f2:	f000 f869 	bl	80056c8 <crcByByte>
 80055f6:	4602      	mov	r2, r0
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	601a      	str	r2, [r3, #0]
}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20002970 	.word	0x20002970

08005608 <crc32Out>:

uint32_t crc32Out(const crc32Context_t *context)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  return context->remainder ^ FINAL_XOR_VALUE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	43db      	mvns	r3, r3
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <crc32CalculateBuffer>:

uint32_t crc32CalculateBuffer(const void* buffer, size_t size)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
  crc32Context_t ctx;

  crc32ContextInit(&ctx);
 800562c:	f107 030c 	add.w	r3, r7, #12
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff ffb5 	bl	80055a0 <crc32ContextInit>
  crc32Update(&ctx, buffer, size);
 8005636:	f107 030c 	add.w	r3, r7, #12
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff ffcc 	bl	80055dc <crc32Update>
  return crc32Out(&ctx);
 8005644:	f107 030c 	add.w	r3, r7, #12
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff ffdd 	bl	8005608 <crc32Out>
 800564e:	4603      	mov	r3, r0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <crcByBit>:
// *** Core calculation from Bosh ***

/* bit-wise crc calculation */
static uint32_t crcByBit(const uint8_t* message, uint32_t bytesToProcess,
             uint32_t remainder)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  for (unsigned int byte = 0; byte < bytesToProcess; ++byte)
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e021      	b.n	80056ae <crcByBit+0x56>
    {
      remainder ^= *(message+byte);
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	4413      	add	r3, r2
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4053      	eors	r3, r2
 8005678:	607b      	str	r3, [r7, #4]

      for(uint8_t bit = 8; bit > 0; --bit)
 800567a:	2308      	movs	r3, #8
 800567c:	74fb      	strb	r3, [r7, #19]
 800567e:	e010      	b.n	80056a2 <crcByBit+0x4a>
        {
          /* reflect is realized by mirroring algorithm
           * LSB is first to be processed */
          if (remainder & 1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <crcByBit+0x3e>
            remainder = (remainder >> 1) ^ POLYNOMIAL;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	085a      	lsrs	r2, r3, #1
 800568e:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <crcByBit+0x6c>)
 8005690:	4053      	eors	r3, r2
 8005692:	607b      	str	r3, [r7, #4]
 8005694:	e002      	b.n	800569c <crcByBit+0x44>
          else
            remainder = (remainder >> 1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	607b      	str	r3, [r7, #4]
      for(uint8_t bit = 8; bit > 0; --bit)
 800569c:	7cfb      	ldrb	r3, [r7, #19]
 800569e:	3b01      	subs	r3, #1
 80056a0:	74fb      	strb	r3, [r7, #19]
 80056a2:	7cfb      	ldrb	r3, [r7, #19]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1eb      	bne.n	8005680 <crcByBit+0x28>
  for (unsigned int byte = 0; byte < bytesToProcess; ++byte)
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	3301      	adds	r3, #1
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d3d9      	bcc.n	800566a <crcByBit+0x12>
        }
    }
  return remainder;
 80056b6:	687b      	ldr	r3, [r7, #4]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	edb88320 	.word	0xedb88320

080056c8 <crcByByte>:
/* byte-wise crc calculation, requires an initialized crcTable
 * this is factor 8 faster and should be used if multiple crcs
 * have to be calculated */
static uint32_t crcByByte(const uint8_t* message, uint32_t bytesToProcess,
              uint32_t remainder, uint32_t* crcTable)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
  uint8_t data;
  for (int byte = 0; byte < bytesToProcess; ++byte)
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	e013      	b.n	8005704 <crcByByte+0x3c>
    {
      data = (*(message+byte) ^ remainder);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	781a      	ldrb	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	4053      	eors	r3, r2
 80056ea:	74fb      	strb	r3, [r7, #19]
      remainder = *(crcTable+data) ^ (remainder >> 8);
 80056ec:	7cfb      	ldrb	r3, [r7, #19]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	4413      	add	r3, r2
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	0a1b      	lsrs	r3, r3, #8
 80056fa:	4053      	eors	r3, r2
 80056fc:	607b      	str	r3, [r7, #4]
  for (int byte = 0; byte < bytesToProcess; ++byte)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	3301      	adds	r3, #1
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	429a      	cmp	r2, r3
 800570a:	d8e7      	bhi.n	80056dc <crcByByte+0x14>
    }
  return remainder;
 800570c:	687b      	ldr	r3, [r7, #4]
}
 800570e:	4618      	mov	r0, r3
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <crcTableInit>:

/* creates a lookup-table which is necessary for the crcByByte function */
static void crcTableInit(uint32_t* crcTable)
{
 800571a:	b590      	push	{r4, r7, lr}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  uint8_t dividend = ~0;
 8005722:	23ff      	movs	r3, #255	; 0xff
 8005724:	73fb      	strb	r3, [r7, #15]
  /* fill the table by bit-wise calculations of checksums
   * for each possible dividend */
  do {
      *(crcTable+dividend) = crcByBit(&dividend, 1, 0);
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	18d4      	adds	r4, r2, r3
 800572e:	f107 030f 	add.w	r3, r7, #15
 8005732:	2200      	movs	r2, #0
 8005734:	2101      	movs	r1, #1
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff ff8e 	bl	8005658 <crcByBit>
 800573c:	4603      	mov	r3, r0
 800573e:	6023      	str	r3, [r4, #0]
  } while(dividend-- > 0);
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	1e5a      	subs	r2, r3, #1
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	73fa      	strb	r2, [r7, #15]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ec      	bne.n	8005726 <crcTableInit+0xc>
}
 800574c:	bf00      	nop
 800574e:	bf00      	nop
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	bd90      	pop	{r4, r7, pc}

08005756 <debugInit>:
 */
#include "debug.h"


void debugInit(void)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af02      	add	r7, sp, #8
#ifdef DEBUG_PRINT_ON_SEGGER_RTT
  SEGGER_RTT_Init();
 800575c:	f7ff fa28 	bl	8004bb0 <SEGGER_RTT_Init>
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
 8005760:	2301      	movs	r3, #1
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2300      	movs	r3, #0
 8005766:	2200      	movs	r2, #0
 8005768:	2100      	movs	r1, #0
 800576a:	2000      	movs	r0, #0
 800576c:	f7ff f9b6 	bl	8004adc <SEGGER_RTT_ConfigUpBuffer>
#endif
}
 8005770:	bf00      	nop
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <uartInit>:
    return len;
}
*/


void uartInit(void) {
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af02      	add	r7, sp, #8

#ifdef CONFIG_DEBUG_PRINT_ON_UART
	uartqueue = STATIC_MEM_QUEUE_CREATE(uartqueue);
 800577e:	2340      	movs	r3, #64	; 0x40
 8005780:	4618      	mov	r0, r3
 8005782:	2301      	movs	r3, #1
 8005784:	4619      	mov	r1, r3
 8005786:	2300      	movs	r3, #0
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <uartInit+0x2c>)
 800578c:	4a06      	ldr	r2, [pc, #24]	; (80057a8 <uartInit+0x30>)
 800578e:	f00d fb8d 	bl	8012eac <xQueueGenericCreateStatic>
 8005792:	4603      	mov	r3, r0
 8005794:	4a05      	ldr	r2, [pc, #20]	; (80057ac <uartInit+0x34>)
 8005796:	6013      	str	r3, [r2, #0]
	isInit = true;
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <uartInit+0x38>)
 800579a:	2201      	movs	r2, #1
 800579c:	701a      	strb	r2, [r3, #0]
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

}
 800579e:	bf00      	nop
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20002db0 	.word	0x20002db0
 80057a8:	20002d70 	.word	0x20002d70
 80057ac:	200068f8 	.word	0x200068f8
 80057b0:	200069a5 	.word	0x200069a5

080057b4 <uartDmaInit>:



void uartDmaInit(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af02      	add	r7, sp, #8


#ifdef ENABLE_UART_DMA

	  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
	  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 80057ba:	2303      	movs	r3, #3
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	4b21      	ldr	r3, [pc, #132]	; (8005844 <uartDmaInit+0x90>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	2100      	movs	r1, #0
 80057c4:	2001      	movs	r0, #1
 80057c6:	f00d fb71 	bl	8012eac <xQueueGenericCreateStatic>
 80057ca:	4603      	mov	r3, r0
 80057cc:	4a1e      	ldr	r2, [pc, #120]	; (8005848 <uartDmaInit+0x94>)
 80057ce:	6013      	str	r3, [r2, #0]
	  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 80057d0:	2303      	movs	r3, #3
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	4b1d      	ldr	r3, [pc, #116]	; (800584c <uartDmaInit+0x98>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	2100      	movs	r1, #0
 80057da:	2001      	movs	r0, #1
 80057dc:	f00d fb66 	bl	8012eac <xQueueGenericCreateStatic>
 80057e0:	4603      	mov	r3, r0
 80057e2:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <uartDmaInit+0x9c>)
 80057e4:	6013      	str	r3, [r2, #0]
	  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 80057e6:	4b1a      	ldr	r3, [pc, #104]	; (8005850 <uartDmaInit+0x9c>)
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	2300      	movs	r3, #0
 80057ec:	2200      	movs	r2, #0
 80057ee:	2100      	movs	r1, #0
 80057f0:	f00d fc72 	bl	80130d8 <xQueueGenericSend>
	  xSemaphoreGive(waitUntilSendDone);
 80057f4:	4b14      	ldr	r3, [pc, #80]	; (8005848 <uartDmaInit+0x94>)
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	2300      	movs	r3, #0
 80057fa:	2200      	movs	r2, #0
 80057fc:	2100      	movs	r1, #0
 80057fe:	f00d fc6b 	bl	80130d8 <xQueueGenericSend>

	  __HAL_RCC_DMA2_CLK_ENABLE();
 8005802:	2300      	movs	r3, #0
 8005804:	607b      	str	r3, [r7, #4]
 8005806:	4b13      	ldr	r3, [pc, #76]	; (8005854 <uartDmaInit+0xa0>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	4a12      	ldr	r2, [pc, #72]	; (8005854 <uartDmaInit+0xa0>)
 800580c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005810:	6313      	str	r3, [r2, #48]	; 0x30
 8005812:	4b10      	ldr	r3, [pc, #64]	; (8005854 <uartDmaInit+0xa0>)
 8005814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800581a:	607b      	str	r3, [r7, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
	  HAL_DMA_Init(&hdma_usart6_tx);
 800581e:	480e      	ldr	r0, [pc, #56]	; (8005858 <uartDmaInit+0xa4>)
 8005820:	f004 feac 	bl	800a57c <HAL_DMA_Init>
	  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8005824:	2200      	movs	r2, #0
 8005826:	2105      	movs	r1, #5
 8005828:	2045      	movs	r0, #69	; 0x45
 800582a:	f004 fe70 	bl	800a50e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800582e:	2045      	movs	r0, #69	; 0x45
 8005830:	f004 fe89 	bl	800a546 <HAL_NVIC_EnableIRQ>

	  isUartDmaInitialized = true;
 8005834:	4b09      	ldr	r3, [pc, #36]	; (800585c <uartDmaInit+0xa8>)
 8005836:	2201      	movs	r2, #1
 8005838:	701a      	strb	r2, [r3, #0]
#endif


}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20006954 	.word	0x20006954
 8005848:	20006950 	.word	0x20006950
 800584c:	20006900 	.word	0x20006900
 8005850:	200068fc 	.word	0x200068fc
 8005854:	40023800 	.word	0x40023800
 8005858:	20007e20 	.word	0x20007e20
 800585c:	200069a4 	.word	0x200069a4

08005860 <eventTrigger>:
    }
    return 0;
}

void eventTrigger(const eventtrigger *event)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < eventtriggerHandler_Count; ++i) {
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	e00e      	b.n	800588c <eventTrigger+0x2c>
        if (callbacks[i]) {
 800586e:	4a0b      	ldr	r2, [pc, #44]	; (800589c <eventTrigger+0x3c>)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <eventTrigger+0x26>
            callbacks[i](event);
 800587a:	4a08      	ldr	r2, [pc, #32]	; (800589c <eventTrigger+0x3c>)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	4798      	blx	r3
    for (int i = 0; i < eventtriggerHandler_Count; ++i) {
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	dded      	ble.n	800586e <eventTrigger+0xe>
        }
    }
}
 8005892:	bf00      	nop
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	200069a8 	.word	0x200069a8

080058a0 <logInit>:
static acquisitionType_t acquisitionTypeFromLogType(uint8_t logType);

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(logTask, LOG_TASK_STACKSIZE);

void logInit(void)
{
 80058a0:	b590      	push	{r4, r7, lr}
 80058a2:	b08b      	sub	sp, #44	; 0x2c
 80058a4:	af04      	add	r7, sp, #16
  int i;
  const char* group = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	607b      	str	r3, [r7, #4]
  int groupLength = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	613b      	str	r3, [r7, #16]

  if(isInit)
 80058ae:	4b80      	ldr	r3, [pc, #512]	; (8005ab0 <logInit+0x210>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f040 80f7 	bne.w	8005aa6 <logInit+0x206>
    return;

  logs = &_log_start;
 80058b8:	4b7e      	ldr	r3, [pc, #504]	; (8005ab4 <logInit+0x214>)
 80058ba:	4a7f      	ldr	r2, [pc, #508]	; (8005ab8 <logInit+0x218>)
 80058bc:	601a      	str	r2, [r3, #0]
  logsLen = &_log_stop - &_log_start;
 80058be:	4a7f      	ldr	r2, [pc, #508]	; (8005abc <logInit+0x21c>)
 80058c0:	4b7d      	ldr	r3, [pc, #500]	; (8005ab8 <logInit+0x218>)
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	109b      	asrs	r3, r3, #2
 80058c6:	4a7e      	ldr	r2, [pc, #504]	; (8005ac0 <logInit+0x220>)
 80058c8:	fb02 f303 	mul.w	r3, r2, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	4b7d      	ldr	r3, [pc, #500]	; (8005ac4 <logInit+0x224>)
 80058d0:	601a      	str	r2, [r3, #0]

  // Calculate a hash of the toc by chaining description of each elements
  // Using the CRTP packet as temporary buffer
  logsCrc = 0;
 80058d2:	4b7d      	ldr	r3, [pc, #500]	; (8005ac8 <logInit+0x228>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
  for (int i=0; i<logsLen; i++)
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	e092      	b.n	8005a04 <logInit+0x164>
  {
    int len = 5;
 80058de:	2305      	movs	r3, #5
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	4b79      	ldr	r3, [pc, #484]	; (8005ac8 <logInit+0x228>)
 80058e4:	681b      	ldr	r3, [r3, #0]
    memcpy(&p.data[0], &logsCrc, 4);
 80058e6:	4a79      	ldr	r2, [pc, #484]	; (8005acc <logInit+0x22c>)
 80058e8:	f8c2 3002 	str.w	r3, [r2, #2]
    p.data[4] = logs[i].type;
 80058ec:	4b71      	ldr	r3, [pc, #452]	; (8005ab4 <logInit+0x214>)
 80058ee:	6819      	ldr	r1, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4613      	mov	r3, r2
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	781a      	ldrb	r2, [r3, #0]
 80058fe:	4b73      	ldr	r3, [pc, #460]	; (8005acc <logInit+0x22c>)
 8005900:	719a      	strb	r2, [r3, #6]
    if (logs[i].type & LOG_GROUP) {
 8005902:	4b6c      	ldr	r3, [pc, #432]	; (8005ab4 <logInit+0x214>)
 8005904:	6819      	ldr	r1, [r3, #0]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4613      	mov	r3, r2
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	b25b      	sxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	da1c      	bge.n	8005954 <logInit+0xb4>
      if (logs[i].type & LOG_START) {
 800591a:	4b66      	ldr	r3, [pc, #408]	; (8005ab4 <logInit+0x214>)
 800591c:	6819      	ldr	r1, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4613      	mov	r3, r2
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	440b      	add	r3, r1
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d026      	beq.n	8005982 <logInit+0xe2>
        group = logs[i].name;
 8005934:	4b5f      	ldr	r3, [pc, #380]	; (8005ab4 <logInit+0x214>)
 8005936:	6819      	ldr	r1, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4613      	mov	r3, r2
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	607b      	str	r3, [r7, #4]
        groupLength = strlen(group);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7fa fca1 	bl	8000290 <strlen>
 800594e:	4603      	mov	r3, r0
 8005950:	613b      	str	r3, [r7, #16]
 8005952:	e016      	b.n	8005982 <logInit+0xe2>
      }
    } else {
      // CMD_GET_ITEM_V2 result's size is: 3 + strlen(logs[i].name) + groupLength + 2
      if (strlen(logs[i].name) + groupLength + 2 > 26) {
 8005954:	4b57      	ldr	r3, [pc, #348]	; (8005ab4 <logInit+0x214>)
 8005956:	6819      	ldr	r1, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4613      	mov	r3, r2
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4618      	mov	r0, r3
 8005968:	f7fa fc92 	bl	8000290 <strlen>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4413      	add	r3, r2
 8005972:	3302      	adds	r3, #2
 8005974:	2b1a      	cmp	r3, #26
 8005976:	d904      	bls.n	8005982 <logInit+0xe2>
        LOG_ERROR("'%s.%s' too long\n", group, logs[i].name);
        ASSERT_FAILED();
 8005978:	22d1      	movs	r2, #209	; 0xd1
 800597a:	4955      	ldr	r1, [pc, #340]	; (8005ad0 <logInit+0x230>)
 800597c:	4855      	ldr	r0, [pc, #340]	; (8005ad4 <logInit+0x234>)
 800597e:	f7ff fd99 	bl	80054b4 <assertFail>
      }
    }
    if (logs[i].name) {
 8005982:	4b4c      	ldr	r3, [pc, #304]	; (8005ab4 <logInit+0x214>)
 8005984:	6819      	ldr	r1, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4613      	mov	r3, r2
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d02a      	beq.n	80059ee <logInit+0x14e>
      memcpy(&p.data[5], logs[i].name, strlen(logs[i].name));
 8005998:	4b46      	ldr	r3, [pc, #280]	; (8005ab4 <logInit+0x214>)
 800599a:	6819      	ldr	r1, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4613      	mov	r3, r2
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	685c      	ldr	r4, [r3, #4]
 80059aa:	4b42      	ldr	r3, [pc, #264]	; (8005ab4 <logInit+0x214>)
 80059ac:	6819      	ldr	r1, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4613      	mov	r3, r2
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fa fc67 	bl	8000290 <strlen>
 80059c2:	4603      	mov	r3, r0
 80059c4:	461a      	mov	r2, r3
 80059c6:	4621      	mov	r1, r4
 80059c8:	4843      	ldr	r0, [pc, #268]	; (8005ad8 <logInit+0x238>)
 80059ca:	f012 f892 	bl	8017af2 <memcpy>
      len += strlen(logs[i].name);
 80059ce:	4b39      	ldr	r3, [pc, #228]	; (8005ab4 <logInit+0x214>)
 80059d0:	6819      	ldr	r1, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4613      	mov	r3, r2
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fa fc55 	bl	8000290 <strlen>
 80059e6:	4602      	mov	r2, r0
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4413      	add	r3, r2
 80059ec:	60bb      	str	r3, [r7, #8]
    }
    logsCrc = crc32CalculateBuffer(p.data, len);
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4619      	mov	r1, r3
 80059f2:	483a      	ldr	r0, [pc, #232]	; (8005adc <logInit+0x23c>)
 80059f4:	f7ff fe15 	bl	8005622 <crc32CalculateBuffer>
 80059f8:	4603      	mov	r3, r0
 80059fa:	4a33      	ldr	r2, [pc, #204]	; (8005ac8 <logInit+0x228>)
 80059fc:	6013      	str	r3, [r2, #0]
  for (int i=0; i<logsLen; i++)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	4b2f      	ldr	r3, [pc, #188]	; (8005ac4 <logInit+0x224>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	f6ff af67 	blt.w	80058de <logInit+0x3e>
  }

  // Big lock that protects the log datastructures
  logLock = xSemaphoreCreateMutexStatic(&logLockBuffer);
 8005a10:	4933      	ldr	r1, [pc, #204]	; (8005ae0 <logInit+0x240>)
 8005a12:	2001      	movs	r0, #1
 8005a14:	f00d fb45 	bl	80130a2 <xQueueCreateMutexStatic>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	4a32      	ldr	r2, [pc, #200]	; (8005ae4 <logInit+0x244>)
 8005a1c:	6013      	str	r3, [r2, #0]

  for (i=0; i<logsLen; i++)
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e014      	b.n	8005a4e <logInit+0x1ae>
  {
    if(!(logs[i].type & LOG_GROUP))
 8005a24:	4b23      	ldr	r3, [pc, #140]	; (8005ab4 <logInit+0x214>)
 8005a26:	6819      	ldr	r1, [r3, #0]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	b25b      	sxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	db05      	blt.n	8005a48 <logInit+0x1a8>
      logsCount++;
 8005a3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ae8 <logInit+0x248>)
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	3301      	adds	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	4b28      	ldr	r3, [pc, #160]	; (8005ae8 <logInit+0x248>)
 8005a46:	801a      	strh	r2, [r3, #0]
  for (i=0; i<logsLen; i++)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	4b1d      	ldr	r3, [pc, #116]	; (8005ac4 <logInit+0x224>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	dbe5      	blt.n	8005a24 <logInit+0x184>
  }

  //Manually free all log blocks
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e00c      	b.n	8005a78 <logInit+0x1d8>
    logBlocks[i].id = BLOCK_ID_FREE;
 8005a5e:	4923      	ldr	r1, [pc, #140]	; (8005aec <logInit+0x24c>)
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4613      	mov	r3, r2
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	1a9b      	subs	r3, r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a70:	601a      	str	r2, [r3, #0]
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	3301      	adds	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2b0f      	cmp	r3, #15
 8005a7c:	ddef      	ble.n	8005a5e <logInit+0x1be>

  //Init data structures and set the log subsystem in a known state
  logReset();
 8005a7e:	f001 f9fd 	bl	8006e7c <logReset>

  //Start the log task
  STATIC_MEM_TASK_CREATE(logTask, logTask, LOG_TASK_NAME, NULL, LOG_TASK_PRI);
 8005a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a86:	461a      	mov	r2, r3
 8005a88:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <logInit+0x250>)
 8005a8a:	9302      	str	r3, [sp, #8]
 8005a8c:	4b19      	ldr	r3, [pc, #100]	; (8005af4 <logInit+0x254>)
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	2301      	movs	r3, #1
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	2300      	movs	r3, #0
 8005a96:	4918      	ldr	r1, [pc, #96]	; (8005af8 <logInit+0x258>)
 8005a98:	4818      	ldr	r0, [pc, #96]	; (8005afc <logInit+0x25c>)
 8005a9a:	f00e f83d 	bl	8013b18 <xTaskCreateStatic>

  isInit = true;
 8005a9e:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <logInit+0x210>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e000      	b.n	8005aa8 <logInit+0x208>
    return;
 8005aa6:	bf00      	nop
}
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd90      	pop	{r4, r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20006a30 	.word	0x20006a30
 8005ab4:	20006a00 	.word	0x20006a00
 8005ab8:	080199e0 	.word	0x080199e0
 8005abc:	08019b84 	.word	0x08019b84
 8005ac0:	aaaaaaab 	.word	0xaaaaaaab
 8005ac4:	20006a04 	.word	0x20006a04
 8005ac8:	20006a08 	.word	0x20006a08
 8005acc:	20006a10 	.word	0x20006a10
 8005ad0:	0801a9b8 	.word	0x0801a9b8
 8005ad4:	0801a9d0 	.word	0x0801a9d0
 8005ad8:	20006a17 	.word	0x20006a17
 8005adc:	20006a12 	.word	0x20006a12
 8005ae0:	200069b0 	.word	0x200069b0
 8005ae4:	200069ac 	.word	0x200069ac
 8005ae8:	20006a0c 	.word	0x20006a0c
 8005aec:	20003600 	.word	0x20003600
 8005af0:	20003dc0 	.word	0x20003dc0
 8005af4:	200039c0 	.word	0x200039c0
 8005af8:	0801a9d4 	.word	0x0801a9d4
 8005afc:	08005b01 	.word	0x08005b01

08005b00 <logTask>:
{
  return isInit;
}

void logTask(void * prm)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
	crtpInitTaskQueue(CRTP_PORT_LOG);
 8005b08:	2005      	movs	r0, #5
 8005b0a:	f7fb fc83 	bl	8001414 <crtpInitTaskQueue>

	while(1) {
		crtpReceivePacketBlock(CRTP_PORT_LOG, &p);
 8005b0e:	4914      	ldr	r1, [pc, #80]	; (8005b60 <logTask+0x60>)
 8005b10:	2005      	movs	r0, #5
 8005b12:	f7fb fcaf 	bl	8001474 <crtpReceivePacketBlock>

		xSemaphoreTake(logLock, portMAX_DELAY);
 8005b16:	4b13      	ldr	r3, [pc, #76]	; (8005b64 <logTask+0x64>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f00d fd5c 	bl	80135dc <xQueueSemaphoreTake>
		if (p.channel==TOC_CH)
 8005b24:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <logTask+0x60>)
 8005b26:	785b      	ldrb	r3, [r3, #1]
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d104      	bne.n	8005b3c <logTask+0x3c>
		  logTOCProcess(p.data[0]);
 8005b32:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <logTask+0x60>)
 8005b34:	789b      	ldrb	r3, [r3, #2]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 f816 	bl	8005b68 <logTOCProcess>
		if (p.channel==CONTROL_CH)
 8005b3c:	4b08      	ldr	r3, [pc, #32]	; (8005b60 <logTask+0x60>)
 8005b3e:	785b      	ldrb	r3, [r3, #1]
 8005b40:	f003 0303 	and.w	r3, r3, #3
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <logTask+0x4e>
		  logControlProcess();
 8005b4a:	f000 fa13 	bl	8005f74 <logControlProcess>
		xSemaphoreGive(logLock);
 8005b4e:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <logTask+0x64>)
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	2300      	movs	r3, #0
 8005b54:	2200      	movs	r2, #0
 8005b56:	2100      	movs	r1, #0
 8005b58:	f00d fabe 	bl	80130d8 <xQueueGenericSend>
		crtpReceivePacketBlock(CRTP_PORT_LOG, &p);
 8005b5c:	e7d7      	b.n	8005b0e <logTask+0xe>
 8005b5e:	bf00      	nop
 8005b60:	20006a10 	.word	0x20006a10
 8005b64:	200069ac 	.word	0x200069ac

08005b68 <logTOCProcess>:
	}
}

void logTOCProcess(int command)
{
 8005b68:	b5b0      	push	{r4, r5, r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  int ptr = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
  char * group = "plop";
 8005b74:	4ba4      	ldr	r3, [pc, #656]	; (8005e08 <logTOCProcess+0x2a0>)
 8005b76:	613b      	str	r3, [r7, #16]
  uint16_t n=0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	81fb      	strh	r3, [r7, #14]
  uint16_t logId=0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	81bb      	strh	r3, [r7, #12]

  switch (command)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	f200 81e3 	bhi.w	8005f4e <logTOCProcess+0x3e6>
 8005b88:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <logTOCProcess+0x28>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005bf9 	.word	0x08005bf9
 8005b94:	08005ba1 	.word	0x08005ba1
 8005b98:	08005da9 	.word	0x08005da9
 8005b9c:	08005d67 	.word	0x08005d67
  {
  case CMD_GET_INFO: //Get info packet about the log implementation
    DEBUG_PRINT("Client uses old logging API!\n");
 8005ba0:	499a      	ldr	r1, [pc, #616]	; (8005e0c <logTOCProcess+0x2a4>)
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	f7ff fc58 	bl	8005458 <SEGGER_RTT_printf>
    LOG_DEBUG("Packet is TOC_GET_INFO\n");
    ptr = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
    group = "";
 8005bac:	4b98      	ldr	r3, [pc, #608]	; (8005e10 <logTOCProcess+0x2a8>)
 8005bae:	613b      	str	r3, [r7, #16]
    p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8005bb0:	4b98      	ldr	r3, [pc, #608]	; (8005e14 <logTOCProcess+0x2ac>)
 8005bb2:	2250      	movs	r2, #80	; 0x50
 8005bb4:	705a      	strb	r2, [r3, #1]
    p.size=8;
 8005bb6:	4b97      	ldr	r3, [pc, #604]	; (8005e14 <logTOCProcess+0x2ac>)
 8005bb8:	2208      	movs	r2, #8
 8005bba:	701a      	strb	r2, [r3, #0]
    p.data[0]=CMD_GET_INFO;
 8005bbc:	4b95      	ldr	r3, [pc, #596]	; (8005e14 <logTOCProcess+0x2ac>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	709a      	strb	r2, [r3, #2]
    if (logsCount < 255) {
 8005bc2:	4b95      	ldr	r3, [pc, #596]	; (8005e18 <logTOCProcess+0x2b0>)
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	2bfe      	cmp	r3, #254	; 0xfe
 8005bc8:	d805      	bhi.n	8005bd6 <logTOCProcess+0x6e>
      p.data[1]=logsCount;
 8005bca:	4b93      	ldr	r3, [pc, #588]	; (8005e18 <logTOCProcess+0x2b0>)
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	4b90      	ldr	r3, [pc, #576]	; (8005e14 <logTOCProcess+0x2ac>)
 8005bd2:	70da      	strb	r2, [r3, #3]
 8005bd4:	e002      	b.n	8005bdc <logTOCProcess+0x74>
    } else {
      p.data[1]=255;
 8005bd6:	4b8f      	ldr	r3, [pc, #572]	; (8005e14 <logTOCProcess+0x2ac>)
 8005bd8:	22ff      	movs	r2, #255	; 0xff
 8005bda:	70da      	strb	r2, [r3, #3]
 8005bdc:	4b8f      	ldr	r3, [pc, #572]	; (8005e1c <logTOCProcess+0x2b4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
    }
    memcpy(&p.data[2], &logsCrc, 4);
 8005be0:	4a8c      	ldr	r2, [pc, #560]	; (8005e14 <logTOCProcess+0x2ac>)
 8005be2:	6053      	str	r3, [r2, #4]
    p.data[6]=LOG_MAX_BLOCKS;
 8005be4:	4b8b      	ldr	r3, [pc, #556]	; (8005e14 <logTOCProcess+0x2ac>)
 8005be6:	2210      	movs	r2, #16
 8005be8:	721a      	strb	r2, [r3, #8]
    p.data[7]=LOG_MAX_OPS;
 8005bea:	4b8a      	ldr	r3, [pc, #552]	; (8005e14 <logTOCProcess+0x2ac>)
 8005bec:	2280      	movs	r2, #128	; 0x80
 8005bee:	725a      	strb	r2, [r3, #9]
    crtpSendPacketBlock(&p);
 8005bf0:	4888      	ldr	r0, [pc, #544]	; (8005e14 <logTOCProcess+0x2ac>)
 8005bf2:	f7fb fd3f 	bl	8001674 <crtpSendPacketBlock>
    break;
 8005bf6:	e1aa      	b.n	8005f4e <logTOCProcess+0x3e6>
  case CMD_GET_ITEM:  //Get log variable
    LOG_DEBUG("Packet is TOC_GET_ITEM Id: %d\n", p.data[1]);
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	e032      	b.n	8005c64 <logTOCProcess+0xfc>
    {
      if (logs[ptr].type & LOG_GROUP)
 8005bfe:	4b88      	ldr	r3, [pc, #544]	; (8005e20 <logTOCProcess+0x2b8>)
 8005c00:	6819      	ldr	r1, [r3, #0]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4613      	mov	r3, r2
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	b25b      	sxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	da1a      	bge.n	8005c4c <logTOCProcess+0xe4>
      {
        if (logs[ptr].type & LOG_START)
 8005c16:	4b82      	ldr	r3, [pc, #520]	; (8005e20 <logTOCProcess+0x2b8>)
 8005c18:	6819      	ldr	r1, [r3, #0]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	440b      	add	r3, r1
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <logTOCProcess+0xde>
          group = logs[ptr].name;
 8005c30:	4b7b      	ldr	r3, [pc, #492]	; (8005e20 <logTOCProcess+0x2b8>)
 8005c32:	6819      	ldr	r1, [r3, #0]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4613      	mov	r3, r2
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	4413      	add	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	e00b      	b.n	8005c5e <logTOCProcess+0xf6>
        else
          group = "";
 8005c46:	4b72      	ldr	r3, [pc, #456]	; (8005e10 <logTOCProcess+0x2a8>)
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	e008      	b.n	8005c5e <logTOCProcess+0xf6>
      }
      else                          //Ptr points a variable
      {
        if (n==p.data[1])
 8005c4c:	4b71      	ldr	r3, [pc, #452]	; (8005e14 <logTOCProcess+0x2ac>)
 8005c4e:	78db      	ldrb	r3, [r3, #3]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	89fa      	ldrh	r2, [r7, #14]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d00b      	beq.n	8005c70 <logTOCProcess+0x108>
          break;
        n++;
 8005c58:	89fb      	ldrh	r3, [r7, #14]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	81fb      	strh	r3, [r7, #14]
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	3301      	adds	r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	4b6f      	ldr	r3, [pc, #444]	; (8005e24 <logTOCProcess+0x2bc>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	dbc7      	blt.n	8005bfe <logTOCProcess+0x96>
 8005c6e:	e000      	b.n	8005c72 <logTOCProcess+0x10a>
          break;
 8005c70:	bf00      	nop
      }
    }

    if (ptr<logsLen)
 8005c72:	4b6c      	ldr	r3, [pc, #432]	; (8005e24 <logTOCProcess+0x2bc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	da67      	bge.n	8005d4c <logTOCProcess+0x1e4>
    {
      LOG_DEBUG("    Item is \"%s\":\"%s\"\n", group, logs[ptr].name);
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8005c7c:	4b65      	ldr	r3, [pc, #404]	; (8005e14 <logTOCProcess+0x2ac>)
 8005c7e:	2250      	movs	r2, #80	; 0x50
 8005c80:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM;
 8005c82:	4b64      	ldr	r3, [pc, #400]	; (8005e14 <logTOCProcess+0x2ac>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	709a      	strb	r2, [r3, #2]
      p.data[1]=n;
 8005c88:	89fb      	ldrh	r3, [r7, #14]
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	4b61      	ldr	r3, [pc, #388]	; (8005e14 <logTOCProcess+0x2ac>)
 8005c8e:	70da      	strb	r2, [r3, #3]
      p.data[2]=logGetType(ptr);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 f951 	bl	8006f3c <logGetType>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	4b5d      	ldr	r3, [pc, #372]	; (8005e14 <logTOCProcess+0x2ac>)
 8005ca0:	711a      	strb	r2, [r3, #4]
      p.size=3+2+strlen(group)+strlen(logs[ptr].name);
 8005ca2:	6938      	ldr	r0, [r7, #16]
 8005ca4:	f7fa faf4 	bl	8000290 <strlen>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	b2dc      	uxtb	r4, r3
 8005cac:	4b5c      	ldr	r3, [pc, #368]	; (8005e20 <logTOCProcess+0x2b8>)
 8005cae:	6819      	ldr	r1, [r3, #0]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fa fae6 	bl	8000290 <strlen>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	4423      	add	r3, r4
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	3305      	adds	r3, #5
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	4b50      	ldr	r3, [pc, #320]	; (8005e14 <logTOCProcess+0x2ac>)
 8005cd2:	701a      	strb	r2, [r3, #0]
      ASSERT(p.size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 8005cd4:	4b4f      	ldr	r3, [pc, #316]	; (8005e14 <logTOCProcess+0x2ac>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b1e      	cmp	r3, #30
 8005cda:	d905      	bls.n	8005ce8 <logTOCProcess+0x180>
 8005cdc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005ce0:	4951      	ldr	r1, [pc, #324]	; (8005e28 <logTOCProcess+0x2c0>)
 8005ce2:	4852      	ldr	r0, [pc, #328]	; (8005e2c <logTOCProcess+0x2c4>)
 8005ce4:	f7ff fbe6 	bl	80054b4 <assertFail>
      memcpy(p.data+3, group, strlen(group)+1);
 8005ce8:	4c51      	ldr	r4, [pc, #324]	; (8005e30 <logTOCProcess+0x2c8>)
 8005cea:	6938      	ldr	r0, [r7, #16]
 8005cec:	f7fa fad0 	bl	8000290 <strlen>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	6939      	ldr	r1, [r7, #16]
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f011 fefa 	bl	8017af2 <memcpy>
      memcpy(p.data+3+strlen(group)+1, logs[ptr].name, strlen(logs[ptr].name)+1);
 8005cfe:	6938      	ldr	r0, [r7, #16]
 8005d00:	f7fa fac6 	bl	8000290 <strlen>
 8005d04:	4603      	mov	r3, r0
 8005d06:	3304      	adds	r3, #4
 8005d08:	4a4a      	ldr	r2, [pc, #296]	; (8005e34 <logTOCProcess+0x2cc>)
 8005d0a:	189c      	adds	r4, r3, r2
 8005d0c:	4b44      	ldr	r3, [pc, #272]	; (8005e20 <logTOCProcess+0x2b8>)
 8005d0e:	6819      	ldr	r1, [r3, #0]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4613      	mov	r3, r2
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	4413      	add	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	440b      	add	r3, r1
 8005d1c:	685d      	ldr	r5, [r3, #4]
 8005d1e:	4b40      	ldr	r3, [pc, #256]	; (8005e20 <logTOCProcess+0x2b8>)
 8005d20:	6819      	ldr	r1, [r3, #0]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	4613      	mov	r3, r2
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fa faad 	bl	8000290 <strlen>
 8005d36:	4603      	mov	r3, r0
 8005d38:	3301      	adds	r3, #1
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f011 fed7 	bl	8017af2 <memcpy>
      crtpSendPacketBlock(&p);
 8005d44:	4833      	ldr	r0, [pc, #204]	; (8005e14 <logTOCProcess+0x2ac>)
 8005d46:	f7fb fc95 	bl	8001674 <crtpSendPacketBlock>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
      p.data[0]=CMD_GET_ITEM;
      p.size=1;
      crtpSendPacketBlock(&p);
    }
    break;
 8005d4a:	e100      	b.n	8005f4e <logTOCProcess+0x3e6>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8005d4c:	4b31      	ldr	r3, [pc, #196]	; (8005e14 <logTOCProcess+0x2ac>)
 8005d4e:	2250      	movs	r2, #80	; 0x50
 8005d50:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM;
 8005d52:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <logTOCProcess+0x2ac>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	709a      	strb	r2, [r3, #2]
      p.size=1;
 8005d58:	4b2e      	ldr	r3, [pc, #184]	; (8005e14 <logTOCProcess+0x2ac>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(&p);
 8005d5e:	482d      	ldr	r0, [pc, #180]	; (8005e14 <logTOCProcess+0x2ac>)
 8005d60:	f7fb fc88 	bl	8001674 <crtpSendPacketBlock>
    break;
 8005d64:	e0f3      	b.n	8005f4e <logTOCProcess+0x3e6>
  case CMD_GET_INFO_V2: //Get info packet about the log implementation
    LOG_DEBUG("Packet is TOC_GET_INFO\n");
    ptr = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
    group = "";
 8005d6a:	4b29      	ldr	r3, [pc, #164]	; (8005e10 <logTOCProcess+0x2a8>)
 8005d6c:	613b      	str	r3, [r7, #16]
    p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8005d6e:	4b29      	ldr	r3, [pc, #164]	; (8005e14 <logTOCProcess+0x2ac>)
 8005d70:	2250      	movs	r2, #80	; 0x50
 8005d72:	705a      	strb	r2, [r3, #1]
    p.size=9;
 8005d74:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <logTOCProcess+0x2ac>)
 8005d76:	2209      	movs	r2, #9
 8005d78:	701a      	strb	r2, [r3, #0]
    p.data[0]=CMD_GET_INFO_V2;
 8005d7a:	4b26      	ldr	r3, [pc, #152]	; (8005e14 <logTOCProcess+0x2ac>)
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	709a      	strb	r2, [r3, #2]
 8005d80:	4b25      	ldr	r3, [pc, #148]	; (8005e18 <logTOCProcess+0x2b0>)
 8005d82:	881b      	ldrh	r3, [r3, #0]
    memcpy(&p.data[1], &logsCount, 2);
 8005d84:	4a23      	ldr	r2, [pc, #140]	; (8005e14 <logTOCProcess+0x2ac>)
 8005d86:	f8a2 3003 	strh.w	r3, [r2, #3]
 8005d8a:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <logTOCProcess+0x2b4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
    memcpy(&p.data[3], &logsCrc, 4);
 8005d8e:	4a21      	ldr	r2, [pc, #132]	; (8005e14 <logTOCProcess+0x2ac>)
 8005d90:	f8c2 3005 	str.w	r3, [r2, #5]
    p.data[7]=LOG_MAX_BLOCKS;
 8005d94:	4b1f      	ldr	r3, [pc, #124]	; (8005e14 <logTOCProcess+0x2ac>)
 8005d96:	2210      	movs	r2, #16
 8005d98:	725a      	strb	r2, [r3, #9]
    p.data[8]=LOG_MAX_OPS;
 8005d9a:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <logTOCProcess+0x2ac>)
 8005d9c:	2280      	movs	r2, #128	; 0x80
 8005d9e:	729a      	strb	r2, [r3, #10]
    crtpSendPacketBlock(&p);
 8005da0:	481c      	ldr	r0, [pc, #112]	; (8005e14 <logTOCProcess+0x2ac>)
 8005da2:	f7fb fc67 	bl	8001674 <crtpSendPacketBlock>
    break;
 8005da6:	e0d2      	b.n	8005f4e <logTOCProcess+0x3e6>
 8005da8:	4b1a      	ldr	r3, [pc, #104]	; (8005e14 <logTOCProcess+0x2ac>)
 8005daa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005dae:	b29b      	uxth	r3, r3
  case CMD_GET_ITEM_V2:  //Get log variable
    memcpy(&logId, &p.data[1], 2);
 8005db0:	81bb      	strh	r3, [r7, #12]
    LOG_DEBUG("Packet is TOC_GET_ITEM Id: %d\n", logId);
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	e049      	b.n	8005e4c <logTOCProcess+0x2e4>
    {
      if (logs[ptr].type & LOG_GROUP)
 8005db8:	4b19      	ldr	r3, [pc, #100]	; (8005e20 <logTOCProcess+0x2b8>)
 8005dba:	6819      	ldr	r1, [r3, #0]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	b25b      	sxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	da33      	bge.n	8005e38 <logTOCProcess+0x2d0>
      {
        if (logs[ptr].type & LOG_START)
 8005dd0:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <logTOCProcess+0x2b8>)
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <logTOCProcess+0x298>
          group = logs[ptr].name;
 8005dea:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <logTOCProcess+0x2b8>)
 8005dec:	6819      	ldr	r1, [r3, #0]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4613      	mov	r3, r2
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	440b      	add	r3, r1
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	e022      	b.n	8005e46 <logTOCProcess+0x2de>
        else
          group = "";
 8005e00:	4b03      	ldr	r3, [pc, #12]	; (8005e10 <logTOCProcess+0x2a8>)
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	e01f      	b.n	8005e46 <logTOCProcess+0x2de>
 8005e06:	bf00      	nop
 8005e08:	0801a9d8 	.word	0x0801a9d8
 8005e0c:	0801a9e0 	.word	0x0801a9e0
 8005e10:	0801a9d0 	.word	0x0801a9d0
 8005e14:	20006a10 	.word	0x20006a10
 8005e18:	20006a0c 	.word	0x20006a0c
 8005e1c:	20006a08 	.word	0x20006a08
 8005e20:	20006a00 	.word	0x20006a00
 8005e24:	20006a04 	.word	0x20006a04
 8005e28:	0801a9b8 	.word	0x0801a9b8
 8005e2c:	0801aa00 	.word	0x0801aa00
 8005e30:	20006a15 	.word	0x20006a15
 8005e34:	20006a12 	.word	0x20006a12
      }
      else                          //Ptr points a variable
      {
        if (n==logId)
 8005e38:	89bb      	ldrh	r3, [r7, #12]
 8005e3a:	89fa      	ldrh	r2, [r7, #14]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d00b      	beq.n	8005e58 <logTOCProcess+0x2f0>
          break;
        n++;
 8005e40:	89fb      	ldrh	r3, [r7, #14]
 8005e42:	3301      	adds	r3, #1
 8005e44:	81fb      	strh	r3, [r7, #14]
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	4b42      	ldr	r3, [pc, #264]	; (8005f58 <logTOCProcess+0x3f0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	dbb0      	blt.n	8005db8 <logTOCProcess+0x250>
 8005e56:	e000      	b.n	8005e5a <logTOCProcess+0x2f2>
          break;
 8005e58:	bf00      	nop
      }
    }

    if (ptr<logsLen)
 8005e5a:	4b3f      	ldr	r3, [pc, #252]	; (8005f58 <logTOCProcess+0x3f0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	da67      	bge.n	8005f34 <logTOCProcess+0x3cc>
    {
      LOG_DEBUG("    Item is \"%s\":\"%s\"\n", group, logs[ptr].name);
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8005e64:	4b3d      	ldr	r3, [pc, #244]	; (8005f5c <logTOCProcess+0x3f4>)
 8005e66:	2250      	movs	r2, #80	; 0x50
 8005e68:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM_V2;
 8005e6a:	4b3c      	ldr	r3, [pc, #240]	; (8005f5c <logTOCProcess+0x3f4>)
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	709a      	strb	r2, [r3, #2]
 8005e70:	89bb      	ldrh	r3, [r7, #12]
      memcpy(&p.data[1], &logId, 2);
 8005e72:	4a3a      	ldr	r2, [pc, #232]	; (8005f5c <logTOCProcess+0x3f4>)
 8005e74:	f8a2 3003 	strh.w	r3, [r2, #3]
      p.data[3]=logGetType(ptr);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 f85d 	bl	8006f3c <logGetType>
 8005e82:	4603      	mov	r3, r0
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	4b35      	ldr	r3, [pc, #212]	; (8005f5c <logTOCProcess+0x3f4>)
 8005e88:	715a      	strb	r2, [r3, #5]
      p.size=4+2+strlen(group)+strlen(logs[ptr].name);
 8005e8a:	6938      	ldr	r0, [r7, #16]
 8005e8c:	f7fa fa00 	bl	8000290 <strlen>
 8005e90:	4603      	mov	r3, r0
 8005e92:	b2dc      	uxtb	r4, r3
 8005e94:	4b32      	ldr	r3, [pc, #200]	; (8005f60 <logTOCProcess+0x3f8>)
 8005e96:	6819      	ldr	r1, [r3, #0]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fa f9f2 	bl	8000290 <strlen>
 8005eac:	4603      	mov	r3, r0
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	4423      	add	r3, r4
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	3306      	adds	r3, #6
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	4b28      	ldr	r3, [pc, #160]	; (8005f5c <logTOCProcess+0x3f4>)
 8005eba:	701a      	strb	r2, [r3, #0]
      ASSERT(p.size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 8005ebc:	4b27      	ldr	r3, [pc, #156]	; (8005f5c <logTOCProcess+0x3f4>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b1e      	cmp	r3, #30
 8005ec2:	d905      	bls.n	8005ed0 <logTOCProcess+0x368>
 8005ec4:	f240 1271 	movw	r2, #369	; 0x171
 8005ec8:	4926      	ldr	r1, [pc, #152]	; (8005f64 <logTOCProcess+0x3fc>)
 8005eca:	4827      	ldr	r0, [pc, #156]	; (8005f68 <logTOCProcess+0x400>)
 8005ecc:	f7ff faf2 	bl	80054b4 <assertFail>
      memcpy(p.data+4, group, strlen(group)+1);
 8005ed0:	4c26      	ldr	r4, [pc, #152]	; (8005f6c <logTOCProcess+0x404>)
 8005ed2:	6938      	ldr	r0, [r7, #16]
 8005ed4:	f7fa f9dc 	bl	8000290 <strlen>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	3301      	adds	r3, #1
 8005edc:	461a      	mov	r2, r3
 8005ede:	6939      	ldr	r1, [r7, #16]
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f011 fe06 	bl	8017af2 <memcpy>
      memcpy(p.data+4+strlen(group)+1, logs[ptr].name, strlen(logs[ptr].name)+1);
 8005ee6:	6938      	ldr	r0, [r7, #16]
 8005ee8:	f7fa f9d2 	bl	8000290 <strlen>
 8005eec:	4603      	mov	r3, r0
 8005eee:	3305      	adds	r3, #5
 8005ef0:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <logTOCProcess+0x408>)
 8005ef2:	189c      	adds	r4, r3, r2
 8005ef4:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <logTOCProcess+0x3f8>)
 8005ef6:	6819      	ldr	r1, [r3, #0]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	4613      	mov	r3, r2
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	4413      	add	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	440b      	add	r3, r1
 8005f04:	685d      	ldr	r5, [r3, #4]
 8005f06:	4b16      	ldr	r3, [pc, #88]	; (8005f60 <logTOCProcess+0x3f8>)
 8005f08:	6819      	ldr	r1, [r3, #0]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fa f9b9 	bl	8000290 <strlen>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	3301      	adds	r3, #1
 8005f22:	461a      	mov	r2, r3
 8005f24:	4629      	mov	r1, r5
 8005f26:	4620      	mov	r0, r4
 8005f28:	f011 fde3 	bl	8017af2 <memcpy>
      crtpSendPacketBlock(&p);
 8005f2c:	480b      	ldr	r0, [pc, #44]	; (8005f5c <logTOCProcess+0x3f4>)
 8005f2e:	f7fb fba1 	bl	8001674 <crtpSendPacketBlock>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
      p.data[0]=CMD_GET_ITEM_V2;
      p.size=1;
      crtpSendPacketBlock(&p);
    }
    break;
 8005f32:	e00b      	b.n	8005f4c <logTOCProcess+0x3e4>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8005f34:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <logTOCProcess+0x3f4>)
 8005f36:	2250      	movs	r2, #80	; 0x50
 8005f38:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM_V2;
 8005f3a:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <logTOCProcess+0x3f4>)
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	709a      	strb	r2, [r3, #2]
      p.size=1;
 8005f40:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <logTOCProcess+0x3f4>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(&p);
 8005f46:	4805      	ldr	r0, [pc, #20]	; (8005f5c <logTOCProcess+0x3f4>)
 8005f48:	f7fb fb94 	bl	8001674 <crtpSendPacketBlock>
    break;
 8005f4c:	bf00      	nop
  }
}
 8005f4e:	bf00      	nop
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bdb0      	pop	{r4, r5, r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20006a04 	.word	0x20006a04
 8005f5c:	20006a10 	.word	0x20006a10
 8005f60:	20006a00 	.word	0x20006a00
 8005f64:	0801a9b8 	.word	0x0801a9b8
 8005f68:	0801aa00 	.word	0x0801aa00
 8005f6c:	20006a16 	.word	0x20006a16
 8005f70:	20006a12 	.word	0x20006a12

08005f74 <logControlProcess>:

void logControlProcess()
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
  int ret = ENOEXEC;
 8005f7a:	2308      	movs	r3, #8
 8005f7c:	607b      	str	r3, [r7, #4]

  switch(p.data[0])
 8005f7e:	4b40      	ldr	r3, [pc, #256]	; (8006080 <logControlProcess+0x10c>)
 8005f80:	789b      	ldrb	r3, [r3, #2]
 8005f82:	2b07      	cmp	r3, #7
 8005f84:	d86e      	bhi.n	8006064 <logControlProcess+0xf0>
 8005f86:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <logControlProcess+0x18>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005fad 	.word	0x08005fad
 8005f90:	08005fc5 	.word	0x08005fc5
 8005f94:	08005fdf 	.word	0x08005fdf
 8005f98:	08005fed 	.word	0x08005fed
 8005f9c:	0800600b 	.word	0x0800600b
 8005fa0:	08006019 	.word	0x08006019
 8005fa4:	08006023 	.word	0x08006023
 8005fa8:	08006043 	.word	0x08006043
  {
    case CONTROL_CREATE_BLOCK:
      ret = logCreateBlock( p.data[1],
 8005fac:	4b34      	ldr	r3, [pc, #208]	; (8006080 <logControlProcess+0x10c>)
 8005fae:	78db      	ldrb	r3, [r3, #3]
                            (struct ops_setting*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting) );
 8005fb0:	4a33      	ldr	r2, [pc, #204]	; (8006080 <logControlProcess+0x10c>)
 8005fb2:	7812      	ldrb	r2, [r2, #0]
 8005fb4:	3a02      	subs	r2, #2
 8005fb6:	0852      	lsrs	r2, r2, #1
      ret = logCreateBlock( p.data[1],
 8005fb8:	4932      	ldr	r1, [pc, #200]	; (8006084 <logControlProcess+0x110>)
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 f866 	bl	800608c <logCreateBlock>
 8005fc0:	6078      	str	r0, [r7, #4]
      break;
 8005fc2:	e04f      	b.n	8006064 <logControlProcess+0xf0>
    case CONTROL_APPEND_BLOCK:
      ret = logAppendBlock( p.data[1],
 8005fc4:	4b2e      	ldr	r3, [pc, #184]	; (8006080 <logControlProcess+0x10c>)
 8005fc6:	78db      	ldrb	r3, [r3, #3]
 8005fc8:	4618      	mov	r0, r3
                            (struct ops_setting*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting) );
 8005fca:	4b2d      	ldr	r3, [pc, #180]	; (8006080 <logControlProcess+0x10c>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	3b02      	subs	r3, #2
 8005fd0:	085b      	lsrs	r3, r3, #1
      ret = logAppendBlock( p.data[1],
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	492b      	ldr	r1, [pc, #172]	; (8006084 <logControlProcess+0x110>)
 8005fd6:	f000 f985 	bl	80062e4 <logAppendBlock>
 8005fda:	6078      	str	r0, [r7, #4]
      break;
 8005fdc:	e042      	b.n	8006064 <logControlProcess+0xf0>
    case CONTROL_DELETE_BLOCK:
      ret = logDeleteBlock( p.data[1] );
 8005fde:	4b28      	ldr	r3, [pc, #160]	; (8006080 <logControlProcess+0x10c>)
 8005fe0:	78db      	ldrb	r3, [r3, #3]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fb3a 	bl	800665c <logDeleteBlock>
 8005fe8:	6078      	str	r0, [r7, #4]
      break;
 8005fea:	e03b      	b.n	8006064 <logControlProcess+0xf0>
    case CONTROL_START_BLOCK:
      ret = logStartBlock( p.data[1], p.data[2]*10);
 8005fec:	4b24      	ldr	r3, [pc, #144]	; (8006080 <logControlProcess+0x10c>)
 8005fee:	78db      	ldrb	r3, [r3, #3]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	4b23      	ldr	r3, [pc, #140]	; (8006080 <logControlProcess+0x10c>)
 8005ff4:	791b      	ldrb	r3, [r3, #4]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	4619      	mov	r1, r3
 8006002:	f000 fba9 	bl	8006758 <logStartBlock>
 8006006:	6078      	str	r0, [r7, #4]
      break;
 8006008:	e02c      	b.n	8006064 <logControlProcess+0xf0>
    case CONTROL_STOP_BLOCK:
      ret = logStopBlock( p.data[1] );
 800600a:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <logControlProcess+0x10c>)
 800600c:	78db      	ldrb	r3, [r3, #3]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fbfe 	bl	8006810 <logStopBlock>
 8006014:	6078      	str	r0, [r7, #4]
      break;
 8006016:	e025      	b.n	8006064 <logControlProcess+0xf0>
    case CONTROL_RESET:
      logReset();
 8006018:	f000 ff30 	bl	8006e7c <logReset>
      ret = 0;
 800601c:	2300      	movs	r3, #0
 800601e:	607b      	str	r3, [r7, #4]
      break;
 8006020:	e020      	b.n	8006064 <logControlProcess+0xf0>
    case CONTROL_CREATE_BLOCK_V2:
      ret = logCreateBlockV2( p.data[1],
 8006022:	4b17      	ldr	r3, [pc, #92]	; (8006080 <logControlProcess+0x10c>)
 8006024:	78d8      	ldrb	r0, [r3, #3]
                            (struct ops_setting_v2*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting_v2) );
 8006026:	4b16      	ldr	r3, [pc, #88]	; (8006080 <logControlProcess+0x10c>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	3b02      	subs	r3, #2
 800602c:	461a      	mov	r2, r3
 800602e:	4b16      	ldr	r3, [pc, #88]	; (8006088 <logControlProcess+0x114>)
 8006030:	fba3 2302 	umull	r2, r3, r3, r2
 8006034:	085b      	lsrs	r3, r3, #1
      ret = logCreateBlockV2( p.data[1],
 8006036:	461a      	mov	r2, r3
 8006038:	4912      	ldr	r1, [pc, #72]	; (8006084 <logControlProcess+0x110>)
 800603a:	f000 f8bd 	bl	80061b8 <logCreateBlockV2>
 800603e:	6078      	str	r0, [r7, #4]
      break;
 8006040:	e010      	b.n	8006064 <logControlProcess+0xf0>
    case CONTROL_APPEND_BLOCK_V2:
      ret = logAppendBlockV2( p.data[1],
 8006042:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <logControlProcess+0x10c>)
 8006044:	78db      	ldrb	r3, [r3, #3]
 8006046:	4618      	mov	r0, r3
                            (struct ops_setting_v2*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting_v2) );
 8006048:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <logControlProcess+0x10c>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	3b02      	subs	r3, #2
 800604e:	461a      	mov	r2, r3
 8006050:	4b0d      	ldr	r3, [pc, #52]	; (8006088 <logControlProcess+0x114>)
 8006052:	fba3 2302 	umull	r2, r3, r3, r2
 8006056:	085b      	lsrs	r3, r3, #1
      ret = logAppendBlockV2( p.data[1],
 8006058:	461a      	mov	r2, r3
 800605a:	490a      	ldr	r1, [pc, #40]	; (8006084 <logControlProcess+0x110>)
 800605c:	f000 fa16 	bl	800648c <logAppendBlockV2>
 8006060:	6078      	str	r0, [r7, #4]
      break;
 8006062:	bf00      	nop
  }

  //Commands answer
  p.data[2] = ret;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	b2da      	uxtb	r2, r3
 8006068:	4b05      	ldr	r3, [pc, #20]	; (8006080 <logControlProcess+0x10c>)
 800606a:	711a      	strb	r2, [r3, #4]
  p.size = 3;
 800606c:	4b04      	ldr	r3, [pc, #16]	; (8006080 <logControlProcess+0x10c>)
 800606e:	2203      	movs	r2, #3
 8006070:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(&p);
 8006072:	4803      	ldr	r0, [pc, #12]	; (8006080 <logControlProcess+0x10c>)
 8006074:	f7fb fafe 	bl	8001674 <crtpSendPacketBlock>
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20006a10 	.word	0x20006a10
 8006084:	20006a14 	.word	0x20006a14
 8006088:	aaaaaaab 	.word	0xaaaaaaab

0800608c <logCreateBlock>:

static int logCreateBlock(unsigned char id, struct ops_setting * settings, int len)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af02      	add	r7, sp, #8
 8006092:	4603      	mov	r3, r0
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	73fb      	strb	r3, [r7, #15]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	e00f      	b.n	80060c0 <logCreateBlock+0x34>
    if (id == logBlocks[i].id) return EEXIST;
 80060a0:	7bf9      	ldrb	r1, [r7, #15]
 80060a2:	4842      	ldr	r0, [pc, #264]	; (80061ac <logCreateBlock+0x120>)
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4613      	mov	r3, r2
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4403      	add	r3, r0
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4299      	cmp	r1, r3
 80060b4:	d101      	bne.n	80060ba <logCreateBlock+0x2e>
 80060b6:	2311      	movs	r3, #17
 80060b8:	e074      	b.n	80061a4 <logCreateBlock+0x118>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	3301      	adds	r3, #1
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b0f      	cmp	r3, #15
 80060c4:	ddec      	ble.n	80060a0 <logCreateBlock+0x14>

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	e00d      	b.n	80060e8 <logCreateBlock+0x5c>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 80060cc:	4937      	ldr	r1, [pc, #220]	; (80061ac <logCreateBlock+0x120>)
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4613      	mov	r3, r2
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	1a9b      	subs	r3, r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	440b      	add	r3, r1
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e0:	d006      	beq.n	80060f0 <logCreateBlock+0x64>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	3301      	adds	r3, #1
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2b0f      	cmp	r3, #15
 80060ec:	ddee      	ble.n	80060cc <logCreateBlock+0x40>
 80060ee:	e000      	b.n	80060f2 <logCreateBlock+0x66>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 80060f0:	bf00      	nop

  if (i == LOG_MAX_BLOCKS)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b10      	cmp	r3, #16
 80060f6:	d101      	bne.n	80060fc <logCreateBlock+0x70>
    return ENOMEM;
 80060f8:	230c      	movs	r3, #12
 80060fa:	e053      	b.n	80061a4 <logCreateBlock+0x118>

  logBlocks[i].id = id;
 80060fc:	7bf9      	ldrb	r1, [r7, #15]
 80060fe:	482b      	ldr	r0, [pc, #172]	; (80061ac <logCreateBlock+0x120>)
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4613      	mov	r3, r2
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4403      	add	r3, r0
 800610c:	6019      	str	r1, [r3, #0]
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
    &logBlocks[i], logBlockTimed, &logBlocks[i].timerBuffer);
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4613      	mov	r3, r2
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	1a9b      	subs	r3, r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4a24      	ldr	r2, [pc, #144]	; (80061ac <logCreateBlock+0x120>)
 800611a:	1899      	adds	r1, r3, r2
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4613      	mov	r3, r2
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	3308      	adds	r3, #8
 8006128:	4a20      	ldr	r2, [pc, #128]	; (80061ac <logCreateBlock+0x120>)
 800612a:	4413      	add	r3, r2
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	4b20      	ldr	r3, [pc, #128]	; (80061b0 <logCreateBlock+0x124>)
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	460b      	mov	r3, r1
 8006134:	2201      	movs	r2, #1
 8006136:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800613a:	481e      	ldr	r0, [pc, #120]	; (80061b4 <logCreateBlock+0x128>)
 800613c:	f00f f854 	bl	80151e8 <xTimerCreateStatic>
 8006140:	4601      	mov	r1, r0
 8006142:	481a      	ldr	r0, [pc, #104]	; (80061ac <logCreateBlock+0x120>)
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4613      	mov	r3, r2
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	1a9b      	subs	r3, r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4403      	add	r3, r0
 8006150:	3304      	adds	r3, #4
 8006152:	6019      	str	r1, [r3, #0]
  logBlocks[i].ops = NULL;
 8006154:	4915      	ldr	r1, [pc, #84]	; (80061ac <logCreateBlock+0x120>)
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4613      	mov	r3, r2
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	3338      	adds	r3, #56	; 0x38
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]

  if (logBlocks[i].timer == NULL)
 8006168:	4910      	ldr	r1, [pc, #64]	; (80061ac <logCreateBlock+0x120>)
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4613      	mov	r3, r2
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	3304      	adds	r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10b      	bne.n	8006196 <logCreateBlock+0x10a>
  {
	logBlocks[i].id = BLOCK_ID_FREE;
 800617e:	490b      	ldr	r1, [pc, #44]	; (80061ac <logCreateBlock+0x120>)
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4613      	mov	r3, r2
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006190:	601a      	str	r2, [r3, #0]
	return ENOMEM;
 8006192:	230c      	movs	r3, #12
 8006194:	e006      	b.n	80061a4 <logCreateBlock+0x118>
  }

  LOG_DEBUG("Added block ID %d\n", id);

  return logAppendBlock(id, settings, len);
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	4618      	mov	r0, r3
 800619e:	f000 f8a1 	bl	80062e4 <logAppendBlock>
 80061a2:	4603      	mov	r3, r0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20003600 	.word	0x20003600
 80061b0:	08006881 	.word	0x08006881
 80061b4:	0801aa20 	.word	0x0801aa20

080061b8 <logCreateBlockV2>:

static int logCreateBlockV2(unsigned char id, struct ops_setting_v2 * settings, int len)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af02      	add	r7, sp, #8
 80061be:	4603      	mov	r3, r0
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	73fb      	strb	r3, [r7, #15]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80061c6:	2300      	movs	r3, #0
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	e00f      	b.n	80061ec <logCreateBlockV2+0x34>
    if (id == logBlocks[i].id) return EEXIST;
 80061cc:	7bf9      	ldrb	r1, [r7, #15]
 80061ce:	4842      	ldr	r0, [pc, #264]	; (80062d8 <logCreateBlockV2+0x120>)
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	4613      	mov	r3, r2
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4403      	add	r3, r0
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4299      	cmp	r1, r3
 80061e0:	d101      	bne.n	80061e6 <logCreateBlockV2+0x2e>
 80061e2:	2311      	movs	r3, #17
 80061e4:	e074      	b.n	80062d0 <logCreateBlockV2+0x118>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	3301      	adds	r3, #1
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2b0f      	cmp	r3, #15
 80061f0:	ddec      	ble.n	80061cc <logCreateBlockV2+0x14>

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	e00d      	b.n	8006214 <logCreateBlockV2+0x5c>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 80061f8:	4937      	ldr	r1, [pc, #220]	; (80062d8 <logCreateBlockV2+0x120>)
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4613      	mov	r3, r2
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	1a9b      	subs	r3, r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800620c:	d006      	beq.n	800621c <logCreateBlockV2+0x64>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	3301      	adds	r3, #1
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2b0f      	cmp	r3, #15
 8006218:	ddee      	ble.n	80061f8 <logCreateBlockV2+0x40>
 800621a:	e000      	b.n	800621e <logCreateBlockV2+0x66>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 800621c:	bf00      	nop

  if (i == LOG_MAX_BLOCKS)
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2b10      	cmp	r3, #16
 8006222:	d101      	bne.n	8006228 <logCreateBlockV2+0x70>
    return ENOMEM;
 8006224:	230c      	movs	r3, #12
 8006226:	e053      	b.n	80062d0 <logCreateBlockV2+0x118>

  logBlocks[i].id = id;
 8006228:	7bf9      	ldrb	r1, [r7, #15]
 800622a:	482b      	ldr	r0, [pc, #172]	; (80062d8 <logCreateBlockV2+0x120>)
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	4613      	mov	r3, r2
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	1a9b      	subs	r3, r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4403      	add	r3, r0
 8006238:	6019      	str	r1, [r3, #0]
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
    &logBlocks[i], logBlockTimed, &logBlocks[i].timerBuffer);
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4613      	mov	r3, r2
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4a24      	ldr	r2, [pc, #144]	; (80062d8 <logCreateBlockV2+0x120>)
 8006246:	1899      	adds	r1, r3, r2
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4613      	mov	r3, r2
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	1a9b      	subs	r3, r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	3308      	adds	r3, #8
 8006254:	4a20      	ldr	r2, [pc, #128]	; (80062d8 <logCreateBlockV2+0x120>)
 8006256:	4413      	add	r3, r2
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	4b20      	ldr	r3, [pc, #128]	; (80062dc <logCreateBlockV2+0x124>)
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	460b      	mov	r3, r1
 8006260:	2201      	movs	r2, #1
 8006262:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006266:	481e      	ldr	r0, [pc, #120]	; (80062e0 <logCreateBlockV2+0x128>)
 8006268:	f00e ffbe 	bl	80151e8 <xTimerCreateStatic>
 800626c:	4601      	mov	r1, r0
 800626e:	481a      	ldr	r0, [pc, #104]	; (80062d8 <logCreateBlockV2+0x120>)
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4613      	mov	r3, r2
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	1a9b      	subs	r3, r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4403      	add	r3, r0
 800627c:	3304      	adds	r3, #4
 800627e:	6019      	str	r1, [r3, #0]
  logBlocks[i].ops = NULL;
 8006280:	4915      	ldr	r1, [pc, #84]	; (80062d8 <logCreateBlockV2+0x120>)
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4613      	mov	r3, r2
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	3338      	adds	r3, #56	; 0x38
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]

  if (logBlocks[i].timer == NULL)
 8006294:	4910      	ldr	r1, [pc, #64]	; (80062d8 <logCreateBlockV2+0x120>)
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4613      	mov	r3, r2
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	3304      	adds	r3, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10b      	bne.n	80062c2 <logCreateBlockV2+0x10a>
  {
  logBlocks[i].id = BLOCK_ID_FREE;
 80062aa:	490b      	ldr	r1, [pc, #44]	; (80062d8 <logCreateBlockV2+0x120>)
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4613      	mov	r3, r2
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	1a9b      	subs	r3, r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	440b      	add	r3, r1
 80062b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062bc:	601a      	str	r2, [r3, #0]
  return ENOMEM;
 80062be:	230c      	movs	r3, #12
 80062c0:	e006      	b.n	80062d0 <logCreateBlockV2+0x118>
  }

  LOG_DEBUG("Added block ID %d\n", id);

  return logAppendBlockV2(id, settings, len);
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 f8df 	bl	800648c <logAppendBlockV2>
 80062ce:	4603      	mov	r3, r0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20003600 	.word	0x20003600
 80062dc:	08006881 	.word	0x08006881
 80062e0:	0801aa20 	.word	0x0801aa20

080062e4 <logAppendBlock>:
static void opsFree(struct log_ops * ops);
static void blockAppendOps(struct log_block * block, struct log_ops * ops);
static int variableGetIndex(int id);

static int logAppendBlock(int id, struct ops_setting * settings, int len)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08a      	sub	sp, #40	; 0x28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  int i;
  struct log_block * block;

  LOG_DEBUG("Appending %d variable to block %d\n", len, id);

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80062f0:	2300      	movs	r3, #0
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
 80062f4:	e00d      	b.n	8006312 <logAppendBlock+0x2e>
    if (logBlocks[i].id == id) break;
 80062f6:	4962      	ldr	r1, [pc, #392]	; (8006480 <logAppendBlock+0x19c>)
 80062f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fa:	4613      	mov	r3, r2
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	1a9b      	subs	r3, r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	440b      	add	r3, r1
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	d006      	beq.n	800631a <logAppendBlock+0x36>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	3301      	adds	r3, #1
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	2b0f      	cmp	r3, #15
 8006316:	ddee      	ble.n	80062f6 <logAppendBlock+0x12>
 8006318:	e000      	b.n	800631c <logAppendBlock+0x38>
    if (logBlocks[i].id == id) break;
 800631a:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	2b0f      	cmp	r3, #15
 8006320:	dd01      	ble.n	8006326 <logAppendBlock+0x42>
    LOG_ERROR("Trying to append block id %d that doesn't exist.", id);
    return ENOENT;
 8006322:	2302      	movs	r3, #2
 8006324:	e0a8      	b.n	8006478 <logAppendBlock+0x194>
  }

  block = &logBlocks[i];
 8006326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006328:	4613      	mov	r3, r2
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	1a9b      	subs	r3, r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4a53      	ldr	r2, [pc, #332]	; (8006480 <logAppendBlock+0x19c>)
 8006332:	4413      	add	r3, r2
 8006334:	623b      	str	r3, [r7, #32]

  for (i=0; i<len; i++)
 8006336:	2300      	movs	r3, #0
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
 800633a:	e097      	b.n	800646c <logAppendBlock+0x188>
  {
    int currentLength = blockCalcLength(block);
 800633c:	6a38      	ldr	r0, [r7, #32]
 800633e:	f000 fd53 	bl	8006de8 <blockCalcLength>
 8006342:	61f8      	str	r0, [r7, #28]
    struct log_ops * ops;
    int varId;

    if ((currentLength + typeLength[settings[i].logType & LOG_TYPE_MASK])>LOG_MAX_LEN) {
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	4413      	add	r3, r2
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	4a4c      	ldr	r2, [pc, #304]	; (8006484 <logAppendBlock+0x1a0>)
 8006354:	5cd3      	ldrb	r3, [r2, r3]
 8006356:	461a      	mov	r2, r3
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	2b1a      	cmp	r3, #26
 800635e:	dd01      	ble.n	8006364 <logAppendBlock+0x80>
      LOG_ERROR("Trying to append a full block. Block id %d.\n", id);
      return E2BIG;
 8006360:	2307      	movs	r3, #7
 8006362:	e089      	b.n	8006478 <logAppendBlock+0x194>
    }

    ops = opsMalloc();
 8006364:	f000 fd0a 	bl	8006d7c <opsMalloc>
 8006368:	61b8      	str	r0, [r7, #24]

    if(!ops) {
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <logAppendBlock+0x90>
      LOG_ERROR("No more ops memory free!\n");
      return ENOMEM;
 8006370:	230c      	movs	r3, #12
 8006372:	e081      	b.n	8006478 <logAppendBlock+0x194>
    }

    if (settings[i].id != 255)  //TOC variable
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	4413      	add	r3, r2
 800637c:	785b      	ldrb	r3, [r3, #1]
 800637e:	2bff      	cmp	r3, #255	; 0xff
 8006380:	d044      	beq.n	800640c <logAppendBlock+0x128>
    {
      varId = variableGetIndex(settings[i].id);
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	4413      	add	r3, r2
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	4618      	mov	r0, r3
 800638e:	f000 fcbb 	bl	8006d08 <variableGetIndex>
 8006392:	6178      	str	r0, [r7, #20]

      if (varId<0) {
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	da01      	bge.n	800639e <logAppendBlock+0xba>
        LOG_ERROR("Trying to add variable Id %d that does not exists.", settings[i].id);
        return ENOENT;
 800639a:	2302      	movs	r3, #2
 800639c:	e06c      	b.n	8006478 <logAppendBlock+0x194>
      }

      ops->variable    = logs[varId].address;
 800639e:	4b3a      	ldr	r3, [pc, #232]	; (8006488 <logAppendBlock+0x1a4>)
 80063a0:	6819      	ldr	r1, [r3, #0]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4613      	mov	r3, r2
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	609a      	str	r2, [r3, #8]
      ops->storageType = logGetType(varId);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fdbf 	bl	8006f3c <logGetType>
 80063be:	4603      	mov	r3, r0
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	b2d9      	uxtb	r1, r3
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	7913      	ldrb	r3, [r2, #4]
 80063ca:	f361 0303 	bfi	r3, r1, #0, #4
 80063ce:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	4413      	add	r3, r2
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	b2d9      	uxtb	r1, r3
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	7913      	ldrb	r3, [r2, #4]
 80063e4:	f361 1307 	bfi	r3, r1, #4, #4
 80063e8:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acquisitionTypeFromLogType(logs[varId].type);
 80063ea:	4b27      	ldr	r3, [pc, #156]	; (8006488 <logAppendBlock+0x1a4>)
 80063ec:	6819      	ldr	r1, [r3, #0]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4613      	mov	r3, r2
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fdb5 	bl	8006f6c <acquisitionTypeFromLogType>
 8006402:	4603      	mov	r3, r0
 8006404:	461a      	mov	r2, r3
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	731a      	strb	r2, [r3, #12]
 800640a:	e028      	b.n	800645e <logAppendBlock+0x17a>

      LOG_DEBUG("Appended variable %d to block %d\n", settings[i].id, id);
    } else {                     //Memory variable
      //TODO: Check that the address is in ram
      ops->variable    = (void*)(&settings[i]+1);
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	3301      	adds	r3, #1
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	441a      	add	r2, r3
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	609a      	str	r2, [r3, #8]
      ops->storageType = (settings[i].logType>>4) & LOG_TYPE_MASK;
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	4413      	add	r3, r2
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	091b      	lsrs	r3, r3, #4
 8006426:	b2db      	uxtb	r3, r3
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	b2d9      	uxtb	r1, r3
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	7913      	ldrb	r3, [r2, #4]
 8006432:	f361 0303 	bfi	r3, r1, #0, #4
 8006436:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	4413      	add	r3, r2
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	b2d9      	uxtb	r1, r3
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	7913      	ldrb	r3, [r2, #4]
 800644c:	f361 1307 	bfi	r3, r1, #4, #4
 8006450:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acqType_memory;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2200      	movs	r2, #0
 8006456:	731a      	strb	r2, [r3, #12]
      i += 2;
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	3302      	adds	r3, #2
 800645c:	627b      	str	r3, [r7, #36]	; 0x24

      LOG_DEBUG("Appended var addr 0x%x to block %d\n", (int)ops->variable, id);
    }
    blockAppendOps(block, ops);
 800645e:	69b9      	ldr	r1, [r7, #24]
 8006460:	6a38      	ldr	r0, [r7, #32]
 8006462:	f000 fce7 	bl	8006e34 <blockAppendOps>
  for (i=0; i<len; i++)
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	3301      	adds	r3, #1
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
 800646c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	429a      	cmp	r2, r3
 8006472:	f6ff af63 	blt.w	800633c <logAppendBlock+0x58>

    LOG_DEBUG("   Now lenght %d\n", blockCalcLength(block));
  }

  return 0;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3728      	adds	r7, #40	; 0x28
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	20003600 	.word	0x20003600
 8006484:	0801c330 	.word	0x0801c330
 8006488:	20006a00 	.word	0x20006a00

0800648c <logAppendBlockV2>:

static int logAppendBlockV2(int id, struct ops_setting_v2 * settings, int len)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08a      	sub	sp, #40	; 0x28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  int i;
  struct log_block * block;

  LOG_DEBUG("Appending %d variable to block %d\n", len, id);

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8006498:	2300      	movs	r3, #0
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
 800649c:	e00d      	b.n	80064ba <logAppendBlockV2+0x2e>
    if (logBlocks[i].id == id) break;
 800649e:	496c      	ldr	r1, [pc, #432]	; (8006650 <logAppendBlockV2+0x1c4>)
 80064a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a2:	4613      	mov	r3, r2
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	1a9b      	subs	r3, r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	440b      	add	r3, r1
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d006      	beq.n	80064c2 <logAppendBlockV2+0x36>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	3301      	adds	r3, #1
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	2b0f      	cmp	r3, #15
 80064be:	ddee      	ble.n	800649e <logAppendBlockV2+0x12>
 80064c0:	e000      	b.n	80064c4 <logAppendBlockV2+0x38>
    if (logBlocks[i].id == id) break;
 80064c2:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	2b0f      	cmp	r3, #15
 80064c8:	dd01      	ble.n	80064ce <logAppendBlockV2+0x42>
    LOG_ERROR("Trying to append block id %d that doesn't exist.", id);
    return ENOENT;
 80064ca:	2302      	movs	r3, #2
 80064cc:	e0bc      	b.n	8006648 <logAppendBlockV2+0x1bc>
  }

  block = &logBlocks[i];
 80064ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d0:	4613      	mov	r3, r2
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	1a9b      	subs	r3, r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4a5d      	ldr	r2, [pc, #372]	; (8006650 <logAppendBlockV2+0x1c4>)
 80064da:	4413      	add	r3, r2
 80064dc:	623b      	str	r3, [r7, #32]

  for (i=0; i<len; i++)
 80064de:	2300      	movs	r3, #0
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
 80064e2:	e0ab      	b.n	800663c <logAppendBlockV2+0x1b0>
  {
    int currentLength = blockCalcLength(block);
 80064e4:	6a38      	ldr	r0, [r7, #32]
 80064e6:	f000 fc7f 	bl	8006de8 <blockCalcLength>
 80064ea:	61f8      	str	r0, [r7, #28]
    struct log_ops * ops;
    int varId;

    if ((currentLength + typeLength[settings[i].logType & LOG_TYPE_MASK])>LOG_MAX_LEN) {
 80064ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ee:	4613      	mov	r3, r2
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	4413      	add	r3, r2
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	4413      	add	r3, r2
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	4a55      	ldr	r2, [pc, #340]	; (8006654 <logAppendBlockV2+0x1c8>)
 8006500:	5cd3      	ldrb	r3, [r2, r3]
 8006502:	461a      	mov	r2, r3
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	4413      	add	r3, r2
 8006508:	2b1a      	cmp	r3, #26
 800650a:	dd01      	ble.n	8006510 <logAppendBlockV2+0x84>
      LOG_ERROR("Trying to append a full block. Block id %d.\n", id);
      return E2BIG;
 800650c:	2307      	movs	r3, #7
 800650e:	e09b      	b.n	8006648 <logAppendBlockV2+0x1bc>
    }

    ops = opsMalloc();
 8006510:	f000 fc34 	bl	8006d7c <opsMalloc>
 8006514:	61b8      	str	r0, [r7, #24]

    if(!ops) {
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <logAppendBlockV2+0x94>
      LOG_ERROR("No more ops memory free!\n");
      return ENOMEM;
 800651c:	230c      	movs	r3, #12
 800651e:	e093      	b.n	8006648 <logAppendBlockV2+0x1bc>
    }

    if (settings[i].id != 0xFFFFul)  //TOC variable
 8006520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006522:	4613      	mov	r3, r2
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	4413      	add	r3, r2
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	4413      	add	r3, r2
 800652c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006536:	4293      	cmp	r3, r2
 8006538:	d04a      	beq.n	80065d0 <logAppendBlockV2+0x144>
    {
      varId = variableGetIndex(settings[i].id);
 800653a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653c:	4613      	mov	r3, r2
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	4413      	add	r3, r2
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	4413      	add	r3, r2
 8006546:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800654a:	b29b      	uxth	r3, r3
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fbdb 	bl	8006d08 <variableGetIndex>
 8006552:	6178      	str	r0, [r7, #20]

      if (varId<0) {
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	da01      	bge.n	800655e <logAppendBlockV2+0xd2>
        LOG_ERROR("Trying to add variable Id %d that does not exists.", settings[i].id);
        return ENOENT;
 800655a:	2302      	movs	r3, #2
 800655c:	e074      	b.n	8006648 <logAppendBlockV2+0x1bc>
      }

      ops->variable    = logs[varId].address;
 800655e:	4b3e      	ldr	r3, [pc, #248]	; (8006658 <logAppendBlockV2+0x1cc>)
 8006560:	6819      	ldr	r1, [r3, #0]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4613      	mov	r3, r2
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	440b      	add	r3, r1
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	609a      	str	r2, [r3, #8]
      ops->storageType = logGetType(varId);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	b29b      	uxth	r3, r3
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fcdf 	bl	8006f3c <logGetType>
 800657e:	4603      	mov	r3, r0
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	b2d9      	uxtb	r1, r3
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	7913      	ldrb	r3, [r2, #4]
 800658a:	f361 0303 	bfi	r3, r1, #0, #4
 800658e:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 8006590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006592:	4613      	mov	r3, r2
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	4413      	add	r3, r2
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	4413      	add	r3, r2
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	b2d9      	uxtb	r1, r3
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	7913      	ldrb	r3, [r2, #4]
 80065a8:	f361 1307 	bfi	r3, r1, #4, #4
 80065ac:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acquisitionTypeFromLogType(logs[varId].type);
 80065ae:	4b2a      	ldr	r3, [pc, #168]	; (8006658 <logAppendBlockV2+0x1cc>)
 80065b0:	6819      	ldr	r1, [r3, #0]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4613      	mov	r3, r2
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	4413      	add	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	440b      	add	r3, r1
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fcd3 	bl	8006f6c <acquisitionTypeFromLogType>
 80065c6:	4603      	mov	r3, r0
 80065c8:	461a      	mov	r2, r3
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	731a      	strb	r2, [r3, #12]
 80065ce:	e02e      	b.n	800662e <logAppendBlockV2+0x1a2>

      LOG_DEBUG("Appended variable %d to block %d\n", settings[i].id, id);
    } else {                     //Memory variable
      //TODO: Check that the address is in ram
      ops->variable    = (void*)(&settings[i]+1);
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	4613      	mov	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	4413      	add	r3, r2
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	441a      	add	r2, r3
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	609a      	str	r2, [r3, #8]
      ops->storageType = (settings[i].logType>>4) & LOG_TYPE_MASK;
 80065e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e4:	4613      	mov	r3, r2
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	4413      	add	r3, r2
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	4413      	add	r3, r2
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	b2d9      	uxtb	r1, r3
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	7913      	ldrb	r3, [r2, #4]
 80065fe:	f361 0303 	bfi	r3, r1, #0, #4
 8006602:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 8006604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006606:	4613      	mov	r3, r2
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	4413      	add	r3, r2
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	4413      	add	r3, r2
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	b2d9      	uxtb	r1, r3
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	7913      	ldrb	r3, [r2, #4]
 800661c:	f361 1307 	bfi	r3, r1, #4, #4
 8006620:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acqType_memory;
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2200      	movs	r2, #0
 8006626:	731a      	strb	r2, [r3, #12]
      i += 2;
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	3302      	adds	r3, #2
 800662c:	627b      	str	r3, [r7, #36]	; 0x24

      LOG_DEBUG("Appended var addr 0x%x to block %d\n", (int)ops->variable, id);
    }
    blockAppendOps(block, ops);
 800662e:	69b9      	ldr	r1, [r7, #24]
 8006630:	6a38      	ldr	r0, [r7, #32]
 8006632:	f000 fbff 	bl	8006e34 <blockAppendOps>
  for (i=0; i<len; i++)
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	3301      	adds	r3, #1
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
 800663c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	429a      	cmp	r2, r3
 8006642:	f6ff af4f 	blt.w	80064e4 <logAppendBlockV2+0x58>

    LOG_DEBUG("   Now lenght %d\n", blockCalcLength(block));
  }

  return 0;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3728      	adds	r7, #40	; 0x28
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20003600 	.word	0x20003600
 8006654:	0801c330 	.word	0x0801c330
 8006658:	20006a00 	.word	0x20006a00

0800665c <logDeleteBlock>:

static int logDeleteBlock(int id)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af02      	add	r7, sp, #8
 8006662:	6078      	str	r0, [r7, #4]
  int i;
  struct log_ops * ops;
  struct log_ops * opsNext;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8006664:	2300      	movs	r3, #0
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	e00d      	b.n	8006686 <logDeleteBlock+0x2a>
    if (logBlocks[i].id == id) break;
 800666a:	493a      	ldr	r1, [pc, #232]	; (8006754 <logDeleteBlock+0xf8>)
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4613      	mov	r3, r2
 8006670:	011b      	lsls	r3, r3, #4
 8006672:	1a9b      	subs	r3, r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	429a      	cmp	r2, r3
 800667e:	d006      	beq.n	800668e <logDeleteBlock+0x32>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	3301      	adds	r3, #1
 8006684:	617b      	str	r3, [r7, #20]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b0f      	cmp	r3, #15
 800668a:	ddee      	ble.n	800666a <logDeleteBlock+0xe>
 800668c:	e000      	b.n	8006690 <logDeleteBlock+0x34>
    if (logBlocks[i].id == id) break;
 800668e:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2b0f      	cmp	r3, #15
 8006694:	dd01      	ble.n	800669a <logDeleteBlock+0x3e>
    LOG_ERROR("trying to delete block id %d that doesn't exist.", id);
    return ENOENT;
 8006696:	2302      	movs	r3, #2
 8006698:	e057      	b.n	800674a <logDeleteBlock+0xee>
  }

  ops = logBlocks[i].ops;
 800669a:	492e      	ldr	r1, [pc, #184]	; (8006754 <logDeleteBlock+0xf8>)
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4613      	mov	r3, r2
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	3338      	adds	r3, #56	; 0x38
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	613b      	str	r3, [r7, #16]
  while (ops)
 80066ae:	e007      	b.n	80066c0 <logDeleteBlock+0x64>
  {
    opsNext = ops->next;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]
    opsFree(ops);
 80066b6:	6938      	ldr	r0, [r7, #16]
 80066b8:	f000 fb88 	bl	8006dcc <opsFree>
    ops = opsNext;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	613b      	str	r3, [r7, #16]
  while (ops)
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f4      	bne.n	80066b0 <logDeleteBlock+0x54>
  }

  if (logBlocks[i].timer != 0) {
 80066c6:	4923      	ldr	r1, [pc, #140]	; (8006754 <logDeleteBlock+0xf8>)
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4613      	mov	r3, r2
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	1a9b      	subs	r3, r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	3304      	adds	r3, #4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d02b      	beq.n	8006734 <logDeleteBlock+0xd8>
    xTimerStop(logBlocks[i].timer, portMAX_DELAY);
 80066dc:	491d      	ldr	r1, [pc, #116]	; (8006754 <logDeleteBlock+0xf8>)
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4613      	mov	r3, r2
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	3304      	adds	r3, #4
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	2300      	movs	r3, #0
 80066f6:	2200      	movs	r2, #0
 80066f8:	2103      	movs	r1, #3
 80066fa:	f00e fde9 	bl	80152d0 <xTimerGenericCommand>
    xTimerDelete(logBlocks[i].timer, portMAX_DELAY);
 80066fe:	4915      	ldr	r1, [pc, #84]	; (8006754 <logDeleteBlock+0xf8>)
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4613      	mov	r3, r2
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	1a9b      	subs	r3, r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	440b      	add	r3, r1
 800670c:	3304      	adds	r3, #4
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	2300      	movs	r3, #0
 8006718:	2200      	movs	r2, #0
 800671a:	2105      	movs	r1, #5
 800671c:	f00e fdd8 	bl	80152d0 <xTimerGenericCommand>
    logBlocks[i].timer = 0;
 8006720:	490c      	ldr	r1, [pc, #48]	; (8006754 <logDeleteBlock+0xf8>)
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4613      	mov	r3, r2
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	3304      	adds	r3, #4
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
  }

  logBlocks[i].id = BLOCK_ID_FREE;
 8006734:	4907      	ldr	r1, [pc, #28]	; (8006754 <logDeleteBlock+0xf8>)
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4613      	mov	r3, r2
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	1a9b      	subs	r3, r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	440b      	add	r3, r1
 8006742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006746:	601a      	str	r2, [r3, #0]
  return 0;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20003600 	.word	0x20003600

08006758 <logStartBlock>:

static int logStartBlock(int id, unsigned int period)
{
 8006758:	b590      	push	{r4, r7, lr}
 800675a:	b087      	sub	sp, #28
 800675c:	af02      	add	r7, sp, #8
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	e00d      	b.n	8006784 <logStartBlock+0x2c>
    if (logBlocks[i].id == id) break;
 8006768:	4927      	ldr	r1, [pc, #156]	; (8006808 <logStartBlock+0xb0>)
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	4613      	mov	r3, r2
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	1a9b      	subs	r3, r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	429a      	cmp	r2, r3
 800677c:	d006      	beq.n	800678c <logStartBlock+0x34>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3301      	adds	r3, #1
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b0f      	cmp	r3, #15
 8006788:	ddee      	ble.n	8006768 <logStartBlock+0x10>
 800678a:	e000      	b.n	800678e <logStartBlock+0x36>
    if (logBlocks[i].id == id) break;
 800678c:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b0f      	cmp	r3, #15
 8006792:	dd01      	ble.n	8006798 <logStartBlock+0x40>
    LOG_ERROR("Trying to start block id %d that doesn't exist.", id);
    return ENOENT;
 8006794:	2302      	movs	r3, #2
 8006796:	e032      	b.n	80067fe <logStartBlock+0xa6>
  }

  LOG_DEBUG("Starting block %d with period %dms\n", id, period);

  if (period>0)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d023      	beq.n	80067e6 <logStartBlock+0x8e>
  {
    xTimerChangePeriod(logBlocks[i].timer, M2T(period), 100);
 800679e:	491a      	ldr	r1, [pc, #104]	; (8006808 <logStartBlock+0xb0>)
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4613      	mov	r3, r2
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	1a9b      	subs	r3, r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	3304      	adds	r3, #4
 80067ae:	6818      	ldr	r0, [r3, #0]
 80067b0:	2364      	movs	r3, #100	; 0x64
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	2300      	movs	r3, #0
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	2104      	movs	r1, #4
 80067ba:	f00e fd89 	bl	80152d0 <xTimerGenericCommand>
    xTimerStart(logBlocks[i].timer, 100);
 80067be:	4912      	ldr	r1, [pc, #72]	; (8006808 <logStartBlock+0xb0>)
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4613      	mov	r3, r2
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	1a9b      	subs	r3, r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	3304      	adds	r3, #4
 80067ce:	681c      	ldr	r4, [r3, #0]
 80067d0:	f00d fd18 	bl	8014204 <xTaskGetTickCount>
 80067d4:	4602      	mov	r2, r0
 80067d6:	2364      	movs	r3, #100	; 0x64
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	2300      	movs	r3, #0
 80067dc:	2101      	movs	r1, #1
 80067de:	4620      	mov	r0, r4
 80067e0:	f00e fd76 	bl	80152d0 <xTimerGenericCommand>
 80067e4:	e00a      	b.n	80067fc <logStartBlock+0xa4>
  } else {
    // single-shoot run
    workerSchedule(logRunBlock, &logBlocks[i]);
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4613      	mov	r3, r2
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4a05      	ldr	r2, [pc, #20]	; (8006808 <logStartBlock+0xb0>)
 80067f2:	4413      	add	r3, r2
 80067f4:	4619      	mov	r1, r3
 80067f6:	4805      	ldr	r0, [pc, #20]	; (800680c <logStartBlock+0xb4>)
 80067f8:	f002 f81c 	bl	8008834 <workerSchedule>
  }

  return 0;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	bd90      	pop	{r4, r7, pc}
 8006806:	bf00      	nop
 8006808:	20003600 	.word	0x20003600
 800680c:	080068f5 	.word	0x080068f5

08006810 <logStopBlock>:

static int logStopBlock(int id)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af02      	add	r7, sp, #8
 8006816:	6078      	str	r0, [r7, #4]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8006818:	2300      	movs	r3, #0
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	e00d      	b.n	800683a <logStopBlock+0x2a>
    if (logBlocks[i].id == id) break;
 800681e:	4917      	ldr	r1, [pc, #92]	; (800687c <logStopBlock+0x6c>)
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4613      	mov	r3, r2
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	1a9b      	subs	r3, r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	440b      	add	r3, r1
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	d006      	beq.n	8006842 <logStopBlock+0x32>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b0f      	cmp	r3, #15
 800683e:	ddee      	ble.n	800681e <logStopBlock+0xe>
 8006840:	e000      	b.n	8006844 <logStopBlock+0x34>
    if (logBlocks[i].id == id) break;
 8006842:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b0f      	cmp	r3, #15
 8006848:	dd01      	ble.n	800684e <logStopBlock+0x3e>
    LOG_ERROR("Trying to stop block id %d that doesn't exist.\n", id);
    return ENOENT;
 800684a:	2302      	movs	r3, #2
 800684c:	e011      	b.n	8006872 <logStopBlock+0x62>
  }

  xTimerStop(logBlocks[i].timer, portMAX_DELAY);
 800684e:	490b      	ldr	r1, [pc, #44]	; (800687c <logStopBlock+0x6c>)
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4613      	mov	r3, r2
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	3304      	adds	r3, #4
 800685e:	6818      	ldr	r0, [r3, #0]
 8006860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	2300      	movs	r3, #0
 8006868:	2200      	movs	r2, #0
 800686a:	2103      	movs	r1, #3
 800686c:	f00e fd30 	bl	80152d0 <xTimerGenericCommand>

  return 0;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20003600 	.word	0x20003600

08006880 <logBlockTimed>:

/* This function is called by the timer subsystem */
void logBlockTimed(xTimerHandle timer)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  workerSchedule(logRunBlock, pvTimerGetTimerID(timer));
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f00f f821 	bl	80158d0 <pvTimerGetTimerID>
 800688e:	4603      	mov	r3, r0
 8006890:	4619      	mov	r1, r3
 8006892:	4803      	ldr	r0, [pc, #12]	; (80068a0 <logBlockTimed+0x20>)
 8006894:	f001 ffce 	bl	8008834 <workerSchedule>
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	080068f5 	.word	0x080068f5

080068a4 <appendToPacket>:

/* Appends data to a packet if space is available; returns false on failure. */
static bool appendToPacket(CRTPPacket * pk, const void * data, size_t n) {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  if (pk->size <= CRTP_MAX_DATA_SIZE - n)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	461a      	mov	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f1c3 031e 	rsb	r3, r3, #30
 80068bc:	429a      	cmp	r2, r3
 80068be:	d814      	bhi.n	80068ea <appendToPacket+0x46>
  {
    memcpy(&pk->data[pk->size], data, n);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4413      	add	r3, r2
 80068ca:	3302      	adds	r3, #2
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	68b9      	ldr	r1, [r7, #8]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f011 f90e 	bl	8017af2 <memcpy>
    pk->size += n;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	781a      	ldrb	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	4413      	add	r3, r2
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	701a      	strb	r2, [r3, #0]
    return true;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <appendToPacket+0x48>
  }
  else return false;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <logRunBlock>:

/* This function is usually called by the worker subsystem */
void logRunBlock(void * arg)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b094      	sub	sp, #80	; 0x50
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  struct log_block *blk = arg;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	64bb      	str	r3, [r7, #72]	; 0x48
  struct log_ops *ops = blk->ops;
 8006900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	64fb      	str	r3, [r7, #76]	; 0x4c
  static CRTPPacket pk;
  unsigned int timestamp;

  xSemaphoreTake(logLock, portMAX_DELAY);
 8006906:	4b8c      	ldr	r3, [pc, #560]	; (8006b38 <logRunBlock+0x244>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800690e:	4618      	mov	r0, r3
 8006910:	f00c fe64 	bl	80135dc <xQueueSemaphoreTake>

  timestamp = ((long long)xTaskGetTickCount())/portTICK_RATE_MS;
 8006914:	f00d fc76 	bl	8014204 <xTaskGetTickCount>
 8006918:	4603      	mov	r3, r0
 800691a:	4a88      	ldr	r2, [pc, #544]	; (8006b3c <logRunBlock+0x248>)
 800691c:	fba2 2303 	umull	r2, r3, r2, r3
 8006920:	099b      	lsrs	r3, r3, #6
 8006922:	647b      	str	r3, [r7, #68]	; 0x44

  pk.header = CRTP_HEADER(CRTP_PORT_LOG, LOG_CH);
 8006924:	4b86      	ldr	r3, [pc, #536]	; (8006b40 <logRunBlock+0x24c>)
 8006926:	2252      	movs	r2, #82	; 0x52
 8006928:	705a      	strb	r2, [r3, #1]
  pk.size = 4;
 800692a:	4b85      	ldr	r3, [pc, #532]	; (8006b40 <logRunBlock+0x24c>)
 800692c:	2204      	movs	r2, #4
 800692e:	701a      	strb	r2, [r3, #0]
  pk.data[0] = blk->id;
 8006930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	4b82      	ldr	r3, [pc, #520]	; (8006b40 <logRunBlock+0x24c>)
 8006938:	709a      	strb	r2, [r3, #2]
  pk.data[1] = timestamp&0x0ff;
 800693a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800693c:	b2da      	uxtb	r2, r3
 800693e:	4b80      	ldr	r3, [pc, #512]	; (8006b40 <logRunBlock+0x24c>)
 8006940:	70da      	strb	r2, [r3, #3]
  pk.data[2] = (timestamp>>8)&0x0ff;
 8006942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006944:	0a1b      	lsrs	r3, r3, #8
 8006946:	b2da      	uxtb	r2, r3
 8006948:	4b7d      	ldr	r3, [pc, #500]	; (8006b40 <logRunBlock+0x24c>)
 800694a:	711a      	strb	r2, [r3, #4]
  pk.data[3] = (timestamp>>16)&0x0ff;
 800694c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800694e:	0c1b      	lsrs	r3, r3, #16
 8006950:	b2da      	uxtb	r2, r3
 8006952:	4b7b      	ldr	r3, [pc, #492]	; (8006b40 <logRunBlock+0x24c>)
 8006954:	715a      	strb	r2, [r3, #5]

  while (ops)
 8006956:	e18f      	b.n	8006c78 <logRunBlock+0x384>
  {
    int valuei = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
    float valuef = 0;
 800695c:	f04f 0300 	mov.w	r3, #0
 8006960:	623b      	str	r3, [r7, #32]

    // FPU instructions must run on aligned data.
    // We first copy the data to an (aligned) local variable, before assigning it
    switch(ops->storageType)
 8006962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006964:	791b      	ldrb	r3, [r3, #4]
 8006966:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800696a:	b2db      	uxtb	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	2b06      	cmp	r3, #6
 8006970:	f200 8121 	bhi.w	8006bb6 <logRunBlock+0x2c2>
 8006974:	a201      	add	r2, pc, #4	; (adr r2, 800697c <logRunBlock+0x88>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	08006999 	.word	0x08006999
 8006980:	08006a23 	.word	0x08006a23
 8006984:	08006ab1 	.word	0x08006ab1
 8006988:	080069dd 	.word	0x080069dd
 800698c:	08006a69 	.word	0x08006a69
 8006990:	08006af5 	.word	0x08006af5
 8006994:	08006b61 	.word	0x08006b61
    {
      case LOG_UINT8:
      {
        uint8_t v;
        if (ops->acquisitionType == acqType_function) {
 8006998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699a:	7b1b      	ldrb	r3, [r3, #12]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d116      	bne.n	80069ce <logRunBlock+0xda>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 80069a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	62bb      	str	r3, [r7, #40]	; 0x28
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt8);
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d105      	bne.n	80069ba <logRunBlock+0xc6>
 80069ae:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 80069b2:	4964      	ldr	r1, [pc, #400]	; (8006b44 <logRunBlock+0x250>)
 80069b4:	4864      	ldr	r0, [pc, #400]	; (8006b48 <logRunBlock+0x254>)
 80069b6:	f7fe fd7d 	bl	80054b4 <assertFail>
          v = logByFunction->acquireUInt8(timestamp, logByFunction->data);
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c0:	6852      	ldr	r2, [r2, #4]
 80069c2:	4611      	mov	r1, r2
 80069c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80069c6:	4798      	blx	r3
 80069c8:	4603      	mov	r3, r0
 80069ca:	77fb      	strb	r3, [r7, #31]
 80069cc:	e003      	b.n	80069d6 <logRunBlock+0xe2>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 80069ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	77fb      	strb	r3, [r7, #31]
        }
        valuei = v;
 80069d6:	7ffb      	ldrb	r3, [r7, #31]
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069da:	e0ec      	b.n	8006bb6 <logRunBlock+0x2c2>
      }
      case LOG_INT8:
      {
        int8_t v;
        if (ops->acquisitionType == acqType_function) {
 80069dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069de:	7b1b      	ldrb	r3, [r3, #12]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d116      	bne.n	8006a12 <logRunBlock+0x11e>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 80069e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	637b      	str	r3, [r7, #52]	; 0x34
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt8);
 80069ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d105      	bne.n	80069fe <logRunBlock+0x10a>
 80069f2:	f240 3201 	movw	r2, #769	; 0x301
 80069f6:	4953      	ldr	r1, [pc, #332]	; (8006b44 <logRunBlock+0x250>)
 80069f8:	4854      	ldr	r0, [pc, #336]	; (8006b4c <logRunBlock+0x258>)
 80069fa:	f7fe fd5b 	bl	80054b4 <assertFail>
          v = logByFunction->acquireInt8(timestamp, logByFunction->data);
 80069fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a04:	6852      	ldr	r2, [r2, #4]
 8006a06:	4611      	mov	r1, r2
 8006a08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006a0a:	4798      	blx	r3
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	77bb      	strb	r3, [r7, #30]
 8006a10:	e003      	b.n	8006a1a <logRunBlock+0x126>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8006a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	77bb      	strb	r3, [r7, #30]
        }
        valuei = v;
 8006a1a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a20:	e0c9      	b.n	8006bb6 <logRunBlock+0x2c2>
      }
      case LOG_UINT16:
      {
        uint16_t v;
        if (ops->acquisitionType == acqType_function) {
 8006a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a24:	7b1b      	ldrb	r3, [r3, #12]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d116      	bne.n	8006a58 <logRunBlock+0x164>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8006a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt16);
 8006a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d105      	bne.n	8006a44 <logRunBlock+0x150>
 8006a38:	f240 320e 	movw	r2, #782	; 0x30e
 8006a3c:	4941      	ldr	r1, [pc, #260]	; (8006b44 <logRunBlock+0x250>)
 8006a3e:	4844      	ldr	r0, [pc, #272]	; (8006b50 <logRunBlock+0x25c>)
 8006a40:	f7fe fd38 	bl	80054b4 <assertFail>
          v = logByFunction->acquireUInt16(timestamp, logByFunction->data);
 8006a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a4a:	6852      	ldr	r2, [r2, #4]
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006a50:	4798      	blx	r3
 8006a52:	4603      	mov	r3, r0
 8006a54:	83bb      	strh	r3, [r7, #28]
 8006a56:	e004      	b.n	8006a62 <logRunBlock+0x16e>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8006a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	83bb      	strh	r3, [r7, #28]
        }
        valuei = v;
 8006a62:	8bbb      	ldrh	r3, [r7, #28]
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a66:	e0a6      	b.n	8006bb6 <logRunBlock+0x2c2>
      }
      case LOG_INT16:
      {
        int16_t v;
        if (ops->acquisitionType == acqType_function) {
 8006a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6a:	7b1b      	ldrb	r3, [r3, #12]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d116      	bne.n	8006a9e <logRunBlock+0x1aa>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8006a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	63bb      	str	r3, [r7, #56]	; 0x38
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt16);
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d105      	bne.n	8006a8a <logRunBlock+0x196>
 8006a7e:	f240 321b 	movw	r2, #795	; 0x31b
 8006a82:	4930      	ldr	r1, [pc, #192]	; (8006b44 <logRunBlock+0x250>)
 8006a84:	4833      	ldr	r0, [pc, #204]	; (8006b54 <logRunBlock+0x260>)
 8006a86:	f7fe fd15 	bl	80054b4 <assertFail>
          v = logByFunction->acquireInt16(timestamp, logByFunction->data);
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a90:	6852      	ldr	r2, [r2, #4]
 8006a92:	4611      	mov	r1, r2
 8006a94:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006a96:	4798      	blx	r3
 8006a98:	4603      	mov	r3, r0
 8006a9a:	837b      	strh	r3, [r7, #26]
 8006a9c:	e004      	b.n	8006aa8 <logRunBlock+0x1b4>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8006a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	837b      	strh	r3, [r7, #26]
        }
        valuei = v;
 8006aa8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006aae:	e082      	b.n	8006bb6 <logRunBlock+0x2c2>
      }
      case LOG_UINT32:
      {
        uint32_t v;
        if (ops->acquisitionType == acqType_function) {
 8006ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab2:	7b1b      	ldrb	r3, [r3, #12]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d116      	bne.n	8006ae6 <logRunBlock+0x1f2>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8006ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	633b      	str	r3, [r7, #48]	; 0x30
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt32);
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d105      	bne.n	8006ad2 <logRunBlock+0x1de>
 8006ac6:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006aca:	491e      	ldr	r1, [pc, #120]	; (8006b44 <logRunBlock+0x250>)
 8006acc:	4822      	ldr	r0, [pc, #136]	; (8006b58 <logRunBlock+0x264>)
 8006ace:	f7fe fcf1 	bl	80054b4 <assertFail>
          v = logByFunction->acquireUInt32(timestamp, logByFunction->data);
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad8:	6852      	ldr	r2, [r2, #4]
 8006ada:	4611      	mov	r1, r2
 8006adc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006ade:	4798      	blx	r3
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	e003      	b.n	8006aee <logRunBlock+0x1fa>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8006ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	617b      	str	r3, [r7, #20]
        }
        valuei = v;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006af2:	e060      	b.n	8006bb6 <logRunBlock+0x2c2>
      }
      case LOG_INT32:
      {
        int32_t v;
        if (ops->acquisitionType == acqType_function) {
 8006af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af6:	7b1b      	ldrb	r3, [r3, #12]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d116      	bne.n	8006b2a <logRunBlock+0x236>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8006afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt32);
 8006b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d105      	bne.n	8006b16 <logRunBlock+0x222>
 8006b0a:	f240 3235 	movw	r2, #821	; 0x335
 8006b0e:	490d      	ldr	r1, [pc, #52]	; (8006b44 <logRunBlock+0x250>)
 8006b10:	4812      	ldr	r0, [pc, #72]	; (8006b5c <logRunBlock+0x268>)
 8006b12:	f7fe fccf 	bl	80054b4 <assertFail>
          v = logByFunction->acquireInt32(timestamp, logByFunction->data);
 8006b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b1c:	6852      	ldr	r2, [r2, #4]
 8006b1e:	4611      	mov	r1, r2
 8006b20:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006b22:	4798      	blx	r3
 8006b24:	4603      	mov	r3, r0
 8006b26:	613b      	str	r3, [r7, #16]
 8006b28:	e003      	b.n	8006b32 <logRunBlock+0x23e>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8006b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	613b      	str	r3, [r7, #16]
        }
        valuei = v;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b36:	e03e      	b.n	8006bb6 <logRunBlock+0x2c2>
 8006b38:	200069ac 	.word	0x200069ac
 8006b3c:	10624dd3 	.word	0x10624dd3
 8006b40:	20006a34 	.word	0x20006a34
 8006b44:	0801a9b8 	.word	0x0801a9b8
 8006b48:	0801aa2c 	.word	0x0801aa2c
 8006b4c:	0801aa48 	.word	0x0801aa48
 8006b50:	0801aa64 	.word	0x0801aa64
 8006b54:	0801aa84 	.word	0x0801aa84
 8006b58:	0801aaa0 	.word	0x0801aaa0
 8006b5c:	0801aac0 	.word	0x0801aac0
      }
      case LOG_FLOAT:
      {
        float v;
        if (ops->acquisitionType == acqType_function) {
 8006b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b62:	7b1b      	ldrb	r3, [r3, #12]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d118      	bne.n	8006b9a <logRunBlock+0x2a6>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8006b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	643b      	str	r3, [r7, #64]	; 0x40
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->aquireFloat);
 8006b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d105      	bne.n	8006b82 <logRunBlock+0x28e>
 8006b76:	f240 3242 	movw	r2, #834	; 0x342
 8006b7a:	495c      	ldr	r1, [pc, #368]	; (8006cec <logRunBlock+0x3f8>)
 8006b7c:	485c      	ldr	r0, [pc, #368]	; (8006cf0 <logRunBlock+0x3fc>)
 8006b7e:	f7fe fc99 	bl	80054b4 <assertFail>
          v = logByFunction->aquireFloat(timestamp, logByFunction->data);
 8006b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b88:	6852      	ldr	r2, [r2, #4]
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006b8e:	4798      	blx	r3
 8006b90:	eef0 7a40 	vmov.f32	s15, s0
 8006b94:	edc7 7a03 	vstr	s15, [r7, #12]
 8006b98:	e003      	b.n	8006ba2 <logRunBlock+0x2ae>
        } else {
          memcpy(&v, ops->variable, sizeof(valuef));
 8006b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	60fb      	str	r3, [r7, #12]
        }
        valuei = v;
 8006ba2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006baa:	ee17 3a90 	vmov	r3, s15
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
        valuef = v;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	623b      	str	r3, [r7, #32]
        break;
 8006bb4:	bf00      	nop
      }
    }

    if (ops->logType == LOG_FLOAT || ops->logType == LOG_FP16)
 8006bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb8:	791b      	ldrb	r3, [r3, #4]
 8006bba:	f023 030f 	bic.w	r3, r3, #15
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b70      	cmp	r3, #112	; 0x70
 8006bc2:	d006      	beq.n	8006bd2 <logRunBlock+0x2de>
 8006bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc6:	791b      	ldrb	r3, [r3, #4]
 8006bc8:	f023 030f 	bic.w	r3, r3, #15
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b80      	cmp	r3, #128	; 0x80
 8006bd0:	d138      	bne.n	8006c44 <logRunBlock+0x350>
    {
      if (ops->storageType != LOG_FLOAT)
 8006bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b07      	cmp	r3, #7
 8006bde:	d006      	beq.n	8006bee <logRunBlock+0x2fa>
      {
        valuef = valuei;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bea:	edc7 7a08 	vstr	s15, [r7, #32]
      }

      // Try to append the next item to the packet.  If we run out of space,
      // drop this and subsequent items.
      if (ops->logType == LOG_FLOAT)
 8006bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf0:	791b      	ldrb	r3, [r3, #4]
 8006bf2:	f023 030f 	bic.w	r3, r3, #15
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b70      	cmp	r3, #112	; 0x70
 8006bfa:	d10d      	bne.n	8006c18 <logRunBlock+0x324>
      {
        if (!appendToPacket(&pk, &valuef, 4)) break;
 8006bfc:	f107 0320 	add.w	r3, r7, #32
 8006c00:	2204      	movs	r2, #4
 8006c02:	4619      	mov	r1, r3
 8006c04:	483b      	ldr	r0, [pc, #236]	; (8006cf4 <logRunBlock+0x400>)
 8006c06:	f7ff fe4d 	bl	80068a4 <appendToPacket>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	f083 0301 	eor.w	r3, r3, #1
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d02c      	beq.n	8006c70 <logRunBlock+0x37c>
 8006c16:	e035      	b.n	8006c84 <logRunBlock+0x390>
      }
      else
      {
        valuei = single2half(valuef);
 8006c18:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c20:	f000 f9b7 	bl	8006f92 <single2half>
 8006c24:	4603      	mov	r3, r0
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
        if (!appendToPacket(&pk, &valuei, 2)) break;
 8006c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4830      	ldr	r0, [pc, #192]	; (8006cf4 <logRunBlock+0x400>)
 8006c32:	f7ff fe37 	bl	80068a4 <appendToPacket>
 8006c36:	4603      	mov	r3, r0
 8006c38:	f083 0301 	eor.w	r3, r3, #1
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d016      	beq.n	8006c70 <logRunBlock+0x37c>
 8006c42:	e01f      	b.n	8006c84 <logRunBlock+0x390>
      }
    }
    else  //logType is an integer
    {
      if (!appendToPacket(&pk, &valuei, typeLength[ops->logType])) break;
 8006c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c46:	791b      	ldrb	r3, [r3, #4]
 8006c48:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4b29      	ldr	r3, [pc, #164]	; (8006cf8 <logRunBlock+0x404>)
 8006c52:	5c9b      	ldrb	r3, [r3, r2]
 8006c54:	461a      	mov	r2, r3
 8006c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4825      	ldr	r0, [pc, #148]	; (8006cf4 <logRunBlock+0x400>)
 8006c5e:	f7ff fe21 	bl	80068a4 <appendToPacket>
 8006c62:	4603      	mov	r3, r0
 8006c64:	f083 0301 	eor.w	r3, r3, #1
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d109      	bne.n	8006c82 <logRunBlock+0x38e>
 8006c6e:	e000      	b.n	8006c72 <logRunBlock+0x37e>
      if (ops->logType == LOG_FLOAT)
 8006c70:	bf00      	nop
    }

    ops = ops->next;
 8006c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (ops)
 8006c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f47f ae6c 	bne.w	8006958 <logRunBlock+0x64>
 8006c80:	e000      	b.n	8006c84 <logRunBlock+0x390>
      if (!appendToPacket(&pk, &valuei, typeLength[ops->logType])) break;
 8006c82:	bf00      	nop
  }

  xSemaphoreGive(logLock);
 8006c84:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <logRunBlock+0x408>)
 8006c86:	6818      	ldr	r0, [r3, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	f00c fa23 	bl	80130d8 <xQueueGenericSend>

  // Check if the connection is still up, oherwise disable
  // all the logging and flush all the CRTP queues.
  if (!crtpIsConnected())
 8006c92:	f7fa fd31 	bl	80016f8 <crtpIsConnected>
 8006c96:	4603      	mov	r3, r0
 8006c98:	f083 0301 	eor.w	r3, r3, #1
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d004      	beq.n	8006cac <logRunBlock+0x3b8>
  {
    logReset();
 8006ca2:	f000 f8eb 	bl	8006e7c <logReset>
    crtpReset();
 8006ca6:	f7fa fd0f 	bl	80016c8 <crtpReset>
        DEBUG_PRINT("WARNING: LOG packets drop detected (%lu packets lost)\n",
                    blk->droppedPackets);
      }
    }
  }
}
 8006caa:	e01b      	b.n	8006ce4 <logRunBlock+0x3f0>
    if (!crtpSendPacket(&pk))
 8006cac:	4811      	ldr	r0, [pc, #68]	; (8006cf4 <logRunBlock+0x400>)
 8006cae:	f7fa fcb7 	bl	8001620 <crtpSendPacket>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d115      	bne.n	8006ce4 <logRunBlock+0x3f0>
      if (blk->droppedPackets++ % 100 == 0)
 8006cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cbc:	1c51      	adds	r1, r2, #1
 8006cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc0:	6359      	str	r1, [r3, #52]	; 0x34
 8006cc2:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <logRunBlock+0x40c>)
 8006cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cc8:	095b      	lsrs	r3, r3, #5
 8006cca:	2164      	movs	r1, #100	; 0x64
 8006ccc:	fb01 f303 	mul.w	r3, r1, r3
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <logRunBlock+0x3f0>
        DEBUG_PRINT("WARNING: LOG packets drop detected (%lu packets lost)\n",
 8006cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cda:	461a      	mov	r2, r3
 8006cdc:	4909      	ldr	r1, [pc, #36]	; (8006d04 <logRunBlock+0x410>)
 8006cde:	2000      	movs	r0, #0
 8006ce0:	f7fe fbba 	bl	8005458 <SEGGER_RTT_printf>
}
 8006ce4:	bf00      	nop
 8006ce6:	3750      	adds	r7, #80	; 0x50
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	0801a9b8 	.word	0x0801a9b8
 8006cf0:	0801aadc 	.word	0x0801aadc
 8006cf4:	20006a34 	.word	0x20006a34
 8006cf8:	0801c330 	.word	0x0801c330
 8006cfc:	200069ac 	.word	0x200069ac
 8006d00:	51eb851f 	.word	0x51eb851f
 8006d04:	0801aaf8 	.word	0x0801aaf8

08006d08 <variableGetIndex>:

static int variableGetIndex(int id)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  int i;
  int n=0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	60bb      	str	r3, [r7, #8]

  for (i=0; i<logsLen; i++)
 8006d14:	2300      	movs	r3, #0
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	e015      	b.n	8006d46 <variableGetIndex+0x3e>
  {
    if(!(logs[i].type & LOG_GROUP))
 8006d1a:	4b16      	ldr	r3, [pc, #88]	; (8006d74 <variableGetIndex+0x6c>)
 8006d1c:	6819      	ldr	r1, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4613      	mov	r3, r2
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	440b      	add	r3, r1
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	b25b      	sxtb	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	db06      	blt.n	8006d40 <variableGetIndex+0x38>
    {
      if(n==id)
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d00b      	beq.n	8006d52 <variableGetIndex+0x4a>
        break;
      n++;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	60bb      	str	r3, [r7, #8]
  for (i=0; i<logsLen; i++)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3301      	adds	r3, #1
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <variableGetIndex+0x70>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	dbe4      	blt.n	8006d1a <variableGetIndex+0x12>
 8006d50:	e000      	b.n	8006d54 <variableGetIndex+0x4c>
        break;
 8006d52:	bf00      	nop
    }
  }

  if (i>=logsLen)
 8006d54:	4b08      	ldr	r3, [pc, #32]	; (8006d78 <variableGetIndex+0x70>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	db02      	blt.n	8006d64 <variableGetIndex+0x5c>
    return -1;
 8006d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d62:	e000      	b.n	8006d66 <variableGetIndex+0x5e>

  return i;
 8006d64:	68fb      	ldr	r3, [r7, #12]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20006a00 	.word	0x20006a00
 8006d78:	20006a04 	.word	0x20006a04

08006d7c <opsMalloc>:

static struct log_ops * opsMalloc()
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
  int i;

  for (i=0;i<LOG_MAX_OPS; i++)
 8006d82:	2300      	movs	r3, #0
 8006d84:	607b      	str	r3, [r7, #4]
 8006d86:	e00a      	b.n	8006d9e <opsMalloc+0x22>
      if (logOps[i].variable == NULL) break;
 8006d88:	4a0f      	ldr	r2, [pc, #60]	; (8006dc8 <opsMalloc+0x4c>)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	4413      	add	r3, r2
 8006d90:	3308      	adds	r3, #8
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d006      	beq.n	8006da6 <opsMalloc+0x2a>
  for (i=0;i<LOG_MAX_OPS; i++)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	607b      	str	r3, [r7, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b7f      	cmp	r3, #127	; 0x7f
 8006da2:	ddf1      	ble.n	8006d88 <opsMalloc+0xc>
 8006da4:	e000      	b.n	8006da8 <opsMalloc+0x2c>
      if (logOps[i].variable == NULL) break;
 8006da6:	bf00      	nop

  if (i >= LOG_MAX_OPS)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b7f      	cmp	r3, #127	; 0x7f
 8006dac:	dd01      	ble.n	8006db2 <opsMalloc+0x36>
      return NULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	e003      	b.n	8006dba <opsMalloc+0x3e>

  return &logOps[i];
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	011b      	lsls	r3, r3, #4
 8006db6:	4a04      	ldr	r2, [pc, #16]	; (8006dc8 <opsMalloc+0x4c>)
 8006db8:	4413      	add	r3, r2
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	20002e00 	.word	0x20002e00

08006dcc <opsFree>:

static void opsFree(struct log_ops * ops)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  ops->variable = NULL;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	609a      	str	r2, [r3, #8]
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <blockCalcLength>:

static int blockCalcLength(struct log_block * block)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  struct log_ops * ops;
  int len = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60bb      	str	r3, [r7, #8]

  for (ops = block->ops; ops; ops = ops->next)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	e00e      	b.n	8006e1a <blockCalcLength+0x32>
    len += typeLength[ops->logType];
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	791b      	ldrb	r3, [r3, #4]
 8006e00:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <blockCalcLength+0x48>)
 8006e0a:	5c9b      	ldrb	r3, [r3, r2]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	4413      	add	r3, r2
 8006e12:	60bb      	str	r3, [r7, #8]
  for (ops = block->ops; ops; ops = ops->next)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1ed      	bne.n	8006dfc <blockCalcLength+0x14>

  return len;
 8006e20:	68bb      	ldr	r3, [r7, #8]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	0801c330 	.word	0x0801c330

08006e34 <blockAppendOps>:

void blockAppendOps(struct log_block * block, struct log_ops * ops)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  struct log_ops * o;

  ops->next = NULL;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]

  if (block->ops == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d103      	bne.n	8006e54 <blockAppendOps+0x20>
    block->ops = ops;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	639a      	str	r2, [r3, #56]	; 0x38
  {
    for (o = block->ops; o->next; o = o->next);

    o->next = ops;
  }
}
 8006e52:	e00d      	b.n	8006e70 <blockAppendOps+0x3c>
    for (o = block->ops; o->next; o = o->next);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e002      	b.n	8006e62 <blockAppendOps+0x2e>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1f8      	bne.n	8006e5c <blockAppendOps+0x28>
    o->next = ops;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	601a      	str	r2, [r3, #0]
}
 8006e70:	bf00      	nop
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <logReset>:

static void logReset(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
  int i;

  if (isInit)
 8006e82:	4b2b      	ldr	r3, [pc, #172]	; (8006f30 <logReset+0xb4>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d029      	beq.n	8006ede <logReset+0x62>
  {
    //Stop and delete all started log blocks
    for(i=0; i<LOG_MAX_BLOCKS; i++)
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	607b      	str	r3, [r7, #4]
 8006e8e:	e023      	b.n	8006ed8 <logReset+0x5c>
      if (logBlocks[i].id != -1)
 8006e90:	4928      	ldr	r1, [pc, #160]	; (8006f34 <logReset+0xb8>)
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	4613      	mov	r3, r2
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	1a9b      	subs	r3, r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea4:	d015      	beq.n	8006ed2 <logReset+0x56>
      {
        logStopBlock(logBlocks[i].id);
 8006ea6:	4923      	ldr	r1, [pc, #140]	; (8006f34 <logReset+0xb8>)
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	1a9b      	subs	r3, r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	440b      	add	r3, r1
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff fcaa 	bl	8006810 <logStopBlock>
        logDeleteBlock(logBlocks[i].id);
 8006ebc:	491d      	ldr	r1, [pc, #116]	; (8006f34 <logReset+0xb8>)
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff fbc5 	bl	800665c <logDeleteBlock>
    for(i=0; i<LOG_MAX_BLOCKS; i++)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	607b      	str	r3, [r7, #4]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b0f      	cmp	r3, #15
 8006edc:	ddd8      	ble.n	8006e90 <logReset+0x14>
      }
  }

  //Force free all the log block objects
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 8006ede:	2300      	movs	r3, #0
 8006ee0:	607b      	str	r3, [r7, #4]
 8006ee2:	e00c      	b.n	8006efe <logReset+0x82>
    logBlocks[i].id = BLOCK_ID_FREE;
 8006ee4:	4913      	ldr	r1, [pc, #76]	; (8006f34 <logReset+0xb8>)
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	1a9b      	subs	r3, r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ef6:	601a      	str	r2, [r3, #0]
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3301      	adds	r3, #1
 8006efc:	607b      	str	r3, [r7, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b0f      	cmp	r3, #15
 8006f02:	ddef      	ble.n	8006ee4 <logReset+0x68>

  //Force free the log ops
  for (i=0; i<LOG_MAX_OPS; i++)
 8006f04:	2300      	movs	r3, #0
 8006f06:	607b      	str	r3, [r7, #4]
 8006f08:	e009      	b.n	8006f1e <logReset+0xa2>
    logOps[i].variable = NULL;
 8006f0a:	4a0b      	ldr	r2, [pc, #44]	; (8006f38 <logReset+0xbc>)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	4413      	add	r3, r2
 8006f12:	3308      	adds	r3, #8
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
  for (i=0; i<LOG_MAX_OPS; i++)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	607b      	str	r3, [r7, #4]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b7f      	cmp	r3, #127	; 0x7f
 8006f22:	ddf2      	ble.n	8006f0a <logReset+0x8e>
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20006a30 	.word	0x20006a30
 8006f34:	20003600 	.word	0x20003600
 8006f38:	20002e00 	.word	0x20002e00

08006f3c <logGetType>:

  return invalidVarId;
}

inline int logGetType(logVarId_t varid)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	80fb      	strh	r3, [r7, #6]
  return logs[varid].type & LOG_TYPE_MASK;
 8006f46:	4b08      	ldr	r3, [pc, #32]	; (8006f68 <logGetType+0x2c>)
 8006f48:	6819      	ldr	r1, [r3, #0]
 8006f4a:	88fa      	ldrh	r2, [r7, #6]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	f003 030f 	and.w	r3, r3, #15
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	20006a00 	.word	0x20006a00

08006f6c <acquisitionTypeFromLogType>:
unsigned int logGetUint(logVarId_t varid)
{
  return (unsigned int)logGetInt(varid);
}

static acquisitionType_t acquisitionTypeFromLogType(uint8_t logType) {
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	71fb      	strb	r3, [r7, #7]
  if (logType & LOG_BY_FUNCTION) {
 8006f76:	79fb      	ldrb	r3, [r7, #7]
 8006f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <acquisitionTypeFromLogType+0x18>
    return acqType_function;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e000      	b.n	8006f86 <acquisitionTypeFromLogType+0x1a>
  }

  return acqType_memory;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <single2half>:
 *  * Rounding seems to give at least 11 bits precision
 *  * Faster and smaller than the GCC implementation
 */

uint16_t single2half(float number)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b087      	sub	sp, #28
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t num = *((uint32_t*)&number);
 8006f9c:	1d3b      	adds	r3, r7, #4
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	617b      	str	r3, [r7, #20]
    uint32_t s = num>>31;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	0fdb      	lsrs	r3, r3, #31
 8006fa6:	613b      	str	r3, [r7, #16]
    uint32_t e = (num>>23)&0x0FF;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	0ddb      	lsrs	r3, r3, #23
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	60fb      	str	r3, [r7, #12]

    if ((e==255) && (num&0x007fffff))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2bff      	cmp	r3, #255	; 0xff
 8006fb4:	d107      	bne.n	8006fc6 <single2half+0x34>
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <single2half+0x34>
        return 0x7E00; // NaN
 8006fc0:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 8006fc4:	e02c      	b.n	8007020 <single2half+0x8e>
    if (e>(127+15))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b8e      	cmp	r3, #142	; 0x8e
 8006fca:	d908      	bls.n	8006fde <single2half+0x4c>
        return s?0xFC00:0x7C00;  //+/- inf
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <single2half+0x46>
 8006fd2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8006fd6:	e023      	b.n	8007020 <single2half+0x8e>
 8006fd8:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8006fdc:	e020      	b.n	8007020 <single2half+0x8e>
    if (e<(127-15))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b6f      	cmp	r3, #111	; 0x6f
 8006fe2:	d801      	bhi.n	8006fe8 <single2half+0x56>
        return 0; //Do not handle generating subnormalised representation
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	e01b      	b.n	8007020 <single2half+0x8e>

    return (s<<15) | ((e-127+15)<<10) | (((num>>13)&0x3FF)+((num>>12)&0x01));
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	03db      	lsls	r3, r3, #15
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	3b70      	subs	r3, #112	; 0x70
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	029b      	lsls	r3, r3, #10
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	0b5b      	lsrs	r3, r3, #13
 8007004:	b29b      	uxth	r3, r3
 8007006:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800700a:	b299      	uxth	r1, r3
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	0b1b      	lsrs	r3, r3, #12
 8007010:	b29b      	uxth	r3, r3
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	b29b      	uxth	r3, r3
 8007018:	440b      	add	r3, r1
 800701a:	b29b      	uxth	r3, r3
 800701c:	4313      	orrs	r3, r2
 800701e:	b29b      	uxth	r3, r3
}
 8007020:	4618      	mov	r0, r3
 8007022:	371c      	adds	r7, #28
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <paramGetDefault>:
extern int _stext;
extern int _etext;
static const uint64_t dummyZero64 = 0;

static void * paramGetDefault(int index)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t valueRelative;
  uint32_t address;
  void *ptrDefaultValue;

  address = (uint32_t)(params[index].address);
 8007034:	4b17      	ldr	r3, [pc, #92]	; (8007094 <paramGetDefault+0x68>)
 8007036:	6819      	ldr	r1, [r3, #0]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	613b      	str	r3, [r7, #16]

  // Is variable in data section?
  if (address >= (uint32_t)&_sdata &&
 8007048:	4a13      	ldr	r2, [pc, #76]	; (8007098 <paramGetDefault+0x6c>)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	4293      	cmp	r3, r2
 800704e:	d30c      	bcc.n	800706a <paramGetDefault+0x3e>
      address <= (uint32_t)&_edata)
 8007050:	4a12      	ldr	r2, [pc, #72]	; (800709c <paramGetDefault+0x70>)
  if (address >= (uint32_t)&_sdata &&
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	4293      	cmp	r3, r2
 8007056:	d808      	bhi.n	800706a <paramGetDefault+0x3e>
  {
    valueRelative =  address - (uint32_t)&_sdata;
 8007058:	4a0f      	ldr	r2, [pc, #60]	; (8007098 <paramGetDefault+0x6c>)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	60fb      	str	r3, [r7, #12]
    ptrDefaultValue = (void *)((uint32_t)&_sidata + valueRelative);
 8007060:	4a0f      	ldr	r2, [pc, #60]	; (80070a0 <paramGetDefault+0x74>)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	e00c      	b.n	8007084 <paramGetDefault+0x58>
  }
  // Is variable in flash section?
  else if (address >= (uint32_t)&_stext &&
 800706a:	4a0e      	ldr	r2, [pc, #56]	; (80070a4 <paramGetDefault+0x78>)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	4293      	cmp	r3, r2
 8007070:	d306      	bcc.n	8007080 <paramGetDefault+0x54>
           address <= (uint32_t)&_etext)
 8007072:	4a0d      	ldr	r2, [pc, #52]	; (80070a8 <paramGetDefault+0x7c>)
  else if (address >= (uint32_t)&_stext &&
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	4293      	cmp	r3, r2
 8007078:	d802      	bhi.n	8007080 <paramGetDefault+0x54>
  {
    ptrDefaultValue = (void *)(address);
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	617b      	str	r3, [r7, #20]
 800707e:	e001      	b.n	8007084 <paramGetDefault+0x58>
  }
  // It is zero
  else
  {
    ptrDefaultValue = (void *)&dummyZero64;
 8007080:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <paramGetDefault+0x80>)
 8007082:	617b      	str	r3, [r7, #20]
  }

  return ptrDefaultValue;
 8007084:	697b      	ldr	r3, [r7, #20]
}
 8007086:	4618      	mov	r0, r3
 8007088:	371c      	adds	r7, #28
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20006a54 	.word	0x20006a54
 8007098:	20000000 	.word	0x20000000
 800709c:	20000608 	.word	0x20000608
 80070a0:	0801c6f4 	.word	0x0801c6f4
 80070a4:	08000190 	.word	0x08000190
 80070a8:	08019c74 	.word	0x08019c74
 80070ac:	0801c340 	.word	0x0801c340

080070b0 <paramSet>:
 * @param data  The variable data
 *
 * @return number of bytes set
 **/
static int paramSet(uint16_t index, void *data)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	6039      	str	r1, [r7, #0]
 80070ba:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 80070c0:	4b1b      	ldr	r3, [pc, #108]	; (8007130 <paramSet+0x80>)
 80070c2:	6819      	ldr	r1, [r3, #0]
 80070c4:	88fa      	ldrh	r2, [r7, #6]
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f003 0303 	and.w	r3, r3, #3
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d816      	bhi.n	8007108 <paramSet+0x58>
 80070da:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <paramSet+0x30>)
 80070dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e0:	080070f1 	.word	0x080070f1
 80070e4:	080070f7 	.word	0x080070f7
 80070e8:	080070fd 	.word	0x080070fd
 80070ec:	08007103 	.word	0x08007103
  {
    case PARAM_1BYTE:
      paramLength = 1;
 80070f0:	2301      	movs	r3, #1
 80070f2:	60fb      	str	r3, [r7, #12]
      break;
 80070f4:	e008      	b.n	8007108 <paramSet+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 80070f6:	2302      	movs	r3, #2
 80070f8:	60fb      	str	r3, [r7, #12]
      break;
 80070fa:	e005      	b.n	8007108 <paramSet+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 80070fc:	2304      	movs	r3, #4
 80070fe:	60fb      	str	r3, [r7, #12]
      break;
 8007100:	e002      	b.n	8007108 <paramSet+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 8007102:	2308      	movs	r3, #8
 8007104:	60fb      	str	r3, [r7, #12]
      break;
 8007106:	bf00      	nop
  }

 	memcpy(params[index].address, data, paramLength);
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <paramSet+0x80>)
 800710a:	6819      	ldr	r1, [r3, #0]
 800710c:	88fa      	ldrh	r2, [r7, #6]
 800710e:	4613      	mov	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	440b      	add	r3, r1
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	4618      	mov	r0, r3
 8007120:	f010 fce7 	bl	8017af2 <memcpy>

  return paramLength;
 8007124:	68fb      	ldr	r3, [r7, #12]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20006a54 	.word	0x20006a54

08007134 <paramGet>:
 * @param data  The variable data
 *
 * @return number of bytes read
 **/
static int paramGet(uint16_t index, void *data)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	6039      	str	r1, [r7, #0]
 800713e:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 8007144:	4b1b      	ldr	r3, [pc, #108]	; (80071b4 <paramGet+0x80>)
 8007146:	6819      	ldr	r1, [r3, #0]
 8007148:	88fa      	ldrh	r2, [r7, #6]
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	440b      	add	r3, r1
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	2b03      	cmp	r3, #3
 800715c:	d816      	bhi.n	800718c <paramGet+0x58>
 800715e:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <paramGet+0x30>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	08007175 	.word	0x08007175
 8007168:	0800717b 	.word	0x0800717b
 800716c:	08007181 	.word	0x08007181
 8007170:	08007187 	.word	0x08007187
  {
    case PARAM_1BYTE:
      paramLength = 1;
 8007174:	2301      	movs	r3, #1
 8007176:	60fb      	str	r3, [r7, #12]
      break;
 8007178:	e008      	b.n	800718c <paramGet+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 800717a:	2302      	movs	r3, #2
 800717c:	60fb      	str	r3, [r7, #12]
      break;
 800717e:	e005      	b.n	800718c <paramGet+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 8007180:	2304      	movs	r3, #4
 8007182:	60fb      	str	r3, [r7, #12]
      break;
 8007184:	e002      	b.n	800718c <paramGet+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 8007186:	2308      	movs	r3, #8
 8007188:	60fb      	str	r3, [r7, #12]
      break;
 800718a:	bf00      	nop
  }

 	memcpy(data, params[index].address, paramLength);
 800718c:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <paramGet+0x80>)
 800718e:	6819      	ldr	r1, [r3, #0]
 8007190:	88fa      	ldrh	r2, [r7, #6]
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4619      	mov	r1, r3
 80071a2:	6838      	ldr	r0, [r7, #0]
 80071a4:	f010 fca5 	bl	8017af2 <memcpy>

  return paramLength;
 80071a8:	68fb      	ldr	r3, [r7, #12]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20006a54 	.word	0x20006a54

080071b8 <paramGetLen>:
 * Get param on [index] length in bytes
 *
 * @return number of bytes
 **/
static int paramGetLen(uint16_t index)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 80071c2:	2300      	movs	r3, #0
 80071c4:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 80071c6:	4b16      	ldr	r3, [pc, #88]	; (8007220 <paramGetLen+0x68>)
 80071c8:	6819      	ldr	r1, [r3, #0]
 80071ca:	88fa      	ldrh	r2, [r7, #6]
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	440b      	add	r3, r1
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	f003 0303 	and.w	r3, r3, #3
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d817      	bhi.n	8007210 <paramGetLen+0x58>
 80071e0:	a201      	add	r2, pc, #4	; (adr r2, 80071e8 <paramGetLen+0x30>)
 80071e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e6:	bf00      	nop
 80071e8:	080071f9 	.word	0x080071f9
 80071ec:	080071ff 	.word	0x080071ff
 80071f0:	08007205 	.word	0x08007205
 80071f4:	0800720b 	.word	0x0800720b
  {
    case PARAM_1BYTE:
      paramLength = 1;
 80071f8:	2301      	movs	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]
      break;
 80071fc:	e008      	b.n	8007210 <paramGetLen+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 80071fe:	2302      	movs	r3, #2
 8007200:	60fb      	str	r3, [r7, #12]
      break;
 8007202:	e005      	b.n	8007210 <paramGetLen+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 8007204:	2304      	movs	r3, #4
 8007206:	60fb      	str	r3, [r7, #12]
      break;
 8007208:	e002      	b.n	8007210 <paramGetLen+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 800720a:	2308      	movs	r3, #8
 800720c:	60fb      	str	r3, [r7, #12]
      break;
 800720e:	bf00      	nop
  }

  return paramLength;
 8007210:	68fb      	ldr	r3, [r7, #12]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	20006a54 	.word	0x20006a54

08007224 <paramLogicInit>:

void paramLogicInit(void)
{
 8007224:	b590      	push	{r4, r7, lr}
 8007226:	b08f      	sub	sp, #60	; 0x3c
 8007228:	af00      	add	r7, sp, #0
  int i;
  const char* group = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
  int groupLength = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t buf[30];

#ifndef UNIT_TEST_MODE
  params = &_param_start;
 8007232:	4b66      	ldr	r3, [pc, #408]	; (80073cc <paramLogicInit+0x1a8>)
 8007234:	4a66      	ldr	r2, [pc, #408]	; (80073d0 <paramLogicInit+0x1ac>)
 8007236:	601a      	str	r2, [r3, #0]
  paramsLen = &_param_stop - &_param_start;
 8007238:	4a66      	ldr	r2, [pc, #408]	; (80073d4 <paramLogicInit+0x1b0>)
 800723a:	4b65      	ldr	r3, [pc, #404]	; (80073d0 <paramLogicInit+0x1ac>)
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	109b      	asrs	r3, r3, #2
 8007240:	4a65      	ldr	r2, [pc, #404]	; (80073d8 <paramLogicInit+0x1b4>)
 8007242:	fb02 f303 	mul.w	r3, r2, r3
 8007246:	461a      	mov	r2, r3
 8007248:	4b64      	ldr	r3, [pc, #400]	; (80073dc <paramLogicInit+0x1b8>)
 800724a:	601a      	str	r2, [r3, #0]
#else
  params = _param_start;
  paramsLen = _param_stop - _param_start;
#endif
  // Calculate a hash of the toc by chaining description of each elements
  paramsCrc = 0;
 800724c:	4b64      	ldr	r3, [pc, #400]	; (80073e0 <paramLogicInit+0x1bc>)
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
  for (int i=0; i<paramsLen; i++)
 8007252:	2300      	movs	r3, #0
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007256:	e091      	b.n	800737c <paramLogicInit+0x158>
  {
    int len = 5;
 8007258:	2305      	movs	r3, #5
 800725a:	62bb      	str	r3, [r7, #40]	; 0x28
 800725c:	4b60      	ldr	r3, [pc, #384]	; (80073e0 <paramLogicInit+0x1bc>)
 800725e:	681b      	ldr	r3, [r3, #0]
    memcpy(&buf[0], &paramsCrc, 4);
 8007260:	607b      	str	r3, [r7, #4]
    buf[4] = params[i].type;
 8007262:	4b5a      	ldr	r3, [pc, #360]	; (80073cc <paramLogicInit+0x1a8>)
 8007264:	6819      	ldr	r1, [r3, #0]
 8007266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	440b      	add	r3, r1
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	723b      	strb	r3, [r7, #8]
    if (params[i].type & PARAM_GROUP) {
 8007276:	4b55      	ldr	r3, [pc, #340]	; (80073cc <paramLogicInit+0x1a8>)
 8007278:	6819      	ldr	r1, [r3, #0]
 800727a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	b25b      	sxtb	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	da1c      	bge.n	80072c8 <paramLogicInit+0xa4>
      if (params[i].type & PARAM_START) {
 800728e:	4b4f      	ldr	r3, [pc, #316]	; (80073cc <paramLogicInit+0x1a8>)
 8007290:	6819      	ldr	r1, [r3, #0]
 8007292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007294:	4613      	mov	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	440b      	add	r3, r1
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d026      	beq.n	80072f6 <paramLogicInit+0xd2>
        group = params[i].name;
 80072a8:	4b48      	ldr	r3, [pc, #288]	; (80073cc <paramLogicInit+0x1a8>)
 80072aa:	6819      	ldr	r1, [r3, #0]
 80072ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	440b      	add	r3, r1
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
        groupLength = strlen(group);
 80072bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072be:	f7f8 ffe7 	bl	8000290 <strlen>
 80072c2:	4603      	mov	r3, r0
 80072c4:	633b      	str	r3, [r7, #48]	; 0x30
 80072c6:	e016      	b.n	80072f6 <paramLogicInit+0xd2>
      }
    } else {
      // CMD_GET_ITEM_V2 result's size is: 4 + strlen(params[i].name) + groupLength + 2
      if (strlen(params[i].name) + groupLength + 2 > 26) {
 80072c8:	4b40      	ldr	r3, [pc, #256]	; (80073cc <paramLogicInit+0x1a8>)
 80072ca:	6819      	ldr	r1, [r3, #0]
 80072cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	440b      	add	r3, r1
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7f8 ffd8 	bl	8000290 <strlen>
 80072e0:	4602      	mov	r2, r0
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	4413      	add	r3, r2
 80072e6:	3302      	adds	r3, #2
 80072e8:	2b1a      	cmp	r3, #26
 80072ea:	d904      	bls.n	80072f6 <paramLogicInit+0xd2>
        PARAM_ERROR("'%s.%s' too long\n", group, params[i].name);
        ASSERT_FAILED();
 80072ec:	22fe      	movs	r2, #254	; 0xfe
 80072ee:	493d      	ldr	r1, [pc, #244]	; (80073e4 <paramLogicInit+0x1c0>)
 80072f0:	483d      	ldr	r0, [pc, #244]	; (80073e8 <paramLogicInit+0x1c4>)
 80072f2:	f7fe f8df 	bl	80054b4 <assertFail>
      }
    }

    if (params[i].name) {
 80072f6:	4b35      	ldr	r3, [pc, #212]	; (80073cc <paramLogicInit+0x1a8>)
 80072f8:	6819      	ldr	r1, [r3, #0]
 80072fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072fc:	4613      	mov	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d02b      	beq.n	8007364 <paramLogicInit+0x140>
      memcpy(&buf[5], params[i].name, strlen(params[i].name));
 800730c:	4b2f      	ldr	r3, [pc, #188]	; (80073cc <paramLogicInit+0x1a8>)
 800730e:	6819      	ldr	r1, [r3, #0]
 8007310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	685c      	ldr	r4, [r3, #4]
 800731e:	4b2b      	ldr	r3, [pc, #172]	; (80073cc <paramLogicInit+0x1a8>)
 8007320:	6819      	ldr	r1, [r3, #0]
 8007322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	4618      	mov	r0, r3
 8007332:	f7f8 ffad 	bl	8000290 <strlen>
 8007336:	4602      	mov	r2, r0
 8007338:	1d3b      	adds	r3, r7, #4
 800733a:	3305      	adds	r3, #5
 800733c:	4621      	mov	r1, r4
 800733e:	4618      	mov	r0, r3
 8007340:	f010 fbd7 	bl	8017af2 <memcpy>
      len += strlen(params[i].name);
 8007344:	4b21      	ldr	r3, [pc, #132]	; (80073cc <paramLogicInit+0x1a8>)
 8007346:	6819      	ldr	r1, [r3, #0]
 8007348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	440b      	add	r3, r1
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	4618      	mov	r0, r3
 8007358:	f7f8 ff9a 	bl	8000290 <strlen>
 800735c:	4602      	mov	r2, r0
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	4413      	add	r3, r2
 8007362:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    paramsCrc = crc32CalculateBuffer(buf, len);
 8007364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007366:	1d3b      	adds	r3, r7, #4
 8007368:	4611      	mov	r1, r2
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe f959 	bl	8005622 <crc32CalculateBuffer>
 8007370:	4603      	mov	r3, r0
 8007372:	4a1b      	ldr	r2, [pc, #108]	; (80073e0 <paramLogicInit+0x1bc>)
 8007374:	6013      	str	r3, [r2, #0]
  for (int i=0; i<paramsLen; i++)
 8007376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007378:	3301      	adds	r3, #1
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800737c:	4b17      	ldr	r3, [pc, #92]	; (80073dc <paramLogicInit+0x1b8>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007382:	429a      	cmp	r2, r3
 8007384:	f6ff af68 	blt.w	8007258 <paramLogicInit+0x34>
  }

  for (i=0; i<paramsLen; i++)
 8007388:	2300      	movs	r3, #0
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
 800738c:	e014      	b.n	80073b8 <paramLogicInit+0x194>
  {
    if(!(params[i].type & PARAM_GROUP))
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <paramLogicInit+0x1a8>)
 8007390:	6819      	ldr	r1, [r3, #0]
 8007392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	b25b      	sxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	db05      	blt.n	80073b2 <paramLogicInit+0x18e>
      paramsCount++;
 80073a6:	4b11      	ldr	r3, [pc, #68]	; (80073ec <paramLogicInit+0x1c8>)
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	3301      	adds	r3, #1
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <paramLogicInit+0x1c8>)
 80073b0:	801a      	strh	r2, [r3, #0]
  for (i=0; i<paramsLen; i++)
 80073b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b4:	3301      	adds	r3, #1
 80073b6:	637b      	str	r3, [r7, #52]	; 0x34
 80073b8:	4b08      	ldr	r3, [pc, #32]	; (80073dc <paramLogicInit+0x1b8>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073be:	429a      	cmp	r2, r3
 80073c0:	dbe5      	blt.n	800738e <paramLogicInit+0x16a>
  }
}
 80073c2:	bf00      	nop
 80073c4:	bf00      	nop
 80073c6:	373c      	adds	r7, #60	; 0x3c
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd90      	pop	{r4, r7, pc}
 80073cc:	20006a54 	.word	0x20006a54
 80073d0:	080196d4 	.word	0x080196d4
 80073d4:	080199e0 	.word	0x080199e0
 80073d8:	cccccccd 	.word	0xcccccccd
 80073dc:	20006a58 	.word	0x20006a58
 80073e0:	20006a5c 	.word	0x20006a5c
 80073e4:	0801ab48 	.word	0x0801ab48
 80073e8:	0801ab68 	.word	0x0801ab68
 80073ec:	20006a60 	.word	0x20006a60

080073f0 <paramTOCProcess>:

void paramTOCProcess(CRTPPacket *p, int command)
{
 80073f0:	b5b0      	push	{r4, r5, r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  int ptr = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]
  char * group = "";
 80073fe:	4b8e      	ldr	r3, [pc, #568]	; (8007638 <paramTOCProcess+0x248>)
 8007400:	613b      	str	r3, [r7, #16]
  uint16_t n=0;
 8007402:	2300      	movs	r3, #0
 8007404:	81fb      	strh	r3, [r7, #14]
  uint16_t paramId=0;
 8007406:	2300      	movs	r3, #0
 8007408:	81bb      	strh	r3, [r7, #12]

  switch (command)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b03      	cmp	r3, #3
 800740e:	f200 810e 	bhi.w	800762e <paramTOCProcess+0x23e>
 8007412:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <paramTOCProcess+0x28>)
 8007414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007418:	08007459 	.word	0x08007459
 800741c:	08007429 	.word	0x08007429
 8007420:	080074b1 	.word	0x080074b1
 8007424:	0800747b 	.word	0x0800747b
  {
    case CMD_GET_INFO: //Get info packet about the param implementation (obsolete)
      DEBUG_PRINT("Param API V1 not supported anymore!\n");
 8007428:	4984      	ldr	r1, [pc, #528]	; (800763c <paramTOCProcess+0x24c>)
 800742a:	2000      	movs	r0, #0
 800742c:	f7fe f814 	bl	8005458 <SEGGER_RTT_printf>
      ptr = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	617b      	str	r3, [r7, #20]
      group = "";
 8007434:	4b80      	ldr	r3, [pc, #512]	; (8007638 <paramTOCProcess+0x248>)
 8007436:	613b      	str	r3, [r7, #16]
      p->header = CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	705a      	strb	r2, [r3, #1]
      p->size = 4;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2204      	movs	r2, #4
 8007442:	701a      	strb	r2, [r3, #0]
      p->data[0] = CMD_GET_INFO;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	709a      	strb	r2, [r3, #2]
      p->data[1] = 0; // Param count
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	70da      	strb	r2, [r3, #3]
      crtpSendPacketBlock(p);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7fa f90f 	bl	8001674 <crtpSendPacketBlock>
      break;
 8007456:	e0ea      	b.n	800762e <paramTOCProcess+0x23e>
    case CMD_GET_ITEM:  //Get param variable (obsolete)
      DEBUG_PRINT("Param API V1 not supported anymore!\n");
 8007458:	4978      	ldr	r1, [pc, #480]	; (800763c <paramTOCProcess+0x24c>)
 800745a:	2000      	movs	r0, #0
 800745c:	f7fd fffc 	bl	8005458 <SEGGER_RTT_printf>
      p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2220      	movs	r2, #32
 8007464:	705a      	strb	r2, [r3, #1]
      p->data[0]=CMD_GET_ITEM;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	709a      	strb	r2, [r3, #2]
      p->size=1;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fa f8fe 	bl	8001674 <crtpSendPacketBlock>
      break;
 8007478:	e0d9      	b.n	800762e <paramTOCProcess+0x23e>
    case CMD_GET_INFO_V2: //Get info packet about the param implementation
      ptr = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]
      group = "";
 800747e:	4b6e      	ldr	r3, [pc, #440]	; (8007638 <paramTOCProcess+0x248>)
 8007480:	613b      	str	r3, [r7, #16]
      p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	705a      	strb	r2, [r3, #1]
      p->size=7;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2207      	movs	r2, #7
 800748c:	701a      	strb	r2, [r3, #0]
      p->data[0]=CMD_GET_INFO_V2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2203      	movs	r2, #3
 8007492:	709a      	strb	r2, [r3, #2]
      memcpy(&p->data[1], &paramsCount, 2);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3303      	adds	r3, #3
 8007498:	4a69      	ldr	r2, [pc, #420]	; (8007640 <paramTOCProcess+0x250>)
 800749a:	8812      	ldrh	r2, [r2, #0]
 800749c:	801a      	strh	r2, [r3, #0]
      memcpy(&p->data[3], &paramsCrc, 4);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3305      	adds	r3, #5
 80074a2:	4a68      	ldr	r2, [pc, #416]	; (8007644 <paramTOCProcess+0x254>)
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	601a      	str	r2, [r3, #0]
      crtpSendPacketBlock(p);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7fa f8e3 	bl	8001674 <crtpSendPacketBlock>
      break;
 80074ae:	e0be      	b.n	800762e <paramTOCProcess+0x23e>
    case CMD_GET_ITEM_V2:  //Get param variable
      memcpy(&paramId, &p->data[1], 2);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3303      	adds	r3, #3
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	81bb      	strh	r3, [r7, #12]
      for (ptr=0; ptr<paramsLen; ptr++) //Ptr points a group
 80074ba:	2300      	movs	r3, #0
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	e030      	b.n	8007522 <paramTOCProcess+0x132>
      {
        if (params[ptr].type & PARAM_GROUP)
 80074c0:	4b61      	ldr	r3, [pc, #388]	; (8007648 <paramTOCProcess+0x258>)
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b25b      	sxtb	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	da1a      	bge.n	800750e <paramTOCProcess+0x11e>
        {
          if (params[ptr].type & PARAM_START)
 80074d8:	4b5b      	ldr	r3, [pc, #364]	; (8007648 <paramTOCProcess+0x258>)
 80074da:	6819      	ldr	r1, [r3, #0]
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	440b      	add	r3, r1
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <paramTOCProcess+0x118>
            group = params[ptr].name;
 80074f2:	4b55      	ldr	r3, [pc, #340]	; (8007648 <paramTOCProcess+0x258>)
 80074f4:	6819      	ldr	r1, [r3, #0]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	440b      	add	r3, r1
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	613b      	str	r3, [r7, #16]
 8007506:	e009      	b.n	800751c <paramTOCProcess+0x12c>
          else
            group = "";
 8007508:	4b4b      	ldr	r3, [pc, #300]	; (8007638 <paramTOCProcess+0x248>)
 800750a:	613b      	str	r3, [r7, #16]
 800750c:	e006      	b.n	800751c <paramTOCProcess+0x12c>
        }
        else                          //Ptr points a variable
        {
          if (n==paramId)
 800750e:	89bb      	ldrh	r3, [r7, #12]
 8007510:	89fa      	ldrh	r2, [r7, #14]
 8007512:	429a      	cmp	r2, r3
 8007514:	d00b      	beq.n	800752e <paramTOCProcess+0x13e>
            break;
          n++;
 8007516:	89fb      	ldrh	r3, [r7, #14]
 8007518:	3301      	adds	r3, #1
 800751a:	81fb      	strh	r3, [r7, #14]
      for (ptr=0; ptr<paramsLen; ptr++) //Ptr points a group
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	3301      	adds	r3, #1
 8007520:	617b      	str	r3, [r7, #20]
 8007522:	4b4a      	ldr	r3, [pc, #296]	; (800764c <paramTOCProcess+0x25c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	429a      	cmp	r2, r3
 800752a:	dbc9      	blt.n	80074c0 <paramTOCProcess+0xd0>
 800752c:	e000      	b.n	8007530 <paramTOCProcess+0x140>
            break;
 800752e:	bf00      	nop
        }
      }

      if (ptr<paramsLen)
 8007530:	4b46      	ldr	r3, [pc, #280]	; (800764c <paramTOCProcess+0x25c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	429a      	cmp	r2, r3
 8007538:	da6c      	bge.n	8007614 <paramTOCProcess+0x224>
      {
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	705a      	strb	r2, [r3, #1]
        p->data[0]=CMD_GET_ITEM_V2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	709a      	strb	r2, [r3, #2]
        memcpy(&p->data[1], &paramId, 2);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3303      	adds	r3, #3
 800754a:	89ba      	ldrh	r2, [r7, #12]
 800754c:	801a      	strh	r2, [r3, #0]
        p->data[3] = params[ptr].type;
 800754e:	4b3e      	ldr	r3, [pc, #248]	; (8007648 <paramTOCProcess+0x258>)
 8007550:	6819      	ldr	r1, [r3, #0]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	4613      	mov	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	440b      	add	r3, r1
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	715a      	strb	r2, [r3, #5]
        p->size = 4 + 2 + strlen(group) + strlen(params[ptr].name);
 8007564:	6938      	ldr	r0, [r7, #16]
 8007566:	f7f8 fe93 	bl	8000290 <strlen>
 800756a:	4603      	mov	r3, r0
 800756c:	b2dc      	uxtb	r4, r3
 800756e:	4b36      	ldr	r3, [pc, #216]	; (8007648 <paramTOCProcess+0x258>)
 8007570:	6819      	ldr	r1, [r3, #0]
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	4618      	mov	r0, r3
 8007582:	f7f8 fe85 	bl	8000290 <strlen>
 8007586:	4603      	mov	r3, r0
 8007588:	b2db      	uxtb	r3, r3
 800758a:	4423      	add	r3, r4
 800758c:	b2db      	uxtb	r3, r3
 800758e:	3306      	adds	r3, #6
 8007590:	b2da      	uxtb	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	701a      	strb	r2, [r3, #0]
        ASSERT(p->size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b1e      	cmp	r3, #30
 800759c:	d905      	bls.n	80075aa <paramTOCProcess+0x1ba>
 800759e:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 80075a2:	492b      	ldr	r1, [pc, #172]	; (8007650 <paramTOCProcess+0x260>)
 80075a4:	482b      	ldr	r0, [pc, #172]	; (8007654 <paramTOCProcess+0x264>)
 80075a6:	f7fd ff85 	bl	80054b4 <assertFail>
        memcpy(p->data+4, group, strlen(group)+1);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3302      	adds	r3, #2
 80075ae:	1d1c      	adds	r4, r3, #4
 80075b0:	6938      	ldr	r0, [r7, #16]
 80075b2:	f7f8 fe6d 	bl	8000290 <strlen>
 80075b6:	4603      	mov	r3, r0
 80075b8:	3301      	adds	r3, #1
 80075ba:	461a      	mov	r2, r3
 80075bc:	6939      	ldr	r1, [r7, #16]
 80075be:	4620      	mov	r0, r4
 80075c0:	f010 fa97 	bl	8017af2 <memcpy>
        memcpy(p->data+4+strlen(group)+1, params[ptr].name, strlen(params[ptr].name)+1);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	1c9c      	adds	r4, r3, #2
 80075c8:	6938      	ldr	r0, [r7, #16]
 80075ca:	f7f8 fe61 	bl	8000290 <strlen>
 80075ce:	4603      	mov	r3, r0
 80075d0:	3305      	adds	r3, #5
 80075d2:	441c      	add	r4, r3
 80075d4:	4b1c      	ldr	r3, [pc, #112]	; (8007648 <paramTOCProcess+0x258>)
 80075d6:	6819      	ldr	r1, [r3, #0]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	440b      	add	r3, r1
 80075e4:	685d      	ldr	r5, [r3, #4]
 80075e6:	4b18      	ldr	r3, [pc, #96]	; (8007648 <paramTOCProcess+0x258>)
 80075e8:	6819      	ldr	r1, [r3, #0]
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	440b      	add	r3, r1
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7f8 fe49 	bl	8000290 <strlen>
 80075fe:	4603      	mov	r3, r0
 8007600:	3301      	adds	r3, #1
 8007602:	461a      	mov	r2, r3
 8007604:	4629      	mov	r1, r5
 8007606:	4620      	mov	r0, r4
 8007608:	f010 fa73 	bl	8017af2 <memcpy>
        crtpSendPacketBlock(p);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7fa f831 	bl	8001674 <crtpSendPacketBlock>
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
        p->data[0]=CMD_GET_ITEM_V2;
        p->size=1;
        crtpSendPacketBlock(p);
      }
      break;
 8007612:	e00b      	b.n	800762c <paramTOCProcess+0x23c>
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2220      	movs	r2, #32
 8007618:	705a      	strb	r2, [r3, #1]
        p->data[0]=CMD_GET_ITEM_V2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	709a      	strb	r2, [r3, #2]
        p->size=1;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	701a      	strb	r2, [r3, #0]
        crtpSendPacketBlock(p);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7fa f824 	bl	8001674 <crtpSendPacketBlock>
      break;
 800762c:	bf00      	nop
  }
}
 800762e:	bf00      	nop
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bdb0      	pop	{r4, r5, r7, pc}
 8007636:	bf00      	nop
 8007638:	0801ab68 	.word	0x0801ab68
 800763c:	0801ab6c 	.word	0x0801ab6c
 8007640:	20006a60 	.word	0x20006a60
 8007644:	20006a5c 	.word	0x20006a5c
 8007648:	20006a54 	.word	0x20006a54
 800764c:	20006a58 	.word	0x20006a58
 8007650:	0801ab48 	.word	0x0801ab48
 8007654:	0801ab94 	.word	0x0801ab94

08007658 <paramWriteProcess>:

void paramWriteProcess(CRTPPacket *p)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint16_t id;
  memcpy(&id, &p->data[0], 2);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3302      	adds	r3, #2
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	81fb      	strh	r3, [r7, #14]

  void* valptr = &p->data[2];
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3304      	adds	r3, #4
 800766e:	617b      	str	r3, [r7, #20]
  int index;

  index = variableGetIndex(id);
 8007670:	89fb      	ldrh	r3, [r7, #14]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 f90e 	bl	8007894 <variableGetIndex>
 8007678:	6138      	str	r0, [r7, #16]

  if (index < 0) {
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	da09      	bge.n	8007694 <paramWriteProcess+0x3c>
    p->data[2] = ENOENT;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	711a      	strb	r2, [r3, #4]
    p->size = 3;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2203      	movs	r2, #3
 800768a:	701a      	strb	r2, [r3, #0]

    crtpSendPacketBlock(p);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7f9 fff1 	bl	8001674 <crtpSendPacketBlock>
    return;
 8007692:	e01a      	b.n	80076ca <paramWriteProcess+0x72>
  }

  if (params[index].type & PARAM_RONLY)
 8007694:	4b0e      	ldr	r3, [pc, #56]	; (80076d0 <paramWriteProcess+0x78>)
 8007696:	6819      	ldr	r1, [r3, #0]
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	440b      	add	r3, r1
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10c      	bne.n	80076c8 <paramWriteProcess+0x70>
    return;

  paramSet(index, valptr);
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	6979      	ldr	r1, [r7, #20]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7ff fcfb 	bl	80070b0 <paramSet>

  crtpSendPacketBlock(p);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7f9 ffda 	bl	8001674 <crtpSendPacketBlock>

  paramNotifyChanged(index);
 80076c0:	6938      	ldr	r0, [r7, #16]
 80076c2:	f000 f807 	bl	80076d4 <paramNotifyChanged>
 80076c6:	e000      	b.n	80076ca <paramWriteProcess+0x72>
    return;
 80076c8:	bf00      	nop
}
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20006a54 	.word	0x20006a54

080076d4 <paramNotifyChanged>:

static void paramNotifyChanged(int index) {
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  if (params[index].callback) {
 80076dc:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <paramNotifyChanged+0x3c>)
 80076de:	6819      	ldr	r1, [r3, #0]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d009      	beq.n	8007706 <paramNotifyChanged+0x32>
    params[index].callback();
 80076f2:	4b07      	ldr	r3, [pc, #28]	; (8007710 <paramNotifyChanged+0x3c>)
 80076f4:	6819      	ldr	r1, [r3, #0]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	4798      	blx	r3
  }
}
 8007706:	bf00      	nop
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20006a54 	.word	0x20006a54

08007714 <paramWriteByNameProcess>:

static char paramWriteByNameProcess(char* group, char* name, int type, void *valptr) {
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	603b      	str	r3, [r7, #0]
  int index;
  char *pgroup = "";
 8007722:	4b40      	ldr	r3, [pc, #256]	; (8007824 <paramWriteByNameProcess+0x110>)
 8007724:	613b      	str	r3, [r7, #16]

  for (index = 0; index < paramsLen; index++) //Ptr points a group
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	e040      	b.n	80077ae <paramWriteByNameProcess+0x9a>
  {
    if (params[index].type & PARAM_GROUP)
 800772c:	4b3e      	ldr	r3, [pc, #248]	; (8007828 <paramWriteByNameProcess+0x114>)
 800772e:	6819      	ldr	r1, [r3, #0]
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	440b      	add	r3, r1
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	b25b      	sxtb	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	da1a      	bge.n	800777a <paramWriteByNameProcess+0x66>
    {
      if (params[index].type & PARAM_START)
 8007744:	4b38      	ldr	r3, [pc, #224]	; (8007828 <paramWriteByNameProcess+0x114>)
 8007746:	6819      	ldr	r1, [r3, #0]
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	440b      	add	r3, r1
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <paramWriteByNameProcess+0x60>
        pgroup = params[index].name;
 800775e:	4b32      	ldr	r3, [pc, #200]	; (8007828 <paramWriteByNameProcess+0x114>)
 8007760:	6819      	ldr	r1, [r3, #0]
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	613b      	str	r3, [r7, #16]
 8007772:	e019      	b.n	80077a8 <paramWriteByNameProcess+0x94>
      else
        pgroup = "";
 8007774:	4b2b      	ldr	r3, [pc, #172]	; (8007824 <paramWriteByNameProcess+0x110>)
 8007776:	613b      	str	r3, [r7, #16]
 8007778:	e016      	b.n	80077a8 <paramWriteByNameProcess+0x94>
    }
    else                          //Ptr points a variable
    {
      if (!strcmp(params[index].name, name) && !strcmp(pgroup, group))
 800777a:	4b2b      	ldr	r3, [pc, #172]	; (8007828 <paramWriteByNameProcess+0x114>)
 800777c:	6819      	ldr	r1, [r3, #0]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4613      	mov	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	68b9      	ldr	r1, [r7, #8]
 800778e:	4618      	mov	r0, r3
 8007790:	f7f8 fd1e 	bl	80001d0 <strcmp>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d106      	bne.n	80077a8 <paramWriteByNameProcess+0x94>
 800779a:	68f9      	ldr	r1, [r7, #12]
 800779c:	6938      	ldr	r0, [r7, #16]
 800779e:	f7f8 fd17 	bl	80001d0 <strcmp>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d008      	beq.n	80077ba <paramWriteByNameProcess+0xa6>
  for (index = 0; index < paramsLen; index++) //Ptr points a group
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	3301      	adds	r3, #1
 80077ac:	617b      	str	r3, [r7, #20]
 80077ae:	4b1f      	ldr	r3, [pc, #124]	; (800782c <paramWriteByNameProcess+0x118>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	dbb9      	blt.n	800772c <paramWriteByNameProcess+0x18>
 80077b8:	e000      	b.n	80077bc <paramWriteByNameProcess+0xa8>
        break;
 80077ba:	bf00      	nop
    }
  }

  if (index >= paramsLen) {
 80077bc:	4b1b      	ldr	r3, [pc, #108]	; (800782c <paramWriteByNameProcess+0x118>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	db01      	blt.n	80077ca <paramWriteByNameProcess+0xb6>
    return ENOENT;
 80077c6:	2302      	movs	r3, #2
 80077c8:	e028      	b.n	800781c <paramWriteByNameProcess+0x108>
  }

  if (type != (params[index].type & (~(PARAM_CORE | PARAM_RONLY | PARAM_EXTENDED)))) {
 80077ca:	4b17      	ldr	r3, [pc, #92]	; (8007828 <paramWriteByNameProcess+0x114>)
 80077cc:	6819      	ldr	r1, [r3, #0]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	440b      	add	r3, r1
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d001      	beq.n	80077ea <paramWriteByNameProcess+0xd6>
    return EINVAL;
 80077e6:	2316      	movs	r3, #22
 80077e8:	e018      	b.n	800781c <paramWriteByNameProcess+0x108>
  }

  if (params[index].type & PARAM_RONLY) {
 80077ea:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <paramWriteByNameProcess+0x114>)
 80077ec:	6819      	ldr	r1, [r3, #0]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	4613      	mov	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	440b      	add	r3, r1
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <paramWriteByNameProcess+0xf4>
    return EACCES;
 8007804:	230d      	movs	r3, #13
 8007806:	e009      	b.n	800781c <paramWriteByNameProcess+0x108>
  }

  paramSet(index, valptr);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	b29b      	uxth	r3, r3
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff fc4e 	bl	80070b0 <paramSet>

  paramNotifyChanged(index);
 8007814:	6978      	ldr	r0, [r7, #20]
 8007816:	f7ff ff5d 	bl	80076d4 <paramNotifyChanged>

  return 0;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	0801ab68 	.word	0x0801ab68
 8007828:	20006a54 	.word	0x20006a54
 800782c:	20006a58 	.word	0x20006a58

08007830 <paramReadProcess>:

void paramReadProcess(CRTPPacket *p)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint16_t id;
  memcpy(&id, &p->data[0], 2);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3302      	adds	r3, #2
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	b29b      	uxth	r3, r3
 8007840:	817b      	strh	r3, [r7, #10]
  int index = variableGetIndex(id);
 8007842:	897b      	ldrh	r3, [r7, #10]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 f825 	bl	8007894 <variableGetIndex>
 800784a:	60f8      	str	r0, [r7, #12]

  if (index<0) {
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	da09      	bge.n	8007866 <paramReadProcess+0x36>
    p->data[2] = ENOENT;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2202      	movs	r2, #2
 8007856:	711a      	strb	r2, [r3, #4]
    p->size = 3;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2203      	movs	r2, #3
 800785c:	701a      	strb	r2, [r3, #0]

    crtpSendPacketBlock(p);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7f9 ff08 	bl	8001674 <crtpSendPacketBlock>
 8007864:	e013      	b.n	800788e <paramReadProcess+0x5e>
    return;
  }
  p->data[2] = 0;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	711a      	strb	r2, [r3, #4]
  p->size = 3 + paramGet(index, &p->data[3]);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	b29a      	uxth	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3305      	adds	r3, #5
 8007874:	4619      	mov	r1, r3
 8007876:	4610      	mov	r0, r2
 8007878:	f7ff fc5c 	bl	8007134 <paramGet>
 800787c:	4603      	mov	r3, r0
 800787e:	b2db      	uxtb	r3, r3
 8007880:	3303      	adds	r3, #3
 8007882:	b2da      	uxtb	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	701a      	strb	r2, [r3, #0]

  crtpSendPacketBlock(p);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7f9 fef3 	bl	8001674 <crtpSendPacketBlock>
}
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <variableGetIndex>:

static int variableGetIndex(int id)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  int i;
  int n = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < paramsLen; i++)
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	e015      	b.n	80078d2 <variableGetIndex+0x3e>
  {
    if(!(params[i].type & PARAM_GROUP))
 80078a6:	4b16      	ldr	r3, [pc, #88]	; (8007900 <variableGetIndex+0x6c>)
 80078a8:	6819      	ldr	r1, [r3, #0]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	440b      	add	r3, r1
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	b25b      	sxtb	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	db06      	blt.n	80078cc <variableGetIndex+0x38>
    {
      if(n == id) {
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d00b      	beq.n	80078de <variableGetIndex+0x4a>
        break;
      }
      n++;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	3301      	adds	r3, #1
 80078ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < paramsLen; i++)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3301      	adds	r3, #1
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	4b0c      	ldr	r3, [pc, #48]	; (8007904 <variableGetIndex+0x70>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	429a      	cmp	r2, r3
 80078da:	dbe4      	blt.n	80078a6 <variableGetIndex+0x12>
 80078dc:	e000      	b.n	80078e0 <variableGetIndex+0x4c>
        break;
 80078de:	bf00      	nop
    }
  }

  if (i >= paramsLen)
 80078e0:	4b08      	ldr	r3, [pc, #32]	; (8007904 <variableGetIndex+0x70>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	db02      	blt.n	80078f0 <variableGetIndex+0x5c>
    return -1;
 80078ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078ee:	e000      	b.n	80078f2 <variableGetIndex+0x5e>

  return i;
 80078f0:	68fb      	ldr	r3, [r7, #12]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20006a54 	.word	0x20006a54
 8007904:	20006a58 	.word	0x20006a58

08007908 <paramGetVarIdFromComplete>:

/* Public API to access param TOC from within the copter */
static paramVarId_t invalidVarId = {0xffffu, 0xffffu};

paramVarId_t paramGetVarIdFromComplete(const char* completeName)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08e      	sub	sp, #56	; 0x38
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  char group[32] = { 0, };
 8007910:	2300      	movs	r3, #0
 8007912:	60bb      	str	r3, [r7, #8]
 8007914:	f107 030c 	add.w	r3, r7, #12
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	605a      	str	r2, [r3, #4]
 800791e:	609a      	str	r2, [r3, #8]
 8007920:	60da      	str	r2, [r3, #12]
 8007922:	611a      	str	r2, [r3, #16]
 8007924:	615a      	str	r2, [r3, #20]
 8007926:	619a      	str	r2, [r3, #24]

  char *dot = strchr(completeName, '.');
 8007928:	212e      	movs	r1, #46	; 0x2e
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f00f fff3 	bl	8017916 <strchr>
 8007930:	6378      	str	r0, [r7, #52]	; 0x34
  if (!dot) {
 8007932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <paramGetVarIdFromComplete+0x38>
    return invalidVarId;
 8007938:	4b17      	ldr	r3, [pc, #92]	; (8007998 <paramGetVarIdFromComplete+0x90>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	62bb      	str	r3, [r7, #40]	; 0x28
 800793e:	e015      	b.n	800796c <paramGetVarIdFromComplete+0x64>
  }

  size_t group_len = dot - completeName;
 8007940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	633b      	str	r3, [r7, #48]	; 0x30
  memcpy(group, completeName, group_len);
 8007948:	f107 0308 	add.w	r3, r7, #8
 800794c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	4618      	mov	r0, r3
 8007952:	f010 f8ce 	bl	8017af2 <memcpy>
  char *name = (char *) (dot + 1);
 8007956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007958:	3301      	adds	r3, #1
 800795a:	62fb      	str	r3, [r7, #44]	; 0x2c

  return paramGetVarId(group, name);
 800795c:	f107 0308 	add.w	r3, r7, #8
 8007960:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007962:	4618      	mov	r0, r3
 8007964:	f000 f81a 	bl	800799c <paramGetVarId>
 8007968:	4603      	mov	r3, r0
 800796a:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800796c:	2300      	movs	r3, #0
 800796e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007972:	f362 0307 	bfi	r3, r2, #0, #8
 8007976:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800797a:	f362 230f 	bfi	r3, r2, #8, #8
 800797e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8007982:	f362 4317 	bfi	r3, r2, #16, #8
 8007986:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800798a:	f362 631f 	bfi	r3, r2, #24, #8
 800798e:	4618      	mov	r0, r3
 8007990:	3738      	adds	r7, #56	; 0x38
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	2000032c 	.word	0x2000032c

0800799c <paramGetVarId>:

paramVarId_t paramGetVarId(const char* group, const char* name)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint16_t index;
  uint16_t id = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	82bb      	strh	r3, [r7, #20]
  paramVarId_t varId = invalidVarId;
 80079aa:	4b35      	ldr	r3, [pc, #212]	; (8007a80 <paramGetVarId+0xe4>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	60bb      	str	r3, [r7, #8]
  char * currgroup = "";
 80079b0:	4b34      	ldr	r3, [pc, #208]	; (8007a84 <paramGetVarId+0xe8>)
 80079b2:	613b      	str	r3, [r7, #16]

  for(index = 0; index < paramsLen; index++)
 80079b4:	2300      	movs	r3, #0
 80079b6:	82fb      	strh	r3, [r7, #22]
 80079b8:	e049      	b.n	8007a4e <paramGetVarId+0xb2>
  {
    if (params[index].type & PARAM_GROUP) {
 80079ba:	4b33      	ldr	r3, [pc, #204]	; (8007a88 <paramGetVarId+0xec>)
 80079bc:	6819      	ldr	r1, [r3, #0]
 80079be:	8afa      	ldrh	r2, [r7, #22]
 80079c0:	4613      	mov	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	440b      	add	r3, r1
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	b25b      	sxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	da17      	bge.n	8007a02 <paramGetVarId+0x66>
      if (params[index].type & PARAM_START) {
 80079d2:	4b2d      	ldr	r3, [pc, #180]	; (8007a88 <paramGetVarId+0xec>)
 80079d4:	6819      	ldr	r1, [r3, #0]
 80079d6:	8afa      	ldrh	r2, [r7, #22]
 80079d8:	4613      	mov	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	440b      	add	r3, r1
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00d      	beq.n	8007a08 <paramGetVarId+0x6c>
        currgroup = params[index].name;
 80079ec:	4b26      	ldr	r3, [pc, #152]	; (8007a88 <paramGetVarId+0xec>)
 80079ee:	6819      	ldr	r1, [r3, #0]
 80079f0:	8afa      	ldrh	r2, [r7, #22]
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	440b      	add	r3, r1
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	613b      	str	r3, [r7, #16]
 8007a00:	e002      	b.n	8007a08 <paramGetVarId+0x6c>
      }
    } else {
      id += 1;
 8007a02:	8abb      	ldrh	r3, [r7, #20]
 8007a04:	3301      	adds	r3, #1
 8007a06:	82bb      	strh	r3, [r7, #20]
    }

    if ((!strcmp(group, currgroup)) && (!strcmp(name, params[index].name))) {
 8007a08:	6939      	ldr	r1, [r7, #16]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7f8 fbe0 	bl	80001d0 <strcmp>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d118      	bne.n	8007a48 <paramGetVarId+0xac>
 8007a16:	4b1c      	ldr	r3, [pc, #112]	; (8007a88 <paramGetVarId+0xec>)
 8007a18:	6819      	ldr	r1, [r3, #0]
 8007a1a:	8afa      	ldrh	r2, [r7, #22]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6838      	ldr	r0, [r7, #0]
 8007a2c:	f7f8 fbd0 	bl	80001d0 <strcmp>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d108      	bne.n	8007a48 <paramGetVarId+0xac>
      varId.index = index;
 8007a36:	8afb      	ldrh	r3, [r7, #22]
 8007a38:	817b      	strh	r3, [r7, #10]
      varId.id = id - 1;
 8007a3a:	8abb      	ldrh	r3, [r7, #20]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	813b      	strh	r3, [r7, #8]
      return varId;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	e00a      	b.n	8007a5e <paramGetVarId+0xc2>
  for(index = 0; index < paramsLen; index++)
 8007a48:	8afb      	ldrh	r3, [r7, #22]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	82fb      	strh	r3, [r7, #22]
 8007a4e:	8afa      	ldrh	r2, [r7, #22]
 8007a50:	4b0e      	ldr	r3, [pc, #56]	; (8007a8c <paramGetVarId+0xf0>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	dbb0      	blt.n	80079ba <paramGetVarId+0x1e>
    }
  }

  return invalidVarId;
 8007a58:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <paramGetVarId+0xe4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60fb      	str	r3, [r7, #12]
}
 8007a5e:	2300      	movs	r3, #0
 8007a60:	7b3a      	ldrb	r2, [r7, #12]
 8007a62:	f362 0307 	bfi	r3, r2, #0, #8
 8007a66:	7b7a      	ldrb	r2, [r7, #13]
 8007a68:	f362 230f 	bfi	r3, r2, #8, #8
 8007a6c:	7bba      	ldrb	r2, [r7, #14]
 8007a6e:	f362 4317 	bfi	r3, r2, #16, #8
 8007a72:	7bfa      	ldrb	r2, [r7, #15]
 8007a74:	f362 631f 	bfi	r3, r2, #24, #8
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	2000032c 	.word	0x2000032c
 8007a84:	0801ab68 	.word	0x0801ab68
 8007a88:	20006a54 	.word	0x20006a54
 8007a8c:	20006a58 	.word	0x20006a58

08007a90 <paramGetGroupAndName>:
{
  return params[varid.index].type;
}

void paramGetGroupAndName(paramVarId_t varid, char** group, char** name)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
  char * currgroup = "";
 8007a9c:	4b28      	ldr	r3, [pc, #160]	; (8007b40 <paramGetGroupAndName+0xb0>)
 8007a9e:	617b      	str	r3, [r7, #20]
  *group = 0;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
  *name = 0;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]

  for(int index = 0; index < paramsLen; index++) {
 8007aac:	2300      	movs	r3, #0
 8007aae:	613b      	str	r3, [r7, #16]
 8007ab0:	e039      	b.n	8007b26 <paramGetGroupAndName+0x96>
    if (params[index].type & PARAM_GROUP) {
 8007ab2:	4b24      	ldr	r3, [pc, #144]	; (8007b44 <paramGetGroupAndName+0xb4>)
 8007ab4:	6819      	ldr	r1, [r3, #0]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	440b      	add	r3, r1
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	b25b      	sxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	da16      	bge.n	8007af8 <paramGetGroupAndName+0x68>
      if (params[index].type & PARAM_START) {
 8007aca:	4b1e      	ldr	r3, [pc, #120]	; (8007b44 <paramGetGroupAndName+0xb4>)
 8007acc:	6819      	ldr	r1, [r3, #0]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	440b      	add	r3, r1
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d009      	beq.n	8007af8 <paramGetGroupAndName+0x68>
        currgroup = params[index].name;
 8007ae4:	4b17      	ldr	r3, [pc, #92]	; (8007b44 <paramGetGroupAndName+0xb4>)
 8007ae6:	6819      	ldr	r1, [r3, #0]
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	440b      	add	r3, r1
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	617b      	str	r3, [r7, #20]
      }
    }

    if (index == varid.index) {
 8007af8:	89fb      	ldrh	r3, [r7, #14]
 8007afa:	461a      	mov	r2, r3
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d10e      	bne.n	8007b20 <paramGetGroupAndName+0x90>
      *group = currgroup;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	601a      	str	r2, [r3, #0]
      *name = params[index].name;
 8007b08:	4b0e      	ldr	r3, [pc, #56]	; (8007b44 <paramGetGroupAndName+0xb4>)
 8007b0a:	6819      	ldr	r1, [r3, #0]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	440b      	add	r3, r1
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	601a      	str	r2, [r3, #0]
      break;
 8007b1e:	e008      	b.n	8007b32 <paramGetGroupAndName+0xa2>
  for(int index = 0; index < paramsLen; index++) {
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	3301      	adds	r3, #1
 8007b24:	613b      	str	r3, [r7, #16]
 8007b26:	4b08      	ldr	r3, [pc, #32]	; (8007b48 <paramGetGroupAndName+0xb8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	dbc0      	blt.n	8007ab2 <paramGetGroupAndName+0x22>
    }
  }
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	0801ab68 	.word	0x0801ab68
 8007b44:	20006a54 	.word	0x20006a54
 8007b48:	20006a58 	.word	0x20006a58

08007b4c <paramSetByName>:

  paramNotifyChanged(varid.index);
}

void paramSetByName(CRTPPacket *p)
{
 8007b4c:	b590      	push	{r4, r7, lr}
 8007b4e:	b08b      	sub	sp, #44	; 0x2c
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  int i, nzero = 0;
 8007b54:	2300      	movs	r3, #0
 8007b56:	623b      	str	r3, [r7, #32]
  void * valPtr;
  int error;

  // If the packet contains at least 2 zeros in the first 28 bytes
  // The packet decoding algorithm will not crash
  for (i = 0; i < CRTP_MAX_DATA_SIZE; i++) {
 8007b58:	2300      	movs	r3, #0
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b5c:	e00c      	b.n	8007b78 <paramSetByName+0x2c>
    if (p->data[i] == '\0') nzero++;
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	4413      	add	r3, r2
 8007b64:	3302      	adds	r3, #2
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <paramSetByName+0x26>
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	623b      	str	r3, [r7, #32]
  for (i = 0; i < CRTP_MAX_DATA_SIZE; i++) {
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	3301      	adds	r3, #1
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	2b1d      	cmp	r3, #29
 8007b7c:	ddef      	ble.n	8007b5e <paramSetByName+0x12>
  }

  if (nzero < 2) return;
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	dd53      	ble.n	8007c2c <paramSetByName+0xe0>

  group = (char*)&p->data[1];
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3303      	adds	r3, #3
 8007b88:	61fb      	str	r3, [r7, #28]
  name = (char*)&p->data[1 + strlen(group) + 1];
 8007b8a:	69f8      	ldr	r0, [r7, #28]
 8007b8c:	f7f8 fb80 	bl	8000290 <strlen>
 8007b90:	4603      	mov	r3, r0
 8007b92:	3302      	adds	r3, #2
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	4413      	add	r3, r2
 8007b98:	3302      	adds	r3, #2
 8007b9a:	61bb      	str	r3, [r7, #24]
  type = p->data[1 + strlen(group) + 1 + strlen(name) + 1];
 8007b9c:	69f8      	ldr	r0, [r7, #28]
 8007b9e:	f7f8 fb77 	bl	8000290 <strlen>
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	69b8      	ldr	r0, [r7, #24]
 8007ba6:	f7f8 fb73 	bl	8000290 <strlen>
 8007baa:	4603      	mov	r3, r0
 8007bac:	4423      	add	r3, r4
 8007bae:	3303      	adds	r3, #3
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	789b      	ldrb	r3, [r3, #2]
 8007bb6:	75fb      	strb	r3, [r7, #23]
  valPtr = &p->data[1 + strlen(group) + 1 + strlen(name) + 2];
 8007bb8:	69f8      	ldr	r0, [r7, #28]
 8007bba:	f7f8 fb69 	bl	8000290 <strlen>
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	69b8      	ldr	r0, [r7, #24]
 8007bc2:	f7f8 fb65 	bl	8000290 <strlen>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	4423      	add	r3, r4
 8007bca:	3304      	adds	r3, #4
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	4413      	add	r3, r2
 8007bd0:	3302      	adds	r3, #2
 8007bd2:	613b      	str	r3, [r7, #16]

  error = paramWriteByNameProcess(group, name, type, valPtr);  /* calls callback */
 8007bd4:	7dfa      	ldrb	r2, [r7, #23]
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	69b9      	ldr	r1, [r7, #24]
 8007bda:	69f8      	ldr	r0, [r7, #28]
 8007bdc:	f7ff fd9a 	bl	8007714 <paramWriteByNameProcess>
 8007be0:	4603      	mov	r3, r0
 8007be2:	60fb      	str	r3, [r7, #12]

  p->data[1 + strlen(group) + 1 + strlen(name) + 1] = error;
 8007be4:	69f8      	ldr	r0, [r7, #28]
 8007be6:	f7f8 fb53 	bl	8000290 <strlen>
 8007bea:	4604      	mov	r4, r0
 8007bec:	69b8      	ldr	r0, [r7, #24]
 8007bee:	f7f8 fb4f 	bl	8000290 <strlen>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	4423      	add	r3, r4
 8007bf6:	3303      	adds	r3, #3
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	b2d1      	uxtb	r1, r2
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	4413      	add	r3, r2
 8007c00:	460a      	mov	r2, r1
 8007c02:	709a      	strb	r2, [r3, #2]
  p->size = 1 + strlen(group) + 1 + strlen(name) + 1 + 1;
 8007c04:	69f8      	ldr	r0, [r7, #28]
 8007c06:	f7f8 fb43 	bl	8000290 <strlen>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	b2dc      	uxtb	r4, r3
 8007c0e:	69b8      	ldr	r0, [r7, #24]
 8007c10:	f7f8 fb3e 	bl	8000290 <strlen>
 8007c14:	4603      	mov	r3, r0
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	4423      	add	r3, r4
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7f9 fd25 	bl	8001674 <crtpSendPacketBlock>
 8007c2a:	e000      	b.n	8007c2e <paramSetByName+0xe2>
  if (nzero < 2) return;
 8007c2c:	bf00      	nop

}
 8007c2e:	372c      	adds	r7, #44	; 0x2c
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd90      	pop	{r4, r7, pc}

08007c34 <paramGetExtendedType>:

#define KEY_LEN 30  // FIXME

void paramGetExtendedType(CRTPPacket *p)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;

  memcpy(&id, &p->data[1], 2);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3303      	adds	r3, #3
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	817b      	strh	r3, [r7, #10]
  index = variableGetIndex(id);
 8007c46:	897b      	ldrh	r3, [r7, #10]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7ff fe23 	bl	8007894 <variableGetIndex>
 8007c4e:	60f8      	str	r0, [r7, #12]

  if (index < 0 || !(params[index].type & PARAM_EXTENDED)) {
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	db0c      	blt.n	8007c70 <paramGetExtendedType+0x3c>
 8007c56:	4b15      	ldr	r3, [pc, #84]	; (8007cac <paramGetExtendedType+0x78>)
 8007c58:	6819      	ldr	r1, [r3, #0]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	440b      	add	r3, r1
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d109      	bne.n	8007c84 <paramGetExtendedType+0x50>
    p->data[3] = ENOENT;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2204      	movs	r2, #4
 8007c7a:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7f9 fcf9 	bl	8001674 <crtpSendPacketBlock>
 8007c82:	e010      	b.n	8007ca6 <paramGetExtendedType+0x72>
    return;
  }

  p->data[3] = params[index].extended_type;
 8007c84:	4b09      	ldr	r3, [pc, #36]	; (8007cac <paramGetExtendedType+0x78>)
 8007c86:	6819      	ldr	r1, [r3, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	440b      	add	r3, r1
 8007c94:	785a      	ldrb	r2, [r3, #1]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2204      	movs	r2, #4
 8007c9e:	701a      	strb	r2, [r3, #0]

  crtpSendPacketBlock(p);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7f9 fce7 	bl	8001674 <crtpSendPacketBlock>
}
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	20006a54 	.word	0x20006a54

08007cb0 <generateStorageKey>:

static void generateStorageKey(const uint16_t index, char key[KEY_LEN])
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	6039      	str	r1, [r7, #0]
 8007cba:	80fb      	strh	r3, [r7, #6]
  char *group;
  char *name;
  paramVarId_t paramId;

  paramId.index = (uint16_t)index;
 8007cbc:	88fb      	ldrh	r3, [r7, #6]
 8007cbe:	81fb      	strh	r3, [r7, #14]
  paramGetGroupAndName(paramId, &group, &name);
 8007cc0:	f107 0210 	add.w	r2, r7, #16
 8007cc4:	f107 0314 	add.w	r3, r7, #20
 8007cc8:	4619      	mov	r1, r3
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7ff fee0 	bl	8007a90 <paramGetGroupAndName>

  // Assemble key string, e.g. "prm/pid_rate.kp"
  strcpy(key, PERSISTENT_PREFIX_STRING);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	4a0f      	ldr	r2, [pc, #60]	; (8007d10 <generateStorageKey+0x60>)
 8007cd4:	6810      	ldr	r0, [r2, #0]
 8007cd6:	6018      	str	r0, [r3, #0]
 8007cd8:	7912      	ldrb	r2, [r2, #4]
 8007cda:	711a      	strb	r2, [r3, #4]
  strcat(key, group);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6838      	ldr	r0, [r7, #0]
 8007ce2:	f00f fe09 	bl	80178f8 <strcat>
  strcat(key, ".");
 8007ce6:	6838      	ldr	r0, [r7, #0]
 8007ce8:	f7f8 fad2 	bl	8000290 <strlen>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	4907      	ldr	r1, [pc, #28]	; (8007d14 <generateStorageKey+0x64>)
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	8013      	strh	r3, [r2, #0]
  strcat(key, name);
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	4619      	mov	r1, r3
 8007d02:	6838      	ldr	r0, [r7, #0]
 8007d04:	f00f fdf8 	bl	80178f8 <strcat>
}
 8007d08:	bf00      	nop
 8007d0a:	3718      	adds	r7, #24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	0801acd8 	.word	0x0801acd8
 8007d14:	0801ace0 	.word	0x0801ace0

08007d18 <paramPersistentStore>:

void paramPersistentStore(CRTPPacket *p)
{
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b08d      	sub	sp, #52	; 0x34
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;
  bool result = true;
 8007d20:	2301      	movs	r3, #1
 8007d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memcpy(&id, &p->data[1], 2);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	3303      	adds	r3, #3
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	84fb      	strh	r3, [r7, #38]	; 0x26
  index = variableGetIndex(id);
 8007d30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff fdae 	bl	8007894 <variableGetIndex>
 8007d38:	62b8      	str	r0, [r7, #40]	; 0x28

  if (index < 0) {
 8007d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	da09      	bge.n	8007d54 <paramPersistentStore+0x3c>
    p->data[3] = ENOENT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2204      	movs	r2, #4
 8007d4a:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7f9 fc91 	bl	8001674 <crtpSendPacketBlock>
 8007d52:	e03b      	b.n	8007dcc <paramPersistentStore+0xb4>
    return;
  }

  char key[KEY_LEN] = {0};
 8007d54:	2300      	movs	r3, #0
 8007d56:	60bb      	str	r3, [r7, #8]
 8007d58:	f107 030c 	add.w	r3, r7, #12
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	605a      	str	r2, [r3, #4]
 8007d62:	609a      	str	r2, [r3, #8]
 8007d64:	60da      	str	r2, [r3, #12]
 8007d66:	611a      	str	r2, [r3, #16]
 8007d68:	615a      	str	r2, [r3, #20]
 8007d6a:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	f107 0208 	add.w	r2, r7, #8
 8007d74:	4611      	mov	r1, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff ff9a 	bl	8007cb0 <generateStorageKey>

  result = storageStore(key, params[index].address, paramGetLen(index));
 8007d7c:	4b15      	ldr	r3, [pc, #84]	; (8007dd4 <paramPersistentStore+0xbc>)
 8007d7e:	6819      	ldr	r1, [r3, #0]
 8007d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d82:	4613      	mov	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	689c      	ldr	r4, [r3, #8]
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff fa10 	bl	80071b8 <paramGetLen>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f107 0308 	add.w	r3, r7, #8
 8007da0:	4621      	mov	r1, r4
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fb fea6 	bl	8003af4 <storageStore>
 8007da8:	4603      	mov	r3, r0
 8007daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  p->data[3] = result ? 0: ENOENT;
 8007dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <paramPersistentStore+0xa2>
 8007db6:	2200      	movs	r2, #0
 8007db8:	e000      	b.n	8007dbc <paramPersistentStore+0xa4>
 8007dba:	2202      	movs	r2, #2
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2204      	movs	r2, #4
 8007dc4:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7f9 fc54 	bl	8001674 <crtpSendPacketBlock>
}
 8007dcc:	3734      	adds	r7, #52	; 0x34
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd90      	pop	{r4, r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20006a54 	.word	0x20006a54

08007dd8 <paramGetDefaultValue>:

void paramGetDefaultValue(CRTPPacket *p)
{
 8007dd8:	b590      	push	{r4, r7, lr}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint16_t id;

  memcpy(&id, &p->data[1], sizeof(id));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3303      	adds	r3, #3
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	813b      	strh	r3, [r7, #8]
  int index = variableGetIndex(id);
 8007dea:	893b      	ldrh	r3, [r7, #8]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7ff fd51 	bl	8007894 <variableGetIndex>
 8007df2:	60f8      	str	r0, [r7, #12]

  const bool doesParamExist = (index >= 0);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	43db      	mvns	r3, r3
 8007df8:	0fdb      	lsrs	r3, r3, #31
 8007dfa:	72fb      	strb	r3, [r7, #11]
  // Read-only parameters have no default value
  if (!doesParamExist || params[index].type & PARAM_RONLY) {
 8007dfc:	7afb      	ldrb	r3, [r7, #11]
 8007dfe:	f083 0301 	eor.w	r3, r3, #1
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10c      	bne.n	8007e22 <paramGetDefaultValue+0x4a>
 8007e08:	4b28      	ldr	r3, [pc, #160]	; (8007eac <paramGetDefaultValue+0xd4>)
 8007e0a:	6819      	ldr	r1, [r3, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	440b      	add	r3, r1
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <paramGetDefaultValue+0x5e>
    p->data[3] = ENOENT;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2202      	movs	r2, #2
 8007e26:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2204      	movs	r2, #4
 8007e2c:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7f9 fc20 	bl	8001674 <crtpSendPacketBlock>
 8007e34:	e037      	b.n	8007ea6 <paramGetDefaultValue+0xce>
    return;
  }

  // Add default value
  uint8_t paramLen = paramGetLen(index);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7ff f9bc 	bl	80071b8 <paramGetLen>
 8007e40:	4603      	mov	r3, r0
 8007e42:	72bb      	strb	r3, [r7, #10]
  if (params[index].getter) {
 8007e44:	4b19      	ldr	r3, [pc, #100]	; (8007eac <paramGetDefaultValue+0xd4>)
 8007e46:	6819      	ldr	r1, [r3, #0]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	440b      	add	r3, r1
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d012      	beq.n	8007e80 <paramGetDefaultValue+0xa8>
    memcpy(&p->data[3], params[index].getter(), paramLen);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	1d5c      	adds	r4, r3, #5
 8007e5e:	4b13      	ldr	r3, [pc, #76]	; (8007eac <paramGetDefaultValue+0xd4>)
 8007e60:	6819      	ldr	r1, [r3, #0]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	4798      	blx	r3
 8007e72:	4601      	mov	r1, r0
 8007e74:	7abb      	ldrb	r3, [r7, #10]
 8007e76:	461a      	mov	r2, r3
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f00f fe3a 	bl	8017af2 <memcpy>
 8007e7e:	e00a      	b.n	8007e96 <paramGetDefaultValue+0xbe>
  } else {
    memcpy(&p->data[3], paramGetDefault(index), paramLen);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	1d5c      	adds	r4, r3, #5
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f7ff f8d1 	bl	800702c <paramGetDefault>
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	7abb      	ldrb	r3, [r7, #10]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	4620      	mov	r0, r4
 8007e92:	f00f fe2e 	bl	8017af2 <memcpy>
  }
  p->size = 3 + paramLen;
 8007e96:	7abb      	ldrb	r3, [r7, #10]
 8007e98:	3303      	adds	r3, #3
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7f9 fbe7 	bl	8001674 <crtpSendPacketBlock>
}
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd90      	pop	{r4, r7, pc}
 8007eac:	20006a54 	.word	0x20006a54

08007eb0 <paramPersistentGetState>:

void paramPersistentGetState(CRTPPacket *p)
{
 8007eb0:	b590      	push	{r4, r7, lr}
 8007eb2:	b08f      	sub	sp, #60	; 0x3c
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint16_t id;

  memcpy(&id, &p->data[1], 2);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3303      	adds	r3, #3
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int index = variableGetIndex(id);
 8007ec2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7ff fce5 	bl	8007894 <variableGetIndex>
 8007eca:	6378      	str	r0, [r7, #52]	; 0x34

  const bool doesParamExist = (index >= 0);
 8007ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	0fdb      	lsrs	r3, r3, #31
 8007ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (! doesParamExist) {
 8007ed6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007eda:	f083 0301 	eor.w	r3, r3, #1
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d009      	beq.n	8007ef8 <paramPersistentGetState+0x48>
    p->data[3] = ENOENT;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2204      	movs	r2, #4
 8007eee:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7f9 fbbf 	bl	8001674 <crtpSendPacketBlock>
 8007ef6:	e08c      	b.n	8008012 <paramPersistentGetState+0x162>
    return;
  }

  char key[KEY_LEN] = {0};
 8007ef8:	2300      	movs	r3, #0
 8007efa:	613b      	str	r3, [r7, #16]
 8007efc:	f107 0314 	add.w	r3, r7, #20
 8007f00:	2200      	movs	r2, #0
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	605a      	str	r2, [r3, #4]
 8007f06:	609a      	str	r2, [r3, #8]
 8007f08:	60da      	str	r2, [r3, #12]
 8007f0a:	611a      	str	r2, [r3, #16]
 8007f0c:	615a      	str	r2, [r3, #20]
 8007f0e:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 8007f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	f107 0210 	add.w	r2, r7, #16
 8007f18:	4611      	mov	r1, r2
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7ff fec8 	bl	8007cb0 <generateStorageKey>

  uint8_t paramLen = paramGetLen(index);
 8007f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff f947 	bl	80071b8 <paramGetLen>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  // First part of data use 4 bytes
  p->size = 4;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2204      	movs	r2, #4
 8007f34:	701a      	strb	r2, [r3, #0]

  // Add default value
  if (params[index].getter) {
 8007f36:	4b38      	ldr	r3, [pc, #224]	; (8008018 <paramPersistentGetState+0x168>)
 8007f38:	6819      	ldr	r1, [r3, #0]
 8007f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	440b      	add	r3, r1
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d017      	beq.n	8007f7c <paramPersistentGetState+0xcc>
    memcpy(&p->data[p->size], params[index].getter(), paramLen);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	461a      	mov	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4413      	add	r3, r2
 8007f56:	1c9c      	adds	r4, r3, #2
 8007f58:	4b2f      	ldr	r3, [pc, #188]	; (8008018 <paramPersistentGetState+0x168>)
 8007f5a:	6819      	ldr	r1, [r3, #0]
 8007f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f5e:	4613      	mov	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	440b      	add	r3, r1
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	4798      	blx	r3
 8007f6c:	4601      	mov	r1, r0
 8007f6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007f72:	461a      	mov	r2, r3
 8007f74:	4620      	mov	r0, r4
 8007f76:	f00f fdbc 	bl	8017af2 <memcpy>
 8007f7a:	e00f      	b.n	8007f9c <paramPersistentGetState+0xec>
  } else {
    memcpy(&p->data[p->size], paramGetDefault(index), paramLen);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4413      	add	r3, r2
 8007f86:	1c9c      	adds	r4, r3, #2
 8007f88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007f8a:	f7ff f84f 	bl	800702c <paramGetDefault>
 8007f8e:	4601      	mov	r1, r0
 8007f90:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007f94:	461a      	mov	r2, r3
 8007f96:	4620      	mov	r0, r4
 8007f98:	f00f fdab 	bl	8017af2 <memcpy>
  }
  p->size += paramLen;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	781a      	ldrb	r2, [r3, #0]
 8007fa0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007fa4:	4413      	add	r3, r2
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	701a      	strb	r2, [r3, #0]

  // Add stored value if avialable
  uint8_t value[8];
  const bool isValueStored = (storageFetch(key, &value, paramLen) > 0);
 8007fac:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8007fb0:	f107 0108 	add.w	r1, r7, #8
 8007fb4:	f107 0310 	add.w	r3, r7, #16
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fb fdeb 	bl	8003b94 <storageFetch>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	bf14      	ite	ne
 8007fc4:	2301      	movne	r3, #1
 8007fc6:	2300      	moveq	r3, #0
 8007fc8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  if (isValueStored) {
 8007fcc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d018      	beq.n	8008006 <paramPersistentGetState+0x156>
    p->data[3] = PARAM_PERSISTENT_STORED;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	715a      	strb	r2, [r3, #5]
    memcpy(&p->data[p->size], &value, paramLen);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	3302      	adds	r3, #2
 8007fe6:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8007fea:	f107 0108 	add.w	r1, r7, #8
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f00f fd7f 	bl	8017af2 <memcpy>
    p->size += paramLen;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	781a      	ldrb	r2, [r3, #0]
 8007ff8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007ffc:	4413      	add	r3, r2
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	701a      	strb	r2, [r3, #0]
 8008004:	e002      	b.n	800800c <paramPersistentGetState+0x15c>
  } else {
    p->data[3] = PARAM_PERSISTENT_NOT_STORED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	715a      	strb	r2, [r3, #5]
  }

  crtpSendPacketBlock(p);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7f9 fb31 	bl	8001674 <crtpSendPacketBlock>
}
 8008012:	373c      	adds	r7, #60	; 0x3c
 8008014:	46bd      	mov	sp, r7
 8008016:	bd90      	pop	{r4, r7, pc}
 8008018:	20006a54 	.word	0x20006a54

0800801c <paramPersistentClear>:

void paramPersistentClear(CRTPPacket *p)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08c      	sub	sp, #48	; 0x30
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;
  bool result = true;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memcpy(&id, &p->data[1], 2);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3303      	adds	r3, #3
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	84fb      	strh	r3, [r7, #38]	; 0x26
  index = variableGetIndex(id);
 8008034:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff fc2c 	bl	8007894 <variableGetIndex>
 800803c:	62b8      	str	r0, [r7, #40]	; 0x28

  if (index < 0) {
 800803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008040:	2b00      	cmp	r3, #0
 8008042:	da09      	bge.n	8008058 <paramPersistentClear+0x3c>
    p->data[3] = ENOENT;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2204      	movs	r2, #4
 800804e:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7f9 fb0f 	bl	8001674 <crtpSendPacketBlock>
 8008056:	e02a      	b.n	80080ae <paramPersistentClear+0x92>
    return;
  }

  // Assemble key string, e.g. "prm/pid_rate.kp"
  char key[KEY_LEN] = {0};
 8008058:	2300      	movs	r3, #0
 800805a:	60bb      	str	r3, [r7, #8]
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	605a      	str	r2, [r3, #4]
 8008066:	609a      	str	r2, [r3, #8]
 8008068:	60da      	str	r2, [r3, #12]
 800806a:	611a      	str	r2, [r3, #16]
 800806c:	615a      	str	r2, [r3, #20]
 800806e:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	b29b      	uxth	r3, r3
 8008074:	f107 0208 	add.w	r2, r7, #8
 8008078:	4611      	mov	r1, r2
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff fe18 	bl	8007cb0 <generateStorageKey>

  result = storageDelete(key);
 8008080:	f107 0308 	add.w	r3, r7, #8
 8008084:	4618      	mov	r0, r3
 8008086:	f7fb fdad 	bl	8003be4 <storageDelete>
 800808a:	4603      	mov	r3, r0
 800808c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  p->data[3] = result ? 0: ENOENT;
 8008090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <paramPersistentClear+0x80>
 8008098:	2200      	movs	r2, #0
 800809a:	e000      	b.n	800809e <paramPersistentClear+0x82>
 800809c:	2202      	movs	r2, #2
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2204      	movs	r2, #4
 80080a6:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7f9 fae3 	bl	8001674 <crtpSendPacketBlock>
}
 80080ae:	3730      	adds	r7, #48	; 0x30
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <persistentParamFromStorage>:

static bool persistentParamFromStorage(const char *key, void *buffer, size_t length)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
  //
  // The key is of format "prm/group.name", we need group and name.
  //
  char *completeName = (char *) key + strlen(PERSISTENT_PREFIX_STRING);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3304      	adds	r3, #4
 80080c4:	617b      	str	r3, [r7, #20]
  paramVarId_t varId = paramGetVarIdFromComplete(completeName);
 80080c6:	6978      	ldr	r0, [r7, #20]
 80080c8:	f7ff fc1e 	bl	8007908 <paramGetVarIdFromComplete>
 80080cc:	4603      	mov	r3, r0
 80080ce:	613b      	str	r3, [r7, #16]

  if (PARAM_VARID_IS_VALID(varId)) {
 80080d0:	8a3b      	ldrh	r3, [r7, #16]
 80080d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d004      	beq.n	80080e4 <persistentParamFromStorage+0x30>
    paramSet(varId.index, buffer);
 80080da:	8a7b      	ldrh	r3, [r7, #18]
 80080dc:	68b9      	ldr	r1, [r7, #8]
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe ffe6 	bl	80070b0 <paramSet>
  }

  return true;
 80080e4:	2301      	movs	r3, #1
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3718      	adds	r7, #24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <paramLogicStorageInit>:

void paramLogicStorageInit()
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  storageForeach(PERSISTENT_PREFIX_STRING, persistentParamFromStorage);
 80080f4:	4902      	ldr	r1, [pc, #8]	; (8008100 <paramLogicStorageInit+0x10>)
 80080f6:	4803      	ldr	r0, [pc, #12]	; (8008104 <paramLogicStorageInit+0x14>)
 80080f8:	f7fb fd24 	bl	8003b44 <storageForeach>
}
 80080fc:	bf00      	nop
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	080080b5 	.word	0x080080b5
 8008104:	0801acd8 	.word	0x0801acd8

08008108 <paramInit>:

STATIC_MEM_TASK_ALLOC(paramTask, PARAM_TASK_STACKSIZE);


void paramInit(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af04      	add	r7, sp, #16
  if(isInit) {
 800810e:	4b0e      	ldr	r3, [pc, #56]	; (8008148 <paramInit+0x40>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d115      	bne.n	8008142 <paramInit+0x3a>
    return;
  }

  paramLogicInit();
 8008116:	f7ff f885 	bl	8007224 <paramLogicInit>
  paramLogicStorageInit();
 800811a:	f7ff ffe9 	bl	80080f0 <paramLogicStorageInit>

  //Start the param task
  STATIC_MEM_TASK_CREATE(paramTask, paramTask, PARAM_TASK_NAME, NULL, PARAM_TASK_PRI);
 800811e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008122:	461a      	mov	r2, r3
 8008124:	4b09      	ldr	r3, [pc, #36]	; (800814c <paramInit+0x44>)
 8008126:	9302      	str	r3, [sp, #8]
 8008128:	4b09      	ldr	r3, [pc, #36]	; (8008150 <paramInit+0x48>)
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	2301      	movs	r3, #1
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	2300      	movs	r3, #0
 8008132:	4908      	ldr	r1, [pc, #32]	; (8008154 <paramInit+0x4c>)
 8008134:	4808      	ldr	r0, [pc, #32]	; (8008158 <paramInit+0x50>)
 8008136:	f00b fcef 	bl	8013b18 <xTaskCreateStatic>

  isInit = true;
 800813a:	4b03      	ldr	r3, [pc, #12]	; (8008148 <paramInit+0x40>)
 800813c:	2201      	movs	r2, #1
 800813e:	701a      	strb	r2, [r3, #0]
 8008140:	e000      	b.n	8008144 <paramInit+0x3c>
    return;
 8008142:	bf00      	nop
}
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	20006a62 	.word	0x20006a62
 800814c:	20003e78 	.word	0x20003e78
 8008150:	20006a84 	.word	0x20006a84
 8008154:	0801ace4 	.word	0x0801ace4
 8008158:	0800815d 	.word	0x0800815d

0800815c <paramTask>:
{
  return isInit;
}

void paramTask(void * prm)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
	crtpInitTaskQueue(CRTP_PORT_PARAM);
 8008164:	2002      	movs	r0, #2
 8008166:	f7f9 f955 	bl	8001414 <crtpInitTaskQueue>

	while(1) {
		crtpReceivePacketBlock(CRTP_PORT_PARAM, &p);
 800816a:	492f      	ldr	r1, [pc, #188]	; (8008228 <paramTask+0xcc>)
 800816c:	2002      	movs	r0, #2
 800816e:	f7f9 f981 	bl	8001474 <crtpReceivePacketBlock>

		if (p.channel==TOC_CH)
 8008172:	4b2d      	ldr	r3, [pc, #180]	; (8008228 <paramTask+0xcc>)
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d106      	bne.n	800818e <paramTask+0x32>
		  paramTOCProcess(&p, p.data[0]);
 8008180:	4b29      	ldr	r3, [pc, #164]	; (8008228 <paramTask+0xcc>)
 8008182:	789b      	ldrb	r3, [r3, #2]
 8008184:	4619      	mov	r1, r3
 8008186:	4828      	ldr	r0, [pc, #160]	; (8008228 <paramTask+0xcc>)
 8008188:	f7ff f932 	bl	80073f0 <paramTOCProcess>
 800818c:	e7ed      	b.n	800816a <paramTask+0xe>
	  else if (p.channel==READ_CH)
 800818e:	4b26      	ldr	r3, [pc, #152]	; (8008228 <paramTask+0xcc>)
 8008190:	785b      	ldrb	r3, [r3, #1]
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b01      	cmp	r3, #1
 800819a:	d103      	bne.n	80081a4 <paramTask+0x48>
		  paramReadProcess(&p);
 800819c:	4822      	ldr	r0, [pc, #136]	; (8008228 <paramTask+0xcc>)
 800819e:	f7ff fb47 	bl	8007830 <paramReadProcess>
 80081a2:	e7e2      	b.n	800816a <paramTask+0xe>
		else if (p.channel==WRITE_CH)
 80081a4:	4b20      	ldr	r3, [pc, #128]	; (8008228 <paramTask+0xcc>)
 80081a6:	785b      	ldrb	r3, [r3, #1]
 80081a8:	f003 0303 	and.w	r3, r3, #3
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d103      	bne.n	80081ba <paramTask+0x5e>
		  paramWriteProcess(&p);
 80081b2:	481d      	ldr	r0, [pc, #116]	; (8008228 <paramTask+0xcc>)
 80081b4:	f7ff fa50 	bl	8007658 <paramWriteProcess>
 80081b8:	e7d7      	b.n	800816a <paramTask+0xe>
    else if (p.channel==MISC_CH) {
 80081ba:	4b1b      	ldr	r3, [pc, #108]	; (8008228 <paramTask+0xcc>)
 80081bc:	785b      	ldrb	r3, [r3, #1]
 80081be:	f003 0303 	and.w	r3, r3, #3
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d1d0      	bne.n	800816a <paramTask+0xe>
      switch (p.data[0]) {
 80081c8:	4b17      	ldr	r3, [pc, #92]	; (8008228 <paramTask+0xcc>)
 80081ca:	789b      	ldrb	r3, [r3, #2]
 80081cc:	2b06      	cmp	r3, #6
 80081ce:	d829      	bhi.n	8008224 <paramTask+0xc8>
 80081d0:	a201      	add	r2, pc, #4	; (adr r2, 80081d8 <paramTask+0x7c>)
 80081d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d6:	bf00      	nop
 80081d8:	080081f5 	.word	0x080081f5
 80081dc:	08008225 	.word	0x08008225
 80081e0:	080081fd 	.word	0x080081fd
 80081e4:	08008205 	.word	0x08008205
 80081e8:	0800820d 	.word	0x0800820d
 80081ec:	08008215 	.word	0x08008215
 80081f0:	0800821d 	.word	0x0800821d
        case MISC_SETBYNAME:
          paramSetByName(&p);
 80081f4:	480c      	ldr	r0, [pc, #48]	; (8008228 <paramTask+0xcc>)
 80081f6:	f7ff fca9 	bl	8007b4c <paramSetByName>
          break;
 80081fa:	e014      	b.n	8008226 <paramTask+0xca>
        case MISC_GET_EXTENDED_TYPE:
          paramGetExtendedType(&p);
 80081fc:	480a      	ldr	r0, [pc, #40]	; (8008228 <paramTask+0xcc>)
 80081fe:	f7ff fd19 	bl	8007c34 <paramGetExtendedType>
          break;
 8008202:	e010      	b.n	8008226 <paramTask+0xca>
        case MISC_PERSISTENT_STORE:
          paramPersistentStore(&p);
 8008204:	4808      	ldr	r0, [pc, #32]	; (8008228 <paramTask+0xcc>)
 8008206:	f7ff fd87 	bl	8007d18 <paramPersistentStore>
          break;
 800820a:	e00c      	b.n	8008226 <paramTask+0xca>
        case MISC_PERSISTENT_GET_STATE:
          paramPersistentGetState(&p);
 800820c:	4806      	ldr	r0, [pc, #24]	; (8008228 <paramTask+0xcc>)
 800820e:	f7ff fe4f 	bl	8007eb0 <paramPersistentGetState>
          break;
 8008212:	e008      	b.n	8008226 <paramTask+0xca>
        case MISC_PERSISTENT_CLEAR:
          paramPersistentClear(&p);
 8008214:	4804      	ldr	r0, [pc, #16]	; (8008228 <paramTask+0xcc>)
 8008216:	f7ff ff01 	bl	800801c <paramPersistentClear>
          break;
 800821a:	e004      	b.n	8008226 <paramTask+0xca>
        case MISC_GET_DEFAULT_VALUE:
          paramGetDefaultValue(&p);
 800821c:	4802      	ldr	r0, [pc, #8]	; (8008228 <paramTask+0xcc>)
 800821e:	f7ff fddb 	bl	8007dd8 <paramGetDefaultValue>
          break;
 8008222:	e000      	b.n	8008226 <paramTask+0xca>
        default:
          break;
 8008224:	bf00      	nop
		crtpReceivePacketBlock(CRTP_PORT_PARAM, &p);
 8008226:	e7a0      	b.n	800816a <paramTask+0xe>
 8008228:	20006a64 	.word	0x20006a64

0800822c <queueMonitorInit>:
static int getMaxWaiting(xQueueHandle* xQueue, int prevPeak);
static void resetCounters();

unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue );

void queueMonitorInit() {
 800822c:	b590      	push	{r4, r7, lr}
 800822e:	b083      	sub	sp, #12
 8008230:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 8008232:	4b19      	ldr	r3, [pc, #100]	; (8008298 <queueMonitorInit+0x6c>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	f083 0301 	eor.w	r3, r3, #1
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d104      	bne.n	800824a <queueMonitorInit+0x1e>
 8008240:	2248      	movs	r2, #72	; 0x48
 8008242:	4916      	ldr	r1, [pc, #88]	; (800829c <queueMonitorInit+0x70>)
 8008244:	4816      	ldr	r0, [pc, #88]	; (80082a0 <queueMonitorInit+0x74>)
 8008246:	f7fd f935 	bl	80054b4 <assertFail>
  timer = xTimerCreateStatic( "queueMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 800824a:	4b16      	ldr	r3, [pc, #88]	; (80082a4 <queueMonitorInit+0x78>)
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	4b16      	ldr	r3, [pc, #88]	; (80082a8 <queueMonitorInit+0x7c>)
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	2300      	movs	r3, #0
 8008254:	2201      	movs	r2, #1
 8008256:	f242 7110 	movw	r1, #10000	; 0x2710
 800825a:	4814      	ldr	r0, [pc, #80]	; (80082ac <queueMonitorInit+0x80>)
 800825c:	f00c ffc4 	bl	80151e8 <xTimerCreateStatic>
 8008260:	4603      	mov	r3, r0
 8008262:	4a13      	ldr	r2, [pc, #76]	; (80082b0 <queueMonitorInit+0x84>)
 8008264:	6013      	str	r3, [r2, #0]
  xTimerStart(timer, 100);
 8008266:	4b12      	ldr	r3, [pc, #72]	; (80082b0 <queueMonitorInit+0x84>)
 8008268:	681c      	ldr	r4, [r3, #0]
 800826a:	f00b ffcb 	bl	8014204 <xTaskGetTickCount>
 800826e:	4602      	mov	r2, r0
 8008270:	2364      	movs	r3, #100	; 0x64
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	2300      	movs	r3, #0
 8008276:	2101      	movs	r1, #1
 8008278:	4620      	mov	r0, r4
 800827a:	f00d f829 	bl	80152d0 <xTimerGenericCommand>

  data[0].fileName = "Na";
 800827e:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <queueMonitorInit+0x88>)
 8008280:	4a0d      	ldr	r2, [pc, #52]	; (80082b8 <queueMonitorInit+0x8c>)
 8008282:	601a      	str	r2, [r3, #0]
  data[0].queueName = "Na";
 8008284:	4b0b      	ldr	r3, [pc, #44]	; (80082b4 <queueMonitorInit+0x88>)
 8008286:	4a0c      	ldr	r2, [pc, #48]	; (80082b8 <queueMonitorInit+0x8c>)
 8008288:	605a      	str	r2, [r3, #4]

  initialized = true;
 800828a:	4b03      	ldr	r3, [pc, #12]	; (8008298 <queueMonitorInit+0x6c>)
 800828c:	2201      	movs	r2, #1
 800828e:	701a      	strb	r2, [r3, #0]
}
 8008290:	bf00      	nop
 8008292:	3704      	adds	r7, #4
 8008294:	46bd      	mov	sp, r7
 8008296:	bd90      	pop	{r4, r7, pc}
 8008298:	20007044 	.word	0x20007044
 800829c:	0801acec 	.word	0x0801acec
 80082a0:	0801ad10 	.word	0x0801ad10
 80082a4:	20007018 	.word	0x20007018
 80082a8:	08008459 	.word	0x08008459
 80082ac:	0801ad20 	.word	0x0801ad20
 80082b0:	20007014 	.word	0x20007014
 80082b4:	20006e84 	.word	0x20006e84
 80082b8:	0801ad34 	.word	0x0801ad34

080082bc <qmRegisterQueue>:

    queueData->fullCount++;
  }
}

void qmRegisterQueue(xQueueHandle* xQueue, char* fileName, char* queueName) {
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  ASSERT(initialized);
 80082c8:	4b18      	ldr	r3, [pc, #96]	; (800832c <qmRegisterQueue+0x70>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d104      	bne.n	80082da <qmRegisterQueue+0x1e>
 80082d0:	2265      	movs	r2, #101	; 0x65
 80082d2:	4917      	ldr	r1, [pc, #92]	; (8008330 <qmRegisterQueue+0x74>)
 80082d4:	4817      	ldr	r0, [pc, #92]	; (8008334 <qmRegisterQueue+0x78>)
 80082d6:	f7fd f8ed 	bl	80054b4 <assertFail>
  ASSERT(nrOfQueues < MAX_NR_OF_QUEUES);
 80082da:	4b17      	ldr	r3, [pc, #92]	; (8008338 <qmRegisterQueue+0x7c>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	2b13      	cmp	r3, #19
 80082e0:	d904      	bls.n	80082ec <qmRegisterQueue+0x30>
 80082e2:	2266      	movs	r2, #102	; 0x66
 80082e4:	4912      	ldr	r1, [pc, #72]	; (8008330 <qmRegisterQueue+0x74>)
 80082e6:	4815      	ldr	r0, [pc, #84]	; (800833c <qmRegisterQueue+0x80>)
 80082e8:	f7fd f8e4 	bl	80054b4 <assertFail>
  Data* queueData = &data[nrOfQueues];
 80082ec:	4b12      	ldr	r3, [pc, #72]	; (8008338 <qmRegisterQueue+0x7c>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	4613      	mov	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4a11      	ldr	r2, [pc, #68]	; (8008340 <qmRegisterQueue+0x84>)
 80082fc:	4413      	add	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]

  queueData->fileName = fileName;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	601a      	str	r2, [r3, #0]
  queueData->queueName = queueName;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	605a      	str	r2, [r3, #4]
  vQueueSetQueueNumber(xQueue, nrOfQueues);
 800830c:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <qmRegisterQueue+0x7c>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	4619      	mov	r1, r3
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f00b fa6c 	bl	80137f0 <vQueueSetQueueNumber>

  nrOfQueues++;
 8008318:	4b07      	ldr	r3, [pc, #28]	; (8008338 <qmRegisterQueue+0x7c>)
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	3301      	adds	r3, #1
 800831e:	b2da      	uxtb	r2, r3
 8008320:	4b05      	ldr	r3, [pc, #20]	; (8008338 <qmRegisterQueue+0x7c>)
 8008322:	701a      	strb	r2, [r3, #0]
}
 8008324:	bf00      	nop
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20007044 	.word	0x20007044
 8008330:	0801acec 	.word	0x0801acec
 8008334:	0801ad38 	.word	0x0801ad38
 8008338:	20000330 	.word	0x20000330
 800833c:	0801ad44 	.word	0x0801ad44
 8008340:	20006e84 	.word	0x20006e84

08008344 <debugPrint>:
    return waiting;
  }
  return prevPeak;
}

static void debugPrint() {
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
  int i = 0;
 800834a:	2300      	movs	r3, #0
 800834c:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 800834e:	2300      	movs	r3, #0
 8008350:	607b      	str	r3, [r7, #4]
 8008352:	e013      	b.n	800837c <debugPrint+0x38>
    Data* queueData = &data[i];
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	4613      	mov	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4a0d      	ldr	r2, [pc, #52]	; (8008394 <debugPrint+0x50>)
 8008360:	4413      	add	r3, r2
 8008362:	603b      	str	r3, [r7, #0]
    if (filter(queueData)) {
 8008364:	6838      	ldr	r0, [r7, #0]
 8008366:	f000 f819 	bl	800839c <filter>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <debugPrint+0x32>
      debugPrintQueue(queueData);
 8008370:	6838      	ldr	r0, [r7, #0]
 8008372:	f000 f827 	bl	80083c4 <debugPrintQueue>
  for (i = 0; i < nrOfQueues; i++) {
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	3301      	adds	r3, #1
 800837a:	607b      	str	r3, [r7, #4]
 800837c:	4b06      	ldr	r3, [pc, #24]	; (8008398 <debugPrint+0x54>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	461a      	mov	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4293      	cmp	r3, r2
 8008386:	dbe5      	blt.n	8008354 <debugPrint+0x10>
    }
  }

  if (RESET_COUNTERS_AFTER_DISPLAY) {
    resetCounters();
 8008388:	f000 f838 	bl	80083fc <resetCounters>
  }
}
 800838c:	bf00      	nop
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20006e84 	.word	0x20006e84
 8008398:	20000330 	.word	0x20000330

0800839c <filter>:

static bool filter(Data* queueData) {
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  bool doDisplay = false;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
  if (DISPLAY_ONLY_OVERFLOW_QUEUES) {
    doDisplay = (queueData->fullCount != 0);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	bf14      	ite	ne
 80083b0:	2301      	movne	r3, #1
 80083b2:	2300      	moveq	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]
  } else {
    doDisplay = true;
  }
  return doDisplay;
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <debugPrintQueue>:

static void debugPrintQueue(Data* queueData) {
 80083c4:	b590      	push	{r4, r7, lr}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af02      	add	r7, sp, #8
 80083ca:	6078      	str	r0, [r7, #4]
  printf("%s:%s, sent: %i, peak: %i, full: %i\n",queueData->fileName, queueData->queueName, queueData->sendCount,queueData->maxWaiting, queueData->fullCount);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6819      	ldr	r1, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6858      	ldr	r0, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689c      	ldr	r4, [r3, #8]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6912      	ldr	r2, [r2, #16]
 80083e0:	9201      	str	r2, [sp, #4]
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	4623      	mov	r3, r4
 80083e6:	4602      	mov	r2, r0
 80083e8:	4803      	ldr	r0, [pc, #12]	; (80083f8 <debugPrintQueue+0x34>)
 80083ea:	f00f f98b 	bl	8017704 <iprintf>
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd90      	pop	{r4, r7, pc}
 80083f6:	bf00      	nop
 80083f8:	0801ad80 	.word	0x0801ad80

080083fc <resetCounters>:

static void resetCounters() {
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
  int i = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8008406:	2300      	movs	r3, #0
 8008408:	607b      	str	r3, [r7, #4]
 800840a:	e013      	b.n	8008434 <resetCounters+0x38>
    Data* queueData = &data[i];
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	4613      	mov	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4a0e      	ldr	r2, [pc, #56]	; (8008450 <resetCounters+0x54>)
 8008418:	4413      	add	r3, r2
 800841a:	603b      	str	r3, [r7, #0]

    queueData->sendCount = 0;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2200      	movs	r2, #0
 8008420:	609a      	str	r2, [r3, #8]
    queueData->maxWaiting = 0;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2200      	movs	r2, #0
 8008426:	60da      	str	r2, [r3, #12]
    queueData->fullCount = 0;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2200      	movs	r2, #0
 800842c:	611a      	str	r2, [r3, #16]
  for (i = 0; i < nrOfQueues; i++) {
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3301      	adds	r3, #1
 8008432:	607b      	str	r3, [r7, #4]
 8008434:	4b07      	ldr	r3, [pc, #28]	; (8008454 <resetCounters+0x58>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4293      	cmp	r3, r2
 800843e:	dbe5      	blt.n	800840c <resetCounters+0x10>
  }
}
 8008440:	bf00      	nop
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	20006e84 	.word	0x20006e84
 8008454:	20000330 	.word	0x20000330

08008458 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  debugPrint();
 8008460:	f7ff ff70 	bl	8008344 <debugPrint>
}
 8008464:	bf00      	nop
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <statsCntRateCounterUpdate>:
    counter->latestCount = 0;
    counter->latestAveragingMs = 0;
    counter->latestRate = 0.0f;
}

float statsCntRateCounterUpdate(statsCntRateCounter_t* counter, uint32_t now_ms) {
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
    uint32_t dt_ms = now_ms - counter->latestAveragingMs;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	617b      	str	r3, [r7, #20]
    if (dt_ms > counter->intervalMs) {
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	429a      	cmp	r2, r3
 8008488:	d925      	bls.n	80084d6 <statsCntRateCounterUpdate+0x6a>
        float dt_s = dt_ms / 1000.0f;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	ee07 3a90 	vmov	s15, r3
 8008490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008494:	eddf 6a15 	vldr	s13, [pc, #84]	; 80084ec <statsCntRateCounterUpdate+0x80>
 8008498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800849c:	edc7 7a04 	vstr	s15, [r7, #16]
        float dv = counter->count - counter->latestCount;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	ee07 3a90 	vmov	s15, r3
 80084ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b2:	edc7 7a03 	vstr	s15, [r7, #12]

        counter->latestRate = dv / dt_s;
 80084b6:	edd7 6a03 	vldr	s13, [r7, #12]
 80084ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80084be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	edc3 7a03 	vstr	s15, [r3, #12]

        counter->latestCount = counter->count;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	605a      	str	r2, [r3, #4]
        counter->latestAveragingMs = now_ms;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	609a      	str	r2, [r3, #8]
    }

    return counter->latestRate;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	ee07 3a90 	vmov	s15, r3
}
 80084de:	eeb0 0a67 	vmov.f32	s0, s15
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	447a0000 	.word	0x447a0000

080084f0 <statsCntRateLogHandler>:

    logger->logByFunction.data = (void*)logger;
    logger->logByFunction.aquireFloat = statsCntRateLogHandler;
}

float statsCntRateLogHandler(uint32_t timestamp, void* data) {
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
    statsCntRateLogger_t* logger = (statsCntRateLogger_t*)data;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	60fb      	str	r3, [r7, #12]
    return statsCntRateCounterUpdate(&logger->rateCounter, timestamp);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3308      	adds	r3, #8
 8008502:	6879      	ldr	r1, [r7, #4]
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff ffb1 	bl	800846c <statsCntRateCounterUpdate>
 800850a:	eef0 7a40 	vmov.f32	s15, s0
}
 800850e:	eeb0 0a67 	vmov.f32	s0, s15
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <sysLoadInit>:
static int taskTopIndex = 0;
static uint32_t previousTotalRunTime = 0;

static StaticTimer_t timerBuffer;

void sysLoadInit() {
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 800851e:	4b14      	ldr	r3, [pc, #80]	; (8008570 <sysLoadInit+0x58>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	f083 0301 	eor.w	r3, r3, #1
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b00      	cmp	r3, #0
 800852a:	d104      	bne.n	8008536 <sysLoadInit+0x1e>
 800852c:	223c      	movs	r2, #60	; 0x3c
 800852e:	4911      	ldr	r1, [pc, #68]	; (8008574 <sysLoadInit+0x5c>)
 8008530:	4811      	ldr	r0, [pc, #68]	; (8008578 <sysLoadInit+0x60>)
 8008532:	f7fc ffbf 	bl	80054b4 <assertFail>

  xTimerHandle timer = xTimerCreateStatic( "sysLoadMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8008536:	4b11      	ldr	r3, [pc, #68]	; (800857c <sysLoadInit+0x64>)
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	4b11      	ldr	r3, [pc, #68]	; (8008580 <sysLoadInit+0x68>)
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	2300      	movs	r3, #0
 8008540:	2201      	movs	r2, #1
 8008542:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008546:	480f      	ldr	r0, [pc, #60]	; (8008584 <sysLoadInit+0x6c>)
 8008548:	f00c fe4e 	bl	80151e8 <xTimerCreateStatic>
 800854c:	6078      	str	r0, [r7, #4]
  xTimerStart(timer, 100);
 800854e:	f00b fe59 	bl	8014204 <xTaskGetTickCount>
 8008552:	4602      	mov	r2, r0
 8008554:	2364      	movs	r3, #100	; 0x64
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	2300      	movs	r3, #0
 800855a:	2101      	movs	r1, #1
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f00c feb7 	bl	80152d0 <xTimerGenericCommand>

  initialized = true;
 8008562:	4b03      	ldr	r3, [pc, #12]	; (8008570 <sysLoadInit+0x58>)
 8008564:	2201      	movs	r2, #1
 8008566:	701a      	strb	r2, [r3, #0]
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20007045 	.word	0x20007045
 8008574:	0801ada8 	.word	0x0801ada8
 8008578:	0801adc4 	.word	0x0801adc4
 800857c:	20007050 	.word	0x20007050
 8008580:	08008609 	.word	0x08008609
 8008584:	0801add4 	.word	0x0801add4

08008588 <getPreviousTaskData>:


static taskData_t* getPreviousTaskData(uint32_t xTaskNumber) {
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  // Try to find the task in the list of tasks
  for (int i = 0; i < taskTopIndex; i++) {
 8008590:	2300      	movs	r3, #0
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	e00f      	b.n	80085b6 <getPreviousTaskData+0x2e>
    if (previousSnapshot[i].xTaskNumber == xTaskNumber) {
 8008596:	4a18      	ldr	r2, [pc, #96]	; (80085f8 <getPreviousTaskData+0x70>)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	4413      	add	r3, r2
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d104      	bne.n	80085b0 <getPreviousTaskData+0x28>
      return &previousSnapshot[i];
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	00db      	lsls	r3, r3, #3
 80085aa:	4a13      	ldr	r2, [pc, #76]	; (80085f8 <getPreviousTaskData+0x70>)
 80085ac:	4413      	add	r3, r2
 80085ae:	e01f      	b.n	80085f0 <getPreviousTaskData+0x68>
  for (int i = 0; i < taskTopIndex; i++) {
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3301      	adds	r3, #1
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	4b11      	ldr	r3, [pc, #68]	; (80085fc <getPreviousTaskData+0x74>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	429a      	cmp	r2, r3
 80085be:	dbea      	blt.n	8008596 <getPreviousTaskData+0xe>
    }
  }

  // Allocate a new entry
  ASSERT(taskTopIndex < TASK_MAX_COUNT);
 80085c0:	4b0e      	ldr	r3, [pc, #56]	; (80085fc <getPreviousTaskData+0x74>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b1f      	cmp	r3, #31
 80085c6:	dd04      	ble.n	80085d2 <getPreviousTaskData+0x4a>
 80085c8:	224e      	movs	r2, #78	; 0x4e
 80085ca:	490d      	ldr	r1, [pc, #52]	; (8008600 <getPreviousTaskData+0x78>)
 80085cc:	480d      	ldr	r0, [pc, #52]	; (8008604 <getPreviousTaskData+0x7c>)
 80085ce:	f7fc ff71 	bl	80054b4 <assertFail>
  taskData_t* result = &previousSnapshot[taskTopIndex];
 80085d2:	4b0a      	ldr	r3, [pc, #40]	; (80085fc <getPreviousTaskData+0x74>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	4a07      	ldr	r2, [pc, #28]	; (80085f8 <getPreviousTaskData+0x70>)
 80085da:	4413      	add	r3, r2
 80085dc:	60bb      	str	r3, [r7, #8]
  result->xTaskNumber = xTaskNumber;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	605a      	str	r2, [r3, #4]

  taskTopIndex++;
 80085e4:	4b05      	ldr	r3, [pc, #20]	; (80085fc <getPreviousTaskData+0x74>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3301      	adds	r3, #1
 80085ea:	4a04      	ldr	r2, [pc, #16]	; (80085fc <getPreviousTaskData+0x74>)
 80085ec:	6013      	str	r3, [r2, #0]

  return result;
 80085ee:	68bb      	ldr	r3, [r7, #8]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	20003f30 	.word	0x20003f30
 80085fc:	20007048 	.word	0x20007048
 8008600:	0801ada8 	.word	0x0801ada8
 8008604:	0801ade8 	.word	0x0801ade8

08008608 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8008608:	b580      	push	{r7, lr}
 800860a:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 800860e:	af02      	add	r7, sp, #8
 8008610:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8008614:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8008618:	6018      	str	r0, [r3, #0]
  if (triggerDump != 0) {
 800861a:	4b4e      	ldr	r3, [pc, #312]	; (8008754 <timerHandler+0x14c>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 8092 	beq.w	8008748 <timerHandler+0x140>
    uint32_t totalRunTime;

    TaskStatus_t taskStats[TASK_MAX_COUNT];
    uint32_t taskCount = uxTaskGetSystemState(taskStats, TASK_MAX_COUNT, &totalRunTime);
 8008624:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8008628:	f107 030c 	add.w	r3, r7, #12
 800862c:	2120      	movs	r1, #32
 800862e:	4618      	mov	r0, r3
 8008630:	f00b fdf8 	bl	8014224 <uxTaskGetSystemState>
 8008634:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
    ASSERT(taskCount < TASK_MAX_COUNT);
 8008638:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 800863c:	2b1f      	cmp	r3, #31
 800863e:	d904      	bls.n	800864a <timerHandler+0x42>
 8008640:	225d      	movs	r2, #93	; 0x5d
 8008642:	4945      	ldr	r1, [pc, #276]	; (8008758 <timerHandler+0x150>)
 8008644:	4845      	ldr	r0, [pc, #276]	; (800875c <timerHandler+0x154>)
 8008646:	f7fc ff35 	bl	80054b4 <assertFail>

    uint32_t totalDelta = totalRunTime - previousTotalRunTime;
 800864a:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 800864e:	4b44      	ldr	r3, [pc, #272]	; (8008760 <timerHandler+0x158>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
    float f = 100.0 / totalDelta;
 8008658:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 800865c:	f7f7 ff62 	bl	8000524 <__aeabi_ui2d>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	f04f 0000 	mov.w	r0, #0
 8008668:	493e      	ldr	r1, [pc, #248]	; (8008764 <timerHandler+0x15c>)
 800866a:	f7f8 f8ff 	bl	800086c <__aeabi_ddiv>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	4610      	mov	r0, r2
 8008674:	4619      	mov	r1, r3
 8008676:	f7f8 faa7 	bl	8000bc8 <__aeabi_d2f>
 800867a:	4603      	mov	r3, r0
 800867c:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8008680:	6013      	str	r3, [r2, #0]

    // Dumps the the CPU load and stack usage for all tasks
    // CPU usage is since last dump in % compared to total time spent in tasks. Note that time spent in interrupts will be included in measured time.
    // Stack usage is displayed as nr of unused bytes at peak stack usage.

    DEBUG_PRINT("Task dump\n");
 8008682:	4939      	ldr	r1, [pc, #228]	; (8008768 <timerHandler+0x160>)
 8008684:	2000      	movs	r0, #0
 8008686:	f7fc fee7 	bl	8005458 <SEGGER_RTT_printf>
    DEBUG_PRINT("Load\tStack left\tName\n");
 800868a:	4938      	ldr	r1, [pc, #224]	; (800876c <timerHandler+0x164>)
 800868c:	2000      	movs	r0, #0
 800868e:	f7fc fee3 	bl	8005458 <SEGGER_RTT_printf>
    for (uint32_t i = 0; i < taskCount; i++) {
 8008692:	2300      	movs	r3, #0
 8008694:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8008698:	e049      	b.n	800872e <timerHandler+0x126>
      TaskStatus_t* stats = &taskStats[i];
 800869a:	f107 010c 	add.w	r1, r7, #12
 800869e:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 80086a2:	4613      	mov	r3, r2
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	4413      	add	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	440b      	add	r3, r1
 80086ac:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      taskData_t* previousTaskData = getPreviousTaskData(stats->xTaskNumber);
 80086b0:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff ff66 	bl	8008588 <getPreviousTaskData>
 80086bc:	f8c7 0498 	str.w	r0, [r7, #1176]	; 0x498

      uint32_t taskRunTime = stats->ulRunTimeCounter;
 80086c0:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
      float load = f * (taskRunTime - previousTaskData->ulRunTimeCounter);
 80086ca:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086de:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80086e2:	ed93 7a00 	vldr	s14, [r3]
 80086e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ea:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80086ee:	edc3 7a00 	vstr	s15, [r3]
      DEBUG_PRINT("%.2f \t%u \t%s\n", (double)load, stats->usStackHighWaterMark, stats->pcTaskName);
 80086f2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	f7f7 ff36 	bl	8000568 <__aeabi_f2d>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8008704:	8c09      	ldrh	r1, [r1, #32]
 8008706:	4608      	mov	r0, r1
 8008708:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 800870c:	6849      	ldr	r1, [r1, #4]
 800870e:	9101      	str	r1, [sp, #4]
 8008710:	9000      	str	r0, [sp, #0]
 8008712:	4917      	ldr	r1, [pc, #92]	; (8008770 <timerHandler+0x168>)
 8008714:	2000      	movs	r0, #0
 8008716:	f7fc fe9f 	bl	8005458 <SEGGER_RTT_printf>

      previousTaskData->ulRunTimeCounter = taskRunTime;
 800871a:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800871e:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8008722:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < taskCount; i++) {
 8008724:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8008728:	3301      	adds	r3, #1
 800872a:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800872e:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 8008732:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8008736:	429a      	cmp	r2, r3
 8008738:	d3af      	bcc.n	800869a <timerHandler+0x92>
    }

    previousTotalRunTime = totalRunTime;
 800873a:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800873e:	4a08      	ldr	r2, [pc, #32]	; (8008760 <timerHandler+0x158>)
 8008740:	6013      	str	r3, [r2, #0]

    triggerDump = 0;
 8008742:	4b04      	ldr	r3, [pc, #16]	; (8008754 <timerHandler+0x14c>)
 8008744:	2200      	movs	r2, #0
 8008746:	701a      	strb	r2, [r3, #0]
  }
}
 8008748:	bf00      	nop
 800874a:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20007046 	.word	0x20007046
 8008758:	0801ada8 	.word	0x0801ada8
 800875c:	0801ae08 	.word	0x0801ae08
 8008760:	2000704c 	.word	0x2000704c
 8008764:	40590000 	.word	0x40590000
 8008768:	0801ae24 	.word	0x0801ae24
 800876c:	0801ae30 	.word	0x0801ae30
 8008770:	0801ae48 	.word	0x0801ae48

08008774 <usecTimerReset>:
static uint32_t usecTimerHighCount;



void usecTimerReset(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
  IF_DEBUG_ASSERT(isInit);
 800877a:	4b0c      	ldr	r3, [pc, #48]	; (80087ac <usecTimerReset+0x38>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d104      	bne.n	800878c <usecTimerReset+0x18>
 8008782:	2211      	movs	r2, #17
 8008784:	490a      	ldr	r1, [pc, #40]	; (80087b0 <usecTimerReset+0x3c>)
 8008786:	480b      	ldr	r0, [pc, #44]	; (80087b4 <usecTimerReset+0x40>)
 8008788:	f7fc fe94 	bl	80054b4 <assertFail>

  const uint32_t zero = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	607b      	str	r3, [r7, #4]
  __atomic_store(&usecTimerHighCount, &zero, __ATOMIC_SEQ_CST);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a09      	ldr	r2, [pc, #36]	; (80087b8 <usecTimerReset+0x44>)
 8008794:	f3bf 8f5b 	dmb	ish
 8008798:	6013      	str	r3, [r2, #0]
 800879a:	f3bf 8f5b 	dmb	ish

  TIM7->CNT = 0;
 800879e:	4b07      	ldr	r3, [pc, #28]	; (80087bc <usecTimerReset+0x48>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	2000707c 	.word	0x2000707c
 80087b0:	0801ae78 	.word	0x0801ae78
 80087b4:	0801ae98 	.word	0x0801ae98
 80087b8:	20007080 	.word	0x20007080
 80087bc:	40001400 	.word	0x40001400

080087c0 <resetParamCallback>:

/**
 * Parameters for the usec timer
 * */
static void resetParamCallback(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0
  if (reset) {
 80087c4:	4b05      	ldr	r3, [pc, #20]	; (80087dc <resetParamCallback+0x1c>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d004      	beq.n	80087d6 <resetParamCallback+0x16>
    usecTimerReset();
 80087cc:	f7ff ffd2 	bl	8008774 <usecTimerReset>
    reset = 0;
 80087d0:	4b02      	ldr	r3, [pc, #8]	; (80087dc <resetParamCallback+0x1c>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	701a      	strb	r2, [r3, #0]
  }
}
 80087d6:	bf00      	nop
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	2000707d 	.word	0x2000707d

080087e0 <workerInit>:

static xQueueHandle workerQueue;
STATIC_MEM_QUEUE_ALLOC(workerQueue, WORKER_QUEUE_LENGTH, sizeof(struct worker_work));

void workerInit()
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af02      	add	r7, sp, #8
  if (workerQueue)
 80087e6:	4b0e      	ldr	r3, [pc, #56]	; (8008820 <workerInit+0x40>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d114      	bne.n	8008818 <workerInit+0x38>
    return;

  workerQueue = STATIC_MEM_QUEUE_CREATE(workerQueue);
 80087ee:	2305      	movs	r3, #5
 80087f0:	4618      	mov	r0, r3
 80087f2:	2308      	movs	r3, #8
 80087f4:	4619      	mov	r1, r3
 80087f6:	2300      	movs	r3, #0
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	4b0a      	ldr	r3, [pc, #40]	; (8008824 <workerInit+0x44>)
 80087fc:	4a0a      	ldr	r2, [pc, #40]	; (8008828 <workerInit+0x48>)
 80087fe:	f00a fb55 	bl	8012eac <xQueueGenericCreateStatic>
 8008802:	4603      	mov	r3, r0
 8008804:	4a06      	ldr	r2, [pc, #24]	; (8008820 <workerInit+0x40>)
 8008806:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(workerQueue);
 8008808:	4b05      	ldr	r3, [pc, #20]	; (8008820 <workerInit+0x40>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a07      	ldr	r2, [pc, #28]	; (800882c <workerInit+0x4c>)
 800880e:	4908      	ldr	r1, [pc, #32]	; (8008830 <workerInit+0x50>)
 8008810:	4618      	mov	r0, r3
 8008812:	f7ff fd53 	bl	80082bc <qmRegisterQueue>
 8008816:	e000      	b.n	800881a <workerInit+0x3a>
    return;
 8008818:	bf00      	nop
}
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20007084 	.word	0x20007084
 8008824:	20004058 	.word	0x20004058
 8008828:	20004030 	.word	0x20004030
 800882c:	0801af24 	.word	0x0801af24
 8008830:	0801af30 	.word	0x0801af30

08008834 <workerSchedule>:
      work.function(work.arg);
  }
}

int workerSchedule(void (*function)(void*), void *arg)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  struct worker_work work;

  if (!function)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <workerSchedule+0x14>
    return ENOEXEC;
 8008844:	2308      	movs	r3, #8
 8008846:	e011      	b.n	800886c <workerSchedule+0x38>

  work.function = function;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	60bb      	str	r3, [r7, #8]
  work.arg = arg;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(workerQueue, &work, 0) == pdFALSE)
 8008850:	4b08      	ldr	r3, [pc, #32]	; (8008874 <workerSchedule+0x40>)
 8008852:	6818      	ldr	r0, [r3, #0]
 8008854:	f107 0108 	add.w	r1, r7, #8
 8008858:	2300      	movs	r3, #0
 800885a:	2200      	movs	r2, #0
 800885c:	f00a fc3c 	bl	80130d8 <xQueueGenericSend>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <workerSchedule+0x36>
    return ENOMEM;
 8008866:	230c      	movs	r3, #12
 8008868:	e000      	b.n	800886c <workerSchedule+0x38>

  return 0;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	20007084 	.word	0x20007084

08008878 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0

}
 800887c:	bf00      	nop
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8008886:	b480      	push	{r7}
 8008888:	af00      	add	r7, sp, #0
return 0;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4a07      	ldr	r2, [pc, #28]	; (80088d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80088bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	4a06      	ldr	r2, [pc, #24]	; (80088dc <vApplicationGetIdleTaskMemory+0x30>)
 80088c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2280      	movs	r2, #128	; 0x80
 80088c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80088ca:	bf00      	nop
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	20007088 	.word	0x20007088
 80088dc:	20007140 	.word	0x20007140

080088e0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4a07      	ldr	r2, [pc, #28]	; (800890c <vApplicationGetTimerTaskMemory+0x2c>)
 80088f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	4a06      	ldr	r2, [pc, #24]	; (8008910 <vApplicationGetTimerTaskMemory+0x30>)
 80088f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088fe:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8008900:	bf00      	nop
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	20007340 	.word	0x20007340
 8008910:	200073f8 	.word	0x200073f8

08008914 <LL_SPI_SetStandard>:
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f023 0210 	bic.w	r2, r3, #16
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	605a      	str	r2, [r3, #4]
}
 800892e:	bf00      	nop
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
	...

0800893c <LL_AHB1_GRP1_EnableClock>:
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008944:	4b08      	ldr	r3, [pc, #32]	; (8008968 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008948:	4907      	ldr	r1, [pc, #28]	; (8008968 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4313      	orrs	r3, r2
 800894e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008950:	4b05      	ldr	r3, [pc, #20]	; (8008968 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4013      	ands	r3, r2
 8008958:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800895a:	68fb      	ldr	r3, [r7, #12]
}
 800895c:	bf00      	nop
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	40023800 	.word	0x40023800

0800896c <LL_APB2_GRP1_EnableClock>:
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8008974:	4b08      	ldr	r3, [pc, #32]	; (8008998 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008978:	4907      	ldr	r1, [pc, #28]	; (8008998 <LL_APB2_GRP1_EnableClock+0x2c>)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4313      	orrs	r3, r2
 800897e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008980:	4b05      	ldr	r3, [pc, #20]	; (8008998 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4013      	ands	r3, r2
 8008988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800898a:	68fb      	ldr	r3, [r7, #12]
}
 800898c:	bf00      	nop
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	40023800 	.word	0x40023800

0800899c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800899c:	b5b0      	push	{r4, r5, r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80089a2:	f001 f831 	bl	8009a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80089a6:	f000 f871 	bl	8008a8c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80089aa:	f000 fadb 	bl	8008f64 <MX_GPIO_Init>
  MX_DMA_Init();
 80089ae:	f000 faa1 	bl	8008ef4 <MX_DMA_Init>
  MX_USART6_UART_Init();
 80089b2:	f000 fa75 	bl	8008ea0 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 80089b6:	f000 fa3d 	bl	8008e34 <MX_TIM7_Init>
  MX_SPI1_Init();
 80089ba:	f000 f973 	bl	8008ca4 <MX_SPI1_Init>
  MX_ADC1_Init();
 80089be:	f000 f8cd 	bl	8008b5c <MX_ADC1_Init>
  MX_ADC2_Init();
 80089c2:	f000 f91d 	bl	8008c00 <MX_ADC2_Init>
  MX_TIM3_Init();
 80089c6:	f000 f9bf 	bl	8008d48 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  debugInit();
 80089ca:	f7fc fec4 	bl	8005756 <debugInit>
  uartInit();
 80089ce:	f7fc fed3 	bl	8005778 <uartInit>
  uartDmaInit();
 80089d2:	f7fc feef 	bl	80057b4 <uartDmaInit>
*/


//  InitTick(72000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 80089d6:	4b24      	ldr	r3, [pc, #144]	; (8008a68 <main+0xcc>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	4b22      	ldr	r3, [pc, #136]	; (8008a68 <main+0xcc>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0220 	orr.w	r2, r2, #32
 80089e4:	60da      	str	r2, [r3, #12]


  freertos_IntroTitle();
 80089e6:	f000 fb49 	bl	800907c <freertos_IntroTitle>

  check_enter_bootloader();
 80089ea:	f7fa f93f 	bl	8002c6c <check_enter_bootloader>

  int err = platformInit();
 80089ee:	f7fb fdf4 	bl	80045da <platformInit>
 80089f2:	61f8      	str	r0, [r7, #28]
  if (err != 0) {
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d000      	beq.n	80089fc <main+0x60>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 80089fa:	e7fe      	b.n	80089fa <main+0x5e>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 80089fc:	481b      	ldr	r0, [pc, #108]	; (8008a6c <main+0xd0>)
 80089fe:	f004 fabb 	bl	800cf78 <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 8008a02:	4b1b      	ldr	r3, [pc, #108]	; (8008a70 <main+0xd4>)
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	4a1b      	ldr	r2, [pc, #108]	; (8008a74 <main+0xd8>)
 8008a08:	6013      	str	r3, [r2, #0]
//  vTaskDelay(M2T(2000));
  delay_us(1000);	// 1002 us
 8008a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008a0e:	f000 fbc1 	bl	8009194 <delay_us>
//  vTaskDelay(1);	// 입력값에 상관없이 약 7us, 정상적인 동작 안됨
//  usDelay(10);
//  HAL_Delay(1);		// 1350 us
  t2 = DWT->CYCCNT;
 8008a12:	4b17      	ldr	r3, [pc, #92]	; (8008a70 <main+0xd4>)
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	4a18      	ldr	r2, [pc, #96]	; (8008a78 <main+0xdc>)
 8008a18:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 8008a1a:	4814      	ldr	r0, [pc, #80]	; (8008a6c <main+0xd0>)
 8008a1c:	f004 fb1c 	bl	800d058 <HAL_TIM_Base_Stop_IT>
  //  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
  DEBUG_PRINT("delay = %d(us)\n",(uint32_t)(t2-t1)/CLOCK_PER_USEC);
 8008a20:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <main+0xdc>)
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	4b13      	ldr	r3, [pc, #76]	; (8008a74 <main+0xd8>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	4a14      	ldr	r2, [pc, #80]	; (8008a7c <main+0xe0>)
 8008a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a30:	091b      	lsrs	r3, r3, #4
 8008a32:	461a      	mov	r2, r3
 8008a34:	4912      	ldr	r1, [pc, #72]	; (8008a80 <main+0xe4>)
 8008a36:	2000      	movs	r0, #0
 8008a38:	f7fc fd0e 	bl	8005458 <SEGGER_RTT_printf>

	  DEBUG_PRINT("ADC Measure - Current:[%04d]\t Voltage:[%04d]\n", adc1Val, adc2Val);
	  delay_us(1000);
  }
*/
  systemLaunch();
 8008a3c:	f7fb f95a 	bl	8003cf4 <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8008a40:	4b10      	ldr	r3, [pc, #64]	; (8008a84 <main+0xe8>)
 8008a42:	463c      	mov	r4, r7
 8008a44:	461d      	mov	r5, r3
 8008a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008a52:	463b      	mov	r3, r7
 8008a54:	2100      	movs	r1, #0
 8008a56:	4618      	mov	r0, r3
 8008a58:	f00a f8a5 	bl	8012ba6 <osThreadCreate>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	4a0a      	ldr	r2, [pc, #40]	; (8008a88 <main+0xec>)
 8008a60:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008a62:	f00a f899 	bl	8012b98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008a66:	e7fe      	b.n	8008a66 <main+0xca>
 8008a68:	20007dd8 	.word	0x20007dd8
 8008a6c:	20007d90 	.word	0x20007d90
 8008a70:	e0001000 	.word	0xe0001000
 8008a74:	20007ee4 	.word	0x20007ee4
 8008a78:	20007ee8 	.word	0x20007ee8
 8008a7c:	38e38e39 	.word	0x38e38e39
 8008a80:	0801af4c 	.word	0x0801af4c
 8008a84:	0801af68 	.word	0x0801af68
 8008a88:	20007ee0 	.word	0x20007ee0

08008a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b094      	sub	sp, #80	; 0x50
 8008a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008a92:	f107 0320 	add.w	r3, r7, #32
 8008a96:	2230      	movs	r2, #48	; 0x30
 8008a98:	2100      	movs	r1, #0
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f00e ff24 	bl	80178e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008aa0:	f107 030c 	add.w	r3, r7, #12
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	605a      	str	r2, [r3, #4]
 8008aaa:	609a      	str	r2, [r3, #8]
 8008aac:	60da      	str	r2, [r3, #12]
 8008aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60bb      	str	r3, [r7, #8]
 8008ab4:	4b27      	ldr	r3, [pc, #156]	; (8008b54 <SystemClock_Config+0xc8>)
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab8:	4a26      	ldr	r2, [pc, #152]	; (8008b54 <SystemClock_Config+0xc8>)
 8008aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008abe:	6413      	str	r3, [r2, #64]	; 0x40
 8008ac0:	4b24      	ldr	r3, [pc, #144]	; (8008b54 <SystemClock_Config+0xc8>)
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ac8:	60bb      	str	r3, [r7, #8]
 8008aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008acc:	2300      	movs	r3, #0
 8008ace:	607b      	str	r3, [r7, #4]
 8008ad0:	4b21      	ldr	r3, [pc, #132]	; (8008b58 <SystemClock_Config+0xcc>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a20      	ldr	r2, [pc, #128]	; (8008b58 <SystemClock_Config+0xcc>)
 8008ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	4b1e      	ldr	r3, [pc, #120]	; (8008b58 <SystemClock_Config+0xcc>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ae4:	607b      	str	r3, [r7, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008af2:	2302      	movs	r3, #2
 8008af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008afc:	2304      	movs	r3, #4
 8008afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8008b00:	2348      	movs	r3, #72	; 0x48
 8008b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008b04:	2302      	movs	r3, #2
 8008b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008b0c:	f107 0320 	add.w	r3, r7, #32
 8008b10:	4618      	mov	r0, r3
 8008b12:	f003 fd49 	bl	800c5a8 <HAL_RCC_OscConfig>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008b1c:	f000 fb66 	bl	80091ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008b20:	230f      	movs	r3, #15
 8008b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008b24:	2302      	movs	r3, #2
 8008b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008b32:	2300      	movs	r3, #0
 8008b34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008b36:	f107 030c 	add.w	r3, r7, #12
 8008b3a:	2102      	movs	r1, #2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f003 ffab 	bl	800ca98 <HAL_RCC_ClockConfig>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8008b48:	f000 fb50 	bl	80091ec <Error_Handler>
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	3750      	adds	r7, #80	; 0x50
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	40023800 	.word	0x40023800
 8008b58:	40007000 	.word	0x40007000

08008b5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008b62:	463b      	mov	r3, r7
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	605a      	str	r2, [r3, #4]
 8008b6a:	609a      	str	r2, [r3, #8]
 8008b6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008b6e:	4b21      	ldr	r3, [pc, #132]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008b70:	4a21      	ldr	r2, [pc, #132]	; (8008bf8 <MX_ADC1_Init+0x9c>)
 8008b72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8008b74:	4b1f      	ldr	r3, [pc, #124]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008b76:	2200      	movs	r2, #0
 8008b78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008b7a:	4b1e      	ldr	r3, [pc, #120]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008b80:	4b1c      	ldr	r3, [pc, #112]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008b86:	4b1b      	ldr	r3, [pc, #108]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008b88:	2201      	movs	r2, #1
 8008b8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008b8c:	4b19      	ldr	r3, [pc, #100]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008b94:	4b17      	ldr	r3, [pc, #92]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008b9a:	4b16      	ldr	r3, [pc, #88]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008b9c:	4a17      	ldr	r2, [pc, #92]	; (8008bfc <MX_ADC1_Init+0xa0>)
 8008b9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008ba0:	4b14      	ldr	r3, [pc, #80]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008ba6:	4b13      	ldr	r3, [pc, #76]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008ba8:	2201      	movs	r2, #1
 8008baa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008bac:	4b11      	ldr	r3, [pc, #68]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008bb4:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008bba:	480e      	ldr	r0, [pc, #56]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008bbc:	f000 ffba 	bl	8009b34 <HAL_ADC_Init>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8008bc6:	f000 fb11 	bl	80091ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008bca:	230b      	movs	r3, #11
 8008bcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008bd2:	2307      	movs	r3, #7
 8008bd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008bd6:	463b      	mov	r3, r7
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4806      	ldr	r0, [pc, #24]	; (8008bf4 <MX_ADC1_Init+0x98>)
 8008bdc:	f001 f91c 	bl	8009e18 <HAL_ADC_ConfigChannel>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8008be6:	f000 fb01 	bl	80091ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20007bf8 	.word	0x20007bf8
 8008bf8:	40012000 	.word	0x40012000
 8008bfc:	0f000001 	.word	0x0f000001

08008c00 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008c06:	463b      	mov	r3, r7
 8008c08:	2200      	movs	r2, #0
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	605a      	str	r2, [r3, #4]
 8008c0e:	609a      	str	r2, [r3, #8]
 8008c10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8008c12:	4b21      	ldr	r3, [pc, #132]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c14:	4a21      	ldr	r2, [pc, #132]	; (8008c9c <MX_ADC2_Init+0x9c>)
 8008c16:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8008c18:	4b1f      	ldr	r3, [pc, #124]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8008c1e:	4b1e      	ldr	r3, [pc, #120]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8008c24:	4b1c      	ldr	r3, [pc, #112]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8008c2a:	4b1b      	ldr	r3, [pc, #108]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8008c30:	4b19      	ldr	r3, [pc, #100]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008c38:	4b17      	ldr	r3, [pc, #92]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008c3e:	4b16      	ldr	r3, [pc, #88]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c40:	4a17      	ldr	r2, [pc, #92]	; (8008ca0 <MX_ADC2_Init+0xa0>)
 8008c42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008c44:	4b14      	ldr	r3, [pc, #80]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8008c4a:	4b13      	ldr	r3, [pc, #76]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8008c50:	4b11      	ldr	r3, [pc, #68]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008c58:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8008c5e:	480e      	ldr	r0, [pc, #56]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c60:	f000 ff68 	bl	8009b34 <HAL_ADC_Init>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8008c6a:	f000 fabf 	bl	80091ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8008c6e:	230c      	movs	r3, #12
 8008c70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008c72:	2301      	movs	r3, #1
 8008c74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008c76:	2307      	movs	r3, #7
 8008c78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008c7a:	463b      	mov	r3, r7
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4806      	ldr	r0, [pc, #24]	; (8008c98 <MX_ADC2_Init+0x98>)
 8008c80:	f001 f8ca 	bl	8009e18 <HAL_ADC_ConfigChannel>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8008c8a:	f000 faaf 	bl	80091ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8008c8e:	bf00      	nop
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	20007c40 	.word	0x20007c40
 8008c9c:	40012100 	.word	0x40012100
 8008ca0:	0f000001 	.word	0x0f000001

08008ca4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b090      	sub	sp, #64	; 0x40
 8008ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8008caa:	f107 0318 	add.w	r3, r7, #24
 8008cae:	2228      	movs	r2, #40	; 0x28
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f00e fe18 	bl	80178e8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cb8:	463b      	mov	r3, r7
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	605a      	str	r2, [r3, #4]
 8008cc0:	609a      	str	r2, [r3, #8]
 8008cc2:	60da      	str	r2, [r3, #12]
 8008cc4:	611a      	str	r2, [r3, #16]
 8008cc6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8008cc8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008ccc:	f7ff fe4e 	bl	800896c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008cd0:	2001      	movs	r0, #1
 8008cd2:	f7ff fe33 	bl	800893c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8008cd6:	23e0      	movs	r3, #224	; 0xe0
 8008cd8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008cda:	2302      	movs	r3, #2
 8008cdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8008cea:	2305      	movs	r3, #5
 8008cec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cee:	463b      	mov	r3, r7
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4813      	ldr	r0, [pc, #76]	; (8008d40 <MX_SPI1_Init+0x9c>)
 8008cf4:	f006 fb77 	bl	800f3e6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8008cfc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008d00:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8008d02:	2300      	movs	r3, #0
 8008d04:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8008d06:	2302      	movs	r3, #2
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8008d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8008d14:	2310      	movs	r3, #16
 8008d16:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8008d20:	230a      	movs	r3, #10
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8008d24:	f107 0318 	add.w	r3, r7, #24
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4806      	ldr	r0, [pc, #24]	; (8008d44 <MX_SPI1_Init+0xa0>)
 8008d2c:	f006 fbff 	bl	800f52e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8008d30:	2100      	movs	r1, #0
 8008d32:	4804      	ldr	r0, [pc, #16]	; (8008d44 <MX_SPI1_Init+0xa0>)
 8008d34:	f7ff fdee 	bl	8008914 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008d38:	bf00      	nop
 8008d3a:	3740      	adds	r7, #64	; 0x40
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	40020000 	.word	0x40020000
 8008d44:	40013000 	.word	0x40013000

08008d48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08e      	sub	sp, #56	; 0x38
 8008d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	605a      	str	r2, [r3, #4]
 8008d58:	609a      	str	r2, [r3, #8]
 8008d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d5c:	f107 0320 	add.w	r3, r7, #32
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008d66:	1d3b      	adds	r3, r7, #4
 8008d68:	2200      	movs	r2, #0
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	605a      	str	r2, [r3, #4]
 8008d6e:	609a      	str	r2, [r3, #8]
 8008d70:	60da      	str	r2, [r3, #12]
 8008d72:	611a      	str	r2, [r3, #16]
 8008d74:	615a      	str	r2, [r3, #20]
 8008d76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008d78:	4b2c      	ldr	r3, [pc, #176]	; (8008e2c <MX_TIM3_Init+0xe4>)
 8008d7a:	4a2d      	ldr	r2, [pc, #180]	; (8008e30 <MX_TIM3_Init+0xe8>)
 8008d7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8008d7e:	4b2b      	ldr	r3, [pc, #172]	; (8008e2c <MX_TIM3_Init+0xe4>)
 8008d80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008d84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d86:	4b29      	ldr	r3, [pc, #164]	; (8008e2c <MX_TIM3_Init+0xe4>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 71;
 8008d8c:	4b27      	ldr	r3, [pc, #156]	; (8008e2c <MX_TIM3_Init+0xe4>)
 8008d8e:	2247      	movs	r2, #71	; 0x47
 8008d90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d92:	4b26      	ldr	r3, [pc, #152]	; (8008e2c <MX_TIM3_Init+0xe4>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d98:	4b24      	ldr	r3, [pc, #144]	; (8008e2c <MX_TIM3_Init+0xe4>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008d9e:	4823      	ldr	r0, [pc, #140]	; (8008e2c <MX_TIM3_Init+0xe4>)
 8008da0:	f004 f89a 	bl	800ced8 <HAL_TIM_Base_Init>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8008daa:	f000 fa1f 	bl	80091ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008db4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008db8:	4619      	mov	r1, r3
 8008dba:	481c      	ldr	r0, [pc, #112]	; (8008e2c <MX_TIM3_Init+0xe4>)
 8008dbc:	f004 fcbe 	bl	800d73c <HAL_TIM_ConfigClockSource>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8008dc6:	f000 fa11 	bl	80091ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008dca:	4818      	ldr	r0, [pc, #96]	; (8008e2c <MX_TIM3_Init+0xe4>)
 8008dcc:	f004 f973 	bl	800d0b6 <HAL_TIM_PWM_Init>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8008dd6:	f000 fa09 	bl	80091ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008dde:	2300      	movs	r3, #0
 8008de0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008de2:	f107 0320 	add.w	r3, r7, #32
 8008de6:	4619      	mov	r1, r3
 8008de8:	4810      	ldr	r0, [pc, #64]	; (8008e2c <MX_TIM3_Init+0xe4>)
 8008dea:	f005 f8bd 	bl	800df68 <HAL_TIMEx_MasterConfigSynchronization>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8008df4:	f000 f9fa 	bl	80091ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008df8:	2360      	movs	r3, #96	; 0x60
 8008dfa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36;
 8008dfc:	2324      	movs	r3, #36	; 0x24
 8008dfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008e08:	1d3b      	adds	r3, r7, #4
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4807      	ldr	r0, [pc, #28]	; (8008e2c <MX_TIM3_Init+0xe4>)
 8008e10:	f004 fbd2 	bl	800d5b8 <HAL_TIM_PWM_ConfigChannel>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8008e1a:	f000 f9e7 	bl	80091ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008e1e:	4803      	ldr	r0, [pc, #12]	; (8008e2c <MX_TIM3_Init+0xe4>)
 8008e20:	f000 fb38 	bl	8009494 <HAL_TIM_MspPostInit>

}
 8008e24:	bf00      	nop
 8008e26:	3738      	adds	r7, #56	; 0x38
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20007d48 	.word	0x20007d48
 8008e30:	40000400 	.word	0x40000400

08008e34 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e3a:	463b      	mov	r3, r7
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8008e42:	4b15      	ldr	r3, [pc, #84]	; (8008e98 <MX_TIM7_Init+0x64>)
 8008e44:	4a15      	ldr	r2, [pc, #84]	; (8008e9c <MX_TIM7_Init+0x68>)
 8008e46:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8008e48:	4b13      	ldr	r3, [pc, #76]	; (8008e98 <MX_TIM7_Init+0x64>)
 8008e4a:	2247      	movs	r2, #71	; 0x47
 8008e4c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e4e:	4b12      	ldr	r3, [pc, #72]	; (8008e98 <MX_TIM7_Init+0x64>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8008e54:	4b10      	ldr	r3, [pc, #64]	; (8008e98 <MX_TIM7_Init+0x64>)
 8008e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e5a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <MX_TIM7_Init+0x64>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8008e62:	480d      	ldr	r0, [pc, #52]	; (8008e98 <MX_TIM7_Init+0x64>)
 8008e64:	f004 f838 	bl	800ced8 <HAL_TIM_Base_Init>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8008e6e:	f000 f9bd 	bl	80091ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e72:	2300      	movs	r3, #0
 8008e74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e76:	2300      	movs	r3, #0
 8008e78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8008e7a:	463b      	mov	r3, r7
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4806      	ldr	r0, [pc, #24]	; (8008e98 <MX_TIM7_Init+0x64>)
 8008e80:	f005 f872 	bl	800df68 <HAL_TIMEx_MasterConfigSynchronization>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8008e8a:	f000 f9af 	bl	80091ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8008e8e:	bf00      	nop
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20007d90 	.word	0x20007d90
 8008e9c:	40001400 	.word	0x40001400

08008ea0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8008ea4:	4b11      	ldr	r3, [pc, #68]	; (8008eec <MX_USART6_UART_Init+0x4c>)
 8008ea6:	4a12      	ldr	r2, [pc, #72]	; (8008ef0 <MX_USART6_UART_Init+0x50>)
 8008ea8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8008eaa:	4b10      	ldr	r3, [pc, #64]	; (8008eec <MX_USART6_UART_Init+0x4c>)
 8008eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008eb0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008eb2:	4b0e      	ldr	r3, [pc, #56]	; (8008eec <MX_USART6_UART_Init+0x4c>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008eb8:	4b0c      	ldr	r3, [pc, #48]	; (8008eec <MX_USART6_UART_Init+0x4c>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008ebe:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <MX_USART6_UART_Init+0x4c>)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008ec4:	4b09      	ldr	r3, [pc, #36]	; (8008eec <MX_USART6_UART_Init+0x4c>)
 8008ec6:	220c      	movs	r2, #12
 8008ec8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008eca:	4b08      	ldr	r3, [pc, #32]	; (8008eec <MX_USART6_UART_Init+0x4c>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ed0:	4b06      	ldr	r3, [pc, #24]	; (8008eec <MX_USART6_UART_Init+0x4c>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008ed6:	4805      	ldr	r0, [pc, #20]	; (8008eec <MX_USART6_UART_Init+0x4c>)
 8008ed8:	f005 f8d6 	bl	800e088 <HAL_UART_Init>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8008ee2:	f000 f983 	bl	80091ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8008ee6:	bf00      	nop
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	20007dd8 	.word	0x20007dd8
 8008ef0:	40011400 	.word	0x40011400

08008ef4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008efa:	2300      	movs	r3, #0
 8008efc:	607b      	str	r3, [r7, #4]
 8008efe:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <MX_DMA_Init+0x6c>)
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	4a17      	ldr	r2, [pc, #92]	; (8008f60 <MX_DMA_Init+0x6c>)
 8008f04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f08:	6313      	str	r3, [r2, #48]	; 0x30
 8008f0a:	4b15      	ldr	r3, [pc, #84]	; (8008f60 <MX_DMA_Init+0x6c>)
 8008f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f12:	607b      	str	r3, [r7, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8008f16:	2200      	movs	r2, #0
 8008f18:	2105      	movs	r1, #5
 8008f1a:	2038      	movs	r0, #56	; 0x38
 8008f1c:	f001 faf7 	bl	800a50e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8008f20:	2038      	movs	r0, #56	; 0x38
 8008f22:	f001 fb10 	bl	800a546 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8008f26:	2200      	movs	r2, #0
 8008f28:	2105      	movs	r1, #5
 8008f2a:	2039      	movs	r0, #57	; 0x39
 8008f2c:	f001 faef 	bl	800a50e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8008f30:	2039      	movs	r0, #57	; 0x39
 8008f32:	f001 fb08 	bl	800a546 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8008f36:	2200      	movs	r2, #0
 8008f38:	2105      	movs	r1, #5
 8008f3a:	203a      	movs	r0, #58	; 0x3a
 8008f3c:	f001 fae7 	bl	800a50e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8008f40:	203a      	movs	r0, #58	; 0x3a
 8008f42:	f001 fb00 	bl	800a546 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8008f46:	2200      	movs	r2, #0
 8008f48:	2105      	movs	r1, #5
 8008f4a:	2046      	movs	r0, #70	; 0x46
 8008f4c:	f001 fadf 	bl	800a50e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8008f50:	2046      	movs	r0, #70	; 0x46
 8008f52:	f001 faf8 	bl	800a546 <HAL_NVIC_EnableIRQ>

}
 8008f56:	bf00      	nop
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	40023800 	.word	0x40023800

08008f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b08a      	sub	sp, #40	; 0x28
 8008f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f6a:	f107 0314 	add.w	r3, r7, #20
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	605a      	str	r2, [r3, #4]
 8008f74:	609a      	str	r2, [r3, #8]
 8008f76:	60da      	str	r2, [r3, #12]
 8008f78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	613b      	str	r3, [r7, #16]
 8008f7e:	4b36      	ldr	r3, [pc, #216]	; (8009058 <MX_GPIO_Init+0xf4>)
 8008f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f82:	4a35      	ldr	r2, [pc, #212]	; (8009058 <MX_GPIO_Init+0xf4>)
 8008f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f88:	6313      	str	r3, [r2, #48]	; 0x30
 8008f8a:	4b33      	ldr	r3, [pc, #204]	; (8009058 <MX_GPIO_Init+0xf4>)
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f92:	613b      	str	r3, [r7, #16]
 8008f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f96:	2300      	movs	r3, #0
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	4b2f      	ldr	r3, [pc, #188]	; (8009058 <MX_GPIO_Init+0xf4>)
 8008f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9e:	4a2e      	ldr	r2, [pc, #184]	; (8009058 <MX_GPIO_Init+0xf4>)
 8008fa0:	f043 0304 	orr.w	r3, r3, #4
 8008fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8008fa6:	4b2c      	ldr	r3, [pc, #176]	; (8009058 <MX_GPIO_Init+0xf4>)
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008faa:	f003 0304 	and.w	r3, r3, #4
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60bb      	str	r3, [r7, #8]
 8008fb6:	4b28      	ldr	r3, [pc, #160]	; (8009058 <MX_GPIO_Init+0xf4>)
 8008fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fba:	4a27      	ldr	r2, [pc, #156]	; (8009058 <MX_GPIO_Init+0xf4>)
 8008fbc:	f043 0301 	orr.w	r3, r3, #1
 8008fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8008fc2:	4b25      	ldr	r3, [pc, #148]	; (8009058 <MX_GPIO_Init+0xf4>)
 8008fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	60bb      	str	r3, [r7, #8]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008fce:	2300      	movs	r3, #0
 8008fd0:	607b      	str	r3, [r7, #4]
 8008fd2:	4b21      	ldr	r3, [pc, #132]	; (8009058 <MX_GPIO_Init+0xf4>)
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	4a20      	ldr	r2, [pc, #128]	; (8009058 <MX_GPIO_Init+0xf4>)
 8008fd8:	f043 0302 	orr.w	r3, r3, #2
 8008fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8008fde:	4b1e      	ldr	r3, [pc, #120]	; (8009058 <MX_GPIO_Init+0xf4>)
 8008fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	607b      	str	r3, [r7, #4]
 8008fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 8008fea:	2201      	movs	r2, #1
 8008fec:	2110      	movs	r1, #16
 8008fee:	481b      	ldr	r0, [pc, #108]	; (800905c <MX_GPIO_Init+0xf8>)
 8008ff0:	f002 f870 	bl	800b0d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2120      	movs	r1, #32
 8008ff8:	4819      	ldr	r0, [pc, #100]	; (8009060 <MX_GPIO_Init+0xfc>)
 8008ffa:	f002 f86b 	bl	800b0d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 8008ffe:	2310      	movs	r3, #16
 8009000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009002:	2301      	movs	r3, #1
 8009004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009006:	2300      	movs	r3, #0
 8009008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800900a:	2303      	movs	r3, #3
 800900c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 800900e:	f107 0314 	add.w	r3, r7, #20
 8009012:	4619      	mov	r1, r3
 8009014:	4811      	ldr	r0, [pc, #68]	; (800905c <MX_GPIO_Init+0xf8>)
 8009016:	f001 fec1 	bl	800ad9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 800901a:	2310      	movs	r3, #16
 800901c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800901e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009024:	2300      	movs	r3, #0
 8009026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 8009028:	f107 0314 	add.w	r3, r7, #20
 800902c:	4619      	mov	r1, r3
 800902e:	480d      	ldr	r0, [pc, #52]	; (8009064 <MX_GPIO_Init+0x100>)
 8009030:	f001 feb4 	bl	800ad9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8009034:	2320      	movs	r3, #32
 8009036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009038:	2301      	movs	r3, #1
 800903a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800903c:	2300      	movs	r3, #0
 800903e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009040:	2300      	movs	r3, #0
 8009042:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8009044:	f107 0314 	add.w	r3, r7, #20
 8009048:	4619      	mov	r1, r3
 800904a:	4805      	ldr	r0, [pc, #20]	; (8009060 <MX_GPIO_Init+0xfc>)
 800904c:	f001 fea6 	bl	800ad9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009050:	bf00      	nop
 8009052:	3728      	adds	r7, #40	; 0x28
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	40023800 	.word	0x40023800
 800905c:	40020000 	.word	0x40020000
 8009060:	40020400 	.word	0x40020400
 8009064:	40020800 	.word	0x40020800

08009068 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 800906c:	4b02      	ldr	r3, [pc, #8]	; (8009078 <OSVersion+0x10>)
}
 800906e:	4618      	mov	r0, r3
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	0801af84 	.word	0x0801af84

0800907c <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8009080:	492e      	ldr	r1, [pc, #184]	; (800913c <freertos_IntroTitle+0xc0>)
 8009082:	2000      	movs	r0, #0
 8009084:	f7fc f9e8 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 8009088:	492d      	ldr	r1, [pc, #180]	; (8009140 <freertos_IntroTitle+0xc4>)
 800908a:	2000      	movs	r0, #0
 800908c:	f7fc f9e4 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8009090:	492c      	ldr	r1, [pc, #176]	; (8009144 <freertos_IntroTitle+0xc8>)
 8009092:	2000      	movs	r0, #0
 8009094:	f7fc f9e0 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8009098:	492b      	ldr	r1, [pc, #172]	; (8009148 <freertos_IntroTitle+0xcc>)
 800909a:	2000      	movs	r0, #0
 800909c:	f7fc f9dc 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 80090a0:	492a      	ldr	r1, [pc, #168]	; (800914c <freertos_IntroTitle+0xd0>)
 80090a2:	2000      	movs	r0, #0
 80090a4:	f7fc f9d8 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 80090a8:	4929      	ldr	r1, [pc, #164]	; (8009150 <freertos_IntroTitle+0xd4>)
 80090aa:	2000      	movs	r0, #0
 80090ac:	f7fc f9d4 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 80090b0:	4928      	ldr	r1, [pc, #160]	; (8009154 <freertos_IntroTitle+0xd8>)
 80090b2:	2000      	movs	r0, #0
 80090b4:	f7fc f9d0 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 80090b8:	4927      	ldr	r1, [pc, #156]	; (8009158 <freertos_IntroTitle+0xdc>)
 80090ba:	2000      	movs	r0, #0
 80090bc:	f7fc f9cc 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 80090c0:	4926      	ldr	r1, [pc, #152]	; (800915c <freertos_IntroTitle+0xe0>)
 80090c2:	2000      	movs	r0, #0
 80090c4:	f7fc f9c8 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 80090c8:	4925      	ldr	r1, [pc, #148]	; (8009160 <freertos_IntroTitle+0xe4>)
 80090ca:	2000      	movs	r0, #0
 80090cc:	f7fc f9c4 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 80090d0:	4924      	ldr	r1, [pc, #144]	; (8009164 <freertos_IntroTitle+0xe8>)
 80090d2:	2000      	movs	r0, #0
 80090d4:	f7fc f9c0 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 80090d8:	4923      	ldr	r1, [pc, #140]	; (8009168 <freertos_IntroTitle+0xec>)
 80090da:	2000      	movs	r0, #0
 80090dc:	f7fc f9bc 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 80090e0:	4922      	ldr	r1, [pc, #136]	; (800916c <freertos_IntroTitle+0xf0>)
 80090e2:	2000      	movs	r0, #0
 80090e4:	f7fc f9b8 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 80090e8:	4921      	ldr	r1, [pc, #132]	; (8009170 <freertos_IntroTitle+0xf4>)
 80090ea:	2000      	movs	r0, #0
 80090ec:	f7fc f9b4 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 80090f0:	4920      	ldr	r1, [pc, #128]	; (8009174 <freertos_IntroTitle+0xf8>)
 80090f2:	2000      	movs	r0, #0
 80090f4:	f7fc f9b0 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 80090f8:	491f      	ldr	r1, [pc, #124]	; (8009178 <freertos_IntroTitle+0xfc>)
 80090fa:	2000      	movs	r0, #0
 80090fc:	f7fc f9ac 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 8009100:	491e      	ldr	r1, [pc, #120]	; (800917c <freertos_IntroTitle+0x100>)
 8009102:	2000      	movs	r0, #0
 8009104:	f7fc f9a8 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 8009108:	491d      	ldr	r1, [pc, #116]	; (8009180 <freertos_IntroTitle+0x104>)
 800910a:	2000      	movs	r0, #0
 800910c:	f7fc f9a4 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8009110:	491c      	ldr	r1, [pc, #112]	; (8009184 <freertos_IntroTitle+0x108>)
 8009112:	2000      	movs	r0, #0
 8009114:	f7fc f9a0 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 8009118:	f7ff ffa6 	bl	8009068 <OSVersion>
 800911c:	4603      	mov	r3, r0
 800911e:	461a      	mov	r2, r3
 8009120:	4919      	ldr	r1, [pc, #100]	; (8009188 <freertos_IntroTitle+0x10c>)
 8009122:	2000      	movs	r0, #0
 8009124:	f7fc f998 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8009128:	4918      	ldr	r1, [pc, #96]	; (800918c <freertos_IntroTitle+0x110>)
 800912a:	2000      	movs	r0, #0
 800912c:	f7fc f994 	bl	8005458 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n\n");
 8009130:	4917      	ldr	r1, [pc, #92]	; (8009190 <freertos_IntroTitle+0x114>)
 8009132:	2000      	movs	r0, #0
 8009134:	f7fc f990 	bl	8005458 <SEGGER_RTT_printf>
}
 8009138:	bf00      	nop
 800913a:	bd80      	pop	{r7, pc}
 800913c:	0801af8c 	.word	0x0801af8c
 8009140:	0801afcc 	.word	0x0801afcc
 8009144:	0801b020 	.word	0x0801b020
 8009148:	0801b074 	.word	0x0801b074
 800914c:	0801b0c8 	.word	0x0801b0c8
 8009150:	0801b11c 	.word	0x0801b11c
 8009154:	0801b170 	.word	0x0801b170
 8009158:	0801b1c4 	.word	0x0801b1c4
 800915c:	0801b218 	.word	0x0801b218
 8009160:	0801b26c 	.word	0x0801b26c
 8009164:	0801b2c0 	.word	0x0801b2c0
 8009168:	0801b314 	.word	0x0801b314
 800916c:	0801b368 	.word	0x0801b368
 8009170:	0801b3bc 	.word	0x0801b3bc
 8009174:	0801b410 	.word	0x0801b410
 8009178:	0801b464 	.word	0x0801b464
 800917c:	0801b4b8 	.word	0x0801b4b8
 8009180:	0801b50c 	.word	0x0801b50c
 8009184:	0801b554 	.word	0x0801b554
 8009188:	0801b584 	.word	0x0801b584
 800918c:	0801b5c8 	.word	0x0801b5c8
 8009190:	0801b5f4 	.word	0x0801b5f4

08009194 <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 800919e:	480a      	ldr	r0, [pc, #40]	; (80091c8 <delay_us+0x34>)
 80091a0:	f003 feea 	bl	800cf78 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 80091a4:	4b08      	ldr	r3, [pc, #32]	; (80091c8 <delay_us+0x34>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2200      	movs	r2, #0
 80091aa:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 80091ac:	bf00      	nop
 80091ae:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <delay_us+0x34>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091b4:	88fb      	ldrh	r3, [r7, #6]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d3f9      	bcc.n	80091ae <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 80091ba:	4803      	ldr	r0, [pc, #12]	; (80091c8 <delay_us+0x34>)
 80091bc:	f003 ff4c 	bl	800d058 <HAL_TIM_Base_Stop_IT>
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20007d90 	.word	0x20007d90

080091cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80091d4:	f00c ffb8 	bl	8016148 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	DEBUG_PRINT("[TASK] StartDefaultTask is running!\n");
 80091d8:	4903      	ldr	r1, [pc, #12]	; (80091e8 <StartDefaultTask+0x1c>)
 80091da:	2000      	movs	r0, #0
 80091dc:	f7fc f93c 	bl	8005458 <SEGGER_RTT_printf>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80091e0:	2001      	movs	r0, #1
 80091e2:	f009 fd2d 	bl	8012c40 <osDelay>
 80091e6:	e7fb      	b.n	80091e0 <StartDefaultTask+0x14>
 80091e8:	0801b640 	.word	0x0801b640

080091ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80091ec:	b480      	push	{r7}
 80091ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80091f0:	b672      	cpsid	i
}
 80091f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80091f4:	e7fe      	b.n	80091f4 <Error_Handler+0x8>
	...

080091f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091fe:	2300      	movs	r3, #0
 8009200:	607b      	str	r3, [r7, #4]
 8009202:	4b16      	ldr	r3, [pc, #88]	; (800925c <HAL_MspInit+0x64>)
 8009204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009206:	4a15      	ldr	r2, [pc, #84]	; (800925c <HAL_MspInit+0x64>)
 8009208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800920c:	6453      	str	r3, [r2, #68]	; 0x44
 800920e:	4b13      	ldr	r3, [pc, #76]	; (800925c <HAL_MspInit+0x64>)
 8009210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009216:	607b      	str	r3, [r7, #4]
 8009218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800921a:	2300      	movs	r3, #0
 800921c:	603b      	str	r3, [r7, #0]
 800921e:	4b0f      	ldr	r3, [pc, #60]	; (800925c <HAL_MspInit+0x64>)
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	4a0e      	ldr	r2, [pc, #56]	; (800925c <HAL_MspInit+0x64>)
 8009224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009228:	6413      	str	r3, [r2, #64]	; 0x40
 800922a:	4b0c      	ldr	r3, [pc, #48]	; (800925c <HAL_MspInit+0x64>)
 800922c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009236:	2200      	movs	r2, #0
 8009238:	210f      	movs	r1, #15
 800923a:	f06f 0001 	mvn.w	r0, #1
 800923e:	f001 f966 	bl	800a50e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8009242:	2200      	movs	r2, #0
 8009244:	2105      	movs	r1, #5
 8009246:	2005      	movs	r0, #5
 8009248:	f001 f961 	bl	800a50e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800924c:	2005      	movs	r0, #5
 800924e:	f001 f97a 	bl	800a546 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	40023800 	.word	0x40023800

08009260 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08c      	sub	sp, #48	; 0x30
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009268:	f107 031c 	add.w	r3, r7, #28
 800926c:	2200      	movs	r2, #0
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	605a      	str	r2, [r3, #4]
 8009272:	609a      	str	r2, [r3, #8]
 8009274:	60da      	str	r2, [r3, #12]
 8009276:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a5e      	ldr	r2, [pc, #376]	; (80093f8 <HAL_ADC_MspInit+0x198>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d158      	bne.n	8009334 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009282:	2300      	movs	r3, #0
 8009284:	61bb      	str	r3, [r7, #24]
 8009286:	4b5d      	ldr	r3, [pc, #372]	; (80093fc <HAL_ADC_MspInit+0x19c>)
 8009288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928a:	4a5c      	ldr	r2, [pc, #368]	; (80093fc <HAL_ADC_MspInit+0x19c>)
 800928c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009290:	6453      	str	r3, [r2, #68]	; 0x44
 8009292:	4b5a      	ldr	r3, [pc, #360]	; (80093fc <HAL_ADC_MspInit+0x19c>)
 8009294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929a:	61bb      	str	r3, [r7, #24]
 800929c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800929e:	2300      	movs	r3, #0
 80092a0:	617b      	str	r3, [r7, #20]
 80092a2:	4b56      	ldr	r3, [pc, #344]	; (80093fc <HAL_ADC_MspInit+0x19c>)
 80092a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a6:	4a55      	ldr	r2, [pc, #340]	; (80093fc <HAL_ADC_MspInit+0x19c>)
 80092a8:	f043 0304 	orr.w	r3, r3, #4
 80092ac:	6313      	str	r3, [r2, #48]	; 0x30
 80092ae:	4b53      	ldr	r3, [pc, #332]	; (80093fc <HAL_ADC_MspInit+0x19c>)
 80092b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b2:	f003 0304 	and.w	r3, r3, #4
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC1_CM_Pin;
 80092ba:	2302      	movs	r3, #2
 80092bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80092be:	2303      	movs	r3, #3
 80092c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092c2:	2300      	movs	r3, #0
 80092c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC1_CM_GPIO_Port, &GPIO_InitStruct);
 80092c6:	f107 031c 	add.w	r3, r7, #28
 80092ca:	4619      	mov	r1, r3
 80092cc:	484c      	ldr	r0, [pc, #304]	; (8009400 <HAL_ADC_MspInit+0x1a0>)
 80092ce:	f001 fd65 	bl	800ad9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80092d2:	4b4c      	ldr	r3, [pc, #304]	; (8009404 <HAL_ADC_MspInit+0x1a4>)
 80092d4:	4a4c      	ldr	r2, [pc, #304]	; (8009408 <HAL_ADC_MspInit+0x1a8>)
 80092d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80092d8:	4b4a      	ldr	r3, [pc, #296]	; (8009404 <HAL_ADC_MspInit+0x1a4>)
 80092da:	2200      	movs	r2, #0
 80092dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80092de:	4b49      	ldr	r3, [pc, #292]	; (8009404 <HAL_ADC_MspInit+0x1a4>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80092e4:	4b47      	ldr	r3, [pc, #284]	; (8009404 <HAL_ADC_MspInit+0x1a4>)
 80092e6:	2200      	movs	r2, #0
 80092e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80092ea:	4b46      	ldr	r3, [pc, #280]	; (8009404 <HAL_ADC_MspInit+0x1a4>)
 80092ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80092f2:	4b44      	ldr	r3, [pc, #272]	; (8009404 <HAL_ADC_MspInit+0x1a4>)
 80092f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80092fa:	4b42      	ldr	r3, [pc, #264]	; (8009404 <HAL_ADC_MspInit+0x1a4>)
 80092fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009300:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8009302:	4b40      	ldr	r3, [pc, #256]	; (8009404 <HAL_ADC_MspInit+0x1a4>)
 8009304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009308:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800930a:	4b3e      	ldr	r3, [pc, #248]	; (8009404 <HAL_ADC_MspInit+0x1a4>)
 800930c:	2200      	movs	r2, #0
 800930e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009310:	4b3c      	ldr	r3, [pc, #240]	; (8009404 <HAL_ADC_MspInit+0x1a4>)
 8009312:	2200      	movs	r2, #0
 8009314:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009316:	483b      	ldr	r0, [pc, #236]	; (8009404 <HAL_ADC_MspInit+0x1a4>)
 8009318:	f001 f930 	bl	800a57c <HAL_DMA_Init>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8009322:	f7ff ff63 	bl	80091ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a36      	ldr	r2, [pc, #216]	; (8009404 <HAL_ADC_MspInit+0x1a4>)
 800932a:	639a      	str	r2, [r3, #56]	; 0x38
 800932c:	4a35      	ldr	r2, [pc, #212]	; (8009404 <HAL_ADC_MspInit+0x1a4>)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8009332:	e05d      	b.n	80093f0 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a34      	ldr	r2, [pc, #208]	; (800940c <HAL_ADC_MspInit+0x1ac>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d158      	bne.n	80093f0 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800933e:	2300      	movs	r3, #0
 8009340:	613b      	str	r3, [r7, #16]
 8009342:	4b2e      	ldr	r3, [pc, #184]	; (80093fc <HAL_ADC_MspInit+0x19c>)
 8009344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009346:	4a2d      	ldr	r2, [pc, #180]	; (80093fc <HAL_ADC_MspInit+0x19c>)
 8009348:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800934c:	6453      	str	r3, [r2, #68]	; 0x44
 800934e:	4b2b      	ldr	r3, [pc, #172]	; (80093fc <HAL_ADC_MspInit+0x19c>)
 8009350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009356:	613b      	str	r3, [r7, #16]
 8009358:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800935a:	2300      	movs	r3, #0
 800935c:	60fb      	str	r3, [r7, #12]
 800935e:	4b27      	ldr	r3, [pc, #156]	; (80093fc <HAL_ADC_MspInit+0x19c>)
 8009360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009362:	4a26      	ldr	r2, [pc, #152]	; (80093fc <HAL_ADC_MspInit+0x19c>)
 8009364:	f043 0304 	orr.w	r3, r3, #4
 8009368:	6313      	str	r3, [r2, #48]	; 0x30
 800936a:	4b24      	ldr	r3, [pc, #144]	; (80093fc <HAL_ADC_MspInit+0x19c>)
 800936c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936e:	f003 0304 	and.w	r3, r3, #4
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC2_VM_Pin;
 8009376:	2304      	movs	r3, #4
 8009378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800937a:	2303      	movs	r3, #3
 800937c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800937e:	2300      	movs	r3, #0
 8009380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC2_VM_GPIO_Port, &GPIO_InitStruct);
 8009382:	f107 031c 	add.w	r3, r7, #28
 8009386:	4619      	mov	r1, r3
 8009388:	481d      	ldr	r0, [pc, #116]	; (8009400 <HAL_ADC_MspInit+0x1a0>)
 800938a:	f001 fd07 	bl	800ad9c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800938e:	4b20      	ldr	r3, [pc, #128]	; (8009410 <HAL_ADC_MspInit+0x1b0>)
 8009390:	4a20      	ldr	r2, [pc, #128]	; (8009414 <HAL_ADC_MspInit+0x1b4>)
 8009392:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8009394:	4b1e      	ldr	r3, [pc, #120]	; (8009410 <HAL_ADC_MspInit+0x1b0>)
 8009396:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800939a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800939c:	4b1c      	ldr	r3, [pc, #112]	; (8009410 <HAL_ADC_MspInit+0x1b0>)
 800939e:	2200      	movs	r2, #0
 80093a0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80093a2:	4b1b      	ldr	r3, [pc, #108]	; (8009410 <HAL_ADC_MspInit+0x1b0>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80093a8:	4b19      	ldr	r3, [pc, #100]	; (8009410 <HAL_ADC_MspInit+0x1b0>)
 80093aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093ae:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80093b0:	4b17      	ldr	r3, [pc, #92]	; (8009410 <HAL_ADC_MspInit+0x1b0>)
 80093b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093b6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80093b8:	4b15      	ldr	r3, [pc, #84]	; (8009410 <HAL_ADC_MspInit+0x1b0>)
 80093ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80093be:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80093c0:	4b13      	ldr	r3, [pc, #76]	; (8009410 <HAL_ADC_MspInit+0x1b0>)
 80093c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093c6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80093c8:	4b11      	ldr	r3, [pc, #68]	; (8009410 <HAL_ADC_MspInit+0x1b0>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80093ce:	4b10      	ldr	r3, [pc, #64]	; (8009410 <HAL_ADC_MspInit+0x1b0>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80093d4:	480e      	ldr	r0, [pc, #56]	; (8009410 <HAL_ADC_MspInit+0x1b0>)
 80093d6:	f001 f8d1 	bl	800a57c <HAL_DMA_Init>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 80093e0:	f7ff ff04 	bl	80091ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a0a      	ldr	r2, [pc, #40]	; (8009410 <HAL_ADC_MspInit+0x1b0>)
 80093e8:	639a      	str	r2, [r3, #56]	; 0x38
 80093ea:	4a09      	ldr	r2, [pc, #36]	; (8009410 <HAL_ADC_MspInit+0x1b0>)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6393      	str	r3, [r2, #56]	; 0x38
}
 80093f0:	bf00      	nop
 80093f2:	3730      	adds	r7, #48	; 0x30
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	40012000 	.word	0x40012000
 80093fc:	40023800 	.word	0x40023800
 8009400:	40020800 	.word	0x40020800
 8009404:	20007c88 	.word	0x20007c88
 8009408:	40026410 	.word	0x40026410
 800940c:	40012100 	.word	0x40012100
 8009410:	20007ce8 	.word	0x20007ce8
 8009414:	40026440 	.word	0x40026440

08009418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a18      	ldr	r2, [pc, #96]	; (8009488 <HAL_TIM_Base_MspInit+0x70>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d10e      	bne.n	8009448 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800942a:	2300      	movs	r3, #0
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	4b17      	ldr	r3, [pc, #92]	; (800948c <HAL_TIM_Base_MspInit+0x74>)
 8009430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009432:	4a16      	ldr	r2, [pc, #88]	; (800948c <HAL_TIM_Base_MspInit+0x74>)
 8009434:	f043 0302 	orr.w	r3, r3, #2
 8009438:	6413      	str	r3, [r2, #64]	; 0x40
 800943a:	4b14      	ldr	r3, [pc, #80]	; (800948c <HAL_TIM_Base_MspInit+0x74>)
 800943c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8009446:	e01a      	b.n	800947e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a10      	ldr	r2, [pc, #64]	; (8009490 <HAL_TIM_Base_MspInit+0x78>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d115      	bne.n	800947e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009452:	2300      	movs	r3, #0
 8009454:	60bb      	str	r3, [r7, #8]
 8009456:	4b0d      	ldr	r3, [pc, #52]	; (800948c <HAL_TIM_Base_MspInit+0x74>)
 8009458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945a:	4a0c      	ldr	r2, [pc, #48]	; (800948c <HAL_TIM_Base_MspInit+0x74>)
 800945c:	f043 0320 	orr.w	r3, r3, #32
 8009460:	6413      	str	r3, [r2, #64]	; 0x40
 8009462:	4b0a      	ldr	r3, [pc, #40]	; (800948c <HAL_TIM_Base_MspInit+0x74>)
 8009464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009466:	f003 0320 	and.w	r3, r3, #32
 800946a:	60bb      	str	r3, [r7, #8]
 800946c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800946e:	2200      	movs	r2, #0
 8009470:	2105      	movs	r1, #5
 8009472:	2037      	movs	r0, #55	; 0x37
 8009474:	f001 f84b 	bl	800a50e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009478:	2037      	movs	r0, #55	; 0x37
 800947a:	f001 f864 	bl	800a546 <HAL_NVIC_EnableIRQ>
}
 800947e:	bf00      	nop
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	40000400 	.word	0x40000400
 800948c:	40023800 	.word	0x40023800
 8009490:	40001400 	.word	0x40001400

08009494 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800949c:	f107 030c 	add.w	r3, r7, #12
 80094a0:	2200      	movs	r2, #0
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	605a      	str	r2, [r3, #4]
 80094a6:	609a      	str	r2, [r3, #8]
 80094a8:	60da      	str	r2, [r3, #12]
 80094aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a12      	ldr	r2, [pc, #72]	; (80094fc <HAL_TIM_MspPostInit+0x68>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d11d      	bne.n	80094f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094b6:	2300      	movs	r3, #0
 80094b8:	60bb      	str	r3, [r7, #8]
 80094ba:	4b11      	ldr	r3, [pc, #68]	; (8009500 <HAL_TIM_MspPostInit+0x6c>)
 80094bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094be:	4a10      	ldr	r2, [pc, #64]	; (8009500 <HAL_TIM_MspPostInit+0x6c>)
 80094c0:	f043 0302 	orr.w	r3, r3, #2
 80094c4:	6313      	str	r3, [r2, #48]	; 0x30
 80094c6:	4b0e      	ldr	r3, [pc, #56]	; (8009500 <HAL_TIM_MspPostInit+0x6c>)
 80094c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	60bb      	str	r3, [r7, #8]
 80094d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_BUZZER_Pin;
 80094d2:	2310      	movs	r3, #16
 80094d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094d6:	2302      	movs	r3, #2
 80094d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094de:	2300      	movs	r3, #0
 80094e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80094e2:	2302      	movs	r3, #2
 80094e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM3_BUZZER_GPIO_Port, &GPIO_InitStruct);
 80094e6:	f107 030c 	add.w	r3, r7, #12
 80094ea:	4619      	mov	r1, r3
 80094ec:	4805      	ldr	r0, [pc, #20]	; (8009504 <HAL_TIM_MspPostInit+0x70>)
 80094ee:	f001 fc55 	bl	800ad9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80094f2:	bf00      	nop
 80094f4:	3720      	adds	r7, #32
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	40000400 	.word	0x40000400
 8009500:	40023800 	.word	0x40023800
 8009504:	40020400 	.word	0x40020400

08009508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	; 0x28
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009510:	f107 0314 	add.w	r3, r7, #20
 8009514:	2200      	movs	r2, #0
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	605a      	str	r2, [r3, #4]
 800951a:	609a      	str	r2, [r3, #8]
 800951c:	60da      	str	r2, [r3, #12]
 800951e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a4c      	ldr	r2, [pc, #304]	; (8009658 <HAL_UART_MspInit+0x150>)
 8009526:	4293      	cmp	r3, r2
 8009528:	f040 8092 	bne.w	8009650 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800952c:	2300      	movs	r3, #0
 800952e:	613b      	str	r3, [r7, #16]
 8009530:	4b4a      	ldr	r3, [pc, #296]	; (800965c <HAL_UART_MspInit+0x154>)
 8009532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009534:	4a49      	ldr	r2, [pc, #292]	; (800965c <HAL_UART_MspInit+0x154>)
 8009536:	f043 0320 	orr.w	r3, r3, #32
 800953a:	6453      	str	r3, [r2, #68]	; 0x44
 800953c:	4b47      	ldr	r3, [pc, #284]	; (800965c <HAL_UART_MspInit+0x154>)
 800953e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009540:	f003 0320 	and.w	r3, r3, #32
 8009544:	613b      	str	r3, [r7, #16]
 8009546:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009548:	2300      	movs	r3, #0
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	4b43      	ldr	r3, [pc, #268]	; (800965c <HAL_UART_MspInit+0x154>)
 800954e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009550:	4a42      	ldr	r2, [pc, #264]	; (800965c <HAL_UART_MspInit+0x154>)
 8009552:	f043 0304 	orr.w	r3, r3, #4
 8009556:	6313      	str	r3, [r2, #48]	; 0x30
 8009558:	4b40      	ldr	r3, [pc, #256]	; (800965c <HAL_UART_MspInit+0x154>)
 800955a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955c:	f003 0304 	and.w	r3, r3, #4
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 8009564:	23c0      	movs	r3, #192	; 0xc0
 8009566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009568:	2302      	movs	r3, #2
 800956a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800956c:	2300      	movs	r3, #0
 800956e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009570:	2303      	movs	r3, #3
 8009572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8009574:	2308      	movs	r3, #8
 8009576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009578:	f107 0314 	add.w	r3, r7, #20
 800957c:	4619      	mov	r1, r3
 800957e:	4838      	ldr	r0, [pc, #224]	; (8009660 <HAL_UART_MspInit+0x158>)
 8009580:	f001 fc0c 	bl	800ad9c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream7;
 8009584:	4b37      	ldr	r3, [pc, #220]	; (8009664 <HAL_UART_MspInit+0x15c>)
 8009586:	4a38      	ldr	r2, [pc, #224]	; (8009668 <HAL_UART_MspInit+0x160>)
 8009588:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800958a:	4b36      	ldr	r3, [pc, #216]	; (8009664 <HAL_UART_MspInit+0x15c>)
 800958c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8009590:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009592:	4b34      	ldr	r3, [pc, #208]	; (8009664 <HAL_UART_MspInit+0x15c>)
 8009594:	2240      	movs	r2, #64	; 0x40
 8009596:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009598:	4b32      	ldr	r3, [pc, #200]	; (8009664 <HAL_UART_MspInit+0x15c>)
 800959a:	2200      	movs	r2, #0
 800959c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800959e:	4b31      	ldr	r3, [pc, #196]	; (8009664 <HAL_UART_MspInit+0x15c>)
 80095a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80095a4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80095a6:	4b2f      	ldr	r3, [pc, #188]	; (8009664 <HAL_UART_MspInit+0x15c>)
 80095a8:	2200      	movs	r2, #0
 80095aa:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80095ac:	4b2d      	ldr	r3, [pc, #180]	; (8009664 <HAL_UART_MspInit+0x15c>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80095b2:	4b2c      	ldr	r3, [pc, #176]	; (8009664 <HAL_UART_MspInit+0x15c>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80095b8:	4b2a      	ldr	r3, [pc, #168]	; (8009664 <HAL_UART_MspInit+0x15c>)
 80095ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80095be:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80095c0:	4b28      	ldr	r3, [pc, #160]	; (8009664 <HAL_UART_MspInit+0x15c>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80095c6:	4827      	ldr	r0, [pc, #156]	; (8009664 <HAL_UART_MspInit+0x15c>)
 80095c8:	f000 ffd8 	bl	800a57c <HAL_DMA_Init>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80095d2:	f7ff fe0b 	bl	80091ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a22      	ldr	r2, [pc, #136]	; (8009664 <HAL_UART_MspInit+0x15c>)
 80095da:	639a      	str	r2, [r3, #56]	; 0x38
 80095dc:	4a21      	ldr	r2, [pc, #132]	; (8009664 <HAL_UART_MspInit+0x15c>)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80095e2:	4b22      	ldr	r3, [pc, #136]	; (800966c <HAL_UART_MspInit+0x164>)
 80095e4:	4a22      	ldr	r2, [pc, #136]	; (8009670 <HAL_UART_MspInit+0x168>)
 80095e6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80095e8:	4b20      	ldr	r3, [pc, #128]	; (800966c <HAL_UART_MspInit+0x164>)
 80095ea:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80095ee:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80095f0:	4b1e      	ldr	r3, [pc, #120]	; (800966c <HAL_UART_MspInit+0x164>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80095f6:	4b1d      	ldr	r3, [pc, #116]	; (800966c <HAL_UART_MspInit+0x164>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80095fc:	4b1b      	ldr	r3, [pc, #108]	; (800966c <HAL_UART_MspInit+0x164>)
 80095fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009602:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009604:	4b19      	ldr	r3, [pc, #100]	; (800966c <HAL_UART_MspInit+0x164>)
 8009606:	2200      	movs	r2, #0
 8009608:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800960a:	4b18      	ldr	r3, [pc, #96]	; (800966c <HAL_UART_MspInit+0x164>)
 800960c:	2200      	movs	r2, #0
 800960e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8009610:	4b16      	ldr	r3, [pc, #88]	; (800966c <HAL_UART_MspInit+0x164>)
 8009612:	2200      	movs	r2, #0
 8009614:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8009616:	4b15      	ldr	r3, [pc, #84]	; (800966c <HAL_UART_MspInit+0x164>)
 8009618:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800961c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800961e:	4b13      	ldr	r3, [pc, #76]	; (800966c <HAL_UART_MspInit+0x164>)
 8009620:	2200      	movs	r2, #0
 8009622:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8009624:	4811      	ldr	r0, [pc, #68]	; (800966c <HAL_UART_MspInit+0x164>)
 8009626:	f000 ffa9 	bl	800a57c <HAL_DMA_Init>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8009630:	f7ff fddc 	bl	80091ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a0d      	ldr	r2, [pc, #52]	; (800966c <HAL_UART_MspInit+0x164>)
 8009638:	63da      	str	r2, [r3, #60]	; 0x3c
 800963a:	4a0c      	ldr	r2, [pc, #48]	; (800966c <HAL_UART_MspInit+0x164>)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8009640:	2200      	movs	r2, #0
 8009642:	2105      	movs	r1, #5
 8009644:	2047      	movs	r0, #71	; 0x47
 8009646:	f000 ff62 	bl	800a50e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800964a:	2047      	movs	r0, #71	; 0x47
 800964c:	f000 ff7b 	bl	800a546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8009650:	bf00      	nop
 8009652:	3728      	adds	r7, #40	; 0x28
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	40011400 	.word	0x40011400
 800965c:	40023800 	.word	0x40023800
 8009660:	40020800 	.word	0x40020800
 8009664:	20007e20 	.word	0x20007e20
 8009668:	400264b8 	.word	0x400264b8
 800966c:	20007e80 	.word	0x20007e80
 8009670:	40026428 	.word	0x40026428

08009674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009674:	b480      	push	{r7}
 8009676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009678:	e7fe      	b.n	8009678 <NMI_Handler+0x4>

0800967a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800967a:	b480      	push	{r7}
 800967c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800967e:	e7fe      	b.n	800967e <HardFault_Handler+0x4>

08009680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009680:	b480      	push	{r7}
 8009682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009684:	e7fe      	b.n	8009684 <MemManage_Handler+0x4>

08009686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009686:	b480      	push	{r7}
 8009688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800968a:	e7fe      	b.n	800968a <BusFault_Handler+0x4>

0800968c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800968c:	b480      	push	{r7}
 800968e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009690:	e7fe      	b.n	8009690 <UsageFault_Handler+0x4>

08009692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009692:	b480      	push	{r7}
 8009694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009696:	bf00      	nop
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 80096a4:	4b09      	ldr	r3, [pc, #36]	; (80096cc <SysTick_Handler+0x2c>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d004      	beq.n	80096b6 <SysTick_Handler+0x16>

		TimingDelay--;
 80096ac:	4b07      	ldr	r3, [pc, #28]	; (80096cc <SysTick_Handler+0x2c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	4a06      	ldr	r2, [pc, #24]	; (80096cc <SysTick_Handler+0x2c>)
 80096b4:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80096b6:	f000 f9f9 	bl	8009aac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80096ba:	f00b faa1 	bl	8014c00 <xTaskGetSchedulerState>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d001      	beq.n	80096c8 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80096c4:	f00c fae0 	bl	8015c88 <tickFreeRTOS>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80096c8:	bf00      	nop
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	20007ef0 	.word	0x20007ef0

080096d0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80096d4:	bf00      	nop
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
	...

080096e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80096e4:	4802      	ldr	r0, [pc, #8]	; (80096f0 <TIM7_IRQHandler+0x10>)
 80096e6:	f003 fe77 	bl	800d3d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80096ea:	bf00      	nop
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20007d90 	.word	0x20007d90

080096f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80096f8:	4802      	ldr	r0, [pc, #8]	; (8009704 <DMA2_Stream0_IRQHandler+0x10>)
 80096fa:	f001 f8d7 	bl	800a8ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80096fe:	bf00      	nop
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20007c88 	.word	0x20007c88

08009708 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800970c:	4802      	ldr	r0, [pc, #8]	; (8009718 <DMA2_Stream1_IRQHandler+0x10>)
 800970e:	f001 f8cd 	bl	800a8ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8009712:	bf00      	nop
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	20007e80 	.word	0x20007e80

0800971c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8009720:	4802      	ldr	r0, [pc, #8]	; (800972c <DMA2_Stream2_IRQHandler+0x10>)
 8009722:	f001 f8c3 	bl	800a8ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8009726:	bf00      	nop
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	20007ce8 	.word	0x20007ce8

08009730 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8009734:	4802      	ldr	r0, [pc, #8]	; (8009740 <OTG_FS_IRQHandler+0x10>)
 8009736:	f001 fe2a 	bl	800b38e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800973a:	bf00      	nop
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	2000d45c 	.word	0x2000d45c

08009744 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8009748:	4802      	ldr	r0, [pc, #8]	; (8009754 <DMA2_Stream7_IRQHandler+0x10>)
 800974a:	f001 f8af 	bl	800a8ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800974e:	bf00      	nop
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	20007e20 	.word	0x20007e20

08009758 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 800975e:	4b1d      	ldr	r3, [pc, #116]	; (80097d4 <USART6_IRQHandler+0x7c>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0320 	and.w	r3, r3, #32
 8009768:	2b20      	cmp	r3, #32
 800976a:	d12b      	bne.n	80097c4 <USART6_IRQHandler+0x6c>
 800976c:	4b19      	ldr	r3, [pc, #100]	; (80097d4 <USART6_IRQHandler+0x7c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	f003 0320 	and.w	r3, r3, #32
 8009776:	2b00      	cmp	r3, #0
 8009778:	d024      	beq.n	80097c4 <USART6_IRQHandler+0x6c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800977a:	2300      	movs	r3, #0
 800977c:	607b      	str	r3, [r7, #4]
		g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 800977e:	4b15      	ldr	r3, [pc, #84]	; (80097d4 <USART6_IRQHandler+0x7c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	b2da      	uxtb	r2, r3
 8009786:	4b14      	ldr	r3, [pc, #80]	; (80097d8 <USART6_IRQHandler+0x80>)
 8009788:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 800978a:	2300      	movs	r3, #0
 800978c:	603b      	str	r3, [r7, #0]
 800978e:	4b11      	ldr	r3, [pc, #68]	; (80097d4 <USART6_IRQHandler+0x7c>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	603b      	str	r3, [r7, #0]
 8009796:	4b0f      	ldr	r3, [pc, #60]	; (80097d4 <USART6_IRQHandler+0x7c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	603b      	str	r3, [r7, #0]
 800979e:	683b      	ldr	r3, [r7, #0]
		xQueueSendFromISR(uartqueue, &g_rx_buffer, &xHigherPriorityTaskWoken);	// Queue에서 멈춤
 80097a0:	4b0e      	ldr	r3, [pc, #56]	; (80097dc <USART6_IRQHandler+0x84>)
 80097a2:	6818      	ldr	r0, [r3, #0]
 80097a4:	1d3a      	adds	r2, r7, #4
 80097a6:	2300      	movs	r3, #0
 80097a8:	490b      	ldr	r1, [pc, #44]	; (80097d8 <USART6_IRQHandler+0x80>)
 80097aa:	f009 fda3 	bl	80132f4 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d007      	beq.n	80097c4 <USART6_IRQHandler+0x6c>
 80097b4:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <USART6_IRQHandler+0x88>)
 80097b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80097c4:	4803      	ldr	r0, [pc, #12]	; (80097d4 <USART6_IRQHandler+0x7c>)
 80097c6:	f004 fd1f 	bl	800e208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80097ca:	bf00      	nop
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20007dd8 	.word	0x20007dd8
 80097d8:	20007eec 	.word	0x20007eec
 80097dc:	200068f8 	.word	0x200068f8
 80097e0:	e000ed04 	.word	0xe000ed04

080097e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0
  return 1;
 80097e8:	2301      	movs	r3, #1
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <_kill>:

int _kill(int pid, int sig)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80097fe:	f00e f94b 	bl	8017a98 <__errno>
 8009802:	4603      	mov	r3, r0
 8009804:	2216      	movs	r2, #22
 8009806:	601a      	str	r2, [r3, #0]
  return -1;
 8009808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800980c:	4618      	mov	r0, r3
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <_exit>:

void _exit (int status)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800981c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff ffe7 	bl	80097f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009826:	e7fe      	b.n	8009826 <_exit+0x12>

08009828 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009834:	2300      	movs	r3, #0
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	e00a      	b.n	8009850 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800983a:	f3af 8000 	nop.w
 800983e:	4601      	mov	r1, r0
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	60ba      	str	r2, [r7, #8]
 8009846:	b2ca      	uxtb	r2, r1
 8009848:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	3301      	adds	r3, #1
 800984e:	617b      	str	r3, [r7, #20]
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	429a      	cmp	r2, r3
 8009856:	dbf0      	blt.n	800983a <_read+0x12>
  }

  return len;
 8009858:	687b      	ldr	r3, [r7, #4]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b086      	sub	sp, #24
 8009866:	af00      	add	r7, sp, #0
 8009868:	60f8      	str	r0, [r7, #12]
 800986a:	60b9      	str	r1, [r7, #8]
 800986c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800986e:	2300      	movs	r3, #0
 8009870:	617b      	str	r3, [r7, #20]
 8009872:	e009      	b.n	8009888 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	60ba      	str	r2, [r7, #8]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	4618      	mov	r0, r3
 800987e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	3301      	adds	r3, #1
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	429a      	cmp	r2, r3
 800988e:	dbf1      	blt.n	8009874 <_write+0x12>
  }
  return len;
 8009890:	687b      	ldr	r3, [r7, #4]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <_close>:

int _close(int file)
{
 800989a:	b480      	push	{r7}
 800989c:	b083      	sub	sp, #12
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80098a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b083      	sub	sp, #12
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80098c2:	605a      	str	r2, [r3, #4]
  return 0;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <_isatty>:

int _isatty(int file)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80098da:	2301      	movs	r3, #1
}
 80098dc:	4618      	mov	r0, r3
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
	...

08009904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800990c:	4a14      	ldr	r2, [pc, #80]	; (8009960 <_sbrk+0x5c>)
 800990e:	4b15      	ldr	r3, [pc, #84]	; (8009964 <_sbrk+0x60>)
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009918:	4b13      	ldr	r3, [pc, #76]	; (8009968 <_sbrk+0x64>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d102      	bne.n	8009926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009920:	4b11      	ldr	r3, [pc, #68]	; (8009968 <_sbrk+0x64>)
 8009922:	4a12      	ldr	r2, [pc, #72]	; (800996c <_sbrk+0x68>)
 8009924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009926:	4b10      	ldr	r3, [pc, #64]	; (8009968 <_sbrk+0x64>)
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4413      	add	r3, r2
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	429a      	cmp	r2, r3
 8009932:	d207      	bcs.n	8009944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009934:	f00e f8b0 	bl	8017a98 <__errno>
 8009938:	4603      	mov	r3, r0
 800993a:	220c      	movs	r2, #12
 800993c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800993e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009942:	e009      	b.n	8009958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009944:	4b08      	ldr	r3, [pc, #32]	; (8009968 <_sbrk+0x64>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800994a:	4b07      	ldr	r3, [pc, #28]	; (8009968 <_sbrk+0x64>)
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4413      	add	r3, r2
 8009952:	4a05      	ldr	r2, [pc, #20]	; (8009968 <_sbrk+0x64>)
 8009954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009956:	68fb      	ldr	r3, [r7, #12]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	20020000 	.word	0x20020000
 8009964:	00000400 	.word	0x00000400
 8009968:	20007ef4 	.word	0x20007ef4
 800996c:	2000dcb0 	.word	0x2000dcb0

08009970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009970:	b480      	push	{r7}
 8009972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009974:	4b06      	ldr	r3, [pc, #24]	; (8009990 <SystemInit+0x20>)
 8009976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800997a:	4a05      	ldr	r2, [pc, #20]	; (8009990 <SystemInit+0x20>)
 800997c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009984:	bf00      	nop
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	e000ed00 	.word	0xe000ed00

08009994 <vApplicationIdleHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook (void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	af00      	add	r7, sp, #0
	printf("."); fflush(stdout);
 8009998:	202e      	movs	r0, #46	; 0x2e
 800999a:	f00d fec5 	bl	8017728 <putchar>
 800999e:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <vApplicationIdleHook+0x1c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	4618      	mov	r0, r3
 80099a6:	f00d fdd7 	bl	8017558 <fflush>
}
 80099aa:	bf00      	nop
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	20000498 	.word	0x20000498

080099b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80099b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80099ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80099b8:	f7ff ffda 	bl	8009970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80099bc:	480c      	ldr	r0, [pc, #48]	; (80099f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80099be:	490d      	ldr	r1, [pc, #52]	; (80099f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80099c0:	4a0d      	ldr	r2, [pc, #52]	; (80099f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80099c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80099c4:	e002      	b.n	80099cc <LoopCopyDataInit>

080099c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80099c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80099c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80099ca:	3304      	adds	r3, #4

080099cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80099cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80099ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80099d0:	d3f9      	bcc.n	80099c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80099d2:	4a0a      	ldr	r2, [pc, #40]	; (80099fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80099d4:	4c0a      	ldr	r4, [pc, #40]	; (8009a00 <LoopFillZerobss+0x22>)
  movs r3, #0
 80099d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80099d8:	e001      	b.n	80099de <LoopFillZerobss>

080099da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80099da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80099dc:	3204      	adds	r2, #4

080099de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80099de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80099e0:	d3fb      	bcc.n	80099da <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80099e2:	f00e f85f 	bl	8017aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80099e6:	f7fe ffd9 	bl	800899c <main>
  bx  lr    
 80099ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80099ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80099f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80099f4:	20000608 	.word	0x20000608
  ldr r2, =_sidata
 80099f8:	0801c6f4 	.word	0x0801c6f4
  ldr r2, =_sbss
 80099fc:	200040d0 	.word	0x200040d0
  ldr r4, =_ebss
 8009a00:	2000dcac 	.word	0x2000dcac

08009a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009a04:	e7fe      	b.n	8009a04 <ADC_IRQHandler>
	...

08009a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009a0c:	4b0e      	ldr	r3, [pc, #56]	; (8009a48 <HAL_Init+0x40>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a0d      	ldr	r2, [pc, #52]	; (8009a48 <HAL_Init+0x40>)
 8009a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009a18:	4b0b      	ldr	r3, [pc, #44]	; (8009a48 <HAL_Init+0x40>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a0a      	ldr	r2, [pc, #40]	; (8009a48 <HAL_Init+0x40>)
 8009a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009a24:	4b08      	ldr	r3, [pc, #32]	; (8009a48 <HAL_Init+0x40>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a07      	ldr	r2, [pc, #28]	; (8009a48 <HAL_Init+0x40>)
 8009a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009a30:	2003      	movs	r0, #3
 8009a32:	f000 fd61 	bl	800a4f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009a36:	200f      	movs	r0, #15
 8009a38:	f000 f808 	bl	8009a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009a3c:	f7ff fbdc 	bl	80091f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	40023c00 	.word	0x40023c00

08009a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009a54:	4b12      	ldr	r3, [pc, #72]	; (8009aa0 <HAL_InitTick+0x54>)
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	4b12      	ldr	r3, [pc, #72]	; (8009aa4 <HAL_InitTick+0x58>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 fd79 	bl	800a562 <HAL_SYSTICK_Config>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e00e      	b.n	8009a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b0f      	cmp	r3, #15
 8009a7e:	d80a      	bhi.n	8009a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009a80:	2200      	movs	r2, #0
 8009a82:	6879      	ldr	r1, [r7, #4]
 8009a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a88:	f000 fd41 	bl	800a50e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009a8c:	4a06      	ldr	r2, [pc, #24]	; (8009aa8 <HAL_InitTick+0x5c>)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	e000      	b.n	8009a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20000340 	.word	0x20000340
 8009aa4:	20000348 	.word	0x20000348
 8009aa8:	20000344 	.word	0x20000344

08009aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009aac:	b480      	push	{r7}
 8009aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ab0:	4b06      	ldr	r3, [pc, #24]	; (8009acc <HAL_IncTick+0x20>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <HAL_IncTick+0x24>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4413      	add	r3, r2
 8009abc:	4a04      	ldr	r2, [pc, #16]	; (8009ad0 <HAL_IncTick+0x24>)
 8009abe:	6013      	str	r3, [r2, #0]
}
 8009ac0:	bf00      	nop
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	20000348 	.word	0x20000348
 8009ad0:	20007ef8 	.word	0x20007ef8

08009ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8009ad8:	4b03      	ldr	r3, [pc, #12]	; (8009ae8 <HAL_GetTick+0x14>)
 8009ada:	681b      	ldr	r3, [r3, #0]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	20007ef8 	.word	0x20007ef8

08009aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009af4:	f7ff ffee 	bl	8009ad4 <HAL_GetTick>
 8009af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b04:	d005      	beq.n	8009b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009b06:	4b0a      	ldr	r3, [pc, #40]	; (8009b30 <HAL_Delay+0x44>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4413      	add	r3, r2
 8009b10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009b12:	bf00      	nop
 8009b14:	f7ff ffde 	bl	8009ad4 <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d8f7      	bhi.n	8009b14 <HAL_Delay+0x28>
  {
  }
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	20000348 	.word	0x20000348

08009b34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d101      	bne.n	8009b4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e033      	b.n	8009bb2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d109      	bne.n	8009b66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fb84 	bl	8009260 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6a:	f003 0310 	and.w	r3, r3, #16
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d118      	bne.n	8009ba4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009b7a:	f023 0302 	bic.w	r3, r3, #2
 8009b7e:	f043 0202 	orr.w	r2, r3, #2
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fa68 	bl	800a05c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b96:	f023 0303 	bic.w	r3, r3, #3
 8009b9a:	f043 0201 	orr.w	r2, r3, #1
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	641a      	str	r2, [r3, #64]	; 0x40
 8009ba2:	e001      	b.n	8009ba8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d101      	bne.n	8009bda <HAL_ADC_Start_DMA+0x1e>
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	e0e9      	b.n	8009dae <HAL_ADC_Start_DMA+0x1f2>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f003 0301 	and.w	r3, r3, #1
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d018      	beq.n	8009c22 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689a      	ldr	r2, [r3, #8]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0201 	orr.w	r2, r2, #1
 8009bfe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009c00:	4b6d      	ldr	r3, [pc, #436]	; (8009db8 <HAL_ADC_Start_DMA+0x1fc>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a6d      	ldr	r2, [pc, #436]	; (8009dbc <HAL_ADC_Start_DMA+0x200>)
 8009c06:	fba2 2303 	umull	r2, r3, r2, r3
 8009c0a:	0c9a      	lsrs	r2, r3, #18
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	4413      	add	r3, r2
 8009c12:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8009c14:	e002      	b.n	8009c1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1f9      	bne.n	8009c16 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c30:	d107      	bne.n	8009c42 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	689a      	ldr	r2, [r3, #8]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c40:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	f040 80a1 	bne.w	8009d94 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009c5a:	f023 0301 	bic.w	r3, r3, #1
 8009c5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d007      	beq.n	8009c84 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009c7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c90:	d106      	bne.n	8009ca0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c96:	f023 0206 	bic.w	r2, r3, #6
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	645a      	str	r2, [r3, #68]	; 0x44
 8009c9e:	e002      	b.n	8009ca6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009cae:	4b44      	ldr	r3, [pc, #272]	; (8009dc0 <HAL_ADC_Start_DMA+0x204>)
 8009cb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb6:	4a43      	ldr	r2, [pc, #268]	; (8009dc4 <HAL_ADC_Start_DMA+0x208>)
 8009cb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cbe:	4a42      	ldr	r2, [pc, #264]	; (8009dc8 <HAL_ADC_Start_DMA+0x20c>)
 8009cc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc6:	4a41      	ldr	r2, [pc, #260]	; (8009dcc <HAL_ADC_Start_DMA+0x210>)
 8009cc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009cd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009ce2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cf2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	334c      	adds	r3, #76	; 0x4c
 8009cfe:	4619      	mov	r1, r3
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f000 fce8 	bl	800a6d8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	f003 031f 	and.w	r3, r3, #31
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d12a      	bne.n	8009d6a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a2d      	ldr	r2, [pc, #180]	; (8009dd0 <HAL_ADC_Start_DMA+0x214>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d015      	beq.n	8009d4a <HAL_ADC_Start_DMA+0x18e>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a2c      	ldr	r2, [pc, #176]	; (8009dd4 <HAL_ADC_Start_DMA+0x218>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d105      	bne.n	8009d34 <HAL_ADC_Start_DMA+0x178>
 8009d28:	4b25      	ldr	r3, [pc, #148]	; (8009dc0 <HAL_ADC_Start_DMA+0x204>)
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	f003 031f 	and.w	r3, r3, #31
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00a      	beq.n	8009d4a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a27      	ldr	r2, [pc, #156]	; (8009dd8 <HAL_ADC_Start_DMA+0x21c>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d136      	bne.n	8009dac <HAL_ADC_Start_DMA+0x1f0>
 8009d3e:	4b20      	ldr	r3, [pc, #128]	; (8009dc0 <HAL_ADC_Start_DMA+0x204>)
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	f003 0310 	and.w	r3, r3, #16
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d130      	bne.n	8009dac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d129      	bne.n	8009dac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	689a      	ldr	r2, [r3, #8]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009d66:	609a      	str	r2, [r3, #8]
 8009d68:	e020      	b.n	8009dac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a18      	ldr	r2, [pc, #96]	; (8009dd0 <HAL_ADC_Start_DMA+0x214>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d11b      	bne.n	8009dac <HAL_ADC_Start_DMA+0x1f0>
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d114      	bne.n	8009dac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	689a      	ldr	r2, [r3, #8]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009d90:	609a      	str	r2, [r3, #8]
 8009d92:	e00b      	b.n	8009dac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d98:	f043 0210 	orr.w	r2, r3, #16
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da4:	f043 0201 	orr.w	r2, r3, #1
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3718      	adds	r7, #24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20000340 	.word	0x20000340
 8009dbc:	431bde83 	.word	0x431bde83
 8009dc0:	40012300 	.word	0x40012300
 8009dc4:	0800a255 	.word	0x0800a255
 8009dc8:	0800a30f 	.word	0x0800a30f
 8009dcc:	0800a32b 	.word	0x0800a32b
 8009dd0:	40012000 	.word	0x40012000
 8009dd4:	40012100 	.word	0x40012100
 8009dd8:	40012200 	.word	0x40012200

08009ddc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d101      	bne.n	8009e34 <HAL_ADC_ConfigChannel+0x1c>
 8009e30:	2302      	movs	r3, #2
 8009e32:	e105      	b.n	800a040 <HAL_ADC_ConfigChannel+0x228>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b09      	cmp	r3, #9
 8009e42:	d925      	bls.n	8009e90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68d9      	ldr	r1, [r3, #12]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	461a      	mov	r2, r3
 8009e52:	4613      	mov	r3, r2
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	4413      	add	r3, r2
 8009e58:	3b1e      	subs	r3, #30
 8009e5a:	2207      	movs	r2, #7
 8009e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e60:	43da      	mvns	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	400a      	ands	r2, r1
 8009e68:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68d9      	ldr	r1, [r3, #12]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	005b      	lsls	r3, r3, #1
 8009e80:	4403      	add	r3, r0
 8009e82:	3b1e      	subs	r3, #30
 8009e84:	409a      	lsls	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	430a      	orrs	r2, r1
 8009e8c:	60da      	str	r2, [r3, #12]
 8009e8e:	e022      	b.n	8009ed6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6919      	ldr	r1, [r3, #16]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	005b      	lsls	r3, r3, #1
 8009ea2:	4413      	add	r3, r2
 8009ea4:	2207      	movs	r2, #7
 8009ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eaa:	43da      	mvns	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	400a      	ands	r2, r1
 8009eb2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6919      	ldr	r1, [r3, #16]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	689a      	ldr	r2, [r3, #8]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	4403      	add	r3, r0
 8009ecc:	409a      	lsls	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	430a      	orrs	r2, r1
 8009ed4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	2b06      	cmp	r3, #6
 8009edc:	d824      	bhi.n	8009f28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	685a      	ldr	r2, [r3, #4]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	3b05      	subs	r3, #5
 8009ef0:	221f      	movs	r2, #31
 8009ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef6:	43da      	mvns	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	400a      	ands	r2, r1
 8009efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	4613      	mov	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4413      	add	r3, r2
 8009f18:	3b05      	subs	r3, #5
 8009f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	635a      	str	r2, [r3, #52]	; 0x34
 8009f26:	e04c      	b.n	8009fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	2b0c      	cmp	r3, #12
 8009f2e:	d824      	bhi.n	8009f7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	685a      	ldr	r2, [r3, #4]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	3b23      	subs	r3, #35	; 0x23
 8009f42:	221f      	movs	r2, #31
 8009f44:	fa02 f303 	lsl.w	r3, r2, r3
 8009f48:	43da      	mvns	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	400a      	ands	r2, r1
 8009f50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	4618      	mov	r0, r3
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	685a      	ldr	r2, [r3, #4]
 8009f64:	4613      	mov	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	3b23      	subs	r3, #35	; 0x23
 8009f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	430a      	orrs	r2, r1
 8009f76:	631a      	str	r2, [r3, #48]	; 0x30
 8009f78:	e023      	b.n	8009fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	4613      	mov	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4413      	add	r3, r2
 8009f8a:	3b41      	subs	r3, #65	; 0x41
 8009f8c:	221f      	movs	r2, #31
 8009f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f92:	43da      	mvns	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	400a      	ands	r2, r1
 8009f9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	4618      	mov	r0, r3
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	3b41      	subs	r3, #65	; 0x41
 8009fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009fc2:	4b22      	ldr	r3, [pc, #136]	; (800a04c <HAL_ADC_ConfigChannel+0x234>)
 8009fc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a21      	ldr	r2, [pc, #132]	; (800a050 <HAL_ADC_ConfigChannel+0x238>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d109      	bne.n	8009fe4 <HAL_ADC_ConfigChannel+0x1cc>
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b12      	cmp	r3, #18
 8009fd6:	d105      	bne.n	8009fe4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a19      	ldr	r2, [pc, #100]	; (800a050 <HAL_ADC_ConfigChannel+0x238>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d123      	bne.n	800a036 <HAL_ADC_ConfigChannel+0x21e>
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b10      	cmp	r3, #16
 8009ff4:	d003      	beq.n	8009ffe <HAL_ADC_ConfigChannel+0x1e6>
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b11      	cmp	r3, #17
 8009ffc:	d11b      	bne.n	800a036 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b10      	cmp	r3, #16
 800a010:	d111      	bne.n	800a036 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a012:	4b10      	ldr	r3, [pc, #64]	; (800a054 <HAL_ADC_ConfigChannel+0x23c>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a10      	ldr	r2, [pc, #64]	; (800a058 <HAL_ADC_ConfigChannel+0x240>)
 800a018:	fba2 2303 	umull	r2, r3, r2, r3
 800a01c:	0c9a      	lsrs	r2, r3, #18
 800a01e:	4613      	mov	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	005b      	lsls	r3, r3, #1
 800a026:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a028:	e002      	b.n	800a030 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1f9      	bne.n	800a02a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	40012300 	.word	0x40012300
 800a050:	40012000 	.word	0x40012000
 800a054:	20000340 	.word	0x20000340
 800a058:	431bde83 	.word	0x431bde83

0800a05c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a064:	4b79      	ldr	r3, [pc, #484]	; (800a24c <ADC_Init+0x1f0>)
 800a066:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	431a      	orrs	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	685a      	ldr	r2, [r3, #4]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a090:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6859      	ldr	r1, [r3, #4]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	021a      	lsls	r2, r3, #8
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a0b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	6859      	ldr	r1, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	689a      	ldr	r2, [r3, #8]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6899      	ldr	r1, [r3, #8]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68da      	ldr	r2, [r3, #12]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ee:	4a58      	ldr	r2, [pc, #352]	; (800a250 <ADC_Init+0x1f4>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d022      	beq.n	800a13a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	689a      	ldr	r2, [r3, #8]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a102:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6899      	ldr	r1, [r3, #8]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	689a      	ldr	r2, [r3, #8]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	6899      	ldr	r1, [r3, #8]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	430a      	orrs	r2, r1
 800a136:	609a      	str	r2, [r3, #8]
 800a138:	e00f      	b.n	800a15a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	689a      	ldr	r2, [r3, #8]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a148:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a158:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689a      	ldr	r2, [r3, #8]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f022 0202 	bic.w	r2, r2, #2
 800a168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	6899      	ldr	r1, [r3, #8]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	7e1b      	ldrb	r3, [r3, #24]
 800a174:	005a      	lsls	r2, r3, #1
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d01b      	beq.n	800a1c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685a      	ldr	r2, [r3, #4]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a196:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a1a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6859      	ldr	r1, [r3, #4]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	035a      	lsls	r2, r3, #13
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	430a      	orrs	r2, r1
 800a1bc:	605a      	str	r2, [r3, #4]
 800a1be:	e007      	b.n	800a1d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a1de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	69db      	ldr	r3, [r3, #28]
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	051a      	lsls	r2, r3, #20
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	689a      	ldr	r2, [r3, #8]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a204:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6899      	ldr	r1, [r3, #8]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a212:	025a      	lsls	r2, r3, #9
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	430a      	orrs	r2, r1
 800a21a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689a      	ldr	r2, [r3, #8]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a22a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6899      	ldr	r1, [r3, #8]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	029a      	lsls	r2, r3, #10
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	430a      	orrs	r2, r1
 800a23e:	609a      	str	r2, [r3, #8]
}
 800a240:	bf00      	nop
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	40012300 	.word	0x40012300
 800a250:	0f000001 	.word	0x0f000001

0800a254 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a260:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a266:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d13c      	bne.n	800a2e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a272:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d12b      	bne.n	800a2e0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d127      	bne.n	800a2e0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d006      	beq.n	800a2ac <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d119      	bne.n	800a2e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f022 0220 	bic.w	r2, r2, #32
 800a2ba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d105      	bne.n	800a2e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d8:	f043 0201 	orr.w	r2, r3, #1
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f7ff fd7b 	bl	8009ddc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a2e6:	e00e      	b.n	800a306 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ec:	f003 0310 	and.w	r3, r3, #16
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d003      	beq.n	800a2fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f7ff fd85 	bl	8009e04 <HAL_ADC_ErrorCallback>
}
 800a2fa:	e004      	b.n	800a306 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	4798      	blx	r3
}
 800a306:	bf00      	nop
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f7ff fd67 	bl	8009df0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a322:	bf00      	nop
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b084      	sub	sp, #16
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a336:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2240      	movs	r2, #64	; 0x40
 800a33c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a342:	f043 0204 	orr.w	r2, r3, #4
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f7ff fd5a 	bl	8009e04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a350:	bf00      	nop
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <__NVIC_SetPriorityGrouping>:
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f003 0307 	and.w	r3, r3, #7
 800a366:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a368:	4b0c      	ldr	r3, [pc, #48]	; (800a39c <__NVIC_SetPriorityGrouping+0x44>)
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a374:	4013      	ands	r3, r2
 800a376:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a38a:	4a04      	ldr	r2, [pc, #16]	; (800a39c <__NVIC_SetPriorityGrouping+0x44>)
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	60d3      	str	r3, [r2, #12]
}
 800a390:	bf00      	nop
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	e000ed00 	.word	0xe000ed00

0800a3a0 <__NVIC_GetPriorityGrouping>:
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a3a4:	4b04      	ldr	r3, [pc, #16]	; (800a3b8 <__NVIC_GetPriorityGrouping+0x18>)
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	0a1b      	lsrs	r3, r3, #8
 800a3aa:	f003 0307 	and.w	r3, r3, #7
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr
 800a3b8:	e000ed00 	.word	0xe000ed00

0800a3bc <__NVIC_EnableIRQ>:
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	db0b      	blt.n	800a3e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a3ce:	79fb      	ldrb	r3, [r7, #7]
 800a3d0:	f003 021f 	and.w	r2, r3, #31
 800a3d4:	4907      	ldr	r1, [pc, #28]	; (800a3f4 <__NVIC_EnableIRQ+0x38>)
 800a3d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3da:	095b      	lsrs	r3, r3, #5
 800a3dc:	2001      	movs	r0, #1
 800a3de:	fa00 f202 	lsl.w	r2, r0, r2
 800a3e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a3e6:	bf00      	nop
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	e000e100 	.word	0xe000e100

0800a3f8 <__NVIC_SetPriority>:
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	4603      	mov	r3, r0
 800a400:	6039      	str	r1, [r7, #0]
 800a402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	db0a      	blt.n	800a422 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	490c      	ldr	r1, [pc, #48]	; (800a444 <__NVIC_SetPriority+0x4c>)
 800a412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a416:	0112      	lsls	r2, r2, #4
 800a418:	b2d2      	uxtb	r2, r2
 800a41a:	440b      	add	r3, r1
 800a41c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a420:	e00a      	b.n	800a438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	b2da      	uxtb	r2, r3
 800a426:	4908      	ldr	r1, [pc, #32]	; (800a448 <__NVIC_SetPriority+0x50>)
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	f003 030f 	and.w	r3, r3, #15
 800a42e:	3b04      	subs	r3, #4
 800a430:	0112      	lsls	r2, r2, #4
 800a432:	b2d2      	uxtb	r2, r2
 800a434:	440b      	add	r3, r1
 800a436:	761a      	strb	r2, [r3, #24]
}
 800a438:	bf00      	nop
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr
 800a444:	e000e100 	.word	0xe000e100
 800a448:	e000ed00 	.word	0xe000ed00

0800a44c <NVIC_EncodePriority>:
{
 800a44c:	b480      	push	{r7}
 800a44e:	b089      	sub	sp, #36	; 0x24
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f003 0307 	and.w	r3, r3, #7
 800a45e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	f1c3 0307 	rsb	r3, r3, #7
 800a466:	2b04      	cmp	r3, #4
 800a468:	bf28      	it	cs
 800a46a:	2304      	movcs	r3, #4
 800a46c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	3304      	adds	r3, #4
 800a472:	2b06      	cmp	r3, #6
 800a474:	d902      	bls.n	800a47c <NVIC_EncodePriority+0x30>
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	3b03      	subs	r3, #3
 800a47a:	e000      	b.n	800a47e <NVIC_EncodePriority+0x32>
 800a47c:	2300      	movs	r3, #0
 800a47e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	fa02 f303 	lsl.w	r3, r2, r3
 800a48a:	43da      	mvns	r2, r3
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	401a      	ands	r2, r3
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a494:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	fa01 f303 	lsl.w	r3, r1, r3
 800a49e:	43d9      	mvns	r1, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a4a4:	4313      	orrs	r3, r2
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3724      	adds	r7, #36	; 0x24
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
	...

0800a4b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a4c4:	d301      	bcc.n	800a4ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e00f      	b.n	800a4ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a4ca:	4a0a      	ldr	r2, [pc, #40]	; (800a4f4 <SysTick_Config+0x40>)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a4d2:	210f      	movs	r1, #15
 800a4d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4d8:	f7ff ff8e 	bl	800a3f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a4dc:	4b05      	ldr	r3, [pc, #20]	; (800a4f4 <SysTick_Config+0x40>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a4e2:	4b04      	ldr	r3, [pc, #16]	; (800a4f4 <SysTick_Config+0x40>)
 800a4e4:	2207      	movs	r2, #7
 800a4e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	e000e010 	.word	0xe000e010

0800a4f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7ff ff29 	bl	800a358 <__NVIC_SetPriorityGrouping>
}
 800a506:	bf00      	nop
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a50e:	b580      	push	{r7, lr}
 800a510:	b086      	sub	sp, #24
 800a512:	af00      	add	r7, sp, #0
 800a514:	4603      	mov	r3, r0
 800a516:	60b9      	str	r1, [r7, #8]
 800a518:	607a      	str	r2, [r7, #4]
 800a51a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a51c:	2300      	movs	r3, #0
 800a51e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a520:	f7ff ff3e 	bl	800a3a0 <__NVIC_GetPriorityGrouping>
 800a524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	68b9      	ldr	r1, [r7, #8]
 800a52a:	6978      	ldr	r0, [r7, #20]
 800a52c:	f7ff ff8e 	bl	800a44c <NVIC_EncodePriority>
 800a530:	4602      	mov	r2, r0
 800a532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a536:	4611      	mov	r1, r2
 800a538:	4618      	mov	r0, r3
 800a53a:	f7ff ff5d 	bl	800a3f8 <__NVIC_SetPriority>
}
 800a53e:	bf00      	nop
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b082      	sub	sp, #8
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	4603      	mov	r3, r0
 800a54e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a554:	4618      	mov	r0, r3
 800a556:	f7ff ff31 	bl	800a3bc <__NVIC_EnableIRQ>
}
 800a55a:	bf00      	nop
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7ff ffa2 	bl	800a4b4 <SysTick_Config>
 800a570:	4603      	mov	r3, r0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
	...

0800a57c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a584:	2300      	movs	r3, #0
 800a586:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a588:	f7ff faa4 	bl	8009ad4 <HAL_GetTick>
 800a58c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e099      	b.n	800a6cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2202      	movs	r2, #2
 800a59c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f022 0201 	bic.w	r2, r2, #1
 800a5b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a5b8:	e00f      	b.n	800a5da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a5ba:	f7ff fa8b 	bl	8009ad4 <HAL_GetTick>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	2b05      	cmp	r3, #5
 800a5c6:	d908      	bls.n	800a5da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2220      	movs	r2, #32
 800a5cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2203      	movs	r2, #3
 800a5d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	e078      	b.n	800a6cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1e8      	bne.n	800a5ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a5f0:	697a      	ldr	r2, [r7, #20]
 800a5f2:	4b38      	ldr	r3, [pc, #224]	; (800a6d4 <HAL_DMA_Init+0x158>)
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a606:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	699b      	ldr	r3, [r3, #24]
 800a618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a61e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	4313      	orrs	r3, r2
 800a62a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	2b04      	cmp	r3, #4
 800a632:	d107      	bne.n	800a644 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a63c:	4313      	orrs	r3, r2
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	4313      	orrs	r3, r2
 800a642:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f023 0307 	bic.w	r3, r3, #7
 800a65a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	4313      	orrs	r3, r2
 800a664:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66a:	2b04      	cmp	r3, #4
 800a66c:	d117      	bne.n	800a69e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	4313      	orrs	r3, r2
 800a676:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00e      	beq.n	800a69e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fb0f 	bl	800aca4 <DMA_CheckFifoParam>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d008      	beq.n	800a69e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2240      	movs	r2, #64	; 0x40
 800a690:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a69a:	2301      	movs	r3, #1
 800a69c:	e016      	b.n	800a6cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	697a      	ldr	r2, [r7, #20]
 800a6a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fac6 	bl	800ac38 <DMA_CalcBaseAndBitshift>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6b4:	223f      	movs	r2, #63	; 0x3f
 800a6b6:	409a      	lsls	r2, r3
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3718      	adds	r7, #24
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	f010803f 	.word	0xf010803f

0800a6d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d101      	bne.n	800a6fe <HAL_DMA_Start_IT+0x26>
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	e040      	b.n	800a780 <HAL_DMA_Start_IT+0xa8>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d12f      	bne.n	800a772 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2202      	movs	r2, #2
 800a716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	68b9      	ldr	r1, [r7, #8]
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 fa58 	bl	800abdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a730:	223f      	movs	r2, #63	; 0x3f
 800a732:	409a      	lsls	r2, r3
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f042 0216 	orr.w	r2, r2, #22
 800a746:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d007      	beq.n	800a760 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f042 0208 	orr.w	r2, r2, #8
 800a75e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f042 0201 	orr.w	r2, r2, #1
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	e005      	b.n	800a77e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a77a:	2302      	movs	r3, #2
 800a77c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3718      	adds	r7, #24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a794:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a796:	f7ff f99d 	bl	8009ad4 <HAL_GetTick>
 800a79a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d008      	beq.n	800a7ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2280      	movs	r2, #128	; 0x80
 800a7ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e052      	b.n	800a860 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f022 0216 	bic.w	r2, r2, #22
 800a7c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	695a      	ldr	r2, [r3, #20]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d103      	bne.n	800a7ea <HAL_DMA_Abort+0x62>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d007      	beq.n	800a7fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f022 0208 	bic.w	r2, r2, #8
 800a7f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f022 0201 	bic.w	r2, r2, #1
 800a808:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a80a:	e013      	b.n	800a834 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a80c:	f7ff f962 	bl	8009ad4 <HAL_GetTick>
 800a810:	4602      	mov	r2, r0
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	2b05      	cmp	r3, #5
 800a818:	d90c      	bls.n	800a834 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2220      	movs	r2, #32
 800a81e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2203      	movs	r2, #3
 800a824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a830:	2303      	movs	r3, #3
 800a832:	e015      	b.n	800a860 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f003 0301 	and.w	r3, r3, #1
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1e4      	bne.n	800a80c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a846:	223f      	movs	r2, #63	; 0x3f
 800a848:	409a      	lsls	r2, r3
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d004      	beq.n	800a886 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2280      	movs	r2, #128	; 0x80
 800a880:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e00c      	b.n	800a8a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2205      	movs	r2, #5
 800a88a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f022 0201 	bic.w	r2, r2, #1
 800a89c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a8b8:	4b8e      	ldr	r3, [pc, #568]	; (800aaf4 <HAL_DMA_IRQHandler+0x248>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a8e      	ldr	r2, [pc, #568]	; (800aaf8 <HAL_DMA_IRQHandler+0x24c>)
 800a8be:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c2:	0a9b      	lsrs	r3, r3, #10
 800a8c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8d6:	2208      	movs	r2, #8
 800a8d8:	409a      	lsls	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	4013      	ands	r3, r2
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d01a      	beq.n	800a918 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 0304 	and.w	r3, r3, #4
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d013      	beq.n	800a918 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f022 0204 	bic.w	r2, r2, #4
 800a8fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a904:	2208      	movs	r2, #8
 800a906:	409a      	lsls	r2, r3
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a910:	f043 0201 	orr.w	r2, r3, #1
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a91c:	2201      	movs	r2, #1
 800a91e:	409a      	lsls	r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4013      	ands	r3, r2
 800a924:	2b00      	cmp	r3, #0
 800a926:	d012      	beq.n	800a94e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00b      	beq.n	800a94e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a93a:	2201      	movs	r2, #1
 800a93c:	409a      	lsls	r2, r3
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a946:	f043 0202 	orr.w	r2, r3, #2
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a952:	2204      	movs	r2, #4
 800a954:	409a      	lsls	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4013      	ands	r3, r2
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d012      	beq.n	800a984 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0302 	and.w	r3, r3, #2
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00b      	beq.n	800a984 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a970:	2204      	movs	r2, #4
 800a972:	409a      	lsls	r2, r3
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a97c:	f043 0204 	orr.w	r2, r3, #4
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a988:	2210      	movs	r2, #16
 800a98a:	409a      	lsls	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4013      	ands	r3, r2
 800a990:	2b00      	cmp	r3, #0
 800a992:	d043      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 0308 	and.w	r3, r3, #8
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d03c      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9a6:	2210      	movs	r2, #16
 800a9a8:	409a      	lsls	r2, r3
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d018      	beq.n	800a9ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d108      	bne.n	800a9dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d024      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	4798      	blx	r3
 800a9da:	e01f      	b.n	800aa1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d01b      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	4798      	blx	r3
 800a9ec:	e016      	b.n	800aa1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d107      	bne.n	800aa0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f022 0208 	bic.w	r2, r2, #8
 800aa0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d003      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa20:	2220      	movs	r2, #32
 800aa22:	409a      	lsls	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	4013      	ands	r3, r2
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 808f 	beq.w	800ab4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0310 	and.w	r3, r3, #16
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f000 8087 	beq.w	800ab4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa42:	2220      	movs	r2, #32
 800aa44:	409a      	lsls	r2, r3
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b05      	cmp	r3, #5
 800aa54:	d136      	bne.n	800aac4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f022 0216 	bic.w	r2, r2, #22
 800aa64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	695a      	ldr	r2, [r3, #20]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d103      	bne.n	800aa86 <HAL_DMA_IRQHandler+0x1da>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d007      	beq.n	800aa96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f022 0208 	bic.w	r2, r2, #8
 800aa94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa9a:	223f      	movs	r2, #63	; 0x3f
 800aa9c:	409a      	lsls	r2, r3
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d07e      	beq.n	800abb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	4798      	blx	r3
        }
        return;
 800aac2:	e079      	b.n	800abb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d01d      	beq.n	800ab0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10d      	bne.n	800aafc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d031      	beq.n	800ab4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	4798      	blx	r3
 800aaf0:	e02c      	b.n	800ab4c <HAL_DMA_IRQHandler+0x2a0>
 800aaf2:	bf00      	nop
 800aaf4:	20000340 	.word	0x20000340
 800aaf8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d023      	beq.n	800ab4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	4798      	blx	r3
 800ab0c:	e01e      	b.n	800ab4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10f      	bne.n	800ab3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0210 	bic.w	r2, r2, #16
 800ab2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d003      	beq.n	800ab4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d032      	beq.n	800abba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab58:	f003 0301 	and.w	r3, r3, #1
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d022      	beq.n	800aba6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2205      	movs	r2, #5
 800ab64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f022 0201 	bic.w	r2, r2, #1
 800ab76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	60bb      	str	r3, [r7, #8]
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d307      	bcc.n	800ab94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1f2      	bne.n	800ab78 <HAL_DMA_IRQHandler+0x2cc>
 800ab92:	e000      	b.n	800ab96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ab94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d005      	beq.n	800abba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	4798      	blx	r3
 800abb6:	e000      	b.n	800abba <HAL_DMA_IRQHandler+0x30e>
        return;
 800abb8:	bf00      	nop
    }
  }
}
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abce:	b2db      	uxtb	r3, r3
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
 800abe8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800abf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	2b40      	cmp	r3, #64	; 0x40
 800ac08:	d108      	bne.n	800ac1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ac1a:	e007      	b.n	800ac2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68ba      	ldr	r2, [r7, #8]
 800ac22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	60da      	str	r2, [r3, #12]
}
 800ac2c:	bf00      	nop
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	3b10      	subs	r3, #16
 800ac48:	4a14      	ldr	r2, [pc, #80]	; (800ac9c <DMA_CalcBaseAndBitshift+0x64>)
 800ac4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac4e:	091b      	lsrs	r3, r3, #4
 800ac50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ac52:	4a13      	ldr	r2, [pc, #76]	; (800aca0 <DMA_CalcBaseAndBitshift+0x68>)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	4413      	add	r3, r2
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	d909      	bls.n	800ac7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ac6e:	f023 0303 	bic.w	r3, r3, #3
 800ac72:	1d1a      	adds	r2, r3, #4
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	659a      	str	r2, [r3, #88]	; 0x58
 800ac78:	e007      	b.n	800ac8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ac82:	f023 0303 	bic.w	r3, r3, #3
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	aaaaaaab 	.word	0xaaaaaaab
 800aca0:	0801c36c 	.word	0x0801c36c

0800aca4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	699b      	ldr	r3, [r3, #24]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d11f      	bne.n	800acfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	2b03      	cmp	r3, #3
 800acc2:	d856      	bhi.n	800ad72 <DMA_CheckFifoParam+0xce>
 800acc4:	a201      	add	r2, pc, #4	; (adr r2, 800accc <DMA_CheckFifoParam+0x28>)
 800acc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acca:	bf00      	nop
 800accc:	0800acdd 	.word	0x0800acdd
 800acd0:	0800acef 	.word	0x0800acef
 800acd4:	0800acdd 	.word	0x0800acdd
 800acd8:	0800ad73 	.word	0x0800ad73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d046      	beq.n	800ad76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800acec:	e043      	b.n	800ad76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800acf6:	d140      	bne.n	800ad7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800acfc:	e03d      	b.n	800ad7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad06:	d121      	bne.n	800ad4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	2b03      	cmp	r3, #3
 800ad0c:	d837      	bhi.n	800ad7e <DMA_CheckFifoParam+0xda>
 800ad0e:	a201      	add	r2, pc, #4	; (adr r2, 800ad14 <DMA_CheckFifoParam+0x70>)
 800ad10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad14:	0800ad25 	.word	0x0800ad25
 800ad18:	0800ad2b 	.word	0x0800ad2b
 800ad1c:	0800ad25 	.word	0x0800ad25
 800ad20:	0800ad3d 	.word	0x0800ad3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	73fb      	strb	r3, [r7, #15]
      break;
 800ad28:	e030      	b.n	800ad8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d025      	beq.n	800ad82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad3a:	e022      	b.n	800ad82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ad44:	d11f      	bne.n	800ad86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ad4a:	e01c      	b.n	800ad86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d903      	bls.n	800ad5a <DMA_CheckFifoParam+0xb6>
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d003      	beq.n	800ad60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ad58:	e018      	b.n	800ad8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad5e:	e015      	b.n	800ad8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00e      	beq.n	800ad8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad70:	e00b      	b.n	800ad8a <DMA_CheckFifoParam+0xe6>
      break;
 800ad72:	bf00      	nop
 800ad74:	e00a      	b.n	800ad8c <DMA_CheckFifoParam+0xe8>
      break;
 800ad76:	bf00      	nop
 800ad78:	e008      	b.n	800ad8c <DMA_CheckFifoParam+0xe8>
      break;
 800ad7a:	bf00      	nop
 800ad7c:	e006      	b.n	800ad8c <DMA_CheckFifoParam+0xe8>
      break;
 800ad7e:	bf00      	nop
 800ad80:	e004      	b.n	800ad8c <DMA_CheckFifoParam+0xe8>
      break;
 800ad82:	bf00      	nop
 800ad84:	e002      	b.n	800ad8c <DMA_CheckFifoParam+0xe8>
      break;   
 800ad86:	bf00      	nop
 800ad88:	e000      	b.n	800ad8c <DMA_CheckFifoParam+0xe8>
      break;
 800ad8a:	bf00      	nop
    }
  } 
  
  return status; 
 800ad8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3714      	adds	r7, #20
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop

0800ad9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b089      	sub	sp, #36	; 0x24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800adaa:	2300      	movs	r3, #0
 800adac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800adae:	2300      	movs	r3, #0
 800adb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800adb2:	2300      	movs	r3, #0
 800adb4:	61fb      	str	r3, [r7, #28]
 800adb6:	e16b      	b.n	800b090 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800adb8:	2201      	movs	r2, #1
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	fa02 f303 	lsl.w	r3, r2, r3
 800adc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	697a      	ldr	r2, [r7, #20]
 800adc8:	4013      	ands	r3, r2
 800adca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	429a      	cmp	r2, r3
 800add2:	f040 815a 	bne.w	800b08a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	f003 0303 	and.w	r3, r3, #3
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d005      	beq.n	800adee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800adea:	2b02      	cmp	r3, #2
 800adec:	d130      	bne.n	800ae50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	005b      	lsls	r3, r3, #1
 800adf8:	2203      	movs	r2, #3
 800adfa:	fa02 f303 	lsl.w	r3, r2, r3
 800adfe:	43db      	mvns	r3, r3
 800ae00:	69ba      	ldr	r2, [r7, #24]
 800ae02:	4013      	ands	r3, r2
 800ae04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	68da      	ldr	r2, [r3, #12]
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	005b      	lsls	r3, r3, #1
 800ae0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae12:	69ba      	ldr	r2, [r7, #24]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	69ba      	ldr	r2, [r7, #24]
 800ae1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ae24:	2201      	movs	r2, #1
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	fa02 f303 	lsl.w	r3, r2, r3
 800ae2c:	43db      	mvns	r3, r3
 800ae2e:	69ba      	ldr	r2, [r7, #24]
 800ae30:	4013      	ands	r3, r2
 800ae32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	091b      	lsrs	r3, r3, #4
 800ae3a:	f003 0201 	and.w	r2, r3, #1
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	fa02 f303 	lsl.w	r3, r2, r3
 800ae44:	69ba      	ldr	r2, [r7, #24]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	69ba      	ldr	r2, [r7, #24]
 800ae4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	f003 0303 	and.w	r3, r3, #3
 800ae58:	2b03      	cmp	r3, #3
 800ae5a:	d017      	beq.n	800ae8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	005b      	lsls	r3, r3, #1
 800ae66:	2203      	movs	r2, #3
 800ae68:	fa02 f303 	lsl.w	r3, r2, r3
 800ae6c:	43db      	mvns	r3, r3
 800ae6e:	69ba      	ldr	r2, [r7, #24]
 800ae70:	4013      	ands	r3, r2
 800ae72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	689a      	ldr	r2, [r3, #8]
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	005b      	lsls	r3, r3, #1
 800ae7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae80:	69ba      	ldr	r2, [r7, #24]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	69ba      	ldr	r2, [r7, #24]
 800ae8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	f003 0303 	and.w	r3, r3, #3
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d123      	bne.n	800aee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	08da      	lsrs	r2, r3, #3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3208      	adds	r2, #8
 800aea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	f003 0307 	and.w	r3, r3, #7
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	220f      	movs	r2, #15
 800aeb0:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb4:	43db      	mvns	r3, r3
 800aeb6:	69ba      	ldr	r2, [r7, #24]
 800aeb8:	4013      	ands	r3, r2
 800aeba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	691a      	ldr	r2, [r3, #16]
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	f003 0307 	and.w	r3, r3, #7
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	fa02 f303 	lsl.w	r3, r2, r3
 800aecc:	69ba      	ldr	r2, [r7, #24]
 800aece:	4313      	orrs	r3, r2
 800aed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	08da      	lsrs	r2, r3, #3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	3208      	adds	r2, #8
 800aeda:	69b9      	ldr	r1, [r7, #24]
 800aedc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	005b      	lsls	r3, r3, #1
 800aeea:	2203      	movs	r2, #3
 800aeec:	fa02 f303 	lsl.w	r3, r2, r3
 800aef0:	43db      	mvns	r3, r3
 800aef2:	69ba      	ldr	r2, [r7, #24]
 800aef4:	4013      	ands	r3, r2
 800aef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	f003 0203 	and.w	r2, r3, #3
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	005b      	lsls	r3, r3, #1
 800af04:	fa02 f303 	lsl.w	r3, r2, r3
 800af08:	69ba      	ldr	r2, [r7, #24]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	69ba      	ldr	r2, [r7, #24]
 800af12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f000 80b4 	beq.w	800b08a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af22:	2300      	movs	r3, #0
 800af24:	60fb      	str	r3, [r7, #12]
 800af26:	4b60      	ldr	r3, [pc, #384]	; (800b0a8 <HAL_GPIO_Init+0x30c>)
 800af28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af2a:	4a5f      	ldr	r2, [pc, #380]	; (800b0a8 <HAL_GPIO_Init+0x30c>)
 800af2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af30:	6453      	str	r3, [r2, #68]	; 0x44
 800af32:	4b5d      	ldr	r3, [pc, #372]	; (800b0a8 <HAL_GPIO_Init+0x30c>)
 800af34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800af3e:	4a5b      	ldr	r2, [pc, #364]	; (800b0ac <HAL_GPIO_Init+0x310>)
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	089b      	lsrs	r3, r3, #2
 800af44:	3302      	adds	r3, #2
 800af46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	f003 0303 	and.w	r3, r3, #3
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	220f      	movs	r2, #15
 800af56:	fa02 f303 	lsl.w	r3, r2, r3
 800af5a:	43db      	mvns	r3, r3
 800af5c:	69ba      	ldr	r2, [r7, #24]
 800af5e:	4013      	ands	r3, r2
 800af60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4a52      	ldr	r2, [pc, #328]	; (800b0b0 <HAL_GPIO_Init+0x314>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d02b      	beq.n	800afc2 <HAL_GPIO_Init+0x226>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a51      	ldr	r2, [pc, #324]	; (800b0b4 <HAL_GPIO_Init+0x318>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d025      	beq.n	800afbe <HAL_GPIO_Init+0x222>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a50      	ldr	r2, [pc, #320]	; (800b0b8 <HAL_GPIO_Init+0x31c>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d01f      	beq.n	800afba <HAL_GPIO_Init+0x21e>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a4f      	ldr	r2, [pc, #316]	; (800b0bc <HAL_GPIO_Init+0x320>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d019      	beq.n	800afb6 <HAL_GPIO_Init+0x21a>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a4e      	ldr	r2, [pc, #312]	; (800b0c0 <HAL_GPIO_Init+0x324>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d013      	beq.n	800afb2 <HAL_GPIO_Init+0x216>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a4d      	ldr	r2, [pc, #308]	; (800b0c4 <HAL_GPIO_Init+0x328>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d00d      	beq.n	800afae <HAL_GPIO_Init+0x212>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a4c      	ldr	r2, [pc, #304]	; (800b0c8 <HAL_GPIO_Init+0x32c>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d007      	beq.n	800afaa <HAL_GPIO_Init+0x20e>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a4b      	ldr	r2, [pc, #300]	; (800b0cc <HAL_GPIO_Init+0x330>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d101      	bne.n	800afa6 <HAL_GPIO_Init+0x20a>
 800afa2:	2307      	movs	r3, #7
 800afa4:	e00e      	b.n	800afc4 <HAL_GPIO_Init+0x228>
 800afa6:	2308      	movs	r3, #8
 800afa8:	e00c      	b.n	800afc4 <HAL_GPIO_Init+0x228>
 800afaa:	2306      	movs	r3, #6
 800afac:	e00a      	b.n	800afc4 <HAL_GPIO_Init+0x228>
 800afae:	2305      	movs	r3, #5
 800afb0:	e008      	b.n	800afc4 <HAL_GPIO_Init+0x228>
 800afb2:	2304      	movs	r3, #4
 800afb4:	e006      	b.n	800afc4 <HAL_GPIO_Init+0x228>
 800afb6:	2303      	movs	r3, #3
 800afb8:	e004      	b.n	800afc4 <HAL_GPIO_Init+0x228>
 800afba:	2302      	movs	r3, #2
 800afbc:	e002      	b.n	800afc4 <HAL_GPIO_Init+0x228>
 800afbe:	2301      	movs	r3, #1
 800afc0:	e000      	b.n	800afc4 <HAL_GPIO_Init+0x228>
 800afc2:	2300      	movs	r3, #0
 800afc4:	69fa      	ldr	r2, [r7, #28]
 800afc6:	f002 0203 	and.w	r2, r2, #3
 800afca:	0092      	lsls	r2, r2, #2
 800afcc:	4093      	lsls	r3, r2
 800afce:	69ba      	ldr	r2, [r7, #24]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800afd4:	4935      	ldr	r1, [pc, #212]	; (800b0ac <HAL_GPIO_Init+0x310>)
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	089b      	lsrs	r3, r3, #2
 800afda:	3302      	adds	r3, #2
 800afdc:	69ba      	ldr	r2, [r7, #24]
 800afde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800afe2:	4b3b      	ldr	r3, [pc, #236]	; (800b0d0 <HAL_GPIO_Init+0x334>)
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	43db      	mvns	r3, r3
 800afec:	69ba      	ldr	r2, [r7, #24]
 800afee:	4013      	ands	r3, r2
 800aff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800affa:	2b00      	cmp	r3, #0
 800affc:	d003      	beq.n	800b006 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	4313      	orrs	r3, r2
 800b004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b006:	4a32      	ldr	r2, [pc, #200]	; (800b0d0 <HAL_GPIO_Init+0x334>)
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b00c:	4b30      	ldr	r3, [pc, #192]	; (800b0d0 <HAL_GPIO_Init+0x334>)
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	43db      	mvns	r3, r3
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	4013      	ands	r3, r2
 800b01a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b024:	2b00      	cmp	r3, #0
 800b026:	d003      	beq.n	800b030 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b028:	69ba      	ldr	r2, [r7, #24]
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b030:	4a27      	ldr	r2, [pc, #156]	; (800b0d0 <HAL_GPIO_Init+0x334>)
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b036:	4b26      	ldr	r3, [pc, #152]	; (800b0d0 <HAL_GPIO_Init+0x334>)
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	43db      	mvns	r3, r3
 800b040:	69ba      	ldr	r2, [r7, #24]
 800b042:	4013      	ands	r3, r2
 800b044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d003      	beq.n	800b05a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b052:	69ba      	ldr	r2, [r7, #24]
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	4313      	orrs	r3, r2
 800b058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b05a:	4a1d      	ldr	r2, [pc, #116]	; (800b0d0 <HAL_GPIO_Init+0x334>)
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b060:	4b1b      	ldr	r3, [pc, #108]	; (800b0d0 <HAL_GPIO_Init+0x334>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	43db      	mvns	r3, r3
 800b06a:	69ba      	ldr	r2, [r7, #24]
 800b06c:	4013      	ands	r3, r2
 800b06e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d003      	beq.n	800b084 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b07c:	69ba      	ldr	r2, [r7, #24]
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	4313      	orrs	r3, r2
 800b082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b084:	4a12      	ldr	r2, [pc, #72]	; (800b0d0 <HAL_GPIO_Init+0x334>)
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	3301      	adds	r3, #1
 800b08e:	61fb      	str	r3, [r7, #28]
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	2b0f      	cmp	r3, #15
 800b094:	f67f ae90 	bls.w	800adb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b098:	bf00      	nop
 800b09a:	bf00      	nop
 800b09c:	3724      	adds	r7, #36	; 0x24
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	40023800 	.word	0x40023800
 800b0ac:	40013800 	.word	0x40013800
 800b0b0:	40020000 	.word	0x40020000
 800b0b4:	40020400 	.word	0x40020400
 800b0b8:	40020800 	.word	0x40020800
 800b0bc:	40020c00 	.word	0x40020c00
 800b0c0:	40021000 	.word	0x40021000
 800b0c4:	40021400 	.word	0x40021400
 800b0c8:	40021800 	.word	0x40021800
 800b0cc:	40021c00 	.word	0x40021c00
 800b0d0:	40013c00 	.word	0x40013c00

0800b0d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	807b      	strh	r3, [r7, #2]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b0e4:	787b      	ldrb	r3, [r7, #1]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d003      	beq.n	800b0f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b0ea:	887a      	ldrh	r2, [r7, #2]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b0f0:	e003      	b.n	800b0fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b0f2:	887b      	ldrh	r3, [r7, #2]
 800b0f4:	041a      	lsls	r2, r3, #16
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	619a      	str	r2, [r3, #24]
}
 800b0fa:	bf00      	nop
 800b0fc:	370c      	adds	r7, #12
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr

0800b106 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b086      	sub	sp, #24
 800b10a:	af02      	add	r7, sp, #8
 800b10c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	e101      	b.n	800b31c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	d106      	bne.n	800b138 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f00b f9e8 	bl	8016508 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2203      	movs	r2, #3
 800b13c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b146:	d102      	bne.n	800b14e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4618      	mov	r0, r3
 800b154:	f004 fb55 	bl	800f802 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6818      	ldr	r0, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	7c1a      	ldrb	r2, [r3, #16]
 800b160:	f88d 2000 	strb.w	r2, [sp]
 800b164:	3304      	adds	r3, #4
 800b166:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b168:	f004 fa33 	bl	800f5d2 <USB_CoreInit>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d005      	beq.n	800b17e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2202      	movs	r2, #2
 800b176:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e0ce      	b.n	800b31c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2100      	movs	r1, #0
 800b184:	4618      	mov	r0, r3
 800b186:	f004 fb4d 	bl	800f824 <USB_SetCurrentMode>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d005      	beq.n	800b19c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2202      	movs	r2, #2
 800b194:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	e0bf      	b.n	800b31c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b19c:	2300      	movs	r3, #0
 800b19e:	73fb      	strb	r3, [r7, #15]
 800b1a0:	e04a      	b.n	800b238 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b1a2:	7bfa      	ldrb	r2, [r7, #15]
 800b1a4:	6879      	ldr	r1, [r7, #4]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	00db      	lsls	r3, r3, #3
 800b1aa:	4413      	add	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	440b      	add	r3, r1
 800b1b0:	3315      	adds	r3, #21
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b1b6:	7bfa      	ldrb	r2, [r7, #15]
 800b1b8:	6879      	ldr	r1, [r7, #4]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	00db      	lsls	r3, r3, #3
 800b1be:	4413      	add	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	440b      	add	r3, r1
 800b1c4:	3314      	adds	r3, #20
 800b1c6:	7bfa      	ldrb	r2, [r7, #15]
 800b1c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b1ca:	7bfa      	ldrb	r2, [r7, #15]
 800b1cc:	7bfb      	ldrb	r3, [r7, #15]
 800b1ce:	b298      	uxth	r0, r3
 800b1d0:	6879      	ldr	r1, [r7, #4]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	00db      	lsls	r3, r3, #3
 800b1d6:	4413      	add	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	440b      	add	r3, r1
 800b1dc:	332e      	adds	r3, #46	; 0x2e
 800b1de:	4602      	mov	r2, r0
 800b1e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b1e2:	7bfa      	ldrb	r2, [r7, #15]
 800b1e4:	6879      	ldr	r1, [r7, #4]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	00db      	lsls	r3, r3, #3
 800b1ea:	4413      	add	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	440b      	add	r3, r1
 800b1f0:	3318      	adds	r3, #24
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b1f6:	7bfa      	ldrb	r2, [r7, #15]
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	00db      	lsls	r3, r3, #3
 800b1fe:	4413      	add	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	440b      	add	r3, r1
 800b204:	331c      	adds	r3, #28
 800b206:	2200      	movs	r2, #0
 800b208:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b20a:	7bfa      	ldrb	r2, [r7, #15]
 800b20c:	6879      	ldr	r1, [r7, #4]
 800b20e:	4613      	mov	r3, r2
 800b210:	00db      	lsls	r3, r3, #3
 800b212:	4413      	add	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	440b      	add	r3, r1
 800b218:	3320      	adds	r3, #32
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b21e:	7bfa      	ldrb	r2, [r7, #15]
 800b220:	6879      	ldr	r1, [r7, #4]
 800b222:	4613      	mov	r3, r2
 800b224:	00db      	lsls	r3, r3, #3
 800b226:	4413      	add	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	440b      	add	r3, r1
 800b22c:	3324      	adds	r3, #36	; 0x24
 800b22e:	2200      	movs	r2, #0
 800b230:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b232:	7bfb      	ldrb	r3, [r7, #15]
 800b234:	3301      	adds	r3, #1
 800b236:	73fb      	strb	r3, [r7, #15]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	791b      	ldrb	r3, [r3, #4]
 800b23c:	7bfa      	ldrb	r2, [r7, #15]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d3af      	bcc.n	800b1a2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b242:	2300      	movs	r3, #0
 800b244:	73fb      	strb	r3, [r7, #15]
 800b246:	e044      	b.n	800b2d2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b248:	7bfa      	ldrb	r2, [r7, #15]
 800b24a:	6879      	ldr	r1, [r7, #4]
 800b24c:	4613      	mov	r3, r2
 800b24e:	00db      	lsls	r3, r3, #3
 800b250:	4413      	add	r3, r2
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	440b      	add	r3, r1
 800b256:	f203 2355 	addw	r3, r3, #597	; 0x255
 800b25a:	2200      	movs	r2, #0
 800b25c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b25e:	7bfa      	ldrb	r2, [r7, #15]
 800b260:	6879      	ldr	r1, [r7, #4]
 800b262:	4613      	mov	r3, r2
 800b264:	00db      	lsls	r3, r3, #3
 800b266:	4413      	add	r3, r2
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	440b      	add	r3, r1
 800b26c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800b270:	7bfa      	ldrb	r2, [r7, #15]
 800b272:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b274:	7bfa      	ldrb	r2, [r7, #15]
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	4613      	mov	r3, r2
 800b27a:	00db      	lsls	r3, r3, #3
 800b27c:	4413      	add	r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	440b      	add	r3, r1
 800b282:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800b286:	2200      	movs	r2, #0
 800b288:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b28a:	7bfa      	ldrb	r2, [r7, #15]
 800b28c:	6879      	ldr	r1, [r7, #4]
 800b28e:	4613      	mov	r3, r2
 800b290:	00db      	lsls	r3, r3, #3
 800b292:	4413      	add	r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	440b      	add	r3, r1
 800b298:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800b29c:	2200      	movs	r2, #0
 800b29e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b2a0:	7bfa      	ldrb	r2, [r7, #15]
 800b2a2:	6879      	ldr	r1, [r7, #4]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	00db      	lsls	r3, r3, #3
 800b2a8:	4413      	add	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	440b      	add	r3, r1
 800b2ae:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b2b6:	7bfa      	ldrb	r2, [r7, #15]
 800b2b8:	6879      	ldr	r1, [r7, #4]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	00db      	lsls	r3, r3, #3
 800b2be:	4413      	add	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	440b      	add	r3, r1
 800b2c4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	73fb      	strb	r3, [r7, #15]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	791b      	ldrb	r3, [r3, #4]
 800b2d6:	7bfa      	ldrb	r2, [r7, #15]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d3b5      	bcc.n	800b248 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6818      	ldr	r0, [r3, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	7c1a      	ldrb	r2, [r3, #16]
 800b2e4:	f88d 2000 	strb.w	r2, [sp]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b2ec:	f004 fae6 	bl	800f8bc <USB_DevInit>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d005      	beq.n	800b302 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	e00c      	b.n	800b31c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4618      	mov	r0, r3
 800b316:	f005 fb2a 	bl	801096e <USB_DevDisconnect>

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d101      	bne.n	800b340 <HAL_PCD_Start+0x1c>
 800b33c:	2302      	movs	r3, #2
 800b33e:	e022      	b.n	800b386 <HAL_PCD_Start+0x62>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b350:	2b00      	cmp	r3, #0
 800b352:	d009      	beq.n	800b368 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d105      	bne.n	800b368 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b360:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f004 fa37 	bl	800f7e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4618      	mov	r0, r3
 800b378:	f005 fad8 	bl	801092c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b38e:	b590      	push	{r4, r7, lr}
 800b390:	b08d      	sub	sp, #52	; 0x34
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b39c:	6a3b      	ldr	r3, [r7, #32]
 800b39e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f005 fb96 	bl	8010ad6 <USB_GetMode>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f040 848c 	bne.w	800bcca <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f005 fafa 	bl	80109b0 <USB_ReadInterrupts>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f000 8482 	beq.w	800bcc8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	0a1b      	lsrs	r3, r3, #8
 800b3ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f005 fae7 	bl	80109b0 <USB_ReadInterrupts>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	f003 0302 	and.w	r3, r3, #2
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d107      	bne.n	800b3fc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	695a      	ldr	r2, [r3, #20]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f002 0202 	and.w	r2, r2, #2
 800b3fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4618      	mov	r0, r3
 800b402:	f005 fad5 	bl	80109b0 <USB_ReadInterrupts>
 800b406:	4603      	mov	r3, r0
 800b408:	f003 0310 	and.w	r3, r3, #16
 800b40c:	2b10      	cmp	r3, #16
 800b40e:	d161      	bne.n	800b4d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	699a      	ldr	r2, [r3, #24]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f022 0210 	bic.w	r2, r2, #16
 800b41e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b420:	6a3b      	ldr	r3, [r7, #32]
 800b422:	6a1b      	ldr	r3, [r3, #32]
 800b424:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	f003 020f 	and.w	r2, r3, #15
 800b42c:	4613      	mov	r3, r2
 800b42e:	00db      	lsls	r3, r3, #3
 800b430:	4413      	add	r3, r2
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	4413      	add	r3, r2
 800b43c:	3304      	adds	r3, #4
 800b43e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	0c5b      	lsrs	r3, r3, #17
 800b444:	f003 030f 	and.w	r3, r3, #15
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d124      	bne.n	800b496 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b44c:	69ba      	ldr	r2, [r7, #24]
 800b44e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b452:	4013      	ands	r3, r2
 800b454:	2b00      	cmp	r3, #0
 800b456:	d035      	beq.n	800b4c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	091b      	lsrs	r3, r3, #4
 800b460:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b466:	b29b      	uxth	r3, r3
 800b468:	461a      	mov	r2, r3
 800b46a:	6a38      	ldr	r0, [r7, #32]
 800b46c:	f005 f90c 	bl	8010688 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	68da      	ldr	r2, [r3, #12]
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	091b      	lsrs	r3, r3, #4
 800b478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b47c:	441a      	add	r2, r3
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	695a      	ldr	r2, [r3, #20]
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	091b      	lsrs	r3, r3, #4
 800b48a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b48e:	441a      	add	r2, r3
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	615a      	str	r2, [r3, #20]
 800b494:	e016      	b.n	800b4c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	0c5b      	lsrs	r3, r3, #17
 800b49a:	f003 030f 	and.w	r3, r3, #15
 800b49e:	2b06      	cmp	r3, #6
 800b4a0:	d110      	bne.n	800b4c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b4a8:	2208      	movs	r2, #8
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	6a38      	ldr	r0, [r7, #32]
 800b4ae:	f005 f8eb 	bl	8010688 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	695a      	ldr	r2, [r3, #20]
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	091b      	lsrs	r3, r3, #4
 800b4ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4be:	441a      	add	r2, r3
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	699a      	ldr	r2, [r3, #24]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f042 0210 	orr.w	r2, r2, #16
 800b4d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f005 fa69 	bl	80109b0 <USB_ReadInterrupts>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b4e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b4e8:	f040 80a7 	bne.w	800b63a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f005 fa6e 	bl	80109d6 <USB_ReadDevAllOutEpInterrupt>
 800b4fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b4fc:	e099      	b.n	800b632 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b500:	f003 0301 	and.w	r3, r3, #1
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 808e 	beq.w	800b626 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b510:	b2d2      	uxtb	r2, r2
 800b512:	4611      	mov	r1, r2
 800b514:	4618      	mov	r0, r3
 800b516:	f005 fa92 	bl	8010a3e <USB_ReadDevOutEPInterrupt>
 800b51a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00c      	beq.n	800b540 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b528:	015a      	lsls	r2, r3, #5
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	4413      	add	r3, r2
 800b52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b532:	461a      	mov	r2, r3
 800b534:	2301      	movs	r3, #1
 800b536:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fea2 	bl	800c284 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	f003 0308 	and.w	r3, r3, #8
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00c      	beq.n	800b564 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	015a      	lsls	r2, r3, #5
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	4413      	add	r3, r2
 800b552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b556:	461a      	mov	r2, r3
 800b558:	2308      	movs	r3, #8
 800b55a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b55c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 ff78 	bl	800c454 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	f003 0310 	and.w	r3, r3, #16
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d008      	beq.n	800b580 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	015a      	lsls	r2, r3, #5
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	4413      	add	r3, r2
 800b576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b57a:	461a      	mov	r2, r3
 800b57c:	2310      	movs	r3, #16
 800b57e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f003 0302 	and.w	r3, r3, #2
 800b586:	2b00      	cmp	r3, #0
 800b588:	d030      	beq.n	800b5ec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	695b      	ldr	r3, [r3, #20]
 800b58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b592:	2b80      	cmp	r3, #128	; 0x80
 800b594:	d109      	bne.n	800b5aa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	69fa      	ldr	r2, [r7, #28]
 800b5a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b5a8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b5aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	00db      	lsls	r3, r3, #3
 800b5b0:	4413      	add	r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	3304      	adds	r3, #4
 800b5be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	78db      	ldrb	r3, [r3, #3]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d108      	bne.n	800b5da <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f00b f89d 	bl	8016714 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	015a      	lsls	r2, r3, #5
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	f003 0320 	and.w	r3, r3, #32
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d008      	beq.n	800b608 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f8:	015a      	lsls	r2, r3, #5
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b602:	461a      	mov	r2, r3
 800b604:	2320      	movs	r3, #32
 800b606:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d009      	beq.n	800b626 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b614:	015a      	lsls	r2, r3, #5
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	4413      	add	r3, r2
 800b61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b61e:	461a      	mov	r2, r3
 800b620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b624:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	3301      	adds	r3, #1
 800b62a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62e:	085b      	lsrs	r3, r3, #1
 800b630:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	2b00      	cmp	r3, #0
 800b636:	f47f af62 	bne.w	800b4fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4618      	mov	r0, r3
 800b640:	f005 f9b6 	bl	80109b0 <USB_ReadInterrupts>
 800b644:	4603      	mov	r3, r0
 800b646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b64a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b64e:	f040 80db 	bne.w	800b808 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4618      	mov	r0, r3
 800b658:	f005 f9d7 	bl	8010a0a <USB_ReadDevAllInEpInterrupt>
 800b65c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b65e:	2300      	movs	r3, #0
 800b660:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b662:	e0cd      	b.n	800b800 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b666:	f003 0301 	and.w	r3, r3, #1
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f000 80c2 	beq.w	800b7f4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b676:	b2d2      	uxtb	r2, r2
 800b678:	4611      	mov	r1, r2
 800b67a:	4618      	mov	r0, r3
 800b67c:	f005 f9fd 	bl	8010a7a <USB_ReadDevInEPInterrupt>
 800b680:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	f003 0301 	and.w	r3, r3, #1
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d057      	beq.n	800b73c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68e:	f003 030f 	and.w	r3, r3, #15
 800b692:	2201      	movs	r2, #1
 800b694:	fa02 f303 	lsl.w	r3, r2, r3
 800b698:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	43db      	mvns	r3, r3
 800b6a6:	69f9      	ldr	r1, [r7, #28]
 800b6a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6bc:	461a      	mov	r2, r3
 800b6be:	2301      	movs	r3, #1
 800b6c0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	799b      	ldrb	r3, [r3, #6]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d132      	bne.n	800b730 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b6ca:	6879      	ldr	r1, [r7, #4]
 800b6cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	4413      	add	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	3320      	adds	r3, #32
 800b6da:	6819      	ldr	r1, [r3, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	00db      	lsls	r3, r3, #3
 800b6e4:	4413      	add	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4403      	add	r3, r0
 800b6ea:	331c      	adds	r3, #28
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4419      	add	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	00db      	lsls	r3, r3, #3
 800b6f8:	4413      	add	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4403      	add	r3, r0
 800b6fe:	3320      	adds	r3, #32
 800b700:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b704:	2b00      	cmp	r3, #0
 800b706:	d113      	bne.n	800b730 <HAL_PCD_IRQHandler+0x3a2>
 800b708:	6879      	ldr	r1, [r7, #4]
 800b70a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b70c:	4613      	mov	r3, r2
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	4413      	add	r3, r2
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	440b      	add	r3, r1
 800b716:	3324      	adds	r3, #36	; 0x24
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d108      	bne.n	800b730 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6818      	ldr	r0, [r3, #0]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b728:	461a      	mov	r2, r3
 800b72a:	2101      	movs	r1, #1
 800b72c:	f005 fa04 	bl	8010b38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	b2db      	uxtb	r3, r3
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f00a ff67 	bl	801660a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	f003 0308 	and.w	r3, r3, #8
 800b742:	2b00      	cmp	r3, #0
 800b744:	d008      	beq.n	800b758 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b748:	015a      	lsls	r2, r3, #5
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	4413      	add	r3, r2
 800b74e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b752:	461a      	mov	r2, r3
 800b754:	2308      	movs	r3, #8
 800b756:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	f003 0310 	and.w	r3, r3, #16
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d008      	beq.n	800b774 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b764:	015a      	lsls	r2, r3, #5
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	4413      	add	r3, r2
 800b76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b76e:	461a      	mov	r2, r3
 800b770:	2310      	movs	r3, #16
 800b772:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d008      	beq.n	800b790 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b78a:	461a      	mov	r2, r3
 800b78c:	2340      	movs	r3, #64	; 0x40
 800b78e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	f003 0302 	and.w	r3, r3, #2
 800b796:	2b00      	cmp	r3, #0
 800b798:	d023      	beq.n	800b7e2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b79a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b79c:	6a38      	ldr	r0, [r7, #32]
 800b79e:	f004 f9f1 	bl	800fb84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b7a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	00db      	lsls	r3, r3, #3
 800b7a8:	4413      	add	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	3310      	adds	r3, #16
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	3304      	adds	r3, #4
 800b7b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	78db      	ldrb	r3, [r3, #3]
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d108      	bne.n	800b7d0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f00a ffb4 	bl	8016738 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d2:	015a      	lsls	r2, r3, #5
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7dc:	461a      	mov	r2, r3
 800b7de:	2302      	movs	r3, #2
 800b7e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d003      	beq.n	800b7f4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b7ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 fcbb 	bl	800c16a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fc:	085b      	lsrs	r3, r3, #1
 800b7fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b802:	2b00      	cmp	r3, #0
 800b804:	f47f af2e 	bne.w	800b664 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f005 f8cf 	bl	80109b0 <USB_ReadInterrupts>
 800b812:	4603      	mov	r3, r0
 800b814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b81c:	d122      	bne.n	800b864 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	69fa      	ldr	r2, [r7, #28]
 800b828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b82c:	f023 0301 	bic.w	r3, r3, #1
 800b830:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d108      	bne.n	800b84e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b844:	2100      	movs	r1, #0
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 fea2 	bl	800c590 <HAL_PCDEx_LPM_Callback>
 800b84c:	e002      	b.n	800b854 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f00a ff52 	bl	80166f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	695a      	ldr	r2, [r3, #20]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4618      	mov	r0, r3
 800b86a:	f005 f8a1 	bl	80109b0 <USB_ReadInterrupts>
 800b86e:	4603      	mov	r3, r0
 800b870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b878:	d112      	bne.n	800b8a0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b01      	cmp	r3, #1
 800b888:	d102      	bne.n	800b890 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f00a ff0e 	bl	80166ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	695a      	ldr	r2, [r3, #20]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b89e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f005 f883 	bl	80109b0 <USB_ReadInterrupts>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b8b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8b4:	f040 80b7 	bne.w	800ba26 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	69fa      	ldr	r2, [r7, #28]
 800b8c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8c6:	f023 0301 	bic.w	r3, r3, #1
 800b8ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2110      	movs	r1, #16
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f004 f956 	bl	800fb84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8dc:	e046      	b.n	800b96c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e0:	015a      	lsls	r2, r3, #5
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b8f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f4:	015a      	lsls	r2, r3, #5
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b902:	0151      	lsls	r1, r2, #5
 800b904:	69fa      	ldr	r2, [r7, #28]
 800b906:	440a      	add	r2, r1
 800b908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b90c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b910:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b914:	015a      	lsls	r2, r3, #5
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	4413      	add	r3, r2
 800b91a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b91e:	461a      	mov	r2, r3
 800b920:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b924:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b928:	015a      	lsls	r2, r3, #5
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	4413      	add	r3, r2
 800b92e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b936:	0151      	lsls	r1, r2, #5
 800b938:	69fa      	ldr	r2, [r7, #28]
 800b93a:	440a      	add	r2, r1
 800b93c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b940:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b944:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b948:	015a      	lsls	r2, r3, #5
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	4413      	add	r3, r2
 800b94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b956:	0151      	lsls	r1, r2, #5
 800b958:	69fa      	ldr	r2, [r7, #28]
 800b95a:	440a      	add	r2, r1
 800b95c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b960:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b964:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b968:	3301      	adds	r3, #1
 800b96a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	791b      	ldrb	r3, [r3, #4]
 800b970:	461a      	mov	r2, r3
 800b972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b974:	4293      	cmp	r3, r2
 800b976:	d3b2      	bcc.n	800b8de <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b97e:	69db      	ldr	r3, [r3, #28]
 800b980:	69fa      	ldr	r2, [r7, #28]
 800b982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b986:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b98a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	7bdb      	ldrb	r3, [r3, #15]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d016      	beq.n	800b9c2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b99a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b99e:	69fa      	ldr	r2, [r7, #28]
 800b9a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9a4:	f043 030b 	orr.w	r3, r3, #11
 800b9a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b4:	69fa      	ldr	r2, [r7, #28]
 800b9b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9ba:	f043 030b 	orr.w	r3, r3, #11
 800b9be:	6453      	str	r3, [r2, #68]	; 0x44
 800b9c0:	e015      	b.n	800b9ee <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b9c2:	69fb      	ldr	r3, [r7, #28]
 800b9c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9c8:	695b      	ldr	r3, [r3, #20]
 800b9ca:	69fa      	ldr	r2, [r7, #28]
 800b9cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b9d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b9d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b9da:	69fb      	ldr	r3, [r7, #28]
 800b9dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	69fa      	ldr	r2, [r7, #28]
 800b9e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9e8:	f043 030b 	orr.w	r3, r3, #11
 800b9ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	69fa      	ldr	r2, [r7, #28]
 800b9f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ba00:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6818      	ldr	r0, [r3, #0]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ba10:	461a      	mov	r2, r3
 800ba12:	f005 f891 	bl	8010b38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	695a      	ldr	r2, [r3, #20]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800ba24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f004 ffc0 	bl	80109b0 <USB_ReadInterrupts>
 800ba30:	4603      	mov	r3, r0
 800ba32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba3a:	d123      	bne.n	800ba84 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f005 f856 	bl	8010af2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f004 f913 	bl	800fc76 <USB_GetDevSpeed>
 800ba50:	4603      	mov	r3, r0
 800ba52:	461a      	mov	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681c      	ldr	r4, [r3, #0]
 800ba5c:	f001 fa08 	bl	800ce70 <HAL_RCC_GetHCLKFreq>
 800ba60:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ba66:	461a      	mov	r2, r3
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f003 fe17 	bl	800f69c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f00a fdf3 	bl	801665a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	695a      	ldr	r2, [r3, #20]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ba82:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f004 ff91 	bl	80109b0 <USB_ReadInterrupts>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	f003 0308 	and.w	r3, r3, #8
 800ba94:	2b08      	cmp	r3, #8
 800ba96:	d10a      	bne.n	800baae <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f00a fdd0 	bl	801663e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	695a      	ldr	r2, [r3, #20]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f002 0208 	and.w	r2, r2, #8
 800baac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f004 ff7c 	bl	80109b0 <USB_ReadInterrupts>
 800bab8:	4603      	mov	r3, r0
 800baba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800babe:	2b80      	cmp	r3, #128	; 0x80
 800bac0:	d123      	bne.n	800bb0a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800bac2:	6a3b      	ldr	r3, [r7, #32]
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800baca:	6a3b      	ldr	r3, [r7, #32]
 800bacc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bace:	2301      	movs	r3, #1
 800bad0:	627b      	str	r3, [r7, #36]	; 0x24
 800bad2:	e014      	b.n	800bafe <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800bad4:	6879      	ldr	r1, [r7, #4]
 800bad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad8:	4613      	mov	r3, r2
 800bada:	00db      	lsls	r3, r3, #3
 800badc:	4413      	add	r3, r2
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	440b      	add	r3, r1
 800bae2:	f203 2357 	addw	r3, r3, #599	; 0x257
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d105      	bne.n	800baf8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800baec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fb08 	bl	800c108 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800baf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafa:	3301      	adds	r3, #1
 800bafc:	627b      	str	r3, [r7, #36]	; 0x24
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	791b      	ldrb	r3, [r3, #4]
 800bb02:	461a      	mov	r2, r3
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d3e4      	bcc.n	800bad4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f004 ff4e 	bl	80109b0 <USB_ReadInterrupts>
 800bb14:	4603      	mov	r3, r0
 800bb16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb1e:	d13c      	bne.n	800bb9a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bb20:	2301      	movs	r3, #1
 800bb22:	627b      	str	r3, [r7, #36]	; 0x24
 800bb24:	e02b      	b.n	800bb7e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb28:	015a      	lsls	r2, r3, #5
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bb36:	6879      	ldr	r1, [r7, #4]
 800bb38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	00db      	lsls	r3, r3, #3
 800bb3e:	4413      	add	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	440b      	add	r3, r1
 800bb44:	3318      	adds	r3, #24
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d115      	bne.n	800bb78 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bb4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	da12      	bge.n	800bb78 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800bb52:	6879      	ldr	r1, [r7, #4]
 800bb54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb56:	4613      	mov	r3, r2
 800bb58:	00db      	lsls	r3, r3, #3
 800bb5a:	4413      	add	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	440b      	add	r3, r1
 800bb60:	3317      	adds	r3, #23
 800bb62:	2201      	movs	r2, #1
 800bb64:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 fac8 	bl	800c108 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	627b      	str	r3, [r7, #36]	; 0x24
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	791b      	ldrb	r3, [r3, #4]
 800bb82:	461a      	mov	r2, r3
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d3cd      	bcc.n	800bb26 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	695a      	ldr	r2, [r3, #20]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800bb98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f004 ff06 	bl	80109b0 <USB_ReadInterrupts>
 800bba4:	4603      	mov	r3, r0
 800bba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bbae:	d156      	bne.n	800bc5e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	627b      	str	r3, [r7, #36]	; 0x24
 800bbb4:	e045      	b.n	800bc42 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb8:	015a      	lsls	r2, r3, #5
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bbc6:	6879      	ldr	r1, [r7, #4]
 800bbc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbca:	4613      	mov	r3, r2
 800bbcc:	00db      	lsls	r3, r3, #3
 800bbce:	4413      	add	r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	440b      	add	r3, r1
 800bbd4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d12e      	bne.n	800bc3c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bbde:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	da2b      	bge.n	800bc3c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800bbf0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d121      	bne.n	800bc3c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800bbf8:	6879      	ldr	r1, [r7, #4]
 800bbfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	00db      	lsls	r3, r3, #3
 800bc00:	4413      	add	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	440b      	add	r3, r1
 800bc06:	f203 2357 	addw	r3, r3, #599	; 0x257
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800bc0e:	6a3b      	ldr	r3, [r7, #32]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc16:	6a3b      	ldr	r3, [r7, #32]
 800bc18:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800bc1a:	6a3b      	ldr	r3, [r7, #32]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10a      	bne.n	800bc3c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	69fa      	ldr	r2, [r7, #28]
 800bc30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc38:	6053      	str	r3, [r2, #4]
            break;
 800bc3a:	e008      	b.n	800bc4e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3e:	3301      	adds	r3, #1
 800bc40:	627b      	str	r3, [r7, #36]	; 0x24
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	791b      	ldrb	r3, [r3, #4]
 800bc46:	461a      	mov	r2, r3
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d3b3      	bcc.n	800bbb6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	695a      	ldr	r2, [r3, #20]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800bc5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f004 fea4 	bl	80109b0 <USB_ReadInterrupts>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc72:	d10a      	bne.n	800bc8a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f00a fd71 	bl	801675c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	695a      	ldr	r2, [r3, #20]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800bc88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f004 fe8e 	bl	80109b0 <USB_ReadInterrupts>
 800bc94:	4603      	mov	r3, r0
 800bc96:	f003 0304 	and.w	r3, r3, #4
 800bc9a:	2b04      	cmp	r3, #4
 800bc9c:	d115      	bne.n	800bcca <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	f003 0304 	and.w	r3, r3, #4
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f00a fd61 	bl	8016778 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6859      	ldr	r1, [r3, #4]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	69ba      	ldr	r2, [r7, #24]
 800bcc2:	430a      	orrs	r2, r1
 800bcc4:	605a      	str	r2, [r3, #4]
 800bcc6:	e000      	b.n	800bcca <HAL_PCD_IRQHandler+0x93c>
      return;
 800bcc8:	bf00      	nop
    }
  }
}
 800bcca:	3734      	adds	r7, #52	; 0x34
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd90      	pop	{r4, r7, pc}

0800bcd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d101      	bne.n	800bcea <HAL_PCD_SetAddress+0x1a>
 800bce6:	2302      	movs	r3, #2
 800bce8:	e012      	b.n	800bd10 <HAL_PCD_SetAddress+0x40>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2201      	movs	r2, #1
 800bcee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	78fa      	ldrb	r2, [r7, #3]
 800bcf6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	78fa      	ldrb	r2, [r7, #3]
 800bcfe:	4611      	mov	r1, r2
 800bd00:	4618      	mov	r0, r3
 800bd02:	f004 fded 	bl	80108e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	4608      	mov	r0, r1
 800bd22:	4611      	mov	r1, r2
 800bd24:	461a      	mov	r2, r3
 800bd26:	4603      	mov	r3, r0
 800bd28:	70fb      	strb	r3, [r7, #3]
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	803b      	strh	r3, [r7, #0]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800bd32:	2300      	movs	r3, #0
 800bd34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bd36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	da0f      	bge.n	800bd5e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bd3e:	78fb      	ldrb	r3, [r7, #3]
 800bd40:	f003 020f 	and.w	r2, r3, #15
 800bd44:	4613      	mov	r3, r2
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	4413      	add	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	3310      	adds	r3, #16
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	4413      	add	r3, r2
 800bd52:	3304      	adds	r3, #4
 800bd54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	705a      	strb	r2, [r3, #1]
 800bd5c:	e00f      	b.n	800bd7e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bd5e:	78fb      	ldrb	r3, [r7, #3]
 800bd60:	f003 020f 	and.w	r2, r3, #15
 800bd64:	4613      	mov	r3, r2
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	4413      	add	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	4413      	add	r3, r2
 800bd74:	3304      	adds	r3, #4
 800bd76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800bd7e:	78fb      	ldrb	r3, [r7, #3]
 800bd80:	f003 030f 	and.w	r3, r3, #15
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800bd8a:	883a      	ldrh	r2, [r7, #0]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	78ba      	ldrb	r2, [r7, #2]
 800bd94:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	785b      	ldrb	r3, [r3, #1]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d004      	beq.n	800bda8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800bda8:	78bb      	ldrb	r3, [r7, #2]
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	d102      	bne.n	800bdb4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d101      	bne.n	800bdc2 <HAL_PCD_EP_Open+0xaa>
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	e00e      	b.n	800bde0 <HAL_PCD_EP_Open+0xc8>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	68f9      	ldr	r1, [r7, #12]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f003 ff75 	bl	800fcc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800bdde:	7afb      	ldrb	r3, [r7, #11]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bdf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	da0f      	bge.n	800be1c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bdfc:	78fb      	ldrb	r3, [r7, #3]
 800bdfe:	f003 020f 	and.w	r2, r3, #15
 800be02:	4613      	mov	r3, r2
 800be04:	00db      	lsls	r3, r3, #3
 800be06:	4413      	add	r3, r2
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	3310      	adds	r3, #16
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	4413      	add	r3, r2
 800be10:	3304      	adds	r3, #4
 800be12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2201      	movs	r2, #1
 800be18:	705a      	strb	r2, [r3, #1]
 800be1a:	e00f      	b.n	800be3c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be1c:	78fb      	ldrb	r3, [r7, #3]
 800be1e:	f003 020f 	and.w	r2, r3, #15
 800be22:	4613      	mov	r3, r2
 800be24:	00db      	lsls	r3, r3, #3
 800be26:	4413      	add	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	4413      	add	r3, r2
 800be32:	3304      	adds	r3, #4
 800be34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2200      	movs	r2, #0
 800be3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800be3c:	78fb      	ldrb	r3, [r7, #3]
 800be3e:	f003 030f 	and.w	r3, r3, #15
 800be42:	b2da      	uxtb	r2, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d101      	bne.n	800be56 <HAL_PCD_EP_Close+0x6e>
 800be52:	2302      	movs	r3, #2
 800be54:	e00e      	b.n	800be74 <HAL_PCD_EP_Close+0x8c>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2201      	movs	r2, #1
 800be5a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68f9      	ldr	r1, [r7, #12]
 800be64:	4618      	mov	r0, r3
 800be66:	f003 ffb3 	bl	800fdd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	607a      	str	r2, [r7, #4]
 800be86:	603b      	str	r3, [r7, #0]
 800be88:	460b      	mov	r3, r1
 800be8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be8c:	7afb      	ldrb	r3, [r7, #11]
 800be8e:	f003 020f 	and.w	r2, r3, #15
 800be92:	4613      	mov	r3, r2
 800be94:	00db      	lsls	r3, r3, #3
 800be96:	4413      	add	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	4413      	add	r3, r2
 800bea2:	3304      	adds	r3, #4
 800bea4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	683a      	ldr	r2, [r7, #0]
 800beb0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	2200      	movs	r2, #0
 800beb6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2200      	movs	r2, #0
 800bebc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bebe:	7afb      	ldrb	r3, [r7, #11]
 800bec0:	f003 030f 	and.w	r3, r3, #15
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	799b      	ldrb	r3, [r3, #6]
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d102      	bne.n	800bed8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6818      	ldr	r0, [r3, #0]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	799b      	ldrb	r3, [r3, #6]
 800bee0:	461a      	mov	r2, r3
 800bee2:	6979      	ldr	r1, [r7, #20]
 800bee4:	f004 f850 	bl	800ff88 <USB_EPStartXfer>

  return HAL_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3718      	adds	r7, #24
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800bef2:	b480      	push	{r7}
 800bef4:	b083      	sub	sp, #12
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
 800befa:	460b      	mov	r3, r1
 800befc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800befe:	78fb      	ldrb	r3, [r7, #3]
 800bf00:	f003 020f 	and.w	r2, r3, #15
 800bf04:	6879      	ldr	r1, [r7, #4]
 800bf06:	4613      	mov	r3, r2
 800bf08:	00db      	lsls	r3, r3, #3
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	440b      	add	r3, r1
 800bf10:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800bf14:	681b      	ldr	r3, [r3, #0]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	370c      	adds	r7, #12
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr

0800bf22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b086      	sub	sp, #24
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	60f8      	str	r0, [r7, #12]
 800bf2a:	607a      	str	r2, [r7, #4]
 800bf2c:	603b      	str	r3, [r7, #0]
 800bf2e:	460b      	mov	r3, r1
 800bf30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bf32:	7afb      	ldrb	r3, [r7, #11]
 800bf34:	f003 020f 	and.w	r2, r3, #15
 800bf38:	4613      	mov	r3, r2
 800bf3a:	00db      	lsls	r3, r3, #3
 800bf3c:	4413      	add	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	3310      	adds	r3, #16
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	4413      	add	r3, r2
 800bf46:	3304      	adds	r3, #4
 800bf48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	683a      	ldr	r2, [r7, #0]
 800bf54:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bf62:	7afb      	ldrb	r3, [r7, #11]
 800bf64:	f003 030f 	and.w	r3, r3, #15
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	799b      	ldrb	r3, [r3, #6]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d102      	bne.n	800bf7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6818      	ldr	r0, [r3, #0]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	799b      	ldrb	r3, [r3, #6]
 800bf84:	461a      	mov	r2, r3
 800bf86:	6979      	ldr	r1, [r7, #20]
 800bf88:	f003 fffe 	bl	800ff88 <USB_EPStartXfer>

  return HAL_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3718      	adds	r7, #24
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b084      	sub	sp, #16
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bfa2:	78fb      	ldrb	r3, [r7, #3]
 800bfa4:	f003 030f 	and.w	r3, r3, #15
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	7912      	ldrb	r2, [r2, #4]
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d901      	bls.n	800bfb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e04f      	b.n	800c054 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bfb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	da0f      	bge.n	800bfdc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bfbc:	78fb      	ldrb	r3, [r7, #3]
 800bfbe:	f003 020f 	and.w	r2, r3, #15
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	4413      	add	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	3310      	adds	r3, #16
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	4413      	add	r3, r2
 800bfd0:	3304      	adds	r3, #4
 800bfd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	705a      	strb	r2, [r3, #1]
 800bfda:	e00d      	b.n	800bff8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bfdc:	78fa      	ldrb	r2, [r7, #3]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	00db      	lsls	r3, r3, #3
 800bfe2:	4413      	add	r3, r2
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	4413      	add	r3, r2
 800bfee:	3304      	adds	r3, #4
 800bff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2200      	movs	r2, #0
 800bff6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2201      	movs	r2, #1
 800bffc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bffe:	78fb      	ldrb	r3, [r7, #3]
 800c000:	f003 030f 	and.w	r3, r3, #15
 800c004:	b2da      	uxtb	r2, r3
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800c010:	2b01      	cmp	r3, #1
 800c012:	d101      	bne.n	800c018 <HAL_PCD_EP_SetStall+0x82>
 800c014:	2302      	movs	r3, #2
 800c016:	e01d      	b.n	800c054 <HAL_PCD_EP_SetStall+0xbe>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	68f9      	ldr	r1, [r7, #12]
 800c026:	4618      	mov	r0, r3
 800c028:	f004 fb86 	bl	8010738 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c02c:	78fb      	ldrb	r3, [r7, #3]
 800c02e:	f003 030f 	and.w	r3, r3, #15
 800c032:	2b00      	cmp	r3, #0
 800c034:	d109      	bne.n	800c04a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6818      	ldr	r0, [r3, #0]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	7999      	ldrb	r1, [r3, #6]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c044:	461a      	mov	r2, r3
 800c046:	f004 fd77 	bl	8010b38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	460b      	mov	r3, r1
 800c066:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c068:	78fb      	ldrb	r3, [r7, #3]
 800c06a:	f003 030f 	and.w	r3, r3, #15
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	7912      	ldrb	r2, [r2, #4]
 800c072:	4293      	cmp	r3, r2
 800c074:	d901      	bls.n	800c07a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	e042      	b.n	800c100 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c07a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	da0f      	bge.n	800c0a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c082:	78fb      	ldrb	r3, [r7, #3]
 800c084:	f003 020f 	and.w	r2, r3, #15
 800c088:	4613      	mov	r3, r2
 800c08a:	00db      	lsls	r3, r3, #3
 800c08c:	4413      	add	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	3310      	adds	r3, #16
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	4413      	add	r3, r2
 800c096:	3304      	adds	r3, #4
 800c098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2201      	movs	r2, #1
 800c09e:	705a      	strb	r2, [r3, #1]
 800c0a0:	e00f      	b.n	800c0c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c0a2:	78fb      	ldrb	r3, [r7, #3]
 800c0a4:	f003 020f 	and.w	r2, r3, #15
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	00db      	lsls	r3, r3, #3
 800c0ac:	4413      	add	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c0c8:	78fb      	ldrb	r3, [r7, #3]
 800c0ca:	f003 030f 	and.w	r3, r3, #15
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d101      	bne.n	800c0e2 <HAL_PCD_EP_ClrStall+0x86>
 800c0de:	2302      	movs	r3, #2
 800c0e0:	e00e      	b.n	800c100 <HAL_PCD_EP_ClrStall+0xa4>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	68f9      	ldr	r1, [r7, #12]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f004 fb8f 	bl	8010814 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	460b      	mov	r3, r1
 800c112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	da0c      	bge.n	800c136 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c11c:	78fb      	ldrb	r3, [r7, #3]
 800c11e:	f003 020f 	and.w	r2, r3, #15
 800c122:	4613      	mov	r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	4413      	add	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	3310      	adds	r3, #16
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	4413      	add	r3, r2
 800c130:	3304      	adds	r3, #4
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	e00c      	b.n	800c150 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c136:	78fb      	ldrb	r3, [r7, #3]
 800c138:	f003 020f 	and.w	r2, r3, #15
 800c13c:	4613      	mov	r3, r2
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	4413      	add	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	4413      	add	r3, r2
 800c14c:	3304      	adds	r3, #4
 800c14e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68f9      	ldr	r1, [r7, #12]
 800c156:	4618      	mov	r0, r3
 800c158:	f004 f9ae 	bl	80104b8 <USB_EPStopXfer>
 800c15c:	4603      	mov	r3, r0
 800c15e:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c160:	7afb      	ldrb	r3, [r7, #11]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b08a      	sub	sp, #40	; 0x28
 800c16e:	af02      	add	r7, sp, #8
 800c170:	6078      	str	r0, [r7, #4]
 800c172:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c17e:	683a      	ldr	r2, [r7, #0]
 800c180:	4613      	mov	r3, r2
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	4413      	add	r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	3310      	adds	r3, #16
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	4413      	add	r3, r2
 800c18e:	3304      	adds	r3, #4
 800c190:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	695a      	ldr	r2, [r3, #20]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d901      	bls.n	800c1a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e06b      	b.n	800c27a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	691a      	ldr	r2, [r3, #16]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	695b      	ldr	r3, [r3, #20]
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	69fa      	ldr	r2, [r7, #28]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d902      	bls.n	800c1be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	3303      	adds	r3, #3
 800c1c2:	089b      	lsrs	r3, r3, #2
 800c1c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c1c6:	e02a      	b.n	800c21e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	691a      	ldr	r2, [r3, #16]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	695b      	ldr	r3, [r3, #20]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	69fa      	ldr	r2, [r7, #28]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d902      	bls.n	800c1e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	3303      	adds	r3, #3
 800c1e8:	089b      	lsrs	r3, r3, #2
 800c1ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	68d9      	ldr	r1, [r3, #12]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	4603      	mov	r3, r0
 800c200:	6978      	ldr	r0, [r7, #20]
 800c202:	f004 fa03 	bl	801060c <USB_WritePacket>

    ep->xfer_buff  += len;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	68da      	ldr	r2, [r3, #12]
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	441a      	add	r2, r3
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	695a      	ldr	r2, [r3, #20]
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	441a      	add	r2, r3
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	015a      	lsls	r2, r3, #5
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	4413      	add	r3, r2
 800c226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c22e:	69ba      	ldr	r2, [r7, #24]
 800c230:	429a      	cmp	r2, r3
 800c232:	d809      	bhi.n	800c248 <PCD_WriteEmptyTxFifo+0xde>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	695a      	ldr	r2, [r3, #20]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d203      	bcs.n	800c248 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d1bf      	bne.n	800c1c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	691a      	ldr	r2, [r3, #16]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	695b      	ldr	r3, [r3, #20]
 800c250:	429a      	cmp	r2, r3
 800c252:	d811      	bhi.n	800c278 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	f003 030f 	and.w	r3, r3, #15
 800c25a:	2201      	movs	r2, #1
 800c25c:	fa02 f303 	lsl.w	r3, r2, r3
 800c260:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	43db      	mvns	r3, r3
 800c26e:	6939      	ldr	r1, [r7, #16]
 800c270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c274:	4013      	ands	r3, r2
 800c276:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3720      	adds	r7, #32
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
	...

0800c284 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b088      	sub	sp, #32
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	333c      	adds	r3, #60	; 0x3c
 800c29c:	3304      	adds	r3, #4
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	015a      	lsls	r2, r3, #5
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	799b      	ldrb	r3, [r3, #6]
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d17b      	bne.n	800c3b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	f003 0308 	and.w	r3, r3, #8
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d015      	beq.n	800c2f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	4a61      	ldr	r2, [pc, #388]	; (800c44c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	f240 80b9 	bls.w	800c440 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f000 80b3 	beq.w	800c440 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	015a      	lsls	r2, r3, #5
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2ec:	6093      	str	r3, [r2, #8]
 800c2ee:	e0a7      	b.n	800c440 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	f003 0320 	and.w	r3, r3, #32
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d009      	beq.n	800c30e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	015a      	lsls	r2, r3, #5
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	4413      	add	r3, r2
 800c302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c306:	461a      	mov	r2, r3
 800c308:	2320      	movs	r3, #32
 800c30a:	6093      	str	r3, [r2, #8]
 800c30c:	e098      	b.n	800c440 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c314:	2b00      	cmp	r3, #0
 800c316:	f040 8093 	bne.w	800c440 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	4a4b      	ldr	r2, [pc, #300]	; (800c44c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d90f      	bls.n	800c342 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00a      	beq.n	800c342 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	4413      	add	r3, r2
 800c334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c338:	461a      	mov	r2, r3
 800c33a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c33e:	6093      	str	r3, [r2, #8]
 800c340:	e07e      	b.n	800c440 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c342:	683a      	ldr	r2, [r7, #0]
 800c344:	4613      	mov	r3, r2
 800c346:	00db      	lsls	r3, r3, #3
 800c348:	4413      	add	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	4413      	add	r3, r2
 800c354:	3304      	adds	r3, #4
 800c356:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6a1a      	ldr	r2, [r3, #32]
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	0159      	lsls	r1, r3, #5
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	440b      	add	r3, r1
 800c364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c368:	691b      	ldr	r3, [r3, #16]
 800c36a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c36e:	1ad2      	subs	r2, r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d114      	bne.n	800c3a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	691b      	ldr	r3, [r3, #16]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d109      	bne.n	800c396 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6818      	ldr	r0, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c38c:	461a      	mov	r2, r3
 800c38e:	2101      	movs	r1, #1
 800c390:	f004 fbd2 	bl	8010b38 <USB_EP0_OutStart>
 800c394:	e006      	b.n	800c3a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	68da      	ldr	r2, [r3, #12]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	441a      	add	r2, r3
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f00a f912 	bl	80165d4 <HAL_PCD_DataOutStageCallback>
 800c3b0:	e046      	b.n	800c440 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	4a26      	ldr	r2, [pc, #152]	; (800c450 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d124      	bne.n	800c404 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00a      	beq.n	800c3da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	015a      	lsls	r2, r3, #5
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3d6:	6093      	str	r3, [r2, #8]
 800c3d8:	e032      	b.n	800c440 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	f003 0320 	and.w	r3, r3, #32
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d008      	beq.n	800c3f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	015a      	lsls	r2, r3, #5
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	2320      	movs	r3, #32
 800c3f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f00a f8e9 	bl	80165d4 <HAL_PCD_DataOutStageCallback>
 800c402:	e01d      	b.n	800c440 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d114      	bne.n	800c434 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c40a:	6879      	ldr	r1, [r7, #4]
 800c40c:	683a      	ldr	r2, [r7, #0]
 800c40e:	4613      	mov	r3, r2
 800c410:	00db      	lsls	r3, r3, #3
 800c412:	4413      	add	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	440b      	add	r3, r1
 800c418:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d108      	bne.n	800c434 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6818      	ldr	r0, [r3, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c42c:	461a      	mov	r2, r3
 800c42e:	2100      	movs	r1, #0
 800c430:	f004 fb82 	bl	8010b38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	b2db      	uxtb	r3, r3
 800c438:	4619      	mov	r1, r3
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f00a f8ca 	bl	80165d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3720      	adds	r7, #32
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	4f54300a 	.word	0x4f54300a
 800c450:	4f54310a 	.word	0x4f54310a

0800c454 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b086      	sub	sp, #24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	333c      	adds	r3, #60	; 0x3c
 800c46c:	3304      	adds	r3, #4
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	015a      	lsls	r2, r3, #5
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	4413      	add	r3, r2
 800c47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	4a15      	ldr	r2, [pc, #84]	; (800c4dc <PCD_EP_OutSetupPacket_int+0x88>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d90e      	bls.n	800c4a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c490:	2b00      	cmp	r3, #0
 800c492:	d009      	beq.n	800c4a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	015a      	lsls	r2, r3, #5
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	4413      	add	r3, r2
 800c49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f00a f881 	bl	80165b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	4a0a      	ldr	r2, [pc, #40]	; (800c4dc <PCD_EP_OutSetupPacket_int+0x88>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d90c      	bls.n	800c4d0 <PCD_EP_OutSetupPacket_int+0x7c>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	799b      	ldrb	r3, [r3, #6]
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d108      	bne.n	800c4d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6818      	ldr	r0, [r3, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	2101      	movs	r1, #1
 800c4cc:	f004 fb34 	bl	8010b38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3718      	adds	r7, #24
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	4f54300a 	.word	0x4f54300a

0800c4e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	70fb      	strb	r3, [r7, #3]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c4f8:	78fb      	ldrb	r3, [r7, #3]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d107      	bne.n	800c50e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c4fe:	883b      	ldrh	r3, [r7, #0]
 800c500:	0419      	lsls	r1, r3, #16
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	430a      	orrs	r2, r1
 800c50a:	629a      	str	r2, [r3, #40]	; 0x28
 800c50c:	e028      	b.n	800c560 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c514:	0c1b      	lsrs	r3, r3, #16
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	4413      	add	r3, r2
 800c51a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c51c:	2300      	movs	r3, #0
 800c51e:	73fb      	strb	r3, [r7, #15]
 800c520:	e00d      	b.n	800c53e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	7bfb      	ldrb	r3, [r7, #15]
 800c528:	3340      	adds	r3, #64	; 0x40
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	4413      	add	r3, r2
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	0c1b      	lsrs	r3, r3, #16
 800c532:	68ba      	ldr	r2, [r7, #8]
 800c534:	4413      	add	r3, r2
 800c536:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c538:	7bfb      	ldrb	r3, [r7, #15]
 800c53a:	3301      	adds	r3, #1
 800c53c:	73fb      	strb	r3, [r7, #15]
 800c53e:	7bfa      	ldrb	r2, [r7, #15]
 800c540:	78fb      	ldrb	r3, [r7, #3]
 800c542:	3b01      	subs	r3, #1
 800c544:	429a      	cmp	r2, r3
 800c546:	d3ec      	bcc.n	800c522 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c548:	883b      	ldrh	r3, [r7, #0]
 800c54a:	0418      	lsls	r0, r3, #16
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6819      	ldr	r1, [r3, #0]
 800c550:	78fb      	ldrb	r3, [r7, #3]
 800c552:	3b01      	subs	r3, #1
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	4302      	orrs	r2, r0
 800c558:	3340      	adds	r3, #64	; 0x40
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	440b      	add	r3, r1
 800c55e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr

0800c56e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c56e:	b480      	push	{r7}
 800c570:	b083      	sub	sp, #12
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
 800c576:	460b      	mov	r3, r1
 800c578:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	887a      	ldrh	r2, [r7, #2]
 800c580:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c582:	2300      	movs	r3, #0
}
 800c584:	4618      	mov	r0, r3
 800c586:	370c      	adds	r7, #12
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	460b      	mov	r3, r1
 800c59a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c59c:	bf00      	nop
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d101      	bne.n	800c5ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e267      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f003 0301 	and.w	r3, r3, #1
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d075      	beq.n	800c6b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c5c6:	4b88      	ldr	r3, [pc, #544]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	f003 030c 	and.w	r3, r3, #12
 800c5ce:	2b04      	cmp	r3, #4
 800c5d0:	d00c      	beq.n	800c5ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c5d2:	4b85      	ldr	r3, [pc, #532]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c5da:	2b08      	cmp	r3, #8
 800c5dc:	d112      	bne.n	800c604 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c5de:	4b82      	ldr	r3, [pc, #520]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5ea:	d10b      	bne.n	800c604 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5ec:	4b7e      	ldr	r3, [pc, #504]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d05b      	beq.n	800c6b0 <HAL_RCC_OscConfig+0x108>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d157      	bne.n	800c6b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c600:	2301      	movs	r3, #1
 800c602:	e242      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c60c:	d106      	bne.n	800c61c <HAL_RCC_OscConfig+0x74>
 800c60e:	4b76      	ldr	r3, [pc, #472]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a75      	ldr	r2, [pc, #468]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c618:	6013      	str	r3, [r2, #0]
 800c61a:	e01d      	b.n	800c658 <HAL_RCC_OscConfig+0xb0>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c624:	d10c      	bne.n	800c640 <HAL_RCC_OscConfig+0x98>
 800c626:	4b70      	ldr	r3, [pc, #448]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a6f      	ldr	r2, [pc, #444]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c62c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c630:	6013      	str	r3, [r2, #0]
 800c632:	4b6d      	ldr	r3, [pc, #436]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a6c      	ldr	r2, [pc, #432]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c63c:	6013      	str	r3, [r2, #0]
 800c63e:	e00b      	b.n	800c658 <HAL_RCC_OscConfig+0xb0>
 800c640:	4b69      	ldr	r3, [pc, #420]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a68      	ldr	r2, [pc, #416]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	4b66      	ldr	r3, [pc, #408]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a65      	ldr	r2, [pc, #404]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d013      	beq.n	800c688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c660:	f7fd fa38 	bl	8009ad4 <HAL_GetTick>
 800c664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c666:	e008      	b.n	800c67a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c668:	f7fd fa34 	bl	8009ad4 <HAL_GetTick>
 800c66c:	4602      	mov	r2, r0
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	2b64      	cmp	r3, #100	; 0x64
 800c674:	d901      	bls.n	800c67a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c676:	2303      	movs	r3, #3
 800c678:	e207      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c67a:	4b5b      	ldr	r3, [pc, #364]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c682:	2b00      	cmp	r3, #0
 800c684:	d0f0      	beq.n	800c668 <HAL_RCC_OscConfig+0xc0>
 800c686:	e014      	b.n	800c6b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c688:	f7fd fa24 	bl	8009ad4 <HAL_GetTick>
 800c68c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c68e:	e008      	b.n	800c6a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c690:	f7fd fa20 	bl	8009ad4 <HAL_GetTick>
 800c694:	4602      	mov	r2, r0
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	2b64      	cmp	r3, #100	; 0x64
 800c69c:	d901      	bls.n	800c6a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	e1f3      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c6a2:	4b51      	ldr	r3, [pc, #324]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1f0      	bne.n	800c690 <HAL_RCC_OscConfig+0xe8>
 800c6ae:	e000      	b.n	800c6b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 0302 	and.w	r3, r3, #2
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d063      	beq.n	800c786 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c6be:	4b4a      	ldr	r3, [pc, #296]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f003 030c 	and.w	r3, r3, #12
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00b      	beq.n	800c6e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c6ca:	4b47      	ldr	r3, [pc, #284]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c6d2:	2b08      	cmp	r3, #8
 800c6d4:	d11c      	bne.n	800c710 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c6d6:	4b44      	ldr	r3, [pc, #272]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d116      	bne.n	800c710 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c6e2:	4b41      	ldr	r3, [pc, #260]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 0302 	and.w	r3, r3, #2
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d005      	beq.n	800c6fa <HAL_RCC_OscConfig+0x152>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d001      	beq.n	800c6fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e1c7      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6fa:	4b3b      	ldr	r3, [pc, #236]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	00db      	lsls	r3, r3, #3
 800c708:	4937      	ldr	r1, [pc, #220]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c70a:	4313      	orrs	r3, r2
 800c70c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c70e:	e03a      	b.n	800c786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d020      	beq.n	800c75a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c718:	4b34      	ldr	r3, [pc, #208]	; (800c7ec <HAL_RCC_OscConfig+0x244>)
 800c71a:	2201      	movs	r2, #1
 800c71c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c71e:	f7fd f9d9 	bl	8009ad4 <HAL_GetTick>
 800c722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c724:	e008      	b.n	800c738 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c726:	f7fd f9d5 	bl	8009ad4 <HAL_GetTick>
 800c72a:	4602      	mov	r2, r0
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	1ad3      	subs	r3, r2, r3
 800c730:	2b02      	cmp	r3, #2
 800c732:	d901      	bls.n	800c738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c734:	2303      	movs	r3, #3
 800c736:	e1a8      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c738:	4b2b      	ldr	r3, [pc, #172]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 0302 	and.w	r3, r3, #2
 800c740:	2b00      	cmp	r3, #0
 800c742:	d0f0      	beq.n	800c726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c744:	4b28      	ldr	r3, [pc, #160]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	691b      	ldr	r3, [r3, #16]
 800c750:	00db      	lsls	r3, r3, #3
 800c752:	4925      	ldr	r1, [pc, #148]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c754:	4313      	orrs	r3, r2
 800c756:	600b      	str	r3, [r1, #0]
 800c758:	e015      	b.n	800c786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c75a:	4b24      	ldr	r3, [pc, #144]	; (800c7ec <HAL_RCC_OscConfig+0x244>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c760:	f7fd f9b8 	bl	8009ad4 <HAL_GetTick>
 800c764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c766:	e008      	b.n	800c77a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c768:	f7fd f9b4 	bl	8009ad4 <HAL_GetTick>
 800c76c:	4602      	mov	r2, r0
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	2b02      	cmp	r3, #2
 800c774:	d901      	bls.n	800c77a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c776:	2303      	movs	r3, #3
 800c778:	e187      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c77a:	4b1b      	ldr	r3, [pc, #108]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f003 0302 	and.w	r3, r3, #2
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1f0      	bne.n	800c768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f003 0308 	and.w	r3, r3, #8
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d036      	beq.n	800c800 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d016      	beq.n	800c7c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c79a:	4b15      	ldr	r3, [pc, #84]	; (800c7f0 <HAL_RCC_OscConfig+0x248>)
 800c79c:	2201      	movs	r2, #1
 800c79e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7a0:	f7fd f998 	bl	8009ad4 <HAL_GetTick>
 800c7a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c7a6:	e008      	b.n	800c7ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c7a8:	f7fd f994 	bl	8009ad4 <HAL_GetTick>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	1ad3      	subs	r3, r2, r3
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d901      	bls.n	800c7ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	e167      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c7ba:	4b0b      	ldr	r3, [pc, #44]	; (800c7e8 <HAL_RCC_OscConfig+0x240>)
 800c7bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7be:	f003 0302 	and.w	r3, r3, #2
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d0f0      	beq.n	800c7a8 <HAL_RCC_OscConfig+0x200>
 800c7c6:	e01b      	b.n	800c800 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c7c8:	4b09      	ldr	r3, [pc, #36]	; (800c7f0 <HAL_RCC_OscConfig+0x248>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c7ce:	f7fd f981 	bl	8009ad4 <HAL_GetTick>
 800c7d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c7d4:	e00e      	b.n	800c7f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c7d6:	f7fd f97d 	bl	8009ad4 <HAL_GetTick>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d907      	bls.n	800c7f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c7e4:	2303      	movs	r3, #3
 800c7e6:	e150      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
 800c7e8:	40023800 	.word	0x40023800
 800c7ec:	42470000 	.word	0x42470000
 800c7f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c7f4:	4b88      	ldr	r3, [pc, #544]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c7f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7f8:	f003 0302 	and.w	r3, r3, #2
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1ea      	bne.n	800c7d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f003 0304 	and.w	r3, r3, #4
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 8097 	beq.w	800c93c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c80e:	2300      	movs	r3, #0
 800c810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c812:	4b81      	ldr	r3, [pc, #516]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10f      	bne.n	800c83e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c81e:	2300      	movs	r3, #0
 800c820:	60bb      	str	r3, [r7, #8]
 800c822:	4b7d      	ldr	r3, [pc, #500]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c826:	4a7c      	ldr	r2, [pc, #496]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c82c:	6413      	str	r3, [r2, #64]	; 0x40
 800c82e:	4b7a      	ldr	r3, [pc, #488]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c836:	60bb      	str	r3, [r7, #8]
 800c838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c83a:	2301      	movs	r3, #1
 800c83c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c83e:	4b77      	ldr	r3, [pc, #476]	; (800ca1c <HAL_RCC_OscConfig+0x474>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c846:	2b00      	cmp	r3, #0
 800c848:	d118      	bne.n	800c87c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c84a:	4b74      	ldr	r3, [pc, #464]	; (800ca1c <HAL_RCC_OscConfig+0x474>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a73      	ldr	r2, [pc, #460]	; (800ca1c <HAL_RCC_OscConfig+0x474>)
 800c850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c856:	f7fd f93d 	bl	8009ad4 <HAL_GetTick>
 800c85a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c85c:	e008      	b.n	800c870 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c85e:	f7fd f939 	bl	8009ad4 <HAL_GetTick>
 800c862:	4602      	mov	r2, r0
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d901      	bls.n	800c870 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c86c:	2303      	movs	r3, #3
 800c86e:	e10c      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c870:	4b6a      	ldr	r3, [pc, #424]	; (800ca1c <HAL_RCC_OscConfig+0x474>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d0f0      	beq.n	800c85e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	2b01      	cmp	r3, #1
 800c882:	d106      	bne.n	800c892 <HAL_RCC_OscConfig+0x2ea>
 800c884:	4b64      	ldr	r3, [pc, #400]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c888:	4a63      	ldr	r2, [pc, #396]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c88a:	f043 0301 	orr.w	r3, r3, #1
 800c88e:	6713      	str	r3, [r2, #112]	; 0x70
 800c890:	e01c      	b.n	800c8cc <HAL_RCC_OscConfig+0x324>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	2b05      	cmp	r3, #5
 800c898:	d10c      	bne.n	800c8b4 <HAL_RCC_OscConfig+0x30c>
 800c89a:	4b5f      	ldr	r3, [pc, #380]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c89e:	4a5e      	ldr	r2, [pc, #376]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c8a0:	f043 0304 	orr.w	r3, r3, #4
 800c8a4:	6713      	str	r3, [r2, #112]	; 0x70
 800c8a6:	4b5c      	ldr	r3, [pc, #368]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c8a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8aa:	4a5b      	ldr	r2, [pc, #364]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c8ac:	f043 0301 	orr.w	r3, r3, #1
 800c8b0:	6713      	str	r3, [r2, #112]	; 0x70
 800c8b2:	e00b      	b.n	800c8cc <HAL_RCC_OscConfig+0x324>
 800c8b4:	4b58      	ldr	r3, [pc, #352]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c8b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8b8:	4a57      	ldr	r2, [pc, #348]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c8ba:	f023 0301 	bic.w	r3, r3, #1
 800c8be:	6713      	str	r3, [r2, #112]	; 0x70
 800c8c0:	4b55      	ldr	r3, [pc, #340]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c8c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8c4:	4a54      	ldr	r2, [pc, #336]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c8c6:	f023 0304 	bic.w	r3, r3, #4
 800c8ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d015      	beq.n	800c900 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8d4:	f7fd f8fe 	bl	8009ad4 <HAL_GetTick>
 800c8d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8da:	e00a      	b.n	800c8f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c8dc:	f7fd f8fa 	bl	8009ad4 <HAL_GetTick>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d901      	bls.n	800c8f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	e0cb      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8f2:	4b49      	ldr	r3, [pc, #292]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8f6:	f003 0302 	and.w	r3, r3, #2
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d0ee      	beq.n	800c8dc <HAL_RCC_OscConfig+0x334>
 800c8fe:	e014      	b.n	800c92a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c900:	f7fd f8e8 	bl	8009ad4 <HAL_GetTick>
 800c904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c906:	e00a      	b.n	800c91e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c908:	f7fd f8e4 	bl	8009ad4 <HAL_GetTick>
 800c90c:	4602      	mov	r2, r0
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	f241 3288 	movw	r2, #5000	; 0x1388
 800c916:	4293      	cmp	r3, r2
 800c918:	d901      	bls.n	800c91e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c91a:	2303      	movs	r3, #3
 800c91c:	e0b5      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c91e:	4b3e      	ldr	r3, [pc, #248]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c922:	f003 0302 	and.w	r3, r3, #2
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1ee      	bne.n	800c908 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c92a:	7dfb      	ldrb	r3, [r7, #23]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d105      	bne.n	800c93c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c930:	4b39      	ldr	r3, [pc, #228]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c934:	4a38      	ldr	r2, [pc, #224]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c93a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	699b      	ldr	r3, [r3, #24]
 800c940:	2b00      	cmp	r3, #0
 800c942:	f000 80a1 	beq.w	800ca88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c946:	4b34      	ldr	r3, [pc, #208]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	f003 030c 	and.w	r3, r3, #12
 800c94e:	2b08      	cmp	r3, #8
 800c950:	d05c      	beq.n	800ca0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	2b02      	cmp	r3, #2
 800c958:	d141      	bne.n	800c9de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c95a:	4b31      	ldr	r3, [pc, #196]	; (800ca20 <HAL_RCC_OscConfig+0x478>)
 800c95c:	2200      	movs	r2, #0
 800c95e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c960:	f7fd f8b8 	bl	8009ad4 <HAL_GetTick>
 800c964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c966:	e008      	b.n	800c97a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c968:	f7fd f8b4 	bl	8009ad4 <HAL_GetTick>
 800c96c:	4602      	mov	r2, r0
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	2b02      	cmp	r3, #2
 800c974:	d901      	bls.n	800c97a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c976:	2303      	movs	r3, #3
 800c978:	e087      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c97a:	4b27      	ldr	r3, [pc, #156]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1f0      	bne.n	800c968 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	69da      	ldr	r2, [r3, #28]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a1b      	ldr	r3, [r3, #32]
 800c98e:	431a      	orrs	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c994:	019b      	lsls	r3, r3, #6
 800c996:	431a      	orrs	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99c:	085b      	lsrs	r3, r3, #1
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	041b      	lsls	r3, r3, #16
 800c9a2:	431a      	orrs	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a8:	061b      	lsls	r3, r3, #24
 800c9aa:	491b      	ldr	r1, [pc, #108]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c9b0:	4b1b      	ldr	r3, [pc, #108]	; (800ca20 <HAL_RCC_OscConfig+0x478>)
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9b6:	f7fd f88d 	bl	8009ad4 <HAL_GetTick>
 800c9ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c9bc:	e008      	b.n	800c9d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c9be:	f7fd f889 	bl	8009ad4 <HAL_GetTick>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	1ad3      	subs	r3, r2, r3
 800c9c8:	2b02      	cmp	r3, #2
 800c9ca:	d901      	bls.n	800c9d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e05c      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c9d0:	4b11      	ldr	r3, [pc, #68]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d0f0      	beq.n	800c9be <HAL_RCC_OscConfig+0x416>
 800c9dc:	e054      	b.n	800ca88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9de:	4b10      	ldr	r3, [pc, #64]	; (800ca20 <HAL_RCC_OscConfig+0x478>)
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9e4:	f7fd f876 	bl	8009ad4 <HAL_GetTick>
 800c9e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9ea:	e008      	b.n	800c9fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c9ec:	f7fd f872 	bl	8009ad4 <HAL_GetTick>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	1ad3      	subs	r3, r2, r3
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d901      	bls.n	800c9fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	e045      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9fe:	4b06      	ldr	r3, [pc, #24]	; (800ca18 <HAL_RCC_OscConfig+0x470>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1f0      	bne.n	800c9ec <HAL_RCC_OscConfig+0x444>
 800ca0a:	e03d      	b.n	800ca88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	699b      	ldr	r3, [r3, #24]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d107      	bne.n	800ca24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	e038      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
 800ca18:	40023800 	.word	0x40023800
 800ca1c:	40007000 	.word	0x40007000
 800ca20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ca24:	4b1b      	ldr	r3, [pc, #108]	; (800ca94 <HAL_RCC_OscConfig+0x4ec>)
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	699b      	ldr	r3, [r3, #24]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d028      	beq.n	800ca84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d121      	bne.n	800ca84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d11a      	bne.n	800ca84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ca54:	4013      	ands	r3, r2
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ca5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d111      	bne.n	800ca84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca6a:	085b      	lsrs	r3, r3, #1
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d107      	bne.n	800ca84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d001      	beq.n	800ca88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	e000      	b.n	800ca8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	40023800 	.word	0x40023800

0800ca98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d101      	bne.n	800caac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800caa8:	2301      	movs	r3, #1
 800caaa:	e0cc      	b.n	800cc46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800caac:	4b68      	ldr	r3, [pc, #416]	; (800cc50 <HAL_RCC_ClockConfig+0x1b8>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 0307 	and.w	r3, r3, #7
 800cab4:	683a      	ldr	r2, [r7, #0]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d90c      	bls.n	800cad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800caba:	4b65      	ldr	r3, [pc, #404]	; (800cc50 <HAL_RCC_ClockConfig+0x1b8>)
 800cabc:	683a      	ldr	r2, [r7, #0]
 800cabe:	b2d2      	uxtb	r2, r2
 800cac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cac2:	4b63      	ldr	r3, [pc, #396]	; (800cc50 <HAL_RCC_ClockConfig+0x1b8>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f003 0307 	and.w	r3, r3, #7
 800caca:	683a      	ldr	r2, [r7, #0]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d001      	beq.n	800cad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cad0:	2301      	movs	r3, #1
 800cad2:	e0b8      	b.n	800cc46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f003 0302 	and.w	r3, r3, #2
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d020      	beq.n	800cb22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f003 0304 	and.w	r3, r3, #4
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d005      	beq.n	800caf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800caec:	4b59      	ldr	r3, [pc, #356]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	4a58      	ldr	r2, [pc, #352]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800caf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800caf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 0308 	and.w	r3, r3, #8
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d005      	beq.n	800cb10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cb04:	4b53      	ldr	r3, [pc, #332]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	4a52      	ldr	r2, [pc, #328]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cb0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cb0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb10:	4b50      	ldr	r3, [pc, #320]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	494d      	ldr	r1, [pc, #308]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f003 0301 	and.w	r3, r3, #1
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d044      	beq.n	800cbb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d107      	bne.n	800cb46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb36:	4b47      	ldr	r3, [pc, #284]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d119      	bne.n	800cb76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cb42:	2301      	movs	r3, #1
 800cb44:	e07f      	b.n	800cc46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	2b02      	cmp	r3, #2
 800cb4c:	d003      	beq.n	800cb56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cb52:	2b03      	cmp	r3, #3
 800cb54:	d107      	bne.n	800cb66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb56:	4b3f      	ldr	r3, [pc, #252]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d109      	bne.n	800cb76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cb62:	2301      	movs	r3, #1
 800cb64:	e06f      	b.n	800cc46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb66:	4b3b      	ldr	r3, [pc, #236]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f003 0302 	and.w	r3, r3, #2
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	e067      	b.n	800cc46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cb76:	4b37      	ldr	r3, [pc, #220]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	f023 0203 	bic.w	r2, r3, #3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	4934      	ldr	r1, [pc, #208]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cb84:	4313      	orrs	r3, r2
 800cb86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cb88:	f7fc ffa4 	bl	8009ad4 <HAL_GetTick>
 800cb8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb8e:	e00a      	b.n	800cba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb90:	f7fc ffa0 	bl	8009ad4 <HAL_GetTick>
 800cb94:	4602      	mov	r2, r0
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d901      	bls.n	800cba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cba2:	2303      	movs	r3, #3
 800cba4:	e04f      	b.n	800cc46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cba6:	4b2b      	ldr	r3, [pc, #172]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	f003 020c 	and.w	r2, r3, #12
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d1eb      	bne.n	800cb90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cbb8:	4b25      	ldr	r3, [pc, #148]	; (800cc50 <HAL_RCC_ClockConfig+0x1b8>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f003 0307 	and.w	r3, r3, #7
 800cbc0:	683a      	ldr	r2, [r7, #0]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d20c      	bcs.n	800cbe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbc6:	4b22      	ldr	r3, [pc, #136]	; (800cc50 <HAL_RCC_ClockConfig+0x1b8>)
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	b2d2      	uxtb	r2, r2
 800cbcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbce:	4b20      	ldr	r3, [pc, #128]	; (800cc50 <HAL_RCC_ClockConfig+0x1b8>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f003 0307 	and.w	r3, r3, #7
 800cbd6:	683a      	ldr	r2, [r7, #0]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d001      	beq.n	800cbe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	e032      	b.n	800cc46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f003 0304 	and.w	r3, r3, #4
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d008      	beq.n	800cbfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cbec:	4b19      	ldr	r3, [pc, #100]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	4916      	ldr	r1, [pc, #88]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f003 0308 	and.w	r3, r3, #8
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d009      	beq.n	800cc1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cc0a:	4b12      	ldr	r3, [pc, #72]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	00db      	lsls	r3, r3, #3
 800cc18:	490e      	ldr	r1, [pc, #56]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800cc1e:	f000 f821 	bl	800cc64 <HAL_RCC_GetSysClockFreq>
 800cc22:	4602      	mov	r2, r0
 800cc24:	4b0b      	ldr	r3, [pc, #44]	; (800cc54 <HAL_RCC_ClockConfig+0x1bc>)
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	091b      	lsrs	r3, r3, #4
 800cc2a:	f003 030f 	and.w	r3, r3, #15
 800cc2e:	490a      	ldr	r1, [pc, #40]	; (800cc58 <HAL_RCC_ClockConfig+0x1c0>)
 800cc30:	5ccb      	ldrb	r3, [r1, r3]
 800cc32:	fa22 f303 	lsr.w	r3, r2, r3
 800cc36:	4a09      	ldr	r2, [pc, #36]	; (800cc5c <HAL_RCC_ClockConfig+0x1c4>)
 800cc38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800cc3a:	4b09      	ldr	r3, [pc, #36]	; (800cc60 <HAL_RCC_ClockConfig+0x1c8>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fc ff04 	bl	8009a4c <HAL_InitTick>

  return HAL_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	40023c00 	.word	0x40023c00
 800cc54:	40023800 	.word	0x40023800
 800cc58:	0801c354 	.word	0x0801c354
 800cc5c:	20000340 	.word	0x20000340
 800cc60:	20000344 	.word	0x20000344

0800cc64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc68:	b094      	sub	sp, #80	; 0x50
 800cc6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	647b      	str	r3, [r7, #68]	; 0x44
 800cc70:	2300      	movs	r3, #0
 800cc72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc74:	2300      	movs	r3, #0
 800cc76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cc7c:	4b79      	ldr	r3, [pc, #484]	; (800ce64 <HAL_RCC_GetSysClockFreq+0x200>)
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	f003 030c 	and.w	r3, r3, #12
 800cc84:	2b08      	cmp	r3, #8
 800cc86:	d00d      	beq.n	800cca4 <HAL_RCC_GetSysClockFreq+0x40>
 800cc88:	2b08      	cmp	r3, #8
 800cc8a:	f200 80e1 	bhi.w	800ce50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d002      	beq.n	800cc98 <HAL_RCC_GetSysClockFreq+0x34>
 800cc92:	2b04      	cmp	r3, #4
 800cc94:	d003      	beq.n	800cc9e <HAL_RCC_GetSysClockFreq+0x3a>
 800cc96:	e0db      	b.n	800ce50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cc98:	4b73      	ldr	r3, [pc, #460]	; (800ce68 <HAL_RCC_GetSysClockFreq+0x204>)
 800cc9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800cc9c:	e0db      	b.n	800ce56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cc9e:	4b73      	ldr	r3, [pc, #460]	; (800ce6c <HAL_RCC_GetSysClockFreq+0x208>)
 800cca0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cca2:	e0d8      	b.n	800ce56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cca4:	4b6f      	ldr	r3, [pc, #444]	; (800ce64 <HAL_RCC_GetSysClockFreq+0x200>)
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ccae:	4b6d      	ldr	r3, [pc, #436]	; (800ce64 <HAL_RCC_GetSysClockFreq+0x200>)
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d063      	beq.n	800cd82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ccba:	4b6a      	ldr	r3, [pc, #424]	; (800ce64 <HAL_RCC_GetSysClockFreq+0x200>)
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	099b      	lsrs	r3, r3, #6
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ccc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cccc:	633b      	str	r3, [r7, #48]	; 0x30
 800ccce:	2300      	movs	r3, #0
 800ccd0:	637b      	str	r3, [r7, #52]	; 0x34
 800ccd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ccd6:	4622      	mov	r2, r4
 800ccd8:	462b      	mov	r3, r5
 800ccda:	f04f 0000 	mov.w	r0, #0
 800ccde:	f04f 0100 	mov.w	r1, #0
 800cce2:	0159      	lsls	r1, r3, #5
 800cce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cce8:	0150      	lsls	r0, r2, #5
 800ccea:	4602      	mov	r2, r0
 800ccec:	460b      	mov	r3, r1
 800ccee:	4621      	mov	r1, r4
 800ccf0:	1a51      	subs	r1, r2, r1
 800ccf2:	6139      	str	r1, [r7, #16]
 800ccf4:	4629      	mov	r1, r5
 800ccf6:	eb63 0301 	sbc.w	r3, r3, r1
 800ccfa:	617b      	str	r3, [r7, #20]
 800ccfc:	f04f 0200 	mov.w	r2, #0
 800cd00:	f04f 0300 	mov.w	r3, #0
 800cd04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cd08:	4659      	mov	r1, fp
 800cd0a:	018b      	lsls	r3, r1, #6
 800cd0c:	4651      	mov	r1, sl
 800cd0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cd12:	4651      	mov	r1, sl
 800cd14:	018a      	lsls	r2, r1, #6
 800cd16:	4651      	mov	r1, sl
 800cd18:	ebb2 0801 	subs.w	r8, r2, r1
 800cd1c:	4659      	mov	r1, fp
 800cd1e:	eb63 0901 	sbc.w	r9, r3, r1
 800cd22:	f04f 0200 	mov.w	r2, #0
 800cd26:	f04f 0300 	mov.w	r3, #0
 800cd2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cd2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cd32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cd36:	4690      	mov	r8, r2
 800cd38:	4699      	mov	r9, r3
 800cd3a:	4623      	mov	r3, r4
 800cd3c:	eb18 0303 	adds.w	r3, r8, r3
 800cd40:	60bb      	str	r3, [r7, #8]
 800cd42:	462b      	mov	r3, r5
 800cd44:	eb49 0303 	adc.w	r3, r9, r3
 800cd48:	60fb      	str	r3, [r7, #12]
 800cd4a:	f04f 0200 	mov.w	r2, #0
 800cd4e:	f04f 0300 	mov.w	r3, #0
 800cd52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cd56:	4629      	mov	r1, r5
 800cd58:	024b      	lsls	r3, r1, #9
 800cd5a:	4621      	mov	r1, r4
 800cd5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800cd60:	4621      	mov	r1, r4
 800cd62:	024a      	lsls	r2, r1, #9
 800cd64:	4610      	mov	r0, r2
 800cd66:	4619      	mov	r1, r3
 800cd68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cd70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cd74:	f7f3 ff78 	bl	8000c68 <__aeabi_uldivmod>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	4613      	mov	r3, r2
 800cd7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd80:	e058      	b.n	800ce34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd82:	4b38      	ldr	r3, [pc, #224]	; (800ce64 <HAL_RCC_GetSysClockFreq+0x200>)
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	099b      	lsrs	r3, r3, #6
 800cd88:	2200      	movs	r2, #0
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800cd92:	623b      	str	r3, [r7, #32]
 800cd94:	2300      	movs	r3, #0
 800cd96:	627b      	str	r3, [r7, #36]	; 0x24
 800cd98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800cd9c:	4642      	mov	r2, r8
 800cd9e:	464b      	mov	r3, r9
 800cda0:	f04f 0000 	mov.w	r0, #0
 800cda4:	f04f 0100 	mov.w	r1, #0
 800cda8:	0159      	lsls	r1, r3, #5
 800cdaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cdae:	0150      	lsls	r0, r2, #5
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	4641      	mov	r1, r8
 800cdb6:	ebb2 0a01 	subs.w	sl, r2, r1
 800cdba:	4649      	mov	r1, r9
 800cdbc:	eb63 0b01 	sbc.w	fp, r3, r1
 800cdc0:	f04f 0200 	mov.w	r2, #0
 800cdc4:	f04f 0300 	mov.w	r3, #0
 800cdc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800cdcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800cdd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800cdd4:	ebb2 040a 	subs.w	r4, r2, sl
 800cdd8:	eb63 050b 	sbc.w	r5, r3, fp
 800cddc:	f04f 0200 	mov.w	r2, #0
 800cde0:	f04f 0300 	mov.w	r3, #0
 800cde4:	00eb      	lsls	r3, r5, #3
 800cde6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cdea:	00e2      	lsls	r2, r4, #3
 800cdec:	4614      	mov	r4, r2
 800cdee:	461d      	mov	r5, r3
 800cdf0:	4643      	mov	r3, r8
 800cdf2:	18e3      	adds	r3, r4, r3
 800cdf4:	603b      	str	r3, [r7, #0]
 800cdf6:	464b      	mov	r3, r9
 800cdf8:	eb45 0303 	adc.w	r3, r5, r3
 800cdfc:	607b      	str	r3, [r7, #4]
 800cdfe:	f04f 0200 	mov.w	r2, #0
 800ce02:	f04f 0300 	mov.w	r3, #0
 800ce06:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	028b      	lsls	r3, r1, #10
 800ce0e:	4621      	mov	r1, r4
 800ce10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ce14:	4621      	mov	r1, r4
 800ce16:	028a      	lsls	r2, r1, #10
 800ce18:	4610      	mov	r0, r2
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce1e:	2200      	movs	r2, #0
 800ce20:	61bb      	str	r3, [r7, #24]
 800ce22:	61fa      	str	r2, [r7, #28]
 800ce24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ce28:	f7f3 ff1e 	bl	8000c68 <__aeabi_uldivmod>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	460b      	mov	r3, r1
 800ce30:	4613      	mov	r3, r2
 800ce32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ce34:	4b0b      	ldr	r3, [pc, #44]	; (800ce64 <HAL_RCC_GetSysClockFreq+0x200>)
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	0c1b      	lsrs	r3, r3, #16
 800ce3a:	f003 0303 	and.w	r3, r3, #3
 800ce3e:	3301      	adds	r3, #1
 800ce40:	005b      	lsls	r3, r3, #1
 800ce42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800ce44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ce46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ce4e:	e002      	b.n	800ce56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ce50:	4b05      	ldr	r3, [pc, #20]	; (800ce68 <HAL_RCC_GetSysClockFreq+0x204>)
 800ce52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ce54:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ce56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3750      	adds	r7, #80	; 0x50
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce62:	bf00      	nop
 800ce64:	40023800 	.word	0x40023800
 800ce68:	00f42400 	.word	0x00f42400
 800ce6c:	007a1200 	.word	0x007a1200

0800ce70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ce70:	b480      	push	{r7}
 800ce72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ce74:	4b03      	ldr	r3, [pc, #12]	; (800ce84 <HAL_RCC_GetHCLKFreq+0x14>)
 800ce76:	681b      	ldr	r3, [r3, #0]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	20000340 	.word	0x20000340

0800ce88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ce8c:	f7ff fff0 	bl	800ce70 <HAL_RCC_GetHCLKFreq>
 800ce90:	4602      	mov	r2, r0
 800ce92:	4b05      	ldr	r3, [pc, #20]	; (800cea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	0a9b      	lsrs	r3, r3, #10
 800ce98:	f003 0307 	and.w	r3, r3, #7
 800ce9c:	4903      	ldr	r1, [pc, #12]	; (800ceac <HAL_RCC_GetPCLK1Freq+0x24>)
 800ce9e:	5ccb      	ldrb	r3, [r1, r3]
 800cea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	40023800 	.word	0x40023800
 800ceac:	0801c364 	.word	0x0801c364

0800ceb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ceb4:	f7ff ffdc 	bl	800ce70 <HAL_RCC_GetHCLKFreq>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	4b05      	ldr	r3, [pc, #20]	; (800ced0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	0b5b      	lsrs	r3, r3, #13
 800cec0:	f003 0307 	and.w	r3, r3, #7
 800cec4:	4903      	ldr	r1, [pc, #12]	; (800ced4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cec6:	5ccb      	ldrb	r3, [r1, r3]
 800cec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cecc:	4618      	mov	r0, r3
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	40023800 	.word	0x40023800
 800ced4:	0801c364 	.word	0x0801c364

0800ced8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d101      	bne.n	800ceea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	e041      	b.n	800cf6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d106      	bne.n	800cf04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f7fc fa8a 	bl	8009418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2202      	movs	r2, #2
 800cf08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	3304      	adds	r3, #4
 800cf14:	4619      	mov	r1, r3
 800cf16:	4610      	mov	r0, r2
 800cf18:	f000 fd0a 	bl	800d930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2201      	movs	r2, #1
 800cf28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2201      	movs	r2, #1
 800cf30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2201      	movs	r2, #1
 800cf38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2201      	movs	r2, #1
 800cf48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2201      	movs	r2, #1
 800cf58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2201      	movs	r2, #1
 800cf68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf6c:	2300      	movs	r3, #0
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3708      	adds	r7, #8
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
	...

0800cf78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d001      	beq.n	800cf90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e04e      	b.n	800d02e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2202      	movs	r2, #2
 800cf94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68da      	ldr	r2, [r3, #12]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f042 0201 	orr.w	r2, r2, #1
 800cfa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a23      	ldr	r2, [pc, #140]	; (800d03c <HAL_TIM_Base_Start_IT+0xc4>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d022      	beq.n	800cff8 <HAL_TIM_Base_Start_IT+0x80>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfba:	d01d      	beq.n	800cff8 <HAL_TIM_Base_Start_IT+0x80>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a1f      	ldr	r2, [pc, #124]	; (800d040 <HAL_TIM_Base_Start_IT+0xc8>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d018      	beq.n	800cff8 <HAL_TIM_Base_Start_IT+0x80>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a1e      	ldr	r2, [pc, #120]	; (800d044 <HAL_TIM_Base_Start_IT+0xcc>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d013      	beq.n	800cff8 <HAL_TIM_Base_Start_IT+0x80>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a1c      	ldr	r2, [pc, #112]	; (800d048 <HAL_TIM_Base_Start_IT+0xd0>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d00e      	beq.n	800cff8 <HAL_TIM_Base_Start_IT+0x80>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a1b      	ldr	r2, [pc, #108]	; (800d04c <HAL_TIM_Base_Start_IT+0xd4>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d009      	beq.n	800cff8 <HAL_TIM_Base_Start_IT+0x80>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a19      	ldr	r2, [pc, #100]	; (800d050 <HAL_TIM_Base_Start_IT+0xd8>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d004      	beq.n	800cff8 <HAL_TIM_Base_Start_IT+0x80>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a18      	ldr	r2, [pc, #96]	; (800d054 <HAL_TIM_Base_Start_IT+0xdc>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d111      	bne.n	800d01c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	f003 0307 	and.w	r3, r3, #7
 800d002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2b06      	cmp	r3, #6
 800d008:	d010      	beq.n	800d02c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f042 0201 	orr.w	r2, r2, #1
 800d018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d01a:	e007      	b.n	800d02c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f042 0201 	orr.w	r2, r2, #1
 800d02a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	40010000 	.word	0x40010000
 800d040:	40000400 	.word	0x40000400
 800d044:	40000800 	.word	0x40000800
 800d048:	40000c00 	.word	0x40000c00
 800d04c:	40010400 	.word	0x40010400
 800d050:	40014000 	.word	0x40014000
 800d054:	40001800 	.word	0x40001800

0800d058 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	68da      	ldr	r2, [r3, #12]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f022 0201 	bic.w	r2, r2, #1
 800d06e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	6a1a      	ldr	r2, [r3, #32]
 800d076:	f241 1311 	movw	r3, #4369	; 0x1111
 800d07a:	4013      	ands	r3, r2
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10f      	bne.n	800d0a0 <HAL_TIM_Base_Stop_IT+0x48>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	6a1a      	ldr	r2, [r3, #32]
 800d086:	f240 4344 	movw	r3, #1092	; 0x444
 800d08a:	4013      	ands	r3, r2
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d107      	bne.n	800d0a0 <HAL_TIM_Base_Stop_IT+0x48>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f022 0201 	bic.w	r2, r2, #1
 800d09e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr

0800d0b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b082      	sub	sp, #8
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e041      	b.n	800d14c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d106      	bne.n	800d0e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 f839 	bl	800d154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2202      	movs	r2, #2
 800d0e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	4610      	mov	r0, r2
 800d0f6:	f000 fc1b 	bl	800d930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2201      	movs	r2, #1
 800d106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2201      	movs	r2, #1
 800d10e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2201      	movs	r2, #1
 800d116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2201      	movs	r2, #1
 800d11e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2201      	movs	r2, #1
 800d126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2201      	movs	r2, #1
 800d12e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2201      	movs	r2, #1
 800d136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2201      	movs	r2, #1
 800d13e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2201      	movs	r2, #1
 800d146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d15c:	bf00      	nop
 800d15e:	370c      	adds	r7, #12
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d109      	bne.n	800d18c <HAL_TIM_PWM_Start+0x24>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	2b01      	cmp	r3, #1
 800d182:	bf14      	ite	ne
 800d184:	2301      	movne	r3, #1
 800d186:	2300      	moveq	r3, #0
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	e022      	b.n	800d1d2 <HAL_TIM_PWM_Start+0x6a>
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	2b04      	cmp	r3, #4
 800d190:	d109      	bne.n	800d1a6 <HAL_TIM_PWM_Start+0x3e>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	bf14      	ite	ne
 800d19e:	2301      	movne	r3, #1
 800d1a0:	2300      	moveq	r3, #0
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	e015      	b.n	800d1d2 <HAL_TIM_PWM_Start+0x6a>
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	2b08      	cmp	r3, #8
 800d1aa:	d109      	bne.n	800d1c0 <HAL_TIM_PWM_Start+0x58>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	bf14      	ite	ne
 800d1b8:	2301      	movne	r3, #1
 800d1ba:	2300      	moveq	r3, #0
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	e008      	b.n	800d1d2 <HAL_TIM_PWM_Start+0x6a>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	bf14      	ite	ne
 800d1cc:	2301      	movne	r3, #1
 800d1ce:	2300      	moveq	r3, #0
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d001      	beq.n	800d1da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	e07c      	b.n	800d2d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d104      	bne.n	800d1ea <HAL_TIM_PWM_Start+0x82>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2202      	movs	r2, #2
 800d1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d1e8:	e013      	b.n	800d212 <HAL_TIM_PWM_Start+0xaa>
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	2b04      	cmp	r3, #4
 800d1ee:	d104      	bne.n	800d1fa <HAL_TIM_PWM_Start+0x92>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2202      	movs	r2, #2
 800d1f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1f8:	e00b      	b.n	800d212 <HAL_TIM_PWM_Start+0xaa>
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	2b08      	cmp	r3, #8
 800d1fe:	d104      	bne.n	800d20a <HAL_TIM_PWM_Start+0xa2>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2202      	movs	r2, #2
 800d204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d208:	e003      	b.n	800d212 <HAL_TIM_PWM_Start+0xaa>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2202      	movs	r2, #2
 800d20e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2201      	movs	r2, #1
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f000 fe7e 	bl	800df1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a2d      	ldr	r2, [pc, #180]	; (800d2dc <HAL_TIM_PWM_Start+0x174>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d004      	beq.n	800d234 <HAL_TIM_PWM_Start+0xcc>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4a2c      	ldr	r2, [pc, #176]	; (800d2e0 <HAL_TIM_PWM_Start+0x178>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d101      	bne.n	800d238 <HAL_TIM_PWM_Start+0xd0>
 800d234:	2301      	movs	r3, #1
 800d236:	e000      	b.n	800d23a <HAL_TIM_PWM_Start+0xd2>
 800d238:	2300      	movs	r3, #0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d007      	beq.n	800d24e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d24c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a22      	ldr	r2, [pc, #136]	; (800d2dc <HAL_TIM_PWM_Start+0x174>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d022      	beq.n	800d29e <HAL_TIM_PWM_Start+0x136>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d260:	d01d      	beq.n	800d29e <HAL_TIM_PWM_Start+0x136>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a1f      	ldr	r2, [pc, #124]	; (800d2e4 <HAL_TIM_PWM_Start+0x17c>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d018      	beq.n	800d29e <HAL_TIM_PWM_Start+0x136>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a1d      	ldr	r2, [pc, #116]	; (800d2e8 <HAL_TIM_PWM_Start+0x180>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d013      	beq.n	800d29e <HAL_TIM_PWM_Start+0x136>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a1c      	ldr	r2, [pc, #112]	; (800d2ec <HAL_TIM_PWM_Start+0x184>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d00e      	beq.n	800d29e <HAL_TIM_PWM_Start+0x136>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a16      	ldr	r2, [pc, #88]	; (800d2e0 <HAL_TIM_PWM_Start+0x178>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d009      	beq.n	800d29e <HAL_TIM_PWM_Start+0x136>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4a18      	ldr	r2, [pc, #96]	; (800d2f0 <HAL_TIM_PWM_Start+0x188>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d004      	beq.n	800d29e <HAL_TIM_PWM_Start+0x136>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a16      	ldr	r2, [pc, #88]	; (800d2f4 <HAL_TIM_PWM_Start+0x18c>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d111      	bne.n	800d2c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	f003 0307 	and.w	r3, r3, #7
 800d2a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2b06      	cmp	r3, #6
 800d2ae:	d010      	beq.n	800d2d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f042 0201 	orr.w	r2, r2, #1
 800d2be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2c0:	e007      	b.n	800d2d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f042 0201 	orr.w	r2, r2, #1
 800d2d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	40010000 	.word	0x40010000
 800d2e0:	40010400 	.word	0x40010400
 800d2e4:	40000400 	.word	0x40000400
 800d2e8:	40000800 	.word	0x40000800
 800d2ec:	40000c00 	.word	0x40000c00
 800d2f0:	40014000 	.word	0x40014000
 800d2f4:	40001800 	.word	0x40001800

0800d2f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2200      	movs	r2, #0
 800d308:	6839      	ldr	r1, [r7, #0]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f000 fe06 	bl	800df1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a2e      	ldr	r2, [pc, #184]	; (800d3d0 <HAL_TIM_PWM_Stop+0xd8>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d004      	beq.n	800d324 <HAL_TIM_PWM_Stop+0x2c>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a2d      	ldr	r2, [pc, #180]	; (800d3d4 <HAL_TIM_PWM_Stop+0xdc>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d101      	bne.n	800d328 <HAL_TIM_PWM_Stop+0x30>
 800d324:	2301      	movs	r3, #1
 800d326:	e000      	b.n	800d32a <HAL_TIM_PWM_Stop+0x32>
 800d328:	2300      	movs	r3, #0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d017      	beq.n	800d35e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6a1a      	ldr	r2, [r3, #32]
 800d334:	f241 1311 	movw	r3, #4369	; 0x1111
 800d338:	4013      	ands	r3, r2
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d10f      	bne.n	800d35e <HAL_TIM_PWM_Stop+0x66>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6a1a      	ldr	r2, [r3, #32]
 800d344:	f240 4344 	movw	r3, #1092	; 0x444
 800d348:	4013      	ands	r3, r2
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d107      	bne.n	800d35e <HAL_TIM_PWM_Stop+0x66>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d35c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6a1a      	ldr	r2, [r3, #32]
 800d364:	f241 1311 	movw	r3, #4369	; 0x1111
 800d368:	4013      	ands	r3, r2
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d10f      	bne.n	800d38e <HAL_TIM_PWM_Stop+0x96>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	6a1a      	ldr	r2, [r3, #32]
 800d374:	f240 4344 	movw	r3, #1092	; 0x444
 800d378:	4013      	ands	r3, r2
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d107      	bne.n	800d38e <HAL_TIM_PWM_Stop+0x96>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f022 0201 	bic.w	r2, r2, #1
 800d38c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d104      	bne.n	800d39e <HAL_TIM_PWM_Stop+0xa6>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d39c:	e013      	b.n	800d3c6 <HAL_TIM_PWM_Stop+0xce>
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	2b04      	cmp	r3, #4
 800d3a2:	d104      	bne.n	800d3ae <HAL_TIM_PWM_Stop+0xb6>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3ac:	e00b      	b.n	800d3c6 <HAL_TIM_PWM_Stop+0xce>
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	2b08      	cmp	r3, #8
 800d3b2:	d104      	bne.n	800d3be <HAL_TIM_PWM_Stop+0xc6>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3bc:	e003      	b.n	800d3c6 <HAL_TIM_PWM_Stop+0xce>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	40010000 	.word	0x40010000
 800d3d4:	40010400 	.word	0x40010400

0800d3d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	691b      	ldr	r3, [r3, #16]
 800d3ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	f003 0302 	and.w	r3, r3, #2
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d020      	beq.n	800d43c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f003 0302 	and.w	r3, r3, #2
 800d400:	2b00      	cmp	r3, #0
 800d402:	d01b      	beq.n	800d43c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f06f 0202 	mvn.w	r2, #2
 800d40c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2201      	movs	r2, #1
 800d412:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	699b      	ldr	r3, [r3, #24]
 800d41a:	f003 0303 	and.w	r3, r3, #3
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d003      	beq.n	800d42a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 fa65 	bl	800d8f2 <HAL_TIM_IC_CaptureCallback>
 800d428:	e005      	b.n	800d436 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 fa57 	bl	800d8de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 fa68 	bl	800d906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	f003 0304 	and.w	r3, r3, #4
 800d442:	2b00      	cmp	r3, #0
 800d444:	d020      	beq.n	800d488 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f003 0304 	and.w	r3, r3, #4
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d01b      	beq.n	800d488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f06f 0204 	mvn.w	r2, #4
 800d458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2202      	movs	r2, #2
 800d45e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d003      	beq.n	800d476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 fa3f 	bl	800d8f2 <HAL_TIM_IC_CaptureCallback>
 800d474:	e005      	b.n	800d482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 fa31 	bl	800d8de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 fa42 	bl	800d906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	f003 0308 	and.w	r3, r3, #8
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d020      	beq.n	800d4d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f003 0308 	and.w	r3, r3, #8
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d01b      	beq.n	800d4d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f06f 0208 	mvn.w	r2, #8
 800d4a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2204      	movs	r2, #4
 800d4aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	69db      	ldr	r3, [r3, #28]
 800d4b2:	f003 0303 	and.w	r3, r3, #3
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 fa19 	bl	800d8f2 <HAL_TIM_IC_CaptureCallback>
 800d4c0:	e005      	b.n	800d4ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 fa0b 	bl	800d8de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 fa1c 	bl	800d906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	f003 0310 	and.w	r3, r3, #16
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d020      	beq.n	800d520 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f003 0310 	and.w	r3, r3, #16
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d01b      	beq.n	800d520 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f06f 0210 	mvn.w	r2, #16
 800d4f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2208      	movs	r2, #8
 800d4f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	69db      	ldr	r3, [r3, #28]
 800d4fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d502:	2b00      	cmp	r3, #0
 800d504:	d003      	beq.n	800d50e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 f9f3 	bl	800d8f2 <HAL_TIM_IC_CaptureCallback>
 800d50c:	e005      	b.n	800d51a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 f9e5 	bl	800d8de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 f9f6 	bl	800d906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	f003 0301 	and.w	r3, r3, #1
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00c      	beq.n	800d544 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f003 0301 	and.w	r3, r3, #1
 800d530:	2b00      	cmp	r3, #0
 800d532:	d007      	beq.n	800d544 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f06f 0201 	mvn.w	r2, #1
 800d53c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 f9c3 	bl	800d8ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00c      	beq.n	800d568 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d554:	2b00      	cmp	r3, #0
 800d556:	d007      	beq.n	800d568 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fd86 	bl	800e074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00c      	beq.n	800d58c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d007      	beq.n	800d58c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 f9c7 	bl	800d91a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	f003 0320 	and.w	r3, r3, #32
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00c      	beq.n	800d5b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f003 0320 	and.w	r3, r3, #32
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d007      	beq.n	800d5b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f06f 0220 	mvn.w	r2, #32
 800d5a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fd58 	bl	800e060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d5b0:	bf00      	nop
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b086      	sub	sp, #24
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d101      	bne.n	800d5d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d5d2:	2302      	movs	r3, #2
 800d5d4:	e0ae      	b.n	800d734 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2b0c      	cmp	r3, #12
 800d5e2:	f200 809f 	bhi.w	800d724 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d5e6:	a201      	add	r2, pc, #4	; (adr r2, 800d5ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ec:	0800d621 	.word	0x0800d621
 800d5f0:	0800d725 	.word	0x0800d725
 800d5f4:	0800d725 	.word	0x0800d725
 800d5f8:	0800d725 	.word	0x0800d725
 800d5fc:	0800d661 	.word	0x0800d661
 800d600:	0800d725 	.word	0x0800d725
 800d604:	0800d725 	.word	0x0800d725
 800d608:	0800d725 	.word	0x0800d725
 800d60c:	0800d6a3 	.word	0x0800d6a3
 800d610:	0800d725 	.word	0x0800d725
 800d614:	0800d725 	.word	0x0800d725
 800d618:	0800d725 	.word	0x0800d725
 800d61c:	0800d6e3 	.word	0x0800d6e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	68b9      	ldr	r1, [r7, #8]
 800d626:	4618      	mov	r0, r3
 800d628:	f000 fa2e 	bl	800da88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	699a      	ldr	r2, [r3, #24]
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f042 0208 	orr.w	r2, r2, #8
 800d63a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	699a      	ldr	r2, [r3, #24]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f022 0204 	bic.w	r2, r2, #4
 800d64a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	6999      	ldr	r1, [r3, #24]
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	691a      	ldr	r2, [r3, #16]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	430a      	orrs	r2, r1
 800d65c:	619a      	str	r2, [r3, #24]
      break;
 800d65e:	e064      	b.n	800d72a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	68b9      	ldr	r1, [r7, #8]
 800d666:	4618      	mov	r0, r3
 800d668:	f000 fa7e 	bl	800db68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	699a      	ldr	r2, [r3, #24]
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d67a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	699a      	ldr	r2, [r3, #24]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d68a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6999      	ldr	r1, [r3, #24]
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	691b      	ldr	r3, [r3, #16]
 800d696:	021a      	lsls	r2, r3, #8
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	430a      	orrs	r2, r1
 800d69e:	619a      	str	r2, [r3, #24]
      break;
 800d6a0:	e043      	b.n	800d72a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	68b9      	ldr	r1, [r7, #8]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f000 fad3 	bl	800dc54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	69da      	ldr	r2, [r3, #28]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f042 0208 	orr.w	r2, r2, #8
 800d6bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	69da      	ldr	r2, [r3, #28]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f022 0204 	bic.w	r2, r2, #4
 800d6cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	69d9      	ldr	r1, [r3, #28]
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	691a      	ldr	r2, [r3, #16]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	430a      	orrs	r2, r1
 800d6de:	61da      	str	r2, [r3, #28]
      break;
 800d6e0:	e023      	b.n	800d72a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	68b9      	ldr	r1, [r7, #8]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f000 fb27 	bl	800dd3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	69da      	ldr	r2, [r3, #28]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d6fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	69da      	ldr	r2, [r3, #28]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d70c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	69d9      	ldr	r1, [r3, #28]
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	691b      	ldr	r3, [r3, #16]
 800d718:	021a      	lsls	r2, r3, #8
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	430a      	orrs	r2, r1
 800d720:	61da      	str	r2, [r3, #28]
      break;
 800d722:	e002      	b.n	800d72a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d724:	2301      	movs	r3, #1
 800d726:	75fb      	strb	r3, [r7, #23]
      break;
 800d728:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2200      	movs	r2, #0
 800d72e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d732:	7dfb      	ldrb	r3, [r7, #23]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3718      	adds	r7, #24
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d746:	2300      	movs	r3, #0
 800d748:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d750:	2b01      	cmp	r3, #1
 800d752:	d101      	bne.n	800d758 <HAL_TIM_ConfigClockSource+0x1c>
 800d754:	2302      	movs	r3, #2
 800d756:	e0b4      	b.n	800d8c2 <HAL_TIM_ConfigClockSource+0x186>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2202      	movs	r2, #2
 800d764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d77e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d790:	d03e      	beq.n	800d810 <HAL_TIM_ConfigClockSource+0xd4>
 800d792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d796:	f200 8087 	bhi.w	800d8a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d79a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d79e:	f000 8086 	beq.w	800d8ae <HAL_TIM_ConfigClockSource+0x172>
 800d7a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7a6:	d87f      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d7a8:	2b70      	cmp	r3, #112	; 0x70
 800d7aa:	d01a      	beq.n	800d7e2 <HAL_TIM_ConfigClockSource+0xa6>
 800d7ac:	2b70      	cmp	r3, #112	; 0x70
 800d7ae:	d87b      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d7b0:	2b60      	cmp	r3, #96	; 0x60
 800d7b2:	d050      	beq.n	800d856 <HAL_TIM_ConfigClockSource+0x11a>
 800d7b4:	2b60      	cmp	r3, #96	; 0x60
 800d7b6:	d877      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d7b8:	2b50      	cmp	r3, #80	; 0x50
 800d7ba:	d03c      	beq.n	800d836 <HAL_TIM_ConfigClockSource+0xfa>
 800d7bc:	2b50      	cmp	r3, #80	; 0x50
 800d7be:	d873      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d7c0:	2b40      	cmp	r3, #64	; 0x40
 800d7c2:	d058      	beq.n	800d876 <HAL_TIM_ConfigClockSource+0x13a>
 800d7c4:	2b40      	cmp	r3, #64	; 0x40
 800d7c6:	d86f      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d7c8:	2b30      	cmp	r3, #48	; 0x30
 800d7ca:	d064      	beq.n	800d896 <HAL_TIM_ConfigClockSource+0x15a>
 800d7cc:	2b30      	cmp	r3, #48	; 0x30
 800d7ce:	d86b      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d7d0:	2b20      	cmp	r3, #32
 800d7d2:	d060      	beq.n	800d896 <HAL_TIM_ConfigClockSource+0x15a>
 800d7d4:	2b20      	cmp	r3, #32
 800d7d6:	d867      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d05c      	beq.n	800d896 <HAL_TIM_ConfigClockSource+0x15a>
 800d7dc:	2b10      	cmp	r3, #16
 800d7de:	d05a      	beq.n	800d896 <HAL_TIM_ConfigClockSource+0x15a>
 800d7e0:	e062      	b.n	800d8a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d7f2:	f000 fb73 	bl	800dedc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	689b      	ldr	r3, [r3, #8]
 800d7fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d804:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	68ba      	ldr	r2, [r7, #8]
 800d80c:	609a      	str	r2, [r3, #8]
      break;
 800d80e:	e04f      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d820:	f000 fb5c 	bl	800dedc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	689a      	ldr	r2, [r3, #8]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d832:	609a      	str	r2, [r3, #8]
      break;
 800d834:	e03c      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d842:	461a      	mov	r2, r3
 800d844:	f000 fad0 	bl	800dde8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2150      	movs	r1, #80	; 0x50
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 fb29 	bl	800dea6 <TIM_ITRx_SetConfig>
      break;
 800d854:	e02c      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d862:	461a      	mov	r2, r3
 800d864:	f000 faef 	bl	800de46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2160      	movs	r1, #96	; 0x60
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 fb19 	bl	800dea6 <TIM_ITRx_SetConfig>
      break;
 800d874:	e01c      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d882:	461a      	mov	r2, r3
 800d884:	f000 fab0 	bl	800dde8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2140      	movs	r1, #64	; 0x40
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 fb09 	bl	800dea6 <TIM_ITRx_SetConfig>
      break;
 800d894:	e00c      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4619      	mov	r1, r3
 800d8a0:	4610      	mov	r0, r2
 800d8a2:	f000 fb00 	bl	800dea6 <TIM_ITRx_SetConfig>
      break;
 800d8a6:	e003      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d8ac:	e000      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d8ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3710      	adds	r7, #16
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d8ca:	b480      	push	{r7}
 800d8cc:	b083      	sub	sp, #12
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d8d2:	bf00      	nop
 800d8d4:	370c      	adds	r7, #12
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr

0800d8de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d8de:	b480      	push	{r7}
 800d8e0:	b083      	sub	sp, #12
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d8e6:	bf00      	nop
 800d8e8:	370c      	adds	r7, #12
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr

0800d8f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d8f2:	b480      	push	{r7}
 800d8f4:	b083      	sub	sp, #12
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d8fa:	bf00      	nop
 800d8fc:	370c      	adds	r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d906:	b480      	push	{r7}
 800d908:	b083      	sub	sp, #12
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d90e:	bf00      	nop
 800d910:	370c      	adds	r7, #12
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr

0800d91a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d91a:	b480      	push	{r7}
 800d91c:	b083      	sub	sp, #12
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d922:	bf00      	nop
 800d924:	370c      	adds	r7, #12
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
	...

0800d930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a46      	ldr	r2, [pc, #280]	; (800da5c <TIM_Base_SetConfig+0x12c>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d013      	beq.n	800d970 <TIM_Base_SetConfig+0x40>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d94e:	d00f      	beq.n	800d970 <TIM_Base_SetConfig+0x40>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	4a43      	ldr	r2, [pc, #268]	; (800da60 <TIM_Base_SetConfig+0x130>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d00b      	beq.n	800d970 <TIM_Base_SetConfig+0x40>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	4a42      	ldr	r2, [pc, #264]	; (800da64 <TIM_Base_SetConfig+0x134>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d007      	beq.n	800d970 <TIM_Base_SetConfig+0x40>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	4a41      	ldr	r2, [pc, #260]	; (800da68 <TIM_Base_SetConfig+0x138>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d003      	beq.n	800d970 <TIM_Base_SetConfig+0x40>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	4a40      	ldr	r2, [pc, #256]	; (800da6c <TIM_Base_SetConfig+0x13c>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d108      	bne.n	800d982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	68fa      	ldr	r2, [r7, #12]
 800d97e:	4313      	orrs	r3, r2
 800d980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	4a35      	ldr	r2, [pc, #212]	; (800da5c <TIM_Base_SetConfig+0x12c>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d02b      	beq.n	800d9e2 <TIM_Base_SetConfig+0xb2>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d990:	d027      	beq.n	800d9e2 <TIM_Base_SetConfig+0xb2>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	4a32      	ldr	r2, [pc, #200]	; (800da60 <TIM_Base_SetConfig+0x130>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d023      	beq.n	800d9e2 <TIM_Base_SetConfig+0xb2>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	4a31      	ldr	r2, [pc, #196]	; (800da64 <TIM_Base_SetConfig+0x134>)
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d01f      	beq.n	800d9e2 <TIM_Base_SetConfig+0xb2>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	4a30      	ldr	r2, [pc, #192]	; (800da68 <TIM_Base_SetConfig+0x138>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d01b      	beq.n	800d9e2 <TIM_Base_SetConfig+0xb2>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	4a2f      	ldr	r2, [pc, #188]	; (800da6c <TIM_Base_SetConfig+0x13c>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d017      	beq.n	800d9e2 <TIM_Base_SetConfig+0xb2>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	4a2e      	ldr	r2, [pc, #184]	; (800da70 <TIM_Base_SetConfig+0x140>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d013      	beq.n	800d9e2 <TIM_Base_SetConfig+0xb2>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	4a2d      	ldr	r2, [pc, #180]	; (800da74 <TIM_Base_SetConfig+0x144>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d00f      	beq.n	800d9e2 <TIM_Base_SetConfig+0xb2>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	4a2c      	ldr	r2, [pc, #176]	; (800da78 <TIM_Base_SetConfig+0x148>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d00b      	beq.n	800d9e2 <TIM_Base_SetConfig+0xb2>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4a2b      	ldr	r2, [pc, #172]	; (800da7c <TIM_Base_SetConfig+0x14c>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d007      	beq.n	800d9e2 <TIM_Base_SetConfig+0xb2>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	4a2a      	ldr	r2, [pc, #168]	; (800da80 <TIM_Base_SetConfig+0x150>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d003      	beq.n	800d9e2 <TIM_Base_SetConfig+0xb2>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4a29      	ldr	r2, [pc, #164]	; (800da84 <TIM_Base_SetConfig+0x154>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d108      	bne.n	800d9f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	695b      	ldr	r3, [r3, #20]
 800d9fe:	4313      	orrs	r3, r2
 800da00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	689a      	ldr	r2, [r3, #8]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4a10      	ldr	r2, [pc, #64]	; (800da5c <TIM_Base_SetConfig+0x12c>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d003      	beq.n	800da28 <TIM_Base_SetConfig+0xf8>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	4a12      	ldr	r2, [pc, #72]	; (800da6c <TIM_Base_SetConfig+0x13c>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d103      	bne.n	800da30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	691a      	ldr	r2, [r3, #16]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	691b      	ldr	r3, [r3, #16]
 800da3a:	f003 0301 	and.w	r3, r3, #1
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d105      	bne.n	800da4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	f023 0201 	bic.w	r2, r3, #1
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	611a      	str	r2, [r3, #16]
  }
}
 800da4e:	bf00      	nop
 800da50:	3714      	adds	r7, #20
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	40010000 	.word	0x40010000
 800da60:	40000400 	.word	0x40000400
 800da64:	40000800 	.word	0x40000800
 800da68:	40000c00 	.word	0x40000c00
 800da6c:	40010400 	.word	0x40010400
 800da70:	40014000 	.word	0x40014000
 800da74:	40014400 	.word	0x40014400
 800da78:	40014800 	.word	0x40014800
 800da7c:	40001800 	.word	0x40001800
 800da80:	40001c00 	.word	0x40001c00
 800da84:	40002000 	.word	0x40002000

0800da88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da88:	b480      	push	{r7}
 800da8a:	b087      	sub	sp, #28
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6a1b      	ldr	r3, [r3, #32]
 800da96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6a1b      	ldr	r3, [r3, #32]
 800da9c:	f023 0201 	bic.w	r2, r3, #1
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	699b      	ldr	r3, [r3, #24]
 800daae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f023 0303 	bic.w	r3, r3, #3
 800dabe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	f023 0302 	bic.w	r3, r3, #2
 800dad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	689b      	ldr	r3, [r3, #8]
 800dad6:	697a      	ldr	r2, [r7, #20]
 800dad8:	4313      	orrs	r3, r2
 800dada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4a20      	ldr	r2, [pc, #128]	; (800db60 <TIM_OC1_SetConfig+0xd8>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d003      	beq.n	800daec <TIM_OC1_SetConfig+0x64>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4a1f      	ldr	r2, [pc, #124]	; (800db64 <TIM_OC1_SetConfig+0xdc>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d10c      	bne.n	800db06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	f023 0308 	bic.w	r3, r3, #8
 800daf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	f023 0304 	bic.w	r3, r3, #4
 800db04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4a15      	ldr	r2, [pc, #84]	; (800db60 <TIM_OC1_SetConfig+0xd8>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d003      	beq.n	800db16 <TIM_OC1_SetConfig+0x8e>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a14      	ldr	r2, [pc, #80]	; (800db64 <TIM_OC1_SetConfig+0xdc>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d111      	bne.n	800db3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800db24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	695b      	ldr	r3, [r3, #20]
 800db2a:	693a      	ldr	r2, [r7, #16]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	699b      	ldr	r3, [r3, #24]
 800db34:	693a      	ldr	r2, [r7, #16]
 800db36:	4313      	orrs	r3, r2
 800db38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	693a      	ldr	r2, [r7, #16]
 800db3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	68fa      	ldr	r2, [r7, #12]
 800db44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	685a      	ldr	r2, [r3, #4]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	697a      	ldr	r2, [r7, #20]
 800db52:	621a      	str	r2, [r3, #32]
}
 800db54:	bf00      	nop
 800db56:	371c      	adds	r7, #28
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr
 800db60:	40010000 	.word	0x40010000
 800db64:	40010400 	.word	0x40010400

0800db68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db68:	b480      	push	{r7}
 800db6a:	b087      	sub	sp, #28
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6a1b      	ldr	r3, [r3, #32]
 800db76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6a1b      	ldr	r3, [r3, #32]
 800db7c:	f023 0210 	bic.w	r2, r3, #16
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	699b      	ldr	r3, [r3, #24]
 800db8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	021b      	lsls	r3, r3, #8
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	f023 0320 	bic.w	r3, r3, #32
 800dbb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	689b      	ldr	r3, [r3, #8]
 800dbb8:	011b      	lsls	r3, r3, #4
 800dbba:	697a      	ldr	r2, [r7, #20]
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a22      	ldr	r2, [pc, #136]	; (800dc4c <TIM_OC2_SetConfig+0xe4>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d003      	beq.n	800dbd0 <TIM_OC2_SetConfig+0x68>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a21      	ldr	r2, [pc, #132]	; (800dc50 <TIM_OC2_SetConfig+0xe8>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d10d      	bne.n	800dbec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	011b      	lsls	r3, r3, #4
 800dbde:	697a      	ldr	r2, [r7, #20]
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	4a17      	ldr	r2, [pc, #92]	; (800dc4c <TIM_OC2_SetConfig+0xe4>)
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	d003      	beq.n	800dbfc <TIM_OC2_SetConfig+0x94>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4a16      	ldr	r2, [pc, #88]	; (800dc50 <TIM_OC2_SetConfig+0xe8>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d113      	bne.n	800dc24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dc02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dc0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	695b      	ldr	r3, [r3, #20]
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	693a      	ldr	r2, [r7, #16]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	699b      	ldr	r3, [r3, #24]
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	693a      	ldr	r2, [r7, #16]
 800dc20:	4313      	orrs	r3, r2
 800dc22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	693a      	ldr	r2, [r7, #16]
 800dc28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	68fa      	ldr	r2, [r7, #12]
 800dc2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	685a      	ldr	r2, [r3, #4]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	697a      	ldr	r2, [r7, #20]
 800dc3c:	621a      	str	r2, [r3, #32]
}
 800dc3e:	bf00      	nop
 800dc40:	371c      	adds	r7, #28
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	40010000 	.word	0x40010000
 800dc50:	40010400 	.word	0x40010400

0800dc54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b087      	sub	sp, #28
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a1b      	ldr	r3, [r3, #32]
 800dc62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6a1b      	ldr	r3, [r3, #32]
 800dc68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	69db      	ldr	r3, [r3, #28]
 800dc7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f023 0303 	bic.w	r3, r3, #3
 800dc8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	4313      	orrs	r3, r2
 800dc94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	021b      	lsls	r3, r3, #8
 800dca4:	697a      	ldr	r2, [r7, #20]
 800dca6:	4313      	orrs	r3, r2
 800dca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	4a21      	ldr	r2, [pc, #132]	; (800dd34 <TIM_OC3_SetConfig+0xe0>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d003      	beq.n	800dcba <TIM_OC3_SetConfig+0x66>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	4a20      	ldr	r2, [pc, #128]	; (800dd38 <TIM_OC3_SetConfig+0xe4>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d10d      	bne.n	800dcd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dcc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	021b      	lsls	r3, r3, #8
 800dcc8:	697a      	ldr	r2, [r7, #20]
 800dcca:	4313      	orrs	r3, r2
 800dccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dcd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4a16      	ldr	r2, [pc, #88]	; (800dd34 <TIM_OC3_SetConfig+0xe0>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d003      	beq.n	800dce6 <TIM_OC3_SetConfig+0x92>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4a15      	ldr	r2, [pc, #84]	; (800dd38 <TIM_OC3_SetConfig+0xe4>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d113      	bne.n	800dd0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dcf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	695b      	ldr	r3, [r3, #20]
 800dcfa:	011b      	lsls	r3, r3, #4
 800dcfc:	693a      	ldr	r2, [r7, #16]
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	699b      	ldr	r3, [r3, #24]
 800dd06:	011b      	lsls	r3, r3, #4
 800dd08:	693a      	ldr	r2, [r7, #16]
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	693a      	ldr	r2, [r7, #16]
 800dd12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	68fa      	ldr	r2, [r7, #12]
 800dd18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	685a      	ldr	r2, [r3, #4]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	697a      	ldr	r2, [r7, #20]
 800dd26:	621a      	str	r2, [r3, #32]
}
 800dd28:	bf00      	nop
 800dd2a:	371c      	adds	r7, #28
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	40010000 	.word	0x40010000
 800dd38:	40010400 	.word	0x40010400

0800dd3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b087      	sub	sp, #28
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6a1b      	ldr	r3, [r3, #32]
 800dd4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6a1b      	ldr	r3, [r3, #32]
 800dd50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	69db      	ldr	r3, [r3, #28]
 800dd62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	021b      	lsls	r3, r3, #8
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dd86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	031b      	lsls	r3, r3, #12
 800dd8e:	693a      	ldr	r2, [r7, #16]
 800dd90:	4313      	orrs	r3, r2
 800dd92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	4a12      	ldr	r2, [pc, #72]	; (800dde0 <TIM_OC4_SetConfig+0xa4>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d003      	beq.n	800dda4 <TIM_OC4_SetConfig+0x68>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4a11      	ldr	r2, [pc, #68]	; (800dde4 <TIM_OC4_SetConfig+0xa8>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d109      	bne.n	800ddb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ddaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	695b      	ldr	r3, [r3, #20]
 800ddb0:	019b      	lsls	r3, r3, #6
 800ddb2:	697a      	ldr	r2, [r7, #20]
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	697a      	ldr	r2, [r7, #20]
 800ddbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	68fa      	ldr	r2, [r7, #12]
 800ddc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	685a      	ldr	r2, [r3, #4]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	693a      	ldr	r2, [r7, #16]
 800ddd0:	621a      	str	r2, [r3, #32]
}
 800ddd2:	bf00      	nop
 800ddd4:	371c      	adds	r7, #28
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	40010000 	.word	0x40010000
 800dde4:	40010400 	.word	0x40010400

0800dde8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b087      	sub	sp, #28
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6a1b      	ldr	r3, [r3, #32]
 800ddf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6a1b      	ldr	r3, [r3, #32]
 800ddfe:	f023 0201 	bic.w	r2, r3, #1
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	699b      	ldr	r3, [r3, #24]
 800de0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800de12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	011b      	lsls	r3, r3, #4
 800de18:	693a      	ldr	r2, [r7, #16]
 800de1a:	4313      	orrs	r3, r2
 800de1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	f023 030a 	bic.w	r3, r3, #10
 800de24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800de26:	697a      	ldr	r2, [r7, #20]
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	4313      	orrs	r3, r2
 800de2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	693a      	ldr	r2, [r7, #16]
 800de32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	697a      	ldr	r2, [r7, #20]
 800de38:	621a      	str	r2, [r3, #32]
}
 800de3a:	bf00      	nop
 800de3c:	371c      	adds	r7, #28
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr

0800de46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de46:	b480      	push	{r7}
 800de48:	b087      	sub	sp, #28
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	60f8      	str	r0, [r7, #12]
 800de4e:	60b9      	str	r1, [r7, #8]
 800de50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6a1b      	ldr	r3, [r3, #32]
 800de56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	6a1b      	ldr	r3, [r3, #32]
 800de5c:	f023 0210 	bic.w	r2, r3, #16
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	699b      	ldr	r3, [r3, #24]
 800de68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800de70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	031b      	lsls	r3, r3, #12
 800de76:	693a      	ldr	r2, [r7, #16]
 800de78:	4313      	orrs	r3, r2
 800de7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800de82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	011b      	lsls	r3, r3, #4
 800de88:	697a      	ldr	r2, [r7, #20]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	693a      	ldr	r2, [r7, #16]
 800de92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	697a      	ldr	r2, [r7, #20]
 800de98:	621a      	str	r2, [r3, #32]
}
 800de9a:	bf00      	nop
 800de9c:	371c      	adds	r7, #28
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr

0800dea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dea6:	b480      	push	{r7}
 800dea8:	b085      	sub	sp, #20
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
 800deae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	689b      	ldr	r3, [r3, #8]
 800deb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800debc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800debe:	683a      	ldr	r2, [r7, #0]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	4313      	orrs	r3, r2
 800dec4:	f043 0307 	orr.w	r3, r3, #7
 800dec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	609a      	str	r2, [r3, #8]
}
 800ded0:	bf00      	nop
 800ded2:	3714      	adds	r7, #20
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dedc:	b480      	push	{r7}
 800dede:	b087      	sub	sp, #28
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
 800dee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800def6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	021a      	lsls	r2, r3, #8
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	431a      	orrs	r2, r3
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	4313      	orrs	r3, r2
 800df04:	697a      	ldr	r2, [r7, #20]
 800df06:	4313      	orrs	r3, r2
 800df08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	697a      	ldr	r2, [r7, #20]
 800df0e:	609a      	str	r2, [r3, #8]
}
 800df10:	bf00      	nop
 800df12:	371c      	adds	r7, #28
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr

0800df1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b087      	sub	sp, #28
 800df20:	af00      	add	r7, sp, #0
 800df22:	60f8      	str	r0, [r7, #12]
 800df24:	60b9      	str	r1, [r7, #8]
 800df26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	f003 031f 	and.w	r3, r3, #31
 800df2e:	2201      	movs	r2, #1
 800df30:	fa02 f303 	lsl.w	r3, r2, r3
 800df34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	6a1a      	ldr	r2, [r3, #32]
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	43db      	mvns	r3, r3
 800df3e:	401a      	ands	r2, r3
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6a1a      	ldr	r2, [r3, #32]
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	f003 031f 	and.w	r3, r3, #31
 800df4e:	6879      	ldr	r1, [r7, #4]
 800df50:	fa01 f303 	lsl.w	r3, r1, r3
 800df54:	431a      	orrs	r2, r3
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	621a      	str	r2, [r3, #32]
}
 800df5a:	bf00      	nop
 800df5c:	371c      	adds	r7, #28
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr
	...

0800df68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df68:	b480      	push	{r7}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d101      	bne.n	800df80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df7c:	2302      	movs	r3, #2
 800df7e:	e05a      	b.n	800e036 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2201      	movs	r2, #1
 800df84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2202      	movs	r2, #2
 800df8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	68fa      	ldr	r2, [r7, #12]
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a21      	ldr	r2, [pc, #132]	; (800e044 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d022      	beq.n	800e00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfcc:	d01d      	beq.n	800e00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4a1d      	ldr	r2, [pc, #116]	; (800e048 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d018      	beq.n	800e00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a1b      	ldr	r2, [pc, #108]	; (800e04c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d013      	beq.n	800e00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4a1a      	ldr	r2, [pc, #104]	; (800e050 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d00e      	beq.n	800e00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a18      	ldr	r2, [pc, #96]	; (800e054 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d009      	beq.n	800e00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4a17      	ldr	r2, [pc, #92]	; (800e058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d004      	beq.n	800e00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4a15      	ldr	r2, [pc, #84]	; (800e05c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d10c      	bne.n	800e024 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	68ba      	ldr	r2, [r7, #8]
 800e018:	4313      	orrs	r3, r2
 800e01a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	68ba      	ldr	r2, [r7, #8]
 800e022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2200      	movs	r2, #0
 800e030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e034:	2300      	movs	r3, #0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3714      	adds	r7, #20
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	40010000 	.word	0x40010000
 800e048:	40000400 	.word	0x40000400
 800e04c:	40000800 	.word	0x40000800
 800e050:	40000c00 	.word	0x40000c00
 800e054:	40010400 	.word	0x40010400
 800e058:	40014000 	.word	0x40014000
 800e05c:	40001800 	.word	0x40001800

0800e060 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e068:	bf00      	nop
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e07c:	bf00      	nop
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d101      	bne.n	800e09a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e096:	2301      	movs	r3, #1
 800e098:	e042      	b.n	800e120 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d106      	bne.n	800e0b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7fb fa2a 	bl	8009508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2224      	movs	r2, #36	; 0x24
 800e0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	68da      	ldr	r2, [r3, #12]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e0ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 fdcb 	bl	800ec68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	691a      	ldr	r2, [r3, #16]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e0e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	695a      	ldr	r2, [r3, #20]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e0f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	68da      	ldr	r2, [r3, #12]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2200      	movs	r2, #0
 800e106:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2220      	movs	r2, #32
 800e10c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2220      	movs	r2, #32
 800e114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2200      	movs	r2, #0
 800e11c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e11e:	2300      	movs	r3, #0
}
 800e120:	4618      	mov	r0, r3
 800e122:	3708      	adds	r7, #8
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08c      	sub	sp, #48	; 0x30
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	4613      	mov	r3, r2
 800e134:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	2b20      	cmp	r3, #32
 800e140:	d156      	bne.n	800e1f0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d002      	beq.n	800e14e <HAL_UART_Transmit_DMA+0x26>
 800e148:	88fb      	ldrh	r3, [r7, #6]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d101      	bne.n	800e152 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e14e:	2301      	movs	r3, #1
 800e150:	e04f      	b.n	800e1f2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800e152:	68ba      	ldr	r2, [r7, #8]
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	88fa      	ldrh	r2, [r7, #6]
 800e15c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	88fa      	ldrh	r2, [r7, #6]
 800e162:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2200      	movs	r2, #0
 800e168:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2221      	movs	r2, #33	; 0x21
 800e16e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e176:	4a21      	ldr	r2, [pc, #132]	; (800e1fc <HAL_UART_Transmit_DMA+0xd4>)
 800e178:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e17e:	4a20      	ldr	r2, [pc, #128]	; (800e200 <HAL_UART_Transmit_DMA+0xd8>)
 800e180:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e186:	4a1f      	ldr	r2, [pc, #124]	; (800e204 <HAL_UART_Transmit_DMA+0xdc>)
 800e188:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e18e:	2200      	movs	r2, #0
 800e190:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800e192:	f107 0308 	add.w	r3, r7, #8
 800e196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19e:	6819      	ldr	r1, [r3, #0]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	88fb      	ldrh	r3, [r7, #6]
 800e1aa:	f7fc fa95 	bl	800a6d8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e1b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	3314      	adds	r3, #20
 800e1be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	e853 3f00 	ldrex	r3, [r3]
 800e1c6:	617b      	str	r3, [r7, #20]
   return(result);
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	3314      	adds	r3, #20
 800e1d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1d8:	627a      	str	r2, [r7, #36]	; 0x24
 800e1da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1dc:	6a39      	ldr	r1, [r7, #32]
 800e1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1e0:	e841 2300 	strex	r3, r2, [r1]
 800e1e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d1e5      	bne.n	800e1b8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	e000      	b.n	800e1f2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800e1f0:	2302      	movs	r3, #2
  }
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3730      	adds	r7, #48	; 0x30
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	0800e795 	.word	0x0800e795
 800e200:	0800e82f 	.word	0x0800e82f
 800e204:	0800e84b 	.word	0x0800e84b

0800e208 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b0ba      	sub	sp, #232	; 0xe8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	695b      	ldr	r3, [r3, #20]
 800e22a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800e22e:	2300      	movs	r3, #0
 800e230:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800e234:	2300      	movs	r3, #0
 800e236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e23a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e23e:	f003 030f 	and.w	r3, r3, #15
 800e242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800e246:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d10f      	bne.n	800e26e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e252:	f003 0320 	and.w	r3, r3, #32
 800e256:	2b00      	cmp	r3, #0
 800e258:	d009      	beq.n	800e26e <HAL_UART_IRQHandler+0x66>
 800e25a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e25e:	f003 0320 	and.w	r3, r3, #32
 800e262:	2b00      	cmp	r3, #0
 800e264:	d003      	beq.n	800e26e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 fc40 	bl	800eaec <UART_Receive_IT>
      return;
 800e26c:	e25b      	b.n	800e726 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e26e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e272:	2b00      	cmp	r3, #0
 800e274:	f000 80de 	beq.w	800e434 <HAL_UART_IRQHandler+0x22c>
 800e278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e27c:	f003 0301 	and.w	r3, r3, #1
 800e280:	2b00      	cmp	r3, #0
 800e282:	d106      	bne.n	800e292 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e288:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 80d1 	beq.w	800e434 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e296:	f003 0301 	and.w	r3, r3, #1
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00b      	beq.n	800e2b6 <HAL_UART_IRQHandler+0xae>
 800e29e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d005      	beq.n	800e2b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ae:	f043 0201 	orr.w	r2, r3, #1
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e2b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2ba:	f003 0304 	and.w	r3, r3, #4
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00b      	beq.n	800e2da <HAL_UART_IRQHandler+0xd2>
 800e2c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2c6:	f003 0301 	and.w	r3, r3, #1
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d005      	beq.n	800e2da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2d2:	f043 0202 	orr.w	r2, r3, #2
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e2da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2de:	f003 0302 	and.w	r3, r3, #2
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d00b      	beq.n	800e2fe <HAL_UART_IRQHandler+0xf6>
 800e2e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2ea:	f003 0301 	and.w	r3, r3, #1
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d005      	beq.n	800e2fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2f6:	f043 0204 	orr.w	r2, r3, #4
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e2fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e302:	f003 0308 	and.w	r3, r3, #8
 800e306:	2b00      	cmp	r3, #0
 800e308:	d011      	beq.n	800e32e <HAL_UART_IRQHandler+0x126>
 800e30a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e30e:	f003 0320 	and.w	r3, r3, #32
 800e312:	2b00      	cmp	r3, #0
 800e314:	d105      	bne.n	800e322 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e31a:	f003 0301 	and.w	r3, r3, #1
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d005      	beq.n	800e32e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e326:	f043 0208 	orr.w	r2, r3, #8
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e332:	2b00      	cmp	r3, #0
 800e334:	f000 81f2 	beq.w	800e71c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e33c:	f003 0320 	and.w	r3, r3, #32
 800e340:	2b00      	cmp	r3, #0
 800e342:	d008      	beq.n	800e356 <HAL_UART_IRQHandler+0x14e>
 800e344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e348:	f003 0320 	and.w	r3, r3, #32
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d002      	beq.n	800e356 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 fbcb 	bl	800eaec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	695b      	ldr	r3, [r3, #20]
 800e35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e360:	2b40      	cmp	r3, #64	; 0x40
 800e362:	bf0c      	ite	eq
 800e364:	2301      	moveq	r3, #1
 800e366:	2300      	movne	r3, #0
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e372:	f003 0308 	and.w	r3, r3, #8
 800e376:	2b00      	cmp	r3, #0
 800e378:	d103      	bne.n	800e382 <HAL_UART_IRQHandler+0x17a>
 800e37a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d04f      	beq.n	800e422 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fad3 	bl	800e92e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	695b      	ldr	r3, [r3, #20]
 800e38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e392:	2b40      	cmp	r3, #64	; 0x40
 800e394:	d141      	bne.n	800e41a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	3314      	adds	r3, #20
 800e39c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e3a4:	e853 3f00 	ldrex	r3, [r3]
 800e3a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e3ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3314      	adds	r3, #20
 800e3be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e3c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e3c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e3ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e3d2:	e841 2300 	strex	r3, r2, [r1]
 800e3d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e3da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d1d9      	bne.n	800e396 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d013      	beq.n	800e412 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3ee:	4a7e      	ldr	r2, [pc, #504]	; (800e5e8 <HAL_UART_IRQHandler+0x3e0>)
 800e3f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7fc fa36 	bl	800a868 <HAL_DMA_Abort_IT>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d016      	beq.n	800e430 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e40c:	4610      	mov	r0, r2
 800e40e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e410:	e00e      	b.n	800e430 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 f9a8 	bl	800e768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e418:	e00a      	b.n	800e430 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 f9a4 	bl	800e768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e420:	e006      	b.n	800e430 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 f9a0 	bl	800e768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800e42e:	e175      	b.n	800e71c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e430:	bf00      	nop
    return;
 800e432:	e173      	b.n	800e71c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e438:	2b01      	cmp	r3, #1
 800e43a:	f040 814f 	bne.w	800e6dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e43e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e442:	f003 0310 	and.w	r3, r3, #16
 800e446:	2b00      	cmp	r3, #0
 800e448:	f000 8148 	beq.w	800e6dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e44c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e450:	f003 0310 	and.w	r3, r3, #16
 800e454:	2b00      	cmp	r3, #0
 800e456:	f000 8141 	beq.w	800e6dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e45a:	2300      	movs	r3, #0
 800e45c:	60bb      	str	r3, [r7, #8]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	60bb      	str	r3, [r7, #8]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	60bb      	str	r3, [r7, #8]
 800e46e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	695b      	ldr	r3, [r3, #20]
 800e476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e47a:	2b40      	cmp	r3, #64	; 0x40
 800e47c:	f040 80b6 	bne.w	800e5ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e48c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e490:	2b00      	cmp	r3, #0
 800e492:	f000 8145 	beq.w	800e720 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e49a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	f080 813e 	bcs.w	800e720 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e4aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4b0:	69db      	ldr	r3, [r3, #28]
 800e4b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4b6:	f000 8088 	beq.w	800e5ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	330c      	adds	r3, #12
 800e4c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e4c8:	e853 3f00 	ldrex	r3, [r3]
 800e4cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e4d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	330c      	adds	r3, #12
 800e4e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e4e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e4ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e4f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e4f6:	e841 2300 	strex	r3, r2, [r1]
 800e4fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e4fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1d9      	bne.n	800e4ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	3314      	adds	r3, #20
 800e50c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e50e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e510:	e853 3f00 	ldrex	r3, [r3]
 800e514:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e518:	f023 0301 	bic.w	r3, r3, #1
 800e51c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	3314      	adds	r3, #20
 800e526:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e52a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e52e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e530:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e532:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e536:	e841 2300 	strex	r3, r2, [r1]
 800e53a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e53c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d1e1      	bne.n	800e506 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	3314      	adds	r3, #20
 800e548:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e54a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e54c:	e853 3f00 	ldrex	r3, [r3]
 800e550:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e558:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	3314      	adds	r3, #20
 800e562:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e566:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e568:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e56a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e56c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e56e:	e841 2300 	strex	r3, r2, [r1]
 800e572:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e576:	2b00      	cmp	r3, #0
 800e578:	d1e3      	bne.n	800e542 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2220      	movs	r2, #32
 800e57e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2200      	movs	r2, #0
 800e586:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	330c      	adds	r3, #12
 800e58e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e592:	e853 3f00 	ldrex	r3, [r3]
 800e596:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e59a:	f023 0310 	bic.w	r3, r3, #16
 800e59e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	330c      	adds	r3, #12
 800e5a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e5ac:	65ba      	str	r2, [r7, #88]	; 0x58
 800e5ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e5b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e5b4:	e841 2300 	strex	r3, r2, [r1]
 800e5b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d1e3      	bne.n	800e588 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fc f8df 	bl	800a788 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2202      	movs	r2, #2
 800e5ce:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	1ad3      	subs	r3, r2, r3
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	4619      	mov	r1, r3
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 f8cb 	bl	800e77c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e5e6:	e09b      	b.n	800e720 <HAL_UART_IRQHandler+0x518>
 800e5e8:	0800e9f5 	.word	0x0800e9f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e600:	b29b      	uxth	r3, r3
 800e602:	2b00      	cmp	r3, #0
 800e604:	f000 808e 	beq.w	800e724 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800e608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f000 8089 	beq.w	800e724 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	330c      	adds	r3, #12
 800e618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e61c:	e853 3f00 	ldrex	r3, [r3]
 800e620:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	330c      	adds	r3, #12
 800e632:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e636:	647a      	str	r2, [r7, #68]	; 0x44
 800e638:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e63a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e63c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e63e:	e841 2300 	strex	r3, r2, [r1]
 800e642:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e646:	2b00      	cmp	r3, #0
 800e648:	d1e3      	bne.n	800e612 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	3314      	adds	r3, #20
 800e650:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e654:	e853 3f00 	ldrex	r3, [r3]
 800e658:	623b      	str	r3, [r7, #32]
   return(result);
 800e65a:	6a3b      	ldr	r3, [r7, #32]
 800e65c:	f023 0301 	bic.w	r3, r3, #1
 800e660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	3314      	adds	r3, #20
 800e66a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e66e:	633a      	str	r2, [r7, #48]	; 0x30
 800e670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e676:	e841 2300 	strex	r3, r2, [r1]
 800e67a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1e3      	bne.n	800e64a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2220      	movs	r2, #32
 800e686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2200      	movs	r2, #0
 800e68e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	330c      	adds	r3, #12
 800e696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	e853 3f00 	ldrex	r3, [r3]
 800e69e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f023 0310 	bic.w	r3, r3, #16
 800e6a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	330c      	adds	r3, #12
 800e6b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e6b4:	61fa      	str	r2, [r7, #28]
 800e6b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b8:	69b9      	ldr	r1, [r7, #24]
 800e6ba:	69fa      	ldr	r2, [r7, #28]
 800e6bc:	e841 2300 	strex	r3, r2, [r1]
 800e6c0:	617b      	str	r3, [r7, #20]
   return(result);
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d1e3      	bne.n	800e690 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2202      	movs	r2, #2
 800e6cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f851 	bl	800e77c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e6da:	e023      	b.n	800e724 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d009      	beq.n	800e6fc <HAL_UART_IRQHandler+0x4f4>
 800e6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d003      	beq.n	800e6fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 f991 	bl	800ea1c <UART_Transmit_IT>
    return;
 800e6fa:	e014      	b.n	800e726 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00e      	beq.n	800e726 <HAL_UART_IRQHandler+0x51e>
 800e708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e710:	2b00      	cmp	r3, #0
 800e712:	d008      	beq.n	800e726 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 f9d1 	bl	800eabc <UART_EndTransmit_IT>
    return;
 800e71a:	e004      	b.n	800e726 <HAL_UART_IRQHandler+0x51e>
    return;
 800e71c:	bf00      	nop
 800e71e:	e002      	b.n	800e726 <HAL_UART_IRQHandler+0x51e>
      return;
 800e720:	bf00      	nop
 800e722:	e000      	b.n	800e726 <HAL_UART_IRQHandler+0x51e>
      return;
 800e724:	bf00      	nop
  }
}
 800e726:	37e8      	adds	r7, #232	; 0xe8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e734:	bf00      	nop
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e748:	bf00      	nop
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e75c:	bf00      	nop
 800e75e:	370c      	adds	r7, #12
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e770:	bf00      	nop
 800e772:	370c      	adds	r7, #12
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	460b      	mov	r3, r1
 800e786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e788:	bf00      	nop
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b090      	sub	sp, #64	; 0x40
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d137      	bne.n	800e820 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800e7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	3314      	adds	r3, #20
 800e7bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c0:	e853 3f00 	ldrex	r3, [r3]
 800e7c4:	623b      	str	r3, [r7, #32]
   return(result);
 800e7c6:	6a3b      	ldr	r3, [r7, #32]
 800e7c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	3314      	adds	r3, #20
 800e7d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7d6:	633a      	str	r2, [r7, #48]	; 0x30
 800e7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7de:	e841 2300 	strex	r3, r2, [r1]
 800e7e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d1e5      	bne.n	800e7b6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	330c      	adds	r3, #12
 800e7f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	e853 3f00 	ldrex	r3, [r3]
 800e7f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e800:	637b      	str	r3, [r7, #52]	; 0x34
 800e802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	330c      	adds	r3, #12
 800e808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e80a:	61fa      	str	r2, [r7, #28]
 800e80c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80e:	69b9      	ldr	r1, [r7, #24]
 800e810:	69fa      	ldr	r2, [r7, #28]
 800e812:	e841 2300 	strex	r3, r2, [r1]
 800e816:	617b      	str	r3, [r7, #20]
   return(result);
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d1e5      	bne.n	800e7ea <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e81e:	e002      	b.n	800e826 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e820:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e822:	f7ff ff83 	bl	800e72c <HAL_UART_TxCpltCallback>
}
 800e826:	bf00      	nop
 800e828:	3740      	adds	r7, #64	; 0x40
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b084      	sub	sp, #16
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e83a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	f7ff ff7f 	bl	800e740 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e842:	bf00      	nop
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}

0800e84a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b084      	sub	sp, #16
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e852:	2300      	movs	r3, #0
 800e854:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e85a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	695b      	ldr	r3, [r3, #20]
 800e862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e866:	2b80      	cmp	r3, #128	; 0x80
 800e868:	bf0c      	ite	eq
 800e86a:	2301      	moveq	r3, #1
 800e86c:	2300      	movne	r3, #0
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	2b21      	cmp	r3, #33	; 0x21
 800e87c:	d108      	bne.n	800e890 <UART_DMAError+0x46>
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d005      	beq.n	800e890 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	2200      	movs	r2, #0
 800e888:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e88a:	68b8      	ldr	r0, [r7, #8]
 800e88c:	f000 f827 	bl	800e8de <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	695b      	ldr	r3, [r3, #20]
 800e896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e89a:	2b40      	cmp	r3, #64	; 0x40
 800e89c:	bf0c      	ite	eq
 800e89e:	2301      	moveq	r3, #1
 800e8a0:	2300      	movne	r3, #0
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	2b22      	cmp	r3, #34	; 0x22
 800e8b0:	d108      	bne.n	800e8c4 <UART_DMAError+0x7a>
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d005      	beq.n	800e8c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e8be:	68b8      	ldr	r0, [r7, #8]
 800e8c0:	f000 f835 	bl	800e92e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8c8:	f043 0210 	orr.w	r2, r3, #16
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e8d0:	68b8      	ldr	r0, [r7, #8]
 800e8d2:	f7ff ff49 	bl	800e768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e8d6:	bf00      	nop
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e8de:	b480      	push	{r7}
 800e8e0:	b089      	sub	sp, #36	; 0x24
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	330c      	adds	r3, #12
 800e8ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	e853 3f00 	ldrex	r3, [r3]
 800e8f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e8fc:	61fb      	str	r3, [r7, #28]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	330c      	adds	r3, #12
 800e904:	69fa      	ldr	r2, [r7, #28]
 800e906:	61ba      	str	r2, [r7, #24]
 800e908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e90a:	6979      	ldr	r1, [r7, #20]
 800e90c:	69ba      	ldr	r2, [r7, #24]
 800e90e:	e841 2300 	strex	r3, r2, [r1]
 800e912:	613b      	str	r3, [r7, #16]
   return(result);
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1e5      	bne.n	800e8e6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2220      	movs	r2, #32
 800e91e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800e922:	bf00      	nop
 800e924:	3724      	adds	r7, #36	; 0x24
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr

0800e92e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e92e:	b480      	push	{r7}
 800e930:	b095      	sub	sp, #84	; 0x54
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	330c      	adds	r3, #12
 800e93c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e940:	e853 3f00 	ldrex	r3, [r3]
 800e944:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e94c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	330c      	adds	r3, #12
 800e954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e956:	643a      	str	r2, [r7, #64]	; 0x40
 800e958:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e95c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e95e:	e841 2300 	strex	r3, r2, [r1]
 800e962:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e966:	2b00      	cmp	r3, #0
 800e968:	d1e5      	bne.n	800e936 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	3314      	adds	r3, #20
 800e970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e972:	6a3b      	ldr	r3, [r7, #32]
 800e974:	e853 3f00 	ldrex	r3, [r3]
 800e978:	61fb      	str	r3, [r7, #28]
   return(result);
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	f023 0301 	bic.w	r3, r3, #1
 800e980:	64bb      	str	r3, [r7, #72]	; 0x48
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	3314      	adds	r3, #20
 800e988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e98a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e98c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e98e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e992:	e841 2300 	strex	r3, r2, [r1]
 800e996:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d1e5      	bne.n	800e96a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d119      	bne.n	800e9da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	330c      	adds	r3, #12
 800e9ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	e853 3f00 	ldrex	r3, [r3]
 800e9b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	f023 0310 	bic.w	r3, r3, #16
 800e9bc:	647b      	str	r3, [r7, #68]	; 0x44
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	330c      	adds	r3, #12
 800e9c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9c6:	61ba      	str	r2, [r7, #24]
 800e9c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ca:	6979      	ldr	r1, [r7, #20]
 800e9cc:	69ba      	ldr	r2, [r7, #24]
 800e9ce:	e841 2300 	strex	r3, r2, [r1]
 800e9d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d1e5      	bne.n	800e9a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2220      	movs	r2, #32
 800e9de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e9e8:	bf00      	nop
 800e9ea:	3754      	adds	r7, #84	; 0x54
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2200      	movs	r2, #0
 800ea06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f7ff feaa 	bl	800e768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea14:	bf00      	nop
 800ea16:	3710      	adds	r7, #16
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	2b21      	cmp	r3, #33	; 0x21
 800ea2e:	d13e      	bne.n	800eaae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea38:	d114      	bne.n	800ea64 <UART_Transmit_IT+0x48>
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	691b      	ldr	r3, [r3, #16]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d110      	bne.n	800ea64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6a1b      	ldr	r3, [r3, #32]
 800ea46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	881b      	ldrh	r3, [r3, #0]
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ea56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6a1b      	ldr	r3, [r3, #32]
 800ea5c:	1c9a      	adds	r2, r3, #2
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	621a      	str	r2, [r3, #32]
 800ea62:	e008      	b.n	800ea76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6a1b      	ldr	r3, [r3, #32]
 800ea68:	1c59      	adds	r1, r3, #1
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	6211      	str	r1, [r2, #32]
 800ea6e:	781a      	ldrb	r2, [r3, #0]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	3b01      	subs	r3, #1
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	4619      	mov	r1, r3
 800ea84:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d10f      	bne.n	800eaaa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	68da      	ldr	r2, [r3, #12]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ea98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	68da      	ldr	r2, [r3, #12]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eaa8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	e000      	b.n	800eab0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800eaae:	2302      	movs	r3, #2
  }
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3714      	adds	r7, #20
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr

0800eabc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	68da      	ldr	r2, [r3, #12]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ead2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2220      	movs	r2, #32
 800ead8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f7ff fe25 	bl	800e72c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b08c      	sub	sp, #48	; 0x30
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eafa:	b2db      	uxtb	r3, r3
 800eafc:	2b22      	cmp	r3, #34	; 0x22
 800eafe:	f040 80ae 	bne.w	800ec5e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb0a:	d117      	bne.n	800eb3c <UART_Receive_IT+0x50>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	691b      	ldr	r3, [r3, #16]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d113      	bne.n	800eb3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800eb14:	2300      	movs	r3, #0
 800eb16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb1c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb34:	1c9a      	adds	r2, r3, #2
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	629a      	str	r2, [r3, #40]	; 0x28
 800eb3a:	e026      	b.n	800eb8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800eb42:	2300      	movs	r3, #0
 800eb44:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	689b      	ldr	r3, [r3, #8]
 800eb4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb4e:	d007      	beq.n	800eb60 <UART_Receive_IT+0x74>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d10a      	bne.n	800eb6e <UART_Receive_IT+0x82>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	691b      	ldr	r3, [r3, #16]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d106      	bne.n	800eb6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	b2da      	uxtb	r2, r3
 800eb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6a:	701a      	strb	r2, [r3, #0]
 800eb6c:	e008      	b.n	800eb80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb7a:	b2da      	uxtb	r2, r3
 800eb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb84:	1c5a      	adds	r2, r3, #1
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	3b01      	subs	r3, #1
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	4619      	mov	r1, r3
 800eb98:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d15d      	bne.n	800ec5a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	68da      	ldr	r2, [r3, #12]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f022 0220 	bic.w	r2, r2, #32
 800ebac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	68da      	ldr	r2, [r3, #12]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ebbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	695a      	ldr	r2, [r3, #20]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f022 0201 	bic.w	r2, r2, #1
 800ebcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2220      	movs	r2, #32
 800ebd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d135      	bne.n	800ec50 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	330c      	adds	r3, #12
 800ebf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	e853 3f00 	ldrex	r3, [r3]
 800ebf8:	613b      	str	r3, [r7, #16]
   return(result);
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	f023 0310 	bic.w	r3, r3, #16
 800ec00:	627b      	str	r3, [r7, #36]	; 0x24
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	330c      	adds	r3, #12
 800ec08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec0a:	623a      	str	r2, [r7, #32]
 800ec0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec0e:	69f9      	ldr	r1, [r7, #28]
 800ec10:	6a3a      	ldr	r2, [r7, #32]
 800ec12:	e841 2300 	strex	r3, r2, [r1]
 800ec16:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d1e5      	bne.n	800ebea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f003 0310 	and.w	r3, r3, #16
 800ec28:	2b10      	cmp	r3, #16
 800ec2a:	d10a      	bne.n	800ec42 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	60fb      	str	r3, [r7, #12]
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	60fb      	str	r3, [r7, #12]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	60fb      	str	r3, [r7, #12]
 800ec40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ec46:	4619      	mov	r1, r3
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7ff fd97 	bl	800e77c <HAL_UARTEx_RxEventCallback>
 800ec4e:	e002      	b.n	800ec56 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f7ff fd7f 	bl	800e754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ec56:	2300      	movs	r3, #0
 800ec58:	e002      	b.n	800ec60 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	e000      	b.n	800ec60 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ec5e:	2302      	movs	r3, #2
  }
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3730      	adds	r7, #48	; 0x30
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec6c:	b0c0      	sub	sp, #256	; 0x100
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	691b      	ldr	r3, [r3, #16]
 800ec7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ec80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec84:	68d9      	ldr	r1, [r3, #12]
 800ec86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	ea40 0301 	orr.w	r3, r0, r1
 800ec90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ec92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec96:	689a      	ldr	r2, [r3, #8]
 800ec98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec9c:	691b      	ldr	r3, [r3, #16]
 800ec9e:	431a      	orrs	r2, r3
 800eca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	431a      	orrs	r2, r3
 800eca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ecac:	69db      	ldr	r3, [r3, #28]
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ecb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ecc0:	f021 010c 	bic.w	r1, r1, #12
 800ecc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ecce:	430b      	orrs	r3, r1
 800ecd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ecd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	695b      	ldr	r3, [r3, #20]
 800ecda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ecde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ece2:	6999      	ldr	r1, [r3, #24]
 800ece4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ece8:	681a      	ldr	r2, [r3, #0]
 800ecea:	ea40 0301 	orr.w	r3, r0, r1
 800ecee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ecf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	4b8f      	ldr	r3, [pc, #572]	; (800ef34 <UART_SetConfig+0x2cc>)
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d005      	beq.n	800ed08 <UART_SetConfig+0xa0>
 800ecfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	4b8d      	ldr	r3, [pc, #564]	; (800ef38 <UART_SetConfig+0x2d0>)
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d104      	bne.n	800ed12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ed08:	f7fe f8d2 	bl	800ceb0 <HAL_RCC_GetPCLK2Freq>
 800ed0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ed10:	e003      	b.n	800ed1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ed12:	f7fe f8b9 	bl	800ce88 <HAL_RCC_GetPCLK1Freq>
 800ed16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed1e:	69db      	ldr	r3, [r3, #28]
 800ed20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed24:	f040 810c 	bne.w	800ef40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ed28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ed32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ed36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ed3a:	4622      	mov	r2, r4
 800ed3c:	462b      	mov	r3, r5
 800ed3e:	1891      	adds	r1, r2, r2
 800ed40:	65b9      	str	r1, [r7, #88]	; 0x58
 800ed42:	415b      	adcs	r3, r3
 800ed44:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ed4a:	4621      	mov	r1, r4
 800ed4c:	eb12 0801 	adds.w	r8, r2, r1
 800ed50:	4629      	mov	r1, r5
 800ed52:	eb43 0901 	adc.w	r9, r3, r1
 800ed56:	f04f 0200 	mov.w	r2, #0
 800ed5a:	f04f 0300 	mov.w	r3, #0
 800ed5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ed62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ed66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ed6a:	4690      	mov	r8, r2
 800ed6c:	4699      	mov	r9, r3
 800ed6e:	4623      	mov	r3, r4
 800ed70:	eb18 0303 	adds.w	r3, r8, r3
 800ed74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ed78:	462b      	mov	r3, r5
 800ed7a:	eb49 0303 	adc.w	r3, r9, r3
 800ed7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ed82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ed8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ed92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ed96:	460b      	mov	r3, r1
 800ed98:	18db      	adds	r3, r3, r3
 800ed9a:	653b      	str	r3, [r7, #80]	; 0x50
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	eb42 0303 	adc.w	r3, r2, r3
 800eda2:	657b      	str	r3, [r7, #84]	; 0x54
 800eda4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800eda8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800edac:	f7f1 ff5c 	bl	8000c68 <__aeabi_uldivmod>
 800edb0:	4602      	mov	r2, r0
 800edb2:	460b      	mov	r3, r1
 800edb4:	4b61      	ldr	r3, [pc, #388]	; (800ef3c <UART_SetConfig+0x2d4>)
 800edb6:	fba3 2302 	umull	r2, r3, r3, r2
 800edba:	095b      	lsrs	r3, r3, #5
 800edbc:	011c      	lsls	r4, r3, #4
 800edbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800edc2:	2200      	movs	r2, #0
 800edc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800edc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800edcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800edd0:	4642      	mov	r2, r8
 800edd2:	464b      	mov	r3, r9
 800edd4:	1891      	adds	r1, r2, r2
 800edd6:	64b9      	str	r1, [r7, #72]	; 0x48
 800edd8:	415b      	adcs	r3, r3
 800edda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eddc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ede0:	4641      	mov	r1, r8
 800ede2:	eb12 0a01 	adds.w	sl, r2, r1
 800ede6:	4649      	mov	r1, r9
 800ede8:	eb43 0b01 	adc.w	fp, r3, r1
 800edec:	f04f 0200 	mov.w	r2, #0
 800edf0:	f04f 0300 	mov.w	r3, #0
 800edf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800edf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800edfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ee00:	4692      	mov	sl, r2
 800ee02:	469b      	mov	fp, r3
 800ee04:	4643      	mov	r3, r8
 800ee06:	eb1a 0303 	adds.w	r3, sl, r3
 800ee0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ee0e:	464b      	mov	r3, r9
 800ee10:	eb4b 0303 	adc.w	r3, fp, r3
 800ee14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ee18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ee24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ee28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	18db      	adds	r3, r3, r3
 800ee30:	643b      	str	r3, [r7, #64]	; 0x40
 800ee32:	4613      	mov	r3, r2
 800ee34:	eb42 0303 	adc.w	r3, r2, r3
 800ee38:	647b      	str	r3, [r7, #68]	; 0x44
 800ee3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ee3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ee42:	f7f1 ff11 	bl	8000c68 <__aeabi_uldivmod>
 800ee46:	4602      	mov	r2, r0
 800ee48:	460b      	mov	r3, r1
 800ee4a:	4611      	mov	r1, r2
 800ee4c:	4b3b      	ldr	r3, [pc, #236]	; (800ef3c <UART_SetConfig+0x2d4>)
 800ee4e:	fba3 2301 	umull	r2, r3, r3, r1
 800ee52:	095b      	lsrs	r3, r3, #5
 800ee54:	2264      	movs	r2, #100	; 0x64
 800ee56:	fb02 f303 	mul.w	r3, r2, r3
 800ee5a:	1acb      	subs	r3, r1, r3
 800ee5c:	00db      	lsls	r3, r3, #3
 800ee5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ee62:	4b36      	ldr	r3, [pc, #216]	; (800ef3c <UART_SetConfig+0x2d4>)
 800ee64:	fba3 2302 	umull	r2, r3, r3, r2
 800ee68:	095b      	lsrs	r3, r3, #5
 800ee6a:	005b      	lsls	r3, r3, #1
 800ee6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ee70:	441c      	add	r4, r3
 800ee72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ee76:	2200      	movs	r2, #0
 800ee78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ee7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ee80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ee84:	4642      	mov	r2, r8
 800ee86:	464b      	mov	r3, r9
 800ee88:	1891      	adds	r1, r2, r2
 800ee8a:	63b9      	str	r1, [r7, #56]	; 0x38
 800ee8c:	415b      	adcs	r3, r3
 800ee8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ee94:	4641      	mov	r1, r8
 800ee96:	1851      	adds	r1, r2, r1
 800ee98:	6339      	str	r1, [r7, #48]	; 0x30
 800ee9a:	4649      	mov	r1, r9
 800ee9c:	414b      	adcs	r3, r1
 800ee9e:	637b      	str	r3, [r7, #52]	; 0x34
 800eea0:	f04f 0200 	mov.w	r2, #0
 800eea4:	f04f 0300 	mov.w	r3, #0
 800eea8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800eeac:	4659      	mov	r1, fp
 800eeae:	00cb      	lsls	r3, r1, #3
 800eeb0:	4651      	mov	r1, sl
 800eeb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800eeb6:	4651      	mov	r1, sl
 800eeb8:	00ca      	lsls	r2, r1, #3
 800eeba:	4610      	mov	r0, r2
 800eebc:	4619      	mov	r1, r3
 800eebe:	4603      	mov	r3, r0
 800eec0:	4642      	mov	r2, r8
 800eec2:	189b      	adds	r3, r3, r2
 800eec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eec8:	464b      	mov	r3, r9
 800eeca:	460a      	mov	r2, r1
 800eecc:	eb42 0303 	adc.w	r3, r2, r3
 800eed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800eed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	2200      	movs	r2, #0
 800eedc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800eee0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800eee4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800eee8:	460b      	mov	r3, r1
 800eeea:	18db      	adds	r3, r3, r3
 800eeec:	62bb      	str	r3, [r7, #40]	; 0x28
 800eeee:	4613      	mov	r3, r2
 800eef0:	eb42 0303 	adc.w	r3, r2, r3
 800eef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eef6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800eefa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800eefe:	f7f1 feb3 	bl	8000c68 <__aeabi_uldivmod>
 800ef02:	4602      	mov	r2, r0
 800ef04:	460b      	mov	r3, r1
 800ef06:	4b0d      	ldr	r3, [pc, #52]	; (800ef3c <UART_SetConfig+0x2d4>)
 800ef08:	fba3 1302 	umull	r1, r3, r3, r2
 800ef0c:	095b      	lsrs	r3, r3, #5
 800ef0e:	2164      	movs	r1, #100	; 0x64
 800ef10:	fb01 f303 	mul.w	r3, r1, r3
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	00db      	lsls	r3, r3, #3
 800ef18:	3332      	adds	r3, #50	; 0x32
 800ef1a:	4a08      	ldr	r2, [pc, #32]	; (800ef3c <UART_SetConfig+0x2d4>)
 800ef1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ef20:	095b      	lsrs	r3, r3, #5
 800ef22:	f003 0207 	and.w	r2, r3, #7
 800ef26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4422      	add	r2, r4
 800ef2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ef30:	e106      	b.n	800f140 <UART_SetConfig+0x4d8>
 800ef32:	bf00      	nop
 800ef34:	40011000 	.word	0x40011000
 800ef38:	40011400 	.word	0x40011400
 800ef3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ef40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ef44:	2200      	movs	r2, #0
 800ef46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ef4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ef4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ef52:	4642      	mov	r2, r8
 800ef54:	464b      	mov	r3, r9
 800ef56:	1891      	adds	r1, r2, r2
 800ef58:	6239      	str	r1, [r7, #32]
 800ef5a:	415b      	adcs	r3, r3
 800ef5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ef5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ef62:	4641      	mov	r1, r8
 800ef64:	1854      	adds	r4, r2, r1
 800ef66:	4649      	mov	r1, r9
 800ef68:	eb43 0501 	adc.w	r5, r3, r1
 800ef6c:	f04f 0200 	mov.w	r2, #0
 800ef70:	f04f 0300 	mov.w	r3, #0
 800ef74:	00eb      	lsls	r3, r5, #3
 800ef76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ef7a:	00e2      	lsls	r2, r4, #3
 800ef7c:	4614      	mov	r4, r2
 800ef7e:	461d      	mov	r5, r3
 800ef80:	4643      	mov	r3, r8
 800ef82:	18e3      	adds	r3, r4, r3
 800ef84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ef88:	464b      	mov	r3, r9
 800ef8a:	eb45 0303 	adc.w	r3, r5, r3
 800ef8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ef92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ef9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800efa2:	f04f 0200 	mov.w	r2, #0
 800efa6:	f04f 0300 	mov.w	r3, #0
 800efaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800efae:	4629      	mov	r1, r5
 800efb0:	008b      	lsls	r3, r1, #2
 800efb2:	4621      	mov	r1, r4
 800efb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800efb8:	4621      	mov	r1, r4
 800efba:	008a      	lsls	r2, r1, #2
 800efbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800efc0:	f7f1 fe52 	bl	8000c68 <__aeabi_uldivmod>
 800efc4:	4602      	mov	r2, r0
 800efc6:	460b      	mov	r3, r1
 800efc8:	4b60      	ldr	r3, [pc, #384]	; (800f14c <UART_SetConfig+0x4e4>)
 800efca:	fba3 2302 	umull	r2, r3, r3, r2
 800efce:	095b      	lsrs	r3, r3, #5
 800efd0:	011c      	lsls	r4, r3, #4
 800efd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800efd6:	2200      	movs	r2, #0
 800efd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800efdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800efe0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800efe4:	4642      	mov	r2, r8
 800efe6:	464b      	mov	r3, r9
 800efe8:	1891      	adds	r1, r2, r2
 800efea:	61b9      	str	r1, [r7, #24]
 800efec:	415b      	adcs	r3, r3
 800efee:	61fb      	str	r3, [r7, #28]
 800eff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800eff4:	4641      	mov	r1, r8
 800eff6:	1851      	adds	r1, r2, r1
 800eff8:	6139      	str	r1, [r7, #16]
 800effa:	4649      	mov	r1, r9
 800effc:	414b      	adcs	r3, r1
 800effe:	617b      	str	r3, [r7, #20]
 800f000:	f04f 0200 	mov.w	r2, #0
 800f004:	f04f 0300 	mov.w	r3, #0
 800f008:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f00c:	4659      	mov	r1, fp
 800f00e:	00cb      	lsls	r3, r1, #3
 800f010:	4651      	mov	r1, sl
 800f012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f016:	4651      	mov	r1, sl
 800f018:	00ca      	lsls	r2, r1, #3
 800f01a:	4610      	mov	r0, r2
 800f01c:	4619      	mov	r1, r3
 800f01e:	4603      	mov	r3, r0
 800f020:	4642      	mov	r2, r8
 800f022:	189b      	adds	r3, r3, r2
 800f024:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f028:	464b      	mov	r3, r9
 800f02a:	460a      	mov	r2, r1
 800f02c:	eb42 0303 	adc.w	r3, r2, r3
 800f030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f038:	685b      	ldr	r3, [r3, #4]
 800f03a:	2200      	movs	r2, #0
 800f03c:	67bb      	str	r3, [r7, #120]	; 0x78
 800f03e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f040:	f04f 0200 	mov.w	r2, #0
 800f044:	f04f 0300 	mov.w	r3, #0
 800f048:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800f04c:	4649      	mov	r1, r9
 800f04e:	008b      	lsls	r3, r1, #2
 800f050:	4641      	mov	r1, r8
 800f052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f056:	4641      	mov	r1, r8
 800f058:	008a      	lsls	r2, r1, #2
 800f05a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800f05e:	f7f1 fe03 	bl	8000c68 <__aeabi_uldivmod>
 800f062:	4602      	mov	r2, r0
 800f064:	460b      	mov	r3, r1
 800f066:	4611      	mov	r1, r2
 800f068:	4b38      	ldr	r3, [pc, #224]	; (800f14c <UART_SetConfig+0x4e4>)
 800f06a:	fba3 2301 	umull	r2, r3, r3, r1
 800f06e:	095b      	lsrs	r3, r3, #5
 800f070:	2264      	movs	r2, #100	; 0x64
 800f072:	fb02 f303 	mul.w	r3, r2, r3
 800f076:	1acb      	subs	r3, r1, r3
 800f078:	011b      	lsls	r3, r3, #4
 800f07a:	3332      	adds	r3, #50	; 0x32
 800f07c:	4a33      	ldr	r2, [pc, #204]	; (800f14c <UART_SetConfig+0x4e4>)
 800f07e:	fba2 2303 	umull	r2, r3, r2, r3
 800f082:	095b      	lsrs	r3, r3, #5
 800f084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f088:	441c      	add	r4, r3
 800f08a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f08e:	2200      	movs	r2, #0
 800f090:	673b      	str	r3, [r7, #112]	; 0x70
 800f092:	677a      	str	r2, [r7, #116]	; 0x74
 800f094:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f098:	4642      	mov	r2, r8
 800f09a:	464b      	mov	r3, r9
 800f09c:	1891      	adds	r1, r2, r2
 800f09e:	60b9      	str	r1, [r7, #8]
 800f0a0:	415b      	adcs	r3, r3
 800f0a2:	60fb      	str	r3, [r7, #12]
 800f0a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f0a8:	4641      	mov	r1, r8
 800f0aa:	1851      	adds	r1, r2, r1
 800f0ac:	6039      	str	r1, [r7, #0]
 800f0ae:	4649      	mov	r1, r9
 800f0b0:	414b      	adcs	r3, r1
 800f0b2:	607b      	str	r3, [r7, #4]
 800f0b4:	f04f 0200 	mov.w	r2, #0
 800f0b8:	f04f 0300 	mov.w	r3, #0
 800f0bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f0c0:	4659      	mov	r1, fp
 800f0c2:	00cb      	lsls	r3, r1, #3
 800f0c4:	4651      	mov	r1, sl
 800f0c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f0ca:	4651      	mov	r1, sl
 800f0cc:	00ca      	lsls	r2, r1, #3
 800f0ce:	4610      	mov	r0, r2
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	4642      	mov	r2, r8
 800f0d6:	189b      	adds	r3, r3, r2
 800f0d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f0da:	464b      	mov	r3, r9
 800f0dc:	460a      	mov	r2, r1
 800f0de:	eb42 0303 	adc.w	r3, r2, r3
 800f0e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	663b      	str	r3, [r7, #96]	; 0x60
 800f0ee:	667a      	str	r2, [r7, #100]	; 0x64
 800f0f0:	f04f 0200 	mov.w	r2, #0
 800f0f4:	f04f 0300 	mov.w	r3, #0
 800f0f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800f0fc:	4649      	mov	r1, r9
 800f0fe:	008b      	lsls	r3, r1, #2
 800f100:	4641      	mov	r1, r8
 800f102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f106:	4641      	mov	r1, r8
 800f108:	008a      	lsls	r2, r1, #2
 800f10a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f10e:	f7f1 fdab 	bl	8000c68 <__aeabi_uldivmod>
 800f112:	4602      	mov	r2, r0
 800f114:	460b      	mov	r3, r1
 800f116:	4b0d      	ldr	r3, [pc, #52]	; (800f14c <UART_SetConfig+0x4e4>)
 800f118:	fba3 1302 	umull	r1, r3, r3, r2
 800f11c:	095b      	lsrs	r3, r3, #5
 800f11e:	2164      	movs	r1, #100	; 0x64
 800f120:	fb01 f303 	mul.w	r3, r1, r3
 800f124:	1ad3      	subs	r3, r2, r3
 800f126:	011b      	lsls	r3, r3, #4
 800f128:	3332      	adds	r3, #50	; 0x32
 800f12a:	4a08      	ldr	r2, [pc, #32]	; (800f14c <UART_SetConfig+0x4e4>)
 800f12c:	fba2 2303 	umull	r2, r3, r2, r3
 800f130:	095b      	lsrs	r3, r3, #5
 800f132:	f003 020f 	and.w	r2, r3, #15
 800f136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4422      	add	r2, r4
 800f13e:	609a      	str	r2, [r3, #8]
}
 800f140:	bf00      	nop
 800f142:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800f146:	46bd      	mov	sp, r7
 800f148:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f14c:	51eb851f 	.word	0x51eb851f

0800f150 <LL_GPIO_SetPinMode>:
{
 800f150:	b480      	push	{r7}
 800f152:	b08b      	sub	sp, #44	; 0x2c
 800f154:	af00      	add	r7, sp, #0
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	60b9      	str	r1, [r7, #8]
 800f15a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681a      	ldr	r2, [r3, #0]
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	fa93 f3a3 	rbit	r3, r3
 800f16a:	613b      	str	r3, [r7, #16]
  return result;
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d101      	bne.n	800f17a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800f176:	2320      	movs	r3, #32
 800f178:	e003      	b.n	800f182 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	fab3 f383 	clz	r3, r3
 800f180:	b2db      	uxtb	r3, r3
 800f182:	005b      	lsls	r3, r3, #1
 800f184:	2103      	movs	r1, #3
 800f186:	fa01 f303 	lsl.w	r3, r1, r3
 800f18a:	43db      	mvns	r3, r3
 800f18c:	401a      	ands	r2, r3
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	fa93 f3a3 	rbit	r3, r3
 800f198:	61fb      	str	r3, [r7, #28]
  return result;
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800f19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d101      	bne.n	800f1a8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800f1a4:	2320      	movs	r3, #32
 800f1a6:	e003      	b.n	800f1b0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1aa:	fab3 f383 	clz	r3, r3
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	005b      	lsls	r3, r3, #1
 800f1b2:	6879      	ldr	r1, [r7, #4]
 800f1b4:	fa01 f303 	lsl.w	r3, r1, r3
 800f1b8:	431a      	orrs	r2, r3
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	601a      	str	r2, [r3, #0]
}
 800f1be:	bf00      	nop
 800f1c0:	372c      	adds	r7, #44	; 0x2c
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c8:	4770      	bx	lr

0800f1ca <LL_GPIO_SetPinOutputType>:
{
 800f1ca:	b480      	push	{r7}
 800f1cc:	b085      	sub	sp, #20
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	60f8      	str	r0, [r7, #12]
 800f1d2:	60b9      	str	r1, [r7, #8]
 800f1d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	685a      	ldr	r2, [r3, #4]
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	43db      	mvns	r3, r3
 800f1de:	401a      	ands	r2, r3
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	6879      	ldr	r1, [r7, #4]
 800f1e4:	fb01 f303 	mul.w	r3, r1, r3
 800f1e8:	431a      	orrs	r2, r3
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	605a      	str	r2, [r3, #4]
}
 800f1ee:	bf00      	nop
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr

0800f1fa <LL_GPIO_SetPinSpeed>:
{
 800f1fa:	b480      	push	{r7}
 800f1fc:	b08b      	sub	sp, #44	; 0x2c
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	60f8      	str	r0, [r7, #12]
 800f202:	60b9      	str	r1, [r7, #8]
 800f204:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	689a      	ldr	r2, [r3, #8]
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	fa93 f3a3 	rbit	r3, r3
 800f214:	613b      	str	r3, [r7, #16]
  return result;
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f21a:	69bb      	ldr	r3, [r7, #24]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d101      	bne.n	800f224 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800f220:	2320      	movs	r3, #32
 800f222:	e003      	b.n	800f22c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800f224:	69bb      	ldr	r3, [r7, #24]
 800f226:	fab3 f383 	clz	r3, r3
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	005b      	lsls	r3, r3, #1
 800f22e:	2103      	movs	r1, #3
 800f230:	fa01 f303 	lsl.w	r3, r1, r3
 800f234:	43db      	mvns	r3, r3
 800f236:	401a      	ands	r2, r3
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f23c:	6a3b      	ldr	r3, [r7, #32]
 800f23e:	fa93 f3a3 	rbit	r3, r3
 800f242:	61fb      	str	r3, [r7, #28]
  return result;
 800f244:	69fb      	ldr	r3, [r7, #28]
 800f246:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800f248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d101      	bne.n	800f252 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800f24e:	2320      	movs	r3, #32
 800f250:	e003      	b.n	800f25a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800f252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f254:	fab3 f383 	clz	r3, r3
 800f258:	b2db      	uxtb	r3, r3
 800f25a:	005b      	lsls	r3, r3, #1
 800f25c:	6879      	ldr	r1, [r7, #4]
 800f25e:	fa01 f303 	lsl.w	r3, r1, r3
 800f262:	431a      	orrs	r2, r3
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	609a      	str	r2, [r3, #8]
}
 800f268:	bf00      	nop
 800f26a:	372c      	adds	r7, #44	; 0x2c
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <LL_GPIO_SetPinPull>:
{
 800f274:	b480      	push	{r7}
 800f276:	b08b      	sub	sp, #44	; 0x2c
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	68da      	ldr	r2, [r3, #12]
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	fa93 f3a3 	rbit	r3, r3
 800f28e:	613b      	str	r3, [r7, #16]
  return result;
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d101      	bne.n	800f29e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800f29a:	2320      	movs	r3, #32
 800f29c:	e003      	b.n	800f2a6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	fab3 f383 	clz	r3, r3
 800f2a4:	b2db      	uxtb	r3, r3
 800f2a6:	005b      	lsls	r3, r3, #1
 800f2a8:	2103      	movs	r1, #3
 800f2aa:	fa01 f303 	lsl.w	r3, r1, r3
 800f2ae:	43db      	mvns	r3, r3
 800f2b0:	401a      	ands	r2, r3
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2b6:	6a3b      	ldr	r3, [r7, #32]
 800f2b8:	fa93 f3a3 	rbit	r3, r3
 800f2bc:	61fb      	str	r3, [r7, #28]
  return result;
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800f2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d101      	bne.n	800f2cc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800f2c8:	2320      	movs	r3, #32
 800f2ca:	e003      	b.n	800f2d4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800f2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ce:	fab3 f383 	clz	r3, r3
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	005b      	lsls	r3, r3, #1
 800f2d6:	6879      	ldr	r1, [r7, #4]
 800f2d8:	fa01 f303 	lsl.w	r3, r1, r3
 800f2dc:	431a      	orrs	r2, r3
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	60da      	str	r2, [r3, #12]
}
 800f2e2:	bf00      	nop
 800f2e4:	372c      	adds	r7, #44	; 0x2c
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <LL_GPIO_SetAFPin_0_7>:
{
 800f2ee:	b480      	push	{r7}
 800f2f0:	b08b      	sub	sp, #44	; 0x2c
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	60f8      	str	r0, [r7, #12]
 800f2f6:	60b9      	str	r1, [r7, #8]
 800f2f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	6a1a      	ldr	r2, [r3, #32]
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	fa93 f3a3 	rbit	r3, r3
 800f308:	613b      	str	r3, [r7, #16]
  return result;
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d101      	bne.n	800f318 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800f314:	2320      	movs	r3, #32
 800f316:	e003      	b.n	800f320 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800f318:	69bb      	ldr	r3, [r7, #24]
 800f31a:	fab3 f383 	clz	r3, r3
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	210f      	movs	r1, #15
 800f324:	fa01 f303 	lsl.w	r3, r1, r3
 800f328:	43db      	mvns	r3, r3
 800f32a:	401a      	ands	r2, r3
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f330:	6a3b      	ldr	r3, [r7, #32]
 800f332:	fa93 f3a3 	rbit	r3, r3
 800f336:	61fb      	str	r3, [r7, #28]
  return result;
 800f338:	69fb      	ldr	r3, [r7, #28]
 800f33a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800f33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d101      	bne.n	800f346 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800f342:	2320      	movs	r3, #32
 800f344:	e003      	b.n	800f34e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800f346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f348:	fab3 f383 	clz	r3, r3
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	009b      	lsls	r3, r3, #2
 800f350:	6879      	ldr	r1, [r7, #4]
 800f352:	fa01 f303 	lsl.w	r3, r1, r3
 800f356:	431a      	orrs	r2, r3
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	621a      	str	r2, [r3, #32]
}
 800f35c:	bf00      	nop
 800f35e:	372c      	adds	r7, #44	; 0x2c
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr

0800f368 <LL_GPIO_SetAFPin_8_15>:
{
 800f368:	b480      	push	{r7}
 800f36a:	b08b      	sub	sp, #44	; 0x2c
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	60f8      	str	r0, [r7, #12]
 800f370:	60b9      	str	r1, [r7, #8]
 800f372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	0a1b      	lsrs	r3, r3, #8
 800f37c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	fa93 f3a3 	rbit	r3, r3
 800f384:	613b      	str	r3, [r7, #16]
  return result;
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d101      	bne.n	800f394 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800f390:	2320      	movs	r3, #32
 800f392:	e003      	b.n	800f39c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800f394:	69bb      	ldr	r3, [r7, #24]
 800f396:	fab3 f383 	clz	r3, r3
 800f39a:	b2db      	uxtb	r3, r3
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	210f      	movs	r1, #15
 800f3a0:	fa01 f303 	lsl.w	r3, r1, r3
 800f3a4:	43db      	mvns	r3, r3
 800f3a6:	401a      	ands	r2, r3
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	0a1b      	lsrs	r3, r3, #8
 800f3ac:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f3ae:	6a3b      	ldr	r3, [r7, #32]
 800f3b0:	fa93 f3a3 	rbit	r3, r3
 800f3b4:	61fb      	str	r3, [r7, #28]
  return result;
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d101      	bne.n	800f3c4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800f3c0:	2320      	movs	r3, #32
 800f3c2:	e003      	b.n	800f3cc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800f3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c6:	fab3 f383 	clz	r3, r3
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	009b      	lsls	r3, r3, #2
 800f3ce:	6879      	ldr	r1, [r7, #4]
 800f3d0:	fa01 f303 	lsl.w	r3, r1, r3
 800f3d4:	431a      	orrs	r2, r3
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f3da:	bf00      	nop
 800f3dc:	372c      	adds	r7, #44	; 0x2c
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b08a      	sub	sp, #40	; 0x28
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
 800f3ee:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	fa93 f3a3 	rbit	r3, r3
 800f404:	617b      	str	r3, [r7, #20]
  return result;
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d101      	bne.n	800f414 <LL_GPIO_Init+0x2e>
    return 32U;
 800f410:	2320      	movs	r3, #32
 800f412:	e003      	b.n	800f41c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	fab3 f383 	clz	r3, r3
 800f41a:	b2db      	uxtb	r3, r3
 800f41c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f41e:	e057      	b.n	800f4d0 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	681a      	ldr	r2, [r3, #0]
 800f424:	2101      	movs	r1, #1
 800f426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f428:	fa01 f303 	lsl.w	r3, r1, r3
 800f42c:	4013      	ands	r3, r2
 800f42e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800f430:	6a3b      	ldr	r3, [r7, #32]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d049      	beq.n	800f4ca <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	2b01      	cmp	r3, #1
 800f43c:	d003      	beq.n	800f446 <LL_GPIO_Init+0x60>
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	2b02      	cmp	r3, #2
 800f444:	d10d      	bne.n	800f462 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	689b      	ldr	r3, [r3, #8]
 800f44a:	461a      	mov	r2, r3
 800f44c:	6a39      	ldr	r1, [r7, #32]
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f7ff fed3 	bl	800f1fa <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	461a      	mov	r2, r3
 800f45a:	6a39      	ldr	r1, [r7, #32]
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f7ff feb4 	bl	800f1ca <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	691b      	ldr	r3, [r3, #16]
 800f466:	461a      	mov	r2, r3
 800f468:	6a39      	ldr	r1, [r7, #32]
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f7ff ff02 	bl	800f274 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	2b02      	cmp	r3, #2
 800f476:	d121      	bne.n	800f4bc <LL_GPIO_Init+0xd6>
 800f478:	6a3b      	ldr	r3, [r7, #32]
 800f47a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	fa93 f3a3 	rbit	r3, r3
 800f482:	60bb      	str	r3, [r7, #8]
  return result;
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d101      	bne.n	800f492 <LL_GPIO_Init+0xac>
    return 32U;
 800f48e:	2320      	movs	r3, #32
 800f490:	e003      	b.n	800f49a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	fab3 f383 	clz	r3, r3
 800f498:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800f49a:	2b07      	cmp	r3, #7
 800f49c:	d807      	bhi.n	800f4ae <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	695b      	ldr	r3, [r3, #20]
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	6a39      	ldr	r1, [r7, #32]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f7ff ff21 	bl	800f2ee <LL_GPIO_SetAFPin_0_7>
 800f4ac:	e006      	b.n	800f4bc <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	695b      	ldr	r3, [r3, #20]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	6a39      	ldr	r1, [r7, #32]
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7ff ff56 	bl	800f368 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	6a39      	ldr	r1, [r7, #32]
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f7ff fe43 	bl	800f150 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d6:	fa22 f303 	lsr.w	r3, r2, r3
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d1a0      	bne.n	800f420 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800f4de:	2300      	movs	r3, #0
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3728      	adds	r7, #40	; 0x28
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <LL_SPI_IsEnabled>:
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4f8:	2b40      	cmp	r3, #64	; 0x40
 800f4fa:	d101      	bne.n	800f500 <LL_SPI_IsEnabled+0x18>
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	e000      	b.n	800f502 <LL_SPI_IsEnabled+0x1a>
 800f500:	2300      	movs	r3, #0
}
 800f502:	4618      	mov	r0, r3
 800f504:	370c      	adds	r7, #12
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr

0800f50e <LL_SPI_SetCRCPolynomial>:
{
 800f50e:	b480      	push	{r7}
 800f510:	b083      	sub	sp, #12
 800f512:	af00      	add	r7, sp, #0
 800f514:	6078      	str	r0, [r7, #4]
 800f516:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	461a      	mov	r2, r3
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	611a      	str	r2, [r3, #16]
}
 800f522:	bf00      	nop
 800f524:	370c      	adds	r7, #12
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr

0800f52e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800f52e:	b580      	push	{r7, lr}
 800f530:	b084      	sub	sp, #16
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
 800f536:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800f538:	2301      	movs	r3, #1
 800f53a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f7ff ffd3 	bl	800f4e8 <LL_SPI_IsEnabled>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d139      	bne.n	800f5bc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f550:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800f554:	683a      	ldr	r2, [r7, #0]
 800f556:	6811      	ldr	r1, [r2, #0]
 800f558:	683a      	ldr	r2, [r7, #0]
 800f55a:	6852      	ldr	r2, [r2, #4]
 800f55c:	4311      	orrs	r1, r2
 800f55e:	683a      	ldr	r2, [r7, #0]
 800f560:	6892      	ldr	r2, [r2, #8]
 800f562:	4311      	orrs	r1, r2
 800f564:	683a      	ldr	r2, [r7, #0]
 800f566:	68d2      	ldr	r2, [r2, #12]
 800f568:	4311      	orrs	r1, r2
 800f56a:	683a      	ldr	r2, [r7, #0]
 800f56c:	6912      	ldr	r2, [r2, #16]
 800f56e:	4311      	orrs	r1, r2
 800f570:	683a      	ldr	r2, [r7, #0]
 800f572:	6952      	ldr	r2, [r2, #20]
 800f574:	4311      	orrs	r1, r2
 800f576:	683a      	ldr	r2, [r7, #0]
 800f578:	6992      	ldr	r2, [r2, #24]
 800f57a:	4311      	orrs	r1, r2
 800f57c:	683a      	ldr	r2, [r7, #0]
 800f57e:	69d2      	ldr	r2, [r2, #28]
 800f580:	4311      	orrs	r1, r2
 800f582:	683a      	ldr	r2, [r7, #0]
 800f584:	6a12      	ldr	r2, [r2, #32]
 800f586:	430a      	orrs	r2, r1
 800f588:	431a      	orrs	r2, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	f023 0204 	bic.w	r2, r3, #4
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	695b      	ldr	r3, [r3, #20]
 800f59a:	0c1b      	lsrs	r3, r3, #16
 800f59c:	431a      	orrs	r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	6a1b      	ldr	r3, [r3, #32]
 800f5a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f5aa:	d105      	bne.n	800f5b8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f7ff ffab 	bl	800f50e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	69db      	ldr	r3, [r3, #28]
 800f5c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	61da      	str	r2, [r3, #28]
  return status;
 800f5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}

0800f5d2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	f107 001c 	add.w	r0, r7, #28
 800f5e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f5e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d123      	bne.n	800f634 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f614:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d105      	bne.n	800f628 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f001 fae3 	bl	8010bf4 <USB_CoreReset>
 800f62e:	4603      	mov	r3, r0
 800f630:	73fb      	strb	r3, [r7, #15]
 800f632:	e01b      	b.n	800f66c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f001 fad7 	bl	8010bf4 <USB_CoreReset>
 800f646:	4603      	mov	r3, r0
 800f648:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f64a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d106      	bne.n	800f660 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f656:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	639a      	str	r2, [r3, #56]	; 0x38
 800f65e:	e005      	b.n	800f66c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f664:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f66c:	7fbb      	ldrb	r3, [r7, #30]
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d10b      	bne.n	800f68a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	689b      	ldr	r3, [r3, #8]
 800f676:	f043 0206 	orr.w	r2, r3, #6
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	689b      	ldr	r3, [r3, #8]
 800f682:	f043 0220 	orr.w	r2, r3, #32
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3710      	adds	r7, #16
 800f690:	46bd      	mov	sp, r7
 800f692:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f696:	b004      	add	sp, #16
 800f698:	4770      	bx	lr
	...

0800f69c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b087      	sub	sp, #28
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	4613      	mov	r3, r2
 800f6a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f6aa:	79fb      	ldrb	r3, [r7, #7]
 800f6ac:	2b02      	cmp	r3, #2
 800f6ae:	d165      	bne.n	800f77c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	4a41      	ldr	r2, [pc, #260]	; (800f7b8 <USB_SetTurnaroundTime+0x11c>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d906      	bls.n	800f6c6 <USB_SetTurnaroundTime+0x2a>
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	4a40      	ldr	r2, [pc, #256]	; (800f7bc <USB_SetTurnaroundTime+0x120>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d202      	bcs.n	800f6c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f6c0:	230f      	movs	r3, #15
 800f6c2:	617b      	str	r3, [r7, #20]
 800f6c4:	e062      	b.n	800f78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	4a3c      	ldr	r2, [pc, #240]	; (800f7bc <USB_SetTurnaroundTime+0x120>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d306      	bcc.n	800f6dc <USB_SetTurnaroundTime+0x40>
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	4a3b      	ldr	r2, [pc, #236]	; (800f7c0 <USB_SetTurnaroundTime+0x124>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d202      	bcs.n	800f6dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f6d6:	230e      	movs	r3, #14
 800f6d8:	617b      	str	r3, [r7, #20]
 800f6da:	e057      	b.n	800f78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	4a38      	ldr	r2, [pc, #224]	; (800f7c0 <USB_SetTurnaroundTime+0x124>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d306      	bcc.n	800f6f2 <USB_SetTurnaroundTime+0x56>
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	4a37      	ldr	r2, [pc, #220]	; (800f7c4 <USB_SetTurnaroundTime+0x128>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d202      	bcs.n	800f6f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f6ec:	230d      	movs	r3, #13
 800f6ee:	617b      	str	r3, [r7, #20]
 800f6f0:	e04c      	b.n	800f78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	4a33      	ldr	r2, [pc, #204]	; (800f7c4 <USB_SetTurnaroundTime+0x128>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d306      	bcc.n	800f708 <USB_SetTurnaroundTime+0x6c>
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	4a32      	ldr	r2, [pc, #200]	; (800f7c8 <USB_SetTurnaroundTime+0x12c>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d802      	bhi.n	800f708 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f702:	230c      	movs	r3, #12
 800f704:	617b      	str	r3, [r7, #20]
 800f706:	e041      	b.n	800f78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	4a2f      	ldr	r2, [pc, #188]	; (800f7c8 <USB_SetTurnaroundTime+0x12c>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d906      	bls.n	800f71e <USB_SetTurnaroundTime+0x82>
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	4a2e      	ldr	r2, [pc, #184]	; (800f7cc <USB_SetTurnaroundTime+0x130>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d802      	bhi.n	800f71e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f718:	230b      	movs	r3, #11
 800f71a:	617b      	str	r3, [r7, #20]
 800f71c:	e036      	b.n	800f78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	4a2a      	ldr	r2, [pc, #168]	; (800f7cc <USB_SetTurnaroundTime+0x130>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d906      	bls.n	800f734 <USB_SetTurnaroundTime+0x98>
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	4a29      	ldr	r2, [pc, #164]	; (800f7d0 <USB_SetTurnaroundTime+0x134>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d802      	bhi.n	800f734 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f72e:	230a      	movs	r3, #10
 800f730:	617b      	str	r3, [r7, #20]
 800f732:	e02b      	b.n	800f78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	4a26      	ldr	r2, [pc, #152]	; (800f7d0 <USB_SetTurnaroundTime+0x134>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d906      	bls.n	800f74a <USB_SetTurnaroundTime+0xae>
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	4a25      	ldr	r2, [pc, #148]	; (800f7d4 <USB_SetTurnaroundTime+0x138>)
 800f740:	4293      	cmp	r3, r2
 800f742:	d202      	bcs.n	800f74a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f744:	2309      	movs	r3, #9
 800f746:	617b      	str	r3, [r7, #20]
 800f748:	e020      	b.n	800f78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	4a21      	ldr	r2, [pc, #132]	; (800f7d4 <USB_SetTurnaroundTime+0x138>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d306      	bcc.n	800f760 <USB_SetTurnaroundTime+0xc4>
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	4a20      	ldr	r2, [pc, #128]	; (800f7d8 <USB_SetTurnaroundTime+0x13c>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d802      	bhi.n	800f760 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f75a:	2308      	movs	r3, #8
 800f75c:	617b      	str	r3, [r7, #20]
 800f75e:	e015      	b.n	800f78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	4a1d      	ldr	r2, [pc, #116]	; (800f7d8 <USB_SetTurnaroundTime+0x13c>)
 800f764:	4293      	cmp	r3, r2
 800f766:	d906      	bls.n	800f776 <USB_SetTurnaroundTime+0xda>
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	4a1c      	ldr	r2, [pc, #112]	; (800f7dc <USB_SetTurnaroundTime+0x140>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d202      	bcs.n	800f776 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f770:	2307      	movs	r3, #7
 800f772:	617b      	str	r3, [r7, #20]
 800f774:	e00a      	b.n	800f78c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f776:	2306      	movs	r3, #6
 800f778:	617b      	str	r3, [r7, #20]
 800f77a:	e007      	b.n	800f78c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f77c:	79fb      	ldrb	r3, [r7, #7]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d102      	bne.n	800f788 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f782:	2309      	movs	r3, #9
 800f784:	617b      	str	r3, [r7, #20]
 800f786:	e001      	b.n	800f78c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f788:	2309      	movs	r3, #9
 800f78a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	68da      	ldr	r2, [r3, #12]
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	029b      	lsls	r3, r3, #10
 800f7a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f7a4:	431a      	orrs	r2, r3
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f7aa:	2300      	movs	r3, #0
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	371c      	adds	r7, #28
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr
 800f7b8:	00d8acbf 	.word	0x00d8acbf
 800f7bc:	00e4e1c0 	.word	0x00e4e1c0
 800f7c0:	00f42400 	.word	0x00f42400
 800f7c4:	01067380 	.word	0x01067380
 800f7c8:	011a499f 	.word	0x011a499f
 800f7cc:	01312cff 	.word	0x01312cff
 800f7d0:	014ca43f 	.word	0x014ca43f
 800f7d4:	016e3600 	.word	0x016e3600
 800f7d8:	01a6ab1f 	.word	0x01a6ab1f
 800f7dc:	01e84800 	.word	0x01e84800

0800f7e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b083      	sub	sp, #12
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	f043 0201 	orr.w	r2, r3, #1
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f7f4:	2300      	movs	r3, #0
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	370c      	adds	r7, #12
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr

0800f802 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f802:	b480      	push	{r7}
 800f804:	b083      	sub	sp, #12
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	689b      	ldr	r3, [r3, #8]
 800f80e:	f023 0201 	bic.w	r2, r3, #1
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f816:	2300      	movs	r3, #0
}
 800f818:	4618      	mov	r0, r3
 800f81a:	370c      	adds	r7, #12
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	460b      	mov	r3, r1
 800f82e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f830:	2300      	movs	r3, #0
 800f832:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f840:	78fb      	ldrb	r3, [r7, #3]
 800f842:	2b01      	cmp	r3, #1
 800f844:	d115      	bne.n	800f872 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f852:	200a      	movs	r0, #10
 800f854:	f7fa f94a 	bl	8009aec <HAL_Delay>
      ms += 10U;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	330a      	adds	r3, #10
 800f85c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f001 f939 	bl	8010ad6 <USB_GetMode>
 800f864:	4603      	mov	r3, r0
 800f866:	2b01      	cmp	r3, #1
 800f868:	d01e      	beq.n	800f8a8 <USB_SetCurrentMode+0x84>
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2bc7      	cmp	r3, #199	; 0xc7
 800f86e:	d9f0      	bls.n	800f852 <USB_SetCurrentMode+0x2e>
 800f870:	e01a      	b.n	800f8a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f872:	78fb      	ldrb	r3, [r7, #3]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d115      	bne.n	800f8a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	68db      	ldr	r3, [r3, #12]
 800f87c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f884:	200a      	movs	r0, #10
 800f886:	f7fa f931 	bl	8009aec <HAL_Delay>
      ms += 10U;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	330a      	adds	r3, #10
 800f88e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f001 f920 	bl	8010ad6 <USB_GetMode>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d005      	beq.n	800f8a8 <USB_SetCurrentMode+0x84>
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	2bc7      	cmp	r3, #199	; 0xc7
 800f8a0:	d9f0      	bls.n	800f884 <USB_SetCurrentMode+0x60>
 800f8a2:	e001      	b.n	800f8a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	e005      	b.n	800f8b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2bc8      	cmp	r3, #200	; 0xc8
 800f8ac:	d101      	bne.n	800f8b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	e000      	b.n	800f8b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f8b2:	2300      	movs	r3, #0
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3710      	adds	r7, #16
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}

0800f8bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f8bc:	b084      	sub	sp, #16
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b086      	sub	sp, #24
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
 800f8c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f8ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	613b      	str	r3, [r7, #16]
 800f8da:	e009      	b.n	800f8f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f8dc:	687a      	ldr	r2, [r7, #4]
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	3340      	adds	r3, #64	; 0x40
 800f8e2:	009b      	lsls	r3, r3, #2
 800f8e4:	4413      	add	r3, r2
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	3301      	adds	r3, #1
 800f8ee:	613b      	str	r3, [r7, #16]
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	2b0e      	cmp	r3, #14
 800f8f4:	d9f2      	bls.n	800f8dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f8f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d11c      	bne.n	800f938 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	68fa      	ldr	r2, [r7, #12]
 800f908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f90c:	f043 0302 	orr.w	r3, r3, #2
 800f910:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f916:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f922:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f92e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	639a      	str	r2, [r3, #56]	; 0x38
 800f936:	e00b      	b.n	800f950 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f93c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f948:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f956:	461a      	mov	r2, r3
 800f958:	2300      	movs	r3, #0
 800f95a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f95c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f960:	2b01      	cmp	r3, #1
 800f962:	d10d      	bne.n	800f980 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d104      	bne.n	800f976 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f96c:	2100      	movs	r1, #0
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f000 f968 	bl	800fc44 <USB_SetDevSpeed>
 800f974:	e008      	b.n	800f988 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f976:	2101      	movs	r1, #1
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 f963 	bl	800fc44 <USB_SetDevSpeed>
 800f97e:	e003      	b.n	800f988 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f980:	2103      	movs	r1, #3
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 f95e 	bl	800fc44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f988:	2110      	movs	r1, #16
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f000 f8fa 	bl	800fb84 <USB_FlushTxFifo>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d001      	beq.n	800f99a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800f996:	2301      	movs	r3, #1
 800f998:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 f924 	bl	800fbe8 <USB_FlushRxFifo>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d001      	beq.n	800f9aa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9bc:	461a      	mov	r2, r3
 800f9be:	2300      	movs	r3, #0
 800f9c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	613b      	str	r3, [r7, #16]
 800f9d2:	e043      	b.n	800fa5c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	015a      	lsls	r2, r3, #5
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	4413      	add	r3, r2
 800f9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f9e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9ea:	d118      	bne.n	800fa1e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d10a      	bne.n	800fa08 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	015a      	lsls	r2, r3, #5
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9fe:	461a      	mov	r2, r3
 800fa00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fa04:	6013      	str	r3, [r2, #0]
 800fa06:	e013      	b.n	800fa30 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	015a      	lsls	r2, r3, #5
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	4413      	add	r3, r2
 800fa10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa14:	461a      	mov	r2, r3
 800fa16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fa1a:	6013      	str	r3, [r2, #0]
 800fa1c:	e008      	b.n	800fa30 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	015a      	lsls	r2, r3, #5
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	4413      	add	r3, r2
 800fa26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	015a      	lsls	r2, r3, #5
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	4413      	add	r3, r2
 800fa38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	2300      	movs	r3, #0
 800fa40:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	015a      	lsls	r2, r3, #5
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	4413      	add	r3, r2
 800fa4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa4e:	461a      	mov	r2, r3
 800fa50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fa54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	613b      	str	r3, [r7, #16]
 800fa5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fa60:	461a      	mov	r2, r3
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d3b5      	bcc.n	800f9d4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa68:	2300      	movs	r3, #0
 800fa6a:	613b      	str	r3, [r7, #16]
 800fa6c:	e043      	b.n	800faf6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	015a      	lsls	r2, r3, #5
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	4413      	add	r3, r2
 800fa76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fa80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fa84:	d118      	bne.n	800fab8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d10a      	bne.n	800faa2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	015a      	lsls	r2, r3, #5
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	4413      	add	r3, r2
 800fa94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa98:	461a      	mov	r2, r3
 800fa9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fa9e:	6013      	str	r3, [r2, #0]
 800faa0:	e013      	b.n	800faca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800faa2:	693b      	ldr	r3, [r7, #16]
 800faa4:	015a      	lsls	r2, r3, #5
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	4413      	add	r3, r2
 800faaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faae:	461a      	mov	r2, r3
 800fab0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fab4:	6013      	str	r3, [r2, #0]
 800fab6:	e008      	b.n	800faca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	015a      	lsls	r2, r3, #5
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	4413      	add	r3, r2
 800fac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fac4:	461a      	mov	r2, r3
 800fac6:	2300      	movs	r3, #0
 800fac8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	015a      	lsls	r2, r3, #5
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	4413      	add	r3, r2
 800fad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fad6:	461a      	mov	r2, r3
 800fad8:	2300      	movs	r3, #0
 800fada:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	015a      	lsls	r2, r3, #5
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	4413      	add	r3, r2
 800fae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fae8:	461a      	mov	r2, r3
 800faea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800faee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	3301      	adds	r3, #1
 800faf4:	613b      	str	r3, [r7, #16]
 800faf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fafa:	461a      	mov	r2, r3
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d3b5      	bcc.n	800fa6e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb08:	691b      	ldr	r3, [r3, #16]
 800fb0a:	68fa      	ldr	r2, [r7, #12]
 800fb0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb14:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fb22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fb24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d105      	bne.n	800fb38 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	699b      	ldr	r3, [r3, #24]
 800fb30:	f043 0210 	orr.w	r2, r3, #16
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	699a      	ldr	r2, [r3, #24]
 800fb3c:	4b10      	ldr	r3, [pc, #64]	; (800fb80 <USB_DevInit+0x2c4>)
 800fb3e:	4313      	orrs	r3, r2
 800fb40:	687a      	ldr	r2, [r7, #4]
 800fb42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fb44:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d005      	beq.n	800fb58 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	699b      	ldr	r3, [r3, #24]
 800fb50:	f043 0208 	orr.w	r2, r3, #8
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fb58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d107      	bne.n	800fb70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	699b      	ldr	r3, [r3, #24]
 800fb64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fb68:	f043 0304 	orr.w	r3, r3, #4
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3718      	adds	r7, #24
 800fb76:	46bd      	mov	sp, r7
 800fb78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fb7c:	b004      	add	sp, #16
 800fb7e:	4770      	bx	lr
 800fb80:	803c3800 	.word	0x803c3800

0800fb84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b085      	sub	sp, #20
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	3301      	adds	r3, #1
 800fb96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800fb9e:	d901      	bls.n	800fba4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fba0:	2303      	movs	r3, #3
 800fba2:	e01b      	b.n	800fbdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	691b      	ldr	r3, [r3, #16]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	daf2      	bge.n	800fb92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fbac:	2300      	movs	r3, #0
 800fbae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	019b      	lsls	r3, r3, #6
 800fbb4:	f043 0220 	orr.w	r2, r3, #32
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800fbc8:	d901      	bls.n	800fbce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fbca:	2303      	movs	r3, #3
 800fbcc:	e006      	b.n	800fbdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	691b      	ldr	r3, [r3, #16]
 800fbd2:	f003 0320 	and.w	r3, r3, #32
 800fbd6:	2b20      	cmp	r3, #32
 800fbd8:	d0f0      	beq.n	800fbbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fbda:	2300      	movs	r3, #0
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3714      	adds	r7, #20
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe6:	4770      	bx	lr

0800fbe8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b085      	sub	sp, #20
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800fc00:	d901      	bls.n	800fc06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fc02:	2303      	movs	r3, #3
 800fc04:	e018      	b.n	800fc38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	691b      	ldr	r3, [r3, #16]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	daf2      	bge.n	800fbf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2210      	movs	r2, #16
 800fc16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800fc24:	d901      	bls.n	800fc2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fc26:	2303      	movs	r3, #3
 800fc28:	e006      	b.n	800fc38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	691b      	ldr	r3, [r3, #16]
 800fc2e:	f003 0310 	and.w	r3, r3, #16
 800fc32:	2b10      	cmp	r3, #16
 800fc34:	d0f0      	beq.n	800fc18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fc36:	2300      	movs	r3, #0
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3714      	adds	r7, #20
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b085      	sub	sp, #20
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	78fb      	ldrb	r3, [r7, #3]
 800fc5e:	68f9      	ldr	r1, [r7, #12]
 800fc60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc64:	4313      	orrs	r3, r2
 800fc66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fc68:	2300      	movs	r3, #0
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3714      	adds	r7, #20
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr

0800fc76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800fc76:	b480      	push	{r7}
 800fc78:	b087      	sub	sp, #28
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc88:	689b      	ldr	r3, [r3, #8]
 800fc8a:	f003 0306 	and.w	r3, r3, #6
 800fc8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d102      	bne.n	800fc9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fc96:	2300      	movs	r3, #0
 800fc98:	75fb      	strb	r3, [r7, #23]
 800fc9a:	e00a      	b.n	800fcb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2b02      	cmp	r3, #2
 800fca0:	d002      	beq.n	800fca8 <USB_GetDevSpeed+0x32>
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	2b06      	cmp	r3, #6
 800fca6:	d102      	bne.n	800fcae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fca8:	2302      	movs	r3, #2
 800fcaa:	75fb      	strb	r3, [r7, #23]
 800fcac:	e001      	b.n	800fcb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fcae:	230f      	movs	r3, #15
 800fcb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fcb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	371c      	adds	r7, #28
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr

0800fcc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fcc0:	b480      	push	{r7}
 800fcc2:	b085      	sub	sp, #20
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	785b      	ldrb	r3, [r3, #1]
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d13a      	bne.n	800fd52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fce2:	69da      	ldr	r2, [r3, #28]
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	f003 030f 	and.w	r3, r3, #15
 800fcec:	2101      	movs	r1, #1
 800fcee:	fa01 f303 	lsl.w	r3, r1, r3
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	68f9      	ldr	r1, [r7, #12]
 800fcf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	015a      	lsls	r2, r3, #5
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	4413      	add	r3, r2
 800fd06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d155      	bne.n	800fdc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	015a      	lsls	r2, r3, #5
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	791b      	ldrb	r3, [r3, #4]
 800fd2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	059b      	lsls	r3, r3, #22
 800fd36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	68ba      	ldr	r2, [r7, #8]
 800fd3c:	0151      	lsls	r1, r2, #5
 800fd3e:	68fa      	ldr	r2, [r7, #12]
 800fd40:	440a      	add	r2, r1
 800fd42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd4e:	6013      	str	r3, [r2, #0]
 800fd50:	e036      	b.n	800fdc0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd58:	69da      	ldr	r2, [r3, #28]
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	f003 030f 	and.w	r3, r3, #15
 800fd62:	2101      	movs	r1, #1
 800fd64:	fa01 f303 	lsl.w	r3, r1, r3
 800fd68:	041b      	lsls	r3, r3, #16
 800fd6a:	68f9      	ldr	r1, [r7, #12]
 800fd6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd70:	4313      	orrs	r3, r2
 800fd72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	015a      	lsls	r2, r3, #5
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	4413      	add	r3, r2
 800fd7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d11a      	bne.n	800fdc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	015a      	lsls	r2, r3, #5
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	4413      	add	r3, r2
 800fd92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd96:	681a      	ldr	r2, [r3, #0]
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	689b      	ldr	r3, [r3, #8]
 800fd9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	791b      	ldrb	r3, [r3, #4]
 800fda4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fda6:	430b      	orrs	r3, r1
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	68ba      	ldr	r2, [r7, #8]
 800fdac:	0151      	lsls	r1, r2, #5
 800fdae:	68fa      	ldr	r2, [r7, #12]
 800fdb0:	440a      	add	r2, r1
 800fdb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fdbe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fdc0:	2300      	movs	r3, #0
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3714      	adds	r7, #20
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr
	...

0800fdd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b085      	sub	sp, #20
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	785b      	ldrb	r3, [r3, #1]
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d161      	bne.n	800feb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	015a      	lsls	r2, r3, #5
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	4413      	add	r3, r2
 800fdf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe02:	d11f      	bne.n	800fe44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	015a      	lsls	r2, r3, #5
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	4413      	add	r3, r2
 800fe0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	68ba      	ldr	r2, [r7, #8]
 800fe14:	0151      	lsls	r1, r2, #5
 800fe16:	68fa      	ldr	r2, [r7, #12]
 800fe18:	440a      	add	r2, r1
 800fe1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	015a      	lsls	r2, r3, #5
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	0151      	lsls	r1, r2, #5
 800fe36:	68fa      	ldr	r2, [r7, #12]
 800fe38:	440a      	add	r2, r1
 800fe3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	f003 030f 	and.w	r3, r3, #15
 800fe54:	2101      	movs	r1, #1
 800fe56:	fa01 f303 	lsl.w	r3, r1, r3
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	43db      	mvns	r3, r3
 800fe5e:	68f9      	ldr	r1, [r7, #12]
 800fe60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe64:	4013      	ands	r3, r2
 800fe66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe6e:	69da      	ldr	r2, [r3, #28]
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	781b      	ldrb	r3, [r3, #0]
 800fe74:	f003 030f 	and.w	r3, r3, #15
 800fe78:	2101      	movs	r1, #1
 800fe7a:	fa01 f303 	lsl.w	r3, r1, r3
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	43db      	mvns	r3, r3
 800fe82:	68f9      	ldr	r1, [r7, #12]
 800fe84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe88:	4013      	ands	r3, r2
 800fe8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	015a      	lsls	r2, r3, #5
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	4413      	add	r3, r2
 800fe94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	0159      	lsls	r1, r3, #5
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	440b      	add	r3, r1
 800fea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fea6:	4619      	mov	r1, r3
 800fea8:	4b35      	ldr	r3, [pc, #212]	; (800ff80 <USB_DeactivateEndpoint+0x1b0>)
 800feaa:	4013      	ands	r3, r2
 800feac:	600b      	str	r3, [r1, #0]
 800feae:	e060      	b.n	800ff72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	015a      	lsls	r2, r3, #5
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	4413      	add	r3, r2
 800feb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fec6:	d11f      	bne.n	800ff08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	015a      	lsls	r2, r3, #5
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	4413      	add	r3, r2
 800fed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	68ba      	ldr	r2, [r7, #8]
 800fed8:	0151      	lsls	r1, r2, #5
 800feda:	68fa      	ldr	r2, [r7, #12]
 800fedc:	440a      	add	r2, r1
 800fede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fee2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fee6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	015a      	lsls	r2, r3, #5
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	4413      	add	r3, r2
 800fef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	68ba      	ldr	r2, [r7, #8]
 800fef8:	0151      	lsls	r1, r2, #5
 800fefa:	68fa      	ldr	r2, [r7, #12]
 800fefc:	440a      	add	r2, r1
 800fefe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	f003 030f 	and.w	r3, r3, #15
 800ff18:	2101      	movs	r1, #1
 800ff1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ff1e:	041b      	lsls	r3, r3, #16
 800ff20:	43db      	mvns	r3, r3
 800ff22:	68f9      	ldr	r1, [r7, #12]
 800ff24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff28:	4013      	ands	r3, r2
 800ff2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff32:	69da      	ldr	r2, [r3, #28]
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	f003 030f 	and.w	r3, r3, #15
 800ff3c:	2101      	movs	r1, #1
 800ff3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ff42:	041b      	lsls	r3, r3, #16
 800ff44:	43db      	mvns	r3, r3
 800ff46:	68f9      	ldr	r1, [r7, #12]
 800ff48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff4c:	4013      	ands	r3, r2
 800ff4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	015a      	lsls	r2, r3, #5
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	4413      	add	r3, r2
 800ff58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	0159      	lsls	r1, r3, #5
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	440b      	add	r3, r1
 800ff66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	4b05      	ldr	r3, [pc, #20]	; (800ff84 <USB_DeactivateEndpoint+0x1b4>)
 800ff6e:	4013      	ands	r3, r2
 800ff70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ff72:	2300      	movs	r3, #0
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3714      	adds	r7, #20
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr
 800ff80:	ec337800 	.word	0xec337800
 800ff84:	eff37800 	.word	0xeff37800

0800ff88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b08a      	sub	sp, #40	; 0x28
 800ff8c:	af02      	add	r7, sp, #8
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	4613      	mov	r3, r2
 800ff94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	785b      	ldrb	r3, [r3, #1]
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	f040 817a 	bne.w	801029e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	691b      	ldr	r3, [r3, #16]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d132      	bne.n	8010018 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ffb2:	69bb      	ldr	r3, [r7, #24]
 800ffb4:	015a      	lsls	r2, r3, #5
 800ffb6:	69fb      	ldr	r3, [r7, #28]
 800ffb8:	4413      	add	r3, r2
 800ffba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffbe:	691b      	ldr	r3, [r3, #16]
 800ffc0:	69ba      	ldr	r2, [r7, #24]
 800ffc2:	0151      	lsls	r1, r2, #5
 800ffc4:	69fa      	ldr	r2, [r7, #28]
 800ffc6:	440a      	add	r2, r1
 800ffc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ffd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ffd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	015a      	lsls	r2, r3, #5
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	4413      	add	r3, r2
 800ffde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffe2:	691b      	ldr	r3, [r3, #16]
 800ffe4:	69ba      	ldr	r2, [r7, #24]
 800ffe6:	0151      	lsls	r1, r2, #5
 800ffe8:	69fa      	ldr	r2, [r7, #28]
 800ffea:	440a      	add	r2, r1
 800ffec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fff6:	69bb      	ldr	r3, [r7, #24]
 800fff8:	015a      	lsls	r2, r3, #5
 800fffa:	69fb      	ldr	r3, [r7, #28]
 800fffc:	4413      	add	r3, r2
 800fffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010002:	691b      	ldr	r3, [r3, #16]
 8010004:	69ba      	ldr	r2, [r7, #24]
 8010006:	0151      	lsls	r1, r2, #5
 8010008:	69fa      	ldr	r2, [r7, #28]
 801000a:	440a      	add	r2, r1
 801000c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010010:	0cdb      	lsrs	r3, r3, #19
 8010012:	04db      	lsls	r3, r3, #19
 8010014:	6113      	str	r3, [r2, #16]
 8010016:	e092      	b.n	801013e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010018:	69bb      	ldr	r3, [r7, #24]
 801001a:	015a      	lsls	r2, r3, #5
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	4413      	add	r3, r2
 8010020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010024:	691b      	ldr	r3, [r3, #16]
 8010026:	69ba      	ldr	r2, [r7, #24]
 8010028:	0151      	lsls	r1, r2, #5
 801002a:	69fa      	ldr	r2, [r7, #28]
 801002c:	440a      	add	r2, r1
 801002e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010032:	0cdb      	lsrs	r3, r3, #19
 8010034:	04db      	lsls	r3, r3, #19
 8010036:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010038:	69bb      	ldr	r3, [r7, #24]
 801003a:	015a      	lsls	r2, r3, #5
 801003c:	69fb      	ldr	r3, [r7, #28]
 801003e:	4413      	add	r3, r2
 8010040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010044:	691b      	ldr	r3, [r3, #16]
 8010046:	69ba      	ldr	r2, [r7, #24]
 8010048:	0151      	lsls	r1, r2, #5
 801004a:	69fa      	ldr	r2, [r7, #28]
 801004c:	440a      	add	r2, r1
 801004e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010052:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010056:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801005a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 801005c:	69bb      	ldr	r3, [r7, #24]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d11a      	bne.n	8010098 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	691a      	ldr	r2, [r3, #16]
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	689b      	ldr	r3, [r3, #8]
 801006a:	429a      	cmp	r2, r3
 801006c:	d903      	bls.n	8010076 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	689a      	ldr	r2, [r3, #8]
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	015a      	lsls	r2, r3, #5
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	4413      	add	r3, r2
 801007e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010082:	691b      	ldr	r3, [r3, #16]
 8010084:	69ba      	ldr	r2, [r7, #24]
 8010086:	0151      	lsls	r1, r2, #5
 8010088:	69fa      	ldr	r2, [r7, #28]
 801008a:	440a      	add	r2, r1
 801008c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010090:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010094:	6113      	str	r3, [r2, #16]
 8010096:	e01b      	b.n	80100d0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	015a      	lsls	r2, r3, #5
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	4413      	add	r3, r2
 80100a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100a4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	6919      	ldr	r1, [r3, #16]
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	440b      	add	r3, r1
 80100b0:	1e59      	subs	r1, r3, #1
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	689b      	ldr	r3, [r3, #8]
 80100b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80100ba:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80100bc:	4ba2      	ldr	r3, [pc, #648]	; (8010348 <USB_EPStartXfer+0x3c0>)
 80100be:	400b      	ands	r3, r1
 80100c0:	69b9      	ldr	r1, [r7, #24]
 80100c2:	0148      	lsls	r0, r1, #5
 80100c4:	69f9      	ldr	r1, [r7, #28]
 80100c6:	4401      	add	r1, r0
 80100c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80100cc:	4313      	orrs	r3, r2
 80100ce:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80100d0:	69bb      	ldr	r3, [r7, #24]
 80100d2:	015a      	lsls	r2, r3, #5
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	4413      	add	r3, r2
 80100d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100dc:	691a      	ldr	r2, [r3, #16]
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	691b      	ldr	r3, [r3, #16]
 80100e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80100e6:	69b9      	ldr	r1, [r7, #24]
 80100e8:	0148      	lsls	r0, r1, #5
 80100ea:	69f9      	ldr	r1, [r7, #28]
 80100ec:	4401      	add	r1, r0
 80100ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80100f2:	4313      	orrs	r3, r2
 80100f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	791b      	ldrb	r3, [r3, #4]
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d11f      	bne.n	801013e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80100fe:	69bb      	ldr	r3, [r7, #24]
 8010100:	015a      	lsls	r2, r3, #5
 8010102:	69fb      	ldr	r3, [r7, #28]
 8010104:	4413      	add	r3, r2
 8010106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801010a:	691b      	ldr	r3, [r3, #16]
 801010c:	69ba      	ldr	r2, [r7, #24]
 801010e:	0151      	lsls	r1, r2, #5
 8010110:	69fa      	ldr	r2, [r7, #28]
 8010112:	440a      	add	r2, r1
 8010114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010118:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801011c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	015a      	lsls	r2, r3, #5
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	4413      	add	r3, r2
 8010126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801012a:	691b      	ldr	r3, [r3, #16]
 801012c:	69ba      	ldr	r2, [r7, #24]
 801012e:	0151      	lsls	r1, r2, #5
 8010130:	69fa      	ldr	r2, [r7, #28]
 8010132:	440a      	add	r2, r1
 8010134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010138:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801013c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801013e:	79fb      	ldrb	r3, [r7, #7]
 8010140:	2b01      	cmp	r3, #1
 8010142:	d14b      	bne.n	80101dc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	69db      	ldr	r3, [r3, #28]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d009      	beq.n	8010160 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801014c:	69bb      	ldr	r3, [r7, #24]
 801014e:	015a      	lsls	r2, r3, #5
 8010150:	69fb      	ldr	r3, [r7, #28]
 8010152:	4413      	add	r3, r2
 8010154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010158:	461a      	mov	r2, r3
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	69db      	ldr	r3, [r3, #28]
 801015e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	791b      	ldrb	r3, [r3, #4]
 8010164:	2b01      	cmp	r3, #1
 8010166:	d128      	bne.n	80101ba <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010168:	69fb      	ldr	r3, [r7, #28]
 801016a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801016e:	689b      	ldr	r3, [r3, #8]
 8010170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010174:	2b00      	cmp	r3, #0
 8010176:	d110      	bne.n	801019a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	015a      	lsls	r2, r3, #5
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	4413      	add	r3, r2
 8010180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	69ba      	ldr	r2, [r7, #24]
 8010188:	0151      	lsls	r1, r2, #5
 801018a:	69fa      	ldr	r2, [r7, #28]
 801018c:	440a      	add	r2, r1
 801018e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010196:	6013      	str	r3, [r2, #0]
 8010198:	e00f      	b.n	80101ba <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801019a:	69bb      	ldr	r3, [r7, #24]
 801019c:	015a      	lsls	r2, r3, #5
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	4413      	add	r3, r2
 80101a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	69ba      	ldr	r2, [r7, #24]
 80101aa:	0151      	lsls	r1, r2, #5
 80101ac:	69fa      	ldr	r2, [r7, #28]
 80101ae:	440a      	add	r2, r1
 80101b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80101ba:	69bb      	ldr	r3, [r7, #24]
 80101bc:	015a      	lsls	r2, r3, #5
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	4413      	add	r3, r2
 80101c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	69ba      	ldr	r2, [r7, #24]
 80101ca:	0151      	lsls	r1, r2, #5
 80101cc:	69fa      	ldr	r2, [r7, #28]
 80101ce:	440a      	add	r2, r1
 80101d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80101d8:	6013      	str	r3, [r2, #0]
 80101da:	e165      	b.n	80104a8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80101dc:	69bb      	ldr	r3, [r7, #24]
 80101de:	015a      	lsls	r2, r3, #5
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	4413      	add	r3, r2
 80101e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	69ba      	ldr	r2, [r7, #24]
 80101ec:	0151      	lsls	r1, r2, #5
 80101ee:	69fa      	ldr	r2, [r7, #28]
 80101f0:	440a      	add	r2, r1
 80101f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80101fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	791b      	ldrb	r3, [r3, #4]
 8010200:	2b01      	cmp	r3, #1
 8010202:	d015      	beq.n	8010230 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	691b      	ldr	r3, [r3, #16]
 8010208:	2b00      	cmp	r3, #0
 801020a:	f000 814d 	beq.w	80104a8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	f003 030f 	and.w	r3, r3, #15
 801021e:	2101      	movs	r1, #1
 8010220:	fa01 f303 	lsl.w	r3, r1, r3
 8010224:	69f9      	ldr	r1, [r7, #28]
 8010226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801022a:	4313      	orrs	r3, r2
 801022c:	634b      	str	r3, [r1, #52]	; 0x34
 801022e:	e13b      	b.n	80104a8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010236:	689b      	ldr	r3, [r3, #8]
 8010238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801023c:	2b00      	cmp	r3, #0
 801023e:	d110      	bne.n	8010262 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010240:	69bb      	ldr	r3, [r7, #24]
 8010242:	015a      	lsls	r2, r3, #5
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	4413      	add	r3, r2
 8010248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	69ba      	ldr	r2, [r7, #24]
 8010250:	0151      	lsls	r1, r2, #5
 8010252:	69fa      	ldr	r2, [r7, #28]
 8010254:	440a      	add	r2, r1
 8010256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801025a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801025e:	6013      	str	r3, [r2, #0]
 8010260:	e00f      	b.n	8010282 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010262:	69bb      	ldr	r3, [r7, #24]
 8010264:	015a      	lsls	r2, r3, #5
 8010266:	69fb      	ldr	r3, [r7, #28]
 8010268:	4413      	add	r3, r2
 801026a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	69ba      	ldr	r2, [r7, #24]
 8010272:	0151      	lsls	r1, r2, #5
 8010274:	69fa      	ldr	r2, [r7, #28]
 8010276:	440a      	add	r2, r1
 8010278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801027c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010280:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	68d9      	ldr	r1, [r3, #12]
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	781a      	ldrb	r2, [r3, #0]
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	691b      	ldr	r3, [r3, #16]
 801028e:	b298      	uxth	r0, r3
 8010290:	79fb      	ldrb	r3, [r7, #7]
 8010292:	9300      	str	r3, [sp, #0]
 8010294:	4603      	mov	r3, r0
 8010296:	68f8      	ldr	r0, [r7, #12]
 8010298:	f000 f9b8 	bl	801060c <USB_WritePacket>
 801029c:	e104      	b.n	80104a8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801029e:	69bb      	ldr	r3, [r7, #24]
 80102a0:	015a      	lsls	r2, r3, #5
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	4413      	add	r3, r2
 80102a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	69ba      	ldr	r2, [r7, #24]
 80102ae:	0151      	lsls	r1, r2, #5
 80102b0:	69fa      	ldr	r2, [r7, #28]
 80102b2:	440a      	add	r2, r1
 80102b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102b8:	0cdb      	lsrs	r3, r3, #19
 80102ba:	04db      	lsls	r3, r3, #19
 80102bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	015a      	lsls	r2, r3, #5
 80102c2:	69fb      	ldr	r3, [r7, #28]
 80102c4:	4413      	add	r3, r2
 80102c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102ca:	691b      	ldr	r3, [r3, #16]
 80102cc:	69ba      	ldr	r2, [r7, #24]
 80102ce:	0151      	lsls	r1, r2, #5
 80102d0:	69fa      	ldr	r2, [r7, #28]
 80102d2:	440a      	add	r2, r1
 80102d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80102dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80102e0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d131      	bne.n	801034c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	691b      	ldr	r3, [r3, #16]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d003      	beq.n	80102f8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	689a      	ldr	r2, [r3, #8]
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	689a      	ldr	r2, [r3, #8]
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010300:	69bb      	ldr	r3, [r7, #24]
 8010302:	015a      	lsls	r2, r3, #5
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	4413      	add	r3, r2
 8010308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801030c:	691a      	ldr	r2, [r3, #16]
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	6a1b      	ldr	r3, [r3, #32]
 8010312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010316:	69b9      	ldr	r1, [r7, #24]
 8010318:	0148      	lsls	r0, r1, #5
 801031a:	69f9      	ldr	r1, [r7, #28]
 801031c:	4401      	add	r1, r0
 801031e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010322:	4313      	orrs	r3, r2
 8010324:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010326:	69bb      	ldr	r3, [r7, #24]
 8010328:	015a      	lsls	r2, r3, #5
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	4413      	add	r3, r2
 801032e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010332:	691b      	ldr	r3, [r3, #16]
 8010334:	69ba      	ldr	r2, [r7, #24]
 8010336:	0151      	lsls	r1, r2, #5
 8010338:	69fa      	ldr	r2, [r7, #28]
 801033a:	440a      	add	r2, r1
 801033c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010344:	6113      	str	r3, [r2, #16]
 8010346:	e061      	b.n	801040c <USB_EPStartXfer+0x484>
 8010348:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	691b      	ldr	r3, [r3, #16]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d123      	bne.n	801039c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010354:	69bb      	ldr	r3, [r7, #24]
 8010356:	015a      	lsls	r2, r3, #5
 8010358:	69fb      	ldr	r3, [r7, #28]
 801035a:	4413      	add	r3, r2
 801035c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010360:	691a      	ldr	r2, [r3, #16]
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	689b      	ldr	r3, [r3, #8]
 8010366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801036a:	69b9      	ldr	r1, [r7, #24]
 801036c:	0148      	lsls	r0, r1, #5
 801036e:	69f9      	ldr	r1, [r7, #28]
 8010370:	4401      	add	r1, r0
 8010372:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010376:	4313      	orrs	r3, r2
 8010378:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	015a      	lsls	r2, r3, #5
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	4413      	add	r3, r2
 8010382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010386:	691b      	ldr	r3, [r3, #16]
 8010388:	69ba      	ldr	r2, [r7, #24]
 801038a:	0151      	lsls	r1, r2, #5
 801038c:	69fa      	ldr	r2, [r7, #28]
 801038e:	440a      	add	r2, r1
 8010390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010398:	6113      	str	r3, [r2, #16]
 801039a:	e037      	b.n	801040c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	691a      	ldr	r2, [r3, #16]
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	689b      	ldr	r3, [r3, #8]
 80103a4:	4413      	add	r3, r2
 80103a6:	1e5a      	subs	r2, r3, #1
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	689b      	ldr	r3, [r3, #8]
 80103ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80103b0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	689b      	ldr	r3, [r3, #8]
 80103b6:	8afa      	ldrh	r2, [r7, #22]
 80103b8:	fb03 f202 	mul.w	r2, r3, r2
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80103c0:	69bb      	ldr	r3, [r7, #24]
 80103c2:	015a      	lsls	r2, r3, #5
 80103c4:	69fb      	ldr	r3, [r7, #28]
 80103c6:	4413      	add	r3, r2
 80103c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103cc:	691a      	ldr	r2, [r3, #16]
 80103ce:	8afb      	ldrh	r3, [r7, #22]
 80103d0:	04d9      	lsls	r1, r3, #19
 80103d2:	4b38      	ldr	r3, [pc, #224]	; (80104b4 <USB_EPStartXfer+0x52c>)
 80103d4:	400b      	ands	r3, r1
 80103d6:	69b9      	ldr	r1, [r7, #24]
 80103d8:	0148      	lsls	r0, r1, #5
 80103da:	69f9      	ldr	r1, [r7, #28]
 80103dc:	4401      	add	r1, r0
 80103de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80103e2:	4313      	orrs	r3, r2
 80103e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	015a      	lsls	r2, r3, #5
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	4413      	add	r3, r2
 80103ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103f2:	691a      	ldr	r2, [r3, #16]
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	6a1b      	ldr	r3, [r3, #32]
 80103f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103fc:	69b9      	ldr	r1, [r7, #24]
 80103fe:	0148      	lsls	r0, r1, #5
 8010400:	69f9      	ldr	r1, [r7, #28]
 8010402:	4401      	add	r1, r0
 8010404:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010408:	4313      	orrs	r3, r2
 801040a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801040c:	79fb      	ldrb	r3, [r7, #7]
 801040e:	2b01      	cmp	r3, #1
 8010410:	d10d      	bne.n	801042e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	68db      	ldr	r3, [r3, #12]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d009      	beq.n	801042e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	68d9      	ldr	r1, [r3, #12]
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	015a      	lsls	r2, r3, #5
 8010422:	69fb      	ldr	r3, [r7, #28]
 8010424:	4413      	add	r3, r2
 8010426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801042a:	460a      	mov	r2, r1
 801042c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	791b      	ldrb	r3, [r3, #4]
 8010432:	2b01      	cmp	r3, #1
 8010434:	d128      	bne.n	8010488 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010436:	69fb      	ldr	r3, [r7, #28]
 8010438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801043c:	689b      	ldr	r3, [r3, #8]
 801043e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010442:	2b00      	cmp	r3, #0
 8010444:	d110      	bne.n	8010468 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	015a      	lsls	r2, r3, #5
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	4413      	add	r3, r2
 801044e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	69ba      	ldr	r2, [r7, #24]
 8010456:	0151      	lsls	r1, r2, #5
 8010458:	69fa      	ldr	r2, [r7, #28]
 801045a:	440a      	add	r2, r1
 801045c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010460:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010464:	6013      	str	r3, [r2, #0]
 8010466:	e00f      	b.n	8010488 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010468:	69bb      	ldr	r3, [r7, #24]
 801046a:	015a      	lsls	r2, r3, #5
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	4413      	add	r3, r2
 8010470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	69ba      	ldr	r2, [r7, #24]
 8010478:	0151      	lsls	r1, r2, #5
 801047a:	69fa      	ldr	r2, [r7, #28]
 801047c:	440a      	add	r2, r1
 801047e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010486:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010488:	69bb      	ldr	r3, [r7, #24]
 801048a:	015a      	lsls	r2, r3, #5
 801048c:	69fb      	ldr	r3, [r7, #28]
 801048e:	4413      	add	r3, r2
 8010490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	69ba      	ldr	r2, [r7, #24]
 8010498:	0151      	lsls	r1, r2, #5
 801049a:	69fa      	ldr	r2, [r7, #28]
 801049c:	440a      	add	r2, r1
 801049e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80104a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80104a8:	2300      	movs	r3, #0
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3720      	adds	r7, #32
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	bf00      	nop
 80104b4:	1ff80000 	.word	0x1ff80000

080104b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80104b8:	b480      	push	{r7}
 80104ba:	b087      	sub	sp, #28
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80104c2:	2300      	movs	r3, #0
 80104c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80104c6:	2300      	movs	r3, #0
 80104c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	785b      	ldrb	r3, [r3, #1]
 80104d2:	2b01      	cmp	r3, #1
 80104d4:	d14a      	bne.n	801056c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	781b      	ldrb	r3, [r3, #0]
 80104da:	015a      	lsls	r2, r3, #5
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	4413      	add	r3, r2
 80104e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80104ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104ee:	f040 8086 	bne.w	80105fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	781b      	ldrb	r3, [r3, #0]
 80104f6:	015a      	lsls	r2, r3, #5
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	4413      	add	r3, r2
 80104fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	683a      	ldr	r2, [r7, #0]
 8010504:	7812      	ldrb	r2, [r2, #0]
 8010506:	0151      	lsls	r1, r2, #5
 8010508:	693a      	ldr	r2, [r7, #16]
 801050a:	440a      	add	r2, r1
 801050c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010510:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010514:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	015a      	lsls	r2, r3, #5
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	4413      	add	r3, r2
 8010520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	683a      	ldr	r2, [r7, #0]
 8010528:	7812      	ldrb	r2, [r2, #0]
 801052a:	0151      	lsls	r1, r2, #5
 801052c:	693a      	ldr	r2, [r7, #16]
 801052e:	440a      	add	r2, r1
 8010530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010534:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010538:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	3301      	adds	r3, #1
 801053e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	f242 7210 	movw	r2, #10000	; 0x2710
 8010546:	4293      	cmp	r3, r2
 8010548:	d902      	bls.n	8010550 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801054a:	2301      	movs	r3, #1
 801054c:	75fb      	strb	r3, [r7, #23]
          break;
 801054e:	e056      	b.n	80105fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	015a      	lsls	r2, r3, #5
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	4413      	add	r3, r2
 801055a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010568:	d0e7      	beq.n	801053a <USB_EPStopXfer+0x82>
 801056a:	e048      	b.n	80105fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	015a      	lsls	r2, r3, #5
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	4413      	add	r3, r2
 8010576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010584:	d13b      	bne.n	80105fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	015a      	lsls	r2, r3, #5
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	4413      	add	r3, r2
 8010590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	683a      	ldr	r2, [r7, #0]
 8010598:	7812      	ldrb	r2, [r2, #0]
 801059a:	0151      	lsls	r1, r2, #5
 801059c:	693a      	ldr	r2, [r7, #16]
 801059e:	440a      	add	r2, r1
 80105a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80105a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	015a      	lsls	r2, r3, #5
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	4413      	add	r3, r2
 80105b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	683a      	ldr	r2, [r7, #0]
 80105bc:	7812      	ldrb	r2, [r2, #0]
 80105be:	0151      	lsls	r1, r2, #5
 80105c0:	693a      	ldr	r2, [r7, #16]
 80105c2:	440a      	add	r2, r1
 80105c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	3301      	adds	r3, #1
 80105d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80105da:	4293      	cmp	r3, r2
 80105dc:	d902      	bls.n	80105e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80105de:	2301      	movs	r3, #1
 80105e0:	75fb      	strb	r3, [r7, #23]
          break;
 80105e2:	e00c      	b.n	80105fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	015a      	lsls	r2, r3, #5
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	4413      	add	r3, r2
 80105ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80105f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80105fc:	d0e7      	beq.n	80105ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80105fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010600:	4618      	mov	r0, r3
 8010602:	371c      	adds	r7, #28
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801060c:	b480      	push	{r7}
 801060e:	b089      	sub	sp, #36	; 0x24
 8010610:	af00      	add	r7, sp, #0
 8010612:	60f8      	str	r0, [r7, #12]
 8010614:	60b9      	str	r1, [r7, #8]
 8010616:	4611      	mov	r1, r2
 8010618:	461a      	mov	r2, r3
 801061a:	460b      	mov	r3, r1
 801061c:	71fb      	strb	r3, [r7, #7]
 801061e:	4613      	mov	r3, r2
 8010620:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801062a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801062e:	2b00      	cmp	r3, #0
 8010630:	d123      	bne.n	801067a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010632:	88bb      	ldrh	r3, [r7, #4]
 8010634:	3303      	adds	r3, #3
 8010636:	089b      	lsrs	r3, r3, #2
 8010638:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801063a:	2300      	movs	r3, #0
 801063c:	61bb      	str	r3, [r7, #24]
 801063e:	e018      	b.n	8010672 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010640:	79fb      	ldrb	r3, [r7, #7]
 8010642:	031a      	lsls	r2, r3, #12
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	4413      	add	r3, r2
 8010648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801064c:	461a      	mov	r2, r3
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010654:	69fb      	ldr	r3, [r7, #28]
 8010656:	3301      	adds	r3, #1
 8010658:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801065a:	69fb      	ldr	r3, [r7, #28]
 801065c:	3301      	adds	r3, #1
 801065e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010660:	69fb      	ldr	r3, [r7, #28]
 8010662:	3301      	adds	r3, #1
 8010664:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010666:	69fb      	ldr	r3, [r7, #28]
 8010668:	3301      	adds	r3, #1
 801066a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801066c:	69bb      	ldr	r3, [r7, #24]
 801066e:	3301      	adds	r3, #1
 8010670:	61bb      	str	r3, [r7, #24]
 8010672:	69ba      	ldr	r2, [r7, #24]
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	429a      	cmp	r2, r3
 8010678:	d3e2      	bcc.n	8010640 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801067a:	2300      	movs	r3, #0
}
 801067c:	4618      	mov	r0, r3
 801067e:	3724      	adds	r7, #36	; 0x24
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010688:	b480      	push	{r7}
 801068a:	b08b      	sub	sp, #44	; 0x2c
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	4613      	mov	r3, r2
 8010694:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801069e:	88fb      	ldrh	r3, [r7, #6]
 80106a0:	089b      	lsrs	r3, r3, #2
 80106a2:	b29b      	uxth	r3, r3
 80106a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80106a6:	88fb      	ldrh	r3, [r7, #6]
 80106a8:	f003 0303 	and.w	r3, r3, #3
 80106ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80106ae:	2300      	movs	r3, #0
 80106b0:	623b      	str	r3, [r7, #32]
 80106b2:	e014      	b.n	80106de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80106b4:	69bb      	ldr	r3, [r7, #24]
 80106b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106ba:	681a      	ldr	r2, [r3, #0]
 80106bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106be:	601a      	str	r2, [r3, #0]
    pDest++;
 80106c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c2:	3301      	adds	r3, #1
 80106c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80106c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c8:	3301      	adds	r3, #1
 80106ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80106cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ce:	3301      	adds	r3, #1
 80106d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80106d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d4:	3301      	adds	r3, #1
 80106d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80106d8:	6a3b      	ldr	r3, [r7, #32]
 80106da:	3301      	adds	r3, #1
 80106dc:	623b      	str	r3, [r7, #32]
 80106de:	6a3a      	ldr	r2, [r7, #32]
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d3e6      	bcc.n	80106b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80106e6:	8bfb      	ldrh	r3, [r7, #30]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d01e      	beq.n	801072a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80106ec:	2300      	movs	r3, #0
 80106ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80106f0:	69bb      	ldr	r3, [r7, #24]
 80106f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106f6:	461a      	mov	r2, r3
 80106f8:	f107 0310 	add.w	r3, r7, #16
 80106fc:	6812      	ldr	r2, [r2, #0]
 80106fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010700:	693a      	ldr	r2, [r7, #16]
 8010702:	6a3b      	ldr	r3, [r7, #32]
 8010704:	b2db      	uxtb	r3, r3
 8010706:	00db      	lsls	r3, r3, #3
 8010708:	fa22 f303 	lsr.w	r3, r2, r3
 801070c:	b2da      	uxtb	r2, r3
 801070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010710:	701a      	strb	r2, [r3, #0]
      i++;
 8010712:	6a3b      	ldr	r3, [r7, #32]
 8010714:	3301      	adds	r3, #1
 8010716:	623b      	str	r3, [r7, #32]
      pDest++;
 8010718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071a:	3301      	adds	r3, #1
 801071c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801071e:	8bfb      	ldrh	r3, [r7, #30]
 8010720:	3b01      	subs	r3, #1
 8010722:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010724:	8bfb      	ldrh	r3, [r7, #30]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d1ea      	bne.n	8010700 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801072c:	4618      	mov	r0, r3
 801072e:	372c      	adds	r7, #44	; 0x2c
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr

08010738 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010738:	b480      	push	{r7}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	785b      	ldrb	r3, [r3, #1]
 8010750:	2b01      	cmp	r3, #1
 8010752:	d12c      	bne.n	80107ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	015a      	lsls	r2, r3, #5
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	4413      	add	r3, r2
 801075c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	db12      	blt.n	801078c <USB_EPSetStall+0x54>
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d00f      	beq.n	801078c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	015a      	lsls	r2, r3, #5
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	4413      	add	r3, r2
 8010774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	68ba      	ldr	r2, [r7, #8]
 801077c:	0151      	lsls	r1, r2, #5
 801077e:	68fa      	ldr	r2, [r7, #12]
 8010780:	440a      	add	r2, r1
 8010782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010786:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801078a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	015a      	lsls	r2, r3, #5
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	4413      	add	r3, r2
 8010794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	68ba      	ldr	r2, [r7, #8]
 801079c:	0151      	lsls	r1, r2, #5
 801079e:	68fa      	ldr	r2, [r7, #12]
 80107a0:	440a      	add	r2, r1
 80107a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80107aa:	6013      	str	r3, [r2, #0]
 80107ac:	e02b      	b.n	8010806 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	015a      	lsls	r2, r3, #5
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	4413      	add	r3, r2
 80107b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	db12      	blt.n	80107e6 <USB_EPSetStall+0xae>
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d00f      	beq.n	80107e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	015a      	lsls	r2, r3, #5
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	4413      	add	r3, r2
 80107ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	68ba      	ldr	r2, [r7, #8]
 80107d6:	0151      	lsls	r1, r2, #5
 80107d8:	68fa      	ldr	r2, [r7, #12]
 80107da:	440a      	add	r2, r1
 80107dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80107e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	015a      	lsls	r2, r3, #5
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	4413      	add	r3, r2
 80107ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	68ba      	ldr	r2, [r7, #8]
 80107f6:	0151      	lsls	r1, r2, #5
 80107f8:	68fa      	ldr	r2, [r7, #12]
 80107fa:	440a      	add	r2, r1
 80107fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010804:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010806:	2300      	movs	r3, #0
}
 8010808:	4618      	mov	r0, r3
 801080a:	3714      	adds	r7, #20
 801080c:	46bd      	mov	sp, r7
 801080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010812:	4770      	bx	lr

08010814 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010814:	b480      	push	{r7}
 8010816:	b085      	sub	sp, #20
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	785b      	ldrb	r3, [r3, #1]
 801082c:	2b01      	cmp	r3, #1
 801082e:	d128      	bne.n	8010882 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	015a      	lsls	r2, r3, #5
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	4413      	add	r3, r2
 8010838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	68ba      	ldr	r2, [r7, #8]
 8010840:	0151      	lsls	r1, r2, #5
 8010842:	68fa      	ldr	r2, [r7, #12]
 8010844:	440a      	add	r2, r1
 8010846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801084a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801084e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	791b      	ldrb	r3, [r3, #4]
 8010854:	2b03      	cmp	r3, #3
 8010856:	d003      	beq.n	8010860 <USB_EPClearStall+0x4c>
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	791b      	ldrb	r3, [r3, #4]
 801085c:	2b02      	cmp	r3, #2
 801085e:	d138      	bne.n	80108d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	015a      	lsls	r2, r3, #5
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	4413      	add	r3, r2
 8010868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	68ba      	ldr	r2, [r7, #8]
 8010870:	0151      	lsls	r1, r2, #5
 8010872:	68fa      	ldr	r2, [r7, #12]
 8010874:	440a      	add	r2, r1
 8010876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801087a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801087e:	6013      	str	r3, [r2, #0]
 8010880:	e027      	b.n	80108d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	015a      	lsls	r2, r3, #5
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	4413      	add	r3, r2
 801088a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	68ba      	ldr	r2, [r7, #8]
 8010892:	0151      	lsls	r1, r2, #5
 8010894:	68fa      	ldr	r2, [r7, #12]
 8010896:	440a      	add	r2, r1
 8010898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801089c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80108a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	791b      	ldrb	r3, [r3, #4]
 80108a6:	2b03      	cmp	r3, #3
 80108a8:	d003      	beq.n	80108b2 <USB_EPClearStall+0x9e>
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	791b      	ldrb	r3, [r3, #4]
 80108ae:	2b02      	cmp	r3, #2
 80108b0:	d10f      	bne.n	80108d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	015a      	lsls	r2, r3, #5
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	4413      	add	r3, r2
 80108ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	68ba      	ldr	r2, [r7, #8]
 80108c2:	0151      	lsls	r1, r2, #5
 80108c4:	68fa      	ldr	r2, [r7, #12]
 80108c6:	440a      	add	r2, r1
 80108c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80108d2:	2300      	movs	r3, #0
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3714      	adds	r7, #20
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b085      	sub	sp, #20
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	460b      	mov	r3, r1
 80108ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	68fa      	ldr	r2, [r7, #12]
 80108fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80108fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010902:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	78fb      	ldrb	r3, [r7, #3]
 801090e:	011b      	lsls	r3, r3, #4
 8010910:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010914:	68f9      	ldr	r1, [r7, #12]
 8010916:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801091a:	4313      	orrs	r3, r2
 801091c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801091e:	2300      	movs	r3, #0
}
 8010920:	4618      	mov	r0, r3
 8010922:	3714      	adds	r7, #20
 8010924:	46bd      	mov	sp, r7
 8010926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092a:	4770      	bx	lr

0801092c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801092c:	b480      	push	{r7}
 801092e:	b085      	sub	sp, #20
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	68fa      	ldr	r2, [r7, #12]
 8010942:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010946:	f023 0303 	bic.w	r3, r3, #3
 801094a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	68fa      	ldr	r2, [r7, #12]
 8010956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801095a:	f023 0302 	bic.w	r3, r3, #2
 801095e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010960:	2300      	movs	r3, #0
}
 8010962:	4618      	mov	r0, r3
 8010964:	3714      	adds	r7, #20
 8010966:	46bd      	mov	sp, r7
 8010968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096c:	4770      	bx	lr

0801096e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801096e:	b480      	push	{r7}
 8010970:	b085      	sub	sp, #20
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	68fa      	ldr	r2, [r7, #12]
 8010984:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010988:	f023 0303 	bic.w	r3, r3, #3
 801098c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	68fa      	ldr	r2, [r7, #12]
 8010998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801099c:	f043 0302 	orr.w	r3, r3, #2
 80109a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80109a2:	2300      	movs	r3, #0
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3714      	adds	r7, #20
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr

080109b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80109b0:	b480      	push	{r7}
 80109b2:	b085      	sub	sp, #20
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	695b      	ldr	r3, [r3, #20]
 80109bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	699b      	ldr	r3, [r3, #24]
 80109c2:	68fa      	ldr	r2, [r7, #12]
 80109c4:	4013      	ands	r3, r2
 80109c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80109c8:	68fb      	ldr	r3, [r7, #12]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3714      	adds	r7, #20
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr

080109d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80109d6:	b480      	push	{r7}
 80109d8:	b085      	sub	sp, #20
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109e8:	699b      	ldr	r3, [r3, #24]
 80109ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109f2:	69db      	ldr	r3, [r3, #28]
 80109f4:	68ba      	ldr	r2, [r7, #8]
 80109f6:	4013      	ands	r3, r2
 80109f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	0c1b      	lsrs	r3, r3, #16
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3714      	adds	r7, #20
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr

08010a0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010a0a:	b480      	push	{r7}
 8010a0c:	b085      	sub	sp, #20
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a1c:	699b      	ldr	r3, [r3, #24]
 8010a1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a26:	69db      	ldr	r3, [r3, #28]
 8010a28:	68ba      	ldr	r2, [r7, #8]
 8010a2a:	4013      	ands	r3, r2
 8010a2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	b29b      	uxth	r3, r3
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3714      	adds	r7, #20
 8010a36:	46bd      	mov	sp, r7
 8010a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3c:	4770      	bx	lr

08010a3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010a3e:	b480      	push	{r7}
 8010a40:	b085      	sub	sp, #20
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
 8010a46:	460b      	mov	r3, r1
 8010a48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010a4e:	78fb      	ldrb	r3, [r7, #3]
 8010a50:	015a      	lsls	r2, r3, #5
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	4413      	add	r3, r2
 8010a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a5a:	689b      	ldr	r3, [r3, #8]
 8010a5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a64:	695b      	ldr	r3, [r3, #20]
 8010a66:	68ba      	ldr	r2, [r7, #8]
 8010a68:	4013      	ands	r3, r2
 8010a6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010a6c:	68bb      	ldr	r3, [r7, #8]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3714      	adds	r7, #20
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr

08010a7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010a7a:	b480      	push	{r7}
 8010a7c:	b087      	sub	sp, #28
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
 8010a82:	460b      	mov	r3, r1
 8010a84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a90:	691b      	ldr	r3, [r3, #16]
 8010a92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010a9e:	78fb      	ldrb	r3, [r7, #3]
 8010aa0:	f003 030f 	and.w	r3, r3, #15
 8010aa4:	68fa      	ldr	r2, [r7, #12]
 8010aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8010aaa:	01db      	lsls	r3, r3, #7
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	693a      	ldr	r2, [r7, #16]
 8010ab0:	4313      	orrs	r3, r2
 8010ab2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010ab4:	78fb      	ldrb	r3, [r7, #3]
 8010ab6:	015a      	lsls	r2, r3, #5
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	4413      	add	r3, r2
 8010abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ac0:	689b      	ldr	r3, [r3, #8]
 8010ac2:	693a      	ldr	r2, [r7, #16]
 8010ac4:	4013      	ands	r3, r2
 8010ac6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010ac8:	68bb      	ldr	r3, [r7, #8]
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	371c      	adds	r7, #28
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr

08010ad6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010ad6:	b480      	push	{r7}
 8010ad8:	b083      	sub	sp, #12
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	695b      	ldr	r3, [r3, #20]
 8010ae2:	f003 0301 	and.w	r3, r3, #1
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	370c      	adds	r7, #12
 8010aea:	46bd      	mov	sp, r7
 8010aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af0:	4770      	bx	lr

08010af2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8010af2:	b480      	push	{r7}
 8010af4:	b085      	sub	sp, #20
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	68fa      	ldr	r2, [r7, #12]
 8010b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010b10:	f023 0307 	bic.w	r3, r3, #7
 8010b14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	68fa      	ldr	r2, [r7, #12]
 8010b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010b2a:	2300      	movs	r3, #0
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3714      	adds	r7, #20
 8010b30:	46bd      	mov	sp, r7
 8010b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b36:	4770      	bx	lr

08010b38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b087      	sub	sp, #28
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	60f8      	str	r0, [r7, #12]
 8010b40:	460b      	mov	r3, r1
 8010b42:	607a      	str	r2, [r7, #4]
 8010b44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	333c      	adds	r3, #60	; 0x3c
 8010b4e:	3304      	adds	r3, #4
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	4a26      	ldr	r2, [pc, #152]	; (8010bf0 <USB_EP0_OutStart+0xb8>)
 8010b58:	4293      	cmp	r3, r2
 8010b5a:	d90a      	bls.n	8010b72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010b6c:	d101      	bne.n	8010b72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	e037      	b.n	8010be2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b78:	461a      	mov	r2, r3
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b84:	691b      	ldr	r3, [r3, #16]
 8010b86:	697a      	ldr	r2, [r7, #20]
 8010b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010b90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b98:	691b      	ldr	r3, [r3, #16]
 8010b9a:	697a      	ldr	r2, [r7, #20]
 8010b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ba0:	f043 0318 	orr.w	r3, r3, #24
 8010ba4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bac:	691b      	ldr	r3, [r3, #16]
 8010bae:	697a      	ldr	r2, [r7, #20]
 8010bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010bb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010bba:	7afb      	ldrb	r3, [r7, #11]
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d10f      	bne.n	8010be0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	697a      	ldr	r2, [r7, #20]
 8010bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010bde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010be0:	2300      	movs	r3, #0
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	371c      	adds	r7, #28
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop
 8010bf0:	4f54300a 	.word	0x4f54300a

08010bf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b085      	sub	sp, #20
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	3301      	adds	r3, #1
 8010c04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8010c0c:	d901      	bls.n	8010c12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010c0e:	2303      	movs	r3, #3
 8010c10:	e01b      	b.n	8010c4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	691b      	ldr	r3, [r3, #16]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	daf2      	bge.n	8010c00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	691b      	ldr	r3, [r3, #16]
 8010c22:	f043 0201 	orr.w	r2, r3, #1
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	3301      	adds	r3, #1
 8010c2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8010c36:	d901      	bls.n	8010c3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010c38:	2303      	movs	r3, #3
 8010c3a:	e006      	b.n	8010c4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	691b      	ldr	r3, [r3, #16]
 8010c40:	f003 0301 	and.w	r3, r3, #1
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	d0f0      	beq.n	8010c2a <USB_CoreReset+0x36>

  return HAL_OK;
 8010c48:	2300      	movs	r3, #0
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3714      	adds	r7, #20
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr
	...

08010c58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	460b      	mov	r3, r1
 8010c62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010c64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010c68:	f005 ff1e 	bl	8016aa8 <USBD_static_malloc>
 8010c6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d109      	bne.n	8010c88 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	32b0      	adds	r2, #176	; 0xb0
 8010c7e:	2100      	movs	r1, #0
 8010c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010c84:	2302      	movs	r3, #2
 8010c86:	e0d4      	b.n	8010e32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010c88:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8010c8c:	2100      	movs	r1, #0
 8010c8e:	68f8      	ldr	r0, [r7, #12]
 8010c90:	f006 fe2a 	bl	80178e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	32b0      	adds	r2, #176	; 0xb0
 8010c9e:	68f9      	ldr	r1, [r7, #12]
 8010ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	32b0      	adds	r2, #176	; 0xb0
 8010cae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	7c1b      	ldrb	r3, [r3, #16]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d138      	bne.n	8010d32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010cc0:	4b5e      	ldr	r3, [pc, #376]	; (8010e3c <USBD_CDC_Init+0x1e4>)
 8010cc2:	7819      	ldrb	r1, [r3, #0]
 8010cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cc8:	2202      	movs	r2, #2
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f005 fdc9 	bl	8016862 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010cd0:	4b5a      	ldr	r3, [pc, #360]	; (8010e3c <USBD_CDC_Init+0x1e4>)
 8010cd2:	781b      	ldrb	r3, [r3, #0]
 8010cd4:	f003 020f 	and.w	r2, r3, #15
 8010cd8:	6879      	ldr	r1, [r7, #4]
 8010cda:	4613      	mov	r3, r2
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	4413      	add	r3, r2
 8010ce0:	009b      	lsls	r3, r3, #2
 8010ce2:	440b      	add	r3, r1
 8010ce4:	3324      	adds	r3, #36	; 0x24
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010cea:	4b55      	ldr	r3, [pc, #340]	; (8010e40 <USBD_CDC_Init+0x1e8>)
 8010cec:	7819      	ldrb	r1, [r3, #0]
 8010cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cf2:	2202      	movs	r2, #2
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f005 fdb4 	bl	8016862 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010cfa:	4b51      	ldr	r3, [pc, #324]	; (8010e40 <USBD_CDC_Init+0x1e8>)
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	f003 020f 	and.w	r2, r3, #15
 8010d02:	6879      	ldr	r1, [r7, #4]
 8010d04:	4613      	mov	r3, r2
 8010d06:	009b      	lsls	r3, r3, #2
 8010d08:	4413      	add	r3, r2
 8010d0a:	009b      	lsls	r3, r3, #2
 8010d0c:	440b      	add	r3, r1
 8010d0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010d12:	2201      	movs	r2, #1
 8010d14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010d16:	4b4b      	ldr	r3, [pc, #300]	; (8010e44 <USBD_CDC_Init+0x1ec>)
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	f003 020f 	and.w	r2, r3, #15
 8010d1e:	6879      	ldr	r1, [r7, #4]
 8010d20:	4613      	mov	r3, r2
 8010d22:	009b      	lsls	r3, r3, #2
 8010d24:	4413      	add	r3, r2
 8010d26:	009b      	lsls	r3, r3, #2
 8010d28:	440b      	add	r3, r1
 8010d2a:	3326      	adds	r3, #38	; 0x26
 8010d2c:	2210      	movs	r2, #16
 8010d2e:	801a      	strh	r2, [r3, #0]
 8010d30:	e035      	b.n	8010d9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010d32:	4b42      	ldr	r3, [pc, #264]	; (8010e3c <USBD_CDC_Init+0x1e4>)
 8010d34:	7819      	ldrb	r1, [r3, #0]
 8010d36:	2340      	movs	r3, #64	; 0x40
 8010d38:	2202      	movs	r2, #2
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f005 fd91 	bl	8016862 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010d40:	4b3e      	ldr	r3, [pc, #248]	; (8010e3c <USBD_CDC_Init+0x1e4>)
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	f003 020f 	and.w	r2, r3, #15
 8010d48:	6879      	ldr	r1, [r7, #4]
 8010d4a:	4613      	mov	r3, r2
 8010d4c:	009b      	lsls	r3, r3, #2
 8010d4e:	4413      	add	r3, r2
 8010d50:	009b      	lsls	r3, r3, #2
 8010d52:	440b      	add	r3, r1
 8010d54:	3324      	adds	r3, #36	; 0x24
 8010d56:	2201      	movs	r2, #1
 8010d58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010d5a:	4b39      	ldr	r3, [pc, #228]	; (8010e40 <USBD_CDC_Init+0x1e8>)
 8010d5c:	7819      	ldrb	r1, [r3, #0]
 8010d5e:	2340      	movs	r3, #64	; 0x40
 8010d60:	2202      	movs	r2, #2
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f005 fd7d 	bl	8016862 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010d68:	4b35      	ldr	r3, [pc, #212]	; (8010e40 <USBD_CDC_Init+0x1e8>)
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	f003 020f 	and.w	r2, r3, #15
 8010d70:	6879      	ldr	r1, [r7, #4]
 8010d72:	4613      	mov	r3, r2
 8010d74:	009b      	lsls	r3, r3, #2
 8010d76:	4413      	add	r3, r2
 8010d78:	009b      	lsls	r3, r3, #2
 8010d7a:	440b      	add	r3, r1
 8010d7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010d80:	2201      	movs	r2, #1
 8010d82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010d84:	4b2f      	ldr	r3, [pc, #188]	; (8010e44 <USBD_CDC_Init+0x1ec>)
 8010d86:	781b      	ldrb	r3, [r3, #0]
 8010d88:	f003 020f 	and.w	r2, r3, #15
 8010d8c:	6879      	ldr	r1, [r7, #4]
 8010d8e:	4613      	mov	r3, r2
 8010d90:	009b      	lsls	r3, r3, #2
 8010d92:	4413      	add	r3, r2
 8010d94:	009b      	lsls	r3, r3, #2
 8010d96:	440b      	add	r3, r1
 8010d98:	3326      	adds	r3, #38	; 0x26
 8010d9a:	2210      	movs	r2, #16
 8010d9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010d9e:	4b29      	ldr	r3, [pc, #164]	; (8010e44 <USBD_CDC_Init+0x1ec>)
 8010da0:	7819      	ldrb	r1, [r3, #0]
 8010da2:	2308      	movs	r3, #8
 8010da4:	2203      	movs	r2, #3
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f005 fd5b 	bl	8016862 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010dac:	4b25      	ldr	r3, [pc, #148]	; (8010e44 <USBD_CDC_Init+0x1ec>)
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	f003 020f 	and.w	r2, r3, #15
 8010db4:	6879      	ldr	r1, [r7, #4]
 8010db6:	4613      	mov	r3, r2
 8010db8:	009b      	lsls	r3, r3, #2
 8010dba:	4413      	add	r3, r2
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	440b      	add	r3, r1
 8010dc0:	3324      	adds	r3, #36	; 0x24
 8010dc2:	2201      	movs	r2, #1
 8010dc4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	33b0      	adds	r3, #176	; 0xb0
 8010dd8:	009b      	lsls	r3, r3, #2
 8010dda:	4413      	add	r3, r2
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	2200      	movs	r2, #0
 8010de6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2200      	movs	r2, #0
 8010dee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d101      	bne.n	8010e00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010dfc:	2302      	movs	r3, #2
 8010dfe:	e018      	b.n	8010e32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	7c1b      	ldrb	r3, [r3, #16]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d10a      	bne.n	8010e1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010e08:	4b0d      	ldr	r3, [pc, #52]	; (8010e40 <USBD_CDC_Init+0x1e8>)
 8010e0a:	7819      	ldrb	r1, [r3, #0]
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f005 fe12 	bl	8016a40 <USBD_LL_PrepareReceive>
 8010e1c:	e008      	b.n	8010e30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010e1e:	4b08      	ldr	r3, [pc, #32]	; (8010e40 <USBD_CDC_Init+0x1e8>)
 8010e20:	7819      	ldrb	r1, [r3, #0]
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010e28:	2340      	movs	r3, #64	; 0x40
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f005 fe08 	bl	8016a40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010e30:	2300      	movs	r3, #0
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3710      	adds	r7, #16
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	200003d3 	.word	0x200003d3
 8010e40:	200003d4 	.word	0x200003d4
 8010e44:	200003d5 	.word	0x200003d5

08010e48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	460b      	mov	r3, r1
 8010e52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010e54:	4b3a      	ldr	r3, [pc, #232]	; (8010f40 <USBD_CDC_DeInit+0xf8>)
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	4619      	mov	r1, r3
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f005 fd27 	bl	80168ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010e60:	4b37      	ldr	r3, [pc, #220]	; (8010f40 <USBD_CDC_DeInit+0xf8>)
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	f003 020f 	and.w	r2, r3, #15
 8010e68:	6879      	ldr	r1, [r7, #4]
 8010e6a:	4613      	mov	r3, r2
 8010e6c:	009b      	lsls	r3, r3, #2
 8010e6e:	4413      	add	r3, r2
 8010e70:	009b      	lsls	r3, r3, #2
 8010e72:	440b      	add	r3, r1
 8010e74:	3324      	adds	r3, #36	; 0x24
 8010e76:	2200      	movs	r2, #0
 8010e78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010e7a:	4b32      	ldr	r3, [pc, #200]	; (8010f44 <USBD_CDC_DeInit+0xfc>)
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	4619      	mov	r1, r3
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f005 fd14 	bl	80168ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010e86:	4b2f      	ldr	r3, [pc, #188]	; (8010f44 <USBD_CDC_DeInit+0xfc>)
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	f003 020f 	and.w	r2, r3, #15
 8010e8e:	6879      	ldr	r1, [r7, #4]
 8010e90:	4613      	mov	r3, r2
 8010e92:	009b      	lsls	r3, r3, #2
 8010e94:	4413      	add	r3, r2
 8010e96:	009b      	lsls	r3, r3, #2
 8010e98:	440b      	add	r3, r1
 8010e9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010ea2:	4b29      	ldr	r3, [pc, #164]	; (8010f48 <USBD_CDC_DeInit+0x100>)
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	4619      	mov	r1, r3
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f005 fd00 	bl	80168ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010eae:	4b26      	ldr	r3, [pc, #152]	; (8010f48 <USBD_CDC_DeInit+0x100>)
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	f003 020f 	and.w	r2, r3, #15
 8010eb6:	6879      	ldr	r1, [r7, #4]
 8010eb8:	4613      	mov	r3, r2
 8010eba:	009b      	lsls	r3, r3, #2
 8010ebc:	4413      	add	r3, r2
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	440b      	add	r3, r1
 8010ec2:	3324      	adds	r3, #36	; 0x24
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010ec8:	4b1f      	ldr	r3, [pc, #124]	; (8010f48 <USBD_CDC_DeInit+0x100>)
 8010eca:	781b      	ldrb	r3, [r3, #0]
 8010ecc:	f003 020f 	and.w	r2, r3, #15
 8010ed0:	6879      	ldr	r1, [r7, #4]
 8010ed2:	4613      	mov	r3, r2
 8010ed4:	009b      	lsls	r3, r3, #2
 8010ed6:	4413      	add	r3, r2
 8010ed8:	009b      	lsls	r3, r3, #2
 8010eda:	440b      	add	r3, r1
 8010edc:	3326      	adds	r3, #38	; 0x26
 8010ede:	2200      	movs	r2, #0
 8010ee0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	32b0      	adds	r2, #176	; 0xb0
 8010eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d01f      	beq.n	8010f34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	33b0      	adds	r3, #176	; 0xb0
 8010efe:	009b      	lsls	r3, r3, #2
 8010f00:	4413      	add	r3, r2
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	32b0      	adds	r2, #176	; 0xb0
 8010f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f16:	4618      	mov	r0, r3
 8010f18:	f005 fdd4 	bl	8016ac4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	32b0      	adds	r2, #176	; 0xb0
 8010f26:	2100      	movs	r1, #0
 8010f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010f34:	2300      	movs	r3, #0
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3708      	adds	r7, #8
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	200003d3 	.word	0x200003d3
 8010f44:	200003d4 	.word	0x200003d4
 8010f48:	200003d5 	.word	0x200003d5

08010f4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b086      	sub	sp, #24
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	32b0      	adds	r2, #176	; 0xb0
 8010f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010f66:	2300      	movs	r3, #0
 8010f68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d101      	bne.n	8010f7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010f78:	2303      	movs	r3, #3
 8010f7a:	e0bf      	b.n	80110fc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d050      	beq.n	801102a <USBD_CDC_Setup+0xde>
 8010f88:	2b20      	cmp	r3, #32
 8010f8a:	f040 80af 	bne.w	80110ec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	88db      	ldrh	r3, [r3, #6]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d03a      	beq.n	801100c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	b25b      	sxtb	r3, r3
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	da1b      	bge.n	8010fd8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010fa6:	687a      	ldr	r2, [r7, #4]
 8010fa8:	33b0      	adds	r3, #176	; 0xb0
 8010faa:	009b      	lsls	r3, r3, #2
 8010fac:	4413      	add	r3, r2
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	689b      	ldr	r3, [r3, #8]
 8010fb2:	683a      	ldr	r2, [r7, #0]
 8010fb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010fb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010fb8:	683a      	ldr	r2, [r7, #0]
 8010fba:	88d2      	ldrh	r2, [r2, #6]
 8010fbc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	88db      	ldrh	r3, [r3, #6]
 8010fc2:	2b07      	cmp	r3, #7
 8010fc4:	bf28      	it	cs
 8010fc6:	2307      	movcs	r3, #7
 8010fc8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	89fa      	ldrh	r2, [r7, #14]
 8010fce:	4619      	mov	r1, r3
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f001 fd49 	bl	8012a68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010fd6:	e090      	b.n	80110fa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	785a      	ldrb	r2, [r3, #1]
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	88db      	ldrh	r3, [r3, #6]
 8010fe6:	2b3f      	cmp	r3, #63	; 0x3f
 8010fe8:	d803      	bhi.n	8010ff2 <USBD_CDC_Setup+0xa6>
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	88db      	ldrh	r3, [r3, #6]
 8010fee:	b2da      	uxtb	r2, r3
 8010ff0:	e000      	b.n	8010ff4 <USBD_CDC_Setup+0xa8>
 8010ff2:	2240      	movs	r2, #64	; 0x40
 8010ff4:	693b      	ldr	r3, [r7, #16]
 8010ff6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010ffa:	6939      	ldr	r1, [r7, #16]
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011002:	461a      	mov	r2, r3
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f001 fd5b 	bl	8012ac0 <USBD_CtlPrepareRx>
      break;
 801100a:	e076      	b.n	80110fa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011012:	687a      	ldr	r2, [r7, #4]
 8011014:	33b0      	adds	r3, #176	; 0xb0
 8011016:	009b      	lsls	r3, r3, #2
 8011018:	4413      	add	r3, r2
 801101a:	685b      	ldr	r3, [r3, #4]
 801101c:	689b      	ldr	r3, [r3, #8]
 801101e:	683a      	ldr	r2, [r7, #0]
 8011020:	7850      	ldrb	r0, [r2, #1]
 8011022:	2200      	movs	r2, #0
 8011024:	6839      	ldr	r1, [r7, #0]
 8011026:	4798      	blx	r3
      break;
 8011028:	e067      	b.n	80110fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	785b      	ldrb	r3, [r3, #1]
 801102e:	2b0b      	cmp	r3, #11
 8011030:	d851      	bhi.n	80110d6 <USBD_CDC_Setup+0x18a>
 8011032:	a201      	add	r2, pc, #4	; (adr r2, 8011038 <USBD_CDC_Setup+0xec>)
 8011034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011038:	08011069 	.word	0x08011069
 801103c:	080110e5 	.word	0x080110e5
 8011040:	080110d7 	.word	0x080110d7
 8011044:	080110d7 	.word	0x080110d7
 8011048:	080110d7 	.word	0x080110d7
 801104c:	080110d7 	.word	0x080110d7
 8011050:	080110d7 	.word	0x080110d7
 8011054:	080110d7 	.word	0x080110d7
 8011058:	080110d7 	.word	0x080110d7
 801105c:	080110d7 	.word	0x080110d7
 8011060:	08011093 	.word	0x08011093
 8011064:	080110bd 	.word	0x080110bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801106e:	b2db      	uxtb	r3, r3
 8011070:	2b03      	cmp	r3, #3
 8011072:	d107      	bne.n	8011084 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011074:	f107 030a 	add.w	r3, r7, #10
 8011078:	2202      	movs	r2, #2
 801107a:	4619      	mov	r1, r3
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f001 fcf3 	bl	8012a68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011082:	e032      	b.n	80110ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011084:	6839      	ldr	r1, [r7, #0]
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f001 fc7d 	bl	8012986 <USBD_CtlError>
            ret = USBD_FAIL;
 801108c:	2303      	movs	r3, #3
 801108e:	75fb      	strb	r3, [r7, #23]
          break;
 8011090:	e02b      	b.n	80110ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011098:	b2db      	uxtb	r3, r3
 801109a:	2b03      	cmp	r3, #3
 801109c:	d107      	bne.n	80110ae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801109e:	f107 030d 	add.w	r3, r7, #13
 80110a2:	2201      	movs	r2, #1
 80110a4:	4619      	mov	r1, r3
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f001 fcde 	bl	8012a68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80110ac:	e01d      	b.n	80110ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80110ae:	6839      	ldr	r1, [r7, #0]
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f001 fc68 	bl	8012986 <USBD_CtlError>
            ret = USBD_FAIL;
 80110b6:	2303      	movs	r3, #3
 80110b8:	75fb      	strb	r3, [r7, #23]
          break;
 80110ba:	e016      	b.n	80110ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	2b03      	cmp	r3, #3
 80110c6:	d00f      	beq.n	80110e8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80110c8:	6839      	ldr	r1, [r7, #0]
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f001 fc5b 	bl	8012986 <USBD_CtlError>
            ret = USBD_FAIL;
 80110d0:	2303      	movs	r3, #3
 80110d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80110d4:	e008      	b.n	80110e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80110d6:	6839      	ldr	r1, [r7, #0]
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f001 fc54 	bl	8012986 <USBD_CtlError>
          ret = USBD_FAIL;
 80110de:	2303      	movs	r3, #3
 80110e0:	75fb      	strb	r3, [r7, #23]
          break;
 80110e2:	e002      	b.n	80110ea <USBD_CDC_Setup+0x19e>
          break;
 80110e4:	bf00      	nop
 80110e6:	e008      	b.n	80110fa <USBD_CDC_Setup+0x1ae>
          break;
 80110e8:	bf00      	nop
      }
      break;
 80110ea:	e006      	b.n	80110fa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80110ec:	6839      	ldr	r1, [r7, #0]
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f001 fc49 	bl	8012986 <USBD_CtlError>
      ret = USBD_FAIL;
 80110f4:	2303      	movs	r3, #3
 80110f6:	75fb      	strb	r3, [r7, #23]
      break;
 80110f8:	bf00      	nop
  }

  return (uint8_t)ret;
 80110fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3718      	adds	r7, #24
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	460b      	mov	r3, r1
 801110e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011116:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	32b0      	adds	r2, #176	; 0xb0
 8011122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d101      	bne.n	801112e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801112a:	2303      	movs	r3, #3
 801112c:	e065      	b.n	80111fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	32b0      	adds	r2, #176	; 0xb0
 8011138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801113c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801113e:	78fb      	ldrb	r3, [r7, #3]
 8011140:	f003 020f 	and.w	r2, r3, #15
 8011144:	6879      	ldr	r1, [r7, #4]
 8011146:	4613      	mov	r3, r2
 8011148:	009b      	lsls	r3, r3, #2
 801114a:	4413      	add	r3, r2
 801114c:	009b      	lsls	r3, r3, #2
 801114e:	440b      	add	r3, r1
 8011150:	3318      	adds	r3, #24
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d02f      	beq.n	80111b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011158:	78fb      	ldrb	r3, [r7, #3]
 801115a:	f003 020f 	and.w	r2, r3, #15
 801115e:	6879      	ldr	r1, [r7, #4]
 8011160:	4613      	mov	r3, r2
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	4413      	add	r3, r2
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	440b      	add	r3, r1
 801116a:	3318      	adds	r3, #24
 801116c:	681a      	ldr	r2, [r3, #0]
 801116e:	78fb      	ldrb	r3, [r7, #3]
 8011170:	f003 010f 	and.w	r1, r3, #15
 8011174:	68f8      	ldr	r0, [r7, #12]
 8011176:	460b      	mov	r3, r1
 8011178:	00db      	lsls	r3, r3, #3
 801117a:	440b      	add	r3, r1
 801117c:	009b      	lsls	r3, r3, #2
 801117e:	4403      	add	r3, r0
 8011180:	331c      	adds	r3, #28
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	fbb2 f1f3 	udiv	r1, r2, r3
 8011188:	fb01 f303 	mul.w	r3, r1, r3
 801118c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801118e:	2b00      	cmp	r3, #0
 8011190:	d112      	bne.n	80111b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8011192:	78fb      	ldrb	r3, [r7, #3]
 8011194:	f003 020f 	and.w	r2, r3, #15
 8011198:	6879      	ldr	r1, [r7, #4]
 801119a:	4613      	mov	r3, r2
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	4413      	add	r3, r2
 80111a0:	009b      	lsls	r3, r3, #2
 80111a2:	440b      	add	r3, r1
 80111a4:	3318      	adds	r3, #24
 80111a6:	2200      	movs	r2, #0
 80111a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80111aa:	78f9      	ldrb	r1, [r7, #3]
 80111ac:	2300      	movs	r3, #0
 80111ae:	2200      	movs	r2, #0
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f005 fc24 	bl	80169fe <USBD_LL_Transmit>
 80111b6:	e01f      	b.n	80111f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	2200      	movs	r2, #0
 80111bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80111c6:	687a      	ldr	r2, [r7, #4]
 80111c8:	33b0      	adds	r3, #176	; 0xb0
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	4413      	add	r3, r2
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	691b      	ldr	r3, [r3, #16]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d010      	beq.n	80111f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80111dc:	687a      	ldr	r2, [r7, #4]
 80111de:	33b0      	adds	r3, #176	; 0xb0
 80111e0:	009b      	lsls	r3, r3, #2
 80111e2:	4413      	add	r3, r2
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	691b      	ldr	r3, [r3, #16]
 80111e8:	68ba      	ldr	r2, [r7, #8]
 80111ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80111ee:	68ba      	ldr	r2, [r7, #8]
 80111f0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80111f4:	78fa      	ldrb	r2, [r7, #3]
 80111f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80111f8:	2300      	movs	r3, #0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b084      	sub	sp, #16
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
 801120a:	460b      	mov	r3, r1
 801120c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	32b0      	adds	r2, #176	; 0xb0
 8011218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801121c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	32b0      	adds	r2, #176	; 0xb0
 8011228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d101      	bne.n	8011234 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011230:	2303      	movs	r3, #3
 8011232:	e01a      	b.n	801126a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011234:	78fb      	ldrb	r3, [r7, #3]
 8011236:	4619      	mov	r1, r3
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f005 fc22 	bl	8016a82 <USBD_LL_GetRxDataSize>
 801123e:	4602      	mov	r2, r0
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801124c:	687a      	ldr	r2, [r7, #4]
 801124e:	33b0      	adds	r3, #176	; 0xb0
 8011250:	009b      	lsls	r3, r3, #2
 8011252:	4413      	add	r3, r2
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	68fa      	ldr	r2, [r7, #12]
 801125a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801125e:	68fa      	ldr	r2, [r7, #12]
 8011260:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011264:	4611      	mov	r1, r2
 8011266:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	3710      	adds	r7, #16
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}

08011272 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011272:	b580      	push	{r7, lr}
 8011274:	b084      	sub	sp, #16
 8011276:	af00      	add	r7, sp, #0
 8011278:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	32b0      	adds	r2, #176	; 0xb0
 8011284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011288:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d101      	bne.n	8011294 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011290:	2303      	movs	r3, #3
 8011292:	e025      	b.n	80112e0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	33b0      	adds	r3, #176	; 0xb0
 801129e:	009b      	lsls	r3, r3, #2
 80112a0:	4413      	add	r3, r2
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d01a      	beq.n	80112de <USBD_CDC_EP0_RxReady+0x6c>
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80112ae:	2bff      	cmp	r3, #255	; 0xff
 80112b0:	d015      	beq.n	80112de <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80112b8:	687a      	ldr	r2, [r7, #4]
 80112ba:	33b0      	adds	r3, #176	; 0xb0
 80112bc:	009b      	lsls	r3, r3, #2
 80112be:	4413      	add	r3, r2
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	68fa      	ldr	r2, [r7, #12]
 80112c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80112ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80112cc:	68fa      	ldr	r2, [r7, #12]
 80112ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80112d2:	b292      	uxth	r2, r2
 80112d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	22ff      	movs	r2, #255	; 0xff
 80112da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80112de:	2300      	movs	r3, #0
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3710      	adds	r7, #16
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}

080112e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b086      	sub	sp, #24
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80112f0:	2182      	movs	r1, #130	; 0x82
 80112f2:	4818      	ldr	r0, [pc, #96]	; (8011354 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80112f4:	f000 fd0f 	bl	8011d16 <USBD_GetEpDesc>
 80112f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80112fa:	2101      	movs	r1, #1
 80112fc:	4815      	ldr	r0, [pc, #84]	; (8011354 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80112fe:	f000 fd0a 	bl	8011d16 <USBD_GetEpDesc>
 8011302:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011304:	2181      	movs	r1, #129	; 0x81
 8011306:	4813      	ldr	r0, [pc, #76]	; (8011354 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011308:	f000 fd05 	bl	8011d16 <USBD_GetEpDesc>
 801130c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d002      	beq.n	801131a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	2210      	movs	r2, #16
 8011318:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d006      	beq.n	801132e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	2200      	movs	r2, #0
 8011324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011328:	711a      	strb	r2, [r3, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d006      	beq.n	8011342 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2200      	movs	r2, #0
 8011338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801133c:	711a      	strb	r2, [r3, #4]
 801133e:	2200      	movs	r2, #0
 8011340:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2243      	movs	r2, #67	; 0x43
 8011346:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011348:	4b02      	ldr	r3, [pc, #8]	; (8011354 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801134a:	4618      	mov	r0, r3
 801134c:	3718      	adds	r7, #24
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	20000390 	.word	0x20000390

08011358 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b086      	sub	sp, #24
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011360:	2182      	movs	r1, #130	; 0x82
 8011362:	4818      	ldr	r0, [pc, #96]	; (80113c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011364:	f000 fcd7 	bl	8011d16 <USBD_GetEpDesc>
 8011368:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801136a:	2101      	movs	r1, #1
 801136c:	4815      	ldr	r0, [pc, #84]	; (80113c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801136e:	f000 fcd2 	bl	8011d16 <USBD_GetEpDesc>
 8011372:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011374:	2181      	movs	r1, #129	; 0x81
 8011376:	4813      	ldr	r0, [pc, #76]	; (80113c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011378:	f000 fccd 	bl	8011d16 <USBD_GetEpDesc>
 801137c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d002      	beq.n	801138a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	2210      	movs	r2, #16
 8011388:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d006      	beq.n	801139e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	2200      	movs	r2, #0
 8011394:	711a      	strb	r2, [r3, #4]
 8011396:	2200      	movs	r2, #0
 8011398:	f042 0202 	orr.w	r2, r2, #2
 801139c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d006      	beq.n	80113b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2200      	movs	r2, #0
 80113a8:	711a      	strb	r2, [r3, #4]
 80113aa:	2200      	movs	r2, #0
 80113ac:	f042 0202 	orr.w	r2, r2, #2
 80113b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2243      	movs	r2, #67	; 0x43
 80113b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80113b8:	4b02      	ldr	r3, [pc, #8]	; (80113c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3718      	adds	r7, #24
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	20000390 	.word	0x20000390

080113c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b086      	sub	sp, #24
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80113d0:	2182      	movs	r1, #130	; 0x82
 80113d2:	4818      	ldr	r0, [pc, #96]	; (8011434 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80113d4:	f000 fc9f 	bl	8011d16 <USBD_GetEpDesc>
 80113d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80113da:	2101      	movs	r1, #1
 80113dc:	4815      	ldr	r0, [pc, #84]	; (8011434 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80113de:	f000 fc9a 	bl	8011d16 <USBD_GetEpDesc>
 80113e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80113e4:	2181      	movs	r1, #129	; 0x81
 80113e6:	4813      	ldr	r0, [pc, #76]	; (8011434 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80113e8:	f000 fc95 	bl	8011d16 <USBD_GetEpDesc>
 80113ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d002      	beq.n	80113fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	2210      	movs	r2, #16
 80113f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d006      	beq.n	801140e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	2200      	movs	r2, #0
 8011404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011408:	711a      	strb	r2, [r3, #4]
 801140a:	2200      	movs	r2, #0
 801140c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d006      	beq.n	8011422 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	2200      	movs	r2, #0
 8011418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801141c:	711a      	strb	r2, [r3, #4]
 801141e:	2200      	movs	r2, #0
 8011420:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2243      	movs	r2, #67	; 0x43
 8011426:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011428:	4b02      	ldr	r3, [pc, #8]	; (8011434 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801142a:	4618      	mov	r0, r3
 801142c:	3718      	adds	r7, #24
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	20000390 	.word	0x20000390

08011438 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011438:	b480      	push	{r7}
 801143a:	b083      	sub	sp, #12
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	220a      	movs	r2, #10
 8011444:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011446:	4b03      	ldr	r3, [pc, #12]	; (8011454 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011448:	4618      	mov	r0, r3
 801144a:	370c      	adds	r7, #12
 801144c:	46bd      	mov	sp, r7
 801144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011452:	4770      	bx	lr
 8011454:	2000034c 	.word	0x2000034c

08011458 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011458:	b480      	push	{r7}
 801145a:	b083      	sub	sp, #12
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d101      	bne.n	801146c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011468:	2303      	movs	r3, #3
 801146a:	e009      	b.n	8011480 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011472:	687a      	ldr	r2, [r7, #4]
 8011474:	33b0      	adds	r3, #176	; 0xb0
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	4413      	add	r3, r2
 801147a:	683a      	ldr	r2, [r7, #0]
 801147c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801147e:	2300      	movs	r3, #0
}
 8011480:	4618      	mov	r0, r3
 8011482:	370c      	adds	r7, #12
 8011484:	46bd      	mov	sp, r7
 8011486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148a:	4770      	bx	lr

0801148c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801148c:	b480      	push	{r7}
 801148e:	b087      	sub	sp, #28
 8011490:	af00      	add	r7, sp, #0
 8011492:	60f8      	str	r0, [r7, #12]
 8011494:	60b9      	str	r1, [r7, #8]
 8011496:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	32b0      	adds	r2, #176	; 0xb0
 80114a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114a6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d101      	bne.n	80114b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80114ae:	2303      	movs	r3, #3
 80114b0:	e008      	b.n	80114c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	68ba      	ldr	r2, [r7, #8]
 80114b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80114c2:	2300      	movs	r3, #0
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	371c      	adds	r7, #28
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr

080114d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b085      	sub	sp, #20
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	32b0      	adds	r2, #176	; 0xb0
 80114e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d101      	bne.n	80114f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80114f0:	2303      	movs	r3, #3
 80114f2:	e004      	b.n	80114fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	683a      	ldr	r2, [r7, #0]
 80114f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80114fc:	2300      	movs	r3, #0
}
 80114fe:	4618      	mov	r0, r3
 8011500:	3714      	adds	r7, #20
 8011502:	46bd      	mov	sp, r7
 8011504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011508:	4770      	bx	lr
	...

0801150c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	32b0      	adds	r2, #176	; 0xb0
 801151e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011522:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	32b0      	adds	r2, #176	; 0xb0
 801152e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d101      	bne.n	801153a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011536:	2303      	movs	r3, #3
 8011538:	e018      	b.n	801156c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	7c1b      	ldrb	r3, [r3, #16]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d10a      	bne.n	8011558 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011542:	4b0c      	ldr	r3, [pc, #48]	; (8011574 <USBD_CDC_ReceivePacket+0x68>)
 8011544:	7819      	ldrb	r1, [r3, #0]
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801154c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f005 fa75 	bl	8016a40 <USBD_LL_PrepareReceive>
 8011556:	e008      	b.n	801156a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011558:	4b06      	ldr	r3, [pc, #24]	; (8011574 <USBD_CDC_ReceivePacket+0x68>)
 801155a:	7819      	ldrb	r1, [r3, #0]
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011562:	2340      	movs	r3, #64	; 0x40
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f005 fa6b 	bl	8016a40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801156a:	2300      	movs	r3, #0
}
 801156c:	4618      	mov	r0, r3
 801156e:	3710      	adds	r7, #16
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}
 8011574:	200003d4 	.word	0x200003d4

08011578 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b086      	sub	sp, #24
 801157c:	af00      	add	r7, sp, #0
 801157e:	60f8      	str	r0, [r7, #12]
 8011580:	60b9      	str	r1, [r7, #8]
 8011582:	4613      	mov	r3, r2
 8011584:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d101      	bne.n	8011590 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801158c:	2303      	movs	r3, #3
 801158e:	e01f      	b.n	80115d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	2200      	movs	r2, #0
 8011594:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	2200      	movs	r2, #0
 801159c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2200      	movs	r2, #0
 80115a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d003      	beq.n	80115b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	68ba      	ldr	r2, [r7, #8]
 80115b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	2201      	movs	r2, #1
 80115ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	79fa      	ldrb	r2, [r7, #7]
 80115c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80115c4:	68f8      	ldr	r0, [r7, #12]
 80115c6:	f005 f8e5 	bl	8016794 <USBD_LL_Init>
 80115ca:	4603      	mov	r3, r0
 80115cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80115ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3718      	adds	r7, #24
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}

080115d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b084      	sub	sp, #16
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80115e2:	2300      	movs	r3, #0
 80115e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d101      	bne.n	80115f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80115ec:	2303      	movs	r3, #3
 80115ee:	e025      	b.n	801163c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	683a      	ldr	r2, [r7, #0]
 80115f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	32ae      	adds	r2, #174	; 0xae
 8011602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011608:	2b00      	cmp	r3, #0
 801160a:	d00f      	beq.n	801162c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	32ae      	adds	r2, #174	; 0xae
 8011616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801161c:	f107 020e 	add.w	r2, r7, #14
 8011620:	4610      	mov	r0, r2
 8011622:	4798      	blx	r3
 8011624:	4602      	mov	r2, r0
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011632:	1c5a      	adds	r2, r3, #1
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801163a:	2300      	movs	r3, #0
}
 801163c:	4618      	mov	r0, r3
 801163e:	3710      	adds	r7, #16
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b082      	sub	sp, #8
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f005 f8ed 	bl	801682c <USBD_LL_Start>
 8011652:	4603      	mov	r3, r0
}
 8011654:	4618      	mov	r0, r3
 8011656:	3708      	adds	r7, #8
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}

0801165c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011664:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011666:	4618      	mov	r0, r3
 8011668:	370c      	adds	r7, #12
 801166a:	46bd      	mov	sp, r7
 801166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011670:	4770      	bx	lr

08011672 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011672:	b580      	push	{r7, lr}
 8011674:	b084      	sub	sp, #16
 8011676:	af00      	add	r7, sp, #0
 8011678:	6078      	str	r0, [r7, #4]
 801167a:	460b      	mov	r3, r1
 801167c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801167e:	2300      	movs	r3, #0
 8011680:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011688:	2b00      	cmp	r3, #0
 801168a:	d009      	beq.n	80116a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	78fa      	ldrb	r2, [r7, #3]
 8011696:	4611      	mov	r1, r2
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	4798      	blx	r3
 801169c:	4603      	mov	r3, r0
 801169e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80116a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3710      	adds	r7, #16
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}

080116aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80116aa:	b580      	push	{r7, lr}
 80116ac:	b084      	sub	sp, #16
 80116ae:	af00      	add	r7, sp, #0
 80116b0:	6078      	str	r0, [r7, #4]
 80116b2:	460b      	mov	r3, r1
 80116b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80116b6:	2300      	movs	r3, #0
 80116b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	78fa      	ldrb	r2, [r7, #3]
 80116c4:	4611      	mov	r1, r2
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	4798      	blx	r3
 80116ca:	4603      	mov	r3, r0
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d001      	beq.n	80116d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80116d0:	2303      	movs	r3, #3
 80116d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80116d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3710      	adds	r7, #16
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}

080116de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80116de:	b580      	push	{r7, lr}
 80116e0:	b084      	sub	sp, #16
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	6078      	str	r0, [r7, #4]
 80116e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80116ee:	6839      	ldr	r1, [r7, #0]
 80116f0:	4618      	mov	r0, r3
 80116f2:	f001 f90e 	bl	8012912 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2201      	movs	r2, #1
 80116fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011704:	461a      	mov	r2, r3
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011712:	f003 031f 	and.w	r3, r3, #31
 8011716:	2b02      	cmp	r3, #2
 8011718:	d01a      	beq.n	8011750 <USBD_LL_SetupStage+0x72>
 801171a:	2b02      	cmp	r3, #2
 801171c:	d822      	bhi.n	8011764 <USBD_LL_SetupStage+0x86>
 801171e:	2b00      	cmp	r3, #0
 8011720:	d002      	beq.n	8011728 <USBD_LL_SetupStage+0x4a>
 8011722:	2b01      	cmp	r3, #1
 8011724:	d00a      	beq.n	801173c <USBD_LL_SetupStage+0x5e>
 8011726:	e01d      	b.n	8011764 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801172e:	4619      	mov	r1, r3
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f000 fb65 	bl	8011e00 <USBD_StdDevReq>
 8011736:	4603      	mov	r3, r0
 8011738:	73fb      	strb	r3, [r7, #15]
      break;
 801173a:	e020      	b.n	801177e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011742:	4619      	mov	r1, r3
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f000 fbcd 	bl	8011ee4 <USBD_StdItfReq>
 801174a:	4603      	mov	r3, r0
 801174c:	73fb      	strb	r3, [r7, #15]
      break;
 801174e:	e016      	b.n	801177e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011756:	4619      	mov	r1, r3
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f000 fc2f 	bl	8011fbc <USBD_StdEPReq>
 801175e:	4603      	mov	r3, r0
 8011760:	73fb      	strb	r3, [r7, #15]
      break;
 8011762:	e00c      	b.n	801177e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801176a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801176e:	b2db      	uxtb	r3, r3
 8011770:	4619      	mov	r1, r3
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f005 f8ba 	bl	80168ec <USBD_LL_StallEP>
 8011778:	4603      	mov	r3, r0
 801177a:	73fb      	strb	r3, [r7, #15]
      break;
 801177c:	bf00      	nop
  }

  return ret;
 801177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011780:	4618      	mov	r0, r3
 8011782:	3710      	adds	r7, #16
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b086      	sub	sp, #24
 801178c:	af00      	add	r7, sp, #0
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	460b      	mov	r3, r1
 8011792:	607a      	str	r2, [r7, #4]
 8011794:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011796:	2300      	movs	r3, #0
 8011798:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801179a:	7afb      	ldrb	r3, [r7, #11]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d16e      	bne.n	801187e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80117a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80117ae:	2b03      	cmp	r3, #3
 80117b0:	f040 8098 	bne.w	80118e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	689a      	ldr	r2, [r3, #8]
 80117b8:	693b      	ldr	r3, [r7, #16]
 80117ba:	68db      	ldr	r3, [r3, #12]
 80117bc:	429a      	cmp	r2, r3
 80117be:	d913      	bls.n	80117e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	689a      	ldr	r2, [r3, #8]
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	1ad2      	subs	r2, r2, r3
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	68da      	ldr	r2, [r3, #12]
 80117d2:	693b      	ldr	r3, [r7, #16]
 80117d4:	689b      	ldr	r3, [r3, #8]
 80117d6:	4293      	cmp	r3, r2
 80117d8:	bf28      	it	cs
 80117da:	4613      	movcs	r3, r2
 80117dc:	461a      	mov	r2, r3
 80117de:	6879      	ldr	r1, [r7, #4]
 80117e0:	68f8      	ldr	r0, [r7, #12]
 80117e2:	f001 f98a 	bl	8012afa <USBD_CtlContinueRx>
 80117e6:	e07d      	b.n	80118e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80117ee:	f003 031f 	and.w	r3, r3, #31
 80117f2:	2b02      	cmp	r3, #2
 80117f4:	d014      	beq.n	8011820 <USBD_LL_DataOutStage+0x98>
 80117f6:	2b02      	cmp	r3, #2
 80117f8:	d81d      	bhi.n	8011836 <USBD_LL_DataOutStage+0xae>
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d002      	beq.n	8011804 <USBD_LL_DataOutStage+0x7c>
 80117fe:	2b01      	cmp	r3, #1
 8011800:	d003      	beq.n	801180a <USBD_LL_DataOutStage+0x82>
 8011802:	e018      	b.n	8011836 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011804:	2300      	movs	r3, #0
 8011806:	75bb      	strb	r3, [r7, #22]
            break;
 8011808:	e018      	b.n	801183c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011810:	b2db      	uxtb	r3, r3
 8011812:	4619      	mov	r1, r3
 8011814:	68f8      	ldr	r0, [r7, #12]
 8011816:	f000 fa64 	bl	8011ce2 <USBD_CoreFindIF>
 801181a:	4603      	mov	r3, r0
 801181c:	75bb      	strb	r3, [r7, #22]
            break;
 801181e:	e00d      	b.n	801183c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011826:	b2db      	uxtb	r3, r3
 8011828:	4619      	mov	r1, r3
 801182a:	68f8      	ldr	r0, [r7, #12]
 801182c:	f000 fa66 	bl	8011cfc <USBD_CoreFindEP>
 8011830:	4603      	mov	r3, r0
 8011832:	75bb      	strb	r3, [r7, #22]
            break;
 8011834:	e002      	b.n	801183c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011836:	2300      	movs	r3, #0
 8011838:	75bb      	strb	r3, [r7, #22]
            break;
 801183a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801183c:	7dbb      	ldrb	r3, [r7, #22]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d119      	bne.n	8011876 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011848:	b2db      	uxtb	r3, r3
 801184a:	2b03      	cmp	r3, #3
 801184c:	d113      	bne.n	8011876 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801184e:	7dba      	ldrb	r2, [r7, #22]
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	32ae      	adds	r2, #174	; 0xae
 8011854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011858:	691b      	ldr	r3, [r3, #16]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d00b      	beq.n	8011876 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801185e:	7dba      	ldrb	r2, [r7, #22]
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011866:	7dba      	ldrb	r2, [r7, #22]
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	32ae      	adds	r2, #174	; 0xae
 801186c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011870:	691b      	ldr	r3, [r3, #16]
 8011872:	68f8      	ldr	r0, [r7, #12]
 8011874:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011876:	68f8      	ldr	r0, [r7, #12]
 8011878:	f001 f950 	bl	8012b1c <USBD_CtlSendStatus>
 801187c:	e032      	b.n	80118e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801187e:	7afb      	ldrb	r3, [r7, #11]
 8011880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011884:	b2db      	uxtb	r3, r3
 8011886:	4619      	mov	r1, r3
 8011888:	68f8      	ldr	r0, [r7, #12]
 801188a:	f000 fa37 	bl	8011cfc <USBD_CoreFindEP>
 801188e:	4603      	mov	r3, r0
 8011890:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011892:	7dbb      	ldrb	r3, [r7, #22]
 8011894:	2bff      	cmp	r3, #255	; 0xff
 8011896:	d025      	beq.n	80118e4 <USBD_LL_DataOutStage+0x15c>
 8011898:	7dbb      	ldrb	r3, [r7, #22]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d122      	bne.n	80118e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118a4:	b2db      	uxtb	r3, r3
 80118a6:	2b03      	cmp	r3, #3
 80118a8:	d117      	bne.n	80118da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80118aa:	7dba      	ldrb	r2, [r7, #22]
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	32ae      	adds	r2, #174	; 0xae
 80118b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118b4:	699b      	ldr	r3, [r3, #24]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d00f      	beq.n	80118da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80118ba:	7dba      	ldrb	r2, [r7, #22]
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80118c2:	7dba      	ldrb	r2, [r7, #22]
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	32ae      	adds	r2, #174	; 0xae
 80118c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118cc:	699b      	ldr	r3, [r3, #24]
 80118ce:	7afa      	ldrb	r2, [r7, #11]
 80118d0:	4611      	mov	r1, r2
 80118d2:	68f8      	ldr	r0, [r7, #12]
 80118d4:	4798      	blx	r3
 80118d6:	4603      	mov	r3, r0
 80118d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80118da:	7dfb      	ldrb	r3, [r7, #23]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d001      	beq.n	80118e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80118e0:	7dfb      	ldrb	r3, [r7, #23]
 80118e2:	e000      	b.n	80118e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80118e4:	2300      	movs	r3, #0
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3718      	adds	r7, #24
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}

080118ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80118ee:	b580      	push	{r7, lr}
 80118f0:	b086      	sub	sp, #24
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	60f8      	str	r0, [r7, #12]
 80118f6:	460b      	mov	r3, r1
 80118f8:	607a      	str	r2, [r7, #4]
 80118fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80118fc:	7afb      	ldrb	r3, [r7, #11]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d16f      	bne.n	80119e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	3314      	adds	r3, #20
 8011906:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801190e:	2b02      	cmp	r3, #2
 8011910:	d15a      	bne.n	80119c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	689a      	ldr	r2, [r3, #8]
 8011916:	693b      	ldr	r3, [r7, #16]
 8011918:	68db      	ldr	r3, [r3, #12]
 801191a:	429a      	cmp	r2, r3
 801191c:	d914      	bls.n	8011948 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	689a      	ldr	r2, [r3, #8]
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	68db      	ldr	r3, [r3, #12]
 8011926:	1ad2      	subs	r2, r2, r3
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	689b      	ldr	r3, [r3, #8]
 8011930:	461a      	mov	r2, r3
 8011932:	6879      	ldr	r1, [r7, #4]
 8011934:	68f8      	ldr	r0, [r7, #12]
 8011936:	f001 f8b2 	bl	8012a9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801193a:	2300      	movs	r3, #0
 801193c:	2200      	movs	r2, #0
 801193e:	2100      	movs	r1, #0
 8011940:	68f8      	ldr	r0, [r7, #12]
 8011942:	f005 f87d 	bl	8016a40 <USBD_LL_PrepareReceive>
 8011946:	e03f      	b.n	80119c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	68da      	ldr	r2, [r3, #12]
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	689b      	ldr	r3, [r3, #8]
 8011950:	429a      	cmp	r2, r3
 8011952:	d11c      	bne.n	801198e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	685a      	ldr	r2, [r3, #4]
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801195c:	429a      	cmp	r2, r3
 801195e:	d316      	bcc.n	801198e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011960:	693b      	ldr	r3, [r7, #16]
 8011962:	685a      	ldr	r2, [r3, #4]
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801196a:	429a      	cmp	r2, r3
 801196c:	d20f      	bcs.n	801198e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801196e:	2200      	movs	r2, #0
 8011970:	2100      	movs	r1, #0
 8011972:	68f8      	ldr	r0, [r7, #12]
 8011974:	f001 f893 	bl	8012a9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	2200      	movs	r2, #0
 801197c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011980:	2300      	movs	r3, #0
 8011982:	2200      	movs	r2, #0
 8011984:	2100      	movs	r1, #0
 8011986:	68f8      	ldr	r0, [r7, #12]
 8011988:	f005 f85a 	bl	8016a40 <USBD_LL_PrepareReceive>
 801198c:	e01c      	b.n	80119c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011994:	b2db      	uxtb	r3, r3
 8011996:	2b03      	cmp	r3, #3
 8011998:	d10f      	bne.n	80119ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119a0:	68db      	ldr	r3, [r3, #12]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d009      	beq.n	80119ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	2200      	movs	r2, #0
 80119aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119b4:	68db      	ldr	r3, [r3, #12]
 80119b6:	68f8      	ldr	r0, [r7, #12]
 80119b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80119ba:	2180      	movs	r1, #128	; 0x80
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	f004 ff95 	bl	80168ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80119c2:	68f8      	ldr	r0, [r7, #12]
 80119c4:	f001 f8bd 	bl	8012b42 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d03a      	beq.n	8011a48 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80119d2:	68f8      	ldr	r0, [r7, #12]
 80119d4:	f7ff fe42 	bl	801165c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	2200      	movs	r2, #0
 80119dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80119e0:	e032      	b.n	8011a48 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80119e2:	7afb      	ldrb	r3, [r7, #11]
 80119e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119e8:	b2db      	uxtb	r3, r3
 80119ea:	4619      	mov	r1, r3
 80119ec:	68f8      	ldr	r0, [r7, #12]
 80119ee:	f000 f985 	bl	8011cfc <USBD_CoreFindEP>
 80119f2:	4603      	mov	r3, r0
 80119f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80119f6:	7dfb      	ldrb	r3, [r7, #23]
 80119f8:	2bff      	cmp	r3, #255	; 0xff
 80119fa:	d025      	beq.n	8011a48 <USBD_LL_DataInStage+0x15a>
 80119fc:	7dfb      	ldrb	r3, [r7, #23]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d122      	bne.n	8011a48 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a08:	b2db      	uxtb	r3, r3
 8011a0a:	2b03      	cmp	r3, #3
 8011a0c:	d11c      	bne.n	8011a48 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011a0e:	7dfa      	ldrb	r2, [r7, #23]
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	32ae      	adds	r2, #174	; 0xae
 8011a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a18:	695b      	ldr	r3, [r3, #20]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d014      	beq.n	8011a48 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011a1e:	7dfa      	ldrb	r2, [r7, #23]
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011a26:	7dfa      	ldrb	r2, [r7, #23]
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	32ae      	adds	r2, #174	; 0xae
 8011a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a30:	695b      	ldr	r3, [r3, #20]
 8011a32:	7afa      	ldrb	r2, [r7, #11]
 8011a34:	4611      	mov	r1, r2
 8011a36:	68f8      	ldr	r0, [r7, #12]
 8011a38:	4798      	blx	r3
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011a3e:	7dbb      	ldrb	r3, [r7, #22]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d001      	beq.n	8011a48 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011a44:	7dbb      	ldrb	r3, [r7, #22]
 8011a46:	e000      	b.n	8011a4a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011a48:	2300      	movs	r3, #0
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3718      	adds	r7, #24
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}

08011a52 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b084      	sub	sp, #16
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2201      	movs	r2, #1
 8011a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2200      	movs	r2, #0
 8011a72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2200      	movs	r2, #0
 8011a78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d014      	beq.n	8011ab8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a94:	685b      	ldr	r3, [r3, #4]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d00e      	beq.n	8011ab8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	687a      	ldr	r2, [r7, #4]
 8011aa4:	6852      	ldr	r2, [r2, #4]
 8011aa6:	b2d2      	uxtb	r2, r2
 8011aa8:	4611      	mov	r1, r2
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	4798      	blx	r3
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d001      	beq.n	8011ab8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011ab4:	2303      	movs	r3, #3
 8011ab6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ab8:	2340      	movs	r3, #64	; 0x40
 8011aba:	2200      	movs	r2, #0
 8011abc:	2100      	movs	r1, #0
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f004 fecf 	bl	8016862 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2240      	movs	r2, #64	; 0x40
 8011ad0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ad4:	2340      	movs	r3, #64	; 0x40
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	2180      	movs	r1, #128	; 0x80
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f004 fec1 	bl	8016862 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2201      	movs	r2, #1
 8011ae4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2240      	movs	r2, #64	; 0x40
 8011aea:	621a      	str	r2, [r3, #32]

  return ret;
 8011aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3710      	adds	r7, #16
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}

08011af6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011af6:	b480      	push	{r7}
 8011af8:	b083      	sub	sp, #12
 8011afa:	af00      	add	r7, sp, #0
 8011afc:	6078      	str	r0, [r7, #4]
 8011afe:	460b      	mov	r3, r1
 8011b00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	78fa      	ldrb	r2, [r7, #3]
 8011b06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011b08:	2300      	movs	r3, #0
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	370c      	adds	r7, #12
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr

08011b16 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011b16:	b480      	push	{r7}
 8011b18:	b083      	sub	sp, #12
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b24:	b2db      	uxtb	r3, r3
 8011b26:	2b04      	cmp	r3, #4
 8011b28:	d006      	beq.n	8011b38 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b30:	b2da      	uxtb	r2, r3
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2204      	movs	r2, #4
 8011b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011b40:	2300      	movs	r3, #0
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	370c      	adds	r7, #12
 8011b46:	46bd      	mov	sp, r7
 8011b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4c:	4770      	bx	lr

08011b4e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011b4e:	b480      	push	{r7}
 8011b50:	b083      	sub	sp, #12
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	2b04      	cmp	r3, #4
 8011b60:	d106      	bne.n	8011b70 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011b68:	b2da      	uxtb	r2, r3
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011b70:	2300      	movs	r3, #0
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	370c      	adds	r7, #12
 8011b76:	46bd      	mov	sp, r7
 8011b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7c:	4770      	bx	lr

08011b7e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011b7e:	b580      	push	{r7, lr}
 8011b80:	b082      	sub	sp, #8
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b8c:	b2db      	uxtb	r3, r3
 8011b8e:	2b03      	cmp	r3, #3
 8011b90:	d110      	bne.n	8011bb4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d00b      	beq.n	8011bb4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ba2:	69db      	ldr	r3, [r3, #28]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d005      	beq.n	8011bb4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bae:	69db      	ldr	r3, [r3, #28]
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011bb4:	2300      	movs	r3, #0
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3708      	adds	r7, #8
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}

08011bbe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011bbe:	b580      	push	{r7, lr}
 8011bc0:	b082      	sub	sp, #8
 8011bc2:	af00      	add	r7, sp, #0
 8011bc4:	6078      	str	r0, [r7, #4]
 8011bc6:	460b      	mov	r3, r1
 8011bc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	32ae      	adds	r2, #174	; 0xae
 8011bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d101      	bne.n	8011be0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011bdc:	2303      	movs	r3, #3
 8011bde:	e01c      	b.n	8011c1a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011be6:	b2db      	uxtb	r3, r3
 8011be8:	2b03      	cmp	r3, #3
 8011bea:	d115      	bne.n	8011c18 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	32ae      	adds	r2, #174	; 0xae
 8011bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bfa:	6a1b      	ldr	r3, [r3, #32]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d00b      	beq.n	8011c18 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	32ae      	adds	r2, #174	; 0xae
 8011c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c0e:	6a1b      	ldr	r3, [r3, #32]
 8011c10:	78fa      	ldrb	r2, [r7, #3]
 8011c12:	4611      	mov	r1, r2
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011c18:	2300      	movs	r3, #0
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3708      	adds	r7, #8
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}

08011c22 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b082      	sub	sp, #8
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	32ae      	adds	r2, #174	; 0xae
 8011c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d101      	bne.n	8011c44 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011c40:	2303      	movs	r3, #3
 8011c42:	e01c      	b.n	8011c7e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c4a:	b2db      	uxtb	r3, r3
 8011c4c:	2b03      	cmp	r3, #3
 8011c4e:	d115      	bne.n	8011c7c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	32ae      	adds	r2, #174	; 0xae
 8011c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d00b      	beq.n	8011c7c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	32ae      	adds	r2, #174	; 0xae
 8011c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c74:	78fa      	ldrb	r2, [r7, #3]
 8011c76:	4611      	mov	r1, r2
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011c7c:	2300      	movs	r3, #0
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3708      	adds	r7, #8
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}

08011c86 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011c86:	b480      	push	{r7}
 8011c88:	b083      	sub	sp, #12
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011c8e:	2300      	movs	r3, #0
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	370c      	adds	r7, #12
 8011c94:	46bd      	mov	sp, r7
 8011c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9a:	4770      	bx	lr

08011c9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b084      	sub	sp, #16
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2201      	movs	r2, #1
 8011cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d00e      	beq.n	8011cd8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cc0:	685b      	ldr	r3, [r3, #4]
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	6852      	ldr	r2, [r2, #4]
 8011cc6:	b2d2      	uxtb	r2, r2
 8011cc8:	4611      	mov	r1, r2
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	4798      	blx	r3
 8011cce:	4603      	mov	r3, r0
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d001      	beq.n	8011cd8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011cd4:	2303      	movs	r3, #3
 8011cd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3710      	adds	r7, #16
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}

08011ce2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011ce2:	b480      	push	{r7}
 8011ce4:	b083      	sub	sp, #12
 8011ce6:	af00      	add	r7, sp, #0
 8011ce8:	6078      	str	r0, [r7, #4]
 8011cea:	460b      	mov	r3, r1
 8011cec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011cee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	370c      	adds	r7, #12
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr

08011cfc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	b083      	sub	sp, #12
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	460b      	mov	r3, r1
 8011d06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011d08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	370c      	adds	r7, #12
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d14:	4770      	bx	lr

08011d16 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011d16:	b580      	push	{r7, lr}
 8011d18:	b086      	sub	sp, #24
 8011d1a:	af00      	add	r7, sp, #0
 8011d1c:	6078      	str	r0, [r7, #4]
 8011d1e:	460b      	mov	r3, r1
 8011d20:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	885b      	ldrh	r3, [r3, #2]
 8011d32:	b29a      	uxth	r2, r3
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	d920      	bls.n	8011d80 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	781b      	ldrb	r3, [r3, #0]
 8011d42:	b29b      	uxth	r3, r3
 8011d44:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011d46:	e013      	b.n	8011d70 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011d48:	f107 030a 	add.w	r3, r7, #10
 8011d4c:	4619      	mov	r1, r3
 8011d4e:	6978      	ldr	r0, [r7, #20]
 8011d50:	f000 f81b 	bl	8011d8a <USBD_GetNextDesc>
 8011d54:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	785b      	ldrb	r3, [r3, #1]
 8011d5a:	2b05      	cmp	r3, #5
 8011d5c:	d108      	bne.n	8011d70 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	789b      	ldrb	r3, [r3, #2]
 8011d66:	78fa      	ldrb	r2, [r7, #3]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d008      	beq.n	8011d7e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	885b      	ldrh	r3, [r3, #2]
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	897b      	ldrh	r3, [r7, #10]
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d8e5      	bhi.n	8011d48 <USBD_GetEpDesc+0x32>
 8011d7c:	e000      	b.n	8011d80 <USBD_GetEpDesc+0x6a>
          break;
 8011d7e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011d80:	693b      	ldr	r3, [r7, #16]
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	3718      	adds	r7, #24
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}

08011d8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011d8a:	b480      	push	{r7}
 8011d8c:	b085      	sub	sp, #20
 8011d8e:	af00      	add	r7, sp, #0
 8011d90:	6078      	str	r0, [r7, #4]
 8011d92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	881a      	ldrh	r2, [r3, #0]
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	b29b      	uxth	r3, r3
 8011da2:	4413      	add	r3, r2
 8011da4:	b29a      	uxth	r2, r3
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	461a      	mov	r2, r3
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	4413      	add	r3, r2
 8011db4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011db6:	68fb      	ldr	r3, [r7, #12]
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3714      	adds	r7, #20
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc2:	4770      	bx	lr

08011dc4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b087      	sub	sp, #28
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	3301      	adds	r3, #1
 8011dda:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	781b      	ldrb	r3, [r3, #0]
 8011de0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011de2:	8a3b      	ldrh	r3, [r7, #16]
 8011de4:	021b      	lsls	r3, r3, #8
 8011de6:	b21a      	sxth	r2, r3
 8011de8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011dec:	4313      	orrs	r3, r2
 8011dee:	b21b      	sxth	r3, r3
 8011df0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011df2:	89fb      	ldrh	r3, [r7, #14]
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	371c      	adds	r7, #28
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfe:	4770      	bx	lr

08011e00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011e16:	2b40      	cmp	r3, #64	; 0x40
 8011e18:	d005      	beq.n	8011e26 <USBD_StdDevReq+0x26>
 8011e1a:	2b40      	cmp	r3, #64	; 0x40
 8011e1c:	d857      	bhi.n	8011ece <USBD_StdDevReq+0xce>
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d00f      	beq.n	8011e42 <USBD_StdDevReq+0x42>
 8011e22:	2b20      	cmp	r3, #32
 8011e24:	d153      	bne.n	8011ece <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	32ae      	adds	r2, #174	; 0xae
 8011e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e34:	689b      	ldr	r3, [r3, #8]
 8011e36:	6839      	ldr	r1, [r7, #0]
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	4798      	blx	r3
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8011e40:	e04a      	b.n	8011ed8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	785b      	ldrb	r3, [r3, #1]
 8011e46:	2b09      	cmp	r3, #9
 8011e48:	d83b      	bhi.n	8011ec2 <USBD_StdDevReq+0xc2>
 8011e4a:	a201      	add	r2, pc, #4	; (adr r2, 8011e50 <USBD_StdDevReq+0x50>)
 8011e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e50:	08011ea5 	.word	0x08011ea5
 8011e54:	08011eb9 	.word	0x08011eb9
 8011e58:	08011ec3 	.word	0x08011ec3
 8011e5c:	08011eaf 	.word	0x08011eaf
 8011e60:	08011ec3 	.word	0x08011ec3
 8011e64:	08011e83 	.word	0x08011e83
 8011e68:	08011e79 	.word	0x08011e79
 8011e6c:	08011ec3 	.word	0x08011ec3
 8011e70:	08011e9b 	.word	0x08011e9b
 8011e74:	08011e8d 	.word	0x08011e8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011e78:	6839      	ldr	r1, [r7, #0]
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f000 fa3c 	bl	80122f8 <USBD_GetDescriptor>
          break;
 8011e80:	e024      	b.n	8011ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011e82:	6839      	ldr	r1, [r7, #0]
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f000 fba1 	bl	80125cc <USBD_SetAddress>
          break;
 8011e8a:	e01f      	b.n	8011ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011e8c:	6839      	ldr	r1, [r7, #0]
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 fbe0 	bl	8012654 <USBD_SetConfig>
 8011e94:	4603      	mov	r3, r0
 8011e96:	73fb      	strb	r3, [r7, #15]
          break;
 8011e98:	e018      	b.n	8011ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011e9a:	6839      	ldr	r1, [r7, #0]
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f000 fc83 	bl	80127a8 <USBD_GetConfig>
          break;
 8011ea2:	e013      	b.n	8011ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011ea4:	6839      	ldr	r1, [r7, #0]
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f000 fcb4 	bl	8012814 <USBD_GetStatus>
          break;
 8011eac:	e00e      	b.n	8011ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011eae:	6839      	ldr	r1, [r7, #0]
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f000 fce3 	bl	801287c <USBD_SetFeature>
          break;
 8011eb6:	e009      	b.n	8011ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011eb8:	6839      	ldr	r1, [r7, #0]
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f000 fd07 	bl	80128ce <USBD_ClrFeature>
          break;
 8011ec0:	e004      	b.n	8011ecc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011ec2:	6839      	ldr	r1, [r7, #0]
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f000 fd5e 	bl	8012986 <USBD_CtlError>
          break;
 8011eca:	bf00      	nop
      }
      break;
 8011ecc:	e004      	b.n	8011ed8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011ece:	6839      	ldr	r1, [r7, #0]
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f000 fd58 	bl	8012986 <USBD_CtlError>
      break;
 8011ed6:	bf00      	nop
  }

  return ret;
 8011ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3710      	adds	r7, #16
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}
 8011ee2:	bf00      	nop

08011ee4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011efa:	2b40      	cmp	r3, #64	; 0x40
 8011efc:	d005      	beq.n	8011f0a <USBD_StdItfReq+0x26>
 8011efe:	2b40      	cmp	r3, #64	; 0x40
 8011f00:	d852      	bhi.n	8011fa8 <USBD_StdItfReq+0xc4>
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d001      	beq.n	8011f0a <USBD_StdItfReq+0x26>
 8011f06:	2b20      	cmp	r3, #32
 8011f08:	d14e      	bne.n	8011fa8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	3b01      	subs	r3, #1
 8011f14:	2b02      	cmp	r3, #2
 8011f16:	d840      	bhi.n	8011f9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	889b      	ldrh	r3, [r3, #4]
 8011f1c:	b2db      	uxtb	r3, r3
 8011f1e:	2b01      	cmp	r3, #1
 8011f20:	d836      	bhi.n	8011f90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	889b      	ldrh	r3, [r3, #4]
 8011f26:	b2db      	uxtb	r3, r3
 8011f28:	4619      	mov	r1, r3
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f7ff fed9 	bl	8011ce2 <USBD_CoreFindIF>
 8011f30:	4603      	mov	r3, r0
 8011f32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011f34:	7bbb      	ldrb	r3, [r7, #14]
 8011f36:	2bff      	cmp	r3, #255	; 0xff
 8011f38:	d01d      	beq.n	8011f76 <USBD_StdItfReq+0x92>
 8011f3a:	7bbb      	ldrb	r3, [r7, #14]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d11a      	bne.n	8011f76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011f40:	7bba      	ldrb	r2, [r7, #14]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	32ae      	adds	r2, #174	; 0xae
 8011f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f4a:	689b      	ldr	r3, [r3, #8]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d00f      	beq.n	8011f70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011f50:	7bba      	ldrb	r2, [r7, #14]
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011f58:	7bba      	ldrb	r2, [r7, #14]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	32ae      	adds	r2, #174	; 0xae
 8011f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f62:	689b      	ldr	r3, [r3, #8]
 8011f64:	6839      	ldr	r1, [r7, #0]
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	4798      	blx	r3
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011f6e:	e004      	b.n	8011f7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011f70:	2303      	movs	r3, #3
 8011f72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011f74:	e001      	b.n	8011f7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011f76:	2303      	movs	r3, #3
 8011f78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	88db      	ldrh	r3, [r3, #6]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d110      	bne.n	8011fa4 <USBD_StdItfReq+0xc0>
 8011f82:	7bfb      	ldrb	r3, [r7, #15]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d10d      	bne.n	8011fa4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f000 fdc7 	bl	8012b1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011f8e:	e009      	b.n	8011fa4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011f90:	6839      	ldr	r1, [r7, #0]
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f000 fcf7 	bl	8012986 <USBD_CtlError>
          break;
 8011f98:	e004      	b.n	8011fa4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011f9a:	6839      	ldr	r1, [r7, #0]
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f000 fcf2 	bl	8012986 <USBD_CtlError>
          break;
 8011fa2:	e000      	b.n	8011fa6 <USBD_StdItfReq+0xc2>
          break;
 8011fa4:	bf00      	nop
      }
      break;
 8011fa6:	e004      	b.n	8011fb2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011fa8:	6839      	ldr	r1, [r7, #0]
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f000 fceb 	bl	8012986 <USBD_CtlError>
      break;
 8011fb0:	bf00      	nop
  }

  return ret;
 8011fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3710      	adds	r7, #16
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b084      	sub	sp, #16
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	889b      	ldrh	r3, [r3, #4]
 8011fce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	781b      	ldrb	r3, [r3, #0]
 8011fd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011fd8:	2b40      	cmp	r3, #64	; 0x40
 8011fda:	d007      	beq.n	8011fec <USBD_StdEPReq+0x30>
 8011fdc:	2b40      	cmp	r3, #64	; 0x40
 8011fde:	f200 817f 	bhi.w	80122e0 <USBD_StdEPReq+0x324>
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d02a      	beq.n	801203c <USBD_StdEPReq+0x80>
 8011fe6:	2b20      	cmp	r3, #32
 8011fe8:	f040 817a 	bne.w	80122e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011fec:	7bbb      	ldrb	r3, [r7, #14]
 8011fee:	4619      	mov	r1, r3
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7ff fe83 	bl	8011cfc <USBD_CoreFindEP>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011ffa:	7b7b      	ldrb	r3, [r7, #13]
 8011ffc:	2bff      	cmp	r3, #255	; 0xff
 8011ffe:	f000 8174 	beq.w	80122ea <USBD_StdEPReq+0x32e>
 8012002:	7b7b      	ldrb	r3, [r7, #13]
 8012004:	2b00      	cmp	r3, #0
 8012006:	f040 8170 	bne.w	80122ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801200a:	7b7a      	ldrb	r2, [r7, #13]
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012012:	7b7a      	ldrb	r2, [r7, #13]
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	32ae      	adds	r2, #174	; 0xae
 8012018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801201c:	689b      	ldr	r3, [r3, #8]
 801201e:	2b00      	cmp	r3, #0
 8012020:	f000 8163 	beq.w	80122ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012024:	7b7a      	ldrb	r2, [r7, #13]
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	32ae      	adds	r2, #174	; 0xae
 801202a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801202e:	689b      	ldr	r3, [r3, #8]
 8012030:	6839      	ldr	r1, [r7, #0]
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	4798      	blx	r3
 8012036:	4603      	mov	r3, r0
 8012038:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801203a:	e156      	b.n	80122ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	785b      	ldrb	r3, [r3, #1]
 8012040:	2b03      	cmp	r3, #3
 8012042:	d008      	beq.n	8012056 <USBD_StdEPReq+0x9a>
 8012044:	2b03      	cmp	r3, #3
 8012046:	f300 8145 	bgt.w	80122d4 <USBD_StdEPReq+0x318>
 801204a:	2b00      	cmp	r3, #0
 801204c:	f000 809b 	beq.w	8012186 <USBD_StdEPReq+0x1ca>
 8012050:	2b01      	cmp	r3, #1
 8012052:	d03c      	beq.n	80120ce <USBD_StdEPReq+0x112>
 8012054:	e13e      	b.n	80122d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801205c:	b2db      	uxtb	r3, r3
 801205e:	2b02      	cmp	r3, #2
 8012060:	d002      	beq.n	8012068 <USBD_StdEPReq+0xac>
 8012062:	2b03      	cmp	r3, #3
 8012064:	d016      	beq.n	8012094 <USBD_StdEPReq+0xd8>
 8012066:	e02c      	b.n	80120c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012068:	7bbb      	ldrb	r3, [r7, #14]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d00d      	beq.n	801208a <USBD_StdEPReq+0xce>
 801206e:	7bbb      	ldrb	r3, [r7, #14]
 8012070:	2b80      	cmp	r3, #128	; 0x80
 8012072:	d00a      	beq.n	801208a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012074:	7bbb      	ldrb	r3, [r7, #14]
 8012076:	4619      	mov	r1, r3
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f004 fc37 	bl	80168ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801207e:	2180      	movs	r1, #128	; 0x80
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f004 fc33 	bl	80168ec <USBD_LL_StallEP>
 8012086:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012088:	e020      	b.n	80120cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801208a:	6839      	ldr	r1, [r7, #0]
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f000 fc7a 	bl	8012986 <USBD_CtlError>
              break;
 8012092:	e01b      	b.n	80120cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	885b      	ldrh	r3, [r3, #2]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d10e      	bne.n	80120ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801209c:	7bbb      	ldrb	r3, [r7, #14]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d00b      	beq.n	80120ba <USBD_StdEPReq+0xfe>
 80120a2:	7bbb      	ldrb	r3, [r7, #14]
 80120a4:	2b80      	cmp	r3, #128	; 0x80
 80120a6:	d008      	beq.n	80120ba <USBD_StdEPReq+0xfe>
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	88db      	ldrh	r3, [r3, #6]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d104      	bne.n	80120ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80120b0:	7bbb      	ldrb	r3, [r7, #14]
 80120b2:	4619      	mov	r1, r3
 80120b4:	6878      	ldr	r0, [r7, #4]
 80120b6:	f004 fc19 	bl	80168ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f000 fd2e 	bl	8012b1c <USBD_CtlSendStatus>

              break;
 80120c0:	e004      	b.n	80120cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80120c2:	6839      	ldr	r1, [r7, #0]
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f000 fc5e 	bl	8012986 <USBD_CtlError>
              break;
 80120ca:	bf00      	nop
          }
          break;
 80120cc:	e107      	b.n	80122de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	2b02      	cmp	r3, #2
 80120d8:	d002      	beq.n	80120e0 <USBD_StdEPReq+0x124>
 80120da:	2b03      	cmp	r3, #3
 80120dc:	d016      	beq.n	801210c <USBD_StdEPReq+0x150>
 80120de:	e04b      	b.n	8012178 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80120e0:	7bbb      	ldrb	r3, [r7, #14]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d00d      	beq.n	8012102 <USBD_StdEPReq+0x146>
 80120e6:	7bbb      	ldrb	r3, [r7, #14]
 80120e8:	2b80      	cmp	r3, #128	; 0x80
 80120ea:	d00a      	beq.n	8012102 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80120ec:	7bbb      	ldrb	r3, [r7, #14]
 80120ee:	4619      	mov	r1, r3
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f004 fbfb 	bl	80168ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80120f6:	2180      	movs	r1, #128	; 0x80
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	f004 fbf7 	bl	80168ec <USBD_LL_StallEP>
 80120fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012100:	e040      	b.n	8012184 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012102:	6839      	ldr	r1, [r7, #0]
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f000 fc3e 	bl	8012986 <USBD_CtlError>
              break;
 801210a:	e03b      	b.n	8012184 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	885b      	ldrh	r3, [r3, #2]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d136      	bne.n	8012182 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012114:	7bbb      	ldrb	r3, [r7, #14]
 8012116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801211a:	2b00      	cmp	r3, #0
 801211c:	d004      	beq.n	8012128 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801211e:	7bbb      	ldrb	r3, [r7, #14]
 8012120:	4619      	mov	r1, r3
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f004 fc01 	bl	801692a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f000 fcf7 	bl	8012b1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801212e:	7bbb      	ldrb	r3, [r7, #14]
 8012130:	4619      	mov	r1, r3
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f7ff fde2 	bl	8011cfc <USBD_CoreFindEP>
 8012138:	4603      	mov	r3, r0
 801213a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801213c:	7b7b      	ldrb	r3, [r7, #13]
 801213e:	2bff      	cmp	r3, #255	; 0xff
 8012140:	d01f      	beq.n	8012182 <USBD_StdEPReq+0x1c6>
 8012142:	7b7b      	ldrb	r3, [r7, #13]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d11c      	bne.n	8012182 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012148:	7b7a      	ldrb	r2, [r7, #13]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012150:	7b7a      	ldrb	r2, [r7, #13]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	32ae      	adds	r2, #174	; 0xae
 8012156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801215a:	689b      	ldr	r3, [r3, #8]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d010      	beq.n	8012182 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012160:	7b7a      	ldrb	r2, [r7, #13]
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	32ae      	adds	r2, #174	; 0xae
 8012166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801216a:	689b      	ldr	r3, [r3, #8]
 801216c:	6839      	ldr	r1, [r7, #0]
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	4798      	blx	r3
 8012172:	4603      	mov	r3, r0
 8012174:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012176:	e004      	b.n	8012182 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012178:	6839      	ldr	r1, [r7, #0]
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f000 fc03 	bl	8012986 <USBD_CtlError>
              break;
 8012180:	e000      	b.n	8012184 <USBD_StdEPReq+0x1c8>
              break;
 8012182:	bf00      	nop
          }
          break;
 8012184:	e0ab      	b.n	80122de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801218c:	b2db      	uxtb	r3, r3
 801218e:	2b02      	cmp	r3, #2
 8012190:	d002      	beq.n	8012198 <USBD_StdEPReq+0x1dc>
 8012192:	2b03      	cmp	r3, #3
 8012194:	d032      	beq.n	80121fc <USBD_StdEPReq+0x240>
 8012196:	e097      	b.n	80122c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012198:	7bbb      	ldrb	r3, [r7, #14]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d007      	beq.n	80121ae <USBD_StdEPReq+0x1f2>
 801219e:	7bbb      	ldrb	r3, [r7, #14]
 80121a0:	2b80      	cmp	r3, #128	; 0x80
 80121a2:	d004      	beq.n	80121ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80121a4:	6839      	ldr	r1, [r7, #0]
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	f000 fbed 	bl	8012986 <USBD_CtlError>
                break;
 80121ac:	e091      	b.n	80122d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80121ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	da0b      	bge.n	80121ce <USBD_StdEPReq+0x212>
 80121b6:	7bbb      	ldrb	r3, [r7, #14]
 80121b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80121bc:	4613      	mov	r3, r2
 80121be:	009b      	lsls	r3, r3, #2
 80121c0:	4413      	add	r3, r2
 80121c2:	009b      	lsls	r3, r3, #2
 80121c4:	3310      	adds	r3, #16
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	4413      	add	r3, r2
 80121ca:	3304      	adds	r3, #4
 80121cc:	e00b      	b.n	80121e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80121ce:	7bbb      	ldrb	r3, [r7, #14]
 80121d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80121d4:	4613      	mov	r3, r2
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	4413      	add	r3, r2
 80121da:	009b      	lsls	r3, r3, #2
 80121dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	4413      	add	r3, r2
 80121e4:	3304      	adds	r3, #4
 80121e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	2200      	movs	r2, #0
 80121ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	2202      	movs	r2, #2
 80121f2:	4619      	mov	r1, r3
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f000 fc37 	bl	8012a68 <USBD_CtlSendData>
              break;
 80121fa:	e06a      	b.n	80122d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80121fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012200:	2b00      	cmp	r3, #0
 8012202:	da11      	bge.n	8012228 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012204:	7bbb      	ldrb	r3, [r7, #14]
 8012206:	f003 020f 	and.w	r2, r3, #15
 801220a:	6879      	ldr	r1, [r7, #4]
 801220c:	4613      	mov	r3, r2
 801220e:	009b      	lsls	r3, r3, #2
 8012210:	4413      	add	r3, r2
 8012212:	009b      	lsls	r3, r3, #2
 8012214:	440b      	add	r3, r1
 8012216:	3324      	adds	r3, #36	; 0x24
 8012218:	881b      	ldrh	r3, [r3, #0]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d117      	bne.n	801224e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801221e:	6839      	ldr	r1, [r7, #0]
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f000 fbb0 	bl	8012986 <USBD_CtlError>
                  break;
 8012226:	e054      	b.n	80122d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012228:	7bbb      	ldrb	r3, [r7, #14]
 801222a:	f003 020f 	and.w	r2, r3, #15
 801222e:	6879      	ldr	r1, [r7, #4]
 8012230:	4613      	mov	r3, r2
 8012232:	009b      	lsls	r3, r3, #2
 8012234:	4413      	add	r3, r2
 8012236:	009b      	lsls	r3, r3, #2
 8012238:	440b      	add	r3, r1
 801223a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801223e:	881b      	ldrh	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d104      	bne.n	801224e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012244:	6839      	ldr	r1, [r7, #0]
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 fb9d 	bl	8012986 <USBD_CtlError>
                  break;
 801224c:	e041      	b.n	80122d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801224e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012252:	2b00      	cmp	r3, #0
 8012254:	da0b      	bge.n	801226e <USBD_StdEPReq+0x2b2>
 8012256:	7bbb      	ldrb	r3, [r7, #14]
 8012258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801225c:	4613      	mov	r3, r2
 801225e:	009b      	lsls	r3, r3, #2
 8012260:	4413      	add	r3, r2
 8012262:	009b      	lsls	r3, r3, #2
 8012264:	3310      	adds	r3, #16
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	4413      	add	r3, r2
 801226a:	3304      	adds	r3, #4
 801226c:	e00b      	b.n	8012286 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801226e:	7bbb      	ldrb	r3, [r7, #14]
 8012270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012274:	4613      	mov	r3, r2
 8012276:	009b      	lsls	r3, r3, #2
 8012278:	4413      	add	r3, r2
 801227a:	009b      	lsls	r3, r3, #2
 801227c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012280:	687a      	ldr	r2, [r7, #4]
 8012282:	4413      	add	r3, r2
 8012284:	3304      	adds	r3, #4
 8012286:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012288:	7bbb      	ldrb	r3, [r7, #14]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d002      	beq.n	8012294 <USBD_StdEPReq+0x2d8>
 801228e:	7bbb      	ldrb	r3, [r7, #14]
 8012290:	2b80      	cmp	r3, #128	; 0x80
 8012292:	d103      	bne.n	801229c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	2200      	movs	r2, #0
 8012298:	601a      	str	r2, [r3, #0]
 801229a:	e00e      	b.n	80122ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801229c:	7bbb      	ldrb	r3, [r7, #14]
 801229e:	4619      	mov	r1, r3
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f004 fb61 	bl	8016968 <USBD_LL_IsStallEP>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d003      	beq.n	80122b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	2201      	movs	r2, #1
 80122b0:	601a      	str	r2, [r3, #0]
 80122b2:	e002      	b.n	80122ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	2200      	movs	r2, #0
 80122b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	2202      	movs	r2, #2
 80122be:	4619      	mov	r1, r3
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f000 fbd1 	bl	8012a68 <USBD_CtlSendData>
              break;
 80122c6:	e004      	b.n	80122d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80122c8:	6839      	ldr	r1, [r7, #0]
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 fb5b 	bl	8012986 <USBD_CtlError>
              break;
 80122d0:	bf00      	nop
          }
          break;
 80122d2:	e004      	b.n	80122de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80122d4:	6839      	ldr	r1, [r7, #0]
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 fb55 	bl	8012986 <USBD_CtlError>
          break;
 80122dc:	bf00      	nop
      }
      break;
 80122de:	e005      	b.n	80122ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80122e0:	6839      	ldr	r1, [r7, #0]
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f000 fb4f 	bl	8012986 <USBD_CtlError>
      break;
 80122e8:	e000      	b.n	80122ec <USBD_StdEPReq+0x330>
      break;
 80122ea:	bf00      	nop
  }

  return ret;
 80122ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3710      	adds	r7, #16
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
	...

080122f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012302:	2300      	movs	r3, #0
 8012304:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012306:	2300      	movs	r3, #0
 8012308:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801230a:	2300      	movs	r3, #0
 801230c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	885b      	ldrh	r3, [r3, #2]
 8012312:	0a1b      	lsrs	r3, r3, #8
 8012314:	b29b      	uxth	r3, r3
 8012316:	3b01      	subs	r3, #1
 8012318:	2b06      	cmp	r3, #6
 801231a:	f200 8128 	bhi.w	801256e <USBD_GetDescriptor+0x276>
 801231e:	a201      	add	r2, pc, #4	; (adr r2, 8012324 <USBD_GetDescriptor+0x2c>)
 8012320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012324:	08012341 	.word	0x08012341
 8012328:	08012359 	.word	0x08012359
 801232c:	08012399 	.word	0x08012399
 8012330:	0801256f 	.word	0x0801256f
 8012334:	0801256f 	.word	0x0801256f
 8012338:	0801250f 	.word	0x0801250f
 801233c:	0801253b 	.word	0x0801253b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	687a      	ldr	r2, [r7, #4]
 801234a:	7c12      	ldrb	r2, [r2, #16]
 801234c:	f107 0108 	add.w	r1, r7, #8
 8012350:	4610      	mov	r0, r2
 8012352:	4798      	blx	r3
 8012354:	60f8      	str	r0, [r7, #12]
      break;
 8012356:	e112      	b.n	801257e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	7c1b      	ldrb	r3, [r3, #16]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d10d      	bne.n	801237c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012368:	f107 0208 	add.w	r2, r7, #8
 801236c:	4610      	mov	r0, r2
 801236e:	4798      	blx	r3
 8012370:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	3301      	adds	r3, #1
 8012376:	2202      	movs	r2, #2
 8012378:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801237a:	e100      	b.n	801257e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012384:	f107 0208 	add.w	r2, r7, #8
 8012388:	4610      	mov	r0, r2
 801238a:	4798      	blx	r3
 801238c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	3301      	adds	r3, #1
 8012392:	2202      	movs	r2, #2
 8012394:	701a      	strb	r2, [r3, #0]
      break;
 8012396:	e0f2      	b.n	801257e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	885b      	ldrh	r3, [r3, #2]
 801239c:	b2db      	uxtb	r3, r3
 801239e:	2b05      	cmp	r3, #5
 80123a0:	f200 80ac 	bhi.w	80124fc <USBD_GetDescriptor+0x204>
 80123a4:	a201      	add	r2, pc, #4	; (adr r2, 80123ac <USBD_GetDescriptor+0xb4>)
 80123a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123aa:	bf00      	nop
 80123ac:	080123c5 	.word	0x080123c5
 80123b0:	080123f9 	.word	0x080123f9
 80123b4:	0801242d 	.word	0x0801242d
 80123b8:	08012461 	.word	0x08012461
 80123bc:	08012495 	.word	0x08012495
 80123c0:	080124c9 	.word	0x080124c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123ca:	685b      	ldr	r3, [r3, #4]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d00b      	beq.n	80123e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123d6:	685b      	ldr	r3, [r3, #4]
 80123d8:	687a      	ldr	r2, [r7, #4]
 80123da:	7c12      	ldrb	r2, [r2, #16]
 80123dc:	f107 0108 	add.w	r1, r7, #8
 80123e0:	4610      	mov	r0, r2
 80123e2:	4798      	blx	r3
 80123e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80123e6:	e091      	b.n	801250c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80123e8:	6839      	ldr	r1, [r7, #0]
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f000 facb 	bl	8012986 <USBD_CtlError>
            err++;
 80123f0:	7afb      	ldrb	r3, [r7, #11]
 80123f2:	3301      	adds	r3, #1
 80123f4:	72fb      	strb	r3, [r7, #11]
          break;
 80123f6:	e089      	b.n	801250c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123fe:	689b      	ldr	r3, [r3, #8]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d00b      	beq.n	801241c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801240a:	689b      	ldr	r3, [r3, #8]
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	7c12      	ldrb	r2, [r2, #16]
 8012410:	f107 0108 	add.w	r1, r7, #8
 8012414:	4610      	mov	r0, r2
 8012416:	4798      	blx	r3
 8012418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801241a:	e077      	b.n	801250c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801241c:	6839      	ldr	r1, [r7, #0]
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f000 fab1 	bl	8012986 <USBD_CtlError>
            err++;
 8012424:	7afb      	ldrb	r3, [r7, #11]
 8012426:	3301      	adds	r3, #1
 8012428:	72fb      	strb	r3, [r7, #11]
          break;
 801242a:	e06f      	b.n	801250c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d00b      	beq.n	8012450 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801243e:	68db      	ldr	r3, [r3, #12]
 8012440:	687a      	ldr	r2, [r7, #4]
 8012442:	7c12      	ldrb	r2, [r2, #16]
 8012444:	f107 0108 	add.w	r1, r7, #8
 8012448:	4610      	mov	r0, r2
 801244a:	4798      	blx	r3
 801244c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801244e:	e05d      	b.n	801250c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012450:	6839      	ldr	r1, [r7, #0]
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 fa97 	bl	8012986 <USBD_CtlError>
            err++;
 8012458:	7afb      	ldrb	r3, [r7, #11]
 801245a:	3301      	adds	r3, #1
 801245c:	72fb      	strb	r3, [r7, #11]
          break;
 801245e:	e055      	b.n	801250c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012466:	691b      	ldr	r3, [r3, #16]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d00b      	beq.n	8012484 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012472:	691b      	ldr	r3, [r3, #16]
 8012474:	687a      	ldr	r2, [r7, #4]
 8012476:	7c12      	ldrb	r2, [r2, #16]
 8012478:	f107 0108 	add.w	r1, r7, #8
 801247c:	4610      	mov	r0, r2
 801247e:	4798      	blx	r3
 8012480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012482:	e043      	b.n	801250c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012484:	6839      	ldr	r1, [r7, #0]
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f000 fa7d 	bl	8012986 <USBD_CtlError>
            err++;
 801248c:	7afb      	ldrb	r3, [r7, #11]
 801248e:	3301      	adds	r3, #1
 8012490:	72fb      	strb	r3, [r7, #11]
          break;
 8012492:	e03b      	b.n	801250c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801249a:	695b      	ldr	r3, [r3, #20]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d00b      	beq.n	80124b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124a6:	695b      	ldr	r3, [r3, #20]
 80124a8:	687a      	ldr	r2, [r7, #4]
 80124aa:	7c12      	ldrb	r2, [r2, #16]
 80124ac:	f107 0108 	add.w	r1, r7, #8
 80124b0:	4610      	mov	r0, r2
 80124b2:	4798      	blx	r3
 80124b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80124b6:	e029      	b.n	801250c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80124b8:	6839      	ldr	r1, [r7, #0]
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f000 fa63 	bl	8012986 <USBD_CtlError>
            err++;
 80124c0:	7afb      	ldrb	r3, [r7, #11]
 80124c2:	3301      	adds	r3, #1
 80124c4:	72fb      	strb	r3, [r7, #11]
          break;
 80124c6:	e021      	b.n	801250c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124ce:	699b      	ldr	r3, [r3, #24]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00b      	beq.n	80124ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124da:	699b      	ldr	r3, [r3, #24]
 80124dc:	687a      	ldr	r2, [r7, #4]
 80124de:	7c12      	ldrb	r2, [r2, #16]
 80124e0:	f107 0108 	add.w	r1, r7, #8
 80124e4:	4610      	mov	r0, r2
 80124e6:	4798      	blx	r3
 80124e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80124ea:	e00f      	b.n	801250c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80124ec:	6839      	ldr	r1, [r7, #0]
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f000 fa49 	bl	8012986 <USBD_CtlError>
            err++;
 80124f4:	7afb      	ldrb	r3, [r7, #11]
 80124f6:	3301      	adds	r3, #1
 80124f8:	72fb      	strb	r3, [r7, #11]
          break;
 80124fa:	e007      	b.n	801250c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80124fc:	6839      	ldr	r1, [r7, #0]
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f000 fa41 	bl	8012986 <USBD_CtlError>
          err++;
 8012504:	7afb      	ldrb	r3, [r7, #11]
 8012506:	3301      	adds	r3, #1
 8012508:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801250a:	bf00      	nop
      }
      break;
 801250c:	e037      	b.n	801257e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	7c1b      	ldrb	r3, [r3, #16]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d109      	bne.n	801252a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801251e:	f107 0208 	add.w	r2, r7, #8
 8012522:	4610      	mov	r0, r2
 8012524:	4798      	blx	r3
 8012526:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012528:	e029      	b.n	801257e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801252a:	6839      	ldr	r1, [r7, #0]
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f000 fa2a 	bl	8012986 <USBD_CtlError>
        err++;
 8012532:	7afb      	ldrb	r3, [r7, #11]
 8012534:	3301      	adds	r3, #1
 8012536:	72fb      	strb	r3, [r7, #11]
      break;
 8012538:	e021      	b.n	801257e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	7c1b      	ldrb	r3, [r3, #16]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d10d      	bne.n	801255e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801254a:	f107 0208 	add.w	r2, r7, #8
 801254e:	4610      	mov	r0, r2
 8012550:	4798      	blx	r3
 8012552:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	3301      	adds	r3, #1
 8012558:	2207      	movs	r2, #7
 801255a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801255c:	e00f      	b.n	801257e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801255e:	6839      	ldr	r1, [r7, #0]
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 fa10 	bl	8012986 <USBD_CtlError>
        err++;
 8012566:	7afb      	ldrb	r3, [r7, #11]
 8012568:	3301      	adds	r3, #1
 801256a:	72fb      	strb	r3, [r7, #11]
      break;
 801256c:	e007      	b.n	801257e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801256e:	6839      	ldr	r1, [r7, #0]
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f000 fa08 	bl	8012986 <USBD_CtlError>
      err++;
 8012576:	7afb      	ldrb	r3, [r7, #11]
 8012578:	3301      	adds	r3, #1
 801257a:	72fb      	strb	r3, [r7, #11]
      break;
 801257c:	bf00      	nop
  }

  if (err != 0U)
 801257e:	7afb      	ldrb	r3, [r7, #11]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d11e      	bne.n	80125c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	88db      	ldrh	r3, [r3, #6]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d016      	beq.n	80125ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801258c:	893b      	ldrh	r3, [r7, #8]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d00e      	beq.n	80125b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	88da      	ldrh	r2, [r3, #6]
 8012596:	893b      	ldrh	r3, [r7, #8]
 8012598:	4293      	cmp	r3, r2
 801259a:	bf28      	it	cs
 801259c:	4613      	movcs	r3, r2
 801259e:	b29b      	uxth	r3, r3
 80125a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80125a2:	893b      	ldrh	r3, [r7, #8]
 80125a4:	461a      	mov	r2, r3
 80125a6:	68f9      	ldr	r1, [r7, #12]
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f000 fa5d 	bl	8012a68 <USBD_CtlSendData>
 80125ae:	e009      	b.n	80125c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80125b0:	6839      	ldr	r1, [r7, #0]
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f000 f9e7 	bl	8012986 <USBD_CtlError>
 80125b8:	e004      	b.n	80125c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80125ba:	6878      	ldr	r0, [r7, #4]
 80125bc:	f000 faae 	bl	8012b1c <USBD_CtlSendStatus>
 80125c0:	e000      	b.n	80125c4 <USBD_GetDescriptor+0x2cc>
    return;
 80125c2:	bf00      	nop
  }
}
 80125c4:	3710      	adds	r7, #16
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
 80125ca:	bf00      	nop

080125cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	889b      	ldrh	r3, [r3, #4]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d131      	bne.n	8012642 <USBD_SetAddress+0x76>
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	88db      	ldrh	r3, [r3, #6]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d12d      	bne.n	8012642 <USBD_SetAddress+0x76>
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	885b      	ldrh	r3, [r3, #2]
 80125ea:	2b7f      	cmp	r3, #127	; 0x7f
 80125ec:	d829      	bhi.n	8012642 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	885b      	ldrh	r3, [r3, #2]
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012600:	b2db      	uxtb	r3, r3
 8012602:	2b03      	cmp	r3, #3
 8012604:	d104      	bne.n	8012610 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012606:	6839      	ldr	r1, [r7, #0]
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f000 f9bc 	bl	8012986 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801260e:	e01d      	b.n	801264c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	7bfa      	ldrb	r2, [r7, #15]
 8012614:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012618:	7bfb      	ldrb	r3, [r7, #15]
 801261a:	4619      	mov	r1, r3
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f004 f9cf 	bl	80169c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012622:	6878      	ldr	r0, [r7, #4]
 8012624:	f000 fa7a 	bl	8012b1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012628:	7bfb      	ldrb	r3, [r7, #15]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d004      	beq.n	8012638 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	2202      	movs	r2, #2
 8012632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012636:	e009      	b.n	801264c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2201      	movs	r2, #1
 801263c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012640:	e004      	b.n	801264c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012642:	6839      	ldr	r1, [r7, #0]
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f000 f99e 	bl	8012986 <USBD_CtlError>
  }
}
 801264a:	bf00      	nop
 801264c:	bf00      	nop
 801264e:	3710      	adds	r7, #16
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}

08012654 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b084      	sub	sp, #16
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801265e:	2300      	movs	r3, #0
 8012660:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	885b      	ldrh	r3, [r3, #2]
 8012666:	b2da      	uxtb	r2, r3
 8012668:	4b4e      	ldr	r3, [pc, #312]	; (80127a4 <USBD_SetConfig+0x150>)
 801266a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801266c:	4b4d      	ldr	r3, [pc, #308]	; (80127a4 <USBD_SetConfig+0x150>)
 801266e:	781b      	ldrb	r3, [r3, #0]
 8012670:	2b01      	cmp	r3, #1
 8012672:	d905      	bls.n	8012680 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012674:	6839      	ldr	r1, [r7, #0]
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f000 f985 	bl	8012986 <USBD_CtlError>
    return USBD_FAIL;
 801267c:	2303      	movs	r3, #3
 801267e:	e08c      	b.n	801279a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012686:	b2db      	uxtb	r3, r3
 8012688:	2b02      	cmp	r3, #2
 801268a:	d002      	beq.n	8012692 <USBD_SetConfig+0x3e>
 801268c:	2b03      	cmp	r3, #3
 801268e:	d029      	beq.n	80126e4 <USBD_SetConfig+0x90>
 8012690:	e075      	b.n	801277e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012692:	4b44      	ldr	r3, [pc, #272]	; (80127a4 <USBD_SetConfig+0x150>)
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d020      	beq.n	80126dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801269a:	4b42      	ldr	r3, [pc, #264]	; (80127a4 <USBD_SetConfig+0x150>)
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	461a      	mov	r2, r3
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80126a4:	4b3f      	ldr	r3, [pc, #252]	; (80127a4 <USBD_SetConfig+0x150>)
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	4619      	mov	r1, r3
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f7fe ffe1 	bl	8011672 <USBD_SetClassConfig>
 80126b0:	4603      	mov	r3, r0
 80126b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80126b4:	7bfb      	ldrb	r3, [r7, #15]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d008      	beq.n	80126cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80126ba:	6839      	ldr	r1, [r7, #0]
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f000 f962 	bl	8012986 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	2202      	movs	r2, #2
 80126c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80126ca:	e065      	b.n	8012798 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f000 fa25 	bl	8012b1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2203      	movs	r2, #3
 80126d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80126da:	e05d      	b.n	8012798 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f000 fa1d 	bl	8012b1c <USBD_CtlSendStatus>
      break;
 80126e2:	e059      	b.n	8012798 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80126e4:	4b2f      	ldr	r3, [pc, #188]	; (80127a4 <USBD_SetConfig+0x150>)
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d112      	bne.n	8012712 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2202      	movs	r2, #2
 80126f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80126f4:	4b2b      	ldr	r3, [pc, #172]	; (80127a4 <USBD_SetConfig+0x150>)
 80126f6:	781b      	ldrb	r3, [r3, #0]
 80126f8:	461a      	mov	r2, r3
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80126fe:	4b29      	ldr	r3, [pc, #164]	; (80127a4 <USBD_SetConfig+0x150>)
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	4619      	mov	r1, r3
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f7fe ffd0 	bl	80116aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 fa06 	bl	8012b1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012710:	e042      	b.n	8012798 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012712:	4b24      	ldr	r3, [pc, #144]	; (80127a4 <USBD_SetConfig+0x150>)
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	461a      	mov	r2, r3
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	685b      	ldr	r3, [r3, #4]
 801271c:	429a      	cmp	r2, r3
 801271e:	d02a      	beq.n	8012776 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	b2db      	uxtb	r3, r3
 8012726:	4619      	mov	r1, r3
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f7fe ffbe 	bl	80116aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801272e:	4b1d      	ldr	r3, [pc, #116]	; (80127a4 <USBD_SetConfig+0x150>)
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	461a      	mov	r2, r3
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012738:	4b1a      	ldr	r3, [pc, #104]	; (80127a4 <USBD_SetConfig+0x150>)
 801273a:	781b      	ldrb	r3, [r3, #0]
 801273c:	4619      	mov	r1, r3
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f7fe ff97 	bl	8011672 <USBD_SetClassConfig>
 8012744:	4603      	mov	r3, r0
 8012746:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012748:	7bfb      	ldrb	r3, [r7, #15]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d00f      	beq.n	801276e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801274e:	6839      	ldr	r1, [r7, #0]
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f000 f918 	bl	8012986 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	b2db      	uxtb	r3, r3
 801275c:	4619      	mov	r1, r3
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f7fe ffa3 	bl	80116aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2202      	movs	r2, #2
 8012768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801276c:	e014      	b.n	8012798 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f000 f9d4 	bl	8012b1c <USBD_CtlSendStatus>
      break;
 8012774:	e010      	b.n	8012798 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f000 f9d0 	bl	8012b1c <USBD_CtlSendStatus>
      break;
 801277c:	e00c      	b.n	8012798 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801277e:	6839      	ldr	r1, [r7, #0]
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f000 f900 	bl	8012986 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012786:	4b07      	ldr	r3, [pc, #28]	; (80127a4 <USBD_SetConfig+0x150>)
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	4619      	mov	r1, r3
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f7fe ff8c 	bl	80116aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012792:	2303      	movs	r3, #3
 8012794:	73fb      	strb	r3, [r7, #15]
      break;
 8012796:	bf00      	nop
  }

  return ret;
 8012798:	7bfb      	ldrb	r3, [r7, #15]
}
 801279a:	4618      	mov	r0, r3
 801279c:	3710      	adds	r7, #16
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
 80127a2:	bf00      	nop
 80127a4:	20007efc 	.word	0x20007efc

080127a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	88db      	ldrh	r3, [r3, #6]
 80127b6:	2b01      	cmp	r3, #1
 80127b8:	d004      	beq.n	80127c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80127ba:	6839      	ldr	r1, [r7, #0]
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f000 f8e2 	bl	8012986 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80127c2:	e023      	b.n	801280c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127ca:	b2db      	uxtb	r3, r3
 80127cc:	2b02      	cmp	r3, #2
 80127ce:	dc02      	bgt.n	80127d6 <USBD_GetConfig+0x2e>
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	dc03      	bgt.n	80127dc <USBD_GetConfig+0x34>
 80127d4:	e015      	b.n	8012802 <USBD_GetConfig+0x5a>
 80127d6:	2b03      	cmp	r3, #3
 80127d8:	d00b      	beq.n	80127f2 <USBD_GetConfig+0x4a>
 80127da:	e012      	b.n	8012802 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2200      	movs	r2, #0
 80127e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	3308      	adds	r3, #8
 80127e6:	2201      	movs	r2, #1
 80127e8:	4619      	mov	r1, r3
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f000 f93c 	bl	8012a68 <USBD_CtlSendData>
        break;
 80127f0:	e00c      	b.n	801280c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	3304      	adds	r3, #4
 80127f6:	2201      	movs	r2, #1
 80127f8:	4619      	mov	r1, r3
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f000 f934 	bl	8012a68 <USBD_CtlSendData>
        break;
 8012800:	e004      	b.n	801280c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012802:	6839      	ldr	r1, [r7, #0]
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f000 f8be 	bl	8012986 <USBD_CtlError>
        break;
 801280a:	bf00      	nop
}
 801280c:	bf00      	nop
 801280e:	3708      	adds	r7, #8
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b082      	sub	sp, #8
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012824:	b2db      	uxtb	r3, r3
 8012826:	3b01      	subs	r3, #1
 8012828:	2b02      	cmp	r3, #2
 801282a:	d81e      	bhi.n	801286a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	88db      	ldrh	r3, [r3, #6]
 8012830:	2b02      	cmp	r3, #2
 8012832:	d004      	beq.n	801283e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012834:	6839      	ldr	r1, [r7, #0]
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f000 f8a5 	bl	8012986 <USBD_CtlError>
        break;
 801283c:	e01a      	b.n	8012874 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	2201      	movs	r2, #1
 8012842:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801284a:	2b00      	cmp	r3, #0
 801284c:	d005      	beq.n	801285a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	68db      	ldr	r3, [r3, #12]
 8012852:	f043 0202 	orr.w	r2, r3, #2
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	330c      	adds	r3, #12
 801285e:	2202      	movs	r2, #2
 8012860:	4619      	mov	r1, r3
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f000 f900 	bl	8012a68 <USBD_CtlSendData>
      break;
 8012868:	e004      	b.n	8012874 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801286a:	6839      	ldr	r1, [r7, #0]
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f000 f88a 	bl	8012986 <USBD_CtlError>
      break;
 8012872:	bf00      	nop
  }
}
 8012874:	bf00      	nop
 8012876:	3708      	adds	r7, #8
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	885b      	ldrh	r3, [r3, #2]
 801288a:	2b01      	cmp	r3, #1
 801288c:	d107      	bne.n	801289e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2201      	movs	r2, #1
 8012892:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f000 f940 	bl	8012b1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801289c:	e013      	b.n	80128c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	885b      	ldrh	r3, [r3, #2]
 80128a2:	2b02      	cmp	r3, #2
 80128a4:	d10b      	bne.n	80128be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	889b      	ldrh	r3, [r3, #4]
 80128aa:	0a1b      	lsrs	r3, r3, #8
 80128ac:	b29b      	uxth	r3, r3
 80128ae:	b2da      	uxtb	r2, r3
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f000 f930 	bl	8012b1c <USBD_CtlSendStatus>
}
 80128bc:	e003      	b.n	80128c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80128be:	6839      	ldr	r1, [r7, #0]
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f000 f860 	bl	8012986 <USBD_CtlError>
}
 80128c6:	bf00      	nop
 80128c8:	3708      	adds	r7, #8
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}

080128ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128ce:	b580      	push	{r7, lr}
 80128d0:	b082      	sub	sp, #8
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
 80128d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128de:	b2db      	uxtb	r3, r3
 80128e0:	3b01      	subs	r3, #1
 80128e2:	2b02      	cmp	r3, #2
 80128e4:	d80b      	bhi.n	80128fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	885b      	ldrh	r3, [r3, #2]
 80128ea:	2b01      	cmp	r3, #1
 80128ec:	d10c      	bne.n	8012908 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2200      	movs	r2, #0
 80128f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f000 f910 	bl	8012b1c <USBD_CtlSendStatus>
      }
      break;
 80128fc:	e004      	b.n	8012908 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80128fe:	6839      	ldr	r1, [r7, #0]
 8012900:	6878      	ldr	r0, [r7, #4]
 8012902:	f000 f840 	bl	8012986 <USBD_CtlError>
      break;
 8012906:	e000      	b.n	801290a <USBD_ClrFeature+0x3c>
      break;
 8012908:	bf00      	nop
  }
}
 801290a:	bf00      	nop
 801290c:	3708      	adds	r7, #8
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}

08012912 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012912:	b580      	push	{r7, lr}
 8012914:	b084      	sub	sp, #16
 8012916:	af00      	add	r7, sp, #0
 8012918:	6078      	str	r0, [r7, #4]
 801291a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	781a      	ldrb	r2, [r3, #0]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	3301      	adds	r3, #1
 801292c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	781a      	ldrb	r2, [r3, #0]
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	3301      	adds	r3, #1
 801293a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801293c:	68f8      	ldr	r0, [r7, #12]
 801293e:	f7ff fa41 	bl	8011dc4 <SWAPBYTE>
 8012942:	4603      	mov	r3, r0
 8012944:	461a      	mov	r2, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	3301      	adds	r3, #1
 801294e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	3301      	adds	r3, #1
 8012954:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012956:	68f8      	ldr	r0, [r7, #12]
 8012958:	f7ff fa34 	bl	8011dc4 <SWAPBYTE>
 801295c:	4603      	mov	r3, r0
 801295e:	461a      	mov	r2, r3
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	3301      	adds	r3, #1
 8012968:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	3301      	adds	r3, #1
 801296e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012970:	68f8      	ldr	r0, [r7, #12]
 8012972:	f7ff fa27 	bl	8011dc4 <SWAPBYTE>
 8012976:	4603      	mov	r3, r0
 8012978:	461a      	mov	r2, r3
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	80da      	strh	r2, [r3, #6]
}
 801297e:	bf00      	nop
 8012980:	3710      	adds	r7, #16
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}

08012986 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012986:	b580      	push	{r7, lr}
 8012988:	b082      	sub	sp, #8
 801298a:	af00      	add	r7, sp, #0
 801298c:	6078      	str	r0, [r7, #4]
 801298e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012990:	2180      	movs	r1, #128	; 0x80
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f003 ffaa 	bl	80168ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012998:	2100      	movs	r1, #0
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f003 ffa6 	bl	80168ec <USBD_LL_StallEP>
}
 80129a0:	bf00      	nop
 80129a2:	3708      	adds	r7, #8
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}

080129a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b086      	sub	sp, #24
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	60f8      	str	r0, [r7, #12]
 80129b0:	60b9      	str	r1, [r7, #8]
 80129b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80129b4:	2300      	movs	r3, #0
 80129b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d036      	beq.n	8012a2c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80129c2:	6938      	ldr	r0, [r7, #16]
 80129c4:	f000 f836 	bl	8012a34 <USBD_GetLen>
 80129c8:	4603      	mov	r3, r0
 80129ca:	3301      	adds	r3, #1
 80129cc:	b29b      	uxth	r3, r3
 80129ce:	005b      	lsls	r3, r3, #1
 80129d0:	b29a      	uxth	r2, r3
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80129d6:	7dfb      	ldrb	r3, [r7, #23]
 80129d8:	68ba      	ldr	r2, [r7, #8]
 80129da:	4413      	add	r3, r2
 80129dc:	687a      	ldr	r2, [r7, #4]
 80129de:	7812      	ldrb	r2, [r2, #0]
 80129e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80129e2:	7dfb      	ldrb	r3, [r7, #23]
 80129e4:	3301      	adds	r3, #1
 80129e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80129e8:	7dfb      	ldrb	r3, [r7, #23]
 80129ea:	68ba      	ldr	r2, [r7, #8]
 80129ec:	4413      	add	r3, r2
 80129ee:	2203      	movs	r2, #3
 80129f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80129f2:	7dfb      	ldrb	r3, [r7, #23]
 80129f4:	3301      	adds	r3, #1
 80129f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80129f8:	e013      	b.n	8012a22 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80129fa:	7dfb      	ldrb	r3, [r7, #23]
 80129fc:	68ba      	ldr	r2, [r7, #8]
 80129fe:	4413      	add	r3, r2
 8012a00:	693a      	ldr	r2, [r7, #16]
 8012a02:	7812      	ldrb	r2, [r2, #0]
 8012a04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	3301      	adds	r3, #1
 8012a0a:	613b      	str	r3, [r7, #16]
    idx++;
 8012a0c:	7dfb      	ldrb	r3, [r7, #23]
 8012a0e:	3301      	adds	r3, #1
 8012a10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012a12:	7dfb      	ldrb	r3, [r7, #23]
 8012a14:	68ba      	ldr	r2, [r7, #8]
 8012a16:	4413      	add	r3, r2
 8012a18:	2200      	movs	r2, #0
 8012a1a:	701a      	strb	r2, [r3, #0]
    idx++;
 8012a1c:	7dfb      	ldrb	r3, [r7, #23]
 8012a1e:	3301      	adds	r3, #1
 8012a20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d1e7      	bne.n	80129fa <USBD_GetString+0x52>
 8012a2a:	e000      	b.n	8012a2e <USBD_GetString+0x86>
    return;
 8012a2c:	bf00      	nop
  }
}
 8012a2e:	3718      	adds	r7, #24
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012a34:	b480      	push	{r7}
 8012a36:	b085      	sub	sp, #20
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012a44:	e005      	b.n	8012a52 <USBD_GetLen+0x1e>
  {
    len++;
 8012a46:	7bfb      	ldrb	r3, [r7, #15]
 8012a48:	3301      	adds	r3, #1
 8012a4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	3301      	adds	r3, #1
 8012a50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012a52:	68bb      	ldr	r3, [r7, #8]
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d1f5      	bne.n	8012a46 <USBD_GetLen+0x12>
  }

  return len;
 8012a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	3714      	adds	r7, #20
 8012a60:	46bd      	mov	sp, r7
 8012a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a66:	4770      	bx	lr

08012a68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b084      	sub	sp, #16
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	60b9      	str	r1, [r7, #8]
 8012a72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	2202      	movs	r2, #2
 8012a78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	687a      	ldr	r2, [r7, #4]
 8012a80:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	687a      	ldr	r2, [r7, #4]
 8012a86:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	68ba      	ldr	r2, [r7, #8]
 8012a8c:	2100      	movs	r1, #0
 8012a8e:	68f8      	ldr	r0, [r7, #12]
 8012a90:	f003 ffb5 	bl	80169fe <USBD_LL_Transmit>

  return USBD_OK;
 8012a94:	2300      	movs	r3, #0
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3710      	adds	r7, #16
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}

08012a9e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012a9e:	b580      	push	{r7, lr}
 8012aa0:	b084      	sub	sp, #16
 8012aa2:	af00      	add	r7, sp, #0
 8012aa4:	60f8      	str	r0, [r7, #12]
 8012aa6:	60b9      	str	r1, [r7, #8]
 8012aa8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	68ba      	ldr	r2, [r7, #8]
 8012aae:	2100      	movs	r1, #0
 8012ab0:	68f8      	ldr	r0, [r7, #12]
 8012ab2:	f003 ffa4 	bl	80169fe <USBD_LL_Transmit>

  return USBD_OK;
 8012ab6:	2300      	movs	r3, #0
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3710      	adds	r7, #16
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b084      	sub	sp, #16
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	60f8      	str	r0, [r7, #12]
 8012ac8:	60b9      	str	r1, [r7, #8]
 8012aca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	2203      	movs	r2, #3
 8012ad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	687a      	ldr	r2, [r7, #4]
 8012ae0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	68ba      	ldr	r2, [r7, #8]
 8012ae8:	2100      	movs	r1, #0
 8012aea:	68f8      	ldr	r0, [r7, #12]
 8012aec:	f003 ffa8 	bl	8016a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012af0:	2300      	movs	r3, #0
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	3710      	adds	r7, #16
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}

08012afa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012afa:	b580      	push	{r7, lr}
 8012afc:	b084      	sub	sp, #16
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	60f8      	str	r0, [r7, #12]
 8012b02:	60b9      	str	r1, [r7, #8]
 8012b04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	68ba      	ldr	r2, [r7, #8]
 8012b0a:	2100      	movs	r1, #0
 8012b0c:	68f8      	ldr	r0, [r7, #12]
 8012b0e:	f003 ff97 	bl	8016a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b12:	2300      	movs	r3, #0
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3710      	adds	r7, #16
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2204      	movs	r2, #4
 8012b28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	2200      	movs	r2, #0
 8012b30:	2100      	movs	r1, #0
 8012b32:	6878      	ldr	r0, [r7, #4]
 8012b34:	f003 ff63 	bl	80169fe <USBD_LL_Transmit>

  return USBD_OK;
 8012b38:	2300      	movs	r3, #0
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3708      	adds	r7, #8
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}

08012b42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012b42:	b580      	push	{r7, lr}
 8012b44:	b082      	sub	sp, #8
 8012b46:	af00      	add	r7, sp, #0
 8012b48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2205      	movs	r2, #5
 8012b4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012b52:	2300      	movs	r3, #0
 8012b54:	2200      	movs	r2, #0
 8012b56:	2100      	movs	r1, #0
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f003 ff71 	bl	8016a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b5e:	2300      	movs	r3, #0
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3708      	adds	r7, #8
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012b68:	b480      	push	{r7}
 8012b6a:	b085      	sub	sp, #20
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	4603      	mov	r3, r0
 8012b70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012b72:	2300      	movs	r3, #0
 8012b74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b7a:	2b84      	cmp	r3, #132	; 0x84
 8012b7c:	d005      	beq.n	8012b8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012b7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	4413      	add	r3, r2
 8012b86:	3303      	adds	r3, #3
 8012b88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012b8a:	68fb      	ldr	r3, [r7, #12]
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3714      	adds	r7, #20
 8012b90:	46bd      	mov	sp, r7
 8012b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b96:	4770      	bx	lr

08012b98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012b9c:	f001 fa0e 	bl	8013fbc <vTaskStartScheduler>
  
  return osOK;
 8012ba0:	2300      	movs	r3, #0
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	bd80      	pop	{r7, pc}

08012ba6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ba8:	b089      	sub	sp, #36	; 0x24
 8012baa:	af04      	add	r7, sp, #16
 8012bac:	6078      	str	r0, [r7, #4]
 8012bae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	695b      	ldr	r3, [r3, #20]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d020      	beq.n	8012bfa <osThreadCreate+0x54>
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	699b      	ldr	r3, [r3, #24]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d01c      	beq.n	8012bfa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	685c      	ldr	r4, [r3, #4]
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	691e      	ldr	r6, [r3, #16]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f7ff ffc8 	bl	8012b68 <makeFreeRtosPriority>
 8012bd8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	695b      	ldr	r3, [r3, #20]
 8012bde:	687a      	ldr	r2, [r7, #4]
 8012be0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012be2:	9202      	str	r2, [sp, #8]
 8012be4:	9301      	str	r3, [sp, #4]
 8012be6:	9100      	str	r1, [sp, #0]
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	4632      	mov	r2, r6
 8012bec:	4629      	mov	r1, r5
 8012bee:	4620      	mov	r0, r4
 8012bf0:	f000 ff92 	bl	8013b18 <xTaskCreateStatic>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	60fb      	str	r3, [r7, #12]
 8012bf8:	e01c      	b.n	8012c34 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	685c      	ldr	r4, [r3, #4]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012c06:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7ff ffaa 	bl	8012b68 <makeFreeRtosPriority>
 8012c14:	4602      	mov	r2, r0
 8012c16:	f107 030c 	add.w	r3, r7, #12
 8012c1a:	9301      	str	r3, [sp, #4]
 8012c1c:	9200      	str	r2, [sp, #0]
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	4632      	mov	r2, r6
 8012c22:	4629      	mov	r1, r5
 8012c24:	4620      	mov	r0, r4
 8012c26:	f000 ffcd 	bl	8013bc4 <xTaskCreate>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d001      	beq.n	8012c34 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012c30:	2300      	movs	r3, #0
 8012c32:	e000      	b.n	8012c36 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012c34:	68fb      	ldr	r3, [r7, #12]
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3714      	adds	r7, #20
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08012c40 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b084      	sub	sp, #16
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	4a09      	ldr	r2, [pc, #36]	; (8012c70 <osDelay+0x30>)
 8012c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8012c50:	099b      	lsrs	r3, r3, #6
 8012c52:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d001      	beq.n	8012c5e <osDelay+0x1e>
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	e000      	b.n	8012c60 <osDelay+0x20>
 8012c5e:	2301      	movs	r3, #1
 8012c60:	4618      	mov	r0, r3
 8012c62:	f001 f911 	bl	8013e88 <vTaskDelay>
  
  return osOK;
 8012c66:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3710      	adds	r7, #16
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}
 8012c70:	10624dd3 	.word	0x10624dd3

08012c74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012c74:	b480      	push	{r7}
 8012c76:	b083      	sub	sp, #12
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f103 0208 	add.w	r2, r3, #8
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	f103 0208 	add.w	r2, r3, #8
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f103 0208 	add.w	r2, r3, #8
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012ca8:	bf00      	nop
 8012caa:	370c      	adds	r7, #12
 8012cac:	46bd      	mov	sp, r7
 8012cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb2:	4770      	bx	lr

08012cb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012cb4:	b480      	push	{r7}
 8012cb6:	b083      	sub	sp, #12
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012cc2:	bf00      	nop
 8012cc4:	370c      	adds	r7, #12
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ccc:	4770      	bx	lr

08012cce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012cce:	b480      	push	{r7}
 8012cd0:	b085      	sub	sp, #20
 8012cd2:	af00      	add	r7, sp, #0
 8012cd4:	6078      	str	r0, [r7, #4]
 8012cd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	685b      	ldr	r3, [r3, #4]
 8012cdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	68fa      	ldr	r2, [r7, #12]
 8012ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	689a      	ldr	r2, [r3, #8]
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	689b      	ldr	r3, [r3, #8]
 8012cf0:	683a      	ldr	r2, [r7, #0]
 8012cf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	683a      	ldr	r2, [r7, #0]
 8012cf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	687a      	ldr	r2, [r7, #4]
 8012cfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	1c5a      	adds	r2, r3, #1
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	601a      	str	r2, [r3, #0]
}
 8012d0a:	bf00      	nop
 8012d0c:	3714      	adds	r7, #20
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr

08012d16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012d16:	b480      	push	{r7}
 8012d18:	b085      	sub	sp, #20
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
 8012d1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012d20:	683b      	ldr	r3, [r7, #0]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d2c:	d103      	bne.n	8012d36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	691b      	ldr	r3, [r3, #16]
 8012d32:	60fb      	str	r3, [r7, #12]
 8012d34:	e00c      	b.n	8012d50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	3308      	adds	r3, #8
 8012d3a:	60fb      	str	r3, [r7, #12]
 8012d3c:	e002      	b.n	8012d44 <vListInsert+0x2e>
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	685b      	ldr	r3, [r3, #4]
 8012d42:	60fb      	str	r3, [r7, #12]
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	68ba      	ldr	r2, [r7, #8]
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d2f6      	bcs.n	8012d3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	685a      	ldr	r2, [r3, #4]
 8012d54:	683b      	ldr	r3, [r7, #0]
 8012d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	683a      	ldr	r2, [r7, #0]
 8012d5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	68fa      	ldr	r2, [r7, #12]
 8012d64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	683a      	ldr	r2, [r7, #0]
 8012d6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	1c5a      	adds	r2, r3, #1
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	601a      	str	r2, [r3, #0]
}
 8012d7c:	bf00      	nop
 8012d7e:	3714      	adds	r7, #20
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr

08012d88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012d88:	b480      	push	{r7}
 8012d8a:	b085      	sub	sp, #20
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	691b      	ldr	r3, [r3, #16]
 8012d94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	687a      	ldr	r2, [r7, #4]
 8012d9c:	6892      	ldr	r2, [r2, #8]
 8012d9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	689b      	ldr	r3, [r3, #8]
 8012da4:	687a      	ldr	r2, [r7, #4]
 8012da6:	6852      	ldr	r2, [r2, #4]
 8012da8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d103      	bne.n	8012dbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	689a      	ldr	r2, [r3, #8]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	1e5a      	subs	r2, r3, #1
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	681b      	ldr	r3, [r3, #0]
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3714      	adds	r7, #20
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dda:	4770      	bx	lr

08012ddc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b084      	sub	sp, #16
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d105      	bne.n	8012dfc <xQueueGenericReset+0x20>
 8012df0:	f240 1203 	movw	r2, #259	; 0x103
 8012df4:	492a      	ldr	r1, [pc, #168]	; (8012ea0 <xQueueGenericReset+0xc4>)
 8012df6:	482b      	ldr	r0, [pc, #172]	; (8012ea4 <xQueueGenericReset+0xc8>)
 8012df8:	f7f2 fb5c 	bl	80054b4 <assertFail>

	taskENTER_CRITICAL();
 8012dfc:	f002 feb8 	bl	8015b70 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	681a      	ldr	r2, [r3, #0]
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e08:	68f9      	ldr	r1, [r7, #12]
 8012e0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e0c:	fb01 f303 	mul.w	r3, r1, r3
 8012e10:	441a      	add	r2, r3
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	2200      	movs	r2, #0
 8012e1a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681a      	ldr	r2, [r3, #0]
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	681a      	ldr	r2, [r3, #0]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e2c:	3b01      	subs	r3, #1
 8012e2e:	68f9      	ldr	r1, [r7, #12]
 8012e30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e32:	fb01 f303 	mul.w	r3, r1, r3
 8012e36:	441a      	add	r2, r3
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	22ff      	movs	r2, #255	; 0xff
 8012e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	22ff      	movs	r2, #255	; 0xff
 8012e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d114      	bne.n	8012e7c <xQueueGenericReset+0xa0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	691b      	ldr	r3, [r3, #16]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d01a      	beq.n	8012e90 <xQueueGenericReset+0xb4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	3310      	adds	r3, #16
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f001 fc3c 	bl	80146dc <xTaskRemoveFromEventList>
 8012e64:	4603      	mov	r3, r0
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d012      	beq.n	8012e90 <xQueueGenericReset+0xb4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012e6a:	4b0f      	ldr	r3, [pc, #60]	; (8012ea8 <xQueueGenericReset+0xcc>)
 8012e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e70:	601a      	str	r2, [r3, #0]
 8012e72:	f3bf 8f4f 	dsb	sy
 8012e76:	f3bf 8f6f 	isb	sy
 8012e7a:	e009      	b.n	8012e90 <xQueueGenericReset+0xb4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	3310      	adds	r3, #16
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7ff fef7 	bl	8012c74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	3324      	adds	r3, #36	; 0x24
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7ff fef2 	bl	8012c74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012e90:	f002 fe9c 	bl	8015bcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012e94:	2301      	movs	r3, #1
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3710      	adds	r7, #16
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}
 8012e9e:	bf00      	nop
 8012ea0:	0801b668 	.word	0x0801b668
 8012ea4:	0801b69c 	.word	0x0801b69c
 8012ea8:	e000ed04 	.word	0xe000ed04

08012eac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b088      	sub	sp, #32
 8012eb0:	af02      	add	r7, sp, #8
 8012eb2:	60f8      	str	r0, [r7, #12]
 8012eb4:	60b9      	str	r1, [r7, #8]
 8012eb6:	607a      	str	r2, [r7, #4]
 8012eb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d105      	bne.n	8012ecc <xQueueGenericCreateStatic+0x20>
 8012ec0:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8012ec4:	4929      	ldr	r1, [pc, #164]	; (8012f6c <xQueueGenericCreateStatic+0xc0>)
 8012ec6:	482a      	ldr	r0, [pc, #168]	; (8012f70 <xQueueGenericCreateStatic+0xc4>)
 8012ec8:	f7f2 faf4 	bl	80054b4 <assertFail>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d105      	bne.n	8012ede <xQueueGenericCreateStatic+0x32>
 8012ed2:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8012ed6:	4925      	ldr	r1, [pc, #148]	; (8012f6c <xQueueGenericCreateStatic+0xc0>)
 8012ed8:	4826      	ldr	r0, [pc, #152]	; (8012f74 <xQueueGenericCreateStatic+0xc8>)
 8012eda:	f7f2 faeb 	bl	80054b4 <assertFail>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d002      	beq.n	8012eea <xQueueGenericCreateStatic+0x3e>
 8012ee4:	68bb      	ldr	r3, [r7, #8]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d001      	beq.n	8012eee <xQueueGenericCreateStatic+0x42>
 8012eea:	2301      	movs	r3, #1
 8012eec:	e000      	b.n	8012ef0 <xQueueGenericCreateStatic+0x44>
 8012eee:	2300      	movs	r3, #0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d105      	bne.n	8012f00 <xQueueGenericCreateStatic+0x54>
 8012ef4:	f44f 72a1 	mov.w	r2, #322	; 0x142
 8012ef8:	491c      	ldr	r1, [pc, #112]	; (8012f6c <xQueueGenericCreateStatic+0xc0>)
 8012efa:	481f      	ldr	r0, [pc, #124]	; (8012f78 <xQueueGenericCreateStatic+0xcc>)
 8012efc:	f7f2 fada 	bl	80054b4 <assertFail>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d102      	bne.n	8012f0c <xQueueGenericCreateStatic+0x60>
 8012f06:	68bb      	ldr	r3, [r7, #8]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d101      	bne.n	8012f10 <xQueueGenericCreateStatic+0x64>
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	e000      	b.n	8012f12 <xQueueGenericCreateStatic+0x66>
 8012f10:	2300      	movs	r3, #0
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d105      	bne.n	8012f22 <xQueueGenericCreateStatic+0x76>
 8012f16:	f240 1243 	movw	r2, #323	; 0x143
 8012f1a:	4914      	ldr	r1, [pc, #80]	; (8012f6c <xQueueGenericCreateStatic+0xc0>)
 8012f1c:	4817      	ldr	r0, [pc, #92]	; (8012f7c <xQueueGenericCreateStatic+0xd0>)
 8012f1e:	f7f2 fac9 	bl	80054b4 <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012f22:	2350      	movs	r3, #80	; 0x50
 8012f24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	2b50      	cmp	r3, #80	; 0x50
 8012f2a:	d005      	beq.n	8012f38 <xQueueGenericCreateStatic+0x8c>
 8012f2c:	f240 124b 	movw	r2, #331	; 0x14b
 8012f30:	490e      	ldr	r1, [pc, #56]	; (8012f6c <xQueueGenericCreateStatic+0xc0>)
 8012f32:	4813      	ldr	r0, [pc, #76]	; (8012f80 <xQueueGenericCreateStatic+0xd4>)
 8012f34:	f7f2 fabe 	bl	80054b4 <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012f38:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d00d      	beq.n	8012f60 <xQueueGenericCreateStatic+0xb4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	2201      	movs	r2, #1
 8012f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012f4c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	9300      	str	r3, [sp, #0]
 8012f54:	4613      	mov	r3, r2
 8012f56:	687a      	ldr	r2, [r7, #4]
 8012f58:	68b9      	ldr	r1, [r7, #8]
 8012f5a:	68f8      	ldr	r0, [r7, #12]
 8012f5c:	f000 f84c 	bl	8012ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012f60:	697b      	ldr	r3, [r7, #20]
	}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3718      	adds	r7, #24
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	0801b668 	.word	0x0801b668
 8012f70:	0801b6a4 	.word	0x0801b6a4
 8012f74:	0801b6c8 	.word	0x0801b6c8
 8012f78:	0801b6e0 	.word	0x0801b6e0
 8012f7c:	0801b718 	.word	0x0801b718
 8012f80:	0801b750 	.word	0x0801b750

08012f84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b08a      	sub	sp, #40	; 0x28
 8012f88:	af02      	add	r7, sp, #8
 8012f8a:	60f8      	str	r0, [r7, #12]
 8012f8c:	60b9      	str	r1, [r7, #8]
 8012f8e:	4613      	mov	r3, r2
 8012f90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d105      	bne.n	8012fa4 <xQueueGenericCreate+0x20>
 8012f98:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8012f9c:	4914      	ldr	r1, [pc, #80]	; (8012ff0 <xQueueGenericCreate+0x6c>)
 8012f9e:	4815      	ldr	r0, [pc, #84]	; (8012ff4 <xQueueGenericCreate+0x70>)
 8012fa0:	f7f2 fa88 	bl	80054b4 <assertFail>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	68ba      	ldr	r2, [r7, #8]
 8012fa8:	fb02 f303 	mul.w	r3, r2, r3
 8012fac:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012fae:	69fb      	ldr	r3, [r7, #28]
 8012fb0:	3350      	adds	r3, #80	; 0x50
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f002 feec 	bl	8015d90 <pvPortMalloc>
 8012fb8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012fba:	69bb      	ldr	r3, [r7, #24]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d011      	beq.n	8012fe4 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012fc0:	69bb      	ldr	r3, [r7, #24]
 8012fc2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	3350      	adds	r3, #80	; 0x50
 8012fc8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012fd2:	79fa      	ldrb	r2, [r7, #7]
 8012fd4:	69bb      	ldr	r3, [r7, #24]
 8012fd6:	9300      	str	r3, [sp, #0]
 8012fd8:	4613      	mov	r3, r2
 8012fda:	697a      	ldr	r2, [r7, #20]
 8012fdc:	68b9      	ldr	r1, [r7, #8]
 8012fde:	68f8      	ldr	r0, [r7, #12]
 8012fe0:	f000 f80a 	bl	8012ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012fe4:	69bb      	ldr	r3, [r7, #24]
	}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3720      	adds	r7, #32
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop
 8012ff0:	0801b668 	.word	0x0801b668
 8012ff4:	0801b6a4 	.word	0x0801b6a4

08012ff8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b084      	sub	sp, #16
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	60f8      	str	r0, [r7, #12]
 8013000:	60b9      	str	r1, [r7, #8]
 8013002:	607a      	str	r2, [r7, #4]
 8013004:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d103      	bne.n	8013014 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801300c:	69bb      	ldr	r3, [r7, #24]
 801300e:	69ba      	ldr	r2, [r7, #24]
 8013010:	601a      	str	r2, [r3, #0]
 8013012:	e002      	b.n	801301a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013014:	69bb      	ldr	r3, [r7, #24]
 8013016:	687a      	ldr	r2, [r7, #4]
 8013018:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801301a:	69bb      	ldr	r3, [r7, #24]
 801301c:	68fa      	ldr	r2, [r7, #12]
 801301e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013020:	69bb      	ldr	r3, [r7, #24]
 8013022:	68ba      	ldr	r2, [r7, #8]
 8013024:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013026:	2101      	movs	r1, #1
 8013028:	69b8      	ldr	r0, [r7, #24]
 801302a:	f7ff fed7 	bl	8012ddc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801302e:	69bb      	ldr	r3, [r7, #24]
 8013030:	78fa      	ldrb	r2, [r7, #3]
 8013032:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013036:	bf00      	nop
 8013038:	3710      	adds	r7, #16
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}

0801303e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801303e:	b580      	push	{r7, lr}
 8013040:	b082      	sub	sp, #8
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d00e      	beq.n	801306a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2200      	movs	r2, #0
 8013050:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	2200      	movs	r2, #0
 8013056:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2200      	movs	r2, #0
 801305c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801305e:	2300      	movs	r3, #0
 8013060:	2200      	movs	r2, #0
 8013062:	2100      	movs	r1, #0
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f000 f837 	bl	80130d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801306a:	bf00      	nop
 801306c:	3708      	adds	r7, #8
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}

08013072 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013072:	b580      	push	{r7, lr}
 8013074:	b086      	sub	sp, #24
 8013076:	af00      	add	r7, sp, #0
 8013078:	4603      	mov	r3, r0
 801307a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801307c:	2301      	movs	r3, #1
 801307e:	617b      	str	r3, [r7, #20]
 8013080:	2300      	movs	r3, #0
 8013082:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013084:	79fb      	ldrb	r3, [r7, #7]
 8013086:	461a      	mov	r2, r3
 8013088:	6939      	ldr	r1, [r7, #16]
 801308a:	6978      	ldr	r0, [r7, #20]
 801308c:	f7ff ff7a 	bl	8012f84 <xQueueGenericCreate>
 8013090:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013092:	68f8      	ldr	r0, [r7, #12]
 8013094:	f7ff ffd3 	bl	801303e <prvInitialiseMutex>

		return xNewQueue;
 8013098:	68fb      	ldr	r3, [r7, #12]
	}
 801309a:	4618      	mov	r0, r3
 801309c:	3718      	adds	r7, #24
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}

080130a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80130a2:	b580      	push	{r7, lr}
 80130a4:	b088      	sub	sp, #32
 80130a6:	af02      	add	r7, sp, #8
 80130a8:	4603      	mov	r3, r0
 80130aa:	6039      	str	r1, [r7, #0]
 80130ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80130ae:	2301      	movs	r3, #1
 80130b0:	617b      	str	r3, [r7, #20]
 80130b2:	2300      	movs	r3, #0
 80130b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80130b6:	79fb      	ldrb	r3, [r7, #7]
 80130b8:	9300      	str	r3, [sp, #0]
 80130ba:	683b      	ldr	r3, [r7, #0]
 80130bc:	2200      	movs	r2, #0
 80130be:	6939      	ldr	r1, [r7, #16]
 80130c0:	6978      	ldr	r0, [r7, #20]
 80130c2:	f7ff fef3 	bl	8012eac <xQueueGenericCreateStatic>
 80130c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80130c8:	68f8      	ldr	r0, [r7, #12]
 80130ca:	f7ff ffb8 	bl	801303e <prvInitialiseMutex>

		return xNewQueue;
 80130ce:	68fb      	ldr	r3, [r7, #12]
	}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3718      	adds	r7, #24
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b08a      	sub	sp, #40	; 0x28
 80130dc:	af00      	add	r7, sp, #0
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	60b9      	str	r1, [r7, #8]
 80130e2:	607a      	str	r2, [r7, #4]
 80130e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80130e6:	2300      	movs	r3, #0
 80130e8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80130ee:	6a3b      	ldr	r3, [r7, #32]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d105      	bne.n	8013100 <xQueueGenericSend+0x28>
 80130f4:	f240 22ea 	movw	r2, #746	; 0x2ea
 80130f8:	4977      	ldr	r1, [pc, #476]	; (80132d8 <xQueueGenericSend+0x200>)
 80130fa:	4878      	ldr	r0, [pc, #480]	; (80132dc <xQueueGenericSend+0x204>)
 80130fc:	f7f2 f9da 	bl	80054b4 <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d103      	bne.n	801310e <xQueueGenericSend+0x36>
 8013106:	6a3b      	ldr	r3, [r7, #32]
 8013108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801310a:	2b00      	cmp	r3, #0
 801310c:	d101      	bne.n	8013112 <xQueueGenericSend+0x3a>
 801310e:	2301      	movs	r3, #1
 8013110:	e000      	b.n	8013114 <xQueueGenericSend+0x3c>
 8013112:	2300      	movs	r3, #0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d105      	bne.n	8013124 <xQueueGenericSend+0x4c>
 8013118:	f240 22eb 	movw	r2, #747	; 0x2eb
 801311c:	496e      	ldr	r1, [pc, #440]	; (80132d8 <xQueueGenericSend+0x200>)
 801311e:	4870      	ldr	r0, [pc, #448]	; (80132e0 <xQueueGenericSend+0x208>)
 8013120:	f7f2 f9c8 	bl	80054b4 <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	2b02      	cmp	r3, #2
 8013128:	d103      	bne.n	8013132 <xQueueGenericSend+0x5a>
 801312a:	6a3b      	ldr	r3, [r7, #32]
 801312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801312e:	2b01      	cmp	r3, #1
 8013130:	d101      	bne.n	8013136 <xQueueGenericSend+0x5e>
 8013132:	2301      	movs	r3, #1
 8013134:	e000      	b.n	8013138 <xQueueGenericSend+0x60>
 8013136:	2300      	movs	r3, #0
 8013138:	2b00      	cmp	r3, #0
 801313a:	d105      	bne.n	8013148 <xQueueGenericSend+0x70>
 801313c:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8013140:	4965      	ldr	r1, [pc, #404]	; (80132d8 <xQueueGenericSend+0x200>)
 8013142:	4868      	ldr	r0, [pc, #416]	; (80132e4 <xQueueGenericSend+0x20c>)
 8013144:	f7f2 f9b6 	bl	80054b4 <assertFail>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013148:	f001 fd5a 	bl	8014c00 <xTaskGetSchedulerState>
 801314c:	4603      	mov	r3, r0
 801314e:	2b00      	cmp	r3, #0
 8013150:	d102      	bne.n	8013158 <xQueueGenericSend+0x80>
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d101      	bne.n	801315c <xQueueGenericSend+0x84>
 8013158:	2301      	movs	r3, #1
 801315a:	e000      	b.n	801315e <xQueueGenericSend+0x86>
 801315c:	2300      	movs	r3, #0
 801315e:	2b00      	cmp	r3, #0
 8013160:	d105      	bne.n	801316e <xQueueGenericSend+0x96>
 8013162:	f240 22ef 	movw	r2, #751	; 0x2ef
 8013166:	495c      	ldr	r1, [pc, #368]	; (80132d8 <xQueueGenericSend+0x200>)
 8013168:	485f      	ldr	r0, [pc, #380]	; (80132e8 <xQueueGenericSend+0x210>)
 801316a:	f7f2 f9a3 	bl	80054b4 <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801316e:	f002 fcff 	bl	8015b70 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013172:	6a3b      	ldr	r3, [r7, #32]
 8013174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013176:	6a3b      	ldr	r3, [r7, #32]
 8013178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801317a:	429a      	cmp	r2, r3
 801317c:	d302      	bcc.n	8013184 <xQueueGenericSend+0xac>
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	2b02      	cmp	r3, #2
 8013182:	d12f      	bne.n	80131e4 <xQueueGenericSend+0x10c>
			{
				traceQUEUE_SEND( pxQueue );
 8013184:	6a3b      	ldr	r3, [r7, #32]
 8013186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013188:	4a58      	ldr	r2, [pc, #352]	; (80132ec <xQueueGenericSend+0x214>)
 801318a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801318e:	6013      	str	r3, [r2, #0]
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013190:	683a      	ldr	r2, [r7, #0]
 8013192:	68b9      	ldr	r1, [r7, #8]
 8013194:	6a38      	ldr	r0, [r7, #32]
 8013196:	f000 fb51 	bl	801383c <prvCopyDataToQueue>
 801319a:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801319c:	6a3b      	ldr	r3, [r7, #32]
 801319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d010      	beq.n	80131c6 <xQueueGenericSend+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80131a4:	6a3b      	ldr	r3, [r7, #32]
 80131a6:	3324      	adds	r3, #36	; 0x24
 80131a8:	4618      	mov	r0, r3
 80131aa:	f001 fa97 	bl	80146dc <xTaskRemoveFromEventList>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d013      	beq.n	80131dc <xQueueGenericSend+0x104>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80131b4:	4b4e      	ldr	r3, [pc, #312]	; (80132f0 <xQueueGenericSend+0x218>)
 80131b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131ba:	601a      	str	r2, [r3, #0]
 80131bc:	f3bf 8f4f 	dsb	sy
 80131c0:	f3bf 8f6f 	isb	sy
 80131c4:	e00a      	b.n	80131dc <xQueueGenericSend+0x104>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80131c6:	69fb      	ldr	r3, [r7, #28]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d007      	beq.n	80131dc <xQueueGenericSend+0x104>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80131cc:	4b48      	ldr	r3, [pc, #288]	; (80132f0 <xQueueGenericSend+0x218>)
 80131ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131d2:	601a      	str	r2, [r3, #0]
 80131d4:	f3bf 8f4f 	dsb	sy
 80131d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80131dc:	f002 fcf6 	bl	8015bcc <vPortExitCritical>
				return pdPASS;
 80131e0:	2301      	movs	r3, #1
 80131e2:	e075      	b.n	80132d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d109      	bne.n	80131fe <xQueueGenericSend+0x126>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80131ea:	f002 fcef 	bl	8015bcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80131ee:	6a3b      	ldr	r3, [r7, #32]
 80131f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131f2:	4a3e      	ldr	r2, [pc, #248]	; (80132ec <xQueueGenericSend+0x214>)
 80131f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80131f8:	6013      	str	r3, [r2, #0]
					return errQUEUE_FULL;
 80131fa:	2300      	movs	r3, #0
 80131fc:	e068      	b.n	80132d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80131fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013200:	2b00      	cmp	r3, #0
 8013202:	d106      	bne.n	8013212 <xQueueGenericSend+0x13a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013204:	f107 0314 	add.w	r3, r7, #20
 8013208:	4618      	mov	r0, r3
 801320a:	f001 fac9 	bl	80147a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801320e:	2301      	movs	r3, #1
 8013210:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013212:	f002 fcdb 	bl	8015bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013216:	f000 ff4b 	bl	80140b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801321a:	f002 fca9 	bl	8015b70 <vPortEnterCritical>
 801321e:	6a3b      	ldr	r3, [r7, #32]
 8013220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013224:	b25b      	sxtb	r3, r3
 8013226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801322a:	d103      	bne.n	8013234 <xQueueGenericSend+0x15c>
 801322c:	6a3b      	ldr	r3, [r7, #32]
 801322e:	2200      	movs	r2, #0
 8013230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013234:	6a3b      	ldr	r3, [r7, #32]
 8013236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801323a:	b25b      	sxtb	r3, r3
 801323c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013240:	d103      	bne.n	801324a <xQueueGenericSend+0x172>
 8013242:	6a3b      	ldr	r3, [r7, #32]
 8013244:	2200      	movs	r2, #0
 8013246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801324a:	f002 fcbf 	bl	8015bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801324e:	1d3a      	adds	r2, r7, #4
 8013250:	f107 0314 	add.w	r3, r7, #20
 8013254:	4611      	mov	r1, r2
 8013256:	4618      	mov	r0, r3
 8013258:	f001 fab8 	bl	80147cc <xTaskCheckForTimeOut>
 801325c:	4603      	mov	r3, r0
 801325e:	2b00      	cmp	r3, #0
 8013260:	d12a      	bne.n	80132b8 <xQueueGenericSend+0x1e0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013262:	6a38      	ldr	r0, [r7, #32]
 8013264:	f000 fbe2 	bl	8013a2c <prvIsQueueFull>
 8013268:	4603      	mov	r3, r0
 801326a:	2b00      	cmp	r3, #0
 801326c:	d01e      	beq.n	80132ac <xQueueGenericSend+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 801326e:	6a3b      	ldr	r3, [r7, #32]
 8013270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013272:	4a1e      	ldr	r2, [pc, #120]	; (80132ec <xQueueGenericSend+0x214>)
 8013274:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013278:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801327a:	6a3b      	ldr	r3, [r7, #32]
 801327c:	3310      	adds	r3, #16
 801327e:	687a      	ldr	r2, [r7, #4]
 8013280:	4611      	mov	r1, r2
 8013282:	4618      	mov	r0, r3
 8013284:	f001 f9dc 	bl	8014640 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013288:	6a38      	ldr	r0, [r7, #32]
 801328a:	f000 fb67 	bl	801395c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801328e:	f000 ff1d 	bl	80140cc <xTaskResumeAll>
 8013292:	4603      	mov	r3, r0
 8013294:	2b00      	cmp	r3, #0
 8013296:	f47f af6a 	bne.w	801316e <xQueueGenericSend+0x96>
				{
					portYIELD_WITHIN_API();
 801329a:	4b15      	ldr	r3, [pc, #84]	; (80132f0 <xQueueGenericSend+0x218>)
 801329c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132a0:	601a      	str	r2, [r3, #0]
 80132a2:	f3bf 8f4f 	dsb	sy
 80132a6:	f3bf 8f6f 	isb	sy
 80132aa:	e760      	b.n	801316e <xQueueGenericSend+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80132ac:	6a38      	ldr	r0, [r7, #32]
 80132ae:	f000 fb55 	bl	801395c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80132b2:	f000 ff0b 	bl	80140cc <xTaskResumeAll>
 80132b6:	e75a      	b.n	801316e <xQueueGenericSend+0x96>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80132b8:	6a38      	ldr	r0, [r7, #32]
 80132ba:	f000 fb4f 	bl	801395c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80132be:	f000 ff05 	bl	80140cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80132c2:	6a3b      	ldr	r3, [r7, #32]
 80132c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80132c6:	4a09      	ldr	r2, [pc, #36]	; (80132ec <xQueueGenericSend+0x214>)
 80132c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80132cc:	6013      	str	r3, [r2, #0]
			return errQUEUE_FULL;
 80132ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3728      	adds	r7, #40	; 0x28
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}
 80132d8:	0801b668 	.word	0x0801b668
 80132dc:	0801b69c 	.word	0x0801b69c
 80132e0:	0801b76c 	.word	0x0801b76c
 80132e4:	0801b7bc 	.word	0x0801b7bc
 80132e8:	0801b804 	.word	0x0801b804
 80132ec:	e000000c 	.word	0xe000000c
 80132f0:	e000ed04 	.word	0xe000ed04

080132f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b08c      	sub	sp, #48	; 0x30
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	60f8      	str	r0, [r7, #12]
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	607a      	str	r2, [r7, #4]
 8013300:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8013306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013308:	2b00      	cmp	r3, #0
 801330a:	d105      	bne.n	8013318 <xQueueGenericSendFromISR+0x24>
 801330c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8013310:	493e      	ldr	r1, [pc, #248]	; (801340c <xQueueGenericSendFromISR+0x118>)
 8013312:	483f      	ldr	r0, [pc, #252]	; (8013410 <xQueueGenericSendFromISR+0x11c>)
 8013314:	f7f2 f8ce 	bl	80054b4 <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d103      	bne.n	8013326 <xQueueGenericSendFromISR+0x32>
 801331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013322:	2b00      	cmp	r3, #0
 8013324:	d101      	bne.n	801332a <xQueueGenericSendFromISR+0x36>
 8013326:	2301      	movs	r3, #1
 8013328:	e000      	b.n	801332c <xQueueGenericSendFromISR+0x38>
 801332a:	2300      	movs	r3, #0
 801332c:	2b00      	cmp	r3, #0
 801332e:	d105      	bne.n	801333c <xQueueGenericSendFromISR+0x48>
 8013330:	f240 32bd 	movw	r2, #957	; 0x3bd
 8013334:	4935      	ldr	r1, [pc, #212]	; (801340c <xQueueGenericSendFromISR+0x118>)
 8013336:	4837      	ldr	r0, [pc, #220]	; (8013414 <xQueueGenericSendFromISR+0x120>)
 8013338:	f7f2 f8bc 	bl	80054b4 <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	2b02      	cmp	r3, #2
 8013340:	d103      	bne.n	801334a <xQueueGenericSendFromISR+0x56>
 8013342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013346:	2b01      	cmp	r3, #1
 8013348:	d101      	bne.n	801334e <xQueueGenericSendFromISR+0x5a>
 801334a:	2301      	movs	r3, #1
 801334c:	e000      	b.n	8013350 <xQueueGenericSendFromISR+0x5c>
 801334e:	2300      	movs	r3, #0
 8013350:	2b00      	cmp	r3, #0
 8013352:	d105      	bne.n	8013360 <xQueueGenericSendFromISR+0x6c>
 8013354:	f240 32be 	movw	r2, #958	; 0x3be
 8013358:	492c      	ldr	r1, [pc, #176]	; (801340c <xQueueGenericSendFromISR+0x118>)
 801335a:	482f      	ldr	r0, [pc, #188]	; (8013418 <xQueueGenericSendFromISR+0x124>)
 801335c:	f7f2 f8aa 	bl	80054b4 <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013360:	f002 fcdc 	bl	8015d1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013364:	f3ef 8211 	mrs	r2, BASEPRI
 8013368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801336c:	f383 8811 	msr	BASEPRI, r3
 8013370:	f3bf 8f6f 	isb	sy
 8013374:	f3bf 8f4f 	dsb	sy
 8013378:	61ba      	str	r2, [r7, #24]
 801337a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801337c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801337e:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013388:	429a      	cmp	r2, r3
 801338a:	d302      	bcc.n	8013392 <xQueueGenericSendFromISR+0x9e>
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	2b02      	cmp	r3, #2
 8013390:	d12f      	bne.n	80133f2 <xQueueGenericSendFromISR+0xfe>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133a0:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80133a2:	683a      	ldr	r2, [r7, #0]
 80133a4:	68b9      	ldr	r1, [r7, #8]
 80133a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133a8:	f000 fa48 	bl	801383c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80133ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80133b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133b4:	d112      	bne.n	80133dc <xQueueGenericSendFromISR+0xe8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80133b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d016      	beq.n	80133ec <xQueueGenericSendFromISR+0xf8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c0:	3324      	adds	r3, #36	; 0x24
 80133c2:	4618      	mov	r0, r3
 80133c4:	f001 f98a 	bl	80146dc <xTaskRemoveFromEventList>
 80133c8:	4603      	mov	r3, r0
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d00e      	beq.n	80133ec <xQueueGenericSendFromISR+0xf8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d00b      	beq.n	80133ec <xQueueGenericSendFromISR+0xf8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2201      	movs	r2, #1
 80133d8:	601a      	str	r2, [r3, #0]
 80133da:	e007      	b.n	80133ec <xQueueGenericSendFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80133dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80133e0:	3301      	adds	r3, #1
 80133e2:	b2db      	uxtb	r3, r3
 80133e4:	b25a      	sxtb	r2, r3
 80133e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80133ec:	2301      	movs	r3, #1
 80133ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 80133f0:	e001      	b.n	80133f6 <xQueueGenericSendFromISR+0x102>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80133f2:	2300      	movs	r3, #0
 80133f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80133f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013400:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013404:	4618      	mov	r0, r3
 8013406:	3730      	adds	r7, #48	; 0x30
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}
 801340c:	0801b668 	.word	0x0801b668
 8013410:	0801b69c 	.word	0x0801b69c
 8013414:	0801b76c 	.word	0x0801b76c
 8013418:	0801b7bc 	.word	0x0801b7bc

0801341c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b08a      	sub	sp, #40	; 0x28
 8013420:	af00      	add	r7, sp, #0
 8013422:	60f8      	str	r0, [r7, #12]
 8013424:	60b9      	str	r1, [r7, #8]
 8013426:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013428:	2300      	movs	r3, #0
 801342a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013430:	6a3b      	ldr	r3, [r7, #32]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d105      	bne.n	8013442 <xQueueReceive+0x26>
 8013436:	f240 5204 	movw	r2, #1284	; 0x504
 801343a:	4962      	ldr	r1, [pc, #392]	; (80135c4 <xQueueReceive+0x1a8>)
 801343c:	4862      	ldr	r0, [pc, #392]	; (80135c8 <xQueueReceive+0x1ac>)
 801343e:	f7f2 f839 	bl	80054b4 <assertFail>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d103      	bne.n	8013450 <xQueueReceive+0x34>
 8013448:	6a3b      	ldr	r3, [r7, #32]
 801344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801344c:	2b00      	cmp	r3, #0
 801344e:	d101      	bne.n	8013454 <xQueueReceive+0x38>
 8013450:	2301      	movs	r3, #1
 8013452:	e000      	b.n	8013456 <xQueueReceive+0x3a>
 8013454:	2300      	movs	r3, #0
 8013456:	2b00      	cmp	r3, #0
 8013458:	d105      	bne.n	8013466 <xQueueReceive+0x4a>
 801345a:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 801345e:	4959      	ldr	r1, [pc, #356]	; (80135c4 <xQueueReceive+0x1a8>)
 8013460:	485a      	ldr	r0, [pc, #360]	; (80135cc <xQueueReceive+0x1b0>)
 8013462:	f7f2 f827 	bl	80054b4 <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013466:	f001 fbcb 	bl	8014c00 <xTaskGetSchedulerState>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d102      	bne.n	8013476 <xQueueReceive+0x5a>
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d101      	bne.n	801347a <xQueueReceive+0x5e>
 8013476:	2301      	movs	r3, #1
 8013478:	e000      	b.n	801347c <xQueueReceive+0x60>
 801347a:	2300      	movs	r3, #0
 801347c:	2b00      	cmp	r3, #0
 801347e:	d105      	bne.n	801348c <xQueueReceive+0x70>
 8013480:	f240 520d 	movw	r2, #1293	; 0x50d
 8013484:	494f      	ldr	r1, [pc, #316]	; (80135c4 <xQueueReceive+0x1a8>)
 8013486:	4852      	ldr	r0, [pc, #328]	; (80135d0 <xQueueReceive+0x1b4>)
 8013488:	f7f2 f814 	bl	80054b4 <assertFail>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801348c:	f002 fb70 	bl	8015b70 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013490:	6a3b      	ldr	r3, [r7, #32]
 8013492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013494:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013496:	69fb      	ldr	r3, [r7, #28]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d01f      	beq.n	80134dc <xQueueReceive+0xc0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801349c:	68b9      	ldr	r1, [r7, #8]
 801349e:	6a38      	ldr	r0, [r7, #32]
 80134a0:	f000 fa36 	bl	8013910 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80134a4:	69fb      	ldr	r3, [r7, #28]
 80134a6:	1e5a      	subs	r2, r3, #1
 80134a8:	6a3b      	ldr	r3, [r7, #32]
 80134aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80134ac:	6a3b      	ldr	r3, [r7, #32]
 80134ae:	691b      	ldr	r3, [r3, #16]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d00f      	beq.n	80134d4 <xQueueReceive+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80134b4:	6a3b      	ldr	r3, [r7, #32]
 80134b6:	3310      	adds	r3, #16
 80134b8:	4618      	mov	r0, r3
 80134ba:	f001 f90f 	bl	80146dc <xTaskRemoveFromEventList>
 80134be:	4603      	mov	r3, r0
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d007      	beq.n	80134d4 <xQueueReceive+0xb8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80134c4:	4b43      	ldr	r3, [pc, #268]	; (80135d4 <xQueueReceive+0x1b8>)
 80134c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134ca:	601a      	str	r2, [r3, #0]
 80134cc:	f3bf 8f4f 	dsb	sy
 80134d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80134d4:	f002 fb7a 	bl	8015bcc <vPortExitCritical>
				return pdPASS;
 80134d8:	2301      	movs	r3, #1
 80134da:	e06f      	b.n	80135bc <xQueueReceive+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d103      	bne.n	80134ea <xQueueReceive+0xce>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80134e2:	f002 fb73 	bl	8015bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80134e6:	2300      	movs	r3, #0
 80134e8:	e068      	b.n	80135bc <xQueueReceive+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80134ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d106      	bne.n	80134fe <xQueueReceive+0xe2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80134f0:	f107 0314 	add.w	r3, r7, #20
 80134f4:	4618      	mov	r0, r3
 80134f6:	f001 f953 	bl	80147a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80134fa:	2301      	movs	r3, #1
 80134fc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80134fe:	f002 fb65 	bl	8015bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013502:	f000 fdd5 	bl	80140b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013506:	f002 fb33 	bl	8015b70 <vPortEnterCritical>
 801350a:	6a3b      	ldr	r3, [r7, #32]
 801350c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013510:	b25b      	sxtb	r3, r3
 8013512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013516:	d103      	bne.n	8013520 <xQueueReceive+0x104>
 8013518:	6a3b      	ldr	r3, [r7, #32]
 801351a:	2200      	movs	r2, #0
 801351c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013520:	6a3b      	ldr	r3, [r7, #32]
 8013522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013526:	b25b      	sxtb	r3, r3
 8013528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801352c:	d103      	bne.n	8013536 <xQueueReceive+0x11a>
 801352e:	6a3b      	ldr	r3, [r7, #32]
 8013530:	2200      	movs	r2, #0
 8013532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013536:	f002 fb49 	bl	8015bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801353a:	1d3a      	adds	r2, r7, #4
 801353c:	f107 0314 	add.w	r3, r7, #20
 8013540:	4611      	mov	r1, r2
 8013542:	4618      	mov	r0, r3
 8013544:	f001 f942 	bl	80147cc <xTaskCheckForTimeOut>
 8013548:	4603      	mov	r3, r0
 801354a:	2b00      	cmp	r3, #0
 801354c:	d129      	bne.n	80135a2 <xQueueReceive+0x186>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801354e:	6a38      	ldr	r0, [r7, #32]
 8013550:	f000 fa56 	bl	8013a00 <prvIsQueueEmpty>
 8013554:	4603      	mov	r3, r0
 8013556:	2b00      	cmp	r3, #0
 8013558:	d01d      	beq.n	8013596 <xQueueReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 801355a:	6a3b      	ldr	r3, [r7, #32]
 801355c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801355e:	4a1e      	ldr	r2, [pc, #120]	; (80135d8 <xQueueReceive+0x1bc>)
 8013560:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8013564:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013566:	6a3b      	ldr	r3, [r7, #32]
 8013568:	3324      	adds	r3, #36	; 0x24
 801356a:	687a      	ldr	r2, [r7, #4]
 801356c:	4611      	mov	r1, r2
 801356e:	4618      	mov	r0, r3
 8013570:	f001 f866 	bl	8014640 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013574:	6a38      	ldr	r0, [r7, #32]
 8013576:	f000 f9f1 	bl	801395c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801357a:	f000 fda7 	bl	80140cc <xTaskResumeAll>
 801357e:	4603      	mov	r3, r0
 8013580:	2b00      	cmp	r3, #0
 8013582:	d183      	bne.n	801348c <xQueueReceive+0x70>
				{
					portYIELD_WITHIN_API();
 8013584:	4b13      	ldr	r3, [pc, #76]	; (80135d4 <xQueueReceive+0x1b8>)
 8013586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801358a:	601a      	str	r2, [r3, #0]
 801358c:	f3bf 8f4f 	dsb	sy
 8013590:	f3bf 8f6f 	isb	sy
 8013594:	e77a      	b.n	801348c <xQueueReceive+0x70>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013596:	6a38      	ldr	r0, [r7, #32]
 8013598:	f000 f9e0 	bl	801395c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801359c:	f000 fd96 	bl	80140cc <xTaskResumeAll>
 80135a0:	e774      	b.n	801348c <xQueueReceive+0x70>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80135a2:	6a38      	ldr	r0, [r7, #32]
 80135a4:	f000 f9da 	bl	801395c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80135a8:	f000 fd90 	bl	80140cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80135ac:	6a38      	ldr	r0, [r7, #32]
 80135ae:	f000 fa27 	bl	8013a00 <prvIsQueueEmpty>
 80135b2:	4603      	mov	r3, r0
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	f43f af69 	beq.w	801348c <xQueueReceive+0x70>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80135ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3728      	adds	r7, #40	; 0x28
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}
 80135c4:	0801b668 	.word	0x0801b668
 80135c8:	0801b8e0 	.word	0x0801b8e0
 80135cc:	0801b8ec 	.word	0x0801b8ec
 80135d0:	0801b804 	.word	0x0801b804
 80135d4:	e000ed04 	.word	0xe000ed04
 80135d8:	e000000c 	.word	0xe000000c

080135dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b08a      	sub	sp, #40	; 0x28
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80135e6:	2300      	movs	r3, #0
 80135e8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80135ee:	2300      	movs	r3, #0
 80135f0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80135f2:	69fb      	ldr	r3, [r7, #28]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d105      	bne.n	8013604 <xQueueSemaphoreTake+0x28>
 80135f8:	f240 5295 	movw	r2, #1429	; 0x595
 80135fc:	4975      	ldr	r1, [pc, #468]	; (80137d4 <xQueueSemaphoreTake+0x1f8>)
 80135fe:	4876      	ldr	r0, [pc, #472]	; (80137d8 <xQueueSemaphoreTake+0x1fc>)
 8013600:	f7f1 ff58 	bl	80054b4 <assertFail>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013604:	69fb      	ldr	r3, [r7, #28]
 8013606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013608:	2b00      	cmp	r3, #0
 801360a:	d005      	beq.n	8013618 <xQueueSemaphoreTake+0x3c>
 801360c:	f240 5299 	movw	r2, #1433	; 0x599
 8013610:	4970      	ldr	r1, [pc, #448]	; (80137d4 <xQueueSemaphoreTake+0x1f8>)
 8013612:	4872      	ldr	r0, [pc, #456]	; (80137dc <xQueueSemaphoreTake+0x200>)
 8013614:	f7f1 ff4e 	bl	80054b4 <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013618:	f001 faf2 	bl	8014c00 <xTaskGetSchedulerState>
 801361c:	4603      	mov	r3, r0
 801361e:	2b00      	cmp	r3, #0
 8013620:	d102      	bne.n	8013628 <xQueueSemaphoreTake+0x4c>
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d101      	bne.n	801362c <xQueueSemaphoreTake+0x50>
 8013628:	2301      	movs	r3, #1
 801362a:	e000      	b.n	801362e <xQueueSemaphoreTake+0x52>
 801362c:	2300      	movs	r3, #0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d105      	bne.n	801363e <xQueueSemaphoreTake+0x62>
 8013632:	f240 529e 	movw	r2, #1438	; 0x59e
 8013636:	4967      	ldr	r1, [pc, #412]	; (80137d4 <xQueueSemaphoreTake+0x1f8>)
 8013638:	4869      	ldr	r0, [pc, #420]	; (80137e0 <xQueueSemaphoreTake+0x204>)
 801363a:	f7f1 ff3b 	bl	80054b4 <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801363e:	f002 fa97 	bl	8015b70 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013642:	69fb      	ldr	r3, [r7, #28]
 8013644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013646:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013648:	69bb      	ldr	r3, [r7, #24]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d024      	beq.n	8013698 <xQueueSemaphoreTake+0xbc>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801364e:	69bb      	ldr	r3, [r7, #24]
 8013650:	1e5a      	subs	r2, r3, #1
 8013652:	69fb      	ldr	r3, [r7, #28]
 8013654:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013656:	69fb      	ldr	r3, [r7, #28]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d104      	bne.n	8013668 <xQueueSemaphoreTake+0x8c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801365e:	f001 fc6f 	bl	8014f40 <pvTaskIncrementMutexHeldCount>
 8013662:	4602      	mov	r2, r0
 8013664:	69fb      	ldr	r3, [r7, #28]
 8013666:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013668:	69fb      	ldr	r3, [r7, #28]
 801366a:	691b      	ldr	r3, [r3, #16]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d00f      	beq.n	8013690 <xQueueSemaphoreTake+0xb4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013670:	69fb      	ldr	r3, [r7, #28]
 8013672:	3310      	adds	r3, #16
 8013674:	4618      	mov	r0, r3
 8013676:	f001 f831 	bl	80146dc <xTaskRemoveFromEventList>
 801367a:	4603      	mov	r3, r0
 801367c:	2b00      	cmp	r3, #0
 801367e:	d007      	beq.n	8013690 <xQueueSemaphoreTake+0xb4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013680:	4b58      	ldr	r3, [pc, #352]	; (80137e4 <xQueueSemaphoreTake+0x208>)
 8013682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013686:	601a      	str	r2, [r3, #0]
 8013688:	f3bf 8f4f 	dsb	sy
 801368c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013690:	f002 fa9c 	bl	8015bcc <vPortExitCritical>
				return pdPASS;
 8013694:	2301      	movs	r3, #1
 8013696:	e098      	b.n	80137ca <xQueueSemaphoreTake+0x1ee>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d10c      	bne.n	80136b8 <xQueueSemaphoreTake+0xdc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801369e:	6a3b      	ldr	r3, [r7, #32]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d005      	beq.n	80136b0 <xQueueSemaphoreTake+0xd4>
 80136a4:	f240 52e5 	movw	r2, #1509	; 0x5e5
 80136a8:	494a      	ldr	r1, [pc, #296]	; (80137d4 <xQueueSemaphoreTake+0x1f8>)
 80136aa:	484f      	ldr	r0, [pc, #316]	; (80137e8 <xQueueSemaphoreTake+0x20c>)
 80136ac:	f7f1 ff02 	bl	80054b4 <assertFail>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80136b0:	f002 fa8c 	bl	8015bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80136b4:	2300      	movs	r3, #0
 80136b6:	e088      	b.n	80137ca <xQueueSemaphoreTake+0x1ee>
				}
				else if( xEntryTimeSet == pdFALSE )
 80136b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d106      	bne.n	80136cc <xQueueSemaphoreTake+0xf0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80136be:	f107 030c 	add.w	r3, r7, #12
 80136c2:	4618      	mov	r0, r3
 80136c4:	f001 f86c 	bl	80147a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80136c8:	2301      	movs	r3, #1
 80136ca:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80136cc:	f002 fa7e 	bl	8015bcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80136d0:	f000 fcee 	bl	80140b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80136d4:	f002 fa4c 	bl	8015b70 <vPortEnterCritical>
 80136d8:	69fb      	ldr	r3, [r7, #28]
 80136da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80136de:	b25b      	sxtb	r3, r3
 80136e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80136e4:	d103      	bne.n	80136ee <xQueueSemaphoreTake+0x112>
 80136e6:	69fb      	ldr	r3, [r7, #28]
 80136e8:	2200      	movs	r2, #0
 80136ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80136ee:	69fb      	ldr	r3, [r7, #28]
 80136f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80136f4:	b25b      	sxtb	r3, r3
 80136f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80136fa:	d103      	bne.n	8013704 <xQueueSemaphoreTake+0x128>
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	2200      	movs	r2, #0
 8013700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013704:	f002 fa62 	bl	8015bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013708:	463a      	mov	r2, r7
 801370a:	f107 030c 	add.w	r3, r7, #12
 801370e:	4611      	mov	r1, r2
 8013710:	4618      	mov	r0, r3
 8013712:	f001 f85b 	bl	80147cc <xTaskCheckForTimeOut>
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d138      	bne.n	801378e <xQueueSemaphoreTake+0x1b2>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801371c:	69f8      	ldr	r0, [r7, #28]
 801371e:	f000 f96f 	bl	8013a00 <prvIsQueueEmpty>
 8013722:	4603      	mov	r3, r0
 8013724:	2b00      	cmp	r3, #0
 8013726:	d02c      	beq.n	8013782 <xQueueSemaphoreTake+0x1a6>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8013728:	69fb      	ldr	r3, [r7, #28]
 801372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801372c:	4a2f      	ldr	r2, [pc, #188]	; (80137ec <xQueueSemaphoreTake+0x210>)
 801372e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8013732:	6013      	str	r3, [r2, #0]

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013734:	69fb      	ldr	r3, [r7, #28]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d109      	bne.n	8013750 <xQueueSemaphoreTake+0x174>
					{
						taskENTER_CRITICAL();
 801373c:	f002 fa18 	bl	8015b70 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	689b      	ldr	r3, [r3, #8]
 8013744:	4618      	mov	r0, r3
 8013746:	f001 fa79 	bl	8014c3c <xTaskPriorityInherit>
 801374a:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 801374c:	f002 fa3e 	bl	8015bcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013750:	69fb      	ldr	r3, [r7, #28]
 8013752:	3324      	adds	r3, #36	; 0x24
 8013754:	683a      	ldr	r2, [r7, #0]
 8013756:	4611      	mov	r1, r2
 8013758:	4618      	mov	r0, r3
 801375a:	f000 ff71 	bl	8014640 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801375e:	69f8      	ldr	r0, [r7, #28]
 8013760:	f000 f8fc 	bl	801395c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013764:	f000 fcb2 	bl	80140cc <xTaskResumeAll>
 8013768:	4603      	mov	r3, r0
 801376a:	2b00      	cmp	r3, #0
 801376c:	f47f af67 	bne.w	801363e <xQueueSemaphoreTake+0x62>
				{
					portYIELD_WITHIN_API();
 8013770:	4b1c      	ldr	r3, [pc, #112]	; (80137e4 <xQueueSemaphoreTake+0x208>)
 8013772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013776:	601a      	str	r2, [r3, #0]
 8013778:	f3bf 8f4f 	dsb	sy
 801377c:	f3bf 8f6f 	isb	sy
 8013780:	e75d      	b.n	801363e <xQueueSemaphoreTake+0x62>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013782:	69f8      	ldr	r0, [r7, #28]
 8013784:	f000 f8ea 	bl	801395c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013788:	f000 fca0 	bl	80140cc <xTaskResumeAll>
 801378c:	e757      	b.n	801363e <xQueueSemaphoreTake+0x62>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801378e:	69f8      	ldr	r0, [r7, #28]
 8013790:	f000 f8e4 	bl	801395c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013794:	f000 fc9a 	bl	80140cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013798:	69f8      	ldr	r0, [r7, #28]
 801379a:	f000 f931 	bl	8013a00 <prvIsQueueEmpty>
 801379e:	4603      	mov	r3, r0
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f43f af4c 	beq.w	801363e <xQueueSemaphoreTake+0x62>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80137a6:	6a3b      	ldr	r3, [r7, #32]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d00d      	beq.n	80137c8 <xQueueSemaphoreTake+0x1ec>
					{
						taskENTER_CRITICAL();
 80137ac:	f002 f9e0 	bl	8015b70 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80137b0:	69f8      	ldr	r0, [r7, #28]
 80137b2:	f000 f82b 	bl	801380c <prvGetDisinheritPriorityAfterTimeout>
 80137b6:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80137b8:	69fb      	ldr	r3, [r7, #28]
 80137ba:	689b      	ldr	r3, [r3, #8]
 80137bc:	6979      	ldr	r1, [r7, #20]
 80137be:	4618      	mov	r0, r3
 80137c0:	f001 fb34 	bl	8014e2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80137c4:	f002 fa02 	bl	8015bcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80137c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3728      	adds	r7, #40	; 0x28
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	0801b668 	.word	0x0801b668
 80137d8:	0801b8e0 	.word	0x0801b8e0
 80137dc:	0801b85c 	.word	0x0801b85c
 80137e0:	0801b804 	.word	0x0801b804
 80137e4:	e000ed04 	.word	0xe000ed04
 80137e8:	0801b940 	.word	0x0801b940
 80137ec:	e000000c 	.word	0xe000000c

080137f0 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 80137f0:	b480      	push	{r7}
 80137f2:	b083      	sub	sp, #12
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	683a      	ldr	r2, [r7, #0]
 80137fe:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8013800:	bf00      	nop
 8013802:	370c      	adds	r7, #12
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr

0801380c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801380c:	b480      	push	{r7}
 801380e:	b085      	sub	sp, #20
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013818:	2b00      	cmp	r3, #0
 801381a:	d006      	beq.n	801382a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	f1c3 0314 	rsb	r3, r3, #20
 8013826:	60fb      	str	r3, [r7, #12]
 8013828:	e001      	b.n	801382e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801382a:	2300      	movs	r3, #0
 801382c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801382e:	68fb      	ldr	r3, [r7, #12]
	}
 8013830:	4618      	mov	r0, r3
 8013832:	3714      	adds	r7, #20
 8013834:	46bd      	mov	sp, r7
 8013836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383a:	4770      	bx	lr

0801383c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b086      	sub	sp, #24
 8013840:	af00      	add	r7, sp, #0
 8013842:	60f8      	str	r0, [r7, #12]
 8013844:	60b9      	str	r1, [r7, #8]
 8013846:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013848:	2300      	movs	r3, #0
 801384a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013850:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013856:	2b00      	cmp	r3, #0
 8013858:	d10d      	bne.n	8013876 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d14d      	bne.n	80138fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	689b      	ldr	r3, [r3, #8]
 8013866:	4618      	mov	r0, r3
 8013868:	f001 fa5e 	bl	8014d28 <xTaskPriorityDisinherit>
 801386c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	2200      	movs	r2, #0
 8013872:	609a      	str	r2, [r3, #8]
 8013874:	e043      	b.n	80138fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d119      	bne.n	80138b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	6858      	ldr	r0, [r3, #4]
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013884:	461a      	mov	r2, r3
 8013886:	68b9      	ldr	r1, [r7, #8]
 8013888:	f004 f933 	bl	8017af2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	685a      	ldr	r2, [r3, #4]
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013894:	441a      	add	r2, r3
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	685a      	ldr	r2, [r3, #4]
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	689b      	ldr	r3, [r3, #8]
 80138a2:	429a      	cmp	r2, r3
 80138a4:	d32b      	bcc.n	80138fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	681a      	ldr	r2, [r3, #0]
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	605a      	str	r2, [r3, #4]
 80138ae:	e026      	b.n	80138fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	68d8      	ldr	r0, [r3, #12]
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138b8:	461a      	mov	r2, r3
 80138ba:	68b9      	ldr	r1, [r7, #8]
 80138bc:	f004 f919 	bl	8017af2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	68da      	ldr	r2, [r3, #12]
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138c8:	425b      	negs	r3, r3
 80138ca:	441a      	add	r2, r3
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	68da      	ldr	r2, [r3, #12]
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	429a      	cmp	r2, r3
 80138da:	d207      	bcs.n	80138ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	689a      	ldr	r2, [r3, #8]
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138e4:	425b      	negs	r3, r3
 80138e6:	441a      	add	r2, r3
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2b02      	cmp	r3, #2
 80138f0:	d105      	bne.n	80138fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d002      	beq.n	80138fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80138f8:	693b      	ldr	r3, [r7, #16]
 80138fa:	3b01      	subs	r3, #1
 80138fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	1c5a      	adds	r2, r3, #1
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013906:	697b      	ldr	r3, [r7, #20]
}
 8013908:	4618      	mov	r0, r3
 801390a:	3718      	adds	r7, #24
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}

08013910 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b082      	sub	sp, #8
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801391e:	2b00      	cmp	r3, #0
 8013920:	d018      	beq.n	8013954 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	68da      	ldr	r2, [r3, #12]
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801392a:	441a      	add	r2, r3
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	68da      	ldr	r2, [r3, #12]
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	689b      	ldr	r3, [r3, #8]
 8013938:	429a      	cmp	r2, r3
 801393a:	d303      	bcc.n	8013944 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	68d9      	ldr	r1, [r3, #12]
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801394c:	461a      	mov	r2, r3
 801394e:	6838      	ldr	r0, [r7, #0]
 8013950:	f004 f8cf 	bl	8017af2 <memcpy>
	}
}
 8013954:	bf00      	nop
 8013956:	3708      	adds	r7, #8
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}

0801395c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b084      	sub	sp, #16
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013964:	f002 f904 	bl	8015b70 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801396e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013970:	e011      	b.n	8013996 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013976:	2b00      	cmp	r3, #0
 8013978:	d012      	beq.n	80139a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	3324      	adds	r3, #36	; 0x24
 801397e:	4618      	mov	r0, r3
 8013980:	f000 feac 	bl	80146dc <xTaskRemoveFromEventList>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d001      	beq.n	801398e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801398a:	f000 ff7d 	bl	8014888 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801398e:	7bfb      	ldrb	r3, [r7, #15]
 8013990:	3b01      	subs	r3, #1
 8013992:	b2db      	uxtb	r3, r3
 8013994:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801399a:	2b00      	cmp	r3, #0
 801399c:	dce9      	bgt.n	8013972 <prvUnlockQueue+0x16>
 801399e:	e000      	b.n	80139a2 <prvUnlockQueue+0x46>
					break;
 80139a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	22ff      	movs	r2, #255	; 0xff
 80139a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80139aa:	f002 f90f 	bl	8015bcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80139ae:	f002 f8df 	bl	8015b70 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80139b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80139ba:	e011      	b.n	80139e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	691b      	ldr	r3, [r3, #16]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d012      	beq.n	80139ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	3310      	adds	r3, #16
 80139c8:	4618      	mov	r0, r3
 80139ca:	f000 fe87 	bl	80146dc <xTaskRemoveFromEventList>
 80139ce:	4603      	mov	r3, r0
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d001      	beq.n	80139d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80139d4:	f000 ff58 	bl	8014888 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80139d8:	7bbb      	ldrb	r3, [r7, #14]
 80139da:	3b01      	subs	r3, #1
 80139dc:	b2db      	uxtb	r3, r3
 80139de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80139e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	dce9      	bgt.n	80139bc <prvUnlockQueue+0x60>
 80139e8:	e000      	b.n	80139ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80139ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	22ff      	movs	r2, #255	; 0xff
 80139f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80139f4:	f002 f8ea 	bl	8015bcc <vPortExitCritical>
}
 80139f8:	bf00      	nop
 80139fa:	3710      	adds	r7, #16
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}

08013a00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b084      	sub	sp, #16
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013a08:	f002 f8b2 	bl	8015b70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d102      	bne.n	8013a1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013a14:	2301      	movs	r3, #1
 8013a16:	60fb      	str	r3, [r7, #12]
 8013a18:	e001      	b.n	8013a1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013a1e:	f002 f8d5 	bl	8015bcc <vPortExitCritical>

	return xReturn;
 8013a22:	68fb      	ldr	r3, [r7, #12]
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3710      	adds	r7, #16
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}

08013a2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b084      	sub	sp, #16
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013a34:	f002 f89c 	bl	8015b70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a40:	429a      	cmp	r2, r3
 8013a42:	d102      	bne.n	8013a4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013a44:	2301      	movs	r3, #1
 8013a46:	60fb      	str	r3, [r7, #12]
 8013a48:	e001      	b.n	8013a4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013a4e:	f002 f8bd 	bl	8015bcc <vPortExitCritical>

	return xReturn;
 8013a52:	68fb      	ldr	r3, [r7, #12]
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	3710      	adds	r7, #16
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}

08013a5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013a5c:	b480      	push	{r7}
 8013a5e:	b085      	sub	sp, #20
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
 8013a64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013a66:	2300      	movs	r3, #0
 8013a68:	60fb      	str	r3, [r7, #12]
 8013a6a:	e014      	b.n	8013a96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013a6c:	4a0f      	ldr	r2, [pc, #60]	; (8013aac <vQueueAddToRegistry+0x50>)
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d10b      	bne.n	8013a90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013a78:	490c      	ldr	r1, [pc, #48]	; (8013aac <vQueueAddToRegistry+0x50>)
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	683a      	ldr	r2, [r7, #0]
 8013a7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013a82:	4a0a      	ldr	r2, [pc, #40]	; (8013aac <vQueueAddToRegistry+0x50>)
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	00db      	lsls	r3, r3, #3
 8013a88:	4413      	add	r3, r2
 8013a8a:	687a      	ldr	r2, [r7, #4]
 8013a8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013a8e:	e006      	b.n	8013a9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	3301      	adds	r3, #1
 8013a94:	60fb      	str	r3, [r7, #12]
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	2b09      	cmp	r3, #9
 8013a9a:	d9e7      	bls.n	8013a6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013a9c:	bf00      	nop
 8013a9e:	bf00      	nop
 8013aa0:	3714      	adds	r7, #20
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa8:	4770      	bx	lr
 8013aaa:	bf00      	nop
 8013aac:	20007f00 	.word	0x20007f00

08013ab0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b086      	sub	sp, #24
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	60f8      	str	r0, [r7, #12]
 8013ab8:	60b9      	str	r1, [r7, #8]
 8013aba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013ac0:	f002 f856 	bl	8015b70 <vPortEnterCritical>
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013aca:	b25b      	sxtb	r3, r3
 8013acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ad0:	d103      	bne.n	8013ada <vQueueWaitForMessageRestricted+0x2a>
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ae0:	b25b      	sxtb	r3, r3
 8013ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ae6:	d103      	bne.n	8013af0 <vQueueWaitForMessageRestricted+0x40>
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	2200      	movs	r2, #0
 8013aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013af0:	f002 f86c 	bl	8015bcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d106      	bne.n	8013b0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	3324      	adds	r3, #36	; 0x24
 8013b00:	687a      	ldr	r2, [r7, #4]
 8013b02:	68b9      	ldr	r1, [r7, #8]
 8013b04:	4618      	mov	r0, r3
 8013b06:	f000 fdbf 	bl	8014688 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013b0a:	6978      	ldr	r0, [r7, #20]
 8013b0c:	f7ff ff26 	bl	801395c <prvUnlockQueue>
	}
 8013b10:	bf00      	nop
 8013b12:	3718      	adds	r7, #24
 8013b14:	46bd      	mov	sp, r7
 8013b16:	bd80      	pop	{r7, pc}

08013b18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b08c      	sub	sp, #48	; 0x30
 8013b1c:	af04      	add	r7, sp, #16
 8013b1e:	60f8      	str	r0, [r7, #12]
 8013b20:	60b9      	str	r1, [r7, #8]
 8013b22:	607a      	str	r2, [r7, #4]
 8013b24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d105      	bne.n	8013b38 <xTaskCreateStatic+0x20>
 8013b2c:	f44f 7214 	mov.w	r2, #592	; 0x250
 8013b30:	4920      	ldr	r1, [pc, #128]	; (8013bb4 <xTaskCreateStatic+0x9c>)
 8013b32:	4821      	ldr	r0, [pc, #132]	; (8013bb8 <xTaskCreateStatic+0xa0>)
 8013b34:	f7f1 fcbe 	bl	80054b4 <assertFail>
		configASSERT( pxTaskBuffer != NULL );
 8013b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d105      	bne.n	8013b4a <xTaskCreateStatic+0x32>
 8013b3e:	f240 2251 	movw	r2, #593	; 0x251
 8013b42:	491c      	ldr	r1, [pc, #112]	; (8013bb4 <xTaskCreateStatic+0x9c>)
 8013b44:	481d      	ldr	r0, [pc, #116]	; (8013bbc <xTaskCreateStatic+0xa4>)
 8013b46:	f7f1 fcb5 	bl	80054b4 <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013b4a:	23b8      	movs	r3, #184	; 0xb8
 8013b4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	2bb8      	cmp	r3, #184	; 0xb8
 8013b52:	d005      	beq.n	8013b60 <xTaskCreateStatic+0x48>
 8013b54:	f240 2259 	movw	r2, #601	; 0x259
 8013b58:	4916      	ldr	r1, [pc, #88]	; (8013bb4 <xTaskCreateStatic+0x9c>)
 8013b5a:	4819      	ldr	r0, [pc, #100]	; (8013bc0 <xTaskCreateStatic+0xa8>)
 8013b5c:	f7f1 fcaa 	bl	80054b4 <assertFail>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013b60:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d01e      	beq.n	8013ba6 <xTaskCreateStatic+0x8e>
 8013b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d01b      	beq.n	8013ba6 <xTaskCreateStatic+0x8e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b70:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013b72:	69fb      	ldr	r3, [r7, #28]
 8013b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b76:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013b78:	69fb      	ldr	r3, [r7, #28]
 8013b7a:	2202      	movs	r2, #2
 8013b7c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013b80:	2300      	movs	r3, #0
 8013b82:	9303      	str	r3, [sp, #12]
 8013b84:	69fb      	ldr	r3, [r7, #28]
 8013b86:	9302      	str	r3, [sp, #8]
 8013b88:	f107 0318 	add.w	r3, r7, #24
 8013b8c:	9301      	str	r3, [sp, #4]
 8013b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b90:	9300      	str	r3, [sp, #0]
 8013b92:	683b      	ldr	r3, [r7, #0]
 8013b94:	687a      	ldr	r2, [r7, #4]
 8013b96:	68b9      	ldr	r1, [r7, #8]
 8013b98:	68f8      	ldr	r0, [r7, #12]
 8013b9a:	f000 f859 	bl	8013c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013b9e:	69f8      	ldr	r0, [r7, #28]
 8013ba0:	f000 f904 	bl	8013dac <prvAddNewTaskToReadyList>
 8013ba4:	e001      	b.n	8013baa <xTaskCreateStatic+0x92>
		}
		else
		{
			xReturn = NULL;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013baa:	69bb      	ldr	r3, [r7, #24]
	}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3720      	adds	r7, #32
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}
 8013bb4:	0801b9d0 	.word	0x0801b9d0
 8013bb8:	0801ba04 	.word	0x0801ba04
 8013bbc:	0801ba1c 	.word	0x0801ba1c
 8013bc0:	0801ba34 	.word	0x0801ba34

08013bc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b08c      	sub	sp, #48	; 0x30
 8013bc8:	af04      	add	r7, sp, #16
 8013bca:	60f8      	str	r0, [r7, #12]
 8013bcc:	60b9      	str	r1, [r7, #8]
 8013bce:	603b      	str	r3, [r7, #0]
 8013bd0:	4613      	mov	r3, r2
 8013bd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013bd4:	88fb      	ldrh	r3, [r7, #6]
 8013bd6:	009b      	lsls	r3, r3, #2
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f002 f8d9 	bl	8015d90 <pvPortMalloc>
 8013bde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d00e      	beq.n	8013c04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013be6:	20b8      	movs	r0, #184	; 0xb8
 8013be8:	f002 f8d2 	bl	8015d90 <pvPortMalloc>
 8013bec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013bee:	69fb      	ldr	r3, [r7, #28]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d003      	beq.n	8013bfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013bf4:	69fb      	ldr	r3, [r7, #28]
 8013bf6:	697a      	ldr	r2, [r7, #20]
 8013bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8013bfa:	e005      	b.n	8013c08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013bfc:	6978      	ldr	r0, [r7, #20]
 8013bfe:	f002 f989 	bl	8015f14 <vPortFree>
 8013c02:	e001      	b.n	8013c08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013c04:	2300      	movs	r3, #0
 8013c06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013c08:	69fb      	ldr	r3, [r7, #28]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d017      	beq.n	8013c3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013c0e:	69fb      	ldr	r3, [r7, #28]
 8013c10:	2200      	movs	r2, #0
 8013c12:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013c16:	88fa      	ldrh	r2, [r7, #6]
 8013c18:	2300      	movs	r3, #0
 8013c1a:	9303      	str	r3, [sp, #12]
 8013c1c:	69fb      	ldr	r3, [r7, #28]
 8013c1e:	9302      	str	r3, [sp, #8]
 8013c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c22:	9301      	str	r3, [sp, #4]
 8013c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c26:	9300      	str	r3, [sp, #0]
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	68b9      	ldr	r1, [r7, #8]
 8013c2c:	68f8      	ldr	r0, [r7, #12]
 8013c2e:	f000 f80f 	bl	8013c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013c32:	69f8      	ldr	r0, [r7, #28]
 8013c34:	f000 f8ba 	bl	8013dac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013c38:	2301      	movs	r3, #1
 8013c3a:	61bb      	str	r3, [r7, #24]
 8013c3c:	e002      	b.n	8013c44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013c44:	69bb      	ldr	r3, [r7, #24]
	}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3720      	adds	r7, #32
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
	...

08013c50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b086      	sub	sp, #24
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	60f8      	str	r0, [r7, #12]
 8013c58:	60b9      	str	r1, [r7, #8]
 8013c5a:	607a      	str	r2, [r7, #4]
 8013c5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	009b      	lsls	r3, r3, #2
 8013c66:	461a      	mov	r2, r3
 8013c68:	21a5      	movs	r1, #165	; 0xa5
 8013c6a:	f003 fe3d 	bl	80178e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013c78:	3b01      	subs	r3, #1
 8013c7a:	009b      	lsls	r3, r3, #2
 8013c7c:	4413      	add	r3, r2
 8013c7e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013c80:	693b      	ldr	r3, [r7, #16]
 8013c82:	f023 0307 	bic.w	r3, r3, #7
 8013c86:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013c88:	693b      	ldr	r3, [r7, #16]
 8013c8a:	f003 0307 	and.w	r3, r3, #7
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d005      	beq.n	8013c9e <prvInitialiseNewTask+0x4e>
 8013c92:	f44f 7259 	mov.w	r2, #868	; 0x364
 8013c96:	4940      	ldr	r1, [pc, #256]	; (8013d98 <prvInitialiseNewTask+0x148>)
 8013c98:	4840      	ldr	r0, [pc, #256]	; (8013d9c <prvInitialiseNewTask+0x14c>)
 8013c9a:	f7f1 fc0b 	bl	80054b4 <assertFail>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8013c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca0:	693a      	ldr	r2, [r7, #16]
 8013ca2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d01f      	beq.n	8013cea <prvInitialiseNewTask+0x9a>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013caa:	2300      	movs	r3, #0
 8013cac:	617b      	str	r3, [r7, #20]
 8013cae:	e012      	b.n	8013cd6 <prvInitialiseNewTask+0x86>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013cb0:	68ba      	ldr	r2, [r7, #8]
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	4413      	add	r3, r2
 8013cb6:	7819      	ldrb	r1, [r3, #0]
 8013cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	3334      	adds	r3, #52	; 0x34
 8013cc0:	460a      	mov	r2, r1
 8013cc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013cc4:	68ba      	ldr	r2, [r7, #8]
 8013cc6:	697b      	ldr	r3, [r7, #20]
 8013cc8:	4413      	add	r3, r2
 8013cca:	781b      	ldrb	r3, [r3, #0]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d006      	beq.n	8013cde <prvInitialiseNewTask+0x8e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	3301      	adds	r3, #1
 8013cd4:	617b      	str	r3, [r7, #20]
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	2b0f      	cmp	r3, #15
 8013cda:	d9e9      	bls.n	8013cb0 <prvInitialiseNewTask+0x60>
 8013cdc:	e000      	b.n	8013ce0 <prvInitialiseNewTask+0x90>
			{
				break;
 8013cde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013ce8:	e003      	b.n	8013cf2 <prvInitialiseNewTask+0xa2>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cec:	2200      	movs	r2, #0
 8013cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013cf2:	6a3b      	ldr	r3, [r7, #32]
 8013cf4:	2b13      	cmp	r3, #19
 8013cf6:	d901      	bls.n	8013cfc <prvInitialiseNewTask+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013cf8:	2313      	movs	r3, #19
 8013cfa:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cfe:	6a3a      	ldr	r2, [r7, #32]
 8013d00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d04:	6a3a      	ldr	r2, [r7, #32]
 8013d06:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8013d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d10:	3304      	adds	r3, #4
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7fe ffce 	bl	8012cb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d1a:	3318      	adds	r3, #24
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7fe ffc9 	bl	8012cb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d28:	6a3b      	ldr	r3, [r7, #32]
 8013d2a:	f1c3 0214 	rsb	r2, r3, #20
 8013d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8013d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d40:	2200      	movs	r2, #0
 8013d42:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d46:	2200      	movs	r2, #0
 8013d48:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d4e:	2200      	movs	r2, #0
 8013d50:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d56:	3360      	adds	r3, #96	; 0x60
 8013d58:	224c      	movs	r2, #76	; 0x4c
 8013d5a:	2100      	movs	r1, #0
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f003 fdc3 	bl	80178e8 <memset>
 8013d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d64:	4a0e      	ldr	r2, [pc, #56]	; (8013da0 <prvInitialiseNewTask+0x150>)
 8013d66:	665a      	str	r2, [r3, #100]	; 0x64
 8013d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d6a:	4a0e      	ldr	r2, [pc, #56]	; (8013da4 <prvInitialiseNewTask+0x154>)
 8013d6c:	669a      	str	r2, [r3, #104]	; 0x68
 8013d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d70:	4a0d      	ldr	r2, [pc, #52]	; (8013da8 <prvInitialiseNewTask+0x158>)
 8013d72:	66da      	str	r2, [r3, #108]	; 0x6c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013d74:	683a      	ldr	r2, [r7, #0]
 8013d76:	68f9      	ldr	r1, [r7, #12]
 8013d78:	6938      	ldr	r0, [r7, #16]
 8013d7a:	f001 fdc9 	bl	8015910 <pxPortInitialiseStack>
 8013d7e:	4602      	mov	r2, r0
 8013d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d002      	beq.n	8013d90 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013d90:	bf00      	nop
 8013d92:	3718      	adds	r7, #24
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}
 8013d98:	0801b9d0 	.word	0x0801b9d0
 8013d9c:	0801ba50 	.word	0x0801ba50
 8013da0:	2000db60 	.word	0x2000db60
 8013da4:	2000dbc8 	.word	0x2000dbc8
 8013da8:	2000dc30 	.word	0x2000dc30

08013dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013db4:	f001 fedc 	bl	8015b70 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013db8:	4b2c      	ldr	r3, [pc, #176]	; (8013e6c <prvAddNewTaskToReadyList+0xc0>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	4a2b      	ldr	r2, [pc, #172]	; (8013e6c <prvAddNewTaskToReadyList+0xc0>)
 8013dc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013dc2:	4b2b      	ldr	r3, [pc, #172]	; (8013e70 <prvAddNewTaskToReadyList+0xc4>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d109      	bne.n	8013dde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013dca:	4a29      	ldr	r2, [pc, #164]	; (8013e70 <prvAddNewTaskToReadyList+0xc4>)
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013dd0:	4b26      	ldr	r3, [pc, #152]	; (8013e6c <prvAddNewTaskToReadyList+0xc0>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	2b01      	cmp	r3, #1
 8013dd6:	d110      	bne.n	8013dfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013dd8:	f000 fd7c 	bl	80148d4 <prvInitialiseTaskLists>
 8013ddc:	e00d      	b.n	8013dfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013dde:	4b25      	ldr	r3, [pc, #148]	; (8013e74 <prvAddNewTaskToReadyList+0xc8>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d109      	bne.n	8013dfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013de6:	4b22      	ldr	r3, [pc, #136]	; (8013e70 <prvAddNewTaskToReadyList+0xc4>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d802      	bhi.n	8013dfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013df4:	4a1e      	ldr	r2, [pc, #120]	; (8013e70 <prvAddNewTaskToReadyList+0xc4>)
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013dfa:	4b1f      	ldr	r3, [pc, #124]	; (8013e78 <prvAddNewTaskToReadyList+0xcc>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	3301      	adds	r3, #1
 8013e00:	4a1d      	ldr	r2, [pc, #116]	; (8013e78 <prvAddNewTaskToReadyList+0xcc>)
 8013e02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013e04:	4b1c      	ldr	r3, [pc, #112]	; (8013e78 <prvAddNewTaskToReadyList+0xcc>)
 8013e06:	681a      	ldr	r2, [r3, #0]
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e10:	2201      	movs	r2, #1
 8013e12:	409a      	lsls	r2, r3
 8013e14:	4b19      	ldr	r3, [pc, #100]	; (8013e7c <prvAddNewTaskToReadyList+0xd0>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	4313      	orrs	r3, r2
 8013e1a:	4a18      	ldr	r2, [pc, #96]	; (8013e7c <prvAddNewTaskToReadyList+0xd0>)
 8013e1c:	6013      	str	r3, [r2, #0]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e22:	4613      	mov	r3, r2
 8013e24:	009b      	lsls	r3, r3, #2
 8013e26:	4413      	add	r3, r2
 8013e28:	009b      	lsls	r3, r3, #2
 8013e2a:	4a15      	ldr	r2, [pc, #84]	; (8013e80 <prvAddNewTaskToReadyList+0xd4>)
 8013e2c:	441a      	add	r2, r3
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	3304      	adds	r3, #4
 8013e32:	4619      	mov	r1, r3
 8013e34:	4610      	mov	r0, r2
 8013e36:	f7fe ff4a 	bl	8012cce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013e3a:	f001 fec7 	bl	8015bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013e3e:	4b0d      	ldr	r3, [pc, #52]	; (8013e74 <prvAddNewTaskToReadyList+0xc8>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d00e      	beq.n	8013e64 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013e46:	4b0a      	ldr	r3, [pc, #40]	; (8013e70 <prvAddNewTaskToReadyList+0xc4>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e50:	429a      	cmp	r2, r3
 8013e52:	d207      	bcs.n	8013e64 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013e54:	4b0b      	ldr	r3, [pc, #44]	; (8013e84 <prvAddNewTaskToReadyList+0xd8>)
 8013e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e5a:	601a      	str	r2, [r3, #0]
 8013e5c:	f3bf 8f4f 	dsb	sy
 8013e60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013e64:	bf00      	nop
 8013e66:	3708      	adds	r7, #8
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}
 8013e6c:	20008158 	.word	0x20008158
 8013e70:	20007f50 	.word	0x20007f50
 8013e74:	20008164 	.word	0x20008164
 8013e78:	20008174 	.word	0x20008174
 8013e7c:	20008160 	.word	0x20008160
 8013e80:	20007f54 	.word	0x20007f54
 8013e84:	e000ed04 	.word	0xe000ed04

08013e88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b084      	sub	sp, #16
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013e90:	2300      	movs	r3, #0
 8013e92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d012      	beq.n	8013ec0 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013e9a:	4b11      	ldr	r3, [pc, #68]	; (8013ee0 <vTaskDelay+0x58>)
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d005      	beq.n	8013eae <vTaskDelay+0x26>
 8013ea2:	f240 5244 	movw	r2, #1348	; 0x544
 8013ea6:	490f      	ldr	r1, [pc, #60]	; (8013ee4 <vTaskDelay+0x5c>)
 8013ea8:	480f      	ldr	r0, [pc, #60]	; (8013ee8 <vTaskDelay+0x60>)
 8013eaa:	f7f1 fb03 	bl	80054b4 <assertFail>
			vTaskSuspendAll();
 8013eae:	f000 f8ff 	bl	80140b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013eb2:	2100      	movs	r1, #0
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f001 f8c9 	bl	801504c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013eba:	f000 f907 	bl	80140cc <xTaskResumeAll>
 8013ebe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d107      	bne.n	8013ed6 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
 8013ec6:	4b09      	ldr	r3, [pc, #36]	; (8013eec <vTaskDelay+0x64>)
 8013ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ecc:	601a      	str	r2, [r3, #0]
 8013ece:	f3bf 8f4f 	dsb	sy
 8013ed2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ed6:	bf00      	nop
 8013ed8:	3710      	adds	r7, #16
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	20008180 	.word	0x20008180
 8013ee4:	0801b9d0 	.word	0x0801b9d0
 8013ee8:	0801babc 	.word	0x0801babc
 8013eec:	e000ed04 	.word	0xe000ed04

08013ef0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b088      	sub	sp, #32
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8013efc:	69bb      	ldr	r3, [r7, #24]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d105      	bne.n	8013f0e <eTaskGetState+0x1e>
 8013f02:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8013f06:	4926      	ldr	r1, [pc, #152]	; (8013fa0 <eTaskGetState+0xb0>)
 8013f08:	4826      	ldr	r0, [pc, #152]	; (8013fa4 <eTaskGetState+0xb4>)
 8013f0a:	f7f1 fad3 	bl	80054b4 <assertFail>

		if( pxTCB == pxCurrentTCB )
 8013f0e:	4b26      	ldr	r3, [pc, #152]	; (8013fa8 <eTaskGetState+0xb8>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	69ba      	ldr	r2, [r7, #24]
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d102      	bne.n	8013f1e <eTaskGetState+0x2e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8013f18:	2300      	movs	r3, #0
 8013f1a:	77fb      	strb	r3, [r7, #31]
 8013f1c:	e03a      	b.n	8013f94 <eTaskGetState+0xa4>
		}
		else
		{
			taskENTER_CRITICAL();
 8013f1e:	f001 fe27 	bl	8015b70 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8013f22:	69bb      	ldr	r3, [r7, #24]
 8013f24:	695b      	ldr	r3, [r3, #20]
 8013f26:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8013f28:	4b20      	ldr	r3, [pc, #128]	; (8013fac <eTaskGetState+0xbc>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8013f2e:	4b20      	ldr	r3, [pc, #128]	; (8013fb0 <eTaskGetState+0xc0>)
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8013f34:	f001 fe4a 	bl	8015bcc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8013f38:	697a      	ldr	r2, [r7, #20]
 8013f3a:	693b      	ldr	r3, [r7, #16]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d003      	beq.n	8013f48 <eTaskGetState+0x58>
 8013f40:	697a      	ldr	r2, [r7, #20]
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	429a      	cmp	r2, r3
 8013f46:	d102      	bne.n	8013f4e <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8013f48:	2302      	movs	r3, #2
 8013f4a:	77fb      	strb	r3, [r7, #31]
 8013f4c:	e022      	b.n	8013f94 <eTaskGetState+0xa4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8013f4e:	697b      	ldr	r3, [r7, #20]
 8013f50:	4a18      	ldr	r2, [pc, #96]	; (8013fb4 <eTaskGetState+0xc4>)
 8013f52:	4293      	cmp	r3, r2
 8013f54:	d112      	bne.n	8013f7c <eTaskGetState+0x8c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8013f56:	69bb      	ldr	r3, [r7, #24]
 8013f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d10b      	bne.n	8013f76 <eTaskGetState+0x86>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013f5e:	69bb      	ldr	r3, [r7, #24]
 8013f60:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8013f64:	b2db      	uxtb	r3, r3
 8013f66:	2b01      	cmp	r3, #1
 8013f68:	d102      	bne.n	8013f70 <eTaskGetState+0x80>
							{
								eReturn = eBlocked;
 8013f6a:	2302      	movs	r3, #2
 8013f6c:	77fb      	strb	r3, [r7, #31]
 8013f6e:	e011      	b.n	8013f94 <eTaskGetState+0xa4>
							}
							else
							{
								eReturn = eSuspended;
 8013f70:	2303      	movs	r3, #3
 8013f72:	77fb      	strb	r3, [r7, #31]
 8013f74:	e00e      	b.n	8013f94 <eTaskGetState+0xa4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8013f76:	2302      	movs	r3, #2
 8013f78:	77fb      	strb	r3, [r7, #31]
 8013f7a:	e00b      	b.n	8013f94 <eTaskGetState+0xa4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	4a0e      	ldr	r2, [pc, #56]	; (8013fb8 <eTaskGetState+0xc8>)
 8013f80:	4293      	cmp	r3, r2
 8013f82:	d002      	beq.n	8013f8a <eTaskGetState+0x9a>
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d102      	bne.n	8013f90 <eTaskGetState+0xa0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8013f8a:	2304      	movs	r3, #4
 8013f8c:	77fb      	strb	r3, [r7, #31]
 8013f8e:	e001      	b.n	8013f94 <eTaskGetState+0xa4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8013f90:	2301      	movs	r3, #1
 8013f92:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8013f94:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013f96:	4618      	mov	r0, r3
 8013f98:	3720      	adds	r7, #32
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}
 8013f9e:	bf00      	nop
 8013fa0:	0801b9d0 	.word	0x0801b9d0
 8013fa4:	0801bb04 	.word	0x0801bb04
 8013fa8:	20007f50 	.word	0x20007f50
 8013fac:	2000810c 	.word	0x2000810c
 8013fb0:	20008110 	.word	0x20008110
 8013fb4:	20008140 	.word	0x20008140
 8013fb8:	20008128 	.word	0x20008128

08013fbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b08a      	sub	sp, #40	; 0x28
 8013fc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013fca:	1d3a      	adds	r2, r7, #4
 8013fcc:	f107 0108 	add.w	r1, r7, #8
 8013fd0:	f107 030c 	add.w	r3, r7, #12
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7f4 fc69 	bl	80088ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013fda:	6879      	ldr	r1, [r7, #4]
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	68fa      	ldr	r2, [r7, #12]
 8013fe0:	9202      	str	r2, [sp, #8]
 8013fe2:	9301      	str	r3, [sp, #4]
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	9300      	str	r3, [sp, #0]
 8013fe8:	2300      	movs	r3, #0
 8013fea:	460a      	mov	r2, r1
 8013fec:	4925      	ldr	r1, [pc, #148]	; (8014084 <vTaskStartScheduler+0xc8>)
 8013fee:	4826      	ldr	r0, [pc, #152]	; (8014088 <vTaskStartScheduler+0xcc>)
 8013ff0:	f7ff fd92 	bl	8013b18 <xTaskCreateStatic>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	4a25      	ldr	r2, [pc, #148]	; (801408c <vTaskStartScheduler+0xd0>)
 8013ff8:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013ffa:	4b24      	ldr	r3, [pc, #144]	; (801408c <vTaskStartScheduler+0xd0>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d002      	beq.n	8014008 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8014002:	2301      	movs	r3, #1
 8014004:	617b      	str	r3, [r7, #20]
 8014006:	e001      	b.n	801400c <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8014008:	2300      	movs	r3, #0
 801400a:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	2b01      	cmp	r3, #1
 8014010:	d102      	bne.n	8014018 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8014012:	f001 f881 	bl	8015118 <xTimerCreateTimerTask>
 8014016:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014018:	697b      	ldr	r3, [r7, #20]
 801401a:	2b01      	cmp	r3, #1
 801401c:	d123      	bne.n	8014066 <vTaskStartScheduler+0xaa>
	__asm volatile
 801401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014022:	f383 8811 	msr	BASEPRI, r3
 8014026:	f3bf 8f6f 	isb	sy
 801402a:	f3bf 8f4f 	dsb	sy
 801402e:	613b      	str	r3, [r7, #16]
}
 8014030:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014032:	4b17      	ldr	r3, [pc, #92]	; (8014090 <vTaskStartScheduler+0xd4>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	3360      	adds	r3, #96	; 0x60
 8014038:	4a16      	ldr	r2, [pc, #88]	; (8014094 <vTaskStartScheduler+0xd8>)
 801403a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801403c:	4b16      	ldr	r3, [pc, #88]	; (8014098 <vTaskStartScheduler+0xdc>)
 801403e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014042:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014044:	4b15      	ldr	r3, [pc, #84]	; (801409c <vTaskStartScheduler+0xe0>)
 8014046:	2201      	movs	r2, #1
 8014048:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801404a:	4b15      	ldr	r3, [pc, #84]	; (80140a0 <vTaskStartScheduler+0xe4>)
 801404c:	2200      	movs	r2, #0
 801404e:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8014050:	f7f4 fc12 	bl	8008878 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 8014054:	4b0e      	ldr	r3, [pc, #56]	; (8014090 <vTaskStartScheduler+0xd4>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	3334      	adds	r3, #52	; 0x34
 801405a:	4a12      	ldr	r2, [pc, #72]	; (80140a4 <vTaskStartScheduler+0xe8>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	6013      	str	r3, [r2, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014060:	f001 fcde 	bl	8015a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014064:	e009      	b.n	801407a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801406c:	d105      	bne.n	801407a <vTaskStartScheduler+0xbe>
 801406e:	f640 022a 	movw	r2, #2090	; 0x82a
 8014072:	490d      	ldr	r1, [pc, #52]	; (80140a8 <vTaskStartScheduler+0xec>)
 8014074:	480d      	ldr	r0, [pc, #52]	; (80140ac <vTaskStartScheduler+0xf0>)
 8014076:	f7f1 fa1d 	bl	80054b4 <assertFail>
}
 801407a:	bf00      	nop
 801407c:	3718      	adds	r7, #24
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}
 8014082:	bf00      	nop
 8014084:	0801bb50 	.word	0x0801bb50
 8014088:	080148a1 	.word	0x080148a1
 801408c:	2000817c 	.word	0x2000817c
 8014090:	20007f50 	.word	0x20007f50
 8014094:	20000498 	.word	0x20000498
 8014098:	20008178 	.word	0x20008178
 801409c:	20008164 	.word	0x20008164
 80140a0:	2000815c 	.word	0x2000815c
 80140a4:	e0000004 	.word	0xe0000004
 80140a8:	0801b9d0 	.word	0x0801b9d0
 80140ac:	0801bb58 	.word	0x0801bb58

080140b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80140b0:	b480      	push	{r7}
 80140b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80140b4:	4b04      	ldr	r3, [pc, #16]	; (80140c8 <vTaskSuspendAll+0x18>)
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	3301      	adds	r3, #1
 80140ba:	4a03      	ldr	r2, [pc, #12]	; (80140c8 <vTaskSuspendAll+0x18>)
 80140bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80140be:	bf00      	nop
 80140c0:	46bd      	mov	sp, r7
 80140c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c6:	4770      	bx	lr
 80140c8:	20008180 	.word	0x20008180

080140cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b084      	sub	sp, #16
 80140d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80140d2:	2300      	movs	r3, #0
 80140d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80140d6:	2300      	movs	r3, #0
 80140d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80140da:	4b3f      	ldr	r3, [pc, #252]	; (80141d8 <xTaskResumeAll+0x10c>)
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d105      	bne.n	80140ee <xTaskResumeAll+0x22>
 80140e2:	f640 0299 	movw	r2, #2201	; 0x899
 80140e6:	493d      	ldr	r1, [pc, #244]	; (80141dc <xTaskResumeAll+0x110>)
 80140e8:	483d      	ldr	r0, [pc, #244]	; (80141e0 <xTaskResumeAll+0x114>)
 80140ea:	f7f1 f9e3 	bl	80054b4 <assertFail>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80140ee:	f001 fd3f 	bl	8015b70 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80140f2:	4b39      	ldr	r3, [pc, #228]	; (80141d8 <xTaskResumeAll+0x10c>)
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	3b01      	subs	r3, #1
 80140f8:	4a37      	ldr	r2, [pc, #220]	; (80141d8 <xTaskResumeAll+0x10c>)
 80140fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80140fc:	4b36      	ldr	r3, [pc, #216]	; (80141d8 <xTaskResumeAll+0x10c>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d161      	bne.n	80141c8 <xTaskResumeAll+0xfc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014104:	4b37      	ldr	r3, [pc, #220]	; (80141e4 <xTaskResumeAll+0x118>)
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d05d      	beq.n	80141c8 <xTaskResumeAll+0xfc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801410c:	e02e      	b.n	801416c <xTaskResumeAll+0xa0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801410e:	4b36      	ldr	r3, [pc, #216]	; (80141e8 <xTaskResumeAll+0x11c>)
 8014110:	68db      	ldr	r3, [r3, #12]
 8014112:	68db      	ldr	r3, [r3, #12]
 8014114:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	3318      	adds	r3, #24
 801411a:	4618      	mov	r0, r3
 801411c:	f7fe fe34 	bl	8012d88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	3304      	adds	r3, #4
 8014124:	4618      	mov	r0, r3
 8014126:	f7fe fe2f 	bl	8012d88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801412e:	2201      	movs	r2, #1
 8014130:	409a      	lsls	r2, r3
 8014132:	4b2e      	ldr	r3, [pc, #184]	; (80141ec <xTaskResumeAll+0x120>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	4313      	orrs	r3, r2
 8014138:	4a2c      	ldr	r2, [pc, #176]	; (80141ec <xTaskResumeAll+0x120>)
 801413a:	6013      	str	r3, [r2, #0]
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014140:	4613      	mov	r3, r2
 8014142:	009b      	lsls	r3, r3, #2
 8014144:	4413      	add	r3, r2
 8014146:	009b      	lsls	r3, r3, #2
 8014148:	4a29      	ldr	r2, [pc, #164]	; (80141f0 <xTaskResumeAll+0x124>)
 801414a:	441a      	add	r2, r3
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	3304      	adds	r3, #4
 8014150:	4619      	mov	r1, r3
 8014152:	4610      	mov	r0, r2
 8014154:	f7fe fdbb 	bl	8012cce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801415c:	4b25      	ldr	r3, [pc, #148]	; (80141f4 <xTaskResumeAll+0x128>)
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014162:	429a      	cmp	r2, r3
 8014164:	d302      	bcc.n	801416c <xTaskResumeAll+0xa0>
					{
						xYieldPending = pdTRUE;
 8014166:	4b24      	ldr	r3, [pc, #144]	; (80141f8 <xTaskResumeAll+0x12c>)
 8014168:	2201      	movs	r2, #1
 801416a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801416c:	4b1e      	ldr	r3, [pc, #120]	; (80141e8 <xTaskResumeAll+0x11c>)
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d1cc      	bne.n	801410e <xTaskResumeAll+0x42>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d001      	beq.n	801417e <xTaskResumeAll+0xb2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801417a:	f000 fd21 	bl	8014bc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801417e:	4b1f      	ldr	r3, [pc, #124]	; (80141fc <xTaskResumeAll+0x130>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d010      	beq.n	80141ac <xTaskResumeAll+0xe0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801418a:	f000 f8db 	bl	8014344 <xTaskIncrementTick>
 801418e:	4603      	mov	r3, r0
 8014190:	2b00      	cmp	r3, #0
 8014192:	d002      	beq.n	801419a <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
 8014194:	4b18      	ldr	r3, [pc, #96]	; (80141f8 <xTaskResumeAll+0x12c>)
 8014196:	2201      	movs	r2, #1
 8014198:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	3b01      	subs	r3, #1
 801419e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d1f1      	bne.n	801418a <xTaskResumeAll+0xbe>

						xPendedTicks = 0;
 80141a6:	4b15      	ldr	r3, [pc, #84]	; (80141fc <xTaskResumeAll+0x130>)
 80141a8:	2200      	movs	r2, #0
 80141aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80141ac:	4b12      	ldr	r3, [pc, #72]	; (80141f8 <xTaskResumeAll+0x12c>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d009      	beq.n	80141c8 <xTaskResumeAll+0xfc>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80141b4:	2301      	movs	r3, #1
 80141b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80141b8:	4b11      	ldr	r3, [pc, #68]	; (8014200 <xTaskResumeAll+0x134>)
 80141ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141be:	601a      	str	r2, [r3, #0]
 80141c0:	f3bf 8f4f 	dsb	sy
 80141c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80141c8:	f001 fd00 	bl	8015bcc <vPortExitCritical>

	return xAlreadyYielded;
 80141cc:	68bb      	ldr	r3, [r7, #8]
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3710      	adds	r7, #16
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
 80141d6:	bf00      	nop
 80141d8:	20008180 	.word	0x20008180
 80141dc:	0801b9d0 	.word	0x0801b9d0
 80141e0:	0801bb8c 	.word	0x0801bb8c
 80141e4:	20008158 	.word	0x20008158
 80141e8:	20008114 	.word	0x20008114
 80141ec:	20008160 	.word	0x20008160
 80141f0:	20007f54 	.word	0x20007f54
 80141f4:	20007f50 	.word	0x20007f50
 80141f8:	2000816c 	.word	0x2000816c
 80141fc:	20008168 	.word	0x20008168
 8014200:	e000ed04 	.word	0xe000ed04

08014204 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014204:	b480      	push	{r7}
 8014206:	b083      	sub	sp, #12
 8014208:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801420a:	4b05      	ldr	r3, [pc, #20]	; (8014220 <xTaskGetTickCount+0x1c>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014210:	687b      	ldr	r3, [r7, #4]
}
 8014212:	4618      	mov	r0, r3
 8014214:	370c      	adds	r7, #12
 8014216:	46bd      	mov	sp, r7
 8014218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421c:	4770      	bx	lr
 801421e:	bf00      	nop
 8014220:	2000815c 	.word	0x2000815c

08014224 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8014224:	b580      	push	{r7, lr}
 8014226:	b086      	sub	sp, #24
 8014228:	af00      	add	r7, sp, #0
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8014230:	2300      	movs	r3, #0
 8014232:	617b      	str	r3, [r7, #20]
 8014234:	2314      	movs	r3, #20
 8014236:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8014238:	f7ff ff3a 	bl	80140b0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 801423c:	4b3b      	ldr	r3, [pc, #236]	; (801432c <uxTaskGetSystemState+0x108>)
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	68ba      	ldr	r2, [r7, #8]
 8014242:	429a      	cmp	r2, r3
 8014244:	d36a      	bcc.n	801431c <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8014246:	693b      	ldr	r3, [r7, #16]
 8014248:	3b01      	subs	r3, #1
 801424a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 801424c:	697a      	ldr	r2, [r7, #20]
 801424e:	4613      	mov	r3, r2
 8014250:	00db      	lsls	r3, r3, #3
 8014252:	4413      	add	r3, r2
 8014254:	009b      	lsls	r3, r3, #2
 8014256:	461a      	mov	r2, r3
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	1898      	adds	r0, r3, r2
 801425c:	693a      	ldr	r2, [r7, #16]
 801425e:	4613      	mov	r3, r2
 8014260:	009b      	lsls	r3, r3, #2
 8014262:	4413      	add	r3, r2
 8014264:	009b      	lsls	r3, r3, #2
 8014266:	4a32      	ldr	r2, [pc, #200]	; (8014330 <uxTaskGetSystemState+0x10c>)
 8014268:	4413      	add	r3, r2
 801426a:	2201      	movs	r2, #1
 801426c:	4619      	mov	r1, r3
 801426e:	f000 fc05 	bl	8014a7c <prvListTasksWithinSingleList>
 8014272:	4602      	mov	r2, r0
 8014274:	697b      	ldr	r3, [r7, #20]
 8014276:	4413      	add	r3, r2
 8014278:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d1e2      	bne.n	8014246 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8014280:	697a      	ldr	r2, [r7, #20]
 8014282:	4613      	mov	r3, r2
 8014284:	00db      	lsls	r3, r3, #3
 8014286:	4413      	add	r3, r2
 8014288:	009b      	lsls	r3, r3, #2
 801428a:	461a      	mov	r2, r3
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	4413      	add	r3, r2
 8014290:	4a28      	ldr	r2, [pc, #160]	; (8014334 <uxTaskGetSystemState+0x110>)
 8014292:	6811      	ldr	r1, [r2, #0]
 8014294:	2202      	movs	r2, #2
 8014296:	4618      	mov	r0, r3
 8014298:	f000 fbf0 	bl	8014a7c <prvListTasksWithinSingleList>
 801429c:	4602      	mov	r2, r0
 801429e:	697b      	ldr	r3, [r7, #20]
 80142a0:	4413      	add	r3, r2
 80142a2:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80142a4:	697a      	ldr	r2, [r7, #20]
 80142a6:	4613      	mov	r3, r2
 80142a8:	00db      	lsls	r3, r3, #3
 80142aa:	4413      	add	r3, r2
 80142ac:	009b      	lsls	r3, r3, #2
 80142ae:	461a      	mov	r2, r3
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	4413      	add	r3, r2
 80142b4:	4a20      	ldr	r2, [pc, #128]	; (8014338 <uxTaskGetSystemState+0x114>)
 80142b6:	6811      	ldr	r1, [r2, #0]
 80142b8:	2202      	movs	r2, #2
 80142ba:	4618      	mov	r0, r3
 80142bc:	f000 fbde 	bl	8014a7c <prvListTasksWithinSingleList>
 80142c0:	4602      	mov	r2, r0
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	4413      	add	r3, r2
 80142c6:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80142c8:	697a      	ldr	r2, [r7, #20]
 80142ca:	4613      	mov	r3, r2
 80142cc:	00db      	lsls	r3, r3, #3
 80142ce:	4413      	add	r3, r2
 80142d0:	009b      	lsls	r3, r3, #2
 80142d2:	461a      	mov	r2, r3
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	4413      	add	r3, r2
 80142d8:	2204      	movs	r2, #4
 80142da:	4918      	ldr	r1, [pc, #96]	; (801433c <uxTaskGetSystemState+0x118>)
 80142dc:	4618      	mov	r0, r3
 80142de:	f000 fbcd 	bl	8014a7c <prvListTasksWithinSingleList>
 80142e2:	4602      	mov	r2, r0
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	4413      	add	r3, r2
 80142e8:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80142ea:	697a      	ldr	r2, [r7, #20]
 80142ec:	4613      	mov	r3, r2
 80142ee:	00db      	lsls	r3, r3, #3
 80142f0:	4413      	add	r3, r2
 80142f2:	009b      	lsls	r3, r3, #2
 80142f4:	461a      	mov	r2, r3
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	4413      	add	r3, r2
 80142fa:	2203      	movs	r2, #3
 80142fc:	4910      	ldr	r1, [pc, #64]	; (8014340 <uxTaskGetSystemState+0x11c>)
 80142fe:	4618      	mov	r0, r3
 8014300:	f000 fbbc 	bl	8014a7c <prvListTasksWithinSingleList>
 8014304:	4602      	mov	r2, r0
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	4413      	add	r3, r2
 801430a:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d004      	beq.n	801431c <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8014312:	f7f4 fab8 	bl	8008886 <getRunTimeCounterValue>
 8014316:	4602      	mov	r2, r0
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 801431c:	f7ff fed6 	bl	80140cc <xTaskResumeAll>

		return uxTask;
 8014320:	697b      	ldr	r3, [r7, #20]
	}
 8014322:	4618      	mov	r0, r3
 8014324:	3718      	adds	r7, #24
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}
 801432a:	bf00      	nop
 801432c:	20008158 	.word	0x20008158
 8014330:	20007f54 	.word	0x20007f54
 8014334:	2000810c 	.word	0x2000810c
 8014338:	20008110 	.word	0x20008110
 801433c:	20008128 	.word	0x20008128
 8014340:	20008140 	.word	0x20008140

08014344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b086      	sub	sp, #24
 8014348:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801434a:	2300      	movs	r3, #0
 801434c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 801434e:	4a4e      	ldr	r2, [pc, #312]	; (8014488 <xTaskIncrementTick+0x144>)
 8014350:	4b4e      	ldr	r3, [pc, #312]	; (801448c <xTaskIncrementTick+0x148>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	6013      	str	r3, [r2, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014356:	4b4e      	ldr	r3, [pc, #312]	; (8014490 <xTaskIncrementTick+0x14c>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	2b00      	cmp	r3, #0
 801435c:	f040 8089 	bne.w	8014472 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014360:	4b4a      	ldr	r3, [pc, #296]	; (801448c <xTaskIncrementTick+0x148>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	3301      	adds	r3, #1
 8014366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014368:	4a48      	ldr	r2, [pc, #288]	; (801448c <xTaskIncrementTick+0x148>)
 801436a:	693b      	ldr	r3, [r7, #16]
 801436c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801436e:	693b      	ldr	r3, [r7, #16]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d11b      	bne.n	80143ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8014374:	4b47      	ldr	r3, [pc, #284]	; (8014494 <xTaskIncrementTick+0x150>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d005      	beq.n	801438a <xTaskIncrementTick+0x46>
 801437e:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8014382:	4945      	ldr	r1, [pc, #276]	; (8014498 <xTaskIncrementTick+0x154>)
 8014384:	4845      	ldr	r0, [pc, #276]	; (801449c <xTaskIncrementTick+0x158>)
 8014386:	f7f1 f895 	bl	80054b4 <assertFail>
 801438a:	4b42      	ldr	r3, [pc, #264]	; (8014494 <xTaskIncrementTick+0x150>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	60fb      	str	r3, [r7, #12]
 8014390:	4b43      	ldr	r3, [pc, #268]	; (80144a0 <xTaskIncrementTick+0x15c>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	4a3f      	ldr	r2, [pc, #252]	; (8014494 <xTaskIncrementTick+0x150>)
 8014396:	6013      	str	r3, [r2, #0]
 8014398:	4a41      	ldr	r2, [pc, #260]	; (80144a0 <xTaskIncrementTick+0x15c>)
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	6013      	str	r3, [r2, #0]
 801439e:	4b41      	ldr	r3, [pc, #260]	; (80144a4 <xTaskIncrementTick+0x160>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	3301      	adds	r3, #1
 80143a4:	4a3f      	ldr	r2, [pc, #252]	; (80144a4 <xTaskIncrementTick+0x160>)
 80143a6:	6013      	str	r3, [r2, #0]
 80143a8:	f000 fc0a 	bl	8014bc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80143ac:	4b3e      	ldr	r3, [pc, #248]	; (80144a8 <xTaskIncrementTick+0x164>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	693a      	ldr	r2, [r7, #16]
 80143b2:	429a      	cmp	r2, r3
 80143b4:	d348      	bcc.n	8014448 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80143b6:	4b37      	ldr	r3, [pc, #220]	; (8014494 <xTaskIncrementTick+0x150>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d104      	bne.n	80143ca <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80143c0:	4b39      	ldr	r3, [pc, #228]	; (80144a8 <xTaskIncrementTick+0x164>)
 80143c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80143c6:	601a      	str	r2, [r3, #0]
					break;
 80143c8:	e03e      	b.n	8014448 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143ca:	4b32      	ldr	r3, [pc, #200]	; (8014494 <xTaskIncrementTick+0x150>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	68db      	ldr	r3, [r3, #12]
 80143d0:	68db      	ldr	r3, [r3, #12]
 80143d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80143da:	693a      	ldr	r2, [r7, #16]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	429a      	cmp	r2, r3
 80143e0:	d203      	bcs.n	80143ea <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80143e2:	4a31      	ldr	r2, [pc, #196]	; (80144a8 <xTaskIncrementTick+0x164>)
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80143e8:	e02e      	b.n	8014448 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	3304      	adds	r3, #4
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7fe fcca 	bl	8012d88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80143f4:	68bb      	ldr	r3, [r7, #8]
 80143f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d004      	beq.n	8014406 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	3318      	adds	r3, #24
 8014400:	4618      	mov	r0, r3
 8014402:	f7fe fcc1 	bl	8012d88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801440a:	2201      	movs	r2, #1
 801440c:	409a      	lsls	r2, r3
 801440e:	4b27      	ldr	r3, [pc, #156]	; (80144ac <xTaskIncrementTick+0x168>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	4313      	orrs	r3, r2
 8014414:	4a25      	ldr	r2, [pc, #148]	; (80144ac <xTaskIncrementTick+0x168>)
 8014416:	6013      	str	r3, [r2, #0]
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801441c:	4613      	mov	r3, r2
 801441e:	009b      	lsls	r3, r3, #2
 8014420:	4413      	add	r3, r2
 8014422:	009b      	lsls	r3, r3, #2
 8014424:	4a22      	ldr	r2, [pc, #136]	; (80144b0 <xTaskIncrementTick+0x16c>)
 8014426:	441a      	add	r2, r3
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	3304      	adds	r3, #4
 801442c:	4619      	mov	r1, r3
 801442e:	4610      	mov	r0, r2
 8014430:	f7fe fc4d 	bl	8012cce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014438:	4b1e      	ldr	r3, [pc, #120]	; (80144b4 <xTaskIncrementTick+0x170>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801443e:	429a      	cmp	r2, r3
 8014440:	d3b9      	bcc.n	80143b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8014442:	2301      	movs	r3, #1
 8014444:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014446:	e7b6      	b.n	80143b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014448:	4b1a      	ldr	r3, [pc, #104]	; (80144b4 <xTaskIncrementTick+0x170>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801444e:	4918      	ldr	r1, [pc, #96]	; (80144b0 <xTaskIncrementTick+0x16c>)
 8014450:	4613      	mov	r3, r2
 8014452:	009b      	lsls	r3, r3, #2
 8014454:	4413      	add	r3, r2
 8014456:	009b      	lsls	r3, r3, #2
 8014458:	440b      	add	r3, r1
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	2b01      	cmp	r3, #1
 801445e:	d901      	bls.n	8014464 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8014460:	2301      	movs	r3, #1
 8014462:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014464:	4b14      	ldr	r3, [pc, #80]	; (80144b8 <xTaskIncrementTick+0x174>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d007      	beq.n	801447c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 801446c:	2301      	movs	r3, #1
 801446e:	617b      	str	r3, [r7, #20]
 8014470:	e004      	b.n	801447c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014472:	4b12      	ldr	r3, [pc, #72]	; (80144bc <xTaskIncrementTick+0x178>)
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	3301      	adds	r3, #1
 8014478:	4a10      	ldr	r2, [pc, #64]	; (80144bc <xTaskIncrementTick+0x178>)
 801447a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801447c:	697b      	ldr	r3, [r7, #20]
}
 801447e:	4618      	mov	r0, r3
 8014480:	3718      	adds	r7, #24
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
 8014486:	bf00      	nop
 8014488:	e0000008 	.word	0xe0000008
 801448c:	2000815c 	.word	0x2000815c
 8014490:	20008180 	.word	0x20008180
 8014494:	2000810c 	.word	0x2000810c
 8014498:	0801b9d0 	.word	0x0801b9d0
 801449c:	0801bbd8 	.word	0x0801bbd8
 80144a0:	20008110 	.word	0x20008110
 80144a4:	20008170 	.word	0x20008170
 80144a8:	20008178 	.word	0x20008178
 80144ac:	20008160 	.word	0x20008160
 80144b0:	20007f54 	.word	0x20007f54
 80144b4:	20007f50 	.word	0x20007f50
 80144b8:	2000816c 	.word	0x2000816c
 80144bc:	20008168 	.word	0x20008168

080144c0 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b084      	sub	sp, #16
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
 80144c8:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d103      	bne.n	80144d8 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80144d0:	4b08      	ldr	r3, [pc, #32]	; (80144f4 <vTaskSetApplicationTaskTag+0x34>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	60fb      	str	r3, [r7, #12]
 80144d6:	e001      	b.n	80144dc <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 80144dc:	f001 fb48 	bl	8015b70 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	683a      	ldr	r2, [r7, #0]
 80144e4:	659a      	str	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80144e6:	f001 fb71 	bl	8015bcc <vPortExitCritical>
	}
 80144ea:	bf00      	nop
 80144ec:	3710      	adds	r7, #16
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	bf00      	nop
 80144f4:	20007f50 	.word	0x20007f50

080144f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b084      	sub	sp, #16
 80144fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80144fe:	4b44      	ldr	r3, [pc, #272]	; (8014610 <vTaskSwitchContext+0x118>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d003      	beq.n	801450e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014506:	4b43      	ldr	r3, [pc, #268]	; (8014614 <vTaskSwitchContext+0x11c>)
 8014508:	2201      	movs	r2, #1
 801450a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801450c:	e07b      	b.n	8014606 <vTaskSwitchContext+0x10e>
		xYieldPending = pdFALSE;
 801450e:	4b41      	ldr	r3, [pc, #260]	; (8014614 <vTaskSwitchContext+0x11c>)
 8014510:	2200      	movs	r2, #0
 8014512:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8014514:	f7f4 f9b7 	bl	8008886 <getRunTimeCounterValue>
 8014518:	4603      	mov	r3, r0
 801451a:	4a3f      	ldr	r2, [pc, #252]	; (8014618 <vTaskSwitchContext+0x120>)
 801451c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801451e:	4b3e      	ldr	r3, [pc, #248]	; (8014618 <vTaskSwitchContext+0x120>)
 8014520:	681a      	ldr	r2, [r3, #0]
 8014522:	4b3e      	ldr	r3, [pc, #248]	; (801461c <vTaskSwitchContext+0x124>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	429a      	cmp	r2, r3
 8014528:	d909      	bls.n	801453e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801452a:	4b3d      	ldr	r3, [pc, #244]	; (8014620 <vTaskSwitchContext+0x128>)
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014530:	4a39      	ldr	r2, [pc, #228]	; (8014618 <vTaskSwitchContext+0x120>)
 8014532:	6810      	ldr	r0, [r2, #0]
 8014534:	4a39      	ldr	r2, [pc, #228]	; (801461c <vTaskSwitchContext+0x124>)
 8014536:	6812      	ldr	r2, [r2, #0]
 8014538:	1a82      	subs	r2, r0, r2
 801453a:	440a      	add	r2, r1
 801453c:	65da      	str	r2, [r3, #92]	; 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 801453e:	4b36      	ldr	r3, [pc, #216]	; (8014618 <vTaskSwitchContext+0x120>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	4a36      	ldr	r2, [pc, #216]	; (801461c <vTaskSwitchContext+0x124>)
 8014544:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014546:	4b36      	ldr	r3, [pc, #216]	; (8014620 <vTaskSwitchContext+0x128>)
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	681a      	ldr	r2, [r3, #0]
 801454c:	4b34      	ldr	r3, [pc, #208]	; (8014620 <vTaskSwitchContext+0x128>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014552:	429a      	cmp	r2, r3
 8014554:	d808      	bhi.n	8014568 <vTaskSwitchContext+0x70>
 8014556:	4b32      	ldr	r3, [pc, #200]	; (8014620 <vTaskSwitchContext+0x128>)
 8014558:	681a      	ldr	r2, [r3, #0]
 801455a:	4b31      	ldr	r3, [pc, #196]	; (8014620 <vTaskSwitchContext+0x128>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	3334      	adds	r3, #52	; 0x34
 8014560:	4619      	mov	r1, r3
 8014562:	4610      	mov	r0, r2
 8014564:	f7f4 f997 	bl	8008896 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8014568:	4b2d      	ldr	r3, [pc, #180]	; (8014620 <vTaskSwitchContext+0x128>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	4a2d      	ldr	r2, [pc, #180]	; (8014624 <vTaskSwitchContext+0x12c>)
 801456e:	6812      	ldr	r2, [r2, #0]
 8014570:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014574:	4b2c      	ldr	r3, [pc, #176]	; (8014628 <vTaskSwitchContext+0x130>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	fab3 f383 	clz	r3, r3
 8014580:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8014582:	78fb      	ldrb	r3, [r7, #3]
 8014584:	f1c3 031f 	rsb	r3, r3, #31
 8014588:	60fb      	str	r3, [r7, #12]
 801458a:	4928      	ldr	r1, [pc, #160]	; (801462c <vTaskSwitchContext+0x134>)
 801458c:	68fa      	ldr	r2, [r7, #12]
 801458e:	4613      	mov	r3, r2
 8014590:	009b      	lsls	r3, r3, #2
 8014592:	4413      	add	r3, r2
 8014594:	009b      	lsls	r3, r3, #2
 8014596:	440b      	add	r3, r1
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d105      	bne.n	80145aa <vTaskSwitchContext+0xb2>
 801459e:	f640 32e1 	movw	r2, #3041	; 0xbe1
 80145a2:	4923      	ldr	r1, [pc, #140]	; (8014630 <vTaskSwitchContext+0x138>)
 80145a4:	4823      	ldr	r0, [pc, #140]	; (8014634 <vTaskSwitchContext+0x13c>)
 80145a6:	f7f0 ff85 	bl	80054b4 <assertFail>
 80145aa:	68fa      	ldr	r2, [r7, #12]
 80145ac:	4613      	mov	r3, r2
 80145ae:	009b      	lsls	r3, r3, #2
 80145b0:	4413      	add	r3, r2
 80145b2:	009b      	lsls	r3, r3, #2
 80145b4:	4a1d      	ldr	r2, [pc, #116]	; (801462c <vTaskSwitchContext+0x134>)
 80145b6:	4413      	add	r3, r2
 80145b8:	60bb      	str	r3, [r7, #8]
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	685a      	ldr	r2, [r3, #4]
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	605a      	str	r2, [r3, #4]
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	685a      	ldr	r2, [r3, #4]
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	3308      	adds	r3, #8
 80145cc:	429a      	cmp	r2, r3
 80145ce:	d104      	bne.n	80145da <vTaskSwitchContext+0xe2>
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	685a      	ldr	r2, [r3, #4]
 80145d6:	68bb      	ldr	r3, [r7, #8]
 80145d8:	605a      	str	r2, [r3, #4]
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	685b      	ldr	r3, [r3, #4]
 80145de:	68db      	ldr	r3, [r3, #12]
 80145e0:	4a0f      	ldr	r2, [pc, #60]	; (8014620 <vTaskSwitchContext+0x128>)
 80145e2:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80145e4:	4b0e      	ldr	r3, [pc, #56]	; (8014620 <vTaskSwitchContext+0x128>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	3334      	adds	r3, #52	; 0x34
 80145ea:	4a13      	ldr	r2, [pc, #76]	; (8014638 <vTaskSwitchContext+0x140>)
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 80145f0:	4b0b      	ldr	r3, [pc, #44]	; (8014620 <vTaskSwitchContext+0x128>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80145f8:	4a0a      	ldr	r2, [pc, #40]	; (8014624 <vTaskSwitchContext+0x12c>)
 80145fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80145fc:	4b08      	ldr	r3, [pc, #32]	; (8014620 <vTaskSwitchContext+0x128>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	3360      	adds	r3, #96	; 0x60
 8014602:	4a0e      	ldr	r2, [pc, #56]	; (801463c <vTaskSwitchContext+0x144>)
 8014604:	6013      	str	r3, [r2, #0]
}
 8014606:	bf00      	nop
 8014608:	3710      	adds	r7, #16
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
 801460e:	bf00      	nop
 8014610:	20008180 	.word	0x20008180
 8014614:	2000816c 	.word	0x2000816c
 8014618:	20008188 	.word	0x20008188
 801461c:	20008184 	.word	0x20008184
 8014620:	20007f50 	.word	0x20007f50
 8014624:	20008154 	.word	0x20008154
 8014628:	20008160 	.word	0x20008160
 801462c:	20007f54 	.word	0x20007f54
 8014630:	0801b9d0 	.word	0x0801b9d0
 8014634:	0801bc04 	.word	0x0801bc04
 8014638:	e0000004 	.word	0xe0000004
 801463c:	20000498 	.word	0x20000498

08014640 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b082      	sub	sp, #8
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
 8014648:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d105      	bne.n	801465c <vTaskPlaceOnEventList+0x1c>
 8014650:	f640 32fa 	movw	r2, #3066	; 0xbfa
 8014654:	4909      	ldr	r1, [pc, #36]	; (801467c <vTaskPlaceOnEventList+0x3c>)
 8014656:	480a      	ldr	r0, [pc, #40]	; (8014680 <vTaskPlaceOnEventList+0x40>)
 8014658:	f7f0 ff2c 	bl	80054b4 <assertFail>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801465c:	4b09      	ldr	r3, [pc, #36]	; (8014684 <vTaskPlaceOnEventList+0x44>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	3318      	adds	r3, #24
 8014662:	4619      	mov	r1, r3
 8014664:	6878      	ldr	r0, [r7, #4]
 8014666:	f7fe fb56 	bl	8012d16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801466a:	2101      	movs	r1, #1
 801466c:	6838      	ldr	r0, [r7, #0]
 801466e:	f000 fced 	bl	801504c <prvAddCurrentTaskToDelayedList>
}
 8014672:	bf00      	nop
 8014674:	3708      	adds	r7, #8
 8014676:	46bd      	mov	sp, r7
 8014678:	bd80      	pop	{r7, pc}
 801467a:	bf00      	nop
 801467c:	0801b9d0 	.word	0x0801b9d0
 8014680:	0801bc4c 	.word	0x0801bc4c
 8014684:	20007f50 	.word	0x20007f50

08014688 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014688:	b580      	push	{r7, lr}
 801468a:	b084      	sub	sp, #16
 801468c:	af00      	add	r7, sp, #0
 801468e:	60f8      	str	r0, [r7, #12]
 8014690:	60b9      	str	r1, [r7, #8]
 8014692:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d105      	bne.n	80146a6 <vTaskPlaceOnEventListRestricted+0x1e>
 801469a:	f640 4225 	movw	r2, #3109	; 0xc25
 801469e:	490c      	ldr	r1, [pc, #48]	; (80146d0 <vTaskPlaceOnEventListRestricted+0x48>)
 80146a0:	480c      	ldr	r0, [pc, #48]	; (80146d4 <vTaskPlaceOnEventListRestricted+0x4c>)
 80146a2:	f7f0 ff07 	bl	80054b4 <assertFail>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80146a6:	4b0c      	ldr	r3, [pc, #48]	; (80146d8 <vTaskPlaceOnEventListRestricted+0x50>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	3318      	adds	r3, #24
 80146ac:	4619      	mov	r1, r3
 80146ae:	68f8      	ldr	r0, [r7, #12]
 80146b0:	f7fe fb0d 	bl	8012cce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d002      	beq.n	80146c0 <vTaskPlaceOnEventListRestricted+0x38>
		{
			xTicksToWait = portMAX_DELAY;
 80146ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80146c0:	6879      	ldr	r1, [r7, #4]
 80146c2:	68b8      	ldr	r0, [r7, #8]
 80146c4:	f000 fcc2 	bl	801504c <prvAddCurrentTaskToDelayedList>
	}
 80146c8:	bf00      	nop
 80146ca:	3710      	adds	r7, #16
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	0801b9d0 	.word	0x0801b9d0
 80146d4:	0801bc4c 	.word	0x0801bc4c
 80146d8:	20007f50 	.word	0x20007f50

080146dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b084      	sub	sp, #16
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	68db      	ldr	r3, [r3, #12]
 80146e8:	68db      	ldr	r3, [r3, #12]
 80146ea:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d105      	bne.n	80146fe <xTaskRemoveFromEventList+0x22>
 80146f2:	f640 4255 	movw	r2, #3157	; 0xc55
 80146f6:	4922      	ldr	r1, [pc, #136]	; (8014780 <xTaskRemoveFromEventList+0xa4>)
 80146f8:	4822      	ldr	r0, [pc, #136]	; (8014784 <xTaskRemoveFromEventList+0xa8>)
 80146fa:	f7f0 fedb 	bl	80054b4 <assertFail>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	3318      	adds	r3, #24
 8014702:	4618      	mov	r0, r3
 8014704:	f7fe fb40 	bl	8012d88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014708:	4b1f      	ldr	r3, [pc, #124]	; (8014788 <xTaskRemoveFromEventList+0xac>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d11c      	bne.n	801474a <xTaskRemoveFromEventList+0x6e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014710:	68bb      	ldr	r3, [r7, #8]
 8014712:	3304      	adds	r3, #4
 8014714:	4618      	mov	r0, r3
 8014716:	f7fe fb37 	bl	8012d88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801471a:	68bb      	ldr	r3, [r7, #8]
 801471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801471e:	2201      	movs	r2, #1
 8014720:	409a      	lsls	r2, r3
 8014722:	4b1a      	ldr	r3, [pc, #104]	; (801478c <xTaskRemoveFromEventList+0xb0>)
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	4313      	orrs	r3, r2
 8014728:	4a18      	ldr	r2, [pc, #96]	; (801478c <xTaskRemoveFromEventList+0xb0>)
 801472a:	6013      	str	r3, [r2, #0]
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014730:	4613      	mov	r3, r2
 8014732:	009b      	lsls	r3, r3, #2
 8014734:	4413      	add	r3, r2
 8014736:	009b      	lsls	r3, r3, #2
 8014738:	4a15      	ldr	r2, [pc, #84]	; (8014790 <xTaskRemoveFromEventList+0xb4>)
 801473a:	441a      	add	r2, r3
 801473c:	68bb      	ldr	r3, [r7, #8]
 801473e:	3304      	adds	r3, #4
 8014740:	4619      	mov	r1, r3
 8014742:	4610      	mov	r0, r2
 8014744:	f7fe fac3 	bl	8012cce <vListInsertEnd>
 8014748:	e005      	b.n	8014756 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	3318      	adds	r3, #24
 801474e:	4619      	mov	r1, r3
 8014750:	4810      	ldr	r0, [pc, #64]	; (8014794 <xTaskRemoveFromEventList+0xb8>)
 8014752:	f7fe fabc 	bl	8012cce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801475a:	4b0f      	ldr	r3, [pc, #60]	; (8014798 <xTaskRemoveFromEventList+0xbc>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014760:	429a      	cmp	r2, r3
 8014762:	d905      	bls.n	8014770 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014764:	2301      	movs	r3, #1
 8014766:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014768:	4b0c      	ldr	r3, [pc, #48]	; (801479c <xTaskRemoveFromEventList+0xc0>)
 801476a:	2201      	movs	r2, #1
 801476c:	601a      	str	r2, [r3, #0]
 801476e:	e001      	b.n	8014774 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8014770:	2300      	movs	r3, #0
 8014772:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8014774:	68fb      	ldr	r3, [r7, #12]
}
 8014776:	4618      	mov	r0, r3
 8014778:	3710      	adds	r7, #16
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}
 801477e:	bf00      	nop
 8014780:	0801b9d0 	.word	0x0801b9d0
 8014784:	0801bc74 	.word	0x0801bc74
 8014788:	20008180 	.word	0x20008180
 801478c:	20008160 	.word	0x20008160
 8014790:	20007f54 	.word	0x20007f54
 8014794:	20008114 	.word	0x20008114
 8014798:	20007f50 	.word	0x20007f50
 801479c:	2000816c 	.word	0x2000816c

080147a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80147a0:	b480      	push	{r7}
 80147a2:	b083      	sub	sp, #12
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80147a8:	4b06      	ldr	r3, [pc, #24]	; (80147c4 <vTaskInternalSetTimeOutState+0x24>)
 80147aa:	681a      	ldr	r2, [r3, #0]
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80147b0:	4b05      	ldr	r3, [pc, #20]	; (80147c8 <vTaskInternalSetTimeOutState+0x28>)
 80147b2:	681a      	ldr	r2, [r3, #0]
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	605a      	str	r2, [r3, #4]
}
 80147b8:	bf00      	nop
 80147ba:	370c      	adds	r7, #12
 80147bc:	46bd      	mov	sp, r7
 80147be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c2:	4770      	bx	lr
 80147c4:	20008170 	.word	0x20008170
 80147c8:	2000815c 	.word	0x2000815c

080147cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b086      	sub	sp, #24
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
 80147d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d105      	bne.n	80147e8 <xTaskCheckForTimeOut+0x1c>
 80147dc:	f640 42ce 	movw	r2, #3278	; 0xcce
 80147e0:	4924      	ldr	r1, [pc, #144]	; (8014874 <xTaskCheckForTimeOut+0xa8>)
 80147e2:	4825      	ldr	r0, [pc, #148]	; (8014878 <xTaskCheckForTimeOut+0xac>)
 80147e4:	f7f0 fe66 	bl	80054b4 <assertFail>
	configASSERT( pxTicksToWait );
 80147e8:	683b      	ldr	r3, [r7, #0]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d105      	bne.n	80147fa <xTaskCheckForTimeOut+0x2e>
 80147ee:	f640 42cf 	movw	r2, #3279	; 0xccf
 80147f2:	4920      	ldr	r1, [pc, #128]	; (8014874 <xTaskCheckForTimeOut+0xa8>)
 80147f4:	4821      	ldr	r0, [pc, #132]	; (801487c <xTaskCheckForTimeOut+0xb0>)
 80147f6:	f7f0 fe5d 	bl	80054b4 <assertFail>

	taskENTER_CRITICAL();
 80147fa:	f001 f9b9 	bl	8015b70 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80147fe:	4b20      	ldr	r3, [pc, #128]	; (8014880 <xTaskCheckForTimeOut+0xb4>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	685b      	ldr	r3, [r3, #4]
 8014808:	693a      	ldr	r2, [r7, #16]
 801480a:	1ad3      	subs	r3, r2, r3
 801480c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014816:	d102      	bne.n	801481e <xTaskCheckForTimeOut+0x52>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014818:	2300      	movs	r3, #0
 801481a:	617b      	str	r3, [r7, #20]
 801481c:	e023      	b.n	8014866 <xTaskCheckForTimeOut+0x9a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	681a      	ldr	r2, [r3, #0]
 8014822:	4b18      	ldr	r3, [pc, #96]	; (8014884 <xTaskCheckForTimeOut+0xb8>)
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	429a      	cmp	r2, r3
 8014828:	d007      	beq.n	801483a <xTaskCheckForTimeOut+0x6e>
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	685b      	ldr	r3, [r3, #4]
 801482e:	693a      	ldr	r2, [r7, #16]
 8014830:	429a      	cmp	r2, r3
 8014832:	d302      	bcc.n	801483a <xTaskCheckForTimeOut+0x6e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014834:	2301      	movs	r3, #1
 8014836:	617b      	str	r3, [r7, #20]
 8014838:	e015      	b.n	8014866 <xTaskCheckForTimeOut+0x9a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	68fa      	ldr	r2, [r7, #12]
 8014840:	429a      	cmp	r2, r3
 8014842:	d20b      	bcs.n	801485c <xTaskCheckForTimeOut+0x90>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	681a      	ldr	r2, [r3, #0]
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	1ad2      	subs	r2, r2, r3
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f7ff ffa5 	bl	80147a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014856:	2300      	movs	r3, #0
 8014858:	617b      	str	r3, [r7, #20]
 801485a:	e004      	b.n	8014866 <xTaskCheckForTimeOut+0x9a>
		}
		else
		{
			*pxTicksToWait = 0;
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	2200      	movs	r2, #0
 8014860:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014862:	2301      	movs	r3, #1
 8014864:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8014866:	f001 f9b1 	bl	8015bcc <vPortExitCritical>

	return xReturn;
 801486a:	697b      	ldr	r3, [r7, #20]
}
 801486c:	4618      	mov	r0, r3
 801486e:	3718      	adds	r7, #24
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}
 8014874:	0801b9d0 	.word	0x0801b9d0
 8014878:	0801bca4 	.word	0x0801bca4
 801487c:	0801bcb0 	.word	0x0801bcb0
 8014880:	2000815c 	.word	0x2000815c
 8014884:	20008170 	.word	0x20008170

08014888 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014888:	b480      	push	{r7}
 801488a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801488c:	4b03      	ldr	r3, [pc, #12]	; (801489c <vTaskMissedYield+0x14>)
 801488e:	2201      	movs	r2, #1
 8014890:	601a      	str	r2, [r3, #0]
}
 8014892:	bf00      	nop
 8014894:	46bd      	mov	sp, r7
 8014896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489a:	4770      	bx	lr
 801489c:	2000816c 	.word	0x2000816c

080148a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b082      	sub	sp, #8
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80148a8:	f000 f854 	bl	8014954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80148ac:	4b07      	ldr	r3, [pc, #28]	; (80148cc <prvIdleTask+0x2c>)
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	2b01      	cmp	r3, #1
 80148b2:	d907      	bls.n	80148c4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80148b4:	4b06      	ldr	r3, [pc, #24]	; (80148d0 <prvIdleTask+0x30>)
 80148b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148ba:	601a      	str	r2, [r3, #0]
 80148bc:	f3bf 8f4f 	dsb	sy
 80148c0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80148c4:	f7f5 f866 	bl	8009994 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80148c8:	e7ee      	b.n	80148a8 <prvIdleTask+0x8>
 80148ca:	bf00      	nop
 80148cc:	20007f54 	.word	0x20007f54
 80148d0:	e000ed04 	.word	0xe000ed04

080148d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80148da:	2300      	movs	r3, #0
 80148dc:	607b      	str	r3, [r7, #4]
 80148de:	e00c      	b.n	80148fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80148e0:	687a      	ldr	r2, [r7, #4]
 80148e2:	4613      	mov	r3, r2
 80148e4:	009b      	lsls	r3, r3, #2
 80148e6:	4413      	add	r3, r2
 80148e8:	009b      	lsls	r3, r3, #2
 80148ea:	4a12      	ldr	r2, [pc, #72]	; (8014934 <prvInitialiseTaskLists+0x60>)
 80148ec:	4413      	add	r3, r2
 80148ee:	4618      	mov	r0, r3
 80148f0:	f7fe f9c0 	bl	8012c74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	3301      	adds	r3, #1
 80148f8:	607b      	str	r3, [r7, #4]
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	2b13      	cmp	r3, #19
 80148fe:	d9ef      	bls.n	80148e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014900:	480d      	ldr	r0, [pc, #52]	; (8014938 <prvInitialiseTaskLists+0x64>)
 8014902:	f7fe f9b7 	bl	8012c74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014906:	480d      	ldr	r0, [pc, #52]	; (801493c <prvInitialiseTaskLists+0x68>)
 8014908:	f7fe f9b4 	bl	8012c74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801490c:	480c      	ldr	r0, [pc, #48]	; (8014940 <prvInitialiseTaskLists+0x6c>)
 801490e:	f7fe f9b1 	bl	8012c74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014912:	480c      	ldr	r0, [pc, #48]	; (8014944 <prvInitialiseTaskLists+0x70>)
 8014914:	f7fe f9ae 	bl	8012c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014918:	480b      	ldr	r0, [pc, #44]	; (8014948 <prvInitialiseTaskLists+0x74>)
 801491a:	f7fe f9ab 	bl	8012c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801491e:	4b0b      	ldr	r3, [pc, #44]	; (801494c <prvInitialiseTaskLists+0x78>)
 8014920:	4a05      	ldr	r2, [pc, #20]	; (8014938 <prvInitialiseTaskLists+0x64>)
 8014922:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014924:	4b0a      	ldr	r3, [pc, #40]	; (8014950 <prvInitialiseTaskLists+0x7c>)
 8014926:	4a05      	ldr	r2, [pc, #20]	; (801493c <prvInitialiseTaskLists+0x68>)
 8014928:	601a      	str	r2, [r3, #0]
}
 801492a:	bf00      	nop
 801492c:	3708      	adds	r7, #8
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}
 8014932:	bf00      	nop
 8014934:	20007f54 	.word	0x20007f54
 8014938:	200080e4 	.word	0x200080e4
 801493c:	200080f8 	.word	0x200080f8
 8014940:	20008114 	.word	0x20008114
 8014944:	20008128 	.word	0x20008128
 8014948:	20008140 	.word	0x20008140
 801494c:	2000810c 	.word	0x2000810c
 8014950:	20008110 	.word	0x20008110

08014954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b082      	sub	sp, #8
 8014958:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801495a:	e019      	b.n	8014990 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801495c:	f001 f908 	bl	8015b70 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014960:	4b10      	ldr	r3, [pc, #64]	; (80149a4 <prvCheckTasksWaitingTermination+0x50>)
 8014962:	68db      	ldr	r3, [r3, #12]
 8014964:	68db      	ldr	r3, [r3, #12]
 8014966:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	3304      	adds	r3, #4
 801496c:	4618      	mov	r0, r3
 801496e:	f7fe fa0b 	bl	8012d88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014972:	4b0d      	ldr	r3, [pc, #52]	; (80149a8 <prvCheckTasksWaitingTermination+0x54>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	3b01      	subs	r3, #1
 8014978:	4a0b      	ldr	r2, [pc, #44]	; (80149a8 <prvCheckTasksWaitingTermination+0x54>)
 801497a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801497c:	4b0b      	ldr	r3, [pc, #44]	; (80149ac <prvCheckTasksWaitingTermination+0x58>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	3b01      	subs	r3, #1
 8014982:	4a0a      	ldr	r2, [pc, #40]	; (80149ac <prvCheckTasksWaitingTermination+0x58>)
 8014984:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014986:	f001 f921 	bl	8015bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801498a:	6878      	ldr	r0, [r7, #4]
 801498c:	f000 f8e4 	bl	8014b58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014990:	4b06      	ldr	r3, [pc, #24]	; (80149ac <prvCheckTasksWaitingTermination+0x58>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d1e1      	bne.n	801495c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014998:	bf00      	nop
 801499a:	bf00      	nop
 801499c:	3708      	adds	r7, #8
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd80      	pop	{r7, pc}
 80149a2:	bf00      	nop
 80149a4:	20008128 	.word	0x20008128
 80149a8:	20008158 	.word	0x20008158
 80149ac:	2000813c 	.word	0x2000813c

080149b0 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b086      	sub	sp, #24
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	60b9      	str	r1, [r7, #8]
 80149ba:	607a      	str	r2, [r7, #4]
 80149bc:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d102      	bne.n	80149ca <vTaskGetInfo+0x1a>
 80149c4:	4b2c      	ldr	r3, [pc, #176]	; (8014a78 <vTaskGetInfo+0xc8>)
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	e000      	b.n	80149cc <vTaskGetInfo+0x1c>
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	697a      	ldr	r2, [r7, #20]
 80149d2:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80149de:	697b      	ldr	r3, [r7, #20]
 80149e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80149e6:	697b      	ldr	r3, [r7, #20]
 80149e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80149ee:	697b      	ldr	r3, [r7, #20]
 80149f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80149f2:	68bb      	ldr	r3, [r7, #8]
 80149f4:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80149fe:	697b      	ldr	r3, [r7, #20]
 8014a00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8014a06:	78fb      	ldrb	r3, [r7, #3]
 8014a08:	2b05      	cmp	r3, #5
 8014a0a:	d01a      	beq.n	8014a42 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8014a0c:	4b1a      	ldr	r3, [pc, #104]	; (8014a78 <vTaskGetInfo+0xc8>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	697a      	ldr	r2, [r7, #20]
 8014a12:	429a      	cmp	r2, r3
 8014a14:	d103      	bne.n	8014a1e <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	2200      	movs	r2, #0
 8014a1a:	731a      	strb	r2, [r3, #12]
 8014a1c:	e018      	b.n	8014a50 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	78fa      	ldrb	r2, [r7, #3]
 8014a22:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8014a24:	78fb      	ldrb	r3, [r7, #3]
 8014a26:	2b03      	cmp	r3, #3
 8014a28:	d112      	bne.n	8014a50 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8014a2a:	f7ff fb41 	bl	80140b0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014a2e:	697b      	ldr	r3, [r7, #20]
 8014a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d002      	beq.n	8014a3c <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	2202      	movs	r2, #2
 8014a3a:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8014a3c:	f7ff fb46 	bl	80140cc <xTaskResumeAll>
 8014a40:	e006      	b.n	8014a50 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8014a42:	6978      	ldr	r0, [r7, #20]
 8014a44:	f7ff fa54 	bl	8013ef0 <eTaskGetState>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	461a      	mov	r2, r3
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d009      	beq.n	8014a6a <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f000 f860 	bl	8014b20 <prvTaskCheckFreeStackSpace>
 8014a60:	4603      	mov	r3, r0
 8014a62:	461a      	mov	r2, r3
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8014a68:	e002      	b.n	8014a70 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	841a      	strh	r2, [r3, #32]
	}
 8014a70:	bf00      	nop
 8014a72:	3718      	adds	r7, #24
 8014a74:	46bd      	mov	sp, r7
 8014a76:	bd80      	pop	{r7, pc}
 8014a78:	20007f50 	.word	0x20007f50

08014a7c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b08a      	sub	sp, #40	; 0x28
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	60f8      	str	r0, [r7, #12]
 8014a84:	60b9      	str	r1, [r7, #8]
 8014a86:	4613      	mov	r3, r2
 8014a88:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d03f      	beq.n	8014b16 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	623b      	str	r3, [r7, #32]
 8014a9a:	6a3b      	ldr	r3, [r7, #32]
 8014a9c:	685b      	ldr	r3, [r3, #4]
 8014a9e:	685a      	ldr	r2, [r3, #4]
 8014aa0:	6a3b      	ldr	r3, [r7, #32]
 8014aa2:	605a      	str	r2, [r3, #4]
 8014aa4:	6a3b      	ldr	r3, [r7, #32]
 8014aa6:	685a      	ldr	r2, [r3, #4]
 8014aa8:	6a3b      	ldr	r3, [r7, #32]
 8014aaa:	3308      	adds	r3, #8
 8014aac:	429a      	cmp	r2, r3
 8014aae:	d104      	bne.n	8014aba <prvListTasksWithinSingleList+0x3e>
 8014ab0:	6a3b      	ldr	r3, [r7, #32]
 8014ab2:	685b      	ldr	r3, [r3, #4]
 8014ab4:	685a      	ldr	r2, [r3, #4]
 8014ab6:	6a3b      	ldr	r3, [r7, #32]
 8014ab8:	605a      	str	r2, [r3, #4]
 8014aba:	6a3b      	ldr	r3, [r7, #32]
 8014abc:	685b      	ldr	r3, [r3, #4]
 8014abe:	68db      	ldr	r3, [r3, #12]
 8014ac0:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	61bb      	str	r3, [r7, #24]
 8014ac6:	69bb      	ldr	r3, [r7, #24]
 8014ac8:	685b      	ldr	r3, [r3, #4]
 8014aca:	685a      	ldr	r2, [r3, #4]
 8014acc:	69bb      	ldr	r3, [r7, #24]
 8014ace:	605a      	str	r2, [r3, #4]
 8014ad0:	69bb      	ldr	r3, [r7, #24]
 8014ad2:	685a      	ldr	r2, [r3, #4]
 8014ad4:	69bb      	ldr	r3, [r7, #24]
 8014ad6:	3308      	adds	r3, #8
 8014ad8:	429a      	cmp	r2, r3
 8014ada:	d104      	bne.n	8014ae6 <prvListTasksWithinSingleList+0x6a>
 8014adc:	69bb      	ldr	r3, [r7, #24]
 8014ade:	685b      	ldr	r3, [r3, #4]
 8014ae0:	685a      	ldr	r2, [r3, #4]
 8014ae2:	69bb      	ldr	r3, [r7, #24]
 8014ae4:	605a      	str	r2, [r3, #4]
 8014ae6:	69bb      	ldr	r3, [r7, #24]
 8014ae8:	685b      	ldr	r3, [r3, #4]
 8014aea:	68db      	ldr	r3, [r3, #12]
 8014aec:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8014aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014af0:	4613      	mov	r3, r2
 8014af2:	00db      	lsls	r3, r3, #3
 8014af4:	4413      	add	r3, r2
 8014af6:	009b      	lsls	r3, r3, #2
 8014af8:	461a      	mov	r2, r3
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	1899      	adds	r1, r3, r2
 8014afe:	79fb      	ldrb	r3, [r7, #7]
 8014b00:	2201      	movs	r2, #1
 8014b02:	6978      	ldr	r0, [r7, #20]
 8014b04:	f7ff ff54 	bl	80149b0 <vTaskGetInfo>
				uxTask++;
 8014b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b0a:	3301      	adds	r3, #1
 8014b0c:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8014b0e:	697a      	ldr	r2, [r7, #20]
 8014b10:	69fb      	ldr	r3, [r7, #28]
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d1d5      	bne.n	8014ac2 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8014b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014b18:	4618      	mov	r0, r3
 8014b1a:	3728      	adds	r7, #40	; 0x28
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}

08014b20 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8014b20:	b480      	push	{r7}
 8014b22:	b085      	sub	sp, #20
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8014b28:	2300      	movs	r3, #0
 8014b2a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014b2c:	e005      	b.n	8014b3a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	3301      	adds	r3, #1
 8014b32:	607b      	str	r3, [r7, #4]
			ulCount++;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	3301      	adds	r3, #1
 8014b38:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	781b      	ldrb	r3, [r3, #0]
 8014b3e:	2ba5      	cmp	r3, #165	; 0xa5
 8014b40:	d0f5      	beq.n	8014b2e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	089b      	lsrs	r3, r3, #2
 8014b46:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	b29b      	uxth	r3, r3
	}
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	3714      	adds	r7, #20
 8014b50:	46bd      	mov	sp, r7
 8014b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b56:	4770      	bx	lr

08014b58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b082      	sub	sp, #8
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	3360      	adds	r3, #96	; 0x60
 8014b64:	4618      	mov	r0, r3
 8014b66:	f002 ff0b 	bl	8017980 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d108      	bne.n	8014b86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f001 f9cb 	bl	8015f14 <vPortFree>
				vPortFree( pxTCB );
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f001 f9c8 	bl	8015f14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014b84:	e013      	b.n	8014bae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014b8c:	2b01      	cmp	r3, #1
 8014b8e:	d103      	bne.n	8014b98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f001 f9bf 	bl	8015f14 <vPortFree>
	}
 8014b96:	e00a      	b.n	8014bae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014b9e:	2b02      	cmp	r3, #2
 8014ba0:	d005      	beq.n	8014bae <prvDeleteTCB+0x56>
 8014ba2:	f640 725d 	movw	r2, #3933	; 0xf5d
 8014ba6:	4904      	ldr	r1, [pc, #16]	; (8014bb8 <prvDeleteTCB+0x60>)
 8014ba8:	4804      	ldr	r0, [pc, #16]	; (8014bbc <prvDeleteTCB+0x64>)
 8014baa:	f7f0 fc83 	bl	80054b4 <assertFail>
	}
 8014bae:	bf00      	nop
 8014bb0:	3708      	adds	r7, #8
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	bf00      	nop
 8014bb8:	0801b9d0 	.word	0x0801b9d0
 8014bbc:	0801bcc0 	.word	0x0801bcc0

08014bc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b083      	sub	sp, #12
 8014bc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014bc6:	4b0c      	ldr	r3, [pc, #48]	; (8014bf8 <prvResetNextTaskUnblockTime+0x38>)
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d104      	bne.n	8014bda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014bd0:	4b0a      	ldr	r3, [pc, #40]	; (8014bfc <prvResetNextTaskUnblockTime+0x3c>)
 8014bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014bd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014bd8:	e008      	b.n	8014bec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014bda:	4b07      	ldr	r3, [pc, #28]	; (8014bf8 <prvResetNextTaskUnblockTime+0x38>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	68db      	ldr	r3, [r3, #12]
 8014be0:	68db      	ldr	r3, [r3, #12]
 8014be2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	4a04      	ldr	r2, [pc, #16]	; (8014bfc <prvResetNextTaskUnblockTime+0x3c>)
 8014bea:	6013      	str	r3, [r2, #0]
}
 8014bec:	bf00      	nop
 8014bee:	370c      	adds	r7, #12
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf6:	4770      	bx	lr
 8014bf8:	2000810c 	.word	0x2000810c
 8014bfc:	20008178 	.word	0x20008178

08014c00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014c00:	b480      	push	{r7}
 8014c02:	b083      	sub	sp, #12
 8014c04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014c06:	4b0b      	ldr	r3, [pc, #44]	; (8014c34 <xTaskGetSchedulerState+0x34>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d102      	bne.n	8014c14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014c0e:	2301      	movs	r3, #1
 8014c10:	607b      	str	r3, [r7, #4]
 8014c12:	e008      	b.n	8014c26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c14:	4b08      	ldr	r3, [pc, #32]	; (8014c38 <xTaskGetSchedulerState+0x38>)
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d102      	bne.n	8014c22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014c1c:	2302      	movs	r3, #2
 8014c1e:	607b      	str	r3, [r7, #4]
 8014c20:	e001      	b.n	8014c26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014c22:	2300      	movs	r3, #0
 8014c24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014c26:	687b      	ldr	r3, [r7, #4]
	}
 8014c28:	4618      	mov	r0, r3
 8014c2a:	370c      	adds	r7, #12
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c32:	4770      	bx	lr
 8014c34:	20008164 	.word	0x20008164
 8014c38:	20008180 	.word	0x20008180

08014c3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b084      	sub	sp, #16
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014c48:	2300      	movs	r3, #0
 8014c4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d05e      	beq.n	8014d10 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014c52:	68bb      	ldr	r3, [r7, #8]
 8014c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c56:	4b31      	ldr	r3, [pc, #196]	; (8014d1c <xTaskPriorityInherit+0xe0>)
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d24e      	bcs.n	8014cfe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014c60:	68bb      	ldr	r3, [r7, #8]
 8014c62:	699b      	ldr	r3, [r3, #24]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	db06      	blt.n	8014c76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c68:	4b2c      	ldr	r3, [pc, #176]	; (8014d1c <xTaskPriorityInherit+0xe0>)
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c6e:	f1c3 0214 	rsb	r2, r3, #20
 8014c72:	68bb      	ldr	r3, [r7, #8]
 8014c74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014c76:	68bb      	ldr	r3, [r7, #8]
 8014c78:	6959      	ldr	r1, [r3, #20]
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c7e:	4613      	mov	r3, r2
 8014c80:	009b      	lsls	r3, r3, #2
 8014c82:	4413      	add	r3, r2
 8014c84:	009b      	lsls	r3, r3, #2
 8014c86:	4a26      	ldr	r2, [pc, #152]	; (8014d20 <xTaskPriorityInherit+0xe4>)
 8014c88:	4413      	add	r3, r2
 8014c8a:	4299      	cmp	r1, r3
 8014c8c:	d12f      	bne.n	8014cee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014c8e:	68bb      	ldr	r3, [r7, #8]
 8014c90:	3304      	adds	r3, #4
 8014c92:	4618      	mov	r0, r3
 8014c94:	f7fe f878 	bl	8012d88 <uxListRemove>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d10a      	bne.n	8014cb4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8014c9e:	68bb      	ldr	r3, [r7, #8]
 8014ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ca2:	2201      	movs	r2, #1
 8014ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8014ca8:	43da      	mvns	r2, r3
 8014caa:	4b1e      	ldr	r3, [pc, #120]	; (8014d24 <xTaskPriorityInherit+0xe8>)
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	4013      	ands	r3, r2
 8014cb0:	4a1c      	ldr	r2, [pc, #112]	; (8014d24 <xTaskPriorityInherit+0xe8>)
 8014cb2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014cb4:	4b19      	ldr	r3, [pc, #100]	; (8014d1c <xTaskPriorityInherit+0xe0>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cba:	68bb      	ldr	r3, [r7, #8]
 8014cbc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cc2:	2201      	movs	r2, #1
 8014cc4:	409a      	lsls	r2, r3
 8014cc6:	4b17      	ldr	r3, [pc, #92]	; (8014d24 <xTaskPriorityInherit+0xe8>)
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	4313      	orrs	r3, r2
 8014ccc:	4a15      	ldr	r2, [pc, #84]	; (8014d24 <xTaskPriorityInherit+0xe8>)
 8014cce:	6013      	str	r3, [r2, #0]
 8014cd0:	68bb      	ldr	r3, [r7, #8]
 8014cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cd4:	4613      	mov	r3, r2
 8014cd6:	009b      	lsls	r3, r3, #2
 8014cd8:	4413      	add	r3, r2
 8014cda:	009b      	lsls	r3, r3, #2
 8014cdc:	4a10      	ldr	r2, [pc, #64]	; (8014d20 <xTaskPriorityInherit+0xe4>)
 8014cde:	441a      	add	r2, r3
 8014ce0:	68bb      	ldr	r3, [r7, #8]
 8014ce2:	3304      	adds	r3, #4
 8014ce4:	4619      	mov	r1, r3
 8014ce6:	4610      	mov	r0, r2
 8014ce8:	f7fd fff1 	bl	8012cce <vListInsertEnd>
 8014cec:	e004      	b.n	8014cf8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014cee:	4b0b      	ldr	r3, [pc, #44]	; (8014d1c <xTaskPriorityInherit+0xe0>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cf4:	68bb      	ldr	r3, [r7, #8]
 8014cf6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	60fb      	str	r3, [r7, #12]
 8014cfc:	e008      	b.n	8014d10 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014d02:	4b06      	ldr	r3, [pc, #24]	; (8014d1c <xTaskPriorityInherit+0xe0>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d201      	bcs.n	8014d10 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014d0c:	2301      	movs	r3, #1
 8014d0e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014d10:	68fb      	ldr	r3, [r7, #12]
	}
 8014d12:	4618      	mov	r0, r3
 8014d14:	3710      	adds	r7, #16
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}
 8014d1a:	bf00      	nop
 8014d1c:	20007f50 	.word	0x20007f50
 8014d20:	20007f54 	.word	0x20007f54
 8014d24:	20008160 	.word	0x20008160

08014d28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b084      	sub	sp, #16
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014d34:	2300      	movs	r3, #0
 8014d36:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d064      	beq.n	8014e08 <xTaskPriorityDisinherit+0xe0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014d3e:	4b35      	ldr	r3, [pc, #212]	; (8014e14 <xTaskPriorityDisinherit+0xec>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	68ba      	ldr	r2, [r7, #8]
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d005      	beq.n	8014d54 <xTaskPriorityDisinherit+0x2c>
 8014d48:	f241 0213 	movw	r2, #4115	; 0x1013
 8014d4c:	4932      	ldr	r1, [pc, #200]	; (8014e18 <xTaskPriorityDisinherit+0xf0>)
 8014d4e:	4833      	ldr	r0, [pc, #204]	; (8014e1c <xTaskPriorityDisinherit+0xf4>)
 8014d50:	f7f0 fbb0 	bl	80054b4 <assertFail>
			configASSERT( pxTCB->uxMutexesHeld );
 8014d54:	68bb      	ldr	r3, [r7, #8]
 8014d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d105      	bne.n	8014d68 <xTaskPriorityDisinherit+0x40>
 8014d5c:	f241 0214 	movw	r2, #4116	; 0x1014
 8014d60:	492d      	ldr	r1, [pc, #180]	; (8014e18 <xTaskPriorityDisinherit+0xf0>)
 8014d62:	482f      	ldr	r0, [pc, #188]	; (8014e20 <xTaskPriorityDisinherit+0xf8>)
 8014d64:	f7f0 fba6 	bl	80054b4 <assertFail>
			( pxTCB->uxMutexesHeld )--;
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d6c:	1e5a      	subs	r2, r3, #1
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d044      	beq.n	8014e08 <xTaskPriorityDisinherit+0xe0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d140      	bne.n	8014e08 <xTaskPriorityDisinherit+0xe0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	3304      	adds	r3, #4
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7fd fffc 	bl	8012d88 <uxListRemove>
 8014d90:	4603      	mov	r3, r0
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d115      	bne.n	8014dc2 <xTaskPriorityDisinherit+0x9a>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d9a:	4922      	ldr	r1, [pc, #136]	; (8014e24 <xTaskPriorityDisinherit+0xfc>)
 8014d9c:	4613      	mov	r3, r2
 8014d9e:	009b      	lsls	r3, r3, #2
 8014da0:	4413      	add	r3, r2
 8014da2:	009b      	lsls	r3, r3, #2
 8014da4:	440b      	add	r3, r1
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d10a      	bne.n	8014dc2 <xTaskPriorityDisinherit+0x9a>
 8014dac:	68bb      	ldr	r3, [r7, #8]
 8014dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014db0:	2201      	movs	r2, #1
 8014db2:	fa02 f303 	lsl.w	r3, r2, r3
 8014db6:	43da      	mvns	r2, r3
 8014db8:	4b1b      	ldr	r3, [pc, #108]	; (8014e28 <xTaskPriorityDisinherit+0x100>)
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	4013      	ands	r3, r2
 8014dbe:	4a1a      	ldr	r2, [pc, #104]	; (8014e28 <xTaskPriorityDisinherit+0x100>)
 8014dc0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014dc2:	68bb      	ldr	r3, [r7, #8]
 8014dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014dca:	68bb      	ldr	r3, [r7, #8]
 8014dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dce:	f1c3 0214 	rsb	r2, r3, #20
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014dd6:	68bb      	ldr	r3, [r7, #8]
 8014dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dda:	2201      	movs	r2, #1
 8014ddc:	409a      	lsls	r2, r3
 8014dde:	4b12      	ldr	r3, [pc, #72]	; (8014e28 <xTaskPriorityDisinherit+0x100>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	4313      	orrs	r3, r2
 8014de4:	4a10      	ldr	r2, [pc, #64]	; (8014e28 <xTaskPriorityDisinherit+0x100>)
 8014de6:	6013      	str	r3, [r2, #0]
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dec:	4613      	mov	r3, r2
 8014dee:	009b      	lsls	r3, r3, #2
 8014df0:	4413      	add	r3, r2
 8014df2:	009b      	lsls	r3, r3, #2
 8014df4:	4a0b      	ldr	r2, [pc, #44]	; (8014e24 <xTaskPriorityDisinherit+0xfc>)
 8014df6:	441a      	add	r2, r3
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	3304      	adds	r3, #4
 8014dfc:	4619      	mov	r1, r3
 8014dfe:	4610      	mov	r0, r2
 8014e00:	f7fd ff65 	bl	8012cce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014e04:	2301      	movs	r3, #1
 8014e06:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014e08:	68fb      	ldr	r3, [r7, #12]
	}
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	3710      	adds	r7, #16
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}
 8014e12:	bf00      	nop
 8014e14:	20007f50 	.word	0x20007f50
 8014e18:	0801b9d0 	.word	0x0801b9d0
 8014e1c:	0801bd08 	.word	0x0801bd08
 8014e20:	0801bd20 	.word	0x0801bd20
 8014e24:	20007f54 	.word	0x20007f54
 8014e28:	20008160 	.word	0x20008160

08014e2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b086      	sub	sp, #24
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
 8014e34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d06d      	beq.n	8014f20 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014e44:	693b      	ldr	r3, [r7, #16]
 8014e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d105      	bne.n	8014e58 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8014e4c:	f241 0262 	movw	r2, #4194	; 0x1062
 8014e50:	4935      	ldr	r1, [pc, #212]	; (8014f28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014e52:	4836      	ldr	r0, [pc, #216]	; (8014f2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014e54:	f7f0 fb2e 	bl	80054b4 <assertFail>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014e58:	693b      	ldr	r3, [r7, #16]
 8014e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e5c:	683a      	ldr	r2, [r7, #0]
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d902      	bls.n	8014e68 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014e62:	683b      	ldr	r3, [r7, #0]
 8014e64:	617b      	str	r3, [r7, #20]
 8014e66:	e002      	b.n	8014e6e <vTaskPriorityDisinheritAfterTimeout+0x42>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014e68:	693b      	ldr	r3, [r7, #16]
 8014e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e6c:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014e6e:	693b      	ldr	r3, [r7, #16]
 8014e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e72:	697a      	ldr	r2, [r7, #20]
 8014e74:	429a      	cmp	r2, r3
 8014e76:	d053      	beq.n	8014f20 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014e78:	693b      	ldr	r3, [r7, #16]
 8014e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e7c:	68fa      	ldr	r2, [r7, #12]
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	d14e      	bne.n	8014f20 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014e82:	4b2b      	ldr	r3, [pc, #172]	; (8014f30 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	693a      	ldr	r2, [r7, #16]
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	d105      	bne.n	8014e98 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8014e8c:	f241 027d 	movw	r2, #4221	; 0x107d
 8014e90:	4925      	ldr	r1, [pc, #148]	; (8014f28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014e92:	4828      	ldr	r0, [pc, #160]	; (8014f34 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8014e94:	f7f0 fb0e 	bl	80054b4 <assertFail>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e9c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8014e9e:	693b      	ldr	r3, [r7, #16]
 8014ea0:	697a      	ldr	r2, [r7, #20]
 8014ea2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	699b      	ldr	r3, [r3, #24]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	db04      	blt.n	8014eb6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	f1c3 0214 	rsb	r2, r3, #20
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014eb6:	693b      	ldr	r3, [r7, #16]
 8014eb8:	6959      	ldr	r1, [r3, #20]
 8014eba:	68ba      	ldr	r2, [r7, #8]
 8014ebc:	4613      	mov	r3, r2
 8014ebe:	009b      	lsls	r3, r3, #2
 8014ec0:	4413      	add	r3, r2
 8014ec2:	009b      	lsls	r3, r3, #2
 8014ec4:	4a1c      	ldr	r2, [pc, #112]	; (8014f38 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8014ec6:	4413      	add	r3, r2
 8014ec8:	4299      	cmp	r1, r3
 8014eca:	d129      	bne.n	8014f20 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	3304      	adds	r3, #4
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f7fd ff59 	bl	8012d88 <uxListRemove>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d10a      	bne.n	8014ef2 <vTaskPriorityDisinheritAfterTimeout+0xc6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8014edc:	693b      	ldr	r3, [r7, #16]
 8014ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ee0:	2201      	movs	r2, #1
 8014ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8014ee6:	43da      	mvns	r2, r3
 8014ee8:	4b14      	ldr	r3, [pc, #80]	; (8014f3c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	4013      	ands	r3, r2
 8014eee:	4a13      	ldr	r2, [pc, #76]	; (8014f3c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8014ef0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014ef2:	693b      	ldr	r3, [r7, #16]
 8014ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	409a      	lsls	r2, r3
 8014efa:	4b10      	ldr	r3, [pc, #64]	; (8014f3c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	4313      	orrs	r3, r2
 8014f00:	4a0e      	ldr	r2, [pc, #56]	; (8014f3c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8014f02:	6013      	str	r3, [r2, #0]
 8014f04:	693b      	ldr	r3, [r7, #16]
 8014f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f08:	4613      	mov	r3, r2
 8014f0a:	009b      	lsls	r3, r3, #2
 8014f0c:	4413      	add	r3, r2
 8014f0e:	009b      	lsls	r3, r3, #2
 8014f10:	4a09      	ldr	r2, [pc, #36]	; (8014f38 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8014f12:	441a      	add	r2, r3
 8014f14:	693b      	ldr	r3, [r7, #16]
 8014f16:	3304      	adds	r3, #4
 8014f18:	4619      	mov	r1, r3
 8014f1a:	4610      	mov	r0, r2
 8014f1c:	f7fd fed7 	bl	8012cce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014f20:	bf00      	nop
 8014f22:	3718      	adds	r7, #24
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}
 8014f28:	0801b9d0 	.word	0x0801b9d0
 8014f2c:	0801bd20 	.word	0x0801bd20
 8014f30:	20007f50 	.word	0x20007f50
 8014f34:	0801bd38 	.word	0x0801bd38
 8014f38:	20007f54 	.word	0x20007f54
 8014f3c:	20008160 	.word	0x20008160

08014f40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014f40:	b480      	push	{r7}
 8014f42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014f44:	4b07      	ldr	r3, [pc, #28]	; (8014f64 <pvTaskIncrementMutexHeldCount+0x24>)
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d004      	beq.n	8014f56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014f4c:	4b05      	ldr	r3, [pc, #20]	; (8014f64 <pvTaskIncrementMutexHeldCount+0x24>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014f52:	3201      	adds	r2, #1
 8014f54:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8014f56:	4b03      	ldr	r3, [pc, #12]	; (8014f64 <pvTaskIncrementMutexHeldCount+0x24>)
 8014f58:	681b      	ldr	r3, [r3, #0]
	}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f62:	4770      	bx	lr
 8014f64:	20007f50 	.word	0x20007f50

08014f68 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8014f72:	f000 fdfd 	bl	8015b70 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8014f76:	4b20      	ldr	r3, [pc, #128]	; (8014ff8 <ulTaskNotifyTake+0x90>)
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d113      	bne.n	8014faa <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8014f82:	4b1d      	ldr	r3, [pc, #116]	; (8014ff8 <ulTaskNotifyTake+0x90>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	2201      	movs	r2, #1
 8014f88:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d00b      	beq.n	8014faa <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014f92:	2101      	movs	r1, #1
 8014f94:	6838      	ldr	r0, [r7, #0]
 8014f96:	f000 f859 	bl	801504c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014f9a:	4b18      	ldr	r3, [pc, #96]	; (8014ffc <ulTaskNotifyTake+0x94>)
 8014f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fa0:	601a      	str	r2, [r3, #0]
 8014fa2:	f3bf 8f4f 	dsb	sy
 8014fa6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014faa:	f000 fe0f 	bl	8015bcc <vPortExitCritical>

		taskENTER_CRITICAL();
 8014fae:	f000 fddf 	bl	8015b70 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8014fb2:	4b11      	ldr	r3, [pc, #68]	; (8014ff8 <ulTaskNotifyTake+0x90>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014fba:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d00e      	beq.n	8014fe0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d005      	beq.n	8014fd4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8014fc8:	4b0b      	ldr	r3, [pc, #44]	; (8014ff8 <ulTaskNotifyTake+0x90>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8014fd2:	e005      	b.n	8014fe0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8014fd4:	4b08      	ldr	r3, [pc, #32]	; (8014ff8 <ulTaskNotifyTake+0x90>)
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	68fa      	ldr	r2, [r7, #12]
 8014fda:	3a01      	subs	r2, #1
 8014fdc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014fe0:	4b05      	ldr	r3, [pc, #20]	; (8014ff8 <ulTaskNotifyTake+0x90>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8014fea:	f000 fdef 	bl	8015bcc <vPortExitCritical>

		return ulReturn;
 8014fee:	68fb      	ldr	r3, [r7, #12]
	}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3710      	adds	r7, #16
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}
 8014ff8:	20007f50 	.word	0x20007f50
 8014ffc:	e000ed04 	.word	0xe000ed04

08015000 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 8015000:	b580      	push	{r7, lr}
 8015002:	b084      	sub	sp, #16
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d102      	bne.n	8015016 <ulTaskNotifyValueClear+0x16>
 8015010:	4b0d      	ldr	r3, [pc, #52]	; (8015048 <ulTaskNotifyValueClear+0x48>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	e000      	b.n	8015018 <ulTaskNotifyValueClear+0x18>
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 801501a:	f000 fda9 	bl	8015b70 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801501e:	4b0a      	ldr	r3, [pc, #40]	; (8015048 <ulTaskNotifyValueClear+0x48>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015026:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801502e:	683b      	ldr	r3, [r7, #0]
 8015030:	43db      	mvns	r3, r3
 8015032:	401a      	ands	r2, r3
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 801503a:	f000 fdc7 	bl	8015bcc <vPortExitCritical>

		return ulReturn;
 801503e:	68bb      	ldr	r3, [r7, #8]
	}
 8015040:	4618      	mov	r0, r3
 8015042:	3710      	adds	r7, #16
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}
 8015048:	20007f50 	.word	0x20007f50

0801504c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b084      	sub	sp, #16
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015056:	4b29      	ldr	r3, [pc, #164]	; (80150fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801505c:	4b28      	ldr	r3, [pc, #160]	; (8015100 <prvAddCurrentTaskToDelayedList+0xb4>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	3304      	adds	r3, #4
 8015062:	4618      	mov	r0, r3
 8015064:	f7fd fe90 	bl	8012d88 <uxListRemove>
 8015068:	4603      	mov	r3, r0
 801506a:	2b00      	cmp	r3, #0
 801506c:	d10b      	bne.n	8015086 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801506e:	4b24      	ldr	r3, [pc, #144]	; (8015100 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015074:	2201      	movs	r2, #1
 8015076:	fa02 f303 	lsl.w	r3, r2, r3
 801507a:	43da      	mvns	r2, r3
 801507c:	4b21      	ldr	r3, [pc, #132]	; (8015104 <prvAddCurrentTaskToDelayedList+0xb8>)
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	4013      	ands	r3, r2
 8015082:	4a20      	ldr	r2, [pc, #128]	; (8015104 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015084:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801508c:	d10a      	bne.n	80150a4 <prvAddCurrentTaskToDelayedList+0x58>
 801508e:	683b      	ldr	r3, [r7, #0]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d007      	beq.n	80150a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015094:	4b1a      	ldr	r3, [pc, #104]	; (8015100 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	3304      	adds	r3, #4
 801509a:	4619      	mov	r1, r3
 801509c:	481a      	ldr	r0, [pc, #104]	; (8015108 <prvAddCurrentTaskToDelayedList+0xbc>)
 801509e:	f7fd fe16 	bl	8012cce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80150a2:	e026      	b.n	80150f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80150a4:	68fa      	ldr	r2, [r7, #12]
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	4413      	add	r3, r2
 80150aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80150ac:	4b14      	ldr	r3, [pc, #80]	; (8015100 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	68ba      	ldr	r2, [r7, #8]
 80150b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80150b4:	68ba      	ldr	r2, [r7, #8]
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d209      	bcs.n	80150d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150bc:	4b13      	ldr	r3, [pc, #76]	; (801510c <prvAddCurrentTaskToDelayedList+0xc0>)
 80150be:	681a      	ldr	r2, [r3, #0]
 80150c0:	4b0f      	ldr	r3, [pc, #60]	; (8015100 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	3304      	adds	r3, #4
 80150c6:	4619      	mov	r1, r3
 80150c8:	4610      	mov	r0, r2
 80150ca:	f7fd fe24 	bl	8012d16 <vListInsert>
}
 80150ce:	e010      	b.n	80150f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150d0:	4b0f      	ldr	r3, [pc, #60]	; (8015110 <prvAddCurrentTaskToDelayedList+0xc4>)
 80150d2:	681a      	ldr	r2, [r3, #0]
 80150d4:	4b0a      	ldr	r3, [pc, #40]	; (8015100 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	3304      	adds	r3, #4
 80150da:	4619      	mov	r1, r3
 80150dc:	4610      	mov	r0, r2
 80150de:	f7fd fe1a 	bl	8012d16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80150e2:	4b0c      	ldr	r3, [pc, #48]	; (8015114 <prvAddCurrentTaskToDelayedList+0xc8>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	68ba      	ldr	r2, [r7, #8]
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d202      	bcs.n	80150f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80150ec:	4a09      	ldr	r2, [pc, #36]	; (8015114 <prvAddCurrentTaskToDelayedList+0xc8>)
 80150ee:	68bb      	ldr	r3, [r7, #8]
 80150f0:	6013      	str	r3, [r2, #0]
}
 80150f2:	bf00      	nop
 80150f4:	3710      	adds	r7, #16
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}
 80150fa:	bf00      	nop
 80150fc:	2000815c 	.word	0x2000815c
 8015100:	20007f50 	.word	0x20007f50
 8015104:	20008160 	.word	0x20008160
 8015108:	20008140 	.word	0x20008140
 801510c:	20008110 	.word	0x20008110
 8015110:	2000810c 	.word	0x2000810c
 8015114:	20008178 	.word	0x20008178

08015118 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b088      	sub	sp, #32
 801511c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801511e:	2300      	movs	r3, #0
 8015120:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015122:	f000 fb95 	bl	8015850 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015126:	4b19      	ldr	r3, [pc, #100]	; (801518c <xTimerCreateTimerTask+0x74>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d020      	beq.n	8015170 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801512e:	2300      	movs	r3, #0
 8015130:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015132:	2300      	movs	r3, #0
 8015134:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015136:	463a      	mov	r2, r7
 8015138:	1d39      	adds	r1, r7, #4
 801513a:	f107 0308 	add.w	r3, r7, #8
 801513e:	4618      	mov	r0, r3
 8015140:	f7f3 fbce 	bl	80088e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015144:	6839      	ldr	r1, [r7, #0]
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	68ba      	ldr	r2, [r7, #8]
 801514a:	9202      	str	r2, [sp, #8]
 801514c:	9301      	str	r3, [sp, #4]
 801514e:	2301      	movs	r3, #1
 8015150:	9300      	str	r3, [sp, #0]
 8015152:	2300      	movs	r3, #0
 8015154:	460a      	mov	r2, r1
 8015156:	490e      	ldr	r1, [pc, #56]	; (8015190 <xTimerCreateTimerTask+0x78>)
 8015158:	480e      	ldr	r0, [pc, #56]	; (8015194 <xTimerCreateTimerTask+0x7c>)
 801515a:	f7fe fcdd 	bl	8013b18 <xTaskCreateStatic>
 801515e:	4603      	mov	r3, r0
 8015160:	4a0d      	ldr	r2, [pc, #52]	; (8015198 <xTimerCreateTimerTask+0x80>)
 8015162:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015164:	4b0c      	ldr	r3, [pc, #48]	; (8015198 <xTimerCreateTimerTask+0x80>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d001      	beq.n	8015170 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801516c:	2301      	movs	r3, #1
 801516e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d105      	bne.n	8015182 <xTimerCreateTimerTask+0x6a>
 8015176:	f240 1213 	movw	r2, #275	; 0x113
 801517a:	4908      	ldr	r1, [pc, #32]	; (801519c <xTimerCreateTimerTask+0x84>)
 801517c:	4808      	ldr	r0, [pc, #32]	; (80151a0 <xTimerCreateTimerTask+0x88>)
 801517e:	f7f0 f999 	bl	80054b4 <assertFail>
	return xReturn;
 8015182:	68fb      	ldr	r3, [r7, #12]
}
 8015184:	4618      	mov	r0, r3
 8015186:	3710      	adds	r7, #16
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}
 801518c:	200081bc 	.word	0x200081bc
 8015190:	0801bde8 	.word	0x0801bde8
 8015194:	08015401 	.word	0x08015401
 8015198:	200081c0 	.word	0x200081c0
 801519c:	0801bdf0 	.word	0x0801bdf0
 80151a0:	0801be24 	.word	0x0801be24

080151a4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b088      	sub	sp, #32
 80151a8:	af02      	add	r7, sp, #8
 80151aa:	60f8      	str	r0, [r7, #12]
 80151ac:	60b9      	str	r1, [r7, #8]
 80151ae:	607a      	str	r2, [r7, #4]
 80151b0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80151b2:	202c      	movs	r0, #44	; 0x2c
 80151b4:	f000 fdec 	bl	8015d90 <pvPortMalloc>
 80151b8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80151ba:	697b      	ldr	r3, [r7, #20]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d00d      	beq.n	80151dc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80151c0:	697b      	ldr	r3, [r7, #20]
 80151c2:	2200      	movs	r2, #0
 80151c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	9301      	str	r3, [sp, #4]
 80151cc:	6a3b      	ldr	r3, [r7, #32]
 80151ce:	9300      	str	r3, [sp, #0]
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	687a      	ldr	r2, [r7, #4]
 80151d4:	68b9      	ldr	r1, [r7, #8]
 80151d6:	68f8      	ldr	r0, [r7, #12]
 80151d8:	f000 f840 	bl	801525c <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80151dc:	697b      	ldr	r3, [r7, #20]
	}
 80151de:	4618      	mov	r0, r3
 80151e0:	3718      	adds	r7, #24
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bd80      	pop	{r7, pc}
	...

080151e8 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b088      	sub	sp, #32
 80151ec:	af02      	add	r7, sp, #8
 80151ee:	60f8      	str	r0, [r7, #12]
 80151f0:	60b9      	str	r1, [r7, #8]
 80151f2:	607a      	str	r2, [r7, #4]
 80151f4:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80151f6:	232c      	movs	r3, #44	; 0x2c
 80151f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	2b2c      	cmp	r3, #44	; 0x2c
 80151fe:	d005      	beq.n	801520c <xTimerCreateStatic+0x24>
 8015200:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8015204:	4912      	ldr	r1, [pc, #72]	; (8015250 <xTimerCreateStatic+0x68>)
 8015206:	4813      	ldr	r0, [pc, #76]	; (8015254 <xTimerCreateStatic+0x6c>)
 8015208:	f7f0 f954 	bl	80054b4 <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801520c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015210:	2b00      	cmp	r3, #0
 8015212:	d105      	bne.n	8015220 <xTimerCreateStatic+0x38>
 8015214:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8015218:	490d      	ldr	r1, [pc, #52]	; (8015250 <xTimerCreateStatic+0x68>)
 801521a:	480f      	ldr	r0, [pc, #60]	; (8015258 <xTimerCreateStatic+0x70>)
 801521c:	f7f0 f94a 	bl	80054b4 <assertFail>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8015220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015222:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d00d      	beq.n	8015246 <xTimerCreateStatic+0x5e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 801522a:	697b      	ldr	r3, [r7, #20]
 801522c:	2202      	movs	r2, #2
 801522e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8015232:	697b      	ldr	r3, [r7, #20]
 8015234:	9301      	str	r3, [sp, #4]
 8015236:	6a3b      	ldr	r3, [r7, #32]
 8015238:	9300      	str	r3, [sp, #0]
 801523a:	683b      	ldr	r3, [r7, #0]
 801523c:	687a      	ldr	r2, [r7, #4]
 801523e:	68b9      	ldr	r1, [r7, #8]
 8015240:	68f8      	ldr	r0, [r7, #12]
 8015242:	f000 f80b 	bl	801525c <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8015246:	697b      	ldr	r3, [r7, #20]
	}
 8015248:	4618      	mov	r0, r3
 801524a:	3718      	adds	r7, #24
 801524c:	46bd      	mov	sp, r7
 801524e:	bd80      	pop	{r7, pc}
 8015250:	0801bdf0 	.word	0x0801bdf0
 8015254:	0801be2c 	.word	0x0801be2c
 8015258:	0801be48 	.word	0x0801be48

0801525c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b084      	sub	sp, #16
 8015260:	af00      	add	r7, sp, #0
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	607a      	str	r2, [r7, #4]
 8015268:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d105      	bne.n	801527c <prvInitialiseNewTimer+0x20>
 8015270:	f240 1265 	movw	r2, #357	; 0x165
 8015274:	4914      	ldr	r1, [pc, #80]	; (80152c8 <prvInitialiseNewTimer+0x6c>)
 8015276:	4815      	ldr	r0, [pc, #84]	; (80152cc <prvInitialiseNewTimer+0x70>)
 8015278:	f7f0 f91c 	bl	80054b4 <assertFail>

	if( pxNewTimer != NULL )
 801527c:	69fb      	ldr	r3, [r7, #28]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d01e      	beq.n	80152c0 <prvInitialiseNewTimer+0x64>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8015282:	f000 fae5 	bl	8015850 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8015286:	69fb      	ldr	r3, [r7, #28]
 8015288:	68fa      	ldr	r2, [r7, #12]
 801528a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801528c:	69fb      	ldr	r3, [r7, #28]
 801528e:	68ba      	ldr	r2, [r7, #8]
 8015290:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8015292:	69fb      	ldr	r3, [r7, #28]
 8015294:	683a      	ldr	r2, [r7, #0]
 8015296:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015298:	69fb      	ldr	r3, [r7, #28]
 801529a:	69ba      	ldr	r2, [r7, #24]
 801529c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801529e:	69fb      	ldr	r3, [r7, #28]
 80152a0:	3304      	adds	r3, #4
 80152a2:	4618      	mov	r0, r3
 80152a4:	f7fd fd06 	bl	8012cb4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d008      	beq.n	80152c0 <prvInitialiseNewTimer+0x64>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80152ae:	69fb      	ldr	r3, [r7, #28]
 80152b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152b4:	f043 0304 	orr.w	r3, r3, #4
 80152b8:	b2da      	uxtb	r2, r3
 80152ba:	69fb      	ldr	r3, [r7, #28]
 80152bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80152c0:	bf00      	nop
 80152c2:	3710      	adds	r7, #16
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bd80      	pop	{r7, pc}
 80152c8:	0801bdf0 	.word	0x0801bdf0
 80152cc:	0801be58 	.word	0x0801be58

080152d0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b08a      	sub	sp, #40	; 0x28
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	60f8      	str	r0, [r7, #12]
 80152d8:	60b9      	str	r1, [r7, #8]
 80152da:	607a      	str	r2, [r7, #4]
 80152dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80152de:	2300      	movs	r3, #0
 80152e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d105      	bne.n	80152f4 <xTimerGenericCommand+0x24>
 80152e8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80152ec:	491b      	ldr	r1, [pc, #108]	; (801535c <xTimerGenericCommand+0x8c>)
 80152ee:	481c      	ldr	r0, [pc, #112]	; (8015360 <xTimerGenericCommand+0x90>)
 80152f0:	f7f0 f8e0 	bl	80054b4 <assertFail>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80152f4:	4b1b      	ldr	r3, [pc, #108]	; (8015364 <xTimerGenericCommand+0x94>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d02a      	beq.n	8015352 <xTimerGenericCommand+0x82>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	2b05      	cmp	r3, #5
 801530c:	dc18      	bgt.n	8015340 <xTimerGenericCommand+0x70>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801530e:	f7ff fc77 	bl	8014c00 <xTaskGetSchedulerState>
 8015312:	4603      	mov	r3, r0
 8015314:	2b02      	cmp	r3, #2
 8015316:	d109      	bne.n	801532c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015318:	4b12      	ldr	r3, [pc, #72]	; (8015364 <xTimerGenericCommand+0x94>)
 801531a:	6818      	ldr	r0, [r3, #0]
 801531c:	f107 0114 	add.w	r1, r7, #20
 8015320:	2300      	movs	r3, #0
 8015322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015324:	f7fd fed8 	bl	80130d8 <xQueueGenericSend>
 8015328:	6278      	str	r0, [r7, #36]	; 0x24
 801532a:	e012      	b.n	8015352 <xTimerGenericCommand+0x82>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801532c:	4b0d      	ldr	r3, [pc, #52]	; (8015364 <xTimerGenericCommand+0x94>)
 801532e:	6818      	ldr	r0, [r3, #0]
 8015330:	f107 0114 	add.w	r1, r7, #20
 8015334:	2300      	movs	r3, #0
 8015336:	2200      	movs	r2, #0
 8015338:	f7fd fece 	bl	80130d8 <xQueueGenericSend>
 801533c:	6278      	str	r0, [r7, #36]	; 0x24
 801533e:	e008      	b.n	8015352 <xTimerGenericCommand+0x82>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015340:	4b08      	ldr	r3, [pc, #32]	; (8015364 <xTimerGenericCommand+0x94>)
 8015342:	6818      	ldr	r0, [r3, #0]
 8015344:	f107 0114 	add.w	r1, r7, #20
 8015348:	2300      	movs	r3, #0
 801534a:	683a      	ldr	r2, [r7, #0]
 801534c:	f7fd ffd2 	bl	80132f4 <xQueueGenericSendFromISR>
 8015350:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015354:	4618      	mov	r0, r3
 8015356:	3728      	adds	r7, #40	; 0x28
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}
 801535c:	0801bdf0 	.word	0x0801bdf0
 8015360:	0801be74 	.word	0x0801be74
 8015364:	200081bc 	.word	0x200081bc

08015368 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b086      	sub	sp, #24
 801536c:	af02      	add	r7, sp, #8
 801536e:	6078      	str	r0, [r7, #4]
 8015370:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015372:	4b20      	ldr	r3, [pc, #128]	; (80153f4 <prvProcessExpiredTimer+0x8c>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	68db      	ldr	r3, [r3, #12]
 8015378:	68db      	ldr	r3, [r3, #12]
 801537a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	3304      	adds	r3, #4
 8015380:	4618      	mov	r0, r3
 8015382:	f7fd fd01 	bl	8012d88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801538c:	f003 0304 	and.w	r3, r3, #4
 8015390:	2b00      	cmp	r3, #0
 8015392:	d01e      	beq.n	80153d2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	699a      	ldr	r2, [r3, #24]
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	18d1      	adds	r1, r2, r3
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	683a      	ldr	r2, [r7, #0]
 80153a0:	68f8      	ldr	r0, [r7, #12]
 80153a2:	f000 f8d1 	bl	8015548 <prvInsertTimerInActiveList>
 80153a6:	4603      	mov	r3, r0
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d01b      	beq.n	80153e4 <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80153ac:	2300      	movs	r3, #0
 80153ae:	9300      	str	r3, [sp, #0]
 80153b0:	2300      	movs	r3, #0
 80153b2:	687a      	ldr	r2, [r7, #4]
 80153b4:	2100      	movs	r1, #0
 80153b6:	68f8      	ldr	r0, [r7, #12]
 80153b8:	f7ff ff8a 	bl	80152d0 <xTimerGenericCommand>
 80153bc:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 80153be:	68bb      	ldr	r3, [r7, #8]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d10f      	bne.n	80153e4 <prvProcessExpiredTimer+0x7c>
 80153c4:	f240 2211 	movw	r2, #529	; 0x211
 80153c8:	490b      	ldr	r1, [pc, #44]	; (80153f8 <prvProcessExpiredTimer+0x90>)
 80153ca:	480c      	ldr	r0, [pc, #48]	; (80153fc <prvProcessExpiredTimer+0x94>)
 80153cc:	f7f0 f872 	bl	80054b4 <assertFail>
 80153d0:	e008      	b.n	80153e4 <prvProcessExpiredTimer+0x7c>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80153d8:	f023 0301 	bic.w	r3, r3, #1
 80153dc:	b2da      	uxtb	r2, r3
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	6a1b      	ldr	r3, [r3, #32]
 80153e8:	68f8      	ldr	r0, [r7, #12]
 80153ea:	4798      	blx	r3
}
 80153ec:	bf00      	nop
 80153ee:	3710      	adds	r7, #16
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}
 80153f4:	200081b4 	.word	0x200081b4
 80153f8:	0801bdf0 	.word	0x0801bdf0
 80153fc:	0801be9c 	.word	0x0801be9c

08015400 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015408:	f107 0308 	add.w	r3, r7, #8
 801540c:	4618      	mov	r0, r3
 801540e:	f000 f857 	bl	80154c0 <prvGetNextExpireTime>
 8015412:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015414:	68bb      	ldr	r3, [r7, #8]
 8015416:	4619      	mov	r1, r3
 8015418:	68f8      	ldr	r0, [r7, #12]
 801541a:	f000 f803 	bl	8015424 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801541e:	f000 f8d5 	bl	80155cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015422:	e7f1      	b.n	8015408 <prvTimerTask+0x8>

08015424 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b084      	sub	sp, #16
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
 801542c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801542e:	f7fe fe3f 	bl	80140b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015432:	f107 0308 	add.w	r3, r7, #8
 8015436:	4618      	mov	r0, r3
 8015438:	f000 f866 	bl	8015508 <prvSampleTimeNow>
 801543c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d130      	bne.n	80154a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d10a      	bne.n	8015460 <prvProcessTimerOrBlockTask+0x3c>
 801544a:	687a      	ldr	r2, [r7, #4]
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	429a      	cmp	r2, r3
 8015450:	d806      	bhi.n	8015460 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015452:	f7fe fe3b 	bl	80140cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015456:	68f9      	ldr	r1, [r7, #12]
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f7ff ff85 	bl	8015368 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801545e:	e024      	b.n	80154aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015460:	683b      	ldr	r3, [r7, #0]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d008      	beq.n	8015478 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015466:	4b13      	ldr	r3, [pc, #76]	; (80154b4 <prvProcessTimerOrBlockTask+0x90>)
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d101      	bne.n	8015474 <prvProcessTimerOrBlockTask+0x50>
 8015470:	2301      	movs	r3, #1
 8015472:	e000      	b.n	8015476 <prvProcessTimerOrBlockTask+0x52>
 8015474:	2300      	movs	r3, #0
 8015476:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015478:	4b0f      	ldr	r3, [pc, #60]	; (80154b8 <prvProcessTimerOrBlockTask+0x94>)
 801547a:	6818      	ldr	r0, [r3, #0]
 801547c:	687a      	ldr	r2, [r7, #4]
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	1ad3      	subs	r3, r2, r3
 8015482:	683a      	ldr	r2, [r7, #0]
 8015484:	4619      	mov	r1, r3
 8015486:	f7fe fb13 	bl	8013ab0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801548a:	f7fe fe1f 	bl	80140cc <xTaskResumeAll>
 801548e:	4603      	mov	r3, r0
 8015490:	2b00      	cmp	r3, #0
 8015492:	d10a      	bne.n	80154aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015494:	4b09      	ldr	r3, [pc, #36]	; (80154bc <prvProcessTimerOrBlockTask+0x98>)
 8015496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801549a:	601a      	str	r2, [r3, #0]
 801549c:	f3bf 8f4f 	dsb	sy
 80154a0:	f3bf 8f6f 	isb	sy
}
 80154a4:	e001      	b.n	80154aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80154a6:	f7fe fe11 	bl	80140cc <xTaskResumeAll>
}
 80154aa:	bf00      	nop
 80154ac:	3710      	adds	r7, #16
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bd80      	pop	{r7, pc}
 80154b2:	bf00      	nop
 80154b4:	200081b8 	.word	0x200081b8
 80154b8:	200081bc 	.word	0x200081bc
 80154bc:	e000ed04 	.word	0xe000ed04

080154c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80154c0:	b480      	push	{r7}
 80154c2:	b085      	sub	sp, #20
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80154c8:	4b0e      	ldr	r3, [pc, #56]	; (8015504 <prvGetNextExpireTime+0x44>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d101      	bne.n	80154d6 <prvGetNextExpireTime+0x16>
 80154d2:	2201      	movs	r2, #1
 80154d4:	e000      	b.n	80154d8 <prvGetNextExpireTime+0x18>
 80154d6:	2200      	movs	r2, #0
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d105      	bne.n	80154f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80154e4:	4b07      	ldr	r3, [pc, #28]	; (8015504 <prvGetNextExpireTime+0x44>)
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	68db      	ldr	r3, [r3, #12]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	60fb      	str	r3, [r7, #12]
 80154ee:	e001      	b.n	80154f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80154f0:	2300      	movs	r3, #0
 80154f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80154f4:	68fb      	ldr	r3, [r7, #12]
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3714      	adds	r7, #20
 80154fa:	46bd      	mov	sp, r7
 80154fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015500:	4770      	bx	lr
 8015502:	bf00      	nop
 8015504:	200081b4 	.word	0x200081b4

08015508 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b084      	sub	sp, #16
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015510:	f7fe fe78 	bl	8014204 <xTaskGetTickCount>
 8015514:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015516:	4b0b      	ldr	r3, [pc, #44]	; (8015544 <prvSampleTimeNow+0x3c>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	68fa      	ldr	r2, [r7, #12]
 801551c:	429a      	cmp	r2, r3
 801551e:	d205      	bcs.n	801552c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015520:	f000 f932 	bl	8015788 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2201      	movs	r2, #1
 8015528:	601a      	str	r2, [r3, #0]
 801552a:	e002      	b.n	8015532 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2200      	movs	r2, #0
 8015530:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015532:	4a04      	ldr	r2, [pc, #16]	; (8015544 <prvSampleTimeNow+0x3c>)
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015538:	68fb      	ldr	r3, [r7, #12]
}
 801553a:	4618      	mov	r0, r3
 801553c:	3710      	adds	r7, #16
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}
 8015542:	bf00      	nop
 8015544:	200081c4 	.word	0x200081c4

08015548 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b086      	sub	sp, #24
 801554c:	af00      	add	r7, sp, #0
 801554e:	60f8      	str	r0, [r7, #12]
 8015550:	60b9      	str	r1, [r7, #8]
 8015552:	607a      	str	r2, [r7, #4]
 8015554:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015556:	2300      	movs	r3, #0
 8015558:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	68ba      	ldr	r2, [r7, #8]
 801555e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	68fa      	ldr	r2, [r7, #12]
 8015564:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015566:	68ba      	ldr	r2, [r7, #8]
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	429a      	cmp	r2, r3
 801556c:	d812      	bhi.n	8015594 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801556e:	687a      	ldr	r2, [r7, #4]
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	1ad2      	subs	r2, r2, r3
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	699b      	ldr	r3, [r3, #24]
 8015578:	429a      	cmp	r2, r3
 801557a:	d302      	bcc.n	8015582 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801557c:	2301      	movs	r3, #1
 801557e:	617b      	str	r3, [r7, #20]
 8015580:	e01b      	b.n	80155ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015582:	4b10      	ldr	r3, [pc, #64]	; (80155c4 <prvInsertTimerInActiveList+0x7c>)
 8015584:	681a      	ldr	r2, [r3, #0]
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	3304      	adds	r3, #4
 801558a:	4619      	mov	r1, r3
 801558c:	4610      	mov	r0, r2
 801558e:	f7fd fbc2 	bl	8012d16 <vListInsert>
 8015592:	e012      	b.n	80155ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015594:	687a      	ldr	r2, [r7, #4]
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	429a      	cmp	r2, r3
 801559a:	d206      	bcs.n	80155aa <prvInsertTimerInActiveList+0x62>
 801559c:	68ba      	ldr	r2, [r7, #8]
 801559e:	683b      	ldr	r3, [r7, #0]
 80155a0:	429a      	cmp	r2, r3
 80155a2:	d302      	bcc.n	80155aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80155a4:	2301      	movs	r3, #1
 80155a6:	617b      	str	r3, [r7, #20]
 80155a8:	e007      	b.n	80155ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80155aa:	4b07      	ldr	r3, [pc, #28]	; (80155c8 <prvInsertTimerInActiveList+0x80>)
 80155ac:	681a      	ldr	r2, [r3, #0]
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	3304      	adds	r3, #4
 80155b2:	4619      	mov	r1, r3
 80155b4:	4610      	mov	r0, r2
 80155b6:	f7fd fbae 	bl	8012d16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80155ba:	697b      	ldr	r3, [r7, #20]
}
 80155bc:	4618      	mov	r0, r3
 80155be:	3718      	adds	r7, #24
 80155c0:	46bd      	mov	sp, r7
 80155c2:	bd80      	pop	{r7, pc}
 80155c4:	200081b8 	.word	0x200081b8
 80155c8:	200081b4 	.word	0x200081b4

080155cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b08c      	sub	sp, #48	; 0x30
 80155d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80155d2:	e0bd      	b.n	8015750 <prvProcessReceivedCommands+0x184>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	da14      	bge.n	8015604 <prvProcessReceivedCommands+0x38>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80155da:	f107 0308 	add.w	r3, r7, #8
 80155de:	3304      	adds	r3, #4
 80155e0:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80155e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d105      	bne.n	80155f4 <prvProcessReceivedCommands+0x28>
 80155e8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80155ec:	4961      	ldr	r1, [pc, #388]	; (8015774 <prvProcessReceivedCommands+0x1a8>)
 80155ee:	4862      	ldr	r0, [pc, #392]	; (8015778 <prvProcessReceivedCommands+0x1ac>)
 80155f0:	f7ef ff60 	bl	80054b4 <assertFail>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80155f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155fa:	6850      	ldr	r0, [r2, #4]
 80155fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155fe:	6892      	ldr	r2, [r2, #8]
 8015600:	4611      	mov	r1, r2
 8015602:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015604:	68bb      	ldr	r3, [r7, #8]
 8015606:	2b00      	cmp	r3, #0
 8015608:	f2c0 80a2 	blt.w	8015750 <prvProcessReceivedCommands+0x184>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015610:	6a3b      	ldr	r3, [r7, #32]
 8015612:	695b      	ldr	r3, [r3, #20]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d004      	beq.n	8015622 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015618:	6a3b      	ldr	r3, [r7, #32]
 801561a:	3304      	adds	r3, #4
 801561c:	4618      	mov	r0, r3
 801561e:	f7fd fbb3 	bl	8012d88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015622:	1d3b      	adds	r3, r7, #4
 8015624:	4618      	mov	r0, r3
 8015626:	f7ff ff6f 	bl	8015508 <prvSampleTimeNow>
 801562a:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 801562c:	68bb      	ldr	r3, [r7, #8]
 801562e:	2b09      	cmp	r3, #9
 8015630:	f200 808d 	bhi.w	801574e <prvProcessReceivedCommands+0x182>
 8015634:	a201      	add	r2, pc, #4	; (adr r2, 801563c <prvProcessReceivedCommands+0x70>)
 8015636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801563a:	bf00      	nop
 801563c:	08015665 	.word	0x08015665
 8015640:	08015665 	.word	0x08015665
 8015644:	08015665 	.word	0x08015665
 8015648:	080156d1 	.word	0x080156d1
 801564c:	080156e5 	.word	0x080156e5
 8015650:	08015725 	.word	0x08015725
 8015654:	08015665 	.word	0x08015665
 8015658:	08015665 	.word	0x08015665
 801565c:	080156d1 	.word	0x080156d1
 8015660:	080156e5 	.word	0x080156e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015664:	6a3b      	ldr	r3, [r7, #32]
 8015666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801566a:	f043 0301 	orr.w	r3, r3, #1
 801566e:	b2da      	uxtb	r2, r3
 8015670:	6a3b      	ldr	r3, [r7, #32]
 8015672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015676:	68fa      	ldr	r2, [r7, #12]
 8015678:	6a3b      	ldr	r3, [r7, #32]
 801567a:	699b      	ldr	r3, [r3, #24]
 801567c:	18d1      	adds	r1, r2, r3
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	69fa      	ldr	r2, [r7, #28]
 8015682:	6a38      	ldr	r0, [r7, #32]
 8015684:	f7ff ff60 	bl	8015548 <prvInsertTimerInActiveList>
 8015688:	4603      	mov	r3, r0
 801568a:	2b00      	cmp	r3, #0
 801568c:	d060      	beq.n	8015750 <prvProcessReceivedCommands+0x184>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801568e:	6a3b      	ldr	r3, [r7, #32]
 8015690:	6a1b      	ldr	r3, [r3, #32]
 8015692:	6a38      	ldr	r0, [r7, #32]
 8015694:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015696:	6a3b      	ldr	r3, [r7, #32]
 8015698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801569c:	f003 0304 	and.w	r3, r3, #4
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d055      	beq.n	8015750 <prvProcessReceivedCommands+0x184>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80156a4:	68fa      	ldr	r2, [r7, #12]
 80156a6:	6a3b      	ldr	r3, [r7, #32]
 80156a8:	699b      	ldr	r3, [r3, #24]
 80156aa:	441a      	add	r2, r3
 80156ac:	2300      	movs	r3, #0
 80156ae:	9300      	str	r3, [sp, #0]
 80156b0:	2300      	movs	r3, #0
 80156b2:	2100      	movs	r1, #0
 80156b4:	6a38      	ldr	r0, [r7, #32]
 80156b6:	f7ff fe0b 	bl	80152d0 <xTimerGenericCommand>
 80156ba:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 80156bc:	69bb      	ldr	r3, [r7, #24]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d146      	bne.n	8015750 <prvProcessReceivedCommands+0x184>
 80156c2:	f44f 724b 	mov.w	r2, #812	; 0x32c
 80156c6:	492b      	ldr	r1, [pc, #172]	; (8015774 <prvProcessReceivedCommands+0x1a8>)
 80156c8:	482c      	ldr	r0, [pc, #176]	; (801577c <prvProcessReceivedCommands+0x1b0>)
 80156ca:	f7ef fef3 	bl	80054b4 <assertFail>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80156ce:	e03f      	b.n	8015750 <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80156d0:	6a3b      	ldr	r3, [r7, #32]
 80156d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156d6:	f023 0301 	bic.w	r3, r3, #1
 80156da:	b2da      	uxtb	r2, r3
 80156dc:	6a3b      	ldr	r3, [r7, #32]
 80156de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80156e2:	e035      	b.n	8015750 <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80156e4:	6a3b      	ldr	r3, [r7, #32]
 80156e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156ea:	f043 0301 	orr.w	r3, r3, #1
 80156ee:	b2da      	uxtb	r2, r3
 80156f0:	6a3b      	ldr	r3, [r7, #32]
 80156f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80156f6:	68fa      	ldr	r2, [r7, #12]
 80156f8:	6a3b      	ldr	r3, [r7, #32]
 80156fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80156fc:	6a3b      	ldr	r3, [r7, #32]
 80156fe:	699b      	ldr	r3, [r3, #24]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d105      	bne.n	8015710 <prvProcessReceivedCommands+0x144>
 8015704:	f44f 7251 	mov.w	r2, #836	; 0x344
 8015708:	491a      	ldr	r1, [pc, #104]	; (8015774 <prvProcessReceivedCommands+0x1a8>)
 801570a:	481d      	ldr	r0, [pc, #116]	; (8015780 <prvProcessReceivedCommands+0x1b4>)
 801570c:	f7ef fed2 	bl	80054b4 <assertFail>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015710:	6a3b      	ldr	r3, [r7, #32]
 8015712:	699a      	ldr	r2, [r3, #24]
 8015714:	69fb      	ldr	r3, [r7, #28]
 8015716:	18d1      	adds	r1, r2, r3
 8015718:	69fb      	ldr	r3, [r7, #28]
 801571a:	69fa      	ldr	r2, [r7, #28]
 801571c:	6a38      	ldr	r0, [r7, #32]
 801571e:	f7ff ff13 	bl	8015548 <prvInsertTimerInActiveList>
					break;
 8015722:	e015      	b.n	8015750 <prvProcessReceivedCommands+0x184>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015724:	6a3b      	ldr	r3, [r7, #32]
 8015726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801572a:	f003 0302 	and.w	r3, r3, #2
 801572e:	2b00      	cmp	r3, #0
 8015730:	d103      	bne.n	801573a <prvProcessReceivedCommands+0x16e>
						{
							vPortFree( pxTimer );
 8015732:	6a38      	ldr	r0, [r7, #32]
 8015734:	f000 fbee 	bl	8015f14 <vPortFree>
 8015738:	e00a      	b.n	8015750 <prvProcessReceivedCommands+0x184>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801573a:	6a3b      	ldr	r3, [r7, #32]
 801573c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015740:	f023 0301 	bic.w	r3, r3, #1
 8015744:	b2da      	uxtb	r2, r3
 8015746:	6a3b      	ldr	r3, [r7, #32]
 8015748:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801574c:	e000      	b.n	8015750 <prvProcessReceivedCommands+0x184>

				default	:
					/* Don't expect to get here. */
					break;
 801574e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015750:	4b0c      	ldr	r3, [pc, #48]	; (8015784 <prvProcessReceivedCommands+0x1b8>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	f107 0108 	add.w	r1, r7, #8
 8015758:	2200      	movs	r2, #0
 801575a:	4618      	mov	r0, r3
 801575c:	f7fd fe5e 	bl	801341c <xQueueReceive>
 8015760:	4603      	mov	r3, r0
 8015762:	2b00      	cmp	r3, #0
 8015764:	f47f af36 	bne.w	80155d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8015768:	bf00      	nop
 801576a:	bf00      	nop
 801576c:	3728      	adds	r7, #40	; 0x28
 801576e:	46bd      	mov	sp, r7
 8015770:	bd80      	pop	{r7, pc}
 8015772:	bf00      	nop
 8015774:	0801bdf0 	.word	0x0801bdf0
 8015778:	0801bea4 	.word	0x0801bea4
 801577c:	0801be9c 	.word	0x0801be9c
 8015780:	0801beb0 	.word	0x0801beb0
 8015784:	200081bc 	.word	0x200081bc

08015788 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b088      	sub	sp, #32
 801578c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801578e:	e043      	b.n	8015818 <prvSwitchTimerLists+0x90>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015790:	4b2b      	ldr	r3, [pc, #172]	; (8015840 <prvSwitchTimerLists+0xb8>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	68db      	ldr	r3, [r3, #12]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801579a:	4b29      	ldr	r3, [pc, #164]	; (8015840 <prvSwitchTimerLists+0xb8>)
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	68db      	ldr	r3, [r3, #12]
 80157a0:	68db      	ldr	r3, [r3, #12]
 80157a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	3304      	adds	r3, #4
 80157a8:	4618      	mov	r0, r3
 80157aa:	f7fd faed 	bl	8012d88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	6a1b      	ldr	r3, [r3, #32]
 80157b2:	68f8      	ldr	r0, [r7, #12]
 80157b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157bc:	f003 0304 	and.w	r3, r3, #4
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d029      	beq.n	8015818 <prvSwitchTimerLists+0x90>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	699b      	ldr	r3, [r3, #24]
 80157c8:	693a      	ldr	r2, [r7, #16]
 80157ca:	4413      	add	r3, r2
 80157cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80157ce:	68ba      	ldr	r2, [r7, #8]
 80157d0:	693b      	ldr	r3, [r7, #16]
 80157d2:	429a      	cmp	r2, r3
 80157d4:	d90e      	bls.n	80157f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	68ba      	ldr	r2, [r7, #8]
 80157da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	68fa      	ldr	r2, [r7, #12]
 80157e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80157e2:	4b17      	ldr	r3, [pc, #92]	; (8015840 <prvSwitchTimerLists+0xb8>)
 80157e4:	681a      	ldr	r2, [r3, #0]
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	3304      	adds	r3, #4
 80157ea:	4619      	mov	r1, r3
 80157ec:	4610      	mov	r0, r2
 80157ee:	f7fd fa92 	bl	8012d16 <vListInsert>
 80157f2:	e011      	b.n	8015818 <prvSwitchTimerLists+0x90>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80157f4:	2300      	movs	r3, #0
 80157f6:	9300      	str	r3, [sp, #0]
 80157f8:	2300      	movs	r3, #0
 80157fa:	693a      	ldr	r2, [r7, #16]
 80157fc:	2100      	movs	r1, #0
 80157fe:	68f8      	ldr	r0, [r7, #12]
 8015800:	f7ff fd66 	bl	80152d0 <xTimerGenericCommand>
 8015804:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d105      	bne.n	8015818 <prvSwitchTimerLists+0x90>
 801580c:	f240 329d 	movw	r2, #925	; 0x39d
 8015810:	490c      	ldr	r1, [pc, #48]	; (8015844 <prvSwitchTimerLists+0xbc>)
 8015812:	480d      	ldr	r0, [pc, #52]	; (8015848 <prvSwitchTimerLists+0xc0>)
 8015814:	f7ef fe4e 	bl	80054b4 <assertFail>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015818:	4b09      	ldr	r3, [pc, #36]	; (8015840 <prvSwitchTimerLists+0xb8>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d1b6      	bne.n	8015790 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015822:	4b07      	ldr	r3, [pc, #28]	; (8015840 <prvSwitchTimerLists+0xb8>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015828:	4b08      	ldr	r3, [pc, #32]	; (801584c <prvSwitchTimerLists+0xc4>)
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	4a04      	ldr	r2, [pc, #16]	; (8015840 <prvSwitchTimerLists+0xb8>)
 801582e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015830:	4a06      	ldr	r2, [pc, #24]	; (801584c <prvSwitchTimerLists+0xc4>)
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	6013      	str	r3, [r2, #0]
}
 8015836:	bf00      	nop
 8015838:	3718      	adds	r7, #24
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}
 801583e:	bf00      	nop
 8015840:	200081b4 	.word	0x200081b4
 8015844:	0801bdf0 	.word	0x0801bdf0
 8015848:	0801be9c 	.word	0x0801be9c
 801584c:	200081b8 	.word	0x200081b8

08015850 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b082      	sub	sp, #8
 8015854:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015856:	f000 f98b 	bl	8015b70 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801585a:	4b15      	ldr	r3, [pc, #84]	; (80158b0 <prvCheckForValidListAndQueue+0x60>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d120      	bne.n	80158a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015862:	4814      	ldr	r0, [pc, #80]	; (80158b4 <prvCheckForValidListAndQueue+0x64>)
 8015864:	f7fd fa06 	bl	8012c74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015868:	4813      	ldr	r0, [pc, #76]	; (80158b8 <prvCheckForValidListAndQueue+0x68>)
 801586a:	f7fd fa03 	bl	8012c74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801586e:	4b13      	ldr	r3, [pc, #76]	; (80158bc <prvCheckForValidListAndQueue+0x6c>)
 8015870:	4a10      	ldr	r2, [pc, #64]	; (80158b4 <prvCheckForValidListAndQueue+0x64>)
 8015872:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015874:	4b12      	ldr	r3, [pc, #72]	; (80158c0 <prvCheckForValidListAndQueue+0x70>)
 8015876:	4a10      	ldr	r2, [pc, #64]	; (80158b8 <prvCheckForValidListAndQueue+0x68>)
 8015878:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801587a:	2300      	movs	r3, #0
 801587c:	9300      	str	r3, [sp, #0]
 801587e:	4b11      	ldr	r3, [pc, #68]	; (80158c4 <prvCheckForValidListAndQueue+0x74>)
 8015880:	4a11      	ldr	r2, [pc, #68]	; (80158c8 <prvCheckForValidListAndQueue+0x78>)
 8015882:	2110      	movs	r1, #16
 8015884:	2014      	movs	r0, #20
 8015886:	f7fd fb11 	bl	8012eac <xQueueGenericCreateStatic>
 801588a:	4603      	mov	r3, r0
 801588c:	4a08      	ldr	r2, [pc, #32]	; (80158b0 <prvCheckForValidListAndQueue+0x60>)
 801588e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015890:	4b07      	ldr	r3, [pc, #28]	; (80158b0 <prvCheckForValidListAndQueue+0x60>)
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d005      	beq.n	80158a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015898:	4b05      	ldr	r3, [pc, #20]	; (80158b0 <prvCheckForValidListAndQueue+0x60>)
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	490b      	ldr	r1, [pc, #44]	; (80158cc <prvCheckForValidListAndQueue+0x7c>)
 801589e:	4618      	mov	r0, r3
 80158a0:	f7fe f8dc 	bl	8013a5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80158a4:	f000 f992 	bl	8015bcc <vPortExitCritical>
}
 80158a8:	bf00      	nop
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bd80      	pop	{r7, pc}
 80158ae:	bf00      	nop
 80158b0:	200081bc 	.word	0x200081bc
 80158b4:	2000818c 	.word	0x2000818c
 80158b8:	200081a0 	.word	0x200081a0
 80158bc:	200081b4 	.word	0x200081b4
 80158c0:	200081b8 	.word	0x200081b8
 80158c4:	20008308 	.word	0x20008308
 80158c8:	200081c8 	.word	0x200081c8
 80158cc:	0801bed8 	.word	0x0801bed8

080158d0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b084      	sub	sp, #16
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d105      	bne.n	80158ee <pvTimerGetTimerID+0x1e>
 80158e2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80158e6:	4908      	ldr	r1, [pc, #32]	; (8015908 <pvTimerGetTimerID+0x38>)
 80158e8:	4808      	ldr	r0, [pc, #32]	; (801590c <pvTimerGetTimerID+0x3c>)
 80158ea:	f7ef fde3 	bl	80054b4 <assertFail>

	taskENTER_CRITICAL();
 80158ee:	f000 f93f 	bl	8015b70 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	69db      	ldr	r3, [r3, #28]
 80158f6:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 80158f8:	f000 f968 	bl	8015bcc <vPortExitCritical>

	return pvReturn;
 80158fc:	68bb      	ldr	r3, [r7, #8]
}
 80158fe:	4618      	mov	r0, r3
 8015900:	3710      	adds	r7, #16
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
 8015906:	bf00      	nop
 8015908:	0801bdf0 	.word	0x0801bdf0
 801590c:	0801be74 	.word	0x0801be74

08015910 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015910:	b480      	push	{r7}
 8015912:	b085      	sub	sp, #20
 8015914:	af00      	add	r7, sp, #0
 8015916:	60f8      	str	r0, [r7, #12]
 8015918:	60b9      	str	r1, [r7, #8]
 801591a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	3b04      	subs	r3, #4
 8015920:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	3b04      	subs	r3, #4
 801592e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015930:	68bb      	ldr	r3, [r7, #8]
 8015932:	f023 0201 	bic.w	r2, r3, #1
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	3b04      	subs	r3, #4
 801593e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015940:	4a0c      	ldr	r2, [pc, #48]	; (8015974 <pxPortInitialiseStack+0x64>)
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	3b14      	subs	r3, #20
 801594a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	3b04      	subs	r3, #4
 8015956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	f06f 0202 	mvn.w	r2, #2
 801595e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	3b20      	subs	r3, #32
 8015964:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015966:	68fb      	ldr	r3, [r7, #12]
}
 8015968:	4618      	mov	r0, r3
 801596a:	3714      	adds	r7, #20
 801596c:	46bd      	mov	sp, r7
 801596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015972:	4770      	bx	lr
 8015974:	08015979 	.word	0x08015979

08015978 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b082      	sub	sp, #8
 801597c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801597e:	2300      	movs	r3, #0
 8015980:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015982:	4b0e      	ldr	r3, [pc, #56]	; (80159bc <prvTaskExitError+0x44>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801598a:	d004      	beq.n	8015996 <prvTaskExitError+0x1e>
 801598c:	22e3      	movs	r2, #227	; 0xe3
 801598e:	490c      	ldr	r1, [pc, #48]	; (80159c0 <prvTaskExitError+0x48>)
 8015990:	480c      	ldr	r0, [pc, #48]	; (80159c4 <prvTaskExitError+0x4c>)
 8015992:	f7ef fd8f 	bl	80054b4 <assertFail>
	__asm volatile
 8015996:	f04f 0350 	mov.w	r3, #80	; 0x50
 801599a:	f383 8811 	msr	BASEPRI, r3
 801599e:	f3bf 8f6f 	isb	sy
 80159a2:	f3bf 8f4f 	dsb	sy
 80159a6:	607b      	str	r3, [r7, #4]
}
 80159a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80159aa:	bf00      	nop
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d0fc      	beq.n	80159ac <prvTaskExitError+0x34>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80159b2:	bf00      	nop
 80159b4:	bf00      	nop
 80159b6:	3708      	adds	r7, #8
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}
 80159bc:	200003d8 	.word	0x200003d8
 80159c0:	0801beec 	.word	0x0801beec
 80159c4:	0801bf34 	.word	0x0801bf34
	...

080159d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80159d0:	4b07      	ldr	r3, [pc, #28]	; (80159f0 <pxCurrentTCBConst2>)
 80159d2:	6819      	ldr	r1, [r3, #0]
 80159d4:	6808      	ldr	r0, [r1, #0]
 80159d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159da:	f380 8809 	msr	PSP, r0
 80159de:	f3bf 8f6f 	isb	sy
 80159e2:	f04f 0000 	mov.w	r0, #0
 80159e6:	f380 8811 	msr	BASEPRI, r0
 80159ea:	4770      	bx	lr
 80159ec:	f3af 8000 	nop.w

080159f0 <pxCurrentTCBConst2>:
 80159f0:	20007f50 	.word	0x20007f50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80159f4:	bf00      	nop
 80159f6:	bf00      	nop

080159f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80159f8:	4808      	ldr	r0, [pc, #32]	; (8015a1c <prvPortStartFirstTask+0x24>)
 80159fa:	6800      	ldr	r0, [r0, #0]
 80159fc:	6800      	ldr	r0, [r0, #0]
 80159fe:	f380 8808 	msr	MSP, r0
 8015a02:	f04f 0000 	mov.w	r0, #0
 8015a06:	f380 8814 	msr	CONTROL, r0
 8015a0a:	b662      	cpsie	i
 8015a0c:	b661      	cpsie	f
 8015a0e:	f3bf 8f4f 	dsb	sy
 8015a12:	f3bf 8f6f 	isb	sy
 8015a16:	df00      	svc	0
 8015a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015a1a:	bf00      	nop
 8015a1c:	e000ed08 	.word	0xe000ed08

08015a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b084      	sub	sp, #16
 8015a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015a26:	4b44      	ldr	r3, [pc, #272]	; (8015b38 <xPortStartScheduler+0x118>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	4a44      	ldr	r2, [pc, #272]	; (8015b3c <xPortStartScheduler+0x11c>)
 8015a2c:	4293      	cmp	r3, r2
 8015a2e:	d105      	bne.n	8015a3c <xPortStartScheduler+0x1c>
 8015a30:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015a34:	4942      	ldr	r1, [pc, #264]	; (8015b40 <xPortStartScheduler+0x120>)
 8015a36:	4843      	ldr	r0, [pc, #268]	; (8015b44 <xPortStartScheduler+0x124>)
 8015a38:	f7ef fd3c 	bl	80054b4 <assertFail>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015a3c:	4b3e      	ldr	r3, [pc, #248]	; (8015b38 <xPortStartScheduler+0x118>)
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	4a41      	ldr	r2, [pc, #260]	; (8015b48 <xPortStartScheduler+0x128>)
 8015a42:	4293      	cmp	r3, r2
 8015a44:	d105      	bne.n	8015a52 <xPortStartScheduler+0x32>
 8015a46:	f240 1229 	movw	r2, #297	; 0x129
 8015a4a:	493d      	ldr	r1, [pc, #244]	; (8015b40 <xPortStartScheduler+0x120>)
 8015a4c:	483f      	ldr	r0, [pc, #252]	; (8015b4c <xPortStartScheduler+0x12c>)
 8015a4e:	f7ef fd31 	bl	80054b4 <assertFail>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015a52:	4b3f      	ldr	r3, [pc, #252]	; (8015b50 <xPortStartScheduler+0x130>)
 8015a54:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	781b      	ldrb	r3, [r3, #0]
 8015a5a:	b2db      	uxtb	r3, r3
 8015a5c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	22ff      	movs	r2, #255	; 0xff
 8015a62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	781b      	ldrb	r3, [r3, #0]
 8015a68:	b2db      	uxtb	r3, r3
 8015a6a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015a6c:	79fb      	ldrb	r3, [r7, #7]
 8015a6e:	b2db      	uxtb	r3, r3
 8015a70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015a74:	b2da      	uxtb	r2, r3
 8015a76:	4b37      	ldr	r3, [pc, #220]	; (8015b54 <xPortStartScheduler+0x134>)
 8015a78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015a7a:	4b37      	ldr	r3, [pc, #220]	; (8015b58 <xPortStartScheduler+0x138>)
 8015a7c:	2207      	movs	r2, #7
 8015a7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015a80:	e009      	b.n	8015a96 <xPortStartScheduler+0x76>
		{
			ulMaxPRIGROUPValue--;
 8015a82:	4b35      	ldr	r3, [pc, #212]	; (8015b58 <xPortStartScheduler+0x138>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	3b01      	subs	r3, #1
 8015a88:	4a33      	ldr	r2, [pc, #204]	; (8015b58 <xPortStartScheduler+0x138>)
 8015a8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015a8c:	79fb      	ldrb	r3, [r7, #7]
 8015a8e:	b2db      	uxtb	r3, r3
 8015a90:	005b      	lsls	r3, r3, #1
 8015a92:	b2db      	uxtb	r3, r3
 8015a94:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015a96:	79fb      	ldrb	r3, [r7, #7]
 8015a98:	b2db      	uxtb	r3, r3
 8015a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015a9e:	2b80      	cmp	r3, #128	; 0x80
 8015aa0:	d0ef      	beq.n	8015a82 <xPortStartScheduler+0x62>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8015aa2:	4b2d      	ldr	r3, [pc, #180]	; (8015b58 <xPortStartScheduler+0x138>)
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	f1c3 0307 	rsb	r3, r3, #7
 8015aaa:	2b04      	cmp	r3, #4
 8015aac:	d005      	beq.n	8015aba <xPortStartScheduler+0x9a>
 8015aae:	f240 1251 	movw	r2, #337	; 0x151
 8015ab2:	4923      	ldr	r1, [pc, #140]	; (8015b40 <xPortStartScheduler+0x120>)
 8015ab4:	4829      	ldr	r0, [pc, #164]	; (8015b5c <xPortStartScheduler+0x13c>)
 8015ab6:	f7ef fcfd 	bl	80054b4 <assertFail>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015aba:	4b27      	ldr	r3, [pc, #156]	; (8015b58 <xPortStartScheduler+0x138>)
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	f1c3 0307 	rsb	r3, r3, #7
 8015ac2:	2b04      	cmp	r3, #4
 8015ac4:	d005      	beq.n	8015ad2 <xPortStartScheduler+0xb2>
 8015ac6:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8015aca:	491d      	ldr	r1, [pc, #116]	; (8015b40 <xPortStartScheduler+0x120>)
 8015acc:	4824      	ldr	r0, [pc, #144]	; (8015b60 <xPortStartScheduler+0x140>)
 8015ace:	f7ef fcf1 	bl	80054b4 <assertFail>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015ad2:	4b21      	ldr	r3, [pc, #132]	; (8015b58 <xPortStartScheduler+0x138>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	021b      	lsls	r3, r3, #8
 8015ad8:	4a1f      	ldr	r2, [pc, #124]	; (8015b58 <xPortStartScheduler+0x138>)
 8015ada:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015adc:	4b1e      	ldr	r3, [pc, #120]	; (8015b58 <xPortStartScheduler+0x138>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015ae4:	4a1c      	ldr	r2, [pc, #112]	; (8015b58 <xPortStartScheduler+0x138>)
 8015ae6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	b2da      	uxtb	r2, r3
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015af0:	4b1c      	ldr	r3, [pc, #112]	; (8015b64 <xPortStartScheduler+0x144>)
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	4a1b      	ldr	r2, [pc, #108]	; (8015b64 <xPortStartScheduler+0x144>)
 8015af6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015afa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015afc:	4b19      	ldr	r3, [pc, #100]	; (8015b64 <xPortStartScheduler+0x144>)
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	4a18      	ldr	r2, [pc, #96]	; (8015b64 <xPortStartScheduler+0x144>)
 8015b02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015b06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015b08:	f000 f8e0 	bl	8015ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015b0c:	4b16      	ldr	r3, [pc, #88]	; (8015b68 <xPortStartScheduler+0x148>)
 8015b0e:	2200      	movs	r2, #0
 8015b10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015b12:	f000 f8f9 	bl	8015d08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015b16:	4b15      	ldr	r3, [pc, #84]	; (8015b6c <xPortStartScheduler+0x14c>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	4a14      	ldr	r2, [pc, #80]	; (8015b6c <xPortStartScheduler+0x14c>)
 8015b1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015b20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015b22:	f7ff ff69 	bl	80159f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015b26:	f7fe fce7 	bl	80144f8 <vTaskSwitchContext>
	prvTaskExitError();
 8015b2a:	f7ff ff25 	bl	8015978 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015b2e:	2300      	movs	r3, #0
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	3710      	adds	r7, #16
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}
 8015b38:	e000ed00 	.word	0xe000ed00
 8015b3c:	410fc271 	.word	0x410fc271
 8015b40:	0801beec 	.word	0x0801beec
 8015b44:	0801bf50 	.word	0x0801bf50
 8015b48:	410fc270 	.word	0x410fc270
 8015b4c:	0801bf74 	.word	0x0801bf74
 8015b50:	e000e400 	.word	0xe000e400
 8015b54:	20008358 	.word	0x20008358
 8015b58:	2000835c 	.word	0x2000835c
 8015b5c:	0801bf98 	.word	0x0801bf98
 8015b60:	0801bfdc 	.word	0x0801bfdc
 8015b64:	e000ed20 	.word	0xe000ed20
 8015b68:	200003d8 	.word	0x200003d8
 8015b6c:	e000ef34 	.word	0xe000ef34

08015b70 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b082      	sub	sp, #8
 8015b74:	af00      	add	r7, sp, #0
	__asm volatile
 8015b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b7a:	f383 8811 	msr	BASEPRI, r3
 8015b7e:	f3bf 8f6f 	isb	sy
 8015b82:	f3bf 8f4f 	dsb	sy
 8015b86:	607b      	str	r3, [r7, #4]
}
 8015b88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015b8a:	4b0c      	ldr	r3, [pc, #48]	; (8015bbc <vPortEnterCritical+0x4c>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	3301      	adds	r3, #1
 8015b90:	4a0a      	ldr	r2, [pc, #40]	; (8015bbc <vPortEnterCritical+0x4c>)
 8015b92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015b94:	4b09      	ldr	r3, [pc, #36]	; (8015bbc <vPortEnterCritical+0x4c>)
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	2b01      	cmp	r3, #1
 8015b9a:	d10a      	bne.n	8015bb2 <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015b9c:	4b08      	ldr	r3, [pc, #32]	; (8015bc0 <vPortEnterCritical+0x50>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	b2db      	uxtb	r3, r3
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d005      	beq.n	8015bb2 <vPortEnterCritical+0x42>
 8015ba6:	f240 129f 	movw	r2, #415	; 0x19f
 8015baa:	4906      	ldr	r1, [pc, #24]	; (8015bc4 <vPortEnterCritical+0x54>)
 8015bac:	4806      	ldr	r0, [pc, #24]	; (8015bc8 <vPortEnterCritical+0x58>)
 8015bae:	f7ef fc81 	bl	80054b4 <assertFail>
	}
}
 8015bb2:	bf00      	nop
 8015bb4:	3708      	adds	r7, #8
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	bd80      	pop	{r7, pc}
 8015bba:	bf00      	nop
 8015bbc:	200003d8 	.word	0x200003d8
 8015bc0:	e000ed04 	.word	0xe000ed04
 8015bc4:	0801beec 	.word	0x0801beec
 8015bc8:	0801c03c 	.word	0x0801c03c

08015bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b082      	sub	sp, #8
 8015bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015bd2:	4b0e      	ldr	r3, [pc, #56]	; (8015c0c <vPortExitCritical+0x40>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d105      	bne.n	8015be6 <vPortExitCritical+0x1a>
 8015bda:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8015bde:	490c      	ldr	r1, [pc, #48]	; (8015c10 <vPortExitCritical+0x44>)
 8015be0:	480c      	ldr	r0, [pc, #48]	; (8015c14 <vPortExitCritical+0x48>)
 8015be2:	f7ef fc67 	bl	80054b4 <assertFail>
	uxCriticalNesting--;
 8015be6:	4b09      	ldr	r3, [pc, #36]	; (8015c0c <vPortExitCritical+0x40>)
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	3b01      	subs	r3, #1
 8015bec:	4a07      	ldr	r2, [pc, #28]	; (8015c0c <vPortExitCritical+0x40>)
 8015bee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015bf0:	4b06      	ldr	r3, [pc, #24]	; (8015c0c <vPortExitCritical+0x40>)
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d105      	bne.n	8015c04 <vPortExitCritical+0x38>
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	607b      	str	r3, [r7, #4]
	__asm volatile
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f383 8811 	msr	BASEPRI, r3
}
 8015c02:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015c04:	bf00      	nop
 8015c06:	3708      	adds	r7, #8
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	bd80      	pop	{r7, pc}
 8015c0c:	200003d8 	.word	0x200003d8
 8015c10:	0801beec 	.word	0x0801beec
 8015c14:	0801c074 	.word	0x0801c074
	...

08015c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015c20:	f3ef 8009 	mrs	r0, PSP
 8015c24:	f3bf 8f6f 	isb	sy
 8015c28:	4b15      	ldr	r3, [pc, #84]	; (8015c80 <pxCurrentTCBConst>)
 8015c2a:	681a      	ldr	r2, [r3, #0]
 8015c2c:	f01e 0f10 	tst.w	lr, #16
 8015c30:	bf08      	it	eq
 8015c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c3a:	6010      	str	r0, [r2, #0]
 8015c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015c44:	f380 8811 	msr	BASEPRI, r0
 8015c48:	f3bf 8f4f 	dsb	sy
 8015c4c:	f3bf 8f6f 	isb	sy
 8015c50:	f7fe fc52 	bl	80144f8 <vTaskSwitchContext>
 8015c54:	f04f 0000 	mov.w	r0, #0
 8015c58:	f380 8811 	msr	BASEPRI, r0
 8015c5c:	bc09      	pop	{r0, r3}
 8015c5e:	6819      	ldr	r1, [r3, #0]
 8015c60:	6808      	ldr	r0, [r1, #0]
 8015c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c66:	f01e 0f10 	tst.w	lr, #16
 8015c6a:	bf08      	it	eq
 8015c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015c70:	f380 8809 	msr	PSP, r0
 8015c74:	f3bf 8f6f 	isb	sy
 8015c78:	4770      	bx	lr
 8015c7a:	bf00      	nop
 8015c7c:	f3af 8000 	nop.w

08015c80 <pxCurrentTCBConst>:
 8015c80:	20007f50 	.word	0x20007f50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015c84:	bf00      	nop
 8015c86:	bf00      	nop

08015c88 <tickFreeRTOS>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b082      	sub	sp, #8
 8015c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8015c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c92:	f383 8811 	msr	BASEPRI, r3
 8015c96:	f3bf 8f6f 	isb	sy
 8015c9a:	f3bf 8f4f 	dsb	sy
 8015c9e:	607b      	str	r3, [r7, #4]
}
 8015ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015ca2:	f7fe fb4f 	bl	8014344 <xTaskIncrementTick>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d003      	beq.n	8015cb4 <tickFreeRTOS+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015cac:	4b06      	ldr	r3, [pc, #24]	; (8015cc8 <tickFreeRTOS+0x40>)
 8015cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cb2:	601a      	str	r2, [r3, #0]
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	f383 8811 	msr	BASEPRI, r3
}
 8015cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015cc0:	bf00      	nop
 8015cc2:	3708      	adds	r7, #8
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	e000ed04 	.word	0xe000ed04

08015ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015ccc:	b480      	push	{r7}
 8015cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015cd0:	4b09      	ldr	r3, [pc, #36]	; (8015cf8 <vPortSetupTimerInterrupt+0x2c>)
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015cd6:	4b09      	ldr	r3, [pc, #36]	; (8015cfc <vPortSetupTimerInterrupt+0x30>)
 8015cd8:	2200      	movs	r2, #0
 8015cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015cdc:	4b08      	ldr	r3, [pc, #32]	; (8015d00 <vPortSetupTimerInterrupt+0x34>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	4a08      	ldr	r2, [pc, #32]	; (8015d04 <vPortSetupTimerInterrupt+0x38>)
 8015ce2:	3b01      	subs	r3, #1
 8015ce4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015ce6:	4b04      	ldr	r3, [pc, #16]	; (8015cf8 <vPortSetupTimerInterrupt+0x2c>)
 8015ce8:	2207      	movs	r2, #7
 8015cea:	601a      	str	r2, [r3, #0]
}
 8015cec:	bf00      	nop
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf4:	4770      	bx	lr
 8015cf6:	bf00      	nop
 8015cf8:	e000e010 	.word	0xe000e010
 8015cfc:	e000e018 	.word	0xe000e018
 8015d00:	20000340 	.word	0x20000340
 8015d04:	e000e014 	.word	0xe000e014

08015d08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015d08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015d18 <vPortEnableVFP+0x10>
 8015d0c:	6801      	ldr	r1, [r0, #0]
 8015d0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015d12:	6001      	str	r1, [r0, #0]
 8015d14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015d16:	bf00      	nop
 8015d18:	e000ed88 	.word	0xe000ed88

08015d1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b082      	sub	sp, #8
 8015d20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015d22:	f3ef 8305 	mrs	r3, IPSR
 8015d26:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2b0f      	cmp	r3, #15
 8015d2c:	d90f      	bls.n	8015d4e <vPortValidateInterruptPriority+0x32>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015d2e:	4a11      	ldr	r2, [pc, #68]	; (8015d74 <vPortValidateInterruptPriority+0x58>)
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	4413      	add	r3, r2
 8015d34:	781b      	ldrb	r3, [r3, #0]
 8015d36:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015d38:	4b0f      	ldr	r3, [pc, #60]	; (8015d78 <vPortValidateInterruptPriority+0x5c>)
 8015d3a:	781b      	ldrb	r3, [r3, #0]
 8015d3c:	78fa      	ldrb	r2, [r7, #3]
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d205      	bcs.n	8015d4e <vPortValidateInterruptPriority+0x32>
 8015d42:	f240 22f2 	movw	r2, #754	; 0x2f2
 8015d46:	490d      	ldr	r1, [pc, #52]	; (8015d7c <vPortValidateInterruptPriority+0x60>)
 8015d48:	480d      	ldr	r0, [pc, #52]	; (8015d80 <vPortValidateInterruptPriority+0x64>)
 8015d4a:	f7ef fbb3 	bl	80054b4 <assertFail>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015d4e:	4b0d      	ldr	r3, [pc, #52]	; (8015d84 <vPortValidateInterruptPriority+0x68>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015d56:	4b0c      	ldr	r3, [pc, #48]	; (8015d88 <vPortValidateInterruptPriority+0x6c>)
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d905      	bls.n	8015d6a <vPortValidateInterruptPriority+0x4e>
 8015d5e:	f240 3202 	movw	r2, #770	; 0x302
 8015d62:	4906      	ldr	r1, [pc, #24]	; (8015d7c <vPortValidateInterruptPriority+0x60>)
 8015d64:	4809      	ldr	r0, [pc, #36]	; (8015d8c <vPortValidateInterruptPriority+0x70>)
 8015d66:	f7ef fba5 	bl	80054b4 <assertFail>
	}
 8015d6a:	bf00      	nop
 8015d6c:	3708      	adds	r7, #8
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
 8015d72:	bf00      	nop
 8015d74:	e000e3f0 	.word	0xe000e3f0
 8015d78:	20008358 	.word	0x20008358
 8015d7c:	0801beec 	.word	0x0801beec
 8015d80:	0801c088 	.word	0x0801c088
 8015d84:	e000ed0c 	.word	0xe000ed0c
 8015d88:	2000835c 	.word	0x2000835c
 8015d8c:	0801c0b4 	.word	0x0801c0b4

08015d90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b086      	sub	sp, #24
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8015d9c:	f7fe f988 	bl	80140b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015da0:	4b52      	ldr	r3, [pc, #328]	; (8015eec <pvPortMalloc+0x15c>)
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d101      	bne.n	8015dac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015da8:	f000 f912 	bl	8015fd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015dac:	4b50      	ldr	r3, [pc, #320]	; (8015ef0 <pvPortMalloc+0x160>)
 8015dae:	681a      	ldr	r2, [r3, #0]
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	4013      	ands	r3, r2
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	f040 8087 	bne.w	8015ec8 <pvPortMalloc+0x138>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d017      	beq.n	8015df0 <pvPortMalloc+0x60>
			{
				xWantedSize += xHeapStructSize;
 8015dc0:	2208      	movs	r2, #8
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	4413      	add	r3, r2
 8015dc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f003 0307 	and.w	r3, r3, #7
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d00e      	beq.n	8015df0 <pvPortMalloc+0x60>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	f023 0307 	bic.w	r3, r3, #7
 8015dd8:	3308      	adds	r3, #8
 8015dda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f003 0307 	and.w	r3, r3, #7
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d004      	beq.n	8015df0 <pvPortMalloc+0x60>
 8015de6:	2297      	movs	r2, #151	; 0x97
 8015de8:	4942      	ldr	r1, [pc, #264]	; (8015ef4 <pvPortMalloc+0x164>)
 8015dea:	4843      	ldr	r0, [pc, #268]	; (8015ef8 <pvPortMalloc+0x168>)
 8015dec:	f7ef fb62 	bl	80054b4 <assertFail>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d068      	beq.n	8015ec8 <pvPortMalloc+0x138>
 8015df6:	4b41      	ldr	r3, [pc, #260]	; (8015efc <pvPortMalloc+0x16c>)
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	687a      	ldr	r2, [r7, #4]
 8015dfc:	429a      	cmp	r2, r3
 8015dfe:	d863      	bhi.n	8015ec8 <pvPortMalloc+0x138>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015e00:	4b3f      	ldr	r3, [pc, #252]	; (8015f00 <pvPortMalloc+0x170>)
 8015e02:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8015e04:	4b3e      	ldr	r3, [pc, #248]	; (8015f00 <pvPortMalloc+0x170>)
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e0a:	e004      	b.n	8015e16 <pvPortMalloc+0x86>
				{
					pxPreviousBlock = pxBlock;
 8015e0c:	697b      	ldr	r3, [r7, #20]
 8015e0e:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015e10:	697b      	ldr	r3, [r7, #20]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e16:	697b      	ldr	r3, [r7, #20]
 8015e18:	685b      	ldr	r3, [r3, #4]
 8015e1a:	687a      	ldr	r2, [r7, #4]
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	d903      	bls.n	8015e28 <pvPortMalloc+0x98>
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d1f1      	bne.n	8015e0c <pvPortMalloc+0x7c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015e28:	4b30      	ldr	r3, [pc, #192]	; (8015eec <pvPortMalloc+0x15c>)
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	697a      	ldr	r2, [r7, #20]
 8015e2e:	429a      	cmp	r2, r3
 8015e30:	d04a      	beq.n	8015ec8 <pvPortMalloc+0x138>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015e32:	693b      	ldr	r3, [r7, #16]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	2208      	movs	r2, #8
 8015e38:	4413      	add	r3, r2
 8015e3a:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015e3c:	697b      	ldr	r3, [r7, #20]
 8015e3e:	681a      	ldr	r2, [r3, #0]
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015e44:	697b      	ldr	r3, [r7, #20]
 8015e46:	685a      	ldr	r2, [r3, #4]
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	1ad2      	subs	r2, r2, r3
 8015e4c:	2308      	movs	r3, #8
 8015e4e:	005b      	lsls	r3, r3, #1
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d919      	bls.n	8015e88 <pvPortMalloc+0xf8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015e54:	697a      	ldr	r2, [r7, #20]
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	4413      	add	r3, r2
 8015e5a:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015e5c:	68bb      	ldr	r3, [r7, #8]
 8015e5e:	f003 0307 	and.w	r3, r3, #7
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d004      	beq.n	8015e70 <pvPortMalloc+0xe0>
 8015e66:	22c4      	movs	r2, #196	; 0xc4
 8015e68:	4922      	ldr	r1, [pc, #136]	; (8015ef4 <pvPortMalloc+0x164>)
 8015e6a:	4826      	ldr	r0, [pc, #152]	; (8015f04 <pvPortMalloc+0x174>)
 8015e6c:	f7ef fb22 	bl	80054b4 <assertFail>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015e70:	697b      	ldr	r3, [r7, #20]
 8015e72:	685a      	ldr	r2, [r3, #4]
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	1ad2      	subs	r2, r2, r3
 8015e78:	68bb      	ldr	r3, [r7, #8]
 8015e7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015e7c:	697b      	ldr	r3, [r7, #20]
 8015e7e:	687a      	ldr	r2, [r7, #4]
 8015e80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015e82:	68b8      	ldr	r0, [r7, #8]
 8015e84:	f000 f906 	bl	8016094 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015e88:	4b1c      	ldr	r3, [pc, #112]	; (8015efc <pvPortMalloc+0x16c>)
 8015e8a:	681a      	ldr	r2, [r3, #0]
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	685b      	ldr	r3, [r3, #4]
 8015e90:	1ad3      	subs	r3, r2, r3
 8015e92:	4a1a      	ldr	r2, [pc, #104]	; (8015efc <pvPortMalloc+0x16c>)
 8015e94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015e96:	4b19      	ldr	r3, [pc, #100]	; (8015efc <pvPortMalloc+0x16c>)
 8015e98:	681a      	ldr	r2, [r3, #0]
 8015e9a:	4b1b      	ldr	r3, [pc, #108]	; (8015f08 <pvPortMalloc+0x178>)
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	429a      	cmp	r2, r3
 8015ea0:	d203      	bcs.n	8015eaa <pvPortMalloc+0x11a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015ea2:	4b16      	ldr	r3, [pc, #88]	; (8015efc <pvPortMalloc+0x16c>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	4a18      	ldr	r2, [pc, #96]	; (8015f08 <pvPortMalloc+0x178>)
 8015ea8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015eaa:	697b      	ldr	r3, [r7, #20]
 8015eac:	685a      	ldr	r2, [r3, #4]
 8015eae:	4b10      	ldr	r3, [pc, #64]	; (8015ef0 <pvPortMalloc+0x160>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	431a      	orrs	r2, r3
 8015eb4:	697b      	ldr	r3, [r7, #20]
 8015eb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015eb8:	697b      	ldr	r3, [r7, #20]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015ebe:	4b13      	ldr	r3, [pc, #76]	; (8015f0c <pvPortMalloc+0x17c>)
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	3301      	adds	r3, #1
 8015ec4:	4a11      	ldr	r2, [pc, #68]	; (8015f0c <pvPortMalloc+0x17c>)
 8015ec6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015ec8:	f7fe f900 	bl	80140cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	f003 0307 	and.w	r3, r3, #7
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d005      	beq.n	8015ee2 <pvPortMalloc+0x152>
 8015ed6:	f240 1205 	movw	r2, #261	; 0x105
 8015eda:	4906      	ldr	r1, [pc, #24]	; (8015ef4 <pvPortMalloc+0x164>)
 8015edc:	480c      	ldr	r0, [pc, #48]	; (8015f10 <pvPortMalloc+0x180>)
 8015ede:	f7ef fae9 	bl	80054b4 <assertFail>
	return pvReturn;
 8015ee2:	68fb      	ldr	r3, [r7, #12]
}
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	3718      	adds	r7, #24
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	bd80      	pop	{r7, pc}
 8015eec:	2000bf68 	.word	0x2000bf68
 8015ef0:	2000bf7c 	.word	0x2000bf7c
 8015ef4:	0801c0f8 	.word	0x0801c0f8
 8015ef8:	0801c140 	.word	0x0801c140
 8015efc:	2000bf6c 	.word	0x2000bf6c
 8015f00:	2000bf60 	.word	0x2000bf60
 8015f04:	0801c170 	.word	0x0801c170
 8015f08:	2000bf70 	.word	0x2000bf70
 8015f0c:	2000bf74 	.word	0x2000bf74
 8015f10:	0801c1b4 	.word	0x0801c1b4

08015f14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b084      	sub	sp, #16
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d043      	beq.n	8015fae <vPortFree+0x9a>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015f26:	2308      	movs	r3, #8
 8015f28:	425b      	negs	r3, r3
 8015f2a:	68fa      	ldr	r2, [r7, #12]
 8015f2c:	4413      	add	r3, r2
 8015f2e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	685a      	ldr	r2, [r3, #4]
 8015f38:	4b1f      	ldr	r3, [pc, #124]	; (8015fb8 <vPortFree+0xa4>)
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	4013      	ands	r3, r2
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d105      	bne.n	8015f4e <vPortFree+0x3a>
 8015f42:	f240 1219 	movw	r2, #281	; 0x119
 8015f46:	491d      	ldr	r1, [pc, #116]	; (8015fbc <vPortFree+0xa8>)
 8015f48:	481d      	ldr	r0, [pc, #116]	; (8015fc0 <vPortFree+0xac>)
 8015f4a:	f7ef fab3 	bl	80054b4 <assertFail>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015f4e:	68bb      	ldr	r3, [r7, #8]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d005      	beq.n	8015f62 <vPortFree+0x4e>
 8015f56:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8015f5a:	4918      	ldr	r1, [pc, #96]	; (8015fbc <vPortFree+0xa8>)
 8015f5c:	4819      	ldr	r0, [pc, #100]	; (8015fc4 <vPortFree+0xb0>)
 8015f5e:	f7ef faa9 	bl	80054b4 <assertFail>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015f62:	68bb      	ldr	r3, [r7, #8]
 8015f64:	685a      	ldr	r2, [r3, #4]
 8015f66:	4b14      	ldr	r3, [pc, #80]	; (8015fb8 <vPortFree+0xa4>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	4013      	ands	r3, r2
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d01e      	beq.n	8015fae <vPortFree+0x9a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015f70:	68bb      	ldr	r3, [r7, #8]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d11a      	bne.n	8015fae <vPortFree+0x9a>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	685a      	ldr	r2, [r3, #4]
 8015f7c:	4b0e      	ldr	r3, [pc, #56]	; (8015fb8 <vPortFree+0xa4>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	43db      	mvns	r3, r3
 8015f82:	401a      	ands	r2, r3
 8015f84:	68bb      	ldr	r3, [r7, #8]
 8015f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015f88:	f7fe f892 	bl	80140b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	685a      	ldr	r2, [r3, #4]
 8015f90:	4b0d      	ldr	r3, [pc, #52]	; (8015fc8 <vPortFree+0xb4>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	4413      	add	r3, r2
 8015f96:	4a0c      	ldr	r2, [pc, #48]	; (8015fc8 <vPortFree+0xb4>)
 8015f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015f9a:	68b8      	ldr	r0, [r7, #8]
 8015f9c:	f000 f87a 	bl	8016094 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015fa0:	4b0a      	ldr	r3, [pc, #40]	; (8015fcc <vPortFree+0xb8>)
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	3301      	adds	r3, #1
 8015fa6:	4a09      	ldr	r2, [pc, #36]	; (8015fcc <vPortFree+0xb8>)
 8015fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015faa:	f7fe f88f 	bl	80140cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015fae:	bf00      	nop
 8015fb0:	3710      	adds	r7, #16
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bd80      	pop	{r7, pc}
 8015fb6:	bf00      	nop
 8015fb8:	2000bf7c 	.word	0x2000bf7c
 8015fbc:	0801c0f8 	.word	0x0801c0f8
 8015fc0:	0801c1fc 	.word	0x0801c1fc
 8015fc4:	0801c230 	.word	0x0801c230
 8015fc8:	2000bf6c 	.word	0x2000bf6c
 8015fcc:	2000bf78 	.word	0x2000bf78

08015fd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015fd0:	b480      	push	{r7}
 8015fd2:	b085      	sub	sp, #20
 8015fd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015fd6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8015fda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015fdc:	4b27      	ldr	r3, [pc, #156]	; (801607c <prvHeapInit+0xac>)
 8015fde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	f003 0307 	and.w	r3, r3, #7
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d00c      	beq.n	8016004 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	3307      	adds	r3, #7
 8015fee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	f023 0307 	bic.w	r3, r3, #7
 8015ff6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015ff8:	68ba      	ldr	r2, [r7, #8]
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	1ad3      	subs	r3, r2, r3
 8015ffe:	4a1f      	ldr	r2, [pc, #124]	; (801607c <prvHeapInit+0xac>)
 8016000:	4413      	add	r3, r2
 8016002:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016008:	4a1d      	ldr	r2, [pc, #116]	; (8016080 <prvHeapInit+0xb0>)
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801600e:	4b1c      	ldr	r3, [pc, #112]	; (8016080 <prvHeapInit+0xb0>)
 8016010:	2200      	movs	r2, #0
 8016012:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	68ba      	ldr	r2, [r7, #8]
 8016018:	4413      	add	r3, r2
 801601a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801601c:	2208      	movs	r2, #8
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	1a9b      	subs	r3, r3, r2
 8016022:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	f023 0307 	bic.w	r3, r3, #7
 801602a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	4a15      	ldr	r2, [pc, #84]	; (8016084 <prvHeapInit+0xb4>)
 8016030:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016032:	4b14      	ldr	r3, [pc, #80]	; (8016084 <prvHeapInit+0xb4>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	2200      	movs	r2, #0
 8016038:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801603a:	4b12      	ldr	r3, [pc, #72]	; (8016084 <prvHeapInit+0xb4>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	2200      	movs	r2, #0
 8016040:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	68fa      	ldr	r2, [r7, #12]
 801604a:	1ad2      	subs	r2, r2, r3
 801604c:	683b      	ldr	r3, [r7, #0]
 801604e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016050:	4b0c      	ldr	r3, [pc, #48]	; (8016084 <prvHeapInit+0xb4>)
 8016052:	681a      	ldr	r2, [r3, #0]
 8016054:	683b      	ldr	r3, [r7, #0]
 8016056:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016058:	683b      	ldr	r3, [r7, #0]
 801605a:	685b      	ldr	r3, [r3, #4]
 801605c:	4a0a      	ldr	r2, [pc, #40]	; (8016088 <prvHeapInit+0xb8>)
 801605e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	685b      	ldr	r3, [r3, #4]
 8016064:	4a09      	ldr	r2, [pc, #36]	; (801608c <prvHeapInit+0xbc>)
 8016066:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016068:	4b09      	ldr	r3, [pc, #36]	; (8016090 <prvHeapInit+0xc0>)
 801606a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801606e:	601a      	str	r2, [r3, #0]
}
 8016070:	bf00      	nop
 8016072:	3714      	adds	r7, #20
 8016074:	46bd      	mov	sp, r7
 8016076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607a:	4770      	bx	lr
 801607c:	20008360 	.word	0x20008360
 8016080:	2000bf60 	.word	0x2000bf60
 8016084:	2000bf68 	.word	0x2000bf68
 8016088:	2000bf70 	.word	0x2000bf70
 801608c:	2000bf6c 	.word	0x2000bf6c
 8016090:	2000bf7c 	.word	0x2000bf7c

08016094 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016094:	b480      	push	{r7}
 8016096:	b085      	sub	sp, #20
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801609c:	4b28      	ldr	r3, [pc, #160]	; (8016140 <prvInsertBlockIntoFreeList+0xac>)
 801609e:	60fb      	str	r3, [r7, #12]
 80160a0:	e002      	b.n	80160a8 <prvInsertBlockIntoFreeList+0x14>
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	60fb      	str	r3, [r7, #12]
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	687a      	ldr	r2, [r7, #4]
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d8f7      	bhi.n	80160a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	685b      	ldr	r3, [r3, #4]
 80160ba:	68ba      	ldr	r2, [r7, #8]
 80160bc:	4413      	add	r3, r2
 80160be:	687a      	ldr	r2, [r7, #4]
 80160c0:	429a      	cmp	r2, r3
 80160c2:	d108      	bne.n	80160d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	685a      	ldr	r2, [r3, #4]
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	685b      	ldr	r3, [r3, #4]
 80160cc:	441a      	add	r2, r3
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	685b      	ldr	r3, [r3, #4]
 80160de:	68ba      	ldr	r2, [r7, #8]
 80160e0:	441a      	add	r2, r3
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	429a      	cmp	r2, r3
 80160e8:	d118      	bne.n	801611c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	681a      	ldr	r2, [r3, #0]
 80160ee:	4b15      	ldr	r3, [pc, #84]	; (8016144 <prvInsertBlockIntoFreeList+0xb0>)
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	429a      	cmp	r2, r3
 80160f4:	d00d      	beq.n	8016112 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	685a      	ldr	r2, [r3, #4]
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	441a      	add	r2, r3
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	681a      	ldr	r2, [r3, #0]
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	601a      	str	r2, [r3, #0]
 8016110:	e008      	b.n	8016124 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016112:	4b0c      	ldr	r3, [pc, #48]	; (8016144 <prvInsertBlockIntoFreeList+0xb0>)
 8016114:	681a      	ldr	r2, [r3, #0]
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	601a      	str	r2, [r3, #0]
 801611a:	e003      	b.n	8016124 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	681a      	ldr	r2, [r3, #0]
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016124:	68fa      	ldr	r2, [r7, #12]
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	429a      	cmp	r2, r3
 801612a:	d002      	beq.n	8016132 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	687a      	ldr	r2, [r7, #4]
 8016130:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016132:	bf00      	nop
 8016134:	3714      	adds	r7, #20
 8016136:	46bd      	mov	sp, r7
 8016138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613c:	4770      	bx	lr
 801613e:	bf00      	nop
 8016140:	2000bf60 	.word	0x2000bf60
 8016144:	2000bf68 	.word	0x2000bf68

08016148 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801614c:	2200      	movs	r2, #0
 801614e:	4912      	ldr	r1, [pc, #72]	; (8016198 <MX_USB_DEVICE_Init+0x50>)
 8016150:	4812      	ldr	r0, [pc, #72]	; (801619c <MX_USB_DEVICE_Init+0x54>)
 8016152:	f7fb fa11 	bl	8011578 <USBD_Init>
 8016156:	4603      	mov	r3, r0
 8016158:	2b00      	cmp	r3, #0
 801615a:	d001      	beq.n	8016160 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801615c:	f7f3 f846 	bl	80091ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016160:	490f      	ldr	r1, [pc, #60]	; (80161a0 <MX_USB_DEVICE_Init+0x58>)
 8016162:	480e      	ldr	r0, [pc, #56]	; (801619c <MX_USB_DEVICE_Init+0x54>)
 8016164:	f7fb fa38 	bl	80115d8 <USBD_RegisterClass>
 8016168:	4603      	mov	r3, r0
 801616a:	2b00      	cmp	r3, #0
 801616c:	d001      	beq.n	8016172 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801616e:	f7f3 f83d 	bl	80091ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016172:	490c      	ldr	r1, [pc, #48]	; (80161a4 <MX_USB_DEVICE_Init+0x5c>)
 8016174:	4809      	ldr	r0, [pc, #36]	; (801619c <MX_USB_DEVICE_Init+0x54>)
 8016176:	f7fb f96f 	bl	8011458 <USBD_CDC_RegisterInterface>
 801617a:	4603      	mov	r3, r0
 801617c:	2b00      	cmp	r3, #0
 801617e:	d001      	beq.n	8016184 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016180:	f7f3 f834 	bl	80091ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016184:	4805      	ldr	r0, [pc, #20]	; (801619c <MX_USB_DEVICE_Init+0x54>)
 8016186:	f7fb fa5d 	bl	8011644 <USBD_Start>
 801618a:	4603      	mov	r3, r0
 801618c:	2b00      	cmp	r3, #0
 801618e:	d001      	beq.n	8016194 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016190:	f7f3 f82c 	bl	80091ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016194:	bf00      	nop
 8016196:	bd80      	pop	{r7, pc}
 8016198:	200003f0 	.word	0x200003f0
 801619c:	2000bf80 	.word	0x2000bf80
 80161a0:	20000358 	.word	0x20000358
 80161a4:	200003dc 	.word	0x200003dc

080161a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80161ac:	2200      	movs	r2, #0
 80161ae:	4905      	ldr	r1, [pc, #20]	; (80161c4 <CDC_Init_FS+0x1c>)
 80161b0:	4805      	ldr	r0, [pc, #20]	; (80161c8 <CDC_Init_FS+0x20>)
 80161b2:	f7fb f96b 	bl	801148c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80161b6:	4905      	ldr	r1, [pc, #20]	; (80161cc <CDC_Init_FS+0x24>)
 80161b8:	4803      	ldr	r0, [pc, #12]	; (80161c8 <CDC_Init_FS+0x20>)
 80161ba:	f7fb f989 	bl	80114d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80161be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80161c0:	4618      	mov	r0, r3
 80161c2:	bd80      	pop	{r7, pc}
 80161c4:	2000ca5c 	.word	0x2000ca5c
 80161c8:	2000bf80 	.word	0x2000bf80
 80161cc:	2000c25c 	.word	0x2000c25c

080161d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80161d0:	b480      	push	{r7}
 80161d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80161d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	46bd      	mov	sp, r7
 80161da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161de:	4770      	bx	lr

080161e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80161e0:	b480      	push	{r7}
 80161e2:	b083      	sub	sp, #12
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	4603      	mov	r3, r0
 80161e8:	6039      	str	r1, [r7, #0]
 80161ea:	71fb      	strb	r3, [r7, #7]
 80161ec:	4613      	mov	r3, r2
 80161ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80161f0:	79fb      	ldrb	r3, [r7, #7]
 80161f2:	2b23      	cmp	r3, #35	; 0x23
 80161f4:	d84a      	bhi.n	801628c <CDC_Control_FS+0xac>
 80161f6:	a201      	add	r2, pc, #4	; (adr r2, 80161fc <CDC_Control_FS+0x1c>)
 80161f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161fc:	0801628d 	.word	0x0801628d
 8016200:	0801628d 	.word	0x0801628d
 8016204:	0801628d 	.word	0x0801628d
 8016208:	0801628d 	.word	0x0801628d
 801620c:	0801628d 	.word	0x0801628d
 8016210:	0801628d 	.word	0x0801628d
 8016214:	0801628d 	.word	0x0801628d
 8016218:	0801628d 	.word	0x0801628d
 801621c:	0801628d 	.word	0x0801628d
 8016220:	0801628d 	.word	0x0801628d
 8016224:	0801628d 	.word	0x0801628d
 8016228:	0801628d 	.word	0x0801628d
 801622c:	0801628d 	.word	0x0801628d
 8016230:	0801628d 	.word	0x0801628d
 8016234:	0801628d 	.word	0x0801628d
 8016238:	0801628d 	.word	0x0801628d
 801623c:	0801628d 	.word	0x0801628d
 8016240:	0801628d 	.word	0x0801628d
 8016244:	0801628d 	.word	0x0801628d
 8016248:	0801628d 	.word	0x0801628d
 801624c:	0801628d 	.word	0x0801628d
 8016250:	0801628d 	.word	0x0801628d
 8016254:	0801628d 	.word	0x0801628d
 8016258:	0801628d 	.word	0x0801628d
 801625c:	0801628d 	.word	0x0801628d
 8016260:	0801628d 	.word	0x0801628d
 8016264:	0801628d 	.word	0x0801628d
 8016268:	0801628d 	.word	0x0801628d
 801626c:	0801628d 	.word	0x0801628d
 8016270:	0801628d 	.word	0x0801628d
 8016274:	0801628d 	.word	0x0801628d
 8016278:	0801628d 	.word	0x0801628d
 801627c:	0801628d 	.word	0x0801628d
 8016280:	0801628d 	.word	0x0801628d
 8016284:	0801628d 	.word	0x0801628d
 8016288:	0801628d 	.word	0x0801628d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801628c:	bf00      	nop
  }

  return (USBD_OK);
 801628e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016290:	4618      	mov	r0, r3
 8016292:	370c      	adds	r7, #12
 8016294:	46bd      	mov	sp, r7
 8016296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629a:	4770      	bx	lr

0801629c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b082      	sub	sp, #8
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
 80162a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80162a6:	6879      	ldr	r1, [r7, #4]
 80162a8:	4805      	ldr	r0, [pc, #20]	; (80162c0 <CDC_Receive_FS+0x24>)
 80162aa:	f7fb f911 	bl	80114d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80162ae:	4804      	ldr	r0, [pc, #16]	; (80162c0 <CDC_Receive_FS+0x24>)
 80162b0:	f7fb f92c 	bl	801150c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80162b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80162b6:	4618      	mov	r0, r3
 80162b8:	3708      	adds	r7, #8
 80162ba:	46bd      	mov	sp, r7
 80162bc:	bd80      	pop	{r7, pc}
 80162be:	bf00      	nop
 80162c0:	2000bf80 	.word	0x2000bf80

080162c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80162c4:	b480      	push	{r7}
 80162c6:	b087      	sub	sp, #28
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	60b9      	str	r1, [r7, #8]
 80162ce:	4613      	mov	r3, r2
 80162d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80162d2:	2300      	movs	r3, #0
 80162d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80162d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80162da:	4618      	mov	r0, r3
 80162dc:	371c      	adds	r7, #28
 80162de:	46bd      	mov	sp, r7
 80162e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e4:	4770      	bx	lr
	...

080162e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162e8:	b480      	push	{r7}
 80162ea:	b083      	sub	sp, #12
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	4603      	mov	r3, r0
 80162f0:	6039      	str	r1, [r7, #0]
 80162f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	2212      	movs	r2, #18
 80162f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80162fa:	4b03      	ldr	r3, [pc, #12]	; (8016308 <USBD_FS_DeviceDescriptor+0x20>)
}
 80162fc:	4618      	mov	r0, r3
 80162fe:	370c      	adds	r7, #12
 8016300:	46bd      	mov	sp, r7
 8016302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016306:	4770      	bx	lr
 8016308:	2000040c 	.word	0x2000040c

0801630c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801630c:	b480      	push	{r7}
 801630e:	b083      	sub	sp, #12
 8016310:	af00      	add	r7, sp, #0
 8016312:	4603      	mov	r3, r0
 8016314:	6039      	str	r1, [r7, #0]
 8016316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016318:	683b      	ldr	r3, [r7, #0]
 801631a:	2204      	movs	r2, #4
 801631c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801631e:	4b03      	ldr	r3, [pc, #12]	; (801632c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016320:	4618      	mov	r0, r3
 8016322:	370c      	adds	r7, #12
 8016324:	46bd      	mov	sp, r7
 8016326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632a:	4770      	bx	lr
 801632c:	20000420 	.word	0x20000420

08016330 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b082      	sub	sp, #8
 8016334:	af00      	add	r7, sp, #0
 8016336:	4603      	mov	r3, r0
 8016338:	6039      	str	r1, [r7, #0]
 801633a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801633c:	79fb      	ldrb	r3, [r7, #7]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d105      	bne.n	801634e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016342:	683a      	ldr	r2, [r7, #0]
 8016344:	4907      	ldr	r1, [pc, #28]	; (8016364 <USBD_FS_ProductStrDescriptor+0x34>)
 8016346:	4808      	ldr	r0, [pc, #32]	; (8016368 <USBD_FS_ProductStrDescriptor+0x38>)
 8016348:	f7fc fb2e 	bl	80129a8 <USBD_GetString>
 801634c:	e004      	b.n	8016358 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801634e:	683a      	ldr	r2, [r7, #0]
 8016350:	4904      	ldr	r1, [pc, #16]	; (8016364 <USBD_FS_ProductStrDescriptor+0x34>)
 8016352:	4805      	ldr	r0, [pc, #20]	; (8016368 <USBD_FS_ProductStrDescriptor+0x38>)
 8016354:	f7fc fb28 	bl	80129a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016358:	4b02      	ldr	r3, [pc, #8]	; (8016364 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801635a:	4618      	mov	r0, r3
 801635c:	3708      	adds	r7, #8
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}
 8016362:	bf00      	nop
 8016364:	2000d25c 	.word	0x2000d25c
 8016368:	0801c250 	.word	0x0801c250

0801636c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b082      	sub	sp, #8
 8016370:	af00      	add	r7, sp, #0
 8016372:	4603      	mov	r3, r0
 8016374:	6039      	str	r1, [r7, #0]
 8016376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016378:	683a      	ldr	r2, [r7, #0]
 801637a:	4904      	ldr	r1, [pc, #16]	; (801638c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801637c:	4804      	ldr	r0, [pc, #16]	; (8016390 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801637e:	f7fc fb13 	bl	80129a8 <USBD_GetString>
  return USBD_StrDesc;
 8016382:	4b02      	ldr	r3, [pc, #8]	; (801638c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016384:	4618      	mov	r0, r3
 8016386:	3708      	adds	r7, #8
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}
 801638c:	2000d25c 	.word	0x2000d25c
 8016390:	0801c268 	.word	0x0801c268

08016394 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	af00      	add	r7, sp, #0
 801639a:	4603      	mov	r3, r0
 801639c:	6039      	str	r1, [r7, #0]
 801639e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80163a0:	683b      	ldr	r3, [r7, #0]
 80163a2:	221a      	movs	r2, #26
 80163a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80163a6:	f000 f843 	bl	8016430 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80163aa:	4b02      	ldr	r3, [pc, #8]	; (80163b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	3708      	adds	r7, #8
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	20000424 	.word	0x20000424

080163b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b082      	sub	sp, #8
 80163bc:	af00      	add	r7, sp, #0
 80163be:	4603      	mov	r3, r0
 80163c0:	6039      	str	r1, [r7, #0]
 80163c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80163c4:	79fb      	ldrb	r3, [r7, #7]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d105      	bne.n	80163d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80163ca:	683a      	ldr	r2, [r7, #0]
 80163cc:	4907      	ldr	r1, [pc, #28]	; (80163ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80163ce:	4808      	ldr	r0, [pc, #32]	; (80163f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80163d0:	f7fc faea 	bl	80129a8 <USBD_GetString>
 80163d4:	e004      	b.n	80163e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80163d6:	683a      	ldr	r2, [r7, #0]
 80163d8:	4904      	ldr	r1, [pc, #16]	; (80163ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80163da:	4805      	ldr	r0, [pc, #20]	; (80163f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80163dc:	f7fc fae4 	bl	80129a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80163e0:	4b02      	ldr	r3, [pc, #8]	; (80163ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80163e2:	4618      	mov	r0, r3
 80163e4:	3708      	adds	r7, #8
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd80      	pop	{r7, pc}
 80163ea:	bf00      	nop
 80163ec:	2000d25c 	.word	0x2000d25c
 80163f0:	0801c27c 	.word	0x0801c27c

080163f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b082      	sub	sp, #8
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	4603      	mov	r3, r0
 80163fc:	6039      	str	r1, [r7, #0]
 80163fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016400:	79fb      	ldrb	r3, [r7, #7]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d105      	bne.n	8016412 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016406:	683a      	ldr	r2, [r7, #0]
 8016408:	4907      	ldr	r1, [pc, #28]	; (8016428 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801640a:	4808      	ldr	r0, [pc, #32]	; (801642c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801640c:	f7fc facc 	bl	80129a8 <USBD_GetString>
 8016410:	e004      	b.n	801641c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016412:	683a      	ldr	r2, [r7, #0]
 8016414:	4904      	ldr	r1, [pc, #16]	; (8016428 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016416:	4805      	ldr	r0, [pc, #20]	; (801642c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016418:	f7fc fac6 	bl	80129a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801641c:	4b02      	ldr	r3, [pc, #8]	; (8016428 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801641e:	4618      	mov	r0, r3
 8016420:	3708      	adds	r7, #8
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}
 8016426:	bf00      	nop
 8016428:	2000d25c 	.word	0x2000d25c
 801642c:	0801c288 	.word	0x0801c288

08016430 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b084      	sub	sp, #16
 8016434:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016436:	4b0f      	ldr	r3, [pc, #60]	; (8016474 <Get_SerialNum+0x44>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801643c:	4b0e      	ldr	r3, [pc, #56]	; (8016478 <Get_SerialNum+0x48>)
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016442:	4b0e      	ldr	r3, [pc, #56]	; (801647c <Get_SerialNum+0x4c>)
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016448:	68fa      	ldr	r2, [r7, #12]
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	4413      	add	r3, r2
 801644e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d009      	beq.n	801646a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016456:	2208      	movs	r2, #8
 8016458:	4909      	ldr	r1, [pc, #36]	; (8016480 <Get_SerialNum+0x50>)
 801645a:	68f8      	ldr	r0, [r7, #12]
 801645c:	f000 f814 	bl	8016488 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016460:	2204      	movs	r2, #4
 8016462:	4908      	ldr	r1, [pc, #32]	; (8016484 <Get_SerialNum+0x54>)
 8016464:	68b8      	ldr	r0, [r7, #8]
 8016466:	f000 f80f 	bl	8016488 <IntToUnicode>
  }
}
 801646a:	bf00      	nop
 801646c:	3710      	adds	r7, #16
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}
 8016472:	bf00      	nop
 8016474:	1fff7a10 	.word	0x1fff7a10
 8016478:	1fff7a14 	.word	0x1fff7a14
 801647c:	1fff7a18 	.word	0x1fff7a18
 8016480:	20000426 	.word	0x20000426
 8016484:	20000436 	.word	0x20000436

08016488 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016488:	b480      	push	{r7}
 801648a:	b087      	sub	sp, #28
 801648c:	af00      	add	r7, sp, #0
 801648e:	60f8      	str	r0, [r7, #12]
 8016490:	60b9      	str	r1, [r7, #8]
 8016492:	4613      	mov	r3, r2
 8016494:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016496:	2300      	movs	r3, #0
 8016498:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801649a:	2300      	movs	r3, #0
 801649c:	75fb      	strb	r3, [r7, #23]
 801649e:	e027      	b.n	80164f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	0f1b      	lsrs	r3, r3, #28
 80164a4:	2b09      	cmp	r3, #9
 80164a6:	d80b      	bhi.n	80164c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	0f1b      	lsrs	r3, r3, #28
 80164ac:	b2da      	uxtb	r2, r3
 80164ae:	7dfb      	ldrb	r3, [r7, #23]
 80164b0:	005b      	lsls	r3, r3, #1
 80164b2:	4619      	mov	r1, r3
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	440b      	add	r3, r1
 80164b8:	3230      	adds	r2, #48	; 0x30
 80164ba:	b2d2      	uxtb	r2, r2
 80164bc:	701a      	strb	r2, [r3, #0]
 80164be:	e00a      	b.n	80164d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	0f1b      	lsrs	r3, r3, #28
 80164c4:	b2da      	uxtb	r2, r3
 80164c6:	7dfb      	ldrb	r3, [r7, #23]
 80164c8:	005b      	lsls	r3, r3, #1
 80164ca:	4619      	mov	r1, r3
 80164cc:	68bb      	ldr	r3, [r7, #8]
 80164ce:	440b      	add	r3, r1
 80164d0:	3237      	adds	r2, #55	; 0x37
 80164d2:	b2d2      	uxtb	r2, r2
 80164d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	011b      	lsls	r3, r3, #4
 80164da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80164dc:	7dfb      	ldrb	r3, [r7, #23]
 80164de:	005b      	lsls	r3, r3, #1
 80164e0:	3301      	adds	r3, #1
 80164e2:	68ba      	ldr	r2, [r7, #8]
 80164e4:	4413      	add	r3, r2
 80164e6:	2200      	movs	r2, #0
 80164e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80164ea:	7dfb      	ldrb	r3, [r7, #23]
 80164ec:	3301      	adds	r3, #1
 80164ee:	75fb      	strb	r3, [r7, #23]
 80164f0:	7dfa      	ldrb	r2, [r7, #23]
 80164f2:	79fb      	ldrb	r3, [r7, #7]
 80164f4:	429a      	cmp	r2, r3
 80164f6:	d3d3      	bcc.n	80164a0 <IntToUnicode+0x18>
  }
}
 80164f8:	bf00      	nop
 80164fa:	bf00      	nop
 80164fc:	371c      	adds	r7, #28
 80164fe:	46bd      	mov	sp, r7
 8016500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016504:	4770      	bx	lr
	...

08016508 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b08a      	sub	sp, #40	; 0x28
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016510:	f107 0314 	add.w	r3, r7, #20
 8016514:	2200      	movs	r2, #0
 8016516:	601a      	str	r2, [r3, #0]
 8016518:	605a      	str	r2, [r3, #4]
 801651a:	609a      	str	r2, [r3, #8]
 801651c:	60da      	str	r2, [r3, #12]
 801651e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016528:	d13a      	bne.n	80165a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801652a:	2300      	movs	r3, #0
 801652c:	613b      	str	r3, [r7, #16]
 801652e:	4b1e      	ldr	r3, [pc, #120]	; (80165a8 <HAL_PCD_MspInit+0xa0>)
 8016530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016532:	4a1d      	ldr	r2, [pc, #116]	; (80165a8 <HAL_PCD_MspInit+0xa0>)
 8016534:	f043 0301 	orr.w	r3, r3, #1
 8016538:	6313      	str	r3, [r2, #48]	; 0x30
 801653a:	4b1b      	ldr	r3, [pc, #108]	; (80165a8 <HAL_PCD_MspInit+0xa0>)
 801653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801653e:	f003 0301 	and.w	r3, r3, #1
 8016542:	613b      	str	r3, [r7, #16]
 8016544:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016546:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801654a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801654c:	2302      	movs	r3, #2
 801654e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016550:	2300      	movs	r3, #0
 8016552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016554:	2303      	movs	r3, #3
 8016556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016558:	230a      	movs	r3, #10
 801655a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801655c:	f107 0314 	add.w	r3, r7, #20
 8016560:	4619      	mov	r1, r3
 8016562:	4812      	ldr	r0, [pc, #72]	; (80165ac <HAL_PCD_MspInit+0xa4>)
 8016564:	f7f4 fc1a 	bl	800ad9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016568:	4b0f      	ldr	r3, [pc, #60]	; (80165a8 <HAL_PCD_MspInit+0xa0>)
 801656a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801656c:	4a0e      	ldr	r2, [pc, #56]	; (80165a8 <HAL_PCD_MspInit+0xa0>)
 801656e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016572:	6353      	str	r3, [r2, #52]	; 0x34
 8016574:	2300      	movs	r3, #0
 8016576:	60fb      	str	r3, [r7, #12]
 8016578:	4b0b      	ldr	r3, [pc, #44]	; (80165a8 <HAL_PCD_MspInit+0xa0>)
 801657a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801657c:	4a0a      	ldr	r2, [pc, #40]	; (80165a8 <HAL_PCD_MspInit+0xa0>)
 801657e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016582:	6453      	str	r3, [r2, #68]	; 0x44
 8016584:	4b08      	ldr	r3, [pc, #32]	; (80165a8 <HAL_PCD_MspInit+0xa0>)
 8016586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801658c:	60fb      	str	r3, [r7, #12]
 801658e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016590:	2200      	movs	r2, #0
 8016592:	2105      	movs	r1, #5
 8016594:	2043      	movs	r0, #67	; 0x43
 8016596:	f7f3 ffba 	bl	800a50e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801659a:	2043      	movs	r0, #67	; 0x43
 801659c:	f7f3 ffd3 	bl	800a546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80165a0:	bf00      	nop
 80165a2:	3728      	adds	r7, #40	; 0x28
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}
 80165a8:	40023800 	.word	0x40023800
 80165ac:	40020000 	.word	0x40020000

080165b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b082      	sub	sp, #8
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80165c4:	4619      	mov	r1, r3
 80165c6:	4610      	mov	r0, r2
 80165c8:	f7fb f889 	bl	80116de <USBD_LL_SetupStage>
}
 80165cc:	bf00      	nop
 80165ce:	3708      	adds	r7, #8
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd80      	pop	{r7, pc}

080165d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b082      	sub	sp, #8
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	460b      	mov	r3, r1
 80165de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80165e6:	78fa      	ldrb	r2, [r7, #3]
 80165e8:	6879      	ldr	r1, [r7, #4]
 80165ea:	4613      	mov	r3, r2
 80165ec:	00db      	lsls	r3, r3, #3
 80165ee:	4413      	add	r3, r2
 80165f0:	009b      	lsls	r3, r3, #2
 80165f2:	440b      	add	r3, r1
 80165f4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80165f8:	681a      	ldr	r2, [r3, #0]
 80165fa:	78fb      	ldrb	r3, [r7, #3]
 80165fc:	4619      	mov	r1, r3
 80165fe:	f7fb f8c3 	bl	8011788 <USBD_LL_DataOutStage>
}
 8016602:	bf00      	nop
 8016604:	3708      	adds	r7, #8
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}

0801660a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801660a:	b580      	push	{r7, lr}
 801660c:	b082      	sub	sp, #8
 801660e:	af00      	add	r7, sp, #0
 8016610:	6078      	str	r0, [r7, #4]
 8016612:	460b      	mov	r3, r1
 8016614:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 801661c:	78fa      	ldrb	r2, [r7, #3]
 801661e:	6879      	ldr	r1, [r7, #4]
 8016620:	4613      	mov	r3, r2
 8016622:	00db      	lsls	r3, r3, #3
 8016624:	4413      	add	r3, r2
 8016626:	009b      	lsls	r3, r3, #2
 8016628:	440b      	add	r3, r1
 801662a:	3320      	adds	r3, #32
 801662c:	681a      	ldr	r2, [r3, #0]
 801662e:	78fb      	ldrb	r3, [r7, #3]
 8016630:	4619      	mov	r1, r3
 8016632:	f7fb f95c 	bl	80118ee <USBD_LL_DataInStage>
}
 8016636:	bf00      	nop
 8016638:	3708      	adds	r7, #8
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}

0801663e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801663e:	b580      	push	{r7, lr}
 8016640:	b082      	sub	sp, #8
 8016642:	af00      	add	r7, sp, #0
 8016644:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801664c:	4618      	mov	r0, r3
 801664e:	f7fb fa96 	bl	8011b7e <USBD_LL_SOF>
}
 8016652:	bf00      	nop
 8016654:	3708      	adds	r7, #8
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}

0801665a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801665a:	b580      	push	{r7, lr}
 801665c:	b084      	sub	sp, #16
 801665e:	af00      	add	r7, sp, #0
 8016660:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016662:	2301      	movs	r3, #1
 8016664:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	79db      	ldrb	r3, [r3, #7]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d102      	bne.n	8016674 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801666e:	2300      	movs	r3, #0
 8016670:	73fb      	strb	r3, [r7, #15]
 8016672:	e008      	b.n	8016686 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	79db      	ldrb	r3, [r3, #7]
 8016678:	2b02      	cmp	r3, #2
 801667a:	d102      	bne.n	8016682 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801667c:	2301      	movs	r3, #1
 801667e:	73fb      	strb	r3, [r7, #15]
 8016680:	e001      	b.n	8016686 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016682:	f7f2 fdb3 	bl	80091ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801668c:	7bfa      	ldrb	r2, [r7, #15]
 801668e:	4611      	mov	r1, r2
 8016690:	4618      	mov	r0, r3
 8016692:	f7fb fa30 	bl	8011af6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801669c:	4618      	mov	r0, r3
 801669e:	f7fb f9d8 	bl	8011a52 <USBD_LL_Reset>
}
 80166a2:	bf00      	nop
 80166a4:	3710      	adds	r7, #16
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}
	...

080166ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b082      	sub	sp, #8
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7fb fa2b 	bl	8011b16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	687a      	ldr	r2, [r7, #4]
 80166cc:	6812      	ldr	r2, [r2, #0]
 80166ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80166d2:	f043 0301 	orr.w	r3, r3, #1
 80166d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	7adb      	ldrb	r3, [r3, #11]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d005      	beq.n	80166ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80166e0:	4b04      	ldr	r3, [pc, #16]	; (80166f4 <HAL_PCD_SuspendCallback+0x48>)
 80166e2:	691b      	ldr	r3, [r3, #16]
 80166e4:	4a03      	ldr	r2, [pc, #12]	; (80166f4 <HAL_PCD_SuspendCallback+0x48>)
 80166e6:	f043 0306 	orr.w	r3, r3, #6
 80166ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80166ec:	bf00      	nop
 80166ee:	3708      	adds	r7, #8
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}
 80166f4:	e000ed00 	.word	0xe000ed00

080166f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b082      	sub	sp, #8
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016706:	4618      	mov	r0, r3
 8016708:	f7fb fa21 	bl	8011b4e <USBD_LL_Resume>
}
 801670c:	bf00      	nop
 801670e:	3708      	adds	r7, #8
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}

08016714 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b082      	sub	sp, #8
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
 801671c:	460b      	mov	r3, r1
 801671e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016726:	78fa      	ldrb	r2, [r7, #3]
 8016728:	4611      	mov	r1, r2
 801672a:	4618      	mov	r0, r3
 801672c:	f7fb fa79 	bl	8011c22 <USBD_LL_IsoOUTIncomplete>
}
 8016730:	bf00      	nop
 8016732:	3708      	adds	r7, #8
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}

08016738 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b082      	sub	sp, #8
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	460b      	mov	r3, r1
 8016742:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801674a:	78fa      	ldrb	r2, [r7, #3]
 801674c:	4611      	mov	r1, r2
 801674e:	4618      	mov	r0, r3
 8016750:	f7fb fa35 	bl	8011bbe <USBD_LL_IsoINIncomplete>
}
 8016754:	bf00      	nop
 8016756:	3708      	adds	r7, #8
 8016758:	46bd      	mov	sp, r7
 801675a:	bd80      	pop	{r7, pc}

0801675c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b082      	sub	sp, #8
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801676a:	4618      	mov	r0, r3
 801676c:	f7fb fa8b 	bl	8011c86 <USBD_LL_DevConnected>
}
 8016770:	bf00      	nop
 8016772:	3708      	adds	r7, #8
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}

08016778 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b082      	sub	sp, #8
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016786:	4618      	mov	r0, r3
 8016788:	f7fb fa88 	bl	8011c9c <USBD_LL_DevDisconnected>
}
 801678c:	bf00      	nop
 801678e:	3708      	adds	r7, #8
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}

08016794 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b082      	sub	sp, #8
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	781b      	ldrb	r3, [r3, #0]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d13c      	bne.n	801681e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80167a4:	4a20      	ldr	r2, [pc, #128]	; (8016828 <USBD_LL_Init+0x94>)
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	4a1e      	ldr	r2, [pc, #120]	; (8016828 <USBD_LL_Init+0x94>)
 80167b0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80167b4:	4b1c      	ldr	r3, [pc, #112]	; (8016828 <USBD_LL_Init+0x94>)
 80167b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80167ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80167bc:	4b1a      	ldr	r3, [pc, #104]	; (8016828 <USBD_LL_Init+0x94>)
 80167be:	2204      	movs	r2, #4
 80167c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80167c2:	4b19      	ldr	r3, [pc, #100]	; (8016828 <USBD_LL_Init+0x94>)
 80167c4:	2202      	movs	r2, #2
 80167c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80167c8:	4b17      	ldr	r3, [pc, #92]	; (8016828 <USBD_LL_Init+0x94>)
 80167ca:	2200      	movs	r2, #0
 80167cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80167ce:	4b16      	ldr	r3, [pc, #88]	; (8016828 <USBD_LL_Init+0x94>)
 80167d0:	2202      	movs	r2, #2
 80167d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80167d4:	4b14      	ldr	r3, [pc, #80]	; (8016828 <USBD_LL_Init+0x94>)
 80167d6:	2200      	movs	r2, #0
 80167d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80167da:	4b13      	ldr	r3, [pc, #76]	; (8016828 <USBD_LL_Init+0x94>)
 80167dc:	2200      	movs	r2, #0
 80167de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80167e0:	4b11      	ldr	r3, [pc, #68]	; (8016828 <USBD_LL_Init+0x94>)
 80167e2:	2200      	movs	r2, #0
 80167e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80167e6:	4b10      	ldr	r3, [pc, #64]	; (8016828 <USBD_LL_Init+0x94>)
 80167e8:	2200      	movs	r2, #0
 80167ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80167ec:	4b0e      	ldr	r3, [pc, #56]	; (8016828 <USBD_LL_Init+0x94>)
 80167ee:	2200      	movs	r2, #0
 80167f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80167f2:	480d      	ldr	r0, [pc, #52]	; (8016828 <USBD_LL_Init+0x94>)
 80167f4:	f7f4 fc87 	bl	800b106 <HAL_PCD_Init>
 80167f8:	4603      	mov	r3, r0
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d001      	beq.n	8016802 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80167fe:	f7f2 fcf5 	bl	80091ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016802:	2180      	movs	r1, #128	; 0x80
 8016804:	4808      	ldr	r0, [pc, #32]	; (8016828 <USBD_LL_Init+0x94>)
 8016806:	f7f5 feb2 	bl	800c56e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801680a:	2240      	movs	r2, #64	; 0x40
 801680c:	2100      	movs	r1, #0
 801680e:	4806      	ldr	r0, [pc, #24]	; (8016828 <USBD_LL_Init+0x94>)
 8016810:	f7f5 fe66 	bl	800c4e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016814:	2280      	movs	r2, #128	; 0x80
 8016816:	2101      	movs	r1, #1
 8016818:	4803      	ldr	r0, [pc, #12]	; (8016828 <USBD_LL_Init+0x94>)
 801681a:	f7f5 fe61 	bl	800c4e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801681e:	2300      	movs	r3, #0
}
 8016820:	4618      	mov	r0, r3
 8016822:	3708      	adds	r7, #8
 8016824:	46bd      	mov	sp, r7
 8016826:	bd80      	pop	{r7, pc}
 8016828:	2000d45c 	.word	0x2000d45c

0801682c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b084      	sub	sp, #16
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016834:	2300      	movs	r3, #0
 8016836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016838:	2300      	movs	r3, #0
 801683a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016842:	4618      	mov	r0, r3
 8016844:	f7f4 fd6e 	bl	800b324 <HAL_PCD_Start>
 8016848:	4603      	mov	r3, r0
 801684a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801684c:	7bfb      	ldrb	r3, [r7, #15]
 801684e:	4618      	mov	r0, r3
 8016850:	f000 f942 	bl	8016ad8 <USBD_Get_USB_Status>
 8016854:	4603      	mov	r3, r0
 8016856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016858:	7bbb      	ldrb	r3, [r7, #14]
}
 801685a:	4618      	mov	r0, r3
 801685c:	3710      	adds	r7, #16
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}

08016862 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016862:	b580      	push	{r7, lr}
 8016864:	b084      	sub	sp, #16
 8016866:	af00      	add	r7, sp, #0
 8016868:	6078      	str	r0, [r7, #4]
 801686a:	4608      	mov	r0, r1
 801686c:	4611      	mov	r1, r2
 801686e:	461a      	mov	r2, r3
 8016870:	4603      	mov	r3, r0
 8016872:	70fb      	strb	r3, [r7, #3]
 8016874:	460b      	mov	r3, r1
 8016876:	70bb      	strb	r3, [r7, #2]
 8016878:	4613      	mov	r3, r2
 801687a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801687c:	2300      	movs	r3, #0
 801687e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016880:	2300      	movs	r3, #0
 8016882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801688a:	78bb      	ldrb	r3, [r7, #2]
 801688c:	883a      	ldrh	r2, [r7, #0]
 801688e:	78f9      	ldrb	r1, [r7, #3]
 8016890:	f7f5 fa42 	bl	800bd18 <HAL_PCD_EP_Open>
 8016894:	4603      	mov	r3, r0
 8016896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016898:	7bfb      	ldrb	r3, [r7, #15]
 801689a:	4618      	mov	r0, r3
 801689c:	f000 f91c 	bl	8016ad8 <USBD_Get_USB_Status>
 80168a0:	4603      	mov	r3, r0
 80168a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80168a6:	4618      	mov	r0, r3
 80168a8:	3710      	adds	r7, #16
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}

080168ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168ae:	b580      	push	{r7, lr}
 80168b0:	b084      	sub	sp, #16
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
 80168b6:	460b      	mov	r3, r1
 80168b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168ba:	2300      	movs	r3, #0
 80168bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168be:	2300      	movs	r3, #0
 80168c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80168c8:	78fa      	ldrb	r2, [r7, #3]
 80168ca:	4611      	mov	r1, r2
 80168cc:	4618      	mov	r0, r3
 80168ce:	f7f5 fa8b 	bl	800bde8 <HAL_PCD_EP_Close>
 80168d2:	4603      	mov	r3, r0
 80168d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168d6:	7bfb      	ldrb	r3, [r7, #15]
 80168d8:	4618      	mov	r0, r3
 80168da:	f000 f8fd 	bl	8016ad8 <USBD_Get_USB_Status>
 80168de:	4603      	mov	r3, r0
 80168e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80168e4:	4618      	mov	r0, r3
 80168e6:	3710      	adds	r7, #16
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}

080168ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b084      	sub	sp, #16
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
 80168f4:	460b      	mov	r3, r1
 80168f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168f8:	2300      	movs	r3, #0
 80168fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168fc:	2300      	movs	r3, #0
 80168fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016906:	78fa      	ldrb	r2, [r7, #3]
 8016908:	4611      	mov	r1, r2
 801690a:	4618      	mov	r0, r3
 801690c:	f7f5 fb43 	bl	800bf96 <HAL_PCD_EP_SetStall>
 8016910:	4603      	mov	r3, r0
 8016912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016914:	7bfb      	ldrb	r3, [r7, #15]
 8016916:	4618      	mov	r0, r3
 8016918:	f000 f8de 	bl	8016ad8 <USBD_Get_USB_Status>
 801691c:	4603      	mov	r3, r0
 801691e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016920:	7bbb      	ldrb	r3, [r7, #14]
}
 8016922:	4618      	mov	r0, r3
 8016924:	3710      	adds	r7, #16
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}

0801692a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801692a:	b580      	push	{r7, lr}
 801692c:	b084      	sub	sp, #16
 801692e:	af00      	add	r7, sp, #0
 8016930:	6078      	str	r0, [r7, #4]
 8016932:	460b      	mov	r3, r1
 8016934:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016936:	2300      	movs	r3, #0
 8016938:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801693a:	2300      	movs	r3, #0
 801693c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016944:	78fa      	ldrb	r2, [r7, #3]
 8016946:	4611      	mov	r1, r2
 8016948:	4618      	mov	r0, r3
 801694a:	f7f5 fb87 	bl	800c05c <HAL_PCD_EP_ClrStall>
 801694e:	4603      	mov	r3, r0
 8016950:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016952:	7bfb      	ldrb	r3, [r7, #15]
 8016954:	4618      	mov	r0, r3
 8016956:	f000 f8bf 	bl	8016ad8 <USBD_Get_USB_Status>
 801695a:	4603      	mov	r3, r0
 801695c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801695e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016960:	4618      	mov	r0, r3
 8016962:	3710      	adds	r7, #16
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}

08016968 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016968:	b480      	push	{r7}
 801696a:	b085      	sub	sp, #20
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	460b      	mov	r3, r1
 8016972:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801697a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801697c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016980:	2b00      	cmp	r3, #0
 8016982:	da0b      	bge.n	801699c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016984:	78fb      	ldrb	r3, [r7, #3]
 8016986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801698a:	68f9      	ldr	r1, [r7, #12]
 801698c:	4613      	mov	r3, r2
 801698e:	00db      	lsls	r3, r3, #3
 8016990:	4413      	add	r3, r2
 8016992:	009b      	lsls	r3, r3, #2
 8016994:	440b      	add	r3, r1
 8016996:	3316      	adds	r3, #22
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	e00b      	b.n	80169b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801699c:	78fb      	ldrb	r3, [r7, #3]
 801699e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80169a2:	68f9      	ldr	r1, [r7, #12]
 80169a4:	4613      	mov	r3, r2
 80169a6:	00db      	lsls	r3, r3, #3
 80169a8:	4413      	add	r3, r2
 80169aa:	009b      	lsls	r3, r3, #2
 80169ac:	440b      	add	r3, r1
 80169ae:	f203 2356 	addw	r3, r3, #598	; 0x256
 80169b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80169b4:	4618      	mov	r0, r3
 80169b6:	3714      	adds	r7, #20
 80169b8:	46bd      	mov	sp, r7
 80169ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169be:	4770      	bx	lr

080169c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b084      	sub	sp, #16
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
 80169c8:	460b      	mov	r3, r1
 80169ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169cc:	2300      	movs	r3, #0
 80169ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169d0:	2300      	movs	r3, #0
 80169d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80169da:	78fa      	ldrb	r2, [r7, #3]
 80169dc:	4611      	mov	r1, r2
 80169de:	4618      	mov	r0, r3
 80169e0:	f7f5 f976 	bl	800bcd0 <HAL_PCD_SetAddress>
 80169e4:	4603      	mov	r3, r0
 80169e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169e8:	7bfb      	ldrb	r3, [r7, #15]
 80169ea:	4618      	mov	r0, r3
 80169ec:	f000 f874 	bl	8016ad8 <USBD_Get_USB_Status>
 80169f0:	4603      	mov	r3, r0
 80169f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80169f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80169f6:	4618      	mov	r0, r3
 80169f8:	3710      	adds	r7, #16
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bd80      	pop	{r7, pc}

080169fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80169fe:	b580      	push	{r7, lr}
 8016a00:	b086      	sub	sp, #24
 8016a02:	af00      	add	r7, sp, #0
 8016a04:	60f8      	str	r0, [r7, #12]
 8016a06:	607a      	str	r2, [r7, #4]
 8016a08:	603b      	str	r3, [r7, #0]
 8016a0a:	460b      	mov	r3, r1
 8016a0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a0e:	2300      	movs	r3, #0
 8016a10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a12:	2300      	movs	r3, #0
 8016a14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016a1c:	7af9      	ldrb	r1, [r7, #11]
 8016a1e:	683b      	ldr	r3, [r7, #0]
 8016a20:	687a      	ldr	r2, [r7, #4]
 8016a22:	f7f5 fa7e 	bl	800bf22 <HAL_PCD_EP_Transmit>
 8016a26:	4603      	mov	r3, r0
 8016a28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a2a:	7dfb      	ldrb	r3, [r7, #23]
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	f000 f853 	bl	8016ad8 <USBD_Get_USB_Status>
 8016a32:	4603      	mov	r3, r0
 8016a34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016a36:	7dbb      	ldrb	r3, [r7, #22]
}
 8016a38:	4618      	mov	r0, r3
 8016a3a:	3718      	adds	r7, #24
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}

08016a40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b086      	sub	sp, #24
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	60f8      	str	r0, [r7, #12]
 8016a48:	607a      	str	r2, [r7, #4]
 8016a4a:	603b      	str	r3, [r7, #0]
 8016a4c:	460b      	mov	r3, r1
 8016a4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a50:	2300      	movs	r3, #0
 8016a52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a54:	2300      	movs	r3, #0
 8016a56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016a5e:	7af9      	ldrb	r1, [r7, #11]
 8016a60:	683b      	ldr	r3, [r7, #0]
 8016a62:	687a      	ldr	r2, [r7, #4]
 8016a64:	f7f5 fa0a 	bl	800be7c <HAL_PCD_EP_Receive>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a6c:	7dfb      	ldrb	r3, [r7, #23]
 8016a6e:	4618      	mov	r0, r3
 8016a70:	f000 f832 	bl	8016ad8 <USBD_Get_USB_Status>
 8016a74:	4603      	mov	r3, r0
 8016a76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016a78:	7dbb      	ldrb	r3, [r7, #22]
}
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	3718      	adds	r7, #24
 8016a7e:	46bd      	mov	sp, r7
 8016a80:	bd80      	pop	{r7, pc}

08016a82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a82:	b580      	push	{r7, lr}
 8016a84:	b082      	sub	sp, #8
 8016a86:	af00      	add	r7, sp, #0
 8016a88:	6078      	str	r0, [r7, #4]
 8016a8a:	460b      	mov	r3, r1
 8016a8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016a94:	78fa      	ldrb	r2, [r7, #3]
 8016a96:	4611      	mov	r1, r2
 8016a98:	4618      	mov	r0, r3
 8016a9a:	f7f5 fa2a 	bl	800bef2 <HAL_PCD_EP_GetRxCount>
 8016a9e:	4603      	mov	r3, r0
}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	3708      	adds	r7, #8
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}

08016aa8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016aa8:	b480      	push	{r7}
 8016aaa:	b083      	sub	sp, #12
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016ab0:	4b03      	ldr	r3, [pc, #12]	; (8016ac0 <USBD_static_malloc+0x18>)
}
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	370c      	adds	r7, #12
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016abc:	4770      	bx	lr
 8016abe:	bf00      	nop
 8016ac0:	2000d940 	.word	0x2000d940

08016ac4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016ac4:	b480      	push	{r7}
 8016ac6:	b083      	sub	sp, #12
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]

}
 8016acc:	bf00      	nop
 8016ace:	370c      	adds	r7, #12
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad6:	4770      	bx	lr

08016ad8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016ad8:	b480      	push	{r7}
 8016ada:	b085      	sub	sp, #20
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	4603      	mov	r3, r0
 8016ae0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016ae6:	79fb      	ldrb	r3, [r7, #7]
 8016ae8:	2b03      	cmp	r3, #3
 8016aea:	d817      	bhi.n	8016b1c <USBD_Get_USB_Status+0x44>
 8016aec:	a201      	add	r2, pc, #4	; (adr r2, 8016af4 <USBD_Get_USB_Status+0x1c>)
 8016aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016af2:	bf00      	nop
 8016af4:	08016b05 	.word	0x08016b05
 8016af8:	08016b0b 	.word	0x08016b0b
 8016afc:	08016b11 	.word	0x08016b11
 8016b00:	08016b17 	.word	0x08016b17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016b04:	2300      	movs	r3, #0
 8016b06:	73fb      	strb	r3, [r7, #15]
    break;
 8016b08:	e00b      	b.n	8016b22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016b0a:	2303      	movs	r3, #3
 8016b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8016b0e:	e008      	b.n	8016b22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016b10:	2301      	movs	r3, #1
 8016b12:	73fb      	strb	r3, [r7, #15]
    break;
 8016b14:	e005      	b.n	8016b22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016b16:	2303      	movs	r3, #3
 8016b18:	73fb      	strb	r3, [r7, #15]
    break;
 8016b1a:	e002      	b.n	8016b22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016b1c:	2303      	movs	r3, #3
 8016b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8016b20:	bf00      	nop
  }
  return usb_status;
 8016b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b24:	4618      	mov	r0, r3
 8016b26:	3714      	adds	r7, #20
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2e:	4770      	bx	lr

08016b30 <__cvt>:
 8016b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016b34:	ec55 4b10 	vmov	r4, r5, d0
 8016b38:	2d00      	cmp	r5, #0
 8016b3a:	460e      	mov	r6, r1
 8016b3c:	4619      	mov	r1, r3
 8016b3e:	462b      	mov	r3, r5
 8016b40:	bfbb      	ittet	lt
 8016b42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016b46:	461d      	movlt	r5, r3
 8016b48:	2300      	movge	r3, #0
 8016b4a:	232d      	movlt	r3, #45	; 0x2d
 8016b4c:	700b      	strb	r3, [r1, #0]
 8016b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016b54:	4691      	mov	r9, r2
 8016b56:	f023 0820 	bic.w	r8, r3, #32
 8016b5a:	bfbc      	itt	lt
 8016b5c:	4622      	movlt	r2, r4
 8016b5e:	4614      	movlt	r4, r2
 8016b60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016b64:	d005      	beq.n	8016b72 <__cvt+0x42>
 8016b66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016b6a:	d100      	bne.n	8016b6e <__cvt+0x3e>
 8016b6c:	3601      	adds	r6, #1
 8016b6e:	2102      	movs	r1, #2
 8016b70:	e000      	b.n	8016b74 <__cvt+0x44>
 8016b72:	2103      	movs	r1, #3
 8016b74:	ab03      	add	r3, sp, #12
 8016b76:	9301      	str	r3, [sp, #4]
 8016b78:	ab02      	add	r3, sp, #8
 8016b7a:	9300      	str	r3, [sp, #0]
 8016b7c:	ec45 4b10 	vmov	d0, r4, r5
 8016b80:	4653      	mov	r3, sl
 8016b82:	4632      	mov	r2, r6
 8016b84:	f001 f84c 	bl	8017c20 <_dtoa_r>
 8016b88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016b8c:	4607      	mov	r7, r0
 8016b8e:	d102      	bne.n	8016b96 <__cvt+0x66>
 8016b90:	f019 0f01 	tst.w	r9, #1
 8016b94:	d022      	beq.n	8016bdc <__cvt+0xac>
 8016b96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016b9a:	eb07 0906 	add.w	r9, r7, r6
 8016b9e:	d110      	bne.n	8016bc2 <__cvt+0x92>
 8016ba0:	783b      	ldrb	r3, [r7, #0]
 8016ba2:	2b30      	cmp	r3, #48	; 0x30
 8016ba4:	d10a      	bne.n	8016bbc <__cvt+0x8c>
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	2300      	movs	r3, #0
 8016baa:	4620      	mov	r0, r4
 8016bac:	4629      	mov	r1, r5
 8016bae:	f7e9 ff9b 	bl	8000ae8 <__aeabi_dcmpeq>
 8016bb2:	b918      	cbnz	r0, 8016bbc <__cvt+0x8c>
 8016bb4:	f1c6 0601 	rsb	r6, r6, #1
 8016bb8:	f8ca 6000 	str.w	r6, [sl]
 8016bbc:	f8da 3000 	ldr.w	r3, [sl]
 8016bc0:	4499      	add	r9, r3
 8016bc2:	2200      	movs	r2, #0
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	4629      	mov	r1, r5
 8016bca:	f7e9 ff8d 	bl	8000ae8 <__aeabi_dcmpeq>
 8016bce:	b108      	cbz	r0, 8016bd4 <__cvt+0xa4>
 8016bd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8016bd4:	2230      	movs	r2, #48	; 0x30
 8016bd6:	9b03      	ldr	r3, [sp, #12]
 8016bd8:	454b      	cmp	r3, r9
 8016bda:	d307      	bcc.n	8016bec <__cvt+0xbc>
 8016bdc:	9b03      	ldr	r3, [sp, #12]
 8016bde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016be0:	1bdb      	subs	r3, r3, r7
 8016be2:	4638      	mov	r0, r7
 8016be4:	6013      	str	r3, [r2, #0]
 8016be6:	b004      	add	sp, #16
 8016be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bec:	1c59      	adds	r1, r3, #1
 8016bee:	9103      	str	r1, [sp, #12]
 8016bf0:	701a      	strb	r2, [r3, #0]
 8016bf2:	e7f0      	b.n	8016bd6 <__cvt+0xa6>

08016bf4 <__exponent>:
 8016bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	2900      	cmp	r1, #0
 8016bfa:	bfb8      	it	lt
 8016bfc:	4249      	neglt	r1, r1
 8016bfe:	f803 2b02 	strb.w	r2, [r3], #2
 8016c02:	bfb4      	ite	lt
 8016c04:	222d      	movlt	r2, #45	; 0x2d
 8016c06:	222b      	movge	r2, #43	; 0x2b
 8016c08:	2909      	cmp	r1, #9
 8016c0a:	7042      	strb	r2, [r0, #1]
 8016c0c:	dd2a      	ble.n	8016c64 <__exponent+0x70>
 8016c0e:	f10d 0207 	add.w	r2, sp, #7
 8016c12:	4617      	mov	r7, r2
 8016c14:	260a      	movs	r6, #10
 8016c16:	4694      	mov	ip, r2
 8016c18:	fb91 f5f6 	sdiv	r5, r1, r6
 8016c1c:	fb06 1415 	mls	r4, r6, r5, r1
 8016c20:	3430      	adds	r4, #48	; 0x30
 8016c22:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016c26:	460c      	mov	r4, r1
 8016c28:	2c63      	cmp	r4, #99	; 0x63
 8016c2a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8016c2e:	4629      	mov	r1, r5
 8016c30:	dcf1      	bgt.n	8016c16 <__exponent+0x22>
 8016c32:	3130      	adds	r1, #48	; 0x30
 8016c34:	f1ac 0402 	sub.w	r4, ip, #2
 8016c38:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016c3c:	1c41      	adds	r1, r0, #1
 8016c3e:	4622      	mov	r2, r4
 8016c40:	42ba      	cmp	r2, r7
 8016c42:	d30a      	bcc.n	8016c5a <__exponent+0x66>
 8016c44:	f10d 0209 	add.w	r2, sp, #9
 8016c48:	eba2 020c 	sub.w	r2, r2, ip
 8016c4c:	42bc      	cmp	r4, r7
 8016c4e:	bf88      	it	hi
 8016c50:	2200      	movhi	r2, #0
 8016c52:	4413      	add	r3, r2
 8016c54:	1a18      	subs	r0, r3, r0
 8016c56:	b003      	add	sp, #12
 8016c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c5a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016c5e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016c62:	e7ed      	b.n	8016c40 <__exponent+0x4c>
 8016c64:	2330      	movs	r3, #48	; 0x30
 8016c66:	3130      	adds	r1, #48	; 0x30
 8016c68:	7083      	strb	r3, [r0, #2]
 8016c6a:	70c1      	strb	r1, [r0, #3]
 8016c6c:	1d03      	adds	r3, r0, #4
 8016c6e:	e7f1      	b.n	8016c54 <__exponent+0x60>

08016c70 <_printf_float>:
 8016c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c74:	ed2d 8b02 	vpush	{d8}
 8016c78:	b08d      	sub	sp, #52	; 0x34
 8016c7a:	460c      	mov	r4, r1
 8016c7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016c80:	4616      	mov	r6, r2
 8016c82:	461f      	mov	r7, r3
 8016c84:	4605      	mov	r5, r0
 8016c86:	f000 fe67 	bl	8017958 <_localeconv_r>
 8016c8a:	f8d0 a000 	ldr.w	sl, [r0]
 8016c8e:	4650      	mov	r0, sl
 8016c90:	f7e9 fafe 	bl	8000290 <strlen>
 8016c94:	2300      	movs	r3, #0
 8016c96:	930a      	str	r3, [sp, #40]	; 0x28
 8016c98:	6823      	ldr	r3, [r4, #0]
 8016c9a:	9305      	str	r3, [sp, #20]
 8016c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8016ca0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016ca4:	3307      	adds	r3, #7
 8016ca6:	f023 0307 	bic.w	r3, r3, #7
 8016caa:	f103 0208 	add.w	r2, r3, #8
 8016cae:	f8c8 2000 	str.w	r2, [r8]
 8016cb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016cb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016cba:	9307      	str	r3, [sp, #28]
 8016cbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8016cc0:	ee08 0a10 	vmov	s16, r0
 8016cc4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8016cc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016ccc:	4b9e      	ldr	r3, [pc, #632]	; (8016f48 <_printf_float+0x2d8>)
 8016cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016cd2:	f7e9 ff3b 	bl	8000b4c <__aeabi_dcmpun>
 8016cd6:	bb88      	cbnz	r0, 8016d3c <_printf_float+0xcc>
 8016cd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016cdc:	4b9a      	ldr	r3, [pc, #616]	; (8016f48 <_printf_float+0x2d8>)
 8016cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016ce2:	f7e9 ff15 	bl	8000b10 <__aeabi_dcmple>
 8016ce6:	bb48      	cbnz	r0, 8016d3c <_printf_float+0xcc>
 8016ce8:	2200      	movs	r2, #0
 8016cea:	2300      	movs	r3, #0
 8016cec:	4640      	mov	r0, r8
 8016cee:	4649      	mov	r1, r9
 8016cf0:	f7e9 ff04 	bl	8000afc <__aeabi_dcmplt>
 8016cf4:	b110      	cbz	r0, 8016cfc <_printf_float+0x8c>
 8016cf6:	232d      	movs	r3, #45	; 0x2d
 8016cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016cfc:	4a93      	ldr	r2, [pc, #588]	; (8016f4c <_printf_float+0x2dc>)
 8016cfe:	4b94      	ldr	r3, [pc, #592]	; (8016f50 <_printf_float+0x2e0>)
 8016d00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016d04:	bf94      	ite	ls
 8016d06:	4690      	movls	r8, r2
 8016d08:	4698      	movhi	r8, r3
 8016d0a:	2303      	movs	r3, #3
 8016d0c:	6123      	str	r3, [r4, #16]
 8016d0e:	9b05      	ldr	r3, [sp, #20]
 8016d10:	f023 0304 	bic.w	r3, r3, #4
 8016d14:	6023      	str	r3, [r4, #0]
 8016d16:	f04f 0900 	mov.w	r9, #0
 8016d1a:	9700      	str	r7, [sp, #0]
 8016d1c:	4633      	mov	r3, r6
 8016d1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8016d20:	4621      	mov	r1, r4
 8016d22:	4628      	mov	r0, r5
 8016d24:	f000 f9da 	bl	80170dc <_printf_common>
 8016d28:	3001      	adds	r0, #1
 8016d2a:	f040 8090 	bne.w	8016e4e <_printf_float+0x1de>
 8016d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d32:	b00d      	add	sp, #52	; 0x34
 8016d34:	ecbd 8b02 	vpop	{d8}
 8016d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d3c:	4642      	mov	r2, r8
 8016d3e:	464b      	mov	r3, r9
 8016d40:	4640      	mov	r0, r8
 8016d42:	4649      	mov	r1, r9
 8016d44:	f7e9 ff02 	bl	8000b4c <__aeabi_dcmpun>
 8016d48:	b140      	cbz	r0, 8016d5c <_printf_float+0xec>
 8016d4a:	464b      	mov	r3, r9
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	bfbc      	itt	lt
 8016d50:	232d      	movlt	r3, #45	; 0x2d
 8016d52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016d56:	4a7f      	ldr	r2, [pc, #508]	; (8016f54 <_printf_float+0x2e4>)
 8016d58:	4b7f      	ldr	r3, [pc, #508]	; (8016f58 <_printf_float+0x2e8>)
 8016d5a:	e7d1      	b.n	8016d00 <_printf_float+0x90>
 8016d5c:	6863      	ldr	r3, [r4, #4]
 8016d5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016d62:	9206      	str	r2, [sp, #24]
 8016d64:	1c5a      	adds	r2, r3, #1
 8016d66:	d13f      	bne.n	8016de8 <_printf_float+0x178>
 8016d68:	2306      	movs	r3, #6
 8016d6a:	6063      	str	r3, [r4, #4]
 8016d6c:	9b05      	ldr	r3, [sp, #20]
 8016d6e:	6861      	ldr	r1, [r4, #4]
 8016d70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016d74:	2300      	movs	r3, #0
 8016d76:	9303      	str	r3, [sp, #12]
 8016d78:	ab0a      	add	r3, sp, #40	; 0x28
 8016d7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016d7e:	ab09      	add	r3, sp, #36	; 0x24
 8016d80:	ec49 8b10 	vmov	d0, r8, r9
 8016d84:	9300      	str	r3, [sp, #0]
 8016d86:	6022      	str	r2, [r4, #0]
 8016d88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016d8c:	4628      	mov	r0, r5
 8016d8e:	f7ff fecf 	bl	8016b30 <__cvt>
 8016d92:	9b06      	ldr	r3, [sp, #24]
 8016d94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016d96:	2b47      	cmp	r3, #71	; 0x47
 8016d98:	4680      	mov	r8, r0
 8016d9a:	d108      	bne.n	8016dae <_printf_float+0x13e>
 8016d9c:	1cc8      	adds	r0, r1, #3
 8016d9e:	db02      	blt.n	8016da6 <_printf_float+0x136>
 8016da0:	6863      	ldr	r3, [r4, #4]
 8016da2:	4299      	cmp	r1, r3
 8016da4:	dd41      	ble.n	8016e2a <_printf_float+0x1ba>
 8016da6:	f1ab 0302 	sub.w	r3, fp, #2
 8016daa:	fa5f fb83 	uxtb.w	fp, r3
 8016dae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016db2:	d820      	bhi.n	8016df6 <_printf_float+0x186>
 8016db4:	3901      	subs	r1, #1
 8016db6:	465a      	mov	r2, fp
 8016db8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016dbc:	9109      	str	r1, [sp, #36]	; 0x24
 8016dbe:	f7ff ff19 	bl	8016bf4 <__exponent>
 8016dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016dc4:	1813      	adds	r3, r2, r0
 8016dc6:	2a01      	cmp	r2, #1
 8016dc8:	4681      	mov	r9, r0
 8016dca:	6123      	str	r3, [r4, #16]
 8016dcc:	dc02      	bgt.n	8016dd4 <_printf_float+0x164>
 8016dce:	6822      	ldr	r2, [r4, #0]
 8016dd0:	07d2      	lsls	r2, r2, #31
 8016dd2:	d501      	bpl.n	8016dd8 <_printf_float+0x168>
 8016dd4:	3301      	adds	r3, #1
 8016dd6:	6123      	str	r3, [r4, #16]
 8016dd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d09c      	beq.n	8016d1a <_printf_float+0xaa>
 8016de0:	232d      	movs	r3, #45	; 0x2d
 8016de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016de6:	e798      	b.n	8016d1a <_printf_float+0xaa>
 8016de8:	9a06      	ldr	r2, [sp, #24]
 8016dea:	2a47      	cmp	r2, #71	; 0x47
 8016dec:	d1be      	bne.n	8016d6c <_printf_float+0xfc>
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d1bc      	bne.n	8016d6c <_printf_float+0xfc>
 8016df2:	2301      	movs	r3, #1
 8016df4:	e7b9      	b.n	8016d6a <_printf_float+0xfa>
 8016df6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016dfa:	d118      	bne.n	8016e2e <_printf_float+0x1be>
 8016dfc:	2900      	cmp	r1, #0
 8016dfe:	6863      	ldr	r3, [r4, #4]
 8016e00:	dd0b      	ble.n	8016e1a <_printf_float+0x1aa>
 8016e02:	6121      	str	r1, [r4, #16]
 8016e04:	b913      	cbnz	r3, 8016e0c <_printf_float+0x19c>
 8016e06:	6822      	ldr	r2, [r4, #0]
 8016e08:	07d0      	lsls	r0, r2, #31
 8016e0a:	d502      	bpl.n	8016e12 <_printf_float+0x1a2>
 8016e0c:	3301      	adds	r3, #1
 8016e0e:	440b      	add	r3, r1
 8016e10:	6123      	str	r3, [r4, #16]
 8016e12:	65a1      	str	r1, [r4, #88]	; 0x58
 8016e14:	f04f 0900 	mov.w	r9, #0
 8016e18:	e7de      	b.n	8016dd8 <_printf_float+0x168>
 8016e1a:	b913      	cbnz	r3, 8016e22 <_printf_float+0x1b2>
 8016e1c:	6822      	ldr	r2, [r4, #0]
 8016e1e:	07d2      	lsls	r2, r2, #31
 8016e20:	d501      	bpl.n	8016e26 <_printf_float+0x1b6>
 8016e22:	3302      	adds	r3, #2
 8016e24:	e7f4      	b.n	8016e10 <_printf_float+0x1a0>
 8016e26:	2301      	movs	r3, #1
 8016e28:	e7f2      	b.n	8016e10 <_printf_float+0x1a0>
 8016e2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e30:	4299      	cmp	r1, r3
 8016e32:	db05      	blt.n	8016e40 <_printf_float+0x1d0>
 8016e34:	6823      	ldr	r3, [r4, #0]
 8016e36:	6121      	str	r1, [r4, #16]
 8016e38:	07d8      	lsls	r0, r3, #31
 8016e3a:	d5ea      	bpl.n	8016e12 <_printf_float+0x1a2>
 8016e3c:	1c4b      	adds	r3, r1, #1
 8016e3e:	e7e7      	b.n	8016e10 <_printf_float+0x1a0>
 8016e40:	2900      	cmp	r1, #0
 8016e42:	bfd4      	ite	le
 8016e44:	f1c1 0202 	rsble	r2, r1, #2
 8016e48:	2201      	movgt	r2, #1
 8016e4a:	4413      	add	r3, r2
 8016e4c:	e7e0      	b.n	8016e10 <_printf_float+0x1a0>
 8016e4e:	6823      	ldr	r3, [r4, #0]
 8016e50:	055a      	lsls	r2, r3, #21
 8016e52:	d407      	bmi.n	8016e64 <_printf_float+0x1f4>
 8016e54:	6923      	ldr	r3, [r4, #16]
 8016e56:	4642      	mov	r2, r8
 8016e58:	4631      	mov	r1, r6
 8016e5a:	4628      	mov	r0, r5
 8016e5c:	47b8      	blx	r7
 8016e5e:	3001      	adds	r0, #1
 8016e60:	d12c      	bne.n	8016ebc <_printf_float+0x24c>
 8016e62:	e764      	b.n	8016d2e <_printf_float+0xbe>
 8016e64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016e68:	f240 80e0 	bls.w	801702c <_printf_float+0x3bc>
 8016e6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016e70:	2200      	movs	r2, #0
 8016e72:	2300      	movs	r3, #0
 8016e74:	f7e9 fe38 	bl	8000ae8 <__aeabi_dcmpeq>
 8016e78:	2800      	cmp	r0, #0
 8016e7a:	d034      	beq.n	8016ee6 <_printf_float+0x276>
 8016e7c:	4a37      	ldr	r2, [pc, #220]	; (8016f5c <_printf_float+0x2ec>)
 8016e7e:	2301      	movs	r3, #1
 8016e80:	4631      	mov	r1, r6
 8016e82:	4628      	mov	r0, r5
 8016e84:	47b8      	blx	r7
 8016e86:	3001      	adds	r0, #1
 8016e88:	f43f af51 	beq.w	8016d2e <_printf_float+0xbe>
 8016e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016e90:	429a      	cmp	r2, r3
 8016e92:	db02      	blt.n	8016e9a <_printf_float+0x22a>
 8016e94:	6823      	ldr	r3, [r4, #0]
 8016e96:	07d8      	lsls	r0, r3, #31
 8016e98:	d510      	bpl.n	8016ebc <_printf_float+0x24c>
 8016e9a:	ee18 3a10 	vmov	r3, s16
 8016e9e:	4652      	mov	r2, sl
 8016ea0:	4631      	mov	r1, r6
 8016ea2:	4628      	mov	r0, r5
 8016ea4:	47b8      	blx	r7
 8016ea6:	3001      	adds	r0, #1
 8016ea8:	f43f af41 	beq.w	8016d2e <_printf_float+0xbe>
 8016eac:	f04f 0800 	mov.w	r8, #0
 8016eb0:	f104 091a 	add.w	r9, r4, #26
 8016eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016eb6:	3b01      	subs	r3, #1
 8016eb8:	4543      	cmp	r3, r8
 8016eba:	dc09      	bgt.n	8016ed0 <_printf_float+0x260>
 8016ebc:	6823      	ldr	r3, [r4, #0]
 8016ebe:	079b      	lsls	r3, r3, #30
 8016ec0:	f100 8107 	bmi.w	80170d2 <_printf_float+0x462>
 8016ec4:	68e0      	ldr	r0, [r4, #12]
 8016ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ec8:	4298      	cmp	r0, r3
 8016eca:	bfb8      	it	lt
 8016ecc:	4618      	movlt	r0, r3
 8016ece:	e730      	b.n	8016d32 <_printf_float+0xc2>
 8016ed0:	2301      	movs	r3, #1
 8016ed2:	464a      	mov	r2, r9
 8016ed4:	4631      	mov	r1, r6
 8016ed6:	4628      	mov	r0, r5
 8016ed8:	47b8      	blx	r7
 8016eda:	3001      	adds	r0, #1
 8016edc:	f43f af27 	beq.w	8016d2e <_printf_float+0xbe>
 8016ee0:	f108 0801 	add.w	r8, r8, #1
 8016ee4:	e7e6      	b.n	8016eb4 <_printf_float+0x244>
 8016ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	dc39      	bgt.n	8016f60 <_printf_float+0x2f0>
 8016eec:	4a1b      	ldr	r2, [pc, #108]	; (8016f5c <_printf_float+0x2ec>)
 8016eee:	2301      	movs	r3, #1
 8016ef0:	4631      	mov	r1, r6
 8016ef2:	4628      	mov	r0, r5
 8016ef4:	47b8      	blx	r7
 8016ef6:	3001      	adds	r0, #1
 8016ef8:	f43f af19 	beq.w	8016d2e <_printf_float+0xbe>
 8016efc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016f00:	4313      	orrs	r3, r2
 8016f02:	d102      	bne.n	8016f0a <_printf_float+0x29a>
 8016f04:	6823      	ldr	r3, [r4, #0]
 8016f06:	07d9      	lsls	r1, r3, #31
 8016f08:	d5d8      	bpl.n	8016ebc <_printf_float+0x24c>
 8016f0a:	ee18 3a10 	vmov	r3, s16
 8016f0e:	4652      	mov	r2, sl
 8016f10:	4631      	mov	r1, r6
 8016f12:	4628      	mov	r0, r5
 8016f14:	47b8      	blx	r7
 8016f16:	3001      	adds	r0, #1
 8016f18:	f43f af09 	beq.w	8016d2e <_printf_float+0xbe>
 8016f1c:	f04f 0900 	mov.w	r9, #0
 8016f20:	f104 0a1a 	add.w	sl, r4, #26
 8016f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f26:	425b      	negs	r3, r3
 8016f28:	454b      	cmp	r3, r9
 8016f2a:	dc01      	bgt.n	8016f30 <_printf_float+0x2c0>
 8016f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f2e:	e792      	b.n	8016e56 <_printf_float+0x1e6>
 8016f30:	2301      	movs	r3, #1
 8016f32:	4652      	mov	r2, sl
 8016f34:	4631      	mov	r1, r6
 8016f36:	4628      	mov	r0, r5
 8016f38:	47b8      	blx	r7
 8016f3a:	3001      	adds	r0, #1
 8016f3c:	f43f aef7 	beq.w	8016d2e <_printf_float+0xbe>
 8016f40:	f109 0901 	add.w	r9, r9, #1
 8016f44:	e7ee      	b.n	8016f24 <_printf_float+0x2b4>
 8016f46:	bf00      	nop
 8016f48:	7fefffff 	.word	0x7fefffff
 8016f4c:	0801c475 	.word	0x0801c475
 8016f50:	0801c479 	.word	0x0801c479
 8016f54:	0801c47d 	.word	0x0801c47d
 8016f58:	0801c481 	.word	0x0801c481
 8016f5c:	0801c485 	.word	0x0801c485
 8016f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016f64:	429a      	cmp	r2, r3
 8016f66:	bfa8      	it	ge
 8016f68:	461a      	movge	r2, r3
 8016f6a:	2a00      	cmp	r2, #0
 8016f6c:	4691      	mov	r9, r2
 8016f6e:	dc37      	bgt.n	8016fe0 <_printf_float+0x370>
 8016f70:	f04f 0b00 	mov.w	fp, #0
 8016f74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016f78:	f104 021a 	add.w	r2, r4, #26
 8016f7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016f7e:	9305      	str	r3, [sp, #20]
 8016f80:	eba3 0309 	sub.w	r3, r3, r9
 8016f84:	455b      	cmp	r3, fp
 8016f86:	dc33      	bgt.n	8016ff0 <_printf_float+0x380>
 8016f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016f8c:	429a      	cmp	r2, r3
 8016f8e:	db3b      	blt.n	8017008 <_printf_float+0x398>
 8016f90:	6823      	ldr	r3, [r4, #0]
 8016f92:	07da      	lsls	r2, r3, #31
 8016f94:	d438      	bmi.n	8017008 <_printf_float+0x398>
 8016f96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016f9a:	eba2 0903 	sub.w	r9, r2, r3
 8016f9e:	9b05      	ldr	r3, [sp, #20]
 8016fa0:	1ad2      	subs	r2, r2, r3
 8016fa2:	4591      	cmp	r9, r2
 8016fa4:	bfa8      	it	ge
 8016fa6:	4691      	movge	r9, r2
 8016fa8:	f1b9 0f00 	cmp.w	r9, #0
 8016fac:	dc35      	bgt.n	801701a <_printf_float+0x3aa>
 8016fae:	f04f 0800 	mov.w	r8, #0
 8016fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016fb6:	f104 0a1a 	add.w	sl, r4, #26
 8016fba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016fbe:	1a9b      	subs	r3, r3, r2
 8016fc0:	eba3 0309 	sub.w	r3, r3, r9
 8016fc4:	4543      	cmp	r3, r8
 8016fc6:	f77f af79 	ble.w	8016ebc <_printf_float+0x24c>
 8016fca:	2301      	movs	r3, #1
 8016fcc:	4652      	mov	r2, sl
 8016fce:	4631      	mov	r1, r6
 8016fd0:	4628      	mov	r0, r5
 8016fd2:	47b8      	blx	r7
 8016fd4:	3001      	adds	r0, #1
 8016fd6:	f43f aeaa 	beq.w	8016d2e <_printf_float+0xbe>
 8016fda:	f108 0801 	add.w	r8, r8, #1
 8016fde:	e7ec      	b.n	8016fba <_printf_float+0x34a>
 8016fe0:	4613      	mov	r3, r2
 8016fe2:	4631      	mov	r1, r6
 8016fe4:	4642      	mov	r2, r8
 8016fe6:	4628      	mov	r0, r5
 8016fe8:	47b8      	blx	r7
 8016fea:	3001      	adds	r0, #1
 8016fec:	d1c0      	bne.n	8016f70 <_printf_float+0x300>
 8016fee:	e69e      	b.n	8016d2e <_printf_float+0xbe>
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	4631      	mov	r1, r6
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	9205      	str	r2, [sp, #20]
 8016ff8:	47b8      	blx	r7
 8016ffa:	3001      	adds	r0, #1
 8016ffc:	f43f ae97 	beq.w	8016d2e <_printf_float+0xbe>
 8017000:	9a05      	ldr	r2, [sp, #20]
 8017002:	f10b 0b01 	add.w	fp, fp, #1
 8017006:	e7b9      	b.n	8016f7c <_printf_float+0x30c>
 8017008:	ee18 3a10 	vmov	r3, s16
 801700c:	4652      	mov	r2, sl
 801700e:	4631      	mov	r1, r6
 8017010:	4628      	mov	r0, r5
 8017012:	47b8      	blx	r7
 8017014:	3001      	adds	r0, #1
 8017016:	d1be      	bne.n	8016f96 <_printf_float+0x326>
 8017018:	e689      	b.n	8016d2e <_printf_float+0xbe>
 801701a:	9a05      	ldr	r2, [sp, #20]
 801701c:	464b      	mov	r3, r9
 801701e:	4442      	add	r2, r8
 8017020:	4631      	mov	r1, r6
 8017022:	4628      	mov	r0, r5
 8017024:	47b8      	blx	r7
 8017026:	3001      	adds	r0, #1
 8017028:	d1c1      	bne.n	8016fae <_printf_float+0x33e>
 801702a:	e680      	b.n	8016d2e <_printf_float+0xbe>
 801702c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801702e:	2a01      	cmp	r2, #1
 8017030:	dc01      	bgt.n	8017036 <_printf_float+0x3c6>
 8017032:	07db      	lsls	r3, r3, #31
 8017034:	d53a      	bpl.n	80170ac <_printf_float+0x43c>
 8017036:	2301      	movs	r3, #1
 8017038:	4642      	mov	r2, r8
 801703a:	4631      	mov	r1, r6
 801703c:	4628      	mov	r0, r5
 801703e:	47b8      	blx	r7
 8017040:	3001      	adds	r0, #1
 8017042:	f43f ae74 	beq.w	8016d2e <_printf_float+0xbe>
 8017046:	ee18 3a10 	vmov	r3, s16
 801704a:	4652      	mov	r2, sl
 801704c:	4631      	mov	r1, r6
 801704e:	4628      	mov	r0, r5
 8017050:	47b8      	blx	r7
 8017052:	3001      	adds	r0, #1
 8017054:	f43f ae6b 	beq.w	8016d2e <_printf_float+0xbe>
 8017058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801705c:	2200      	movs	r2, #0
 801705e:	2300      	movs	r3, #0
 8017060:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8017064:	f7e9 fd40 	bl	8000ae8 <__aeabi_dcmpeq>
 8017068:	b9d8      	cbnz	r0, 80170a2 <_printf_float+0x432>
 801706a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801706e:	f108 0201 	add.w	r2, r8, #1
 8017072:	4631      	mov	r1, r6
 8017074:	4628      	mov	r0, r5
 8017076:	47b8      	blx	r7
 8017078:	3001      	adds	r0, #1
 801707a:	d10e      	bne.n	801709a <_printf_float+0x42a>
 801707c:	e657      	b.n	8016d2e <_printf_float+0xbe>
 801707e:	2301      	movs	r3, #1
 8017080:	4652      	mov	r2, sl
 8017082:	4631      	mov	r1, r6
 8017084:	4628      	mov	r0, r5
 8017086:	47b8      	blx	r7
 8017088:	3001      	adds	r0, #1
 801708a:	f43f ae50 	beq.w	8016d2e <_printf_float+0xbe>
 801708e:	f108 0801 	add.w	r8, r8, #1
 8017092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017094:	3b01      	subs	r3, #1
 8017096:	4543      	cmp	r3, r8
 8017098:	dcf1      	bgt.n	801707e <_printf_float+0x40e>
 801709a:	464b      	mov	r3, r9
 801709c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80170a0:	e6da      	b.n	8016e58 <_printf_float+0x1e8>
 80170a2:	f04f 0800 	mov.w	r8, #0
 80170a6:	f104 0a1a 	add.w	sl, r4, #26
 80170aa:	e7f2      	b.n	8017092 <_printf_float+0x422>
 80170ac:	2301      	movs	r3, #1
 80170ae:	4642      	mov	r2, r8
 80170b0:	e7df      	b.n	8017072 <_printf_float+0x402>
 80170b2:	2301      	movs	r3, #1
 80170b4:	464a      	mov	r2, r9
 80170b6:	4631      	mov	r1, r6
 80170b8:	4628      	mov	r0, r5
 80170ba:	47b8      	blx	r7
 80170bc:	3001      	adds	r0, #1
 80170be:	f43f ae36 	beq.w	8016d2e <_printf_float+0xbe>
 80170c2:	f108 0801 	add.w	r8, r8, #1
 80170c6:	68e3      	ldr	r3, [r4, #12]
 80170c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80170ca:	1a5b      	subs	r3, r3, r1
 80170cc:	4543      	cmp	r3, r8
 80170ce:	dcf0      	bgt.n	80170b2 <_printf_float+0x442>
 80170d0:	e6f8      	b.n	8016ec4 <_printf_float+0x254>
 80170d2:	f04f 0800 	mov.w	r8, #0
 80170d6:	f104 0919 	add.w	r9, r4, #25
 80170da:	e7f4      	b.n	80170c6 <_printf_float+0x456>

080170dc <_printf_common>:
 80170dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170e0:	4616      	mov	r6, r2
 80170e2:	4699      	mov	r9, r3
 80170e4:	688a      	ldr	r2, [r1, #8]
 80170e6:	690b      	ldr	r3, [r1, #16]
 80170e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80170ec:	4293      	cmp	r3, r2
 80170ee:	bfb8      	it	lt
 80170f0:	4613      	movlt	r3, r2
 80170f2:	6033      	str	r3, [r6, #0]
 80170f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80170f8:	4607      	mov	r7, r0
 80170fa:	460c      	mov	r4, r1
 80170fc:	b10a      	cbz	r2, 8017102 <_printf_common+0x26>
 80170fe:	3301      	adds	r3, #1
 8017100:	6033      	str	r3, [r6, #0]
 8017102:	6823      	ldr	r3, [r4, #0]
 8017104:	0699      	lsls	r1, r3, #26
 8017106:	bf42      	ittt	mi
 8017108:	6833      	ldrmi	r3, [r6, #0]
 801710a:	3302      	addmi	r3, #2
 801710c:	6033      	strmi	r3, [r6, #0]
 801710e:	6825      	ldr	r5, [r4, #0]
 8017110:	f015 0506 	ands.w	r5, r5, #6
 8017114:	d106      	bne.n	8017124 <_printf_common+0x48>
 8017116:	f104 0a19 	add.w	sl, r4, #25
 801711a:	68e3      	ldr	r3, [r4, #12]
 801711c:	6832      	ldr	r2, [r6, #0]
 801711e:	1a9b      	subs	r3, r3, r2
 8017120:	42ab      	cmp	r3, r5
 8017122:	dc26      	bgt.n	8017172 <_printf_common+0x96>
 8017124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017128:	1e13      	subs	r3, r2, #0
 801712a:	6822      	ldr	r2, [r4, #0]
 801712c:	bf18      	it	ne
 801712e:	2301      	movne	r3, #1
 8017130:	0692      	lsls	r2, r2, #26
 8017132:	d42b      	bmi.n	801718c <_printf_common+0xb0>
 8017134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017138:	4649      	mov	r1, r9
 801713a:	4638      	mov	r0, r7
 801713c:	47c0      	blx	r8
 801713e:	3001      	adds	r0, #1
 8017140:	d01e      	beq.n	8017180 <_printf_common+0xa4>
 8017142:	6823      	ldr	r3, [r4, #0]
 8017144:	6922      	ldr	r2, [r4, #16]
 8017146:	f003 0306 	and.w	r3, r3, #6
 801714a:	2b04      	cmp	r3, #4
 801714c:	bf02      	ittt	eq
 801714e:	68e5      	ldreq	r5, [r4, #12]
 8017150:	6833      	ldreq	r3, [r6, #0]
 8017152:	1aed      	subeq	r5, r5, r3
 8017154:	68a3      	ldr	r3, [r4, #8]
 8017156:	bf0c      	ite	eq
 8017158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801715c:	2500      	movne	r5, #0
 801715e:	4293      	cmp	r3, r2
 8017160:	bfc4      	itt	gt
 8017162:	1a9b      	subgt	r3, r3, r2
 8017164:	18ed      	addgt	r5, r5, r3
 8017166:	2600      	movs	r6, #0
 8017168:	341a      	adds	r4, #26
 801716a:	42b5      	cmp	r5, r6
 801716c:	d11a      	bne.n	80171a4 <_printf_common+0xc8>
 801716e:	2000      	movs	r0, #0
 8017170:	e008      	b.n	8017184 <_printf_common+0xa8>
 8017172:	2301      	movs	r3, #1
 8017174:	4652      	mov	r2, sl
 8017176:	4649      	mov	r1, r9
 8017178:	4638      	mov	r0, r7
 801717a:	47c0      	blx	r8
 801717c:	3001      	adds	r0, #1
 801717e:	d103      	bne.n	8017188 <_printf_common+0xac>
 8017180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017188:	3501      	adds	r5, #1
 801718a:	e7c6      	b.n	801711a <_printf_common+0x3e>
 801718c:	18e1      	adds	r1, r4, r3
 801718e:	1c5a      	adds	r2, r3, #1
 8017190:	2030      	movs	r0, #48	; 0x30
 8017192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017196:	4422      	add	r2, r4
 8017198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801719c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80171a0:	3302      	adds	r3, #2
 80171a2:	e7c7      	b.n	8017134 <_printf_common+0x58>
 80171a4:	2301      	movs	r3, #1
 80171a6:	4622      	mov	r2, r4
 80171a8:	4649      	mov	r1, r9
 80171aa:	4638      	mov	r0, r7
 80171ac:	47c0      	blx	r8
 80171ae:	3001      	adds	r0, #1
 80171b0:	d0e6      	beq.n	8017180 <_printf_common+0xa4>
 80171b2:	3601      	adds	r6, #1
 80171b4:	e7d9      	b.n	801716a <_printf_common+0x8e>
	...

080171b8 <_printf_i>:
 80171b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80171bc:	7e0f      	ldrb	r7, [r1, #24]
 80171be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80171c0:	2f78      	cmp	r7, #120	; 0x78
 80171c2:	4691      	mov	r9, r2
 80171c4:	4680      	mov	r8, r0
 80171c6:	460c      	mov	r4, r1
 80171c8:	469a      	mov	sl, r3
 80171ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80171ce:	d807      	bhi.n	80171e0 <_printf_i+0x28>
 80171d0:	2f62      	cmp	r7, #98	; 0x62
 80171d2:	d80a      	bhi.n	80171ea <_printf_i+0x32>
 80171d4:	2f00      	cmp	r7, #0
 80171d6:	f000 80d4 	beq.w	8017382 <_printf_i+0x1ca>
 80171da:	2f58      	cmp	r7, #88	; 0x58
 80171dc:	f000 80c0 	beq.w	8017360 <_printf_i+0x1a8>
 80171e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80171e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80171e8:	e03a      	b.n	8017260 <_printf_i+0xa8>
 80171ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80171ee:	2b15      	cmp	r3, #21
 80171f0:	d8f6      	bhi.n	80171e0 <_printf_i+0x28>
 80171f2:	a101      	add	r1, pc, #4	; (adr r1, 80171f8 <_printf_i+0x40>)
 80171f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80171f8:	08017251 	.word	0x08017251
 80171fc:	08017265 	.word	0x08017265
 8017200:	080171e1 	.word	0x080171e1
 8017204:	080171e1 	.word	0x080171e1
 8017208:	080171e1 	.word	0x080171e1
 801720c:	080171e1 	.word	0x080171e1
 8017210:	08017265 	.word	0x08017265
 8017214:	080171e1 	.word	0x080171e1
 8017218:	080171e1 	.word	0x080171e1
 801721c:	080171e1 	.word	0x080171e1
 8017220:	080171e1 	.word	0x080171e1
 8017224:	08017369 	.word	0x08017369
 8017228:	08017291 	.word	0x08017291
 801722c:	08017323 	.word	0x08017323
 8017230:	080171e1 	.word	0x080171e1
 8017234:	080171e1 	.word	0x080171e1
 8017238:	0801738b 	.word	0x0801738b
 801723c:	080171e1 	.word	0x080171e1
 8017240:	08017291 	.word	0x08017291
 8017244:	080171e1 	.word	0x080171e1
 8017248:	080171e1 	.word	0x080171e1
 801724c:	0801732b 	.word	0x0801732b
 8017250:	682b      	ldr	r3, [r5, #0]
 8017252:	1d1a      	adds	r2, r3, #4
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	602a      	str	r2, [r5, #0]
 8017258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801725c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017260:	2301      	movs	r3, #1
 8017262:	e09f      	b.n	80173a4 <_printf_i+0x1ec>
 8017264:	6820      	ldr	r0, [r4, #0]
 8017266:	682b      	ldr	r3, [r5, #0]
 8017268:	0607      	lsls	r7, r0, #24
 801726a:	f103 0104 	add.w	r1, r3, #4
 801726e:	6029      	str	r1, [r5, #0]
 8017270:	d501      	bpl.n	8017276 <_printf_i+0xbe>
 8017272:	681e      	ldr	r6, [r3, #0]
 8017274:	e003      	b.n	801727e <_printf_i+0xc6>
 8017276:	0646      	lsls	r6, r0, #25
 8017278:	d5fb      	bpl.n	8017272 <_printf_i+0xba>
 801727a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801727e:	2e00      	cmp	r6, #0
 8017280:	da03      	bge.n	801728a <_printf_i+0xd2>
 8017282:	232d      	movs	r3, #45	; 0x2d
 8017284:	4276      	negs	r6, r6
 8017286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801728a:	485a      	ldr	r0, [pc, #360]	; (80173f4 <_printf_i+0x23c>)
 801728c:	230a      	movs	r3, #10
 801728e:	e012      	b.n	80172b6 <_printf_i+0xfe>
 8017290:	682b      	ldr	r3, [r5, #0]
 8017292:	6820      	ldr	r0, [r4, #0]
 8017294:	1d19      	adds	r1, r3, #4
 8017296:	6029      	str	r1, [r5, #0]
 8017298:	0605      	lsls	r5, r0, #24
 801729a:	d501      	bpl.n	80172a0 <_printf_i+0xe8>
 801729c:	681e      	ldr	r6, [r3, #0]
 801729e:	e002      	b.n	80172a6 <_printf_i+0xee>
 80172a0:	0641      	lsls	r1, r0, #25
 80172a2:	d5fb      	bpl.n	801729c <_printf_i+0xe4>
 80172a4:	881e      	ldrh	r6, [r3, #0]
 80172a6:	4853      	ldr	r0, [pc, #332]	; (80173f4 <_printf_i+0x23c>)
 80172a8:	2f6f      	cmp	r7, #111	; 0x6f
 80172aa:	bf0c      	ite	eq
 80172ac:	2308      	moveq	r3, #8
 80172ae:	230a      	movne	r3, #10
 80172b0:	2100      	movs	r1, #0
 80172b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80172b6:	6865      	ldr	r5, [r4, #4]
 80172b8:	60a5      	str	r5, [r4, #8]
 80172ba:	2d00      	cmp	r5, #0
 80172bc:	bfa2      	ittt	ge
 80172be:	6821      	ldrge	r1, [r4, #0]
 80172c0:	f021 0104 	bicge.w	r1, r1, #4
 80172c4:	6021      	strge	r1, [r4, #0]
 80172c6:	b90e      	cbnz	r6, 80172cc <_printf_i+0x114>
 80172c8:	2d00      	cmp	r5, #0
 80172ca:	d04b      	beq.n	8017364 <_printf_i+0x1ac>
 80172cc:	4615      	mov	r5, r2
 80172ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80172d2:	fb03 6711 	mls	r7, r3, r1, r6
 80172d6:	5dc7      	ldrb	r7, [r0, r7]
 80172d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80172dc:	4637      	mov	r7, r6
 80172de:	42bb      	cmp	r3, r7
 80172e0:	460e      	mov	r6, r1
 80172e2:	d9f4      	bls.n	80172ce <_printf_i+0x116>
 80172e4:	2b08      	cmp	r3, #8
 80172e6:	d10b      	bne.n	8017300 <_printf_i+0x148>
 80172e8:	6823      	ldr	r3, [r4, #0]
 80172ea:	07de      	lsls	r6, r3, #31
 80172ec:	d508      	bpl.n	8017300 <_printf_i+0x148>
 80172ee:	6923      	ldr	r3, [r4, #16]
 80172f0:	6861      	ldr	r1, [r4, #4]
 80172f2:	4299      	cmp	r1, r3
 80172f4:	bfde      	ittt	le
 80172f6:	2330      	movle	r3, #48	; 0x30
 80172f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80172fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017300:	1b52      	subs	r2, r2, r5
 8017302:	6122      	str	r2, [r4, #16]
 8017304:	f8cd a000 	str.w	sl, [sp]
 8017308:	464b      	mov	r3, r9
 801730a:	aa03      	add	r2, sp, #12
 801730c:	4621      	mov	r1, r4
 801730e:	4640      	mov	r0, r8
 8017310:	f7ff fee4 	bl	80170dc <_printf_common>
 8017314:	3001      	adds	r0, #1
 8017316:	d14a      	bne.n	80173ae <_printf_i+0x1f6>
 8017318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801731c:	b004      	add	sp, #16
 801731e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017322:	6823      	ldr	r3, [r4, #0]
 8017324:	f043 0320 	orr.w	r3, r3, #32
 8017328:	6023      	str	r3, [r4, #0]
 801732a:	4833      	ldr	r0, [pc, #204]	; (80173f8 <_printf_i+0x240>)
 801732c:	2778      	movs	r7, #120	; 0x78
 801732e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017332:	6823      	ldr	r3, [r4, #0]
 8017334:	6829      	ldr	r1, [r5, #0]
 8017336:	061f      	lsls	r7, r3, #24
 8017338:	f851 6b04 	ldr.w	r6, [r1], #4
 801733c:	d402      	bmi.n	8017344 <_printf_i+0x18c>
 801733e:	065f      	lsls	r7, r3, #25
 8017340:	bf48      	it	mi
 8017342:	b2b6      	uxthmi	r6, r6
 8017344:	07df      	lsls	r7, r3, #31
 8017346:	bf48      	it	mi
 8017348:	f043 0320 	orrmi.w	r3, r3, #32
 801734c:	6029      	str	r1, [r5, #0]
 801734e:	bf48      	it	mi
 8017350:	6023      	strmi	r3, [r4, #0]
 8017352:	b91e      	cbnz	r6, 801735c <_printf_i+0x1a4>
 8017354:	6823      	ldr	r3, [r4, #0]
 8017356:	f023 0320 	bic.w	r3, r3, #32
 801735a:	6023      	str	r3, [r4, #0]
 801735c:	2310      	movs	r3, #16
 801735e:	e7a7      	b.n	80172b0 <_printf_i+0xf8>
 8017360:	4824      	ldr	r0, [pc, #144]	; (80173f4 <_printf_i+0x23c>)
 8017362:	e7e4      	b.n	801732e <_printf_i+0x176>
 8017364:	4615      	mov	r5, r2
 8017366:	e7bd      	b.n	80172e4 <_printf_i+0x12c>
 8017368:	682b      	ldr	r3, [r5, #0]
 801736a:	6826      	ldr	r6, [r4, #0]
 801736c:	6961      	ldr	r1, [r4, #20]
 801736e:	1d18      	adds	r0, r3, #4
 8017370:	6028      	str	r0, [r5, #0]
 8017372:	0635      	lsls	r5, r6, #24
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	d501      	bpl.n	801737c <_printf_i+0x1c4>
 8017378:	6019      	str	r1, [r3, #0]
 801737a:	e002      	b.n	8017382 <_printf_i+0x1ca>
 801737c:	0670      	lsls	r0, r6, #25
 801737e:	d5fb      	bpl.n	8017378 <_printf_i+0x1c0>
 8017380:	8019      	strh	r1, [r3, #0]
 8017382:	2300      	movs	r3, #0
 8017384:	6123      	str	r3, [r4, #16]
 8017386:	4615      	mov	r5, r2
 8017388:	e7bc      	b.n	8017304 <_printf_i+0x14c>
 801738a:	682b      	ldr	r3, [r5, #0]
 801738c:	1d1a      	adds	r2, r3, #4
 801738e:	602a      	str	r2, [r5, #0]
 8017390:	681d      	ldr	r5, [r3, #0]
 8017392:	6862      	ldr	r2, [r4, #4]
 8017394:	2100      	movs	r1, #0
 8017396:	4628      	mov	r0, r5
 8017398:	f7e8 ff2a 	bl	80001f0 <memchr>
 801739c:	b108      	cbz	r0, 80173a2 <_printf_i+0x1ea>
 801739e:	1b40      	subs	r0, r0, r5
 80173a0:	6060      	str	r0, [r4, #4]
 80173a2:	6863      	ldr	r3, [r4, #4]
 80173a4:	6123      	str	r3, [r4, #16]
 80173a6:	2300      	movs	r3, #0
 80173a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80173ac:	e7aa      	b.n	8017304 <_printf_i+0x14c>
 80173ae:	6923      	ldr	r3, [r4, #16]
 80173b0:	462a      	mov	r2, r5
 80173b2:	4649      	mov	r1, r9
 80173b4:	4640      	mov	r0, r8
 80173b6:	47d0      	blx	sl
 80173b8:	3001      	adds	r0, #1
 80173ba:	d0ad      	beq.n	8017318 <_printf_i+0x160>
 80173bc:	6823      	ldr	r3, [r4, #0]
 80173be:	079b      	lsls	r3, r3, #30
 80173c0:	d413      	bmi.n	80173ea <_printf_i+0x232>
 80173c2:	68e0      	ldr	r0, [r4, #12]
 80173c4:	9b03      	ldr	r3, [sp, #12]
 80173c6:	4298      	cmp	r0, r3
 80173c8:	bfb8      	it	lt
 80173ca:	4618      	movlt	r0, r3
 80173cc:	e7a6      	b.n	801731c <_printf_i+0x164>
 80173ce:	2301      	movs	r3, #1
 80173d0:	4632      	mov	r2, r6
 80173d2:	4649      	mov	r1, r9
 80173d4:	4640      	mov	r0, r8
 80173d6:	47d0      	blx	sl
 80173d8:	3001      	adds	r0, #1
 80173da:	d09d      	beq.n	8017318 <_printf_i+0x160>
 80173dc:	3501      	adds	r5, #1
 80173de:	68e3      	ldr	r3, [r4, #12]
 80173e0:	9903      	ldr	r1, [sp, #12]
 80173e2:	1a5b      	subs	r3, r3, r1
 80173e4:	42ab      	cmp	r3, r5
 80173e6:	dcf2      	bgt.n	80173ce <_printf_i+0x216>
 80173e8:	e7eb      	b.n	80173c2 <_printf_i+0x20a>
 80173ea:	2500      	movs	r5, #0
 80173ec:	f104 0619 	add.w	r6, r4, #25
 80173f0:	e7f5      	b.n	80173de <_printf_i+0x226>
 80173f2:	bf00      	nop
 80173f4:	0801c487 	.word	0x0801c487
 80173f8:	0801c498 	.word	0x0801c498

080173fc <__sflush_r>:
 80173fc:	898a      	ldrh	r2, [r1, #12]
 80173fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017402:	4605      	mov	r5, r0
 8017404:	0710      	lsls	r0, r2, #28
 8017406:	460c      	mov	r4, r1
 8017408:	d458      	bmi.n	80174bc <__sflush_r+0xc0>
 801740a:	684b      	ldr	r3, [r1, #4]
 801740c:	2b00      	cmp	r3, #0
 801740e:	dc05      	bgt.n	801741c <__sflush_r+0x20>
 8017410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017412:	2b00      	cmp	r3, #0
 8017414:	dc02      	bgt.n	801741c <__sflush_r+0x20>
 8017416:	2000      	movs	r0, #0
 8017418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801741c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801741e:	2e00      	cmp	r6, #0
 8017420:	d0f9      	beq.n	8017416 <__sflush_r+0x1a>
 8017422:	2300      	movs	r3, #0
 8017424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017428:	682f      	ldr	r7, [r5, #0]
 801742a:	6a21      	ldr	r1, [r4, #32]
 801742c:	602b      	str	r3, [r5, #0]
 801742e:	d032      	beq.n	8017496 <__sflush_r+0x9a>
 8017430:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017432:	89a3      	ldrh	r3, [r4, #12]
 8017434:	075a      	lsls	r2, r3, #29
 8017436:	d505      	bpl.n	8017444 <__sflush_r+0x48>
 8017438:	6863      	ldr	r3, [r4, #4]
 801743a:	1ac0      	subs	r0, r0, r3
 801743c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801743e:	b10b      	cbz	r3, 8017444 <__sflush_r+0x48>
 8017440:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017442:	1ac0      	subs	r0, r0, r3
 8017444:	2300      	movs	r3, #0
 8017446:	4602      	mov	r2, r0
 8017448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801744a:	6a21      	ldr	r1, [r4, #32]
 801744c:	4628      	mov	r0, r5
 801744e:	47b0      	blx	r6
 8017450:	1c43      	adds	r3, r0, #1
 8017452:	89a3      	ldrh	r3, [r4, #12]
 8017454:	d106      	bne.n	8017464 <__sflush_r+0x68>
 8017456:	6829      	ldr	r1, [r5, #0]
 8017458:	291d      	cmp	r1, #29
 801745a:	d82b      	bhi.n	80174b4 <__sflush_r+0xb8>
 801745c:	4a29      	ldr	r2, [pc, #164]	; (8017504 <__sflush_r+0x108>)
 801745e:	410a      	asrs	r2, r1
 8017460:	07d6      	lsls	r6, r2, #31
 8017462:	d427      	bmi.n	80174b4 <__sflush_r+0xb8>
 8017464:	2200      	movs	r2, #0
 8017466:	6062      	str	r2, [r4, #4]
 8017468:	04d9      	lsls	r1, r3, #19
 801746a:	6922      	ldr	r2, [r4, #16]
 801746c:	6022      	str	r2, [r4, #0]
 801746e:	d504      	bpl.n	801747a <__sflush_r+0x7e>
 8017470:	1c42      	adds	r2, r0, #1
 8017472:	d101      	bne.n	8017478 <__sflush_r+0x7c>
 8017474:	682b      	ldr	r3, [r5, #0]
 8017476:	b903      	cbnz	r3, 801747a <__sflush_r+0x7e>
 8017478:	6560      	str	r0, [r4, #84]	; 0x54
 801747a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801747c:	602f      	str	r7, [r5, #0]
 801747e:	2900      	cmp	r1, #0
 8017480:	d0c9      	beq.n	8017416 <__sflush_r+0x1a>
 8017482:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017486:	4299      	cmp	r1, r3
 8017488:	d002      	beq.n	8017490 <__sflush_r+0x94>
 801748a:	4628      	mov	r0, r5
 801748c:	f001 f9ba 	bl	8018804 <_free_r>
 8017490:	2000      	movs	r0, #0
 8017492:	6360      	str	r0, [r4, #52]	; 0x34
 8017494:	e7c0      	b.n	8017418 <__sflush_r+0x1c>
 8017496:	2301      	movs	r3, #1
 8017498:	4628      	mov	r0, r5
 801749a:	47b0      	blx	r6
 801749c:	1c41      	adds	r1, r0, #1
 801749e:	d1c8      	bne.n	8017432 <__sflush_r+0x36>
 80174a0:	682b      	ldr	r3, [r5, #0]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d0c5      	beq.n	8017432 <__sflush_r+0x36>
 80174a6:	2b1d      	cmp	r3, #29
 80174a8:	d001      	beq.n	80174ae <__sflush_r+0xb2>
 80174aa:	2b16      	cmp	r3, #22
 80174ac:	d101      	bne.n	80174b2 <__sflush_r+0xb6>
 80174ae:	602f      	str	r7, [r5, #0]
 80174b0:	e7b1      	b.n	8017416 <__sflush_r+0x1a>
 80174b2:	89a3      	ldrh	r3, [r4, #12]
 80174b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174b8:	81a3      	strh	r3, [r4, #12]
 80174ba:	e7ad      	b.n	8017418 <__sflush_r+0x1c>
 80174bc:	690f      	ldr	r7, [r1, #16]
 80174be:	2f00      	cmp	r7, #0
 80174c0:	d0a9      	beq.n	8017416 <__sflush_r+0x1a>
 80174c2:	0793      	lsls	r3, r2, #30
 80174c4:	680e      	ldr	r6, [r1, #0]
 80174c6:	bf08      	it	eq
 80174c8:	694b      	ldreq	r3, [r1, #20]
 80174ca:	600f      	str	r7, [r1, #0]
 80174cc:	bf18      	it	ne
 80174ce:	2300      	movne	r3, #0
 80174d0:	eba6 0807 	sub.w	r8, r6, r7
 80174d4:	608b      	str	r3, [r1, #8]
 80174d6:	f1b8 0f00 	cmp.w	r8, #0
 80174da:	dd9c      	ble.n	8017416 <__sflush_r+0x1a>
 80174dc:	6a21      	ldr	r1, [r4, #32]
 80174de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80174e0:	4643      	mov	r3, r8
 80174e2:	463a      	mov	r2, r7
 80174e4:	4628      	mov	r0, r5
 80174e6:	47b0      	blx	r6
 80174e8:	2800      	cmp	r0, #0
 80174ea:	dc06      	bgt.n	80174fa <__sflush_r+0xfe>
 80174ec:	89a3      	ldrh	r3, [r4, #12]
 80174ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174f2:	81a3      	strh	r3, [r4, #12]
 80174f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174f8:	e78e      	b.n	8017418 <__sflush_r+0x1c>
 80174fa:	4407      	add	r7, r0
 80174fc:	eba8 0800 	sub.w	r8, r8, r0
 8017500:	e7e9      	b.n	80174d6 <__sflush_r+0xda>
 8017502:	bf00      	nop
 8017504:	dfbffffe 	.word	0xdfbffffe

08017508 <_fflush_r>:
 8017508:	b538      	push	{r3, r4, r5, lr}
 801750a:	690b      	ldr	r3, [r1, #16]
 801750c:	4605      	mov	r5, r0
 801750e:	460c      	mov	r4, r1
 8017510:	b913      	cbnz	r3, 8017518 <_fflush_r+0x10>
 8017512:	2500      	movs	r5, #0
 8017514:	4628      	mov	r0, r5
 8017516:	bd38      	pop	{r3, r4, r5, pc}
 8017518:	b118      	cbz	r0, 8017522 <_fflush_r+0x1a>
 801751a:	6a03      	ldr	r3, [r0, #32]
 801751c:	b90b      	cbnz	r3, 8017522 <_fflush_r+0x1a>
 801751e:	f000 f8bb 	bl	8017698 <__sinit>
 8017522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d0f3      	beq.n	8017512 <_fflush_r+0xa>
 801752a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801752c:	07d0      	lsls	r0, r2, #31
 801752e:	d404      	bmi.n	801753a <_fflush_r+0x32>
 8017530:	0599      	lsls	r1, r3, #22
 8017532:	d402      	bmi.n	801753a <_fflush_r+0x32>
 8017534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017536:	f000 fada 	bl	8017aee <__retarget_lock_acquire_recursive>
 801753a:	4628      	mov	r0, r5
 801753c:	4621      	mov	r1, r4
 801753e:	f7ff ff5d 	bl	80173fc <__sflush_r>
 8017542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017544:	07da      	lsls	r2, r3, #31
 8017546:	4605      	mov	r5, r0
 8017548:	d4e4      	bmi.n	8017514 <_fflush_r+0xc>
 801754a:	89a3      	ldrh	r3, [r4, #12]
 801754c:	059b      	lsls	r3, r3, #22
 801754e:	d4e1      	bmi.n	8017514 <_fflush_r+0xc>
 8017550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017552:	f000 facd 	bl	8017af0 <__retarget_lock_release_recursive>
 8017556:	e7dd      	b.n	8017514 <_fflush_r+0xc>

08017558 <fflush>:
 8017558:	4601      	mov	r1, r0
 801755a:	b920      	cbnz	r0, 8017566 <fflush+0xe>
 801755c:	4a04      	ldr	r2, [pc, #16]	; (8017570 <fflush+0x18>)
 801755e:	4905      	ldr	r1, [pc, #20]	; (8017574 <fflush+0x1c>)
 8017560:	4805      	ldr	r0, [pc, #20]	; (8017578 <fflush+0x20>)
 8017562:	f000 b8b1 	b.w	80176c8 <_fwalk_sglue>
 8017566:	4b05      	ldr	r3, [pc, #20]	; (801757c <fflush+0x24>)
 8017568:	6818      	ldr	r0, [r3, #0]
 801756a:	f7ff bfcd 	b.w	8017508 <_fflush_r>
 801756e:	bf00      	nop
 8017570:	20000440 	.word	0x20000440
 8017574:	08017509 	.word	0x08017509
 8017578:	2000044c 	.word	0x2000044c
 801757c:	20000498 	.word	0x20000498

08017580 <std>:
 8017580:	2300      	movs	r3, #0
 8017582:	b510      	push	{r4, lr}
 8017584:	4604      	mov	r4, r0
 8017586:	e9c0 3300 	strd	r3, r3, [r0]
 801758a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801758e:	6083      	str	r3, [r0, #8]
 8017590:	8181      	strh	r1, [r0, #12]
 8017592:	6643      	str	r3, [r0, #100]	; 0x64
 8017594:	81c2      	strh	r2, [r0, #14]
 8017596:	6183      	str	r3, [r0, #24]
 8017598:	4619      	mov	r1, r3
 801759a:	2208      	movs	r2, #8
 801759c:	305c      	adds	r0, #92	; 0x5c
 801759e:	f000 f9a3 	bl	80178e8 <memset>
 80175a2:	4b0d      	ldr	r3, [pc, #52]	; (80175d8 <std+0x58>)
 80175a4:	6263      	str	r3, [r4, #36]	; 0x24
 80175a6:	4b0d      	ldr	r3, [pc, #52]	; (80175dc <std+0x5c>)
 80175a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80175aa:	4b0d      	ldr	r3, [pc, #52]	; (80175e0 <std+0x60>)
 80175ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80175ae:	4b0d      	ldr	r3, [pc, #52]	; (80175e4 <std+0x64>)
 80175b0:	6323      	str	r3, [r4, #48]	; 0x30
 80175b2:	4b0d      	ldr	r3, [pc, #52]	; (80175e8 <std+0x68>)
 80175b4:	6224      	str	r4, [r4, #32]
 80175b6:	429c      	cmp	r4, r3
 80175b8:	d006      	beq.n	80175c8 <std+0x48>
 80175ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80175be:	4294      	cmp	r4, r2
 80175c0:	d002      	beq.n	80175c8 <std+0x48>
 80175c2:	33d0      	adds	r3, #208	; 0xd0
 80175c4:	429c      	cmp	r4, r3
 80175c6:	d105      	bne.n	80175d4 <std+0x54>
 80175c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80175cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175d0:	f000 ba8c 	b.w	8017aec <__retarget_lock_init_recursive>
 80175d4:	bd10      	pop	{r4, pc}
 80175d6:	bf00      	nop
 80175d8:	08017739 	.word	0x08017739
 80175dc:	0801775b 	.word	0x0801775b
 80175e0:	08017793 	.word	0x08017793
 80175e4:	080177b7 	.word	0x080177b7
 80175e8:	2000db60 	.word	0x2000db60

080175ec <stdio_exit_handler>:
 80175ec:	4a02      	ldr	r2, [pc, #8]	; (80175f8 <stdio_exit_handler+0xc>)
 80175ee:	4903      	ldr	r1, [pc, #12]	; (80175fc <stdio_exit_handler+0x10>)
 80175f0:	4803      	ldr	r0, [pc, #12]	; (8017600 <stdio_exit_handler+0x14>)
 80175f2:	f000 b869 	b.w	80176c8 <_fwalk_sglue>
 80175f6:	bf00      	nop
 80175f8:	20000440 	.word	0x20000440
 80175fc:	08017509 	.word	0x08017509
 8017600:	2000044c 	.word	0x2000044c

08017604 <cleanup_stdio>:
 8017604:	6841      	ldr	r1, [r0, #4]
 8017606:	4b0c      	ldr	r3, [pc, #48]	; (8017638 <cleanup_stdio+0x34>)
 8017608:	4299      	cmp	r1, r3
 801760a:	b510      	push	{r4, lr}
 801760c:	4604      	mov	r4, r0
 801760e:	d001      	beq.n	8017614 <cleanup_stdio+0x10>
 8017610:	f7ff ff7a 	bl	8017508 <_fflush_r>
 8017614:	68a1      	ldr	r1, [r4, #8]
 8017616:	4b09      	ldr	r3, [pc, #36]	; (801763c <cleanup_stdio+0x38>)
 8017618:	4299      	cmp	r1, r3
 801761a:	d002      	beq.n	8017622 <cleanup_stdio+0x1e>
 801761c:	4620      	mov	r0, r4
 801761e:	f7ff ff73 	bl	8017508 <_fflush_r>
 8017622:	68e1      	ldr	r1, [r4, #12]
 8017624:	4b06      	ldr	r3, [pc, #24]	; (8017640 <cleanup_stdio+0x3c>)
 8017626:	4299      	cmp	r1, r3
 8017628:	d004      	beq.n	8017634 <cleanup_stdio+0x30>
 801762a:	4620      	mov	r0, r4
 801762c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017630:	f7ff bf6a 	b.w	8017508 <_fflush_r>
 8017634:	bd10      	pop	{r4, pc}
 8017636:	bf00      	nop
 8017638:	2000db60 	.word	0x2000db60
 801763c:	2000dbc8 	.word	0x2000dbc8
 8017640:	2000dc30 	.word	0x2000dc30

08017644 <global_stdio_init.part.0>:
 8017644:	b510      	push	{r4, lr}
 8017646:	4b0b      	ldr	r3, [pc, #44]	; (8017674 <global_stdio_init.part.0+0x30>)
 8017648:	4c0b      	ldr	r4, [pc, #44]	; (8017678 <global_stdio_init.part.0+0x34>)
 801764a:	4a0c      	ldr	r2, [pc, #48]	; (801767c <global_stdio_init.part.0+0x38>)
 801764c:	601a      	str	r2, [r3, #0]
 801764e:	4620      	mov	r0, r4
 8017650:	2200      	movs	r2, #0
 8017652:	2104      	movs	r1, #4
 8017654:	f7ff ff94 	bl	8017580 <std>
 8017658:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801765c:	2201      	movs	r2, #1
 801765e:	2109      	movs	r1, #9
 8017660:	f7ff ff8e 	bl	8017580 <std>
 8017664:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017668:	2202      	movs	r2, #2
 801766a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801766e:	2112      	movs	r1, #18
 8017670:	f7ff bf86 	b.w	8017580 <std>
 8017674:	2000dc98 	.word	0x2000dc98
 8017678:	2000db60 	.word	0x2000db60
 801767c:	080175ed 	.word	0x080175ed

08017680 <__sfp_lock_acquire>:
 8017680:	4801      	ldr	r0, [pc, #4]	; (8017688 <__sfp_lock_acquire+0x8>)
 8017682:	f000 ba34 	b.w	8017aee <__retarget_lock_acquire_recursive>
 8017686:	bf00      	nop
 8017688:	2000dca1 	.word	0x2000dca1

0801768c <__sfp_lock_release>:
 801768c:	4801      	ldr	r0, [pc, #4]	; (8017694 <__sfp_lock_release+0x8>)
 801768e:	f000 ba2f 	b.w	8017af0 <__retarget_lock_release_recursive>
 8017692:	bf00      	nop
 8017694:	2000dca1 	.word	0x2000dca1

08017698 <__sinit>:
 8017698:	b510      	push	{r4, lr}
 801769a:	4604      	mov	r4, r0
 801769c:	f7ff fff0 	bl	8017680 <__sfp_lock_acquire>
 80176a0:	6a23      	ldr	r3, [r4, #32]
 80176a2:	b11b      	cbz	r3, 80176ac <__sinit+0x14>
 80176a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176a8:	f7ff bff0 	b.w	801768c <__sfp_lock_release>
 80176ac:	4b04      	ldr	r3, [pc, #16]	; (80176c0 <__sinit+0x28>)
 80176ae:	6223      	str	r3, [r4, #32]
 80176b0:	4b04      	ldr	r3, [pc, #16]	; (80176c4 <__sinit+0x2c>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d1f5      	bne.n	80176a4 <__sinit+0xc>
 80176b8:	f7ff ffc4 	bl	8017644 <global_stdio_init.part.0>
 80176bc:	e7f2      	b.n	80176a4 <__sinit+0xc>
 80176be:	bf00      	nop
 80176c0:	08017605 	.word	0x08017605
 80176c4:	2000dc98 	.word	0x2000dc98

080176c8 <_fwalk_sglue>:
 80176c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176cc:	4607      	mov	r7, r0
 80176ce:	4688      	mov	r8, r1
 80176d0:	4614      	mov	r4, r2
 80176d2:	2600      	movs	r6, #0
 80176d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80176d8:	f1b9 0901 	subs.w	r9, r9, #1
 80176dc:	d505      	bpl.n	80176ea <_fwalk_sglue+0x22>
 80176de:	6824      	ldr	r4, [r4, #0]
 80176e0:	2c00      	cmp	r4, #0
 80176e2:	d1f7      	bne.n	80176d4 <_fwalk_sglue+0xc>
 80176e4:	4630      	mov	r0, r6
 80176e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176ea:	89ab      	ldrh	r3, [r5, #12]
 80176ec:	2b01      	cmp	r3, #1
 80176ee:	d907      	bls.n	8017700 <_fwalk_sglue+0x38>
 80176f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80176f4:	3301      	adds	r3, #1
 80176f6:	d003      	beq.n	8017700 <_fwalk_sglue+0x38>
 80176f8:	4629      	mov	r1, r5
 80176fa:	4638      	mov	r0, r7
 80176fc:	47c0      	blx	r8
 80176fe:	4306      	orrs	r6, r0
 8017700:	3568      	adds	r5, #104	; 0x68
 8017702:	e7e9      	b.n	80176d8 <_fwalk_sglue+0x10>

08017704 <iprintf>:
 8017704:	b40f      	push	{r0, r1, r2, r3}
 8017706:	b507      	push	{r0, r1, r2, lr}
 8017708:	4906      	ldr	r1, [pc, #24]	; (8017724 <iprintf+0x20>)
 801770a:	ab04      	add	r3, sp, #16
 801770c:	6808      	ldr	r0, [r1, #0]
 801770e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017712:	6881      	ldr	r1, [r0, #8]
 8017714:	9301      	str	r3, [sp, #4]
 8017716:	f001 fd1b 	bl	8019150 <_vfiprintf_r>
 801771a:	b003      	add	sp, #12
 801771c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017720:	b004      	add	sp, #16
 8017722:	4770      	bx	lr
 8017724:	20000498 	.word	0x20000498

08017728 <putchar>:
 8017728:	4b02      	ldr	r3, [pc, #8]	; (8017734 <putchar+0xc>)
 801772a:	4601      	mov	r1, r0
 801772c:	6818      	ldr	r0, [r3, #0]
 801772e:	6882      	ldr	r2, [r0, #8]
 8017730:	f001 be8a 	b.w	8019448 <_putc_r>
 8017734:	20000498 	.word	0x20000498

08017738 <__sread>:
 8017738:	b510      	push	{r4, lr}
 801773a:	460c      	mov	r4, r1
 801773c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017740:	f000 f986 	bl	8017a50 <_read_r>
 8017744:	2800      	cmp	r0, #0
 8017746:	bfab      	itete	ge
 8017748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801774a:	89a3      	ldrhlt	r3, [r4, #12]
 801774c:	181b      	addge	r3, r3, r0
 801774e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017752:	bfac      	ite	ge
 8017754:	6563      	strge	r3, [r4, #84]	; 0x54
 8017756:	81a3      	strhlt	r3, [r4, #12]
 8017758:	bd10      	pop	{r4, pc}

0801775a <__swrite>:
 801775a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801775e:	461f      	mov	r7, r3
 8017760:	898b      	ldrh	r3, [r1, #12]
 8017762:	05db      	lsls	r3, r3, #23
 8017764:	4605      	mov	r5, r0
 8017766:	460c      	mov	r4, r1
 8017768:	4616      	mov	r6, r2
 801776a:	d505      	bpl.n	8017778 <__swrite+0x1e>
 801776c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017770:	2302      	movs	r3, #2
 8017772:	2200      	movs	r2, #0
 8017774:	f000 f95a 	bl	8017a2c <_lseek_r>
 8017778:	89a3      	ldrh	r3, [r4, #12]
 801777a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801777e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017782:	81a3      	strh	r3, [r4, #12]
 8017784:	4632      	mov	r2, r6
 8017786:	463b      	mov	r3, r7
 8017788:	4628      	mov	r0, r5
 801778a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801778e:	f000 b971 	b.w	8017a74 <_write_r>

08017792 <__sseek>:
 8017792:	b510      	push	{r4, lr}
 8017794:	460c      	mov	r4, r1
 8017796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801779a:	f000 f947 	bl	8017a2c <_lseek_r>
 801779e:	1c43      	adds	r3, r0, #1
 80177a0:	89a3      	ldrh	r3, [r4, #12]
 80177a2:	bf15      	itete	ne
 80177a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80177a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80177aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80177ae:	81a3      	strheq	r3, [r4, #12]
 80177b0:	bf18      	it	ne
 80177b2:	81a3      	strhne	r3, [r4, #12]
 80177b4:	bd10      	pop	{r4, pc}

080177b6 <__sclose>:
 80177b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177ba:	f000 b8d1 	b.w	8017960 <_close_r>

080177be <__swbuf_r>:
 80177be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177c0:	460e      	mov	r6, r1
 80177c2:	4614      	mov	r4, r2
 80177c4:	4605      	mov	r5, r0
 80177c6:	b118      	cbz	r0, 80177d0 <__swbuf_r+0x12>
 80177c8:	6a03      	ldr	r3, [r0, #32]
 80177ca:	b90b      	cbnz	r3, 80177d0 <__swbuf_r+0x12>
 80177cc:	f7ff ff64 	bl	8017698 <__sinit>
 80177d0:	69a3      	ldr	r3, [r4, #24]
 80177d2:	60a3      	str	r3, [r4, #8]
 80177d4:	89a3      	ldrh	r3, [r4, #12]
 80177d6:	071a      	lsls	r2, r3, #28
 80177d8:	d525      	bpl.n	8017826 <__swbuf_r+0x68>
 80177da:	6923      	ldr	r3, [r4, #16]
 80177dc:	b31b      	cbz	r3, 8017826 <__swbuf_r+0x68>
 80177de:	6823      	ldr	r3, [r4, #0]
 80177e0:	6922      	ldr	r2, [r4, #16]
 80177e2:	1a98      	subs	r0, r3, r2
 80177e4:	6963      	ldr	r3, [r4, #20]
 80177e6:	b2f6      	uxtb	r6, r6
 80177e8:	4283      	cmp	r3, r0
 80177ea:	4637      	mov	r7, r6
 80177ec:	dc04      	bgt.n	80177f8 <__swbuf_r+0x3a>
 80177ee:	4621      	mov	r1, r4
 80177f0:	4628      	mov	r0, r5
 80177f2:	f7ff fe89 	bl	8017508 <_fflush_r>
 80177f6:	b9e0      	cbnz	r0, 8017832 <__swbuf_r+0x74>
 80177f8:	68a3      	ldr	r3, [r4, #8]
 80177fa:	3b01      	subs	r3, #1
 80177fc:	60a3      	str	r3, [r4, #8]
 80177fe:	6823      	ldr	r3, [r4, #0]
 8017800:	1c5a      	adds	r2, r3, #1
 8017802:	6022      	str	r2, [r4, #0]
 8017804:	701e      	strb	r6, [r3, #0]
 8017806:	6962      	ldr	r2, [r4, #20]
 8017808:	1c43      	adds	r3, r0, #1
 801780a:	429a      	cmp	r2, r3
 801780c:	d004      	beq.n	8017818 <__swbuf_r+0x5a>
 801780e:	89a3      	ldrh	r3, [r4, #12]
 8017810:	07db      	lsls	r3, r3, #31
 8017812:	d506      	bpl.n	8017822 <__swbuf_r+0x64>
 8017814:	2e0a      	cmp	r6, #10
 8017816:	d104      	bne.n	8017822 <__swbuf_r+0x64>
 8017818:	4621      	mov	r1, r4
 801781a:	4628      	mov	r0, r5
 801781c:	f7ff fe74 	bl	8017508 <_fflush_r>
 8017820:	b938      	cbnz	r0, 8017832 <__swbuf_r+0x74>
 8017822:	4638      	mov	r0, r7
 8017824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017826:	4621      	mov	r1, r4
 8017828:	4628      	mov	r0, r5
 801782a:	f000 f805 	bl	8017838 <__swsetup_r>
 801782e:	2800      	cmp	r0, #0
 8017830:	d0d5      	beq.n	80177de <__swbuf_r+0x20>
 8017832:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017836:	e7f4      	b.n	8017822 <__swbuf_r+0x64>

08017838 <__swsetup_r>:
 8017838:	b538      	push	{r3, r4, r5, lr}
 801783a:	4b2a      	ldr	r3, [pc, #168]	; (80178e4 <__swsetup_r+0xac>)
 801783c:	4605      	mov	r5, r0
 801783e:	6818      	ldr	r0, [r3, #0]
 8017840:	460c      	mov	r4, r1
 8017842:	b118      	cbz	r0, 801784c <__swsetup_r+0x14>
 8017844:	6a03      	ldr	r3, [r0, #32]
 8017846:	b90b      	cbnz	r3, 801784c <__swsetup_r+0x14>
 8017848:	f7ff ff26 	bl	8017698 <__sinit>
 801784c:	89a3      	ldrh	r3, [r4, #12]
 801784e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017852:	0718      	lsls	r0, r3, #28
 8017854:	d422      	bmi.n	801789c <__swsetup_r+0x64>
 8017856:	06d9      	lsls	r1, r3, #27
 8017858:	d407      	bmi.n	801786a <__swsetup_r+0x32>
 801785a:	2309      	movs	r3, #9
 801785c:	602b      	str	r3, [r5, #0]
 801785e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017862:	81a3      	strh	r3, [r4, #12]
 8017864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017868:	e034      	b.n	80178d4 <__swsetup_r+0x9c>
 801786a:	0758      	lsls	r0, r3, #29
 801786c:	d512      	bpl.n	8017894 <__swsetup_r+0x5c>
 801786e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017870:	b141      	cbz	r1, 8017884 <__swsetup_r+0x4c>
 8017872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017876:	4299      	cmp	r1, r3
 8017878:	d002      	beq.n	8017880 <__swsetup_r+0x48>
 801787a:	4628      	mov	r0, r5
 801787c:	f000 ffc2 	bl	8018804 <_free_r>
 8017880:	2300      	movs	r3, #0
 8017882:	6363      	str	r3, [r4, #52]	; 0x34
 8017884:	89a3      	ldrh	r3, [r4, #12]
 8017886:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801788a:	81a3      	strh	r3, [r4, #12]
 801788c:	2300      	movs	r3, #0
 801788e:	6063      	str	r3, [r4, #4]
 8017890:	6923      	ldr	r3, [r4, #16]
 8017892:	6023      	str	r3, [r4, #0]
 8017894:	89a3      	ldrh	r3, [r4, #12]
 8017896:	f043 0308 	orr.w	r3, r3, #8
 801789a:	81a3      	strh	r3, [r4, #12]
 801789c:	6923      	ldr	r3, [r4, #16]
 801789e:	b94b      	cbnz	r3, 80178b4 <__swsetup_r+0x7c>
 80178a0:	89a3      	ldrh	r3, [r4, #12]
 80178a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80178a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80178aa:	d003      	beq.n	80178b4 <__swsetup_r+0x7c>
 80178ac:	4621      	mov	r1, r4
 80178ae:	4628      	mov	r0, r5
 80178b0:	f001 fd8e 	bl	80193d0 <__smakebuf_r>
 80178b4:	89a0      	ldrh	r0, [r4, #12]
 80178b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80178ba:	f010 0301 	ands.w	r3, r0, #1
 80178be:	d00a      	beq.n	80178d6 <__swsetup_r+0x9e>
 80178c0:	2300      	movs	r3, #0
 80178c2:	60a3      	str	r3, [r4, #8]
 80178c4:	6963      	ldr	r3, [r4, #20]
 80178c6:	425b      	negs	r3, r3
 80178c8:	61a3      	str	r3, [r4, #24]
 80178ca:	6923      	ldr	r3, [r4, #16]
 80178cc:	b943      	cbnz	r3, 80178e0 <__swsetup_r+0xa8>
 80178ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80178d2:	d1c4      	bne.n	801785e <__swsetup_r+0x26>
 80178d4:	bd38      	pop	{r3, r4, r5, pc}
 80178d6:	0781      	lsls	r1, r0, #30
 80178d8:	bf58      	it	pl
 80178da:	6963      	ldrpl	r3, [r4, #20]
 80178dc:	60a3      	str	r3, [r4, #8]
 80178de:	e7f4      	b.n	80178ca <__swsetup_r+0x92>
 80178e0:	2000      	movs	r0, #0
 80178e2:	e7f7      	b.n	80178d4 <__swsetup_r+0x9c>
 80178e4:	20000498 	.word	0x20000498

080178e8 <memset>:
 80178e8:	4402      	add	r2, r0
 80178ea:	4603      	mov	r3, r0
 80178ec:	4293      	cmp	r3, r2
 80178ee:	d100      	bne.n	80178f2 <memset+0xa>
 80178f0:	4770      	bx	lr
 80178f2:	f803 1b01 	strb.w	r1, [r3], #1
 80178f6:	e7f9      	b.n	80178ec <memset+0x4>

080178f8 <strcat>:
 80178f8:	b510      	push	{r4, lr}
 80178fa:	4602      	mov	r2, r0
 80178fc:	7814      	ldrb	r4, [r2, #0]
 80178fe:	4613      	mov	r3, r2
 8017900:	3201      	adds	r2, #1
 8017902:	2c00      	cmp	r4, #0
 8017904:	d1fa      	bne.n	80178fc <strcat+0x4>
 8017906:	3b01      	subs	r3, #1
 8017908:	f811 2b01 	ldrb.w	r2, [r1], #1
 801790c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017910:	2a00      	cmp	r2, #0
 8017912:	d1f9      	bne.n	8017908 <strcat+0x10>
 8017914:	bd10      	pop	{r4, pc}

08017916 <strchr>:
 8017916:	b2c9      	uxtb	r1, r1
 8017918:	4603      	mov	r3, r0
 801791a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801791e:	b11a      	cbz	r2, 8017928 <strchr+0x12>
 8017920:	428a      	cmp	r2, r1
 8017922:	d1f9      	bne.n	8017918 <strchr+0x2>
 8017924:	4618      	mov	r0, r3
 8017926:	4770      	bx	lr
 8017928:	2900      	cmp	r1, #0
 801792a:	bf18      	it	ne
 801792c:	2300      	movne	r3, #0
 801792e:	e7f9      	b.n	8017924 <strchr+0xe>

08017930 <strncpy>:
 8017930:	b510      	push	{r4, lr}
 8017932:	3901      	subs	r1, #1
 8017934:	4603      	mov	r3, r0
 8017936:	b132      	cbz	r2, 8017946 <strncpy+0x16>
 8017938:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801793c:	f803 4b01 	strb.w	r4, [r3], #1
 8017940:	3a01      	subs	r2, #1
 8017942:	2c00      	cmp	r4, #0
 8017944:	d1f7      	bne.n	8017936 <strncpy+0x6>
 8017946:	441a      	add	r2, r3
 8017948:	2100      	movs	r1, #0
 801794a:	4293      	cmp	r3, r2
 801794c:	d100      	bne.n	8017950 <strncpy+0x20>
 801794e:	bd10      	pop	{r4, pc}
 8017950:	f803 1b01 	strb.w	r1, [r3], #1
 8017954:	e7f9      	b.n	801794a <strncpy+0x1a>
	...

08017958 <_localeconv_r>:
 8017958:	4800      	ldr	r0, [pc, #0]	; (801795c <_localeconv_r+0x4>)
 801795a:	4770      	bx	lr
 801795c:	2000058c 	.word	0x2000058c

08017960 <_close_r>:
 8017960:	b538      	push	{r3, r4, r5, lr}
 8017962:	4d06      	ldr	r5, [pc, #24]	; (801797c <_close_r+0x1c>)
 8017964:	2300      	movs	r3, #0
 8017966:	4604      	mov	r4, r0
 8017968:	4608      	mov	r0, r1
 801796a:	602b      	str	r3, [r5, #0]
 801796c:	f7f1 ff95 	bl	800989a <_close>
 8017970:	1c43      	adds	r3, r0, #1
 8017972:	d102      	bne.n	801797a <_close_r+0x1a>
 8017974:	682b      	ldr	r3, [r5, #0]
 8017976:	b103      	cbz	r3, 801797a <_close_r+0x1a>
 8017978:	6023      	str	r3, [r4, #0]
 801797a:	bd38      	pop	{r3, r4, r5, pc}
 801797c:	2000dc9c 	.word	0x2000dc9c

08017980 <_reclaim_reent>:
 8017980:	4b29      	ldr	r3, [pc, #164]	; (8017a28 <_reclaim_reent+0xa8>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	4283      	cmp	r3, r0
 8017986:	b570      	push	{r4, r5, r6, lr}
 8017988:	4604      	mov	r4, r0
 801798a:	d04b      	beq.n	8017a24 <_reclaim_reent+0xa4>
 801798c:	69c3      	ldr	r3, [r0, #28]
 801798e:	b143      	cbz	r3, 80179a2 <_reclaim_reent+0x22>
 8017990:	68db      	ldr	r3, [r3, #12]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d144      	bne.n	8017a20 <_reclaim_reent+0xa0>
 8017996:	69e3      	ldr	r3, [r4, #28]
 8017998:	6819      	ldr	r1, [r3, #0]
 801799a:	b111      	cbz	r1, 80179a2 <_reclaim_reent+0x22>
 801799c:	4620      	mov	r0, r4
 801799e:	f000 ff31 	bl	8018804 <_free_r>
 80179a2:	6961      	ldr	r1, [r4, #20]
 80179a4:	b111      	cbz	r1, 80179ac <_reclaim_reent+0x2c>
 80179a6:	4620      	mov	r0, r4
 80179a8:	f000 ff2c 	bl	8018804 <_free_r>
 80179ac:	69e1      	ldr	r1, [r4, #28]
 80179ae:	b111      	cbz	r1, 80179b6 <_reclaim_reent+0x36>
 80179b0:	4620      	mov	r0, r4
 80179b2:	f000 ff27 	bl	8018804 <_free_r>
 80179b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80179b8:	b111      	cbz	r1, 80179c0 <_reclaim_reent+0x40>
 80179ba:	4620      	mov	r0, r4
 80179bc:	f000 ff22 	bl	8018804 <_free_r>
 80179c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80179c2:	b111      	cbz	r1, 80179ca <_reclaim_reent+0x4a>
 80179c4:	4620      	mov	r0, r4
 80179c6:	f000 ff1d 	bl	8018804 <_free_r>
 80179ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80179cc:	b111      	cbz	r1, 80179d4 <_reclaim_reent+0x54>
 80179ce:	4620      	mov	r0, r4
 80179d0:	f000 ff18 	bl	8018804 <_free_r>
 80179d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80179d6:	b111      	cbz	r1, 80179de <_reclaim_reent+0x5e>
 80179d8:	4620      	mov	r0, r4
 80179da:	f000 ff13 	bl	8018804 <_free_r>
 80179de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80179e0:	b111      	cbz	r1, 80179e8 <_reclaim_reent+0x68>
 80179e2:	4620      	mov	r0, r4
 80179e4:	f000 ff0e 	bl	8018804 <_free_r>
 80179e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80179ea:	b111      	cbz	r1, 80179f2 <_reclaim_reent+0x72>
 80179ec:	4620      	mov	r0, r4
 80179ee:	f000 ff09 	bl	8018804 <_free_r>
 80179f2:	6a23      	ldr	r3, [r4, #32]
 80179f4:	b1b3      	cbz	r3, 8017a24 <_reclaim_reent+0xa4>
 80179f6:	4620      	mov	r0, r4
 80179f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80179fc:	4718      	bx	r3
 80179fe:	5949      	ldr	r1, [r1, r5]
 8017a00:	b941      	cbnz	r1, 8017a14 <_reclaim_reent+0x94>
 8017a02:	3504      	adds	r5, #4
 8017a04:	69e3      	ldr	r3, [r4, #28]
 8017a06:	2d80      	cmp	r5, #128	; 0x80
 8017a08:	68d9      	ldr	r1, [r3, #12]
 8017a0a:	d1f8      	bne.n	80179fe <_reclaim_reent+0x7e>
 8017a0c:	4620      	mov	r0, r4
 8017a0e:	f000 fef9 	bl	8018804 <_free_r>
 8017a12:	e7c0      	b.n	8017996 <_reclaim_reent+0x16>
 8017a14:	680e      	ldr	r6, [r1, #0]
 8017a16:	4620      	mov	r0, r4
 8017a18:	f000 fef4 	bl	8018804 <_free_r>
 8017a1c:	4631      	mov	r1, r6
 8017a1e:	e7ef      	b.n	8017a00 <_reclaim_reent+0x80>
 8017a20:	2500      	movs	r5, #0
 8017a22:	e7ef      	b.n	8017a04 <_reclaim_reent+0x84>
 8017a24:	bd70      	pop	{r4, r5, r6, pc}
 8017a26:	bf00      	nop
 8017a28:	20000498 	.word	0x20000498

08017a2c <_lseek_r>:
 8017a2c:	b538      	push	{r3, r4, r5, lr}
 8017a2e:	4d07      	ldr	r5, [pc, #28]	; (8017a4c <_lseek_r+0x20>)
 8017a30:	4604      	mov	r4, r0
 8017a32:	4608      	mov	r0, r1
 8017a34:	4611      	mov	r1, r2
 8017a36:	2200      	movs	r2, #0
 8017a38:	602a      	str	r2, [r5, #0]
 8017a3a:	461a      	mov	r2, r3
 8017a3c:	f7f1 ff54 	bl	80098e8 <_lseek>
 8017a40:	1c43      	adds	r3, r0, #1
 8017a42:	d102      	bne.n	8017a4a <_lseek_r+0x1e>
 8017a44:	682b      	ldr	r3, [r5, #0]
 8017a46:	b103      	cbz	r3, 8017a4a <_lseek_r+0x1e>
 8017a48:	6023      	str	r3, [r4, #0]
 8017a4a:	bd38      	pop	{r3, r4, r5, pc}
 8017a4c:	2000dc9c 	.word	0x2000dc9c

08017a50 <_read_r>:
 8017a50:	b538      	push	{r3, r4, r5, lr}
 8017a52:	4d07      	ldr	r5, [pc, #28]	; (8017a70 <_read_r+0x20>)
 8017a54:	4604      	mov	r4, r0
 8017a56:	4608      	mov	r0, r1
 8017a58:	4611      	mov	r1, r2
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	602a      	str	r2, [r5, #0]
 8017a5e:	461a      	mov	r2, r3
 8017a60:	f7f1 fee2 	bl	8009828 <_read>
 8017a64:	1c43      	adds	r3, r0, #1
 8017a66:	d102      	bne.n	8017a6e <_read_r+0x1e>
 8017a68:	682b      	ldr	r3, [r5, #0]
 8017a6a:	b103      	cbz	r3, 8017a6e <_read_r+0x1e>
 8017a6c:	6023      	str	r3, [r4, #0]
 8017a6e:	bd38      	pop	{r3, r4, r5, pc}
 8017a70:	2000dc9c 	.word	0x2000dc9c

08017a74 <_write_r>:
 8017a74:	b538      	push	{r3, r4, r5, lr}
 8017a76:	4d07      	ldr	r5, [pc, #28]	; (8017a94 <_write_r+0x20>)
 8017a78:	4604      	mov	r4, r0
 8017a7a:	4608      	mov	r0, r1
 8017a7c:	4611      	mov	r1, r2
 8017a7e:	2200      	movs	r2, #0
 8017a80:	602a      	str	r2, [r5, #0]
 8017a82:	461a      	mov	r2, r3
 8017a84:	f7f1 feed 	bl	8009862 <_write>
 8017a88:	1c43      	adds	r3, r0, #1
 8017a8a:	d102      	bne.n	8017a92 <_write_r+0x1e>
 8017a8c:	682b      	ldr	r3, [r5, #0]
 8017a8e:	b103      	cbz	r3, 8017a92 <_write_r+0x1e>
 8017a90:	6023      	str	r3, [r4, #0]
 8017a92:	bd38      	pop	{r3, r4, r5, pc}
 8017a94:	2000dc9c 	.word	0x2000dc9c

08017a98 <__errno>:
 8017a98:	4b01      	ldr	r3, [pc, #4]	; (8017aa0 <__errno+0x8>)
 8017a9a:	6818      	ldr	r0, [r3, #0]
 8017a9c:	4770      	bx	lr
 8017a9e:	bf00      	nop
 8017aa0:	20000498 	.word	0x20000498

08017aa4 <__libc_init_array>:
 8017aa4:	b570      	push	{r4, r5, r6, lr}
 8017aa6:	4d0d      	ldr	r5, [pc, #52]	; (8017adc <__libc_init_array+0x38>)
 8017aa8:	4c0d      	ldr	r4, [pc, #52]	; (8017ae0 <__libc_init_array+0x3c>)
 8017aaa:	1b64      	subs	r4, r4, r5
 8017aac:	10a4      	asrs	r4, r4, #2
 8017aae:	2600      	movs	r6, #0
 8017ab0:	42a6      	cmp	r6, r4
 8017ab2:	d109      	bne.n	8017ac8 <__libc_init_array+0x24>
 8017ab4:	4d0b      	ldr	r5, [pc, #44]	; (8017ae4 <__libc_init_array+0x40>)
 8017ab6:	4c0c      	ldr	r4, [pc, #48]	; (8017ae8 <__libc_init_array+0x44>)
 8017ab8:	f001 fe00 	bl	80196bc <_init>
 8017abc:	1b64      	subs	r4, r4, r5
 8017abe:	10a4      	asrs	r4, r4, #2
 8017ac0:	2600      	movs	r6, #0
 8017ac2:	42a6      	cmp	r6, r4
 8017ac4:	d105      	bne.n	8017ad2 <__libc_init_array+0x2e>
 8017ac6:	bd70      	pop	{r4, r5, r6, pc}
 8017ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8017acc:	4798      	blx	r3
 8017ace:	3601      	adds	r6, #1
 8017ad0:	e7ee      	b.n	8017ab0 <__libc_init_array+0xc>
 8017ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ad6:	4798      	blx	r3
 8017ad8:	3601      	adds	r6, #1
 8017ada:	e7f2      	b.n	8017ac2 <__libc_init_array+0x1e>
 8017adc:	0801c6ec 	.word	0x0801c6ec
 8017ae0:	0801c6ec 	.word	0x0801c6ec
 8017ae4:	0801c6ec 	.word	0x0801c6ec
 8017ae8:	0801c6f0 	.word	0x0801c6f0

08017aec <__retarget_lock_init_recursive>:
 8017aec:	4770      	bx	lr

08017aee <__retarget_lock_acquire_recursive>:
 8017aee:	4770      	bx	lr

08017af0 <__retarget_lock_release_recursive>:
 8017af0:	4770      	bx	lr

08017af2 <memcpy>:
 8017af2:	440a      	add	r2, r1
 8017af4:	4291      	cmp	r1, r2
 8017af6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017afa:	d100      	bne.n	8017afe <memcpy+0xc>
 8017afc:	4770      	bx	lr
 8017afe:	b510      	push	{r4, lr}
 8017b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b08:	4291      	cmp	r1, r2
 8017b0a:	d1f9      	bne.n	8017b00 <memcpy+0xe>
 8017b0c:	bd10      	pop	{r4, pc}

08017b0e <quorem>:
 8017b0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b12:	6903      	ldr	r3, [r0, #16]
 8017b14:	690c      	ldr	r4, [r1, #16]
 8017b16:	42a3      	cmp	r3, r4
 8017b18:	4607      	mov	r7, r0
 8017b1a:	db7e      	blt.n	8017c1a <quorem+0x10c>
 8017b1c:	3c01      	subs	r4, #1
 8017b1e:	f101 0814 	add.w	r8, r1, #20
 8017b22:	f100 0514 	add.w	r5, r0, #20
 8017b26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017b2a:	9301      	str	r3, [sp, #4]
 8017b2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017b30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017b34:	3301      	adds	r3, #1
 8017b36:	429a      	cmp	r2, r3
 8017b38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017b3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017b40:	fbb2 f6f3 	udiv	r6, r2, r3
 8017b44:	d331      	bcc.n	8017baa <quorem+0x9c>
 8017b46:	f04f 0e00 	mov.w	lr, #0
 8017b4a:	4640      	mov	r0, r8
 8017b4c:	46ac      	mov	ip, r5
 8017b4e:	46f2      	mov	sl, lr
 8017b50:	f850 2b04 	ldr.w	r2, [r0], #4
 8017b54:	b293      	uxth	r3, r2
 8017b56:	fb06 e303 	mla	r3, r6, r3, lr
 8017b5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017b5e:	0c1a      	lsrs	r2, r3, #16
 8017b60:	b29b      	uxth	r3, r3
 8017b62:	ebaa 0303 	sub.w	r3, sl, r3
 8017b66:	f8dc a000 	ldr.w	sl, [ip]
 8017b6a:	fa13 f38a 	uxtah	r3, r3, sl
 8017b6e:	fb06 220e 	mla	r2, r6, lr, r2
 8017b72:	9300      	str	r3, [sp, #0]
 8017b74:	9b00      	ldr	r3, [sp, #0]
 8017b76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017b7a:	b292      	uxth	r2, r2
 8017b7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017b80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b84:	f8bd 3000 	ldrh.w	r3, [sp]
 8017b88:	4581      	cmp	r9, r0
 8017b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b8e:	f84c 3b04 	str.w	r3, [ip], #4
 8017b92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017b96:	d2db      	bcs.n	8017b50 <quorem+0x42>
 8017b98:	f855 300b 	ldr.w	r3, [r5, fp]
 8017b9c:	b92b      	cbnz	r3, 8017baa <quorem+0x9c>
 8017b9e:	9b01      	ldr	r3, [sp, #4]
 8017ba0:	3b04      	subs	r3, #4
 8017ba2:	429d      	cmp	r5, r3
 8017ba4:	461a      	mov	r2, r3
 8017ba6:	d32c      	bcc.n	8017c02 <quorem+0xf4>
 8017ba8:	613c      	str	r4, [r7, #16]
 8017baa:	4638      	mov	r0, r7
 8017bac:	f001 f9a6 	bl	8018efc <__mcmp>
 8017bb0:	2800      	cmp	r0, #0
 8017bb2:	db22      	blt.n	8017bfa <quorem+0xec>
 8017bb4:	3601      	adds	r6, #1
 8017bb6:	4629      	mov	r1, r5
 8017bb8:	2000      	movs	r0, #0
 8017bba:	f858 2b04 	ldr.w	r2, [r8], #4
 8017bbe:	f8d1 c000 	ldr.w	ip, [r1]
 8017bc2:	b293      	uxth	r3, r2
 8017bc4:	1ac3      	subs	r3, r0, r3
 8017bc6:	0c12      	lsrs	r2, r2, #16
 8017bc8:	fa13 f38c 	uxtah	r3, r3, ip
 8017bcc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017bd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017bd4:	b29b      	uxth	r3, r3
 8017bd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017bda:	45c1      	cmp	r9, r8
 8017bdc:	f841 3b04 	str.w	r3, [r1], #4
 8017be0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017be4:	d2e9      	bcs.n	8017bba <quorem+0xac>
 8017be6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017bea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017bee:	b922      	cbnz	r2, 8017bfa <quorem+0xec>
 8017bf0:	3b04      	subs	r3, #4
 8017bf2:	429d      	cmp	r5, r3
 8017bf4:	461a      	mov	r2, r3
 8017bf6:	d30a      	bcc.n	8017c0e <quorem+0x100>
 8017bf8:	613c      	str	r4, [r7, #16]
 8017bfa:	4630      	mov	r0, r6
 8017bfc:	b003      	add	sp, #12
 8017bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c02:	6812      	ldr	r2, [r2, #0]
 8017c04:	3b04      	subs	r3, #4
 8017c06:	2a00      	cmp	r2, #0
 8017c08:	d1ce      	bne.n	8017ba8 <quorem+0x9a>
 8017c0a:	3c01      	subs	r4, #1
 8017c0c:	e7c9      	b.n	8017ba2 <quorem+0x94>
 8017c0e:	6812      	ldr	r2, [r2, #0]
 8017c10:	3b04      	subs	r3, #4
 8017c12:	2a00      	cmp	r2, #0
 8017c14:	d1f0      	bne.n	8017bf8 <quorem+0xea>
 8017c16:	3c01      	subs	r4, #1
 8017c18:	e7eb      	b.n	8017bf2 <quorem+0xe4>
 8017c1a:	2000      	movs	r0, #0
 8017c1c:	e7ee      	b.n	8017bfc <quorem+0xee>
	...

08017c20 <_dtoa_r>:
 8017c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c24:	ed2d 8b04 	vpush	{d8-d9}
 8017c28:	69c5      	ldr	r5, [r0, #28]
 8017c2a:	b093      	sub	sp, #76	; 0x4c
 8017c2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017c30:	ec57 6b10 	vmov	r6, r7, d0
 8017c34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017c38:	9107      	str	r1, [sp, #28]
 8017c3a:	4604      	mov	r4, r0
 8017c3c:	920a      	str	r2, [sp, #40]	; 0x28
 8017c3e:	930d      	str	r3, [sp, #52]	; 0x34
 8017c40:	b975      	cbnz	r5, 8017c60 <_dtoa_r+0x40>
 8017c42:	2010      	movs	r0, #16
 8017c44:	f000 fe2a 	bl	801889c <malloc>
 8017c48:	4602      	mov	r2, r0
 8017c4a:	61e0      	str	r0, [r4, #28]
 8017c4c:	b920      	cbnz	r0, 8017c58 <_dtoa_r+0x38>
 8017c4e:	4bae      	ldr	r3, [pc, #696]	; (8017f08 <_dtoa_r+0x2e8>)
 8017c50:	21ef      	movs	r1, #239	; 0xef
 8017c52:	48ae      	ldr	r0, [pc, #696]	; (8017f0c <_dtoa_r+0x2ec>)
 8017c54:	f001 fc5e 	bl	8019514 <__assert_func>
 8017c58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017c5c:	6005      	str	r5, [r0, #0]
 8017c5e:	60c5      	str	r5, [r0, #12]
 8017c60:	69e3      	ldr	r3, [r4, #28]
 8017c62:	6819      	ldr	r1, [r3, #0]
 8017c64:	b151      	cbz	r1, 8017c7c <_dtoa_r+0x5c>
 8017c66:	685a      	ldr	r2, [r3, #4]
 8017c68:	604a      	str	r2, [r1, #4]
 8017c6a:	2301      	movs	r3, #1
 8017c6c:	4093      	lsls	r3, r2
 8017c6e:	608b      	str	r3, [r1, #8]
 8017c70:	4620      	mov	r0, r4
 8017c72:	f000 ff07 	bl	8018a84 <_Bfree>
 8017c76:	69e3      	ldr	r3, [r4, #28]
 8017c78:	2200      	movs	r2, #0
 8017c7a:	601a      	str	r2, [r3, #0]
 8017c7c:	1e3b      	subs	r3, r7, #0
 8017c7e:	bfbb      	ittet	lt
 8017c80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017c84:	9303      	strlt	r3, [sp, #12]
 8017c86:	2300      	movge	r3, #0
 8017c88:	2201      	movlt	r2, #1
 8017c8a:	bfac      	ite	ge
 8017c8c:	f8c8 3000 	strge.w	r3, [r8]
 8017c90:	f8c8 2000 	strlt.w	r2, [r8]
 8017c94:	4b9e      	ldr	r3, [pc, #632]	; (8017f10 <_dtoa_r+0x2f0>)
 8017c96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017c9a:	ea33 0308 	bics.w	r3, r3, r8
 8017c9e:	d11b      	bne.n	8017cd8 <_dtoa_r+0xb8>
 8017ca0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017ca2:	f242 730f 	movw	r3, #9999	; 0x270f
 8017ca6:	6013      	str	r3, [r2, #0]
 8017ca8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017cac:	4333      	orrs	r3, r6
 8017cae:	f000 8593 	beq.w	80187d8 <_dtoa_r+0xbb8>
 8017cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017cb4:	b963      	cbnz	r3, 8017cd0 <_dtoa_r+0xb0>
 8017cb6:	4b97      	ldr	r3, [pc, #604]	; (8017f14 <_dtoa_r+0x2f4>)
 8017cb8:	e027      	b.n	8017d0a <_dtoa_r+0xea>
 8017cba:	4b97      	ldr	r3, [pc, #604]	; (8017f18 <_dtoa_r+0x2f8>)
 8017cbc:	9300      	str	r3, [sp, #0]
 8017cbe:	3308      	adds	r3, #8
 8017cc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017cc2:	6013      	str	r3, [r2, #0]
 8017cc4:	9800      	ldr	r0, [sp, #0]
 8017cc6:	b013      	add	sp, #76	; 0x4c
 8017cc8:	ecbd 8b04 	vpop	{d8-d9}
 8017ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cd0:	4b90      	ldr	r3, [pc, #576]	; (8017f14 <_dtoa_r+0x2f4>)
 8017cd2:	9300      	str	r3, [sp, #0]
 8017cd4:	3303      	adds	r3, #3
 8017cd6:	e7f3      	b.n	8017cc0 <_dtoa_r+0xa0>
 8017cd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017cdc:	2200      	movs	r2, #0
 8017cde:	ec51 0b17 	vmov	r0, r1, d7
 8017ce2:	eeb0 8a47 	vmov.f32	s16, s14
 8017ce6:	eef0 8a67 	vmov.f32	s17, s15
 8017cea:	2300      	movs	r3, #0
 8017cec:	f7e8 fefc 	bl	8000ae8 <__aeabi_dcmpeq>
 8017cf0:	4681      	mov	r9, r0
 8017cf2:	b160      	cbz	r0, 8017d0e <_dtoa_r+0xee>
 8017cf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	6013      	str	r3, [r2, #0]
 8017cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	f000 8568 	beq.w	80187d2 <_dtoa_r+0xbb2>
 8017d02:	4b86      	ldr	r3, [pc, #536]	; (8017f1c <_dtoa_r+0x2fc>)
 8017d04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017d06:	6013      	str	r3, [r2, #0]
 8017d08:	3b01      	subs	r3, #1
 8017d0a:	9300      	str	r3, [sp, #0]
 8017d0c:	e7da      	b.n	8017cc4 <_dtoa_r+0xa4>
 8017d0e:	aa10      	add	r2, sp, #64	; 0x40
 8017d10:	a911      	add	r1, sp, #68	; 0x44
 8017d12:	4620      	mov	r0, r4
 8017d14:	eeb0 0a48 	vmov.f32	s0, s16
 8017d18:	eef0 0a68 	vmov.f32	s1, s17
 8017d1c:	f001 f994 	bl	8019048 <__d2b>
 8017d20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017d24:	4682      	mov	sl, r0
 8017d26:	2d00      	cmp	r5, #0
 8017d28:	d07f      	beq.n	8017e2a <_dtoa_r+0x20a>
 8017d2a:	ee18 3a90 	vmov	r3, s17
 8017d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017d32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017d36:	ec51 0b18 	vmov	r0, r1, d8
 8017d3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017d3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017d42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017d46:	4619      	mov	r1, r3
 8017d48:	2200      	movs	r2, #0
 8017d4a:	4b75      	ldr	r3, [pc, #468]	; (8017f20 <_dtoa_r+0x300>)
 8017d4c:	f7e8 faac 	bl	80002a8 <__aeabi_dsub>
 8017d50:	a367      	add	r3, pc, #412	; (adr r3, 8017ef0 <_dtoa_r+0x2d0>)
 8017d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d56:	f7e8 fc5f 	bl	8000618 <__aeabi_dmul>
 8017d5a:	a367      	add	r3, pc, #412	; (adr r3, 8017ef8 <_dtoa_r+0x2d8>)
 8017d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d60:	f7e8 faa4 	bl	80002ac <__adddf3>
 8017d64:	4606      	mov	r6, r0
 8017d66:	4628      	mov	r0, r5
 8017d68:	460f      	mov	r7, r1
 8017d6a:	f7e8 fbeb 	bl	8000544 <__aeabi_i2d>
 8017d6e:	a364      	add	r3, pc, #400	; (adr r3, 8017f00 <_dtoa_r+0x2e0>)
 8017d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d74:	f7e8 fc50 	bl	8000618 <__aeabi_dmul>
 8017d78:	4602      	mov	r2, r0
 8017d7a:	460b      	mov	r3, r1
 8017d7c:	4630      	mov	r0, r6
 8017d7e:	4639      	mov	r1, r7
 8017d80:	f7e8 fa94 	bl	80002ac <__adddf3>
 8017d84:	4606      	mov	r6, r0
 8017d86:	460f      	mov	r7, r1
 8017d88:	f7e8 fef6 	bl	8000b78 <__aeabi_d2iz>
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	4683      	mov	fp, r0
 8017d90:	2300      	movs	r3, #0
 8017d92:	4630      	mov	r0, r6
 8017d94:	4639      	mov	r1, r7
 8017d96:	f7e8 feb1 	bl	8000afc <__aeabi_dcmplt>
 8017d9a:	b148      	cbz	r0, 8017db0 <_dtoa_r+0x190>
 8017d9c:	4658      	mov	r0, fp
 8017d9e:	f7e8 fbd1 	bl	8000544 <__aeabi_i2d>
 8017da2:	4632      	mov	r2, r6
 8017da4:	463b      	mov	r3, r7
 8017da6:	f7e8 fe9f 	bl	8000ae8 <__aeabi_dcmpeq>
 8017daa:	b908      	cbnz	r0, 8017db0 <_dtoa_r+0x190>
 8017dac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017db0:	f1bb 0f16 	cmp.w	fp, #22
 8017db4:	d857      	bhi.n	8017e66 <_dtoa_r+0x246>
 8017db6:	4b5b      	ldr	r3, [pc, #364]	; (8017f24 <_dtoa_r+0x304>)
 8017db8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dc0:	ec51 0b18 	vmov	r0, r1, d8
 8017dc4:	f7e8 fe9a 	bl	8000afc <__aeabi_dcmplt>
 8017dc8:	2800      	cmp	r0, #0
 8017dca:	d04e      	beq.n	8017e6a <_dtoa_r+0x24a>
 8017dcc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	930c      	str	r3, [sp, #48]	; 0x30
 8017dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017dd6:	1b5b      	subs	r3, r3, r5
 8017dd8:	1e5a      	subs	r2, r3, #1
 8017dda:	bf45      	ittet	mi
 8017ddc:	f1c3 0301 	rsbmi	r3, r3, #1
 8017de0:	9305      	strmi	r3, [sp, #20]
 8017de2:	2300      	movpl	r3, #0
 8017de4:	2300      	movmi	r3, #0
 8017de6:	9206      	str	r2, [sp, #24]
 8017de8:	bf54      	ite	pl
 8017dea:	9305      	strpl	r3, [sp, #20]
 8017dec:	9306      	strmi	r3, [sp, #24]
 8017dee:	f1bb 0f00 	cmp.w	fp, #0
 8017df2:	db3c      	blt.n	8017e6e <_dtoa_r+0x24e>
 8017df4:	9b06      	ldr	r3, [sp, #24]
 8017df6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8017dfa:	445b      	add	r3, fp
 8017dfc:	9306      	str	r3, [sp, #24]
 8017dfe:	2300      	movs	r3, #0
 8017e00:	9308      	str	r3, [sp, #32]
 8017e02:	9b07      	ldr	r3, [sp, #28]
 8017e04:	2b09      	cmp	r3, #9
 8017e06:	d868      	bhi.n	8017eda <_dtoa_r+0x2ba>
 8017e08:	2b05      	cmp	r3, #5
 8017e0a:	bfc4      	itt	gt
 8017e0c:	3b04      	subgt	r3, #4
 8017e0e:	9307      	strgt	r3, [sp, #28]
 8017e10:	9b07      	ldr	r3, [sp, #28]
 8017e12:	f1a3 0302 	sub.w	r3, r3, #2
 8017e16:	bfcc      	ite	gt
 8017e18:	2500      	movgt	r5, #0
 8017e1a:	2501      	movle	r5, #1
 8017e1c:	2b03      	cmp	r3, #3
 8017e1e:	f200 8085 	bhi.w	8017f2c <_dtoa_r+0x30c>
 8017e22:	e8df f003 	tbb	[pc, r3]
 8017e26:	3b2e      	.short	0x3b2e
 8017e28:	5839      	.short	0x5839
 8017e2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017e2e:	441d      	add	r5, r3
 8017e30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017e34:	2b20      	cmp	r3, #32
 8017e36:	bfc1      	itttt	gt
 8017e38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017e3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8017e40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8017e44:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017e48:	bfd6      	itet	le
 8017e4a:	f1c3 0320 	rsble	r3, r3, #32
 8017e4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8017e52:	fa06 f003 	lslle.w	r0, r6, r3
 8017e56:	f7e8 fb65 	bl	8000524 <__aeabi_ui2d>
 8017e5a:	2201      	movs	r2, #1
 8017e5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8017e60:	3d01      	subs	r5, #1
 8017e62:	920e      	str	r2, [sp, #56]	; 0x38
 8017e64:	e76f      	b.n	8017d46 <_dtoa_r+0x126>
 8017e66:	2301      	movs	r3, #1
 8017e68:	e7b3      	b.n	8017dd2 <_dtoa_r+0x1b2>
 8017e6a:	900c      	str	r0, [sp, #48]	; 0x30
 8017e6c:	e7b2      	b.n	8017dd4 <_dtoa_r+0x1b4>
 8017e6e:	9b05      	ldr	r3, [sp, #20]
 8017e70:	eba3 030b 	sub.w	r3, r3, fp
 8017e74:	9305      	str	r3, [sp, #20]
 8017e76:	f1cb 0300 	rsb	r3, fp, #0
 8017e7a:	9308      	str	r3, [sp, #32]
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e80:	e7bf      	b.n	8017e02 <_dtoa_r+0x1e2>
 8017e82:	2300      	movs	r3, #0
 8017e84:	9309      	str	r3, [sp, #36]	; 0x24
 8017e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	dc52      	bgt.n	8017f32 <_dtoa_r+0x312>
 8017e8c:	2301      	movs	r3, #1
 8017e8e:	9301      	str	r3, [sp, #4]
 8017e90:	9304      	str	r3, [sp, #16]
 8017e92:	461a      	mov	r2, r3
 8017e94:	920a      	str	r2, [sp, #40]	; 0x28
 8017e96:	e00b      	b.n	8017eb0 <_dtoa_r+0x290>
 8017e98:	2301      	movs	r3, #1
 8017e9a:	e7f3      	b.n	8017e84 <_dtoa_r+0x264>
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8017ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ea2:	445b      	add	r3, fp
 8017ea4:	9301      	str	r3, [sp, #4]
 8017ea6:	3301      	adds	r3, #1
 8017ea8:	2b01      	cmp	r3, #1
 8017eaa:	9304      	str	r3, [sp, #16]
 8017eac:	bfb8      	it	lt
 8017eae:	2301      	movlt	r3, #1
 8017eb0:	69e0      	ldr	r0, [r4, #28]
 8017eb2:	2100      	movs	r1, #0
 8017eb4:	2204      	movs	r2, #4
 8017eb6:	f102 0614 	add.w	r6, r2, #20
 8017eba:	429e      	cmp	r6, r3
 8017ebc:	d93d      	bls.n	8017f3a <_dtoa_r+0x31a>
 8017ebe:	6041      	str	r1, [r0, #4]
 8017ec0:	4620      	mov	r0, r4
 8017ec2:	f000 fd9f 	bl	8018a04 <_Balloc>
 8017ec6:	9000      	str	r0, [sp, #0]
 8017ec8:	2800      	cmp	r0, #0
 8017eca:	d139      	bne.n	8017f40 <_dtoa_r+0x320>
 8017ecc:	4b16      	ldr	r3, [pc, #88]	; (8017f28 <_dtoa_r+0x308>)
 8017ece:	4602      	mov	r2, r0
 8017ed0:	f240 11af 	movw	r1, #431	; 0x1af
 8017ed4:	e6bd      	b.n	8017c52 <_dtoa_r+0x32>
 8017ed6:	2301      	movs	r3, #1
 8017ed8:	e7e1      	b.n	8017e9e <_dtoa_r+0x27e>
 8017eda:	2501      	movs	r5, #1
 8017edc:	2300      	movs	r3, #0
 8017ede:	9307      	str	r3, [sp, #28]
 8017ee0:	9509      	str	r5, [sp, #36]	; 0x24
 8017ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ee6:	9301      	str	r3, [sp, #4]
 8017ee8:	9304      	str	r3, [sp, #16]
 8017eea:	2200      	movs	r2, #0
 8017eec:	2312      	movs	r3, #18
 8017eee:	e7d1      	b.n	8017e94 <_dtoa_r+0x274>
 8017ef0:	636f4361 	.word	0x636f4361
 8017ef4:	3fd287a7 	.word	0x3fd287a7
 8017ef8:	8b60c8b3 	.word	0x8b60c8b3
 8017efc:	3fc68a28 	.word	0x3fc68a28
 8017f00:	509f79fb 	.word	0x509f79fb
 8017f04:	3fd34413 	.word	0x3fd34413
 8017f08:	0801c4b6 	.word	0x0801c4b6
 8017f0c:	0801c4cd 	.word	0x0801c4cd
 8017f10:	7ff00000 	.word	0x7ff00000
 8017f14:	0801c4b2 	.word	0x0801c4b2
 8017f18:	0801c4a9 	.word	0x0801c4a9
 8017f1c:	0801c486 	.word	0x0801c486
 8017f20:	3ff80000 	.word	0x3ff80000
 8017f24:	0801c5b8 	.word	0x0801c5b8
 8017f28:	0801c525 	.word	0x0801c525
 8017f2c:	2301      	movs	r3, #1
 8017f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8017f30:	e7d7      	b.n	8017ee2 <_dtoa_r+0x2c2>
 8017f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f34:	9301      	str	r3, [sp, #4]
 8017f36:	9304      	str	r3, [sp, #16]
 8017f38:	e7ba      	b.n	8017eb0 <_dtoa_r+0x290>
 8017f3a:	3101      	adds	r1, #1
 8017f3c:	0052      	lsls	r2, r2, #1
 8017f3e:	e7ba      	b.n	8017eb6 <_dtoa_r+0x296>
 8017f40:	69e3      	ldr	r3, [r4, #28]
 8017f42:	9a00      	ldr	r2, [sp, #0]
 8017f44:	601a      	str	r2, [r3, #0]
 8017f46:	9b04      	ldr	r3, [sp, #16]
 8017f48:	2b0e      	cmp	r3, #14
 8017f4a:	f200 80a8 	bhi.w	801809e <_dtoa_r+0x47e>
 8017f4e:	2d00      	cmp	r5, #0
 8017f50:	f000 80a5 	beq.w	801809e <_dtoa_r+0x47e>
 8017f54:	f1bb 0f00 	cmp.w	fp, #0
 8017f58:	dd38      	ble.n	8017fcc <_dtoa_r+0x3ac>
 8017f5a:	4bc0      	ldr	r3, [pc, #768]	; (801825c <_dtoa_r+0x63c>)
 8017f5c:	f00b 020f 	and.w	r2, fp, #15
 8017f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017f68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017f6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017f70:	d019      	beq.n	8017fa6 <_dtoa_r+0x386>
 8017f72:	4bbb      	ldr	r3, [pc, #748]	; (8018260 <_dtoa_r+0x640>)
 8017f74:	ec51 0b18 	vmov	r0, r1, d8
 8017f78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017f7c:	f7e8 fc76 	bl	800086c <__aeabi_ddiv>
 8017f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f84:	f008 080f 	and.w	r8, r8, #15
 8017f88:	2503      	movs	r5, #3
 8017f8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8018260 <_dtoa_r+0x640>
 8017f8e:	f1b8 0f00 	cmp.w	r8, #0
 8017f92:	d10a      	bne.n	8017faa <_dtoa_r+0x38a>
 8017f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017f98:	4632      	mov	r2, r6
 8017f9a:	463b      	mov	r3, r7
 8017f9c:	f7e8 fc66 	bl	800086c <__aeabi_ddiv>
 8017fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017fa4:	e02b      	b.n	8017ffe <_dtoa_r+0x3de>
 8017fa6:	2502      	movs	r5, #2
 8017fa8:	e7ef      	b.n	8017f8a <_dtoa_r+0x36a>
 8017faa:	f018 0f01 	tst.w	r8, #1
 8017fae:	d008      	beq.n	8017fc2 <_dtoa_r+0x3a2>
 8017fb0:	4630      	mov	r0, r6
 8017fb2:	4639      	mov	r1, r7
 8017fb4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017fb8:	f7e8 fb2e 	bl	8000618 <__aeabi_dmul>
 8017fbc:	3501      	adds	r5, #1
 8017fbe:	4606      	mov	r6, r0
 8017fc0:	460f      	mov	r7, r1
 8017fc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017fc6:	f109 0908 	add.w	r9, r9, #8
 8017fca:	e7e0      	b.n	8017f8e <_dtoa_r+0x36e>
 8017fcc:	f000 809f 	beq.w	801810e <_dtoa_r+0x4ee>
 8017fd0:	f1cb 0600 	rsb	r6, fp, #0
 8017fd4:	4ba1      	ldr	r3, [pc, #644]	; (801825c <_dtoa_r+0x63c>)
 8017fd6:	4fa2      	ldr	r7, [pc, #648]	; (8018260 <_dtoa_r+0x640>)
 8017fd8:	f006 020f 	and.w	r2, r6, #15
 8017fdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fe4:	ec51 0b18 	vmov	r0, r1, d8
 8017fe8:	f7e8 fb16 	bl	8000618 <__aeabi_dmul>
 8017fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ff0:	1136      	asrs	r6, r6, #4
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	2502      	movs	r5, #2
 8017ff6:	2e00      	cmp	r6, #0
 8017ff8:	d17e      	bne.n	80180f8 <_dtoa_r+0x4d8>
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d1d0      	bne.n	8017fa0 <_dtoa_r+0x380>
 8017ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018000:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018004:	2b00      	cmp	r3, #0
 8018006:	f000 8084 	beq.w	8018112 <_dtoa_r+0x4f2>
 801800a:	4b96      	ldr	r3, [pc, #600]	; (8018264 <_dtoa_r+0x644>)
 801800c:	2200      	movs	r2, #0
 801800e:	4640      	mov	r0, r8
 8018010:	4649      	mov	r1, r9
 8018012:	f7e8 fd73 	bl	8000afc <__aeabi_dcmplt>
 8018016:	2800      	cmp	r0, #0
 8018018:	d07b      	beq.n	8018112 <_dtoa_r+0x4f2>
 801801a:	9b04      	ldr	r3, [sp, #16]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d078      	beq.n	8018112 <_dtoa_r+0x4f2>
 8018020:	9b01      	ldr	r3, [sp, #4]
 8018022:	2b00      	cmp	r3, #0
 8018024:	dd39      	ble.n	801809a <_dtoa_r+0x47a>
 8018026:	4b90      	ldr	r3, [pc, #576]	; (8018268 <_dtoa_r+0x648>)
 8018028:	2200      	movs	r2, #0
 801802a:	4640      	mov	r0, r8
 801802c:	4649      	mov	r1, r9
 801802e:	f7e8 faf3 	bl	8000618 <__aeabi_dmul>
 8018032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018036:	9e01      	ldr	r6, [sp, #4]
 8018038:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801803c:	3501      	adds	r5, #1
 801803e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018042:	4628      	mov	r0, r5
 8018044:	f7e8 fa7e 	bl	8000544 <__aeabi_i2d>
 8018048:	4642      	mov	r2, r8
 801804a:	464b      	mov	r3, r9
 801804c:	f7e8 fae4 	bl	8000618 <__aeabi_dmul>
 8018050:	4b86      	ldr	r3, [pc, #536]	; (801826c <_dtoa_r+0x64c>)
 8018052:	2200      	movs	r2, #0
 8018054:	f7e8 f92a 	bl	80002ac <__adddf3>
 8018058:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801805c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018060:	9303      	str	r3, [sp, #12]
 8018062:	2e00      	cmp	r6, #0
 8018064:	d158      	bne.n	8018118 <_dtoa_r+0x4f8>
 8018066:	4b82      	ldr	r3, [pc, #520]	; (8018270 <_dtoa_r+0x650>)
 8018068:	2200      	movs	r2, #0
 801806a:	4640      	mov	r0, r8
 801806c:	4649      	mov	r1, r9
 801806e:	f7e8 f91b 	bl	80002a8 <__aeabi_dsub>
 8018072:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018076:	4680      	mov	r8, r0
 8018078:	4689      	mov	r9, r1
 801807a:	f7e8 fd5d 	bl	8000b38 <__aeabi_dcmpgt>
 801807e:	2800      	cmp	r0, #0
 8018080:	f040 8296 	bne.w	80185b0 <_dtoa_r+0x990>
 8018084:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018088:	4640      	mov	r0, r8
 801808a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801808e:	4649      	mov	r1, r9
 8018090:	f7e8 fd34 	bl	8000afc <__aeabi_dcmplt>
 8018094:	2800      	cmp	r0, #0
 8018096:	f040 8289 	bne.w	80185ac <_dtoa_r+0x98c>
 801809a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801809e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	f2c0 814e 	blt.w	8018342 <_dtoa_r+0x722>
 80180a6:	f1bb 0f0e 	cmp.w	fp, #14
 80180aa:	f300 814a 	bgt.w	8018342 <_dtoa_r+0x722>
 80180ae:	4b6b      	ldr	r3, [pc, #428]	; (801825c <_dtoa_r+0x63c>)
 80180b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80180b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80180b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	f280 80dc 	bge.w	8018278 <_dtoa_r+0x658>
 80180c0:	9b04      	ldr	r3, [sp, #16]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	f300 80d8 	bgt.w	8018278 <_dtoa_r+0x658>
 80180c8:	f040 826f 	bne.w	80185aa <_dtoa_r+0x98a>
 80180cc:	4b68      	ldr	r3, [pc, #416]	; (8018270 <_dtoa_r+0x650>)
 80180ce:	2200      	movs	r2, #0
 80180d0:	4640      	mov	r0, r8
 80180d2:	4649      	mov	r1, r9
 80180d4:	f7e8 faa0 	bl	8000618 <__aeabi_dmul>
 80180d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80180dc:	f7e8 fd22 	bl	8000b24 <__aeabi_dcmpge>
 80180e0:	9e04      	ldr	r6, [sp, #16]
 80180e2:	4637      	mov	r7, r6
 80180e4:	2800      	cmp	r0, #0
 80180e6:	f040 8245 	bne.w	8018574 <_dtoa_r+0x954>
 80180ea:	9d00      	ldr	r5, [sp, #0]
 80180ec:	2331      	movs	r3, #49	; 0x31
 80180ee:	f805 3b01 	strb.w	r3, [r5], #1
 80180f2:	f10b 0b01 	add.w	fp, fp, #1
 80180f6:	e241      	b.n	801857c <_dtoa_r+0x95c>
 80180f8:	07f2      	lsls	r2, r6, #31
 80180fa:	d505      	bpl.n	8018108 <_dtoa_r+0x4e8>
 80180fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018100:	f7e8 fa8a 	bl	8000618 <__aeabi_dmul>
 8018104:	3501      	adds	r5, #1
 8018106:	2301      	movs	r3, #1
 8018108:	1076      	asrs	r6, r6, #1
 801810a:	3708      	adds	r7, #8
 801810c:	e773      	b.n	8017ff6 <_dtoa_r+0x3d6>
 801810e:	2502      	movs	r5, #2
 8018110:	e775      	b.n	8017ffe <_dtoa_r+0x3de>
 8018112:	9e04      	ldr	r6, [sp, #16]
 8018114:	465f      	mov	r7, fp
 8018116:	e792      	b.n	801803e <_dtoa_r+0x41e>
 8018118:	9900      	ldr	r1, [sp, #0]
 801811a:	4b50      	ldr	r3, [pc, #320]	; (801825c <_dtoa_r+0x63c>)
 801811c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018120:	4431      	add	r1, r6
 8018122:	9102      	str	r1, [sp, #8]
 8018124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018126:	eeb0 9a47 	vmov.f32	s18, s14
 801812a:	eef0 9a67 	vmov.f32	s19, s15
 801812e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8018132:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018136:	2900      	cmp	r1, #0
 8018138:	d044      	beq.n	80181c4 <_dtoa_r+0x5a4>
 801813a:	494e      	ldr	r1, [pc, #312]	; (8018274 <_dtoa_r+0x654>)
 801813c:	2000      	movs	r0, #0
 801813e:	f7e8 fb95 	bl	800086c <__aeabi_ddiv>
 8018142:	ec53 2b19 	vmov	r2, r3, d9
 8018146:	f7e8 f8af 	bl	80002a8 <__aeabi_dsub>
 801814a:	9d00      	ldr	r5, [sp, #0]
 801814c:	ec41 0b19 	vmov	d9, r0, r1
 8018150:	4649      	mov	r1, r9
 8018152:	4640      	mov	r0, r8
 8018154:	f7e8 fd10 	bl	8000b78 <__aeabi_d2iz>
 8018158:	4606      	mov	r6, r0
 801815a:	f7e8 f9f3 	bl	8000544 <__aeabi_i2d>
 801815e:	4602      	mov	r2, r0
 8018160:	460b      	mov	r3, r1
 8018162:	4640      	mov	r0, r8
 8018164:	4649      	mov	r1, r9
 8018166:	f7e8 f89f 	bl	80002a8 <__aeabi_dsub>
 801816a:	3630      	adds	r6, #48	; 0x30
 801816c:	f805 6b01 	strb.w	r6, [r5], #1
 8018170:	ec53 2b19 	vmov	r2, r3, d9
 8018174:	4680      	mov	r8, r0
 8018176:	4689      	mov	r9, r1
 8018178:	f7e8 fcc0 	bl	8000afc <__aeabi_dcmplt>
 801817c:	2800      	cmp	r0, #0
 801817e:	d164      	bne.n	801824a <_dtoa_r+0x62a>
 8018180:	4642      	mov	r2, r8
 8018182:	464b      	mov	r3, r9
 8018184:	4937      	ldr	r1, [pc, #220]	; (8018264 <_dtoa_r+0x644>)
 8018186:	2000      	movs	r0, #0
 8018188:	f7e8 f88e 	bl	80002a8 <__aeabi_dsub>
 801818c:	ec53 2b19 	vmov	r2, r3, d9
 8018190:	f7e8 fcb4 	bl	8000afc <__aeabi_dcmplt>
 8018194:	2800      	cmp	r0, #0
 8018196:	f040 80b6 	bne.w	8018306 <_dtoa_r+0x6e6>
 801819a:	9b02      	ldr	r3, [sp, #8]
 801819c:	429d      	cmp	r5, r3
 801819e:	f43f af7c 	beq.w	801809a <_dtoa_r+0x47a>
 80181a2:	4b31      	ldr	r3, [pc, #196]	; (8018268 <_dtoa_r+0x648>)
 80181a4:	ec51 0b19 	vmov	r0, r1, d9
 80181a8:	2200      	movs	r2, #0
 80181aa:	f7e8 fa35 	bl	8000618 <__aeabi_dmul>
 80181ae:	4b2e      	ldr	r3, [pc, #184]	; (8018268 <_dtoa_r+0x648>)
 80181b0:	ec41 0b19 	vmov	d9, r0, r1
 80181b4:	2200      	movs	r2, #0
 80181b6:	4640      	mov	r0, r8
 80181b8:	4649      	mov	r1, r9
 80181ba:	f7e8 fa2d 	bl	8000618 <__aeabi_dmul>
 80181be:	4680      	mov	r8, r0
 80181c0:	4689      	mov	r9, r1
 80181c2:	e7c5      	b.n	8018150 <_dtoa_r+0x530>
 80181c4:	ec51 0b17 	vmov	r0, r1, d7
 80181c8:	f7e8 fa26 	bl	8000618 <__aeabi_dmul>
 80181cc:	9b02      	ldr	r3, [sp, #8]
 80181ce:	9d00      	ldr	r5, [sp, #0]
 80181d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80181d2:	ec41 0b19 	vmov	d9, r0, r1
 80181d6:	4649      	mov	r1, r9
 80181d8:	4640      	mov	r0, r8
 80181da:	f7e8 fccd 	bl	8000b78 <__aeabi_d2iz>
 80181de:	4606      	mov	r6, r0
 80181e0:	f7e8 f9b0 	bl	8000544 <__aeabi_i2d>
 80181e4:	3630      	adds	r6, #48	; 0x30
 80181e6:	4602      	mov	r2, r0
 80181e8:	460b      	mov	r3, r1
 80181ea:	4640      	mov	r0, r8
 80181ec:	4649      	mov	r1, r9
 80181ee:	f7e8 f85b 	bl	80002a8 <__aeabi_dsub>
 80181f2:	f805 6b01 	strb.w	r6, [r5], #1
 80181f6:	9b02      	ldr	r3, [sp, #8]
 80181f8:	429d      	cmp	r5, r3
 80181fa:	4680      	mov	r8, r0
 80181fc:	4689      	mov	r9, r1
 80181fe:	f04f 0200 	mov.w	r2, #0
 8018202:	d124      	bne.n	801824e <_dtoa_r+0x62e>
 8018204:	4b1b      	ldr	r3, [pc, #108]	; (8018274 <_dtoa_r+0x654>)
 8018206:	ec51 0b19 	vmov	r0, r1, d9
 801820a:	f7e8 f84f 	bl	80002ac <__adddf3>
 801820e:	4602      	mov	r2, r0
 8018210:	460b      	mov	r3, r1
 8018212:	4640      	mov	r0, r8
 8018214:	4649      	mov	r1, r9
 8018216:	f7e8 fc8f 	bl	8000b38 <__aeabi_dcmpgt>
 801821a:	2800      	cmp	r0, #0
 801821c:	d173      	bne.n	8018306 <_dtoa_r+0x6e6>
 801821e:	ec53 2b19 	vmov	r2, r3, d9
 8018222:	4914      	ldr	r1, [pc, #80]	; (8018274 <_dtoa_r+0x654>)
 8018224:	2000      	movs	r0, #0
 8018226:	f7e8 f83f 	bl	80002a8 <__aeabi_dsub>
 801822a:	4602      	mov	r2, r0
 801822c:	460b      	mov	r3, r1
 801822e:	4640      	mov	r0, r8
 8018230:	4649      	mov	r1, r9
 8018232:	f7e8 fc63 	bl	8000afc <__aeabi_dcmplt>
 8018236:	2800      	cmp	r0, #0
 8018238:	f43f af2f 	beq.w	801809a <_dtoa_r+0x47a>
 801823c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801823e:	1e6b      	subs	r3, r5, #1
 8018240:	930f      	str	r3, [sp, #60]	; 0x3c
 8018242:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018246:	2b30      	cmp	r3, #48	; 0x30
 8018248:	d0f8      	beq.n	801823c <_dtoa_r+0x61c>
 801824a:	46bb      	mov	fp, r7
 801824c:	e04a      	b.n	80182e4 <_dtoa_r+0x6c4>
 801824e:	4b06      	ldr	r3, [pc, #24]	; (8018268 <_dtoa_r+0x648>)
 8018250:	f7e8 f9e2 	bl	8000618 <__aeabi_dmul>
 8018254:	4680      	mov	r8, r0
 8018256:	4689      	mov	r9, r1
 8018258:	e7bd      	b.n	80181d6 <_dtoa_r+0x5b6>
 801825a:	bf00      	nop
 801825c:	0801c5b8 	.word	0x0801c5b8
 8018260:	0801c590 	.word	0x0801c590
 8018264:	3ff00000 	.word	0x3ff00000
 8018268:	40240000 	.word	0x40240000
 801826c:	401c0000 	.word	0x401c0000
 8018270:	40140000 	.word	0x40140000
 8018274:	3fe00000 	.word	0x3fe00000
 8018278:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801827c:	9d00      	ldr	r5, [sp, #0]
 801827e:	4642      	mov	r2, r8
 8018280:	464b      	mov	r3, r9
 8018282:	4630      	mov	r0, r6
 8018284:	4639      	mov	r1, r7
 8018286:	f7e8 faf1 	bl	800086c <__aeabi_ddiv>
 801828a:	f7e8 fc75 	bl	8000b78 <__aeabi_d2iz>
 801828e:	9001      	str	r0, [sp, #4]
 8018290:	f7e8 f958 	bl	8000544 <__aeabi_i2d>
 8018294:	4642      	mov	r2, r8
 8018296:	464b      	mov	r3, r9
 8018298:	f7e8 f9be 	bl	8000618 <__aeabi_dmul>
 801829c:	4602      	mov	r2, r0
 801829e:	460b      	mov	r3, r1
 80182a0:	4630      	mov	r0, r6
 80182a2:	4639      	mov	r1, r7
 80182a4:	f7e8 f800 	bl	80002a8 <__aeabi_dsub>
 80182a8:	9e01      	ldr	r6, [sp, #4]
 80182aa:	9f04      	ldr	r7, [sp, #16]
 80182ac:	3630      	adds	r6, #48	; 0x30
 80182ae:	f805 6b01 	strb.w	r6, [r5], #1
 80182b2:	9e00      	ldr	r6, [sp, #0]
 80182b4:	1bae      	subs	r6, r5, r6
 80182b6:	42b7      	cmp	r7, r6
 80182b8:	4602      	mov	r2, r0
 80182ba:	460b      	mov	r3, r1
 80182bc:	d134      	bne.n	8018328 <_dtoa_r+0x708>
 80182be:	f7e7 fff5 	bl	80002ac <__adddf3>
 80182c2:	4642      	mov	r2, r8
 80182c4:	464b      	mov	r3, r9
 80182c6:	4606      	mov	r6, r0
 80182c8:	460f      	mov	r7, r1
 80182ca:	f7e8 fc35 	bl	8000b38 <__aeabi_dcmpgt>
 80182ce:	b9c8      	cbnz	r0, 8018304 <_dtoa_r+0x6e4>
 80182d0:	4642      	mov	r2, r8
 80182d2:	464b      	mov	r3, r9
 80182d4:	4630      	mov	r0, r6
 80182d6:	4639      	mov	r1, r7
 80182d8:	f7e8 fc06 	bl	8000ae8 <__aeabi_dcmpeq>
 80182dc:	b110      	cbz	r0, 80182e4 <_dtoa_r+0x6c4>
 80182de:	9b01      	ldr	r3, [sp, #4]
 80182e0:	07db      	lsls	r3, r3, #31
 80182e2:	d40f      	bmi.n	8018304 <_dtoa_r+0x6e4>
 80182e4:	4651      	mov	r1, sl
 80182e6:	4620      	mov	r0, r4
 80182e8:	f000 fbcc 	bl	8018a84 <_Bfree>
 80182ec:	2300      	movs	r3, #0
 80182ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80182f0:	702b      	strb	r3, [r5, #0]
 80182f2:	f10b 0301 	add.w	r3, fp, #1
 80182f6:	6013      	str	r3, [r2, #0]
 80182f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	f43f ace2 	beq.w	8017cc4 <_dtoa_r+0xa4>
 8018300:	601d      	str	r5, [r3, #0]
 8018302:	e4df      	b.n	8017cc4 <_dtoa_r+0xa4>
 8018304:	465f      	mov	r7, fp
 8018306:	462b      	mov	r3, r5
 8018308:	461d      	mov	r5, r3
 801830a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801830e:	2a39      	cmp	r2, #57	; 0x39
 8018310:	d106      	bne.n	8018320 <_dtoa_r+0x700>
 8018312:	9a00      	ldr	r2, [sp, #0]
 8018314:	429a      	cmp	r2, r3
 8018316:	d1f7      	bne.n	8018308 <_dtoa_r+0x6e8>
 8018318:	9900      	ldr	r1, [sp, #0]
 801831a:	2230      	movs	r2, #48	; 0x30
 801831c:	3701      	adds	r7, #1
 801831e:	700a      	strb	r2, [r1, #0]
 8018320:	781a      	ldrb	r2, [r3, #0]
 8018322:	3201      	adds	r2, #1
 8018324:	701a      	strb	r2, [r3, #0]
 8018326:	e790      	b.n	801824a <_dtoa_r+0x62a>
 8018328:	4ba3      	ldr	r3, [pc, #652]	; (80185b8 <_dtoa_r+0x998>)
 801832a:	2200      	movs	r2, #0
 801832c:	f7e8 f974 	bl	8000618 <__aeabi_dmul>
 8018330:	2200      	movs	r2, #0
 8018332:	2300      	movs	r3, #0
 8018334:	4606      	mov	r6, r0
 8018336:	460f      	mov	r7, r1
 8018338:	f7e8 fbd6 	bl	8000ae8 <__aeabi_dcmpeq>
 801833c:	2800      	cmp	r0, #0
 801833e:	d09e      	beq.n	801827e <_dtoa_r+0x65e>
 8018340:	e7d0      	b.n	80182e4 <_dtoa_r+0x6c4>
 8018342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018344:	2a00      	cmp	r2, #0
 8018346:	f000 80ca 	beq.w	80184de <_dtoa_r+0x8be>
 801834a:	9a07      	ldr	r2, [sp, #28]
 801834c:	2a01      	cmp	r2, #1
 801834e:	f300 80ad 	bgt.w	80184ac <_dtoa_r+0x88c>
 8018352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018354:	2a00      	cmp	r2, #0
 8018356:	f000 80a5 	beq.w	80184a4 <_dtoa_r+0x884>
 801835a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801835e:	9e08      	ldr	r6, [sp, #32]
 8018360:	9d05      	ldr	r5, [sp, #20]
 8018362:	9a05      	ldr	r2, [sp, #20]
 8018364:	441a      	add	r2, r3
 8018366:	9205      	str	r2, [sp, #20]
 8018368:	9a06      	ldr	r2, [sp, #24]
 801836a:	2101      	movs	r1, #1
 801836c:	441a      	add	r2, r3
 801836e:	4620      	mov	r0, r4
 8018370:	9206      	str	r2, [sp, #24]
 8018372:	f000 fc3d 	bl	8018bf0 <__i2b>
 8018376:	4607      	mov	r7, r0
 8018378:	b165      	cbz	r5, 8018394 <_dtoa_r+0x774>
 801837a:	9b06      	ldr	r3, [sp, #24]
 801837c:	2b00      	cmp	r3, #0
 801837e:	dd09      	ble.n	8018394 <_dtoa_r+0x774>
 8018380:	42ab      	cmp	r3, r5
 8018382:	9a05      	ldr	r2, [sp, #20]
 8018384:	bfa8      	it	ge
 8018386:	462b      	movge	r3, r5
 8018388:	1ad2      	subs	r2, r2, r3
 801838a:	9205      	str	r2, [sp, #20]
 801838c:	9a06      	ldr	r2, [sp, #24]
 801838e:	1aed      	subs	r5, r5, r3
 8018390:	1ad3      	subs	r3, r2, r3
 8018392:	9306      	str	r3, [sp, #24]
 8018394:	9b08      	ldr	r3, [sp, #32]
 8018396:	b1f3      	cbz	r3, 80183d6 <_dtoa_r+0x7b6>
 8018398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801839a:	2b00      	cmp	r3, #0
 801839c:	f000 80a3 	beq.w	80184e6 <_dtoa_r+0x8c6>
 80183a0:	2e00      	cmp	r6, #0
 80183a2:	dd10      	ble.n	80183c6 <_dtoa_r+0x7a6>
 80183a4:	4639      	mov	r1, r7
 80183a6:	4632      	mov	r2, r6
 80183a8:	4620      	mov	r0, r4
 80183aa:	f000 fce1 	bl	8018d70 <__pow5mult>
 80183ae:	4652      	mov	r2, sl
 80183b0:	4601      	mov	r1, r0
 80183b2:	4607      	mov	r7, r0
 80183b4:	4620      	mov	r0, r4
 80183b6:	f000 fc31 	bl	8018c1c <__multiply>
 80183ba:	4651      	mov	r1, sl
 80183bc:	4680      	mov	r8, r0
 80183be:	4620      	mov	r0, r4
 80183c0:	f000 fb60 	bl	8018a84 <_Bfree>
 80183c4:	46c2      	mov	sl, r8
 80183c6:	9b08      	ldr	r3, [sp, #32]
 80183c8:	1b9a      	subs	r2, r3, r6
 80183ca:	d004      	beq.n	80183d6 <_dtoa_r+0x7b6>
 80183cc:	4651      	mov	r1, sl
 80183ce:	4620      	mov	r0, r4
 80183d0:	f000 fcce 	bl	8018d70 <__pow5mult>
 80183d4:	4682      	mov	sl, r0
 80183d6:	2101      	movs	r1, #1
 80183d8:	4620      	mov	r0, r4
 80183da:	f000 fc09 	bl	8018bf0 <__i2b>
 80183de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	4606      	mov	r6, r0
 80183e4:	f340 8081 	ble.w	80184ea <_dtoa_r+0x8ca>
 80183e8:	461a      	mov	r2, r3
 80183ea:	4601      	mov	r1, r0
 80183ec:	4620      	mov	r0, r4
 80183ee:	f000 fcbf 	bl	8018d70 <__pow5mult>
 80183f2:	9b07      	ldr	r3, [sp, #28]
 80183f4:	2b01      	cmp	r3, #1
 80183f6:	4606      	mov	r6, r0
 80183f8:	dd7a      	ble.n	80184f0 <_dtoa_r+0x8d0>
 80183fa:	f04f 0800 	mov.w	r8, #0
 80183fe:	6933      	ldr	r3, [r6, #16]
 8018400:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018404:	6918      	ldr	r0, [r3, #16]
 8018406:	f000 fba5 	bl	8018b54 <__hi0bits>
 801840a:	f1c0 0020 	rsb	r0, r0, #32
 801840e:	9b06      	ldr	r3, [sp, #24]
 8018410:	4418      	add	r0, r3
 8018412:	f010 001f 	ands.w	r0, r0, #31
 8018416:	f000 8094 	beq.w	8018542 <_dtoa_r+0x922>
 801841a:	f1c0 0320 	rsb	r3, r0, #32
 801841e:	2b04      	cmp	r3, #4
 8018420:	f340 8085 	ble.w	801852e <_dtoa_r+0x90e>
 8018424:	9b05      	ldr	r3, [sp, #20]
 8018426:	f1c0 001c 	rsb	r0, r0, #28
 801842a:	4403      	add	r3, r0
 801842c:	9305      	str	r3, [sp, #20]
 801842e:	9b06      	ldr	r3, [sp, #24]
 8018430:	4403      	add	r3, r0
 8018432:	4405      	add	r5, r0
 8018434:	9306      	str	r3, [sp, #24]
 8018436:	9b05      	ldr	r3, [sp, #20]
 8018438:	2b00      	cmp	r3, #0
 801843a:	dd05      	ble.n	8018448 <_dtoa_r+0x828>
 801843c:	4651      	mov	r1, sl
 801843e:	461a      	mov	r2, r3
 8018440:	4620      	mov	r0, r4
 8018442:	f000 fcef 	bl	8018e24 <__lshift>
 8018446:	4682      	mov	sl, r0
 8018448:	9b06      	ldr	r3, [sp, #24]
 801844a:	2b00      	cmp	r3, #0
 801844c:	dd05      	ble.n	801845a <_dtoa_r+0x83a>
 801844e:	4631      	mov	r1, r6
 8018450:	461a      	mov	r2, r3
 8018452:	4620      	mov	r0, r4
 8018454:	f000 fce6 	bl	8018e24 <__lshift>
 8018458:	4606      	mov	r6, r0
 801845a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801845c:	2b00      	cmp	r3, #0
 801845e:	d072      	beq.n	8018546 <_dtoa_r+0x926>
 8018460:	4631      	mov	r1, r6
 8018462:	4650      	mov	r0, sl
 8018464:	f000 fd4a 	bl	8018efc <__mcmp>
 8018468:	2800      	cmp	r0, #0
 801846a:	da6c      	bge.n	8018546 <_dtoa_r+0x926>
 801846c:	2300      	movs	r3, #0
 801846e:	4651      	mov	r1, sl
 8018470:	220a      	movs	r2, #10
 8018472:	4620      	mov	r0, r4
 8018474:	f000 fb28 	bl	8018ac8 <__multadd>
 8018478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801847a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801847e:	4682      	mov	sl, r0
 8018480:	2b00      	cmp	r3, #0
 8018482:	f000 81b0 	beq.w	80187e6 <_dtoa_r+0xbc6>
 8018486:	2300      	movs	r3, #0
 8018488:	4639      	mov	r1, r7
 801848a:	220a      	movs	r2, #10
 801848c:	4620      	mov	r0, r4
 801848e:	f000 fb1b 	bl	8018ac8 <__multadd>
 8018492:	9b01      	ldr	r3, [sp, #4]
 8018494:	2b00      	cmp	r3, #0
 8018496:	4607      	mov	r7, r0
 8018498:	f300 8096 	bgt.w	80185c8 <_dtoa_r+0x9a8>
 801849c:	9b07      	ldr	r3, [sp, #28]
 801849e:	2b02      	cmp	r3, #2
 80184a0:	dc59      	bgt.n	8018556 <_dtoa_r+0x936>
 80184a2:	e091      	b.n	80185c8 <_dtoa_r+0x9a8>
 80184a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80184a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80184aa:	e758      	b.n	801835e <_dtoa_r+0x73e>
 80184ac:	9b04      	ldr	r3, [sp, #16]
 80184ae:	1e5e      	subs	r6, r3, #1
 80184b0:	9b08      	ldr	r3, [sp, #32]
 80184b2:	42b3      	cmp	r3, r6
 80184b4:	bfbf      	itttt	lt
 80184b6:	9b08      	ldrlt	r3, [sp, #32]
 80184b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80184ba:	9608      	strlt	r6, [sp, #32]
 80184bc:	1af3      	sublt	r3, r6, r3
 80184be:	bfb4      	ite	lt
 80184c0:	18d2      	addlt	r2, r2, r3
 80184c2:	1b9e      	subge	r6, r3, r6
 80184c4:	9b04      	ldr	r3, [sp, #16]
 80184c6:	bfbc      	itt	lt
 80184c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80184ca:	2600      	movlt	r6, #0
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	bfb7      	itett	lt
 80184d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80184d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80184d8:	1a9d      	sublt	r5, r3, r2
 80184da:	2300      	movlt	r3, #0
 80184dc:	e741      	b.n	8018362 <_dtoa_r+0x742>
 80184de:	9e08      	ldr	r6, [sp, #32]
 80184e0:	9d05      	ldr	r5, [sp, #20]
 80184e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80184e4:	e748      	b.n	8018378 <_dtoa_r+0x758>
 80184e6:	9a08      	ldr	r2, [sp, #32]
 80184e8:	e770      	b.n	80183cc <_dtoa_r+0x7ac>
 80184ea:	9b07      	ldr	r3, [sp, #28]
 80184ec:	2b01      	cmp	r3, #1
 80184ee:	dc19      	bgt.n	8018524 <_dtoa_r+0x904>
 80184f0:	9b02      	ldr	r3, [sp, #8]
 80184f2:	b9bb      	cbnz	r3, 8018524 <_dtoa_r+0x904>
 80184f4:	9b03      	ldr	r3, [sp, #12]
 80184f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80184fa:	b99b      	cbnz	r3, 8018524 <_dtoa_r+0x904>
 80184fc:	9b03      	ldr	r3, [sp, #12]
 80184fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018502:	0d1b      	lsrs	r3, r3, #20
 8018504:	051b      	lsls	r3, r3, #20
 8018506:	b183      	cbz	r3, 801852a <_dtoa_r+0x90a>
 8018508:	9b05      	ldr	r3, [sp, #20]
 801850a:	3301      	adds	r3, #1
 801850c:	9305      	str	r3, [sp, #20]
 801850e:	9b06      	ldr	r3, [sp, #24]
 8018510:	3301      	adds	r3, #1
 8018512:	9306      	str	r3, [sp, #24]
 8018514:	f04f 0801 	mov.w	r8, #1
 8018518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801851a:	2b00      	cmp	r3, #0
 801851c:	f47f af6f 	bne.w	80183fe <_dtoa_r+0x7de>
 8018520:	2001      	movs	r0, #1
 8018522:	e774      	b.n	801840e <_dtoa_r+0x7ee>
 8018524:	f04f 0800 	mov.w	r8, #0
 8018528:	e7f6      	b.n	8018518 <_dtoa_r+0x8f8>
 801852a:	4698      	mov	r8, r3
 801852c:	e7f4      	b.n	8018518 <_dtoa_r+0x8f8>
 801852e:	d082      	beq.n	8018436 <_dtoa_r+0x816>
 8018530:	9a05      	ldr	r2, [sp, #20]
 8018532:	331c      	adds	r3, #28
 8018534:	441a      	add	r2, r3
 8018536:	9205      	str	r2, [sp, #20]
 8018538:	9a06      	ldr	r2, [sp, #24]
 801853a:	441a      	add	r2, r3
 801853c:	441d      	add	r5, r3
 801853e:	9206      	str	r2, [sp, #24]
 8018540:	e779      	b.n	8018436 <_dtoa_r+0x816>
 8018542:	4603      	mov	r3, r0
 8018544:	e7f4      	b.n	8018530 <_dtoa_r+0x910>
 8018546:	9b04      	ldr	r3, [sp, #16]
 8018548:	2b00      	cmp	r3, #0
 801854a:	dc37      	bgt.n	80185bc <_dtoa_r+0x99c>
 801854c:	9b07      	ldr	r3, [sp, #28]
 801854e:	2b02      	cmp	r3, #2
 8018550:	dd34      	ble.n	80185bc <_dtoa_r+0x99c>
 8018552:	9b04      	ldr	r3, [sp, #16]
 8018554:	9301      	str	r3, [sp, #4]
 8018556:	9b01      	ldr	r3, [sp, #4]
 8018558:	b963      	cbnz	r3, 8018574 <_dtoa_r+0x954>
 801855a:	4631      	mov	r1, r6
 801855c:	2205      	movs	r2, #5
 801855e:	4620      	mov	r0, r4
 8018560:	f000 fab2 	bl	8018ac8 <__multadd>
 8018564:	4601      	mov	r1, r0
 8018566:	4606      	mov	r6, r0
 8018568:	4650      	mov	r0, sl
 801856a:	f000 fcc7 	bl	8018efc <__mcmp>
 801856e:	2800      	cmp	r0, #0
 8018570:	f73f adbb 	bgt.w	80180ea <_dtoa_r+0x4ca>
 8018574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018576:	9d00      	ldr	r5, [sp, #0]
 8018578:	ea6f 0b03 	mvn.w	fp, r3
 801857c:	f04f 0800 	mov.w	r8, #0
 8018580:	4631      	mov	r1, r6
 8018582:	4620      	mov	r0, r4
 8018584:	f000 fa7e 	bl	8018a84 <_Bfree>
 8018588:	2f00      	cmp	r7, #0
 801858a:	f43f aeab 	beq.w	80182e4 <_dtoa_r+0x6c4>
 801858e:	f1b8 0f00 	cmp.w	r8, #0
 8018592:	d005      	beq.n	80185a0 <_dtoa_r+0x980>
 8018594:	45b8      	cmp	r8, r7
 8018596:	d003      	beq.n	80185a0 <_dtoa_r+0x980>
 8018598:	4641      	mov	r1, r8
 801859a:	4620      	mov	r0, r4
 801859c:	f000 fa72 	bl	8018a84 <_Bfree>
 80185a0:	4639      	mov	r1, r7
 80185a2:	4620      	mov	r0, r4
 80185a4:	f000 fa6e 	bl	8018a84 <_Bfree>
 80185a8:	e69c      	b.n	80182e4 <_dtoa_r+0x6c4>
 80185aa:	2600      	movs	r6, #0
 80185ac:	4637      	mov	r7, r6
 80185ae:	e7e1      	b.n	8018574 <_dtoa_r+0x954>
 80185b0:	46bb      	mov	fp, r7
 80185b2:	4637      	mov	r7, r6
 80185b4:	e599      	b.n	80180ea <_dtoa_r+0x4ca>
 80185b6:	bf00      	nop
 80185b8:	40240000 	.word	0x40240000
 80185bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185be:	2b00      	cmp	r3, #0
 80185c0:	f000 80c8 	beq.w	8018754 <_dtoa_r+0xb34>
 80185c4:	9b04      	ldr	r3, [sp, #16]
 80185c6:	9301      	str	r3, [sp, #4]
 80185c8:	2d00      	cmp	r5, #0
 80185ca:	dd05      	ble.n	80185d8 <_dtoa_r+0x9b8>
 80185cc:	4639      	mov	r1, r7
 80185ce:	462a      	mov	r2, r5
 80185d0:	4620      	mov	r0, r4
 80185d2:	f000 fc27 	bl	8018e24 <__lshift>
 80185d6:	4607      	mov	r7, r0
 80185d8:	f1b8 0f00 	cmp.w	r8, #0
 80185dc:	d05b      	beq.n	8018696 <_dtoa_r+0xa76>
 80185de:	6879      	ldr	r1, [r7, #4]
 80185e0:	4620      	mov	r0, r4
 80185e2:	f000 fa0f 	bl	8018a04 <_Balloc>
 80185e6:	4605      	mov	r5, r0
 80185e8:	b928      	cbnz	r0, 80185f6 <_dtoa_r+0x9d6>
 80185ea:	4b83      	ldr	r3, [pc, #524]	; (80187f8 <_dtoa_r+0xbd8>)
 80185ec:	4602      	mov	r2, r0
 80185ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80185f2:	f7ff bb2e 	b.w	8017c52 <_dtoa_r+0x32>
 80185f6:	693a      	ldr	r2, [r7, #16]
 80185f8:	3202      	adds	r2, #2
 80185fa:	0092      	lsls	r2, r2, #2
 80185fc:	f107 010c 	add.w	r1, r7, #12
 8018600:	300c      	adds	r0, #12
 8018602:	f7ff fa76 	bl	8017af2 <memcpy>
 8018606:	2201      	movs	r2, #1
 8018608:	4629      	mov	r1, r5
 801860a:	4620      	mov	r0, r4
 801860c:	f000 fc0a 	bl	8018e24 <__lshift>
 8018610:	9b00      	ldr	r3, [sp, #0]
 8018612:	3301      	adds	r3, #1
 8018614:	9304      	str	r3, [sp, #16]
 8018616:	e9dd 2300 	ldrd	r2, r3, [sp]
 801861a:	4413      	add	r3, r2
 801861c:	9308      	str	r3, [sp, #32]
 801861e:	9b02      	ldr	r3, [sp, #8]
 8018620:	f003 0301 	and.w	r3, r3, #1
 8018624:	46b8      	mov	r8, r7
 8018626:	9306      	str	r3, [sp, #24]
 8018628:	4607      	mov	r7, r0
 801862a:	9b04      	ldr	r3, [sp, #16]
 801862c:	4631      	mov	r1, r6
 801862e:	3b01      	subs	r3, #1
 8018630:	4650      	mov	r0, sl
 8018632:	9301      	str	r3, [sp, #4]
 8018634:	f7ff fa6b 	bl	8017b0e <quorem>
 8018638:	4641      	mov	r1, r8
 801863a:	9002      	str	r0, [sp, #8]
 801863c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8018640:	4650      	mov	r0, sl
 8018642:	f000 fc5b 	bl	8018efc <__mcmp>
 8018646:	463a      	mov	r2, r7
 8018648:	9005      	str	r0, [sp, #20]
 801864a:	4631      	mov	r1, r6
 801864c:	4620      	mov	r0, r4
 801864e:	f000 fc71 	bl	8018f34 <__mdiff>
 8018652:	68c2      	ldr	r2, [r0, #12]
 8018654:	4605      	mov	r5, r0
 8018656:	bb02      	cbnz	r2, 801869a <_dtoa_r+0xa7a>
 8018658:	4601      	mov	r1, r0
 801865a:	4650      	mov	r0, sl
 801865c:	f000 fc4e 	bl	8018efc <__mcmp>
 8018660:	4602      	mov	r2, r0
 8018662:	4629      	mov	r1, r5
 8018664:	4620      	mov	r0, r4
 8018666:	9209      	str	r2, [sp, #36]	; 0x24
 8018668:	f000 fa0c 	bl	8018a84 <_Bfree>
 801866c:	9b07      	ldr	r3, [sp, #28]
 801866e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018670:	9d04      	ldr	r5, [sp, #16]
 8018672:	ea43 0102 	orr.w	r1, r3, r2
 8018676:	9b06      	ldr	r3, [sp, #24]
 8018678:	4319      	orrs	r1, r3
 801867a:	d110      	bne.n	801869e <_dtoa_r+0xa7e>
 801867c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018680:	d029      	beq.n	80186d6 <_dtoa_r+0xab6>
 8018682:	9b05      	ldr	r3, [sp, #20]
 8018684:	2b00      	cmp	r3, #0
 8018686:	dd02      	ble.n	801868e <_dtoa_r+0xa6e>
 8018688:	9b02      	ldr	r3, [sp, #8]
 801868a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801868e:	9b01      	ldr	r3, [sp, #4]
 8018690:	f883 9000 	strb.w	r9, [r3]
 8018694:	e774      	b.n	8018580 <_dtoa_r+0x960>
 8018696:	4638      	mov	r0, r7
 8018698:	e7ba      	b.n	8018610 <_dtoa_r+0x9f0>
 801869a:	2201      	movs	r2, #1
 801869c:	e7e1      	b.n	8018662 <_dtoa_r+0xa42>
 801869e:	9b05      	ldr	r3, [sp, #20]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	db04      	blt.n	80186ae <_dtoa_r+0xa8e>
 80186a4:	9907      	ldr	r1, [sp, #28]
 80186a6:	430b      	orrs	r3, r1
 80186a8:	9906      	ldr	r1, [sp, #24]
 80186aa:	430b      	orrs	r3, r1
 80186ac:	d120      	bne.n	80186f0 <_dtoa_r+0xad0>
 80186ae:	2a00      	cmp	r2, #0
 80186b0:	dded      	ble.n	801868e <_dtoa_r+0xa6e>
 80186b2:	4651      	mov	r1, sl
 80186b4:	2201      	movs	r2, #1
 80186b6:	4620      	mov	r0, r4
 80186b8:	f000 fbb4 	bl	8018e24 <__lshift>
 80186bc:	4631      	mov	r1, r6
 80186be:	4682      	mov	sl, r0
 80186c0:	f000 fc1c 	bl	8018efc <__mcmp>
 80186c4:	2800      	cmp	r0, #0
 80186c6:	dc03      	bgt.n	80186d0 <_dtoa_r+0xab0>
 80186c8:	d1e1      	bne.n	801868e <_dtoa_r+0xa6e>
 80186ca:	f019 0f01 	tst.w	r9, #1
 80186ce:	d0de      	beq.n	801868e <_dtoa_r+0xa6e>
 80186d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80186d4:	d1d8      	bne.n	8018688 <_dtoa_r+0xa68>
 80186d6:	9a01      	ldr	r2, [sp, #4]
 80186d8:	2339      	movs	r3, #57	; 0x39
 80186da:	7013      	strb	r3, [r2, #0]
 80186dc:	462b      	mov	r3, r5
 80186de:	461d      	mov	r5, r3
 80186e0:	3b01      	subs	r3, #1
 80186e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80186e6:	2a39      	cmp	r2, #57	; 0x39
 80186e8:	d06c      	beq.n	80187c4 <_dtoa_r+0xba4>
 80186ea:	3201      	adds	r2, #1
 80186ec:	701a      	strb	r2, [r3, #0]
 80186ee:	e747      	b.n	8018580 <_dtoa_r+0x960>
 80186f0:	2a00      	cmp	r2, #0
 80186f2:	dd07      	ble.n	8018704 <_dtoa_r+0xae4>
 80186f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80186f8:	d0ed      	beq.n	80186d6 <_dtoa_r+0xab6>
 80186fa:	9a01      	ldr	r2, [sp, #4]
 80186fc:	f109 0301 	add.w	r3, r9, #1
 8018700:	7013      	strb	r3, [r2, #0]
 8018702:	e73d      	b.n	8018580 <_dtoa_r+0x960>
 8018704:	9b04      	ldr	r3, [sp, #16]
 8018706:	9a08      	ldr	r2, [sp, #32]
 8018708:	f803 9c01 	strb.w	r9, [r3, #-1]
 801870c:	4293      	cmp	r3, r2
 801870e:	d043      	beq.n	8018798 <_dtoa_r+0xb78>
 8018710:	4651      	mov	r1, sl
 8018712:	2300      	movs	r3, #0
 8018714:	220a      	movs	r2, #10
 8018716:	4620      	mov	r0, r4
 8018718:	f000 f9d6 	bl	8018ac8 <__multadd>
 801871c:	45b8      	cmp	r8, r7
 801871e:	4682      	mov	sl, r0
 8018720:	f04f 0300 	mov.w	r3, #0
 8018724:	f04f 020a 	mov.w	r2, #10
 8018728:	4641      	mov	r1, r8
 801872a:	4620      	mov	r0, r4
 801872c:	d107      	bne.n	801873e <_dtoa_r+0xb1e>
 801872e:	f000 f9cb 	bl	8018ac8 <__multadd>
 8018732:	4680      	mov	r8, r0
 8018734:	4607      	mov	r7, r0
 8018736:	9b04      	ldr	r3, [sp, #16]
 8018738:	3301      	adds	r3, #1
 801873a:	9304      	str	r3, [sp, #16]
 801873c:	e775      	b.n	801862a <_dtoa_r+0xa0a>
 801873e:	f000 f9c3 	bl	8018ac8 <__multadd>
 8018742:	4639      	mov	r1, r7
 8018744:	4680      	mov	r8, r0
 8018746:	2300      	movs	r3, #0
 8018748:	220a      	movs	r2, #10
 801874a:	4620      	mov	r0, r4
 801874c:	f000 f9bc 	bl	8018ac8 <__multadd>
 8018750:	4607      	mov	r7, r0
 8018752:	e7f0      	b.n	8018736 <_dtoa_r+0xb16>
 8018754:	9b04      	ldr	r3, [sp, #16]
 8018756:	9301      	str	r3, [sp, #4]
 8018758:	9d00      	ldr	r5, [sp, #0]
 801875a:	4631      	mov	r1, r6
 801875c:	4650      	mov	r0, sl
 801875e:	f7ff f9d6 	bl	8017b0e <quorem>
 8018762:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8018766:	9b00      	ldr	r3, [sp, #0]
 8018768:	f805 9b01 	strb.w	r9, [r5], #1
 801876c:	1aea      	subs	r2, r5, r3
 801876e:	9b01      	ldr	r3, [sp, #4]
 8018770:	4293      	cmp	r3, r2
 8018772:	dd07      	ble.n	8018784 <_dtoa_r+0xb64>
 8018774:	4651      	mov	r1, sl
 8018776:	2300      	movs	r3, #0
 8018778:	220a      	movs	r2, #10
 801877a:	4620      	mov	r0, r4
 801877c:	f000 f9a4 	bl	8018ac8 <__multadd>
 8018780:	4682      	mov	sl, r0
 8018782:	e7ea      	b.n	801875a <_dtoa_r+0xb3a>
 8018784:	9b01      	ldr	r3, [sp, #4]
 8018786:	2b00      	cmp	r3, #0
 8018788:	bfc8      	it	gt
 801878a:	461d      	movgt	r5, r3
 801878c:	9b00      	ldr	r3, [sp, #0]
 801878e:	bfd8      	it	le
 8018790:	2501      	movle	r5, #1
 8018792:	441d      	add	r5, r3
 8018794:	f04f 0800 	mov.w	r8, #0
 8018798:	4651      	mov	r1, sl
 801879a:	2201      	movs	r2, #1
 801879c:	4620      	mov	r0, r4
 801879e:	f000 fb41 	bl	8018e24 <__lshift>
 80187a2:	4631      	mov	r1, r6
 80187a4:	4682      	mov	sl, r0
 80187a6:	f000 fba9 	bl	8018efc <__mcmp>
 80187aa:	2800      	cmp	r0, #0
 80187ac:	dc96      	bgt.n	80186dc <_dtoa_r+0xabc>
 80187ae:	d102      	bne.n	80187b6 <_dtoa_r+0xb96>
 80187b0:	f019 0f01 	tst.w	r9, #1
 80187b4:	d192      	bne.n	80186dc <_dtoa_r+0xabc>
 80187b6:	462b      	mov	r3, r5
 80187b8:	461d      	mov	r5, r3
 80187ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80187be:	2a30      	cmp	r2, #48	; 0x30
 80187c0:	d0fa      	beq.n	80187b8 <_dtoa_r+0xb98>
 80187c2:	e6dd      	b.n	8018580 <_dtoa_r+0x960>
 80187c4:	9a00      	ldr	r2, [sp, #0]
 80187c6:	429a      	cmp	r2, r3
 80187c8:	d189      	bne.n	80186de <_dtoa_r+0xabe>
 80187ca:	f10b 0b01 	add.w	fp, fp, #1
 80187ce:	2331      	movs	r3, #49	; 0x31
 80187d0:	e796      	b.n	8018700 <_dtoa_r+0xae0>
 80187d2:	4b0a      	ldr	r3, [pc, #40]	; (80187fc <_dtoa_r+0xbdc>)
 80187d4:	f7ff ba99 	b.w	8017d0a <_dtoa_r+0xea>
 80187d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80187da:	2b00      	cmp	r3, #0
 80187dc:	f47f aa6d 	bne.w	8017cba <_dtoa_r+0x9a>
 80187e0:	4b07      	ldr	r3, [pc, #28]	; (8018800 <_dtoa_r+0xbe0>)
 80187e2:	f7ff ba92 	b.w	8017d0a <_dtoa_r+0xea>
 80187e6:	9b01      	ldr	r3, [sp, #4]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	dcb5      	bgt.n	8018758 <_dtoa_r+0xb38>
 80187ec:	9b07      	ldr	r3, [sp, #28]
 80187ee:	2b02      	cmp	r3, #2
 80187f0:	f73f aeb1 	bgt.w	8018556 <_dtoa_r+0x936>
 80187f4:	e7b0      	b.n	8018758 <_dtoa_r+0xb38>
 80187f6:	bf00      	nop
 80187f8:	0801c525 	.word	0x0801c525
 80187fc:	0801c485 	.word	0x0801c485
 8018800:	0801c4a9 	.word	0x0801c4a9

08018804 <_free_r>:
 8018804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018806:	2900      	cmp	r1, #0
 8018808:	d044      	beq.n	8018894 <_free_r+0x90>
 801880a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801880e:	9001      	str	r0, [sp, #4]
 8018810:	2b00      	cmp	r3, #0
 8018812:	f1a1 0404 	sub.w	r4, r1, #4
 8018816:	bfb8      	it	lt
 8018818:	18e4      	addlt	r4, r4, r3
 801881a:	f000 f8e7 	bl	80189ec <__malloc_lock>
 801881e:	4a1e      	ldr	r2, [pc, #120]	; (8018898 <_free_r+0x94>)
 8018820:	9801      	ldr	r0, [sp, #4]
 8018822:	6813      	ldr	r3, [r2, #0]
 8018824:	b933      	cbnz	r3, 8018834 <_free_r+0x30>
 8018826:	6063      	str	r3, [r4, #4]
 8018828:	6014      	str	r4, [r2, #0]
 801882a:	b003      	add	sp, #12
 801882c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018830:	f000 b8e2 	b.w	80189f8 <__malloc_unlock>
 8018834:	42a3      	cmp	r3, r4
 8018836:	d908      	bls.n	801884a <_free_r+0x46>
 8018838:	6825      	ldr	r5, [r4, #0]
 801883a:	1961      	adds	r1, r4, r5
 801883c:	428b      	cmp	r3, r1
 801883e:	bf01      	itttt	eq
 8018840:	6819      	ldreq	r1, [r3, #0]
 8018842:	685b      	ldreq	r3, [r3, #4]
 8018844:	1949      	addeq	r1, r1, r5
 8018846:	6021      	streq	r1, [r4, #0]
 8018848:	e7ed      	b.n	8018826 <_free_r+0x22>
 801884a:	461a      	mov	r2, r3
 801884c:	685b      	ldr	r3, [r3, #4]
 801884e:	b10b      	cbz	r3, 8018854 <_free_r+0x50>
 8018850:	42a3      	cmp	r3, r4
 8018852:	d9fa      	bls.n	801884a <_free_r+0x46>
 8018854:	6811      	ldr	r1, [r2, #0]
 8018856:	1855      	adds	r5, r2, r1
 8018858:	42a5      	cmp	r5, r4
 801885a:	d10b      	bne.n	8018874 <_free_r+0x70>
 801885c:	6824      	ldr	r4, [r4, #0]
 801885e:	4421      	add	r1, r4
 8018860:	1854      	adds	r4, r2, r1
 8018862:	42a3      	cmp	r3, r4
 8018864:	6011      	str	r1, [r2, #0]
 8018866:	d1e0      	bne.n	801882a <_free_r+0x26>
 8018868:	681c      	ldr	r4, [r3, #0]
 801886a:	685b      	ldr	r3, [r3, #4]
 801886c:	6053      	str	r3, [r2, #4]
 801886e:	440c      	add	r4, r1
 8018870:	6014      	str	r4, [r2, #0]
 8018872:	e7da      	b.n	801882a <_free_r+0x26>
 8018874:	d902      	bls.n	801887c <_free_r+0x78>
 8018876:	230c      	movs	r3, #12
 8018878:	6003      	str	r3, [r0, #0]
 801887a:	e7d6      	b.n	801882a <_free_r+0x26>
 801887c:	6825      	ldr	r5, [r4, #0]
 801887e:	1961      	adds	r1, r4, r5
 8018880:	428b      	cmp	r3, r1
 8018882:	bf04      	itt	eq
 8018884:	6819      	ldreq	r1, [r3, #0]
 8018886:	685b      	ldreq	r3, [r3, #4]
 8018888:	6063      	str	r3, [r4, #4]
 801888a:	bf04      	itt	eq
 801888c:	1949      	addeq	r1, r1, r5
 801888e:	6021      	streq	r1, [r4, #0]
 8018890:	6054      	str	r4, [r2, #4]
 8018892:	e7ca      	b.n	801882a <_free_r+0x26>
 8018894:	b003      	add	sp, #12
 8018896:	bd30      	pop	{r4, r5, pc}
 8018898:	2000dca4 	.word	0x2000dca4

0801889c <malloc>:
 801889c:	4b02      	ldr	r3, [pc, #8]	; (80188a8 <malloc+0xc>)
 801889e:	4601      	mov	r1, r0
 80188a0:	6818      	ldr	r0, [r3, #0]
 80188a2:	f000 b823 	b.w	80188ec <_malloc_r>
 80188a6:	bf00      	nop
 80188a8:	20000498 	.word	0x20000498

080188ac <sbrk_aligned>:
 80188ac:	b570      	push	{r4, r5, r6, lr}
 80188ae:	4e0e      	ldr	r6, [pc, #56]	; (80188e8 <sbrk_aligned+0x3c>)
 80188b0:	460c      	mov	r4, r1
 80188b2:	6831      	ldr	r1, [r6, #0]
 80188b4:	4605      	mov	r5, r0
 80188b6:	b911      	cbnz	r1, 80188be <sbrk_aligned+0x12>
 80188b8:	f000 fe1c 	bl	80194f4 <_sbrk_r>
 80188bc:	6030      	str	r0, [r6, #0]
 80188be:	4621      	mov	r1, r4
 80188c0:	4628      	mov	r0, r5
 80188c2:	f000 fe17 	bl	80194f4 <_sbrk_r>
 80188c6:	1c43      	adds	r3, r0, #1
 80188c8:	d00a      	beq.n	80188e0 <sbrk_aligned+0x34>
 80188ca:	1cc4      	adds	r4, r0, #3
 80188cc:	f024 0403 	bic.w	r4, r4, #3
 80188d0:	42a0      	cmp	r0, r4
 80188d2:	d007      	beq.n	80188e4 <sbrk_aligned+0x38>
 80188d4:	1a21      	subs	r1, r4, r0
 80188d6:	4628      	mov	r0, r5
 80188d8:	f000 fe0c 	bl	80194f4 <_sbrk_r>
 80188dc:	3001      	adds	r0, #1
 80188de:	d101      	bne.n	80188e4 <sbrk_aligned+0x38>
 80188e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80188e4:	4620      	mov	r0, r4
 80188e6:	bd70      	pop	{r4, r5, r6, pc}
 80188e8:	2000dca8 	.word	0x2000dca8

080188ec <_malloc_r>:
 80188ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188f0:	1ccd      	adds	r5, r1, #3
 80188f2:	f025 0503 	bic.w	r5, r5, #3
 80188f6:	3508      	adds	r5, #8
 80188f8:	2d0c      	cmp	r5, #12
 80188fa:	bf38      	it	cc
 80188fc:	250c      	movcc	r5, #12
 80188fe:	2d00      	cmp	r5, #0
 8018900:	4607      	mov	r7, r0
 8018902:	db01      	blt.n	8018908 <_malloc_r+0x1c>
 8018904:	42a9      	cmp	r1, r5
 8018906:	d905      	bls.n	8018914 <_malloc_r+0x28>
 8018908:	230c      	movs	r3, #12
 801890a:	603b      	str	r3, [r7, #0]
 801890c:	2600      	movs	r6, #0
 801890e:	4630      	mov	r0, r6
 8018910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018914:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80189e8 <_malloc_r+0xfc>
 8018918:	f000 f868 	bl	80189ec <__malloc_lock>
 801891c:	f8d8 3000 	ldr.w	r3, [r8]
 8018920:	461c      	mov	r4, r3
 8018922:	bb5c      	cbnz	r4, 801897c <_malloc_r+0x90>
 8018924:	4629      	mov	r1, r5
 8018926:	4638      	mov	r0, r7
 8018928:	f7ff ffc0 	bl	80188ac <sbrk_aligned>
 801892c:	1c43      	adds	r3, r0, #1
 801892e:	4604      	mov	r4, r0
 8018930:	d155      	bne.n	80189de <_malloc_r+0xf2>
 8018932:	f8d8 4000 	ldr.w	r4, [r8]
 8018936:	4626      	mov	r6, r4
 8018938:	2e00      	cmp	r6, #0
 801893a:	d145      	bne.n	80189c8 <_malloc_r+0xdc>
 801893c:	2c00      	cmp	r4, #0
 801893e:	d048      	beq.n	80189d2 <_malloc_r+0xe6>
 8018940:	6823      	ldr	r3, [r4, #0]
 8018942:	4631      	mov	r1, r6
 8018944:	4638      	mov	r0, r7
 8018946:	eb04 0903 	add.w	r9, r4, r3
 801894a:	f000 fdd3 	bl	80194f4 <_sbrk_r>
 801894e:	4581      	cmp	r9, r0
 8018950:	d13f      	bne.n	80189d2 <_malloc_r+0xe6>
 8018952:	6821      	ldr	r1, [r4, #0]
 8018954:	1a6d      	subs	r5, r5, r1
 8018956:	4629      	mov	r1, r5
 8018958:	4638      	mov	r0, r7
 801895a:	f7ff ffa7 	bl	80188ac <sbrk_aligned>
 801895e:	3001      	adds	r0, #1
 8018960:	d037      	beq.n	80189d2 <_malloc_r+0xe6>
 8018962:	6823      	ldr	r3, [r4, #0]
 8018964:	442b      	add	r3, r5
 8018966:	6023      	str	r3, [r4, #0]
 8018968:	f8d8 3000 	ldr.w	r3, [r8]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d038      	beq.n	80189e2 <_malloc_r+0xf6>
 8018970:	685a      	ldr	r2, [r3, #4]
 8018972:	42a2      	cmp	r2, r4
 8018974:	d12b      	bne.n	80189ce <_malloc_r+0xe2>
 8018976:	2200      	movs	r2, #0
 8018978:	605a      	str	r2, [r3, #4]
 801897a:	e00f      	b.n	801899c <_malloc_r+0xb0>
 801897c:	6822      	ldr	r2, [r4, #0]
 801897e:	1b52      	subs	r2, r2, r5
 8018980:	d41f      	bmi.n	80189c2 <_malloc_r+0xd6>
 8018982:	2a0b      	cmp	r2, #11
 8018984:	d917      	bls.n	80189b6 <_malloc_r+0xca>
 8018986:	1961      	adds	r1, r4, r5
 8018988:	42a3      	cmp	r3, r4
 801898a:	6025      	str	r5, [r4, #0]
 801898c:	bf18      	it	ne
 801898e:	6059      	strne	r1, [r3, #4]
 8018990:	6863      	ldr	r3, [r4, #4]
 8018992:	bf08      	it	eq
 8018994:	f8c8 1000 	streq.w	r1, [r8]
 8018998:	5162      	str	r2, [r4, r5]
 801899a:	604b      	str	r3, [r1, #4]
 801899c:	4638      	mov	r0, r7
 801899e:	f104 060b 	add.w	r6, r4, #11
 80189a2:	f000 f829 	bl	80189f8 <__malloc_unlock>
 80189a6:	f026 0607 	bic.w	r6, r6, #7
 80189aa:	1d23      	adds	r3, r4, #4
 80189ac:	1af2      	subs	r2, r6, r3
 80189ae:	d0ae      	beq.n	801890e <_malloc_r+0x22>
 80189b0:	1b9b      	subs	r3, r3, r6
 80189b2:	50a3      	str	r3, [r4, r2]
 80189b4:	e7ab      	b.n	801890e <_malloc_r+0x22>
 80189b6:	42a3      	cmp	r3, r4
 80189b8:	6862      	ldr	r2, [r4, #4]
 80189ba:	d1dd      	bne.n	8018978 <_malloc_r+0x8c>
 80189bc:	f8c8 2000 	str.w	r2, [r8]
 80189c0:	e7ec      	b.n	801899c <_malloc_r+0xb0>
 80189c2:	4623      	mov	r3, r4
 80189c4:	6864      	ldr	r4, [r4, #4]
 80189c6:	e7ac      	b.n	8018922 <_malloc_r+0x36>
 80189c8:	4634      	mov	r4, r6
 80189ca:	6876      	ldr	r6, [r6, #4]
 80189cc:	e7b4      	b.n	8018938 <_malloc_r+0x4c>
 80189ce:	4613      	mov	r3, r2
 80189d0:	e7cc      	b.n	801896c <_malloc_r+0x80>
 80189d2:	230c      	movs	r3, #12
 80189d4:	603b      	str	r3, [r7, #0]
 80189d6:	4638      	mov	r0, r7
 80189d8:	f000 f80e 	bl	80189f8 <__malloc_unlock>
 80189dc:	e797      	b.n	801890e <_malloc_r+0x22>
 80189de:	6025      	str	r5, [r4, #0]
 80189e0:	e7dc      	b.n	801899c <_malloc_r+0xb0>
 80189e2:	605b      	str	r3, [r3, #4]
 80189e4:	deff      	udf	#255	; 0xff
 80189e6:	bf00      	nop
 80189e8:	2000dca4 	.word	0x2000dca4

080189ec <__malloc_lock>:
 80189ec:	4801      	ldr	r0, [pc, #4]	; (80189f4 <__malloc_lock+0x8>)
 80189ee:	f7ff b87e 	b.w	8017aee <__retarget_lock_acquire_recursive>
 80189f2:	bf00      	nop
 80189f4:	2000dca0 	.word	0x2000dca0

080189f8 <__malloc_unlock>:
 80189f8:	4801      	ldr	r0, [pc, #4]	; (8018a00 <__malloc_unlock+0x8>)
 80189fa:	f7ff b879 	b.w	8017af0 <__retarget_lock_release_recursive>
 80189fe:	bf00      	nop
 8018a00:	2000dca0 	.word	0x2000dca0

08018a04 <_Balloc>:
 8018a04:	b570      	push	{r4, r5, r6, lr}
 8018a06:	69c6      	ldr	r6, [r0, #28]
 8018a08:	4604      	mov	r4, r0
 8018a0a:	460d      	mov	r5, r1
 8018a0c:	b976      	cbnz	r6, 8018a2c <_Balloc+0x28>
 8018a0e:	2010      	movs	r0, #16
 8018a10:	f7ff ff44 	bl	801889c <malloc>
 8018a14:	4602      	mov	r2, r0
 8018a16:	61e0      	str	r0, [r4, #28]
 8018a18:	b920      	cbnz	r0, 8018a24 <_Balloc+0x20>
 8018a1a:	4b18      	ldr	r3, [pc, #96]	; (8018a7c <_Balloc+0x78>)
 8018a1c:	4818      	ldr	r0, [pc, #96]	; (8018a80 <_Balloc+0x7c>)
 8018a1e:	216b      	movs	r1, #107	; 0x6b
 8018a20:	f000 fd78 	bl	8019514 <__assert_func>
 8018a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018a28:	6006      	str	r6, [r0, #0]
 8018a2a:	60c6      	str	r6, [r0, #12]
 8018a2c:	69e6      	ldr	r6, [r4, #28]
 8018a2e:	68f3      	ldr	r3, [r6, #12]
 8018a30:	b183      	cbz	r3, 8018a54 <_Balloc+0x50>
 8018a32:	69e3      	ldr	r3, [r4, #28]
 8018a34:	68db      	ldr	r3, [r3, #12]
 8018a36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018a3a:	b9b8      	cbnz	r0, 8018a6c <_Balloc+0x68>
 8018a3c:	2101      	movs	r1, #1
 8018a3e:	fa01 f605 	lsl.w	r6, r1, r5
 8018a42:	1d72      	adds	r2, r6, #5
 8018a44:	0092      	lsls	r2, r2, #2
 8018a46:	4620      	mov	r0, r4
 8018a48:	f000 fd82 	bl	8019550 <_calloc_r>
 8018a4c:	b160      	cbz	r0, 8018a68 <_Balloc+0x64>
 8018a4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018a52:	e00e      	b.n	8018a72 <_Balloc+0x6e>
 8018a54:	2221      	movs	r2, #33	; 0x21
 8018a56:	2104      	movs	r1, #4
 8018a58:	4620      	mov	r0, r4
 8018a5a:	f000 fd79 	bl	8019550 <_calloc_r>
 8018a5e:	69e3      	ldr	r3, [r4, #28]
 8018a60:	60f0      	str	r0, [r6, #12]
 8018a62:	68db      	ldr	r3, [r3, #12]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d1e4      	bne.n	8018a32 <_Balloc+0x2e>
 8018a68:	2000      	movs	r0, #0
 8018a6a:	bd70      	pop	{r4, r5, r6, pc}
 8018a6c:	6802      	ldr	r2, [r0, #0]
 8018a6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018a72:	2300      	movs	r3, #0
 8018a74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018a78:	e7f7      	b.n	8018a6a <_Balloc+0x66>
 8018a7a:	bf00      	nop
 8018a7c:	0801c4b6 	.word	0x0801c4b6
 8018a80:	0801c536 	.word	0x0801c536

08018a84 <_Bfree>:
 8018a84:	b570      	push	{r4, r5, r6, lr}
 8018a86:	69c6      	ldr	r6, [r0, #28]
 8018a88:	4605      	mov	r5, r0
 8018a8a:	460c      	mov	r4, r1
 8018a8c:	b976      	cbnz	r6, 8018aac <_Bfree+0x28>
 8018a8e:	2010      	movs	r0, #16
 8018a90:	f7ff ff04 	bl	801889c <malloc>
 8018a94:	4602      	mov	r2, r0
 8018a96:	61e8      	str	r0, [r5, #28]
 8018a98:	b920      	cbnz	r0, 8018aa4 <_Bfree+0x20>
 8018a9a:	4b09      	ldr	r3, [pc, #36]	; (8018ac0 <_Bfree+0x3c>)
 8018a9c:	4809      	ldr	r0, [pc, #36]	; (8018ac4 <_Bfree+0x40>)
 8018a9e:	218f      	movs	r1, #143	; 0x8f
 8018aa0:	f000 fd38 	bl	8019514 <__assert_func>
 8018aa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018aa8:	6006      	str	r6, [r0, #0]
 8018aaa:	60c6      	str	r6, [r0, #12]
 8018aac:	b13c      	cbz	r4, 8018abe <_Bfree+0x3a>
 8018aae:	69eb      	ldr	r3, [r5, #28]
 8018ab0:	6862      	ldr	r2, [r4, #4]
 8018ab2:	68db      	ldr	r3, [r3, #12]
 8018ab4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018ab8:	6021      	str	r1, [r4, #0]
 8018aba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018abe:	bd70      	pop	{r4, r5, r6, pc}
 8018ac0:	0801c4b6 	.word	0x0801c4b6
 8018ac4:	0801c536 	.word	0x0801c536

08018ac8 <__multadd>:
 8018ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018acc:	690d      	ldr	r5, [r1, #16]
 8018ace:	4607      	mov	r7, r0
 8018ad0:	460c      	mov	r4, r1
 8018ad2:	461e      	mov	r6, r3
 8018ad4:	f101 0c14 	add.w	ip, r1, #20
 8018ad8:	2000      	movs	r0, #0
 8018ada:	f8dc 3000 	ldr.w	r3, [ip]
 8018ade:	b299      	uxth	r1, r3
 8018ae0:	fb02 6101 	mla	r1, r2, r1, r6
 8018ae4:	0c1e      	lsrs	r6, r3, #16
 8018ae6:	0c0b      	lsrs	r3, r1, #16
 8018ae8:	fb02 3306 	mla	r3, r2, r6, r3
 8018aec:	b289      	uxth	r1, r1
 8018aee:	3001      	adds	r0, #1
 8018af0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018af4:	4285      	cmp	r5, r0
 8018af6:	f84c 1b04 	str.w	r1, [ip], #4
 8018afa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018afe:	dcec      	bgt.n	8018ada <__multadd+0x12>
 8018b00:	b30e      	cbz	r6, 8018b46 <__multadd+0x7e>
 8018b02:	68a3      	ldr	r3, [r4, #8]
 8018b04:	42ab      	cmp	r3, r5
 8018b06:	dc19      	bgt.n	8018b3c <__multadd+0x74>
 8018b08:	6861      	ldr	r1, [r4, #4]
 8018b0a:	4638      	mov	r0, r7
 8018b0c:	3101      	adds	r1, #1
 8018b0e:	f7ff ff79 	bl	8018a04 <_Balloc>
 8018b12:	4680      	mov	r8, r0
 8018b14:	b928      	cbnz	r0, 8018b22 <__multadd+0x5a>
 8018b16:	4602      	mov	r2, r0
 8018b18:	4b0c      	ldr	r3, [pc, #48]	; (8018b4c <__multadd+0x84>)
 8018b1a:	480d      	ldr	r0, [pc, #52]	; (8018b50 <__multadd+0x88>)
 8018b1c:	21ba      	movs	r1, #186	; 0xba
 8018b1e:	f000 fcf9 	bl	8019514 <__assert_func>
 8018b22:	6922      	ldr	r2, [r4, #16]
 8018b24:	3202      	adds	r2, #2
 8018b26:	f104 010c 	add.w	r1, r4, #12
 8018b2a:	0092      	lsls	r2, r2, #2
 8018b2c:	300c      	adds	r0, #12
 8018b2e:	f7fe ffe0 	bl	8017af2 <memcpy>
 8018b32:	4621      	mov	r1, r4
 8018b34:	4638      	mov	r0, r7
 8018b36:	f7ff ffa5 	bl	8018a84 <_Bfree>
 8018b3a:	4644      	mov	r4, r8
 8018b3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018b40:	3501      	adds	r5, #1
 8018b42:	615e      	str	r6, [r3, #20]
 8018b44:	6125      	str	r5, [r4, #16]
 8018b46:	4620      	mov	r0, r4
 8018b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b4c:	0801c525 	.word	0x0801c525
 8018b50:	0801c536 	.word	0x0801c536

08018b54 <__hi0bits>:
 8018b54:	0c03      	lsrs	r3, r0, #16
 8018b56:	041b      	lsls	r3, r3, #16
 8018b58:	b9d3      	cbnz	r3, 8018b90 <__hi0bits+0x3c>
 8018b5a:	0400      	lsls	r0, r0, #16
 8018b5c:	2310      	movs	r3, #16
 8018b5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018b62:	bf04      	itt	eq
 8018b64:	0200      	lsleq	r0, r0, #8
 8018b66:	3308      	addeq	r3, #8
 8018b68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018b6c:	bf04      	itt	eq
 8018b6e:	0100      	lsleq	r0, r0, #4
 8018b70:	3304      	addeq	r3, #4
 8018b72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018b76:	bf04      	itt	eq
 8018b78:	0080      	lsleq	r0, r0, #2
 8018b7a:	3302      	addeq	r3, #2
 8018b7c:	2800      	cmp	r0, #0
 8018b7e:	db05      	blt.n	8018b8c <__hi0bits+0x38>
 8018b80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018b84:	f103 0301 	add.w	r3, r3, #1
 8018b88:	bf08      	it	eq
 8018b8a:	2320      	moveq	r3, #32
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	4770      	bx	lr
 8018b90:	2300      	movs	r3, #0
 8018b92:	e7e4      	b.n	8018b5e <__hi0bits+0xa>

08018b94 <__lo0bits>:
 8018b94:	6803      	ldr	r3, [r0, #0]
 8018b96:	f013 0207 	ands.w	r2, r3, #7
 8018b9a:	d00c      	beq.n	8018bb6 <__lo0bits+0x22>
 8018b9c:	07d9      	lsls	r1, r3, #31
 8018b9e:	d422      	bmi.n	8018be6 <__lo0bits+0x52>
 8018ba0:	079a      	lsls	r2, r3, #30
 8018ba2:	bf49      	itett	mi
 8018ba4:	085b      	lsrmi	r3, r3, #1
 8018ba6:	089b      	lsrpl	r3, r3, #2
 8018ba8:	6003      	strmi	r3, [r0, #0]
 8018baa:	2201      	movmi	r2, #1
 8018bac:	bf5c      	itt	pl
 8018bae:	6003      	strpl	r3, [r0, #0]
 8018bb0:	2202      	movpl	r2, #2
 8018bb2:	4610      	mov	r0, r2
 8018bb4:	4770      	bx	lr
 8018bb6:	b299      	uxth	r1, r3
 8018bb8:	b909      	cbnz	r1, 8018bbe <__lo0bits+0x2a>
 8018bba:	0c1b      	lsrs	r3, r3, #16
 8018bbc:	2210      	movs	r2, #16
 8018bbe:	b2d9      	uxtb	r1, r3
 8018bc0:	b909      	cbnz	r1, 8018bc6 <__lo0bits+0x32>
 8018bc2:	3208      	adds	r2, #8
 8018bc4:	0a1b      	lsrs	r3, r3, #8
 8018bc6:	0719      	lsls	r1, r3, #28
 8018bc8:	bf04      	itt	eq
 8018bca:	091b      	lsreq	r3, r3, #4
 8018bcc:	3204      	addeq	r2, #4
 8018bce:	0799      	lsls	r1, r3, #30
 8018bd0:	bf04      	itt	eq
 8018bd2:	089b      	lsreq	r3, r3, #2
 8018bd4:	3202      	addeq	r2, #2
 8018bd6:	07d9      	lsls	r1, r3, #31
 8018bd8:	d403      	bmi.n	8018be2 <__lo0bits+0x4e>
 8018bda:	085b      	lsrs	r3, r3, #1
 8018bdc:	f102 0201 	add.w	r2, r2, #1
 8018be0:	d003      	beq.n	8018bea <__lo0bits+0x56>
 8018be2:	6003      	str	r3, [r0, #0]
 8018be4:	e7e5      	b.n	8018bb2 <__lo0bits+0x1e>
 8018be6:	2200      	movs	r2, #0
 8018be8:	e7e3      	b.n	8018bb2 <__lo0bits+0x1e>
 8018bea:	2220      	movs	r2, #32
 8018bec:	e7e1      	b.n	8018bb2 <__lo0bits+0x1e>
	...

08018bf0 <__i2b>:
 8018bf0:	b510      	push	{r4, lr}
 8018bf2:	460c      	mov	r4, r1
 8018bf4:	2101      	movs	r1, #1
 8018bf6:	f7ff ff05 	bl	8018a04 <_Balloc>
 8018bfa:	4602      	mov	r2, r0
 8018bfc:	b928      	cbnz	r0, 8018c0a <__i2b+0x1a>
 8018bfe:	4b05      	ldr	r3, [pc, #20]	; (8018c14 <__i2b+0x24>)
 8018c00:	4805      	ldr	r0, [pc, #20]	; (8018c18 <__i2b+0x28>)
 8018c02:	f240 1145 	movw	r1, #325	; 0x145
 8018c06:	f000 fc85 	bl	8019514 <__assert_func>
 8018c0a:	2301      	movs	r3, #1
 8018c0c:	6144      	str	r4, [r0, #20]
 8018c0e:	6103      	str	r3, [r0, #16]
 8018c10:	bd10      	pop	{r4, pc}
 8018c12:	bf00      	nop
 8018c14:	0801c525 	.word	0x0801c525
 8018c18:	0801c536 	.word	0x0801c536

08018c1c <__multiply>:
 8018c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c20:	4691      	mov	r9, r2
 8018c22:	690a      	ldr	r2, [r1, #16]
 8018c24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018c28:	429a      	cmp	r2, r3
 8018c2a:	bfb8      	it	lt
 8018c2c:	460b      	movlt	r3, r1
 8018c2e:	460c      	mov	r4, r1
 8018c30:	bfbc      	itt	lt
 8018c32:	464c      	movlt	r4, r9
 8018c34:	4699      	movlt	r9, r3
 8018c36:	6927      	ldr	r7, [r4, #16]
 8018c38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018c3c:	68a3      	ldr	r3, [r4, #8]
 8018c3e:	6861      	ldr	r1, [r4, #4]
 8018c40:	eb07 060a 	add.w	r6, r7, sl
 8018c44:	42b3      	cmp	r3, r6
 8018c46:	b085      	sub	sp, #20
 8018c48:	bfb8      	it	lt
 8018c4a:	3101      	addlt	r1, #1
 8018c4c:	f7ff feda 	bl	8018a04 <_Balloc>
 8018c50:	b930      	cbnz	r0, 8018c60 <__multiply+0x44>
 8018c52:	4602      	mov	r2, r0
 8018c54:	4b44      	ldr	r3, [pc, #272]	; (8018d68 <__multiply+0x14c>)
 8018c56:	4845      	ldr	r0, [pc, #276]	; (8018d6c <__multiply+0x150>)
 8018c58:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018c5c:	f000 fc5a 	bl	8019514 <__assert_func>
 8018c60:	f100 0514 	add.w	r5, r0, #20
 8018c64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018c68:	462b      	mov	r3, r5
 8018c6a:	2200      	movs	r2, #0
 8018c6c:	4543      	cmp	r3, r8
 8018c6e:	d321      	bcc.n	8018cb4 <__multiply+0x98>
 8018c70:	f104 0314 	add.w	r3, r4, #20
 8018c74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018c78:	f109 0314 	add.w	r3, r9, #20
 8018c7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018c80:	9202      	str	r2, [sp, #8]
 8018c82:	1b3a      	subs	r2, r7, r4
 8018c84:	3a15      	subs	r2, #21
 8018c86:	f022 0203 	bic.w	r2, r2, #3
 8018c8a:	3204      	adds	r2, #4
 8018c8c:	f104 0115 	add.w	r1, r4, #21
 8018c90:	428f      	cmp	r7, r1
 8018c92:	bf38      	it	cc
 8018c94:	2204      	movcc	r2, #4
 8018c96:	9201      	str	r2, [sp, #4]
 8018c98:	9a02      	ldr	r2, [sp, #8]
 8018c9a:	9303      	str	r3, [sp, #12]
 8018c9c:	429a      	cmp	r2, r3
 8018c9e:	d80c      	bhi.n	8018cba <__multiply+0x9e>
 8018ca0:	2e00      	cmp	r6, #0
 8018ca2:	dd03      	ble.n	8018cac <__multiply+0x90>
 8018ca4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d05b      	beq.n	8018d64 <__multiply+0x148>
 8018cac:	6106      	str	r6, [r0, #16]
 8018cae:	b005      	add	sp, #20
 8018cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cb4:	f843 2b04 	str.w	r2, [r3], #4
 8018cb8:	e7d8      	b.n	8018c6c <__multiply+0x50>
 8018cba:	f8b3 a000 	ldrh.w	sl, [r3]
 8018cbe:	f1ba 0f00 	cmp.w	sl, #0
 8018cc2:	d024      	beq.n	8018d0e <__multiply+0xf2>
 8018cc4:	f104 0e14 	add.w	lr, r4, #20
 8018cc8:	46a9      	mov	r9, r5
 8018cca:	f04f 0c00 	mov.w	ip, #0
 8018cce:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018cd2:	f8d9 1000 	ldr.w	r1, [r9]
 8018cd6:	fa1f fb82 	uxth.w	fp, r2
 8018cda:	b289      	uxth	r1, r1
 8018cdc:	fb0a 110b 	mla	r1, sl, fp, r1
 8018ce0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018ce4:	f8d9 2000 	ldr.w	r2, [r9]
 8018ce8:	4461      	add	r1, ip
 8018cea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018cee:	fb0a c20b 	mla	r2, sl, fp, ip
 8018cf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018cf6:	b289      	uxth	r1, r1
 8018cf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018cfc:	4577      	cmp	r7, lr
 8018cfe:	f849 1b04 	str.w	r1, [r9], #4
 8018d02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018d06:	d8e2      	bhi.n	8018cce <__multiply+0xb2>
 8018d08:	9a01      	ldr	r2, [sp, #4]
 8018d0a:	f845 c002 	str.w	ip, [r5, r2]
 8018d0e:	9a03      	ldr	r2, [sp, #12]
 8018d10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018d14:	3304      	adds	r3, #4
 8018d16:	f1b9 0f00 	cmp.w	r9, #0
 8018d1a:	d021      	beq.n	8018d60 <__multiply+0x144>
 8018d1c:	6829      	ldr	r1, [r5, #0]
 8018d1e:	f104 0c14 	add.w	ip, r4, #20
 8018d22:	46ae      	mov	lr, r5
 8018d24:	f04f 0a00 	mov.w	sl, #0
 8018d28:	f8bc b000 	ldrh.w	fp, [ip]
 8018d2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018d30:	fb09 220b 	mla	r2, r9, fp, r2
 8018d34:	4452      	add	r2, sl
 8018d36:	b289      	uxth	r1, r1
 8018d38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018d3c:	f84e 1b04 	str.w	r1, [lr], #4
 8018d40:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018d44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018d48:	f8be 1000 	ldrh.w	r1, [lr]
 8018d4c:	fb09 110a 	mla	r1, r9, sl, r1
 8018d50:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8018d54:	4567      	cmp	r7, ip
 8018d56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018d5a:	d8e5      	bhi.n	8018d28 <__multiply+0x10c>
 8018d5c:	9a01      	ldr	r2, [sp, #4]
 8018d5e:	50a9      	str	r1, [r5, r2]
 8018d60:	3504      	adds	r5, #4
 8018d62:	e799      	b.n	8018c98 <__multiply+0x7c>
 8018d64:	3e01      	subs	r6, #1
 8018d66:	e79b      	b.n	8018ca0 <__multiply+0x84>
 8018d68:	0801c525 	.word	0x0801c525
 8018d6c:	0801c536 	.word	0x0801c536

08018d70 <__pow5mult>:
 8018d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d74:	4615      	mov	r5, r2
 8018d76:	f012 0203 	ands.w	r2, r2, #3
 8018d7a:	4606      	mov	r6, r0
 8018d7c:	460f      	mov	r7, r1
 8018d7e:	d007      	beq.n	8018d90 <__pow5mult+0x20>
 8018d80:	4c25      	ldr	r4, [pc, #148]	; (8018e18 <__pow5mult+0xa8>)
 8018d82:	3a01      	subs	r2, #1
 8018d84:	2300      	movs	r3, #0
 8018d86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018d8a:	f7ff fe9d 	bl	8018ac8 <__multadd>
 8018d8e:	4607      	mov	r7, r0
 8018d90:	10ad      	asrs	r5, r5, #2
 8018d92:	d03d      	beq.n	8018e10 <__pow5mult+0xa0>
 8018d94:	69f4      	ldr	r4, [r6, #28]
 8018d96:	b97c      	cbnz	r4, 8018db8 <__pow5mult+0x48>
 8018d98:	2010      	movs	r0, #16
 8018d9a:	f7ff fd7f 	bl	801889c <malloc>
 8018d9e:	4602      	mov	r2, r0
 8018da0:	61f0      	str	r0, [r6, #28]
 8018da2:	b928      	cbnz	r0, 8018db0 <__pow5mult+0x40>
 8018da4:	4b1d      	ldr	r3, [pc, #116]	; (8018e1c <__pow5mult+0xac>)
 8018da6:	481e      	ldr	r0, [pc, #120]	; (8018e20 <__pow5mult+0xb0>)
 8018da8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018dac:	f000 fbb2 	bl	8019514 <__assert_func>
 8018db0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018db4:	6004      	str	r4, [r0, #0]
 8018db6:	60c4      	str	r4, [r0, #12]
 8018db8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018dbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018dc0:	b94c      	cbnz	r4, 8018dd6 <__pow5mult+0x66>
 8018dc2:	f240 2171 	movw	r1, #625	; 0x271
 8018dc6:	4630      	mov	r0, r6
 8018dc8:	f7ff ff12 	bl	8018bf0 <__i2b>
 8018dcc:	2300      	movs	r3, #0
 8018dce:	f8c8 0008 	str.w	r0, [r8, #8]
 8018dd2:	4604      	mov	r4, r0
 8018dd4:	6003      	str	r3, [r0, #0]
 8018dd6:	f04f 0900 	mov.w	r9, #0
 8018dda:	07eb      	lsls	r3, r5, #31
 8018ddc:	d50a      	bpl.n	8018df4 <__pow5mult+0x84>
 8018dde:	4639      	mov	r1, r7
 8018de0:	4622      	mov	r2, r4
 8018de2:	4630      	mov	r0, r6
 8018de4:	f7ff ff1a 	bl	8018c1c <__multiply>
 8018de8:	4639      	mov	r1, r7
 8018dea:	4680      	mov	r8, r0
 8018dec:	4630      	mov	r0, r6
 8018dee:	f7ff fe49 	bl	8018a84 <_Bfree>
 8018df2:	4647      	mov	r7, r8
 8018df4:	106d      	asrs	r5, r5, #1
 8018df6:	d00b      	beq.n	8018e10 <__pow5mult+0xa0>
 8018df8:	6820      	ldr	r0, [r4, #0]
 8018dfa:	b938      	cbnz	r0, 8018e0c <__pow5mult+0x9c>
 8018dfc:	4622      	mov	r2, r4
 8018dfe:	4621      	mov	r1, r4
 8018e00:	4630      	mov	r0, r6
 8018e02:	f7ff ff0b 	bl	8018c1c <__multiply>
 8018e06:	6020      	str	r0, [r4, #0]
 8018e08:	f8c0 9000 	str.w	r9, [r0]
 8018e0c:	4604      	mov	r4, r0
 8018e0e:	e7e4      	b.n	8018dda <__pow5mult+0x6a>
 8018e10:	4638      	mov	r0, r7
 8018e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e16:	bf00      	nop
 8018e18:	0801c680 	.word	0x0801c680
 8018e1c:	0801c4b6 	.word	0x0801c4b6
 8018e20:	0801c536 	.word	0x0801c536

08018e24 <__lshift>:
 8018e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e28:	460c      	mov	r4, r1
 8018e2a:	6849      	ldr	r1, [r1, #4]
 8018e2c:	6923      	ldr	r3, [r4, #16]
 8018e2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018e32:	68a3      	ldr	r3, [r4, #8]
 8018e34:	4607      	mov	r7, r0
 8018e36:	4691      	mov	r9, r2
 8018e38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018e3c:	f108 0601 	add.w	r6, r8, #1
 8018e40:	42b3      	cmp	r3, r6
 8018e42:	db0b      	blt.n	8018e5c <__lshift+0x38>
 8018e44:	4638      	mov	r0, r7
 8018e46:	f7ff fddd 	bl	8018a04 <_Balloc>
 8018e4a:	4605      	mov	r5, r0
 8018e4c:	b948      	cbnz	r0, 8018e62 <__lshift+0x3e>
 8018e4e:	4602      	mov	r2, r0
 8018e50:	4b28      	ldr	r3, [pc, #160]	; (8018ef4 <__lshift+0xd0>)
 8018e52:	4829      	ldr	r0, [pc, #164]	; (8018ef8 <__lshift+0xd4>)
 8018e54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018e58:	f000 fb5c 	bl	8019514 <__assert_func>
 8018e5c:	3101      	adds	r1, #1
 8018e5e:	005b      	lsls	r3, r3, #1
 8018e60:	e7ee      	b.n	8018e40 <__lshift+0x1c>
 8018e62:	2300      	movs	r3, #0
 8018e64:	f100 0114 	add.w	r1, r0, #20
 8018e68:	f100 0210 	add.w	r2, r0, #16
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	4553      	cmp	r3, sl
 8018e70:	db33      	blt.n	8018eda <__lshift+0xb6>
 8018e72:	6920      	ldr	r0, [r4, #16]
 8018e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018e78:	f104 0314 	add.w	r3, r4, #20
 8018e7c:	f019 091f 	ands.w	r9, r9, #31
 8018e80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018e84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018e88:	d02b      	beq.n	8018ee2 <__lshift+0xbe>
 8018e8a:	f1c9 0e20 	rsb	lr, r9, #32
 8018e8e:	468a      	mov	sl, r1
 8018e90:	2200      	movs	r2, #0
 8018e92:	6818      	ldr	r0, [r3, #0]
 8018e94:	fa00 f009 	lsl.w	r0, r0, r9
 8018e98:	4310      	orrs	r0, r2
 8018e9a:	f84a 0b04 	str.w	r0, [sl], #4
 8018e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ea2:	459c      	cmp	ip, r3
 8018ea4:	fa22 f20e 	lsr.w	r2, r2, lr
 8018ea8:	d8f3      	bhi.n	8018e92 <__lshift+0x6e>
 8018eaa:	ebac 0304 	sub.w	r3, ip, r4
 8018eae:	3b15      	subs	r3, #21
 8018eb0:	f023 0303 	bic.w	r3, r3, #3
 8018eb4:	3304      	adds	r3, #4
 8018eb6:	f104 0015 	add.w	r0, r4, #21
 8018eba:	4584      	cmp	ip, r0
 8018ebc:	bf38      	it	cc
 8018ebe:	2304      	movcc	r3, #4
 8018ec0:	50ca      	str	r2, [r1, r3]
 8018ec2:	b10a      	cbz	r2, 8018ec8 <__lshift+0xa4>
 8018ec4:	f108 0602 	add.w	r6, r8, #2
 8018ec8:	3e01      	subs	r6, #1
 8018eca:	4638      	mov	r0, r7
 8018ecc:	612e      	str	r6, [r5, #16]
 8018ece:	4621      	mov	r1, r4
 8018ed0:	f7ff fdd8 	bl	8018a84 <_Bfree>
 8018ed4:	4628      	mov	r0, r5
 8018ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018eda:	f842 0f04 	str.w	r0, [r2, #4]!
 8018ede:	3301      	adds	r3, #1
 8018ee0:	e7c5      	b.n	8018e6e <__lshift+0x4a>
 8018ee2:	3904      	subs	r1, #4
 8018ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ee8:	f841 2f04 	str.w	r2, [r1, #4]!
 8018eec:	459c      	cmp	ip, r3
 8018eee:	d8f9      	bhi.n	8018ee4 <__lshift+0xc0>
 8018ef0:	e7ea      	b.n	8018ec8 <__lshift+0xa4>
 8018ef2:	bf00      	nop
 8018ef4:	0801c525 	.word	0x0801c525
 8018ef8:	0801c536 	.word	0x0801c536

08018efc <__mcmp>:
 8018efc:	b530      	push	{r4, r5, lr}
 8018efe:	6902      	ldr	r2, [r0, #16]
 8018f00:	690c      	ldr	r4, [r1, #16]
 8018f02:	1b12      	subs	r2, r2, r4
 8018f04:	d10e      	bne.n	8018f24 <__mcmp+0x28>
 8018f06:	f100 0314 	add.w	r3, r0, #20
 8018f0a:	3114      	adds	r1, #20
 8018f0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018f10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018f14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018f18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018f1c:	42a5      	cmp	r5, r4
 8018f1e:	d003      	beq.n	8018f28 <__mcmp+0x2c>
 8018f20:	d305      	bcc.n	8018f2e <__mcmp+0x32>
 8018f22:	2201      	movs	r2, #1
 8018f24:	4610      	mov	r0, r2
 8018f26:	bd30      	pop	{r4, r5, pc}
 8018f28:	4283      	cmp	r3, r0
 8018f2a:	d3f3      	bcc.n	8018f14 <__mcmp+0x18>
 8018f2c:	e7fa      	b.n	8018f24 <__mcmp+0x28>
 8018f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018f32:	e7f7      	b.n	8018f24 <__mcmp+0x28>

08018f34 <__mdiff>:
 8018f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f38:	460c      	mov	r4, r1
 8018f3a:	4606      	mov	r6, r0
 8018f3c:	4611      	mov	r1, r2
 8018f3e:	4620      	mov	r0, r4
 8018f40:	4690      	mov	r8, r2
 8018f42:	f7ff ffdb 	bl	8018efc <__mcmp>
 8018f46:	1e05      	subs	r5, r0, #0
 8018f48:	d110      	bne.n	8018f6c <__mdiff+0x38>
 8018f4a:	4629      	mov	r1, r5
 8018f4c:	4630      	mov	r0, r6
 8018f4e:	f7ff fd59 	bl	8018a04 <_Balloc>
 8018f52:	b930      	cbnz	r0, 8018f62 <__mdiff+0x2e>
 8018f54:	4b3a      	ldr	r3, [pc, #232]	; (8019040 <__mdiff+0x10c>)
 8018f56:	4602      	mov	r2, r0
 8018f58:	f240 2137 	movw	r1, #567	; 0x237
 8018f5c:	4839      	ldr	r0, [pc, #228]	; (8019044 <__mdiff+0x110>)
 8018f5e:	f000 fad9 	bl	8019514 <__assert_func>
 8018f62:	2301      	movs	r3, #1
 8018f64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018f68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f6c:	bfa4      	itt	ge
 8018f6e:	4643      	movge	r3, r8
 8018f70:	46a0      	movge	r8, r4
 8018f72:	4630      	mov	r0, r6
 8018f74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018f78:	bfa6      	itte	ge
 8018f7a:	461c      	movge	r4, r3
 8018f7c:	2500      	movge	r5, #0
 8018f7e:	2501      	movlt	r5, #1
 8018f80:	f7ff fd40 	bl	8018a04 <_Balloc>
 8018f84:	b920      	cbnz	r0, 8018f90 <__mdiff+0x5c>
 8018f86:	4b2e      	ldr	r3, [pc, #184]	; (8019040 <__mdiff+0x10c>)
 8018f88:	4602      	mov	r2, r0
 8018f8a:	f240 2145 	movw	r1, #581	; 0x245
 8018f8e:	e7e5      	b.n	8018f5c <__mdiff+0x28>
 8018f90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018f94:	6926      	ldr	r6, [r4, #16]
 8018f96:	60c5      	str	r5, [r0, #12]
 8018f98:	f104 0914 	add.w	r9, r4, #20
 8018f9c:	f108 0514 	add.w	r5, r8, #20
 8018fa0:	f100 0e14 	add.w	lr, r0, #20
 8018fa4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018fa8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018fac:	f108 0210 	add.w	r2, r8, #16
 8018fb0:	46f2      	mov	sl, lr
 8018fb2:	2100      	movs	r1, #0
 8018fb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8018fb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018fbc:	fa11 f88b 	uxtah	r8, r1, fp
 8018fc0:	b299      	uxth	r1, r3
 8018fc2:	0c1b      	lsrs	r3, r3, #16
 8018fc4:	eba8 0801 	sub.w	r8, r8, r1
 8018fc8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018fcc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018fd0:	fa1f f888 	uxth.w	r8, r8
 8018fd4:	1419      	asrs	r1, r3, #16
 8018fd6:	454e      	cmp	r6, r9
 8018fd8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018fdc:	f84a 3b04 	str.w	r3, [sl], #4
 8018fe0:	d8e8      	bhi.n	8018fb4 <__mdiff+0x80>
 8018fe2:	1b33      	subs	r3, r6, r4
 8018fe4:	3b15      	subs	r3, #21
 8018fe6:	f023 0303 	bic.w	r3, r3, #3
 8018fea:	3304      	adds	r3, #4
 8018fec:	3415      	adds	r4, #21
 8018fee:	42a6      	cmp	r6, r4
 8018ff0:	bf38      	it	cc
 8018ff2:	2304      	movcc	r3, #4
 8018ff4:	441d      	add	r5, r3
 8018ff6:	4473      	add	r3, lr
 8018ff8:	469e      	mov	lr, r3
 8018ffa:	462e      	mov	r6, r5
 8018ffc:	4566      	cmp	r6, ip
 8018ffe:	d30e      	bcc.n	801901e <__mdiff+0xea>
 8019000:	f10c 0203 	add.w	r2, ip, #3
 8019004:	1b52      	subs	r2, r2, r5
 8019006:	f022 0203 	bic.w	r2, r2, #3
 801900a:	3d03      	subs	r5, #3
 801900c:	45ac      	cmp	ip, r5
 801900e:	bf38      	it	cc
 8019010:	2200      	movcc	r2, #0
 8019012:	4413      	add	r3, r2
 8019014:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019018:	b17a      	cbz	r2, 801903a <__mdiff+0x106>
 801901a:	6107      	str	r7, [r0, #16]
 801901c:	e7a4      	b.n	8018f68 <__mdiff+0x34>
 801901e:	f856 8b04 	ldr.w	r8, [r6], #4
 8019022:	fa11 f288 	uxtah	r2, r1, r8
 8019026:	1414      	asrs	r4, r2, #16
 8019028:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801902c:	b292      	uxth	r2, r2
 801902e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019032:	f84e 2b04 	str.w	r2, [lr], #4
 8019036:	1421      	asrs	r1, r4, #16
 8019038:	e7e0      	b.n	8018ffc <__mdiff+0xc8>
 801903a:	3f01      	subs	r7, #1
 801903c:	e7ea      	b.n	8019014 <__mdiff+0xe0>
 801903e:	bf00      	nop
 8019040:	0801c525 	.word	0x0801c525
 8019044:	0801c536 	.word	0x0801c536

08019048 <__d2b>:
 8019048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801904c:	460f      	mov	r7, r1
 801904e:	2101      	movs	r1, #1
 8019050:	ec59 8b10 	vmov	r8, r9, d0
 8019054:	4616      	mov	r6, r2
 8019056:	f7ff fcd5 	bl	8018a04 <_Balloc>
 801905a:	4604      	mov	r4, r0
 801905c:	b930      	cbnz	r0, 801906c <__d2b+0x24>
 801905e:	4602      	mov	r2, r0
 8019060:	4b24      	ldr	r3, [pc, #144]	; (80190f4 <__d2b+0xac>)
 8019062:	4825      	ldr	r0, [pc, #148]	; (80190f8 <__d2b+0xb0>)
 8019064:	f240 310f 	movw	r1, #783	; 0x30f
 8019068:	f000 fa54 	bl	8019514 <__assert_func>
 801906c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019074:	bb2d      	cbnz	r5, 80190c2 <__d2b+0x7a>
 8019076:	9301      	str	r3, [sp, #4]
 8019078:	f1b8 0300 	subs.w	r3, r8, #0
 801907c:	d026      	beq.n	80190cc <__d2b+0x84>
 801907e:	4668      	mov	r0, sp
 8019080:	9300      	str	r3, [sp, #0]
 8019082:	f7ff fd87 	bl	8018b94 <__lo0bits>
 8019086:	e9dd 1200 	ldrd	r1, r2, [sp]
 801908a:	b1e8      	cbz	r0, 80190c8 <__d2b+0x80>
 801908c:	f1c0 0320 	rsb	r3, r0, #32
 8019090:	fa02 f303 	lsl.w	r3, r2, r3
 8019094:	430b      	orrs	r3, r1
 8019096:	40c2      	lsrs	r2, r0
 8019098:	6163      	str	r3, [r4, #20]
 801909a:	9201      	str	r2, [sp, #4]
 801909c:	9b01      	ldr	r3, [sp, #4]
 801909e:	61a3      	str	r3, [r4, #24]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	bf14      	ite	ne
 80190a4:	2202      	movne	r2, #2
 80190a6:	2201      	moveq	r2, #1
 80190a8:	6122      	str	r2, [r4, #16]
 80190aa:	b1bd      	cbz	r5, 80190dc <__d2b+0x94>
 80190ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80190b0:	4405      	add	r5, r0
 80190b2:	603d      	str	r5, [r7, #0]
 80190b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80190b8:	6030      	str	r0, [r6, #0]
 80190ba:	4620      	mov	r0, r4
 80190bc:	b003      	add	sp, #12
 80190be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80190c6:	e7d6      	b.n	8019076 <__d2b+0x2e>
 80190c8:	6161      	str	r1, [r4, #20]
 80190ca:	e7e7      	b.n	801909c <__d2b+0x54>
 80190cc:	a801      	add	r0, sp, #4
 80190ce:	f7ff fd61 	bl	8018b94 <__lo0bits>
 80190d2:	9b01      	ldr	r3, [sp, #4]
 80190d4:	6163      	str	r3, [r4, #20]
 80190d6:	3020      	adds	r0, #32
 80190d8:	2201      	movs	r2, #1
 80190da:	e7e5      	b.n	80190a8 <__d2b+0x60>
 80190dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80190e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80190e4:	6038      	str	r0, [r7, #0]
 80190e6:	6918      	ldr	r0, [r3, #16]
 80190e8:	f7ff fd34 	bl	8018b54 <__hi0bits>
 80190ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80190f0:	e7e2      	b.n	80190b8 <__d2b+0x70>
 80190f2:	bf00      	nop
 80190f4:	0801c525 	.word	0x0801c525
 80190f8:	0801c536 	.word	0x0801c536

080190fc <__sfputc_r>:
 80190fc:	6893      	ldr	r3, [r2, #8]
 80190fe:	3b01      	subs	r3, #1
 8019100:	2b00      	cmp	r3, #0
 8019102:	b410      	push	{r4}
 8019104:	6093      	str	r3, [r2, #8]
 8019106:	da08      	bge.n	801911a <__sfputc_r+0x1e>
 8019108:	6994      	ldr	r4, [r2, #24]
 801910a:	42a3      	cmp	r3, r4
 801910c:	db01      	blt.n	8019112 <__sfputc_r+0x16>
 801910e:	290a      	cmp	r1, #10
 8019110:	d103      	bne.n	801911a <__sfputc_r+0x1e>
 8019112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019116:	f7fe bb52 	b.w	80177be <__swbuf_r>
 801911a:	6813      	ldr	r3, [r2, #0]
 801911c:	1c58      	adds	r0, r3, #1
 801911e:	6010      	str	r0, [r2, #0]
 8019120:	7019      	strb	r1, [r3, #0]
 8019122:	4608      	mov	r0, r1
 8019124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019128:	4770      	bx	lr

0801912a <__sfputs_r>:
 801912a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801912c:	4606      	mov	r6, r0
 801912e:	460f      	mov	r7, r1
 8019130:	4614      	mov	r4, r2
 8019132:	18d5      	adds	r5, r2, r3
 8019134:	42ac      	cmp	r4, r5
 8019136:	d101      	bne.n	801913c <__sfputs_r+0x12>
 8019138:	2000      	movs	r0, #0
 801913a:	e007      	b.n	801914c <__sfputs_r+0x22>
 801913c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019140:	463a      	mov	r2, r7
 8019142:	4630      	mov	r0, r6
 8019144:	f7ff ffda 	bl	80190fc <__sfputc_r>
 8019148:	1c43      	adds	r3, r0, #1
 801914a:	d1f3      	bne.n	8019134 <__sfputs_r+0xa>
 801914c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019150 <_vfiprintf_r>:
 8019150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019154:	460d      	mov	r5, r1
 8019156:	b09d      	sub	sp, #116	; 0x74
 8019158:	4614      	mov	r4, r2
 801915a:	4698      	mov	r8, r3
 801915c:	4606      	mov	r6, r0
 801915e:	b118      	cbz	r0, 8019168 <_vfiprintf_r+0x18>
 8019160:	6a03      	ldr	r3, [r0, #32]
 8019162:	b90b      	cbnz	r3, 8019168 <_vfiprintf_r+0x18>
 8019164:	f7fe fa98 	bl	8017698 <__sinit>
 8019168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801916a:	07d9      	lsls	r1, r3, #31
 801916c:	d405      	bmi.n	801917a <_vfiprintf_r+0x2a>
 801916e:	89ab      	ldrh	r3, [r5, #12]
 8019170:	059a      	lsls	r2, r3, #22
 8019172:	d402      	bmi.n	801917a <_vfiprintf_r+0x2a>
 8019174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019176:	f7fe fcba 	bl	8017aee <__retarget_lock_acquire_recursive>
 801917a:	89ab      	ldrh	r3, [r5, #12]
 801917c:	071b      	lsls	r3, r3, #28
 801917e:	d501      	bpl.n	8019184 <_vfiprintf_r+0x34>
 8019180:	692b      	ldr	r3, [r5, #16]
 8019182:	b99b      	cbnz	r3, 80191ac <_vfiprintf_r+0x5c>
 8019184:	4629      	mov	r1, r5
 8019186:	4630      	mov	r0, r6
 8019188:	f7fe fb56 	bl	8017838 <__swsetup_r>
 801918c:	b170      	cbz	r0, 80191ac <_vfiprintf_r+0x5c>
 801918e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019190:	07dc      	lsls	r4, r3, #31
 8019192:	d504      	bpl.n	801919e <_vfiprintf_r+0x4e>
 8019194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019198:	b01d      	add	sp, #116	; 0x74
 801919a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801919e:	89ab      	ldrh	r3, [r5, #12]
 80191a0:	0598      	lsls	r0, r3, #22
 80191a2:	d4f7      	bmi.n	8019194 <_vfiprintf_r+0x44>
 80191a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80191a6:	f7fe fca3 	bl	8017af0 <__retarget_lock_release_recursive>
 80191aa:	e7f3      	b.n	8019194 <_vfiprintf_r+0x44>
 80191ac:	2300      	movs	r3, #0
 80191ae:	9309      	str	r3, [sp, #36]	; 0x24
 80191b0:	2320      	movs	r3, #32
 80191b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80191b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80191ba:	2330      	movs	r3, #48	; 0x30
 80191bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019370 <_vfiprintf_r+0x220>
 80191c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80191c4:	f04f 0901 	mov.w	r9, #1
 80191c8:	4623      	mov	r3, r4
 80191ca:	469a      	mov	sl, r3
 80191cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80191d0:	b10a      	cbz	r2, 80191d6 <_vfiprintf_r+0x86>
 80191d2:	2a25      	cmp	r2, #37	; 0x25
 80191d4:	d1f9      	bne.n	80191ca <_vfiprintf_r+0x7a>
 80191d6:	ebba 0b04 	subs.w	fp, sl, r4
 80191da:	d00b      	beq.n	80191f4 <_vfiprintf_r+0xa4>
 80191dc:	465b      	mov	r3, fp
 80191de:	4622      	mov	r2, r4
 80191e0:	4629      	mov	r1, r5
 80191e2:	4630      	mov	r0, r6
 80191e4:	f7ff ffa1 	bl	801912a <__sfputs_r>
 80191e8:	3001      	adds	r0, #1
 80191ea:	f000 80a9 	beq.w	8019340 <_vfiprintf_r+0x1f0>
 80191ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80191f0:	445a      	add	r2, fp
 80191f2:	9209      	str	r2, [sp, #36]	; 0x24
 80191f4:	f89a 3000 	ldrb.w	r3, [sl]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	f000 80a1 	beq.w	8019340 <_vfiprintf_r+0x1f0>
 80191fe:	2300      	movs	r3, #0
 8019200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019208:	f10a 0a01 	add.w	sl, sl, #1
 801920c:	9304      	str	r3, [sp, #16]
 801920e:	9307      	str	r3, [sp, #28]
 8019210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019214:	931a      	str	r3, [sp, #104]	; 0x68
 8019216:	4654      	mov	r4, sl
 8019218:	2205      	movs	r2, #5
 801921a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801921e:	4854      	ldr	r0, [pc, #336]	; (8019370 <_vfiprintf_r+0x220>)
 8019220:	f7e6 ffe6 	bl	80001f0 <memchr>
 8019224:	9a04      	ldr	r2, [sp, #16]
 8019226:	b9d8      	cbnz	r0, 8019260 <_vfiprintf_r+0x110>
 8019228:	06d1      	lsls	r1, r2, #27
 801922a:	bf44      	itt	mi
 801922c:	2320      	movmi	r3, #32
 801922e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019232:	0713      	lsls	r3, r2, #28
 8019234:	bf44      	itt	mi
 8019236:	232b      	movmi	r3, #43	; 0x2b
 8019238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801923c:	f89a 3000 	ldrb.w	r3, [sl]
 8019240:	2b2a      	cmp	r3, #42	; 0x2a
 8019242:	d015      	beq.n	8019270 <_vfiprintf_r+0x120>
 8019244:	9a07      	ldr	r2, [sp, #28]
 8019246:	4654      	mov	r4, sl
 8019248:	2000      	movs	r0, #0
 801924a:	f04f 0c0a 	mov.w	ip, #10
 801924e:	4621      	mov	r1, r4
 8019250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019254:	3b30      	subs	r3, #48	; 0x30
 8019256:	2b09      	cmp	r3, #9
 8019258:	d94d      	bls.n	80192f6 <_vfiprintf_r+0x1a6>
 801925a:	b1b0      	cbz	r0, 801928a <_vfiprintf_r+0x13a>
 801925c:	9207      	str	r2, [sp, #28]
 801925e:	e014      	b.n	801928a <_vfiprintf_r+0x13a>
 8019260:	eba0 0308 	sub.w	r3, r0, r8
 8019264:	fa09 f303 	lsl.w	r3, r9, r3
 8019268:	4313      	orrs	r3, r2
 801926a:	9304      	str	r3, [sp, #16]
 801926c:	46a2      	mov	sl, r4
 801926e:	e7d2      	b.n	8019216 <_vfiprintf_r+0xc6>
 8019270:	9b03      	ldr	r3, [sp, #12]
 8019272:	1d19      	adds	r1, r3, #4
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	9103      	str	r1, [sp, #12]
 8019278:	2b00      	cmp	r3, #0
 801927a:	bfbb      	ittet	lt
 801927c:	425b      	neglt	r3, r3
 801927e:	f042 0202 	orrlt.w	r2, r2, #2
 8019282:	9307      	strge	r3, [sp, #28]
 8019284:	9307      	strlt	r3, [sp, #28]
 8019286:	bfb8      	it	lt
 8019288:	9204      	strlt	r2, [sp, #16]
 801928a:	7823      	ldrb	r3, [r4, #0]
 801928c:	2b2e      	cmp	r3, #46	; 0x2e
 801928e:	d10c      	bne.n	80192aa <_vfiprintf_r+0x15a>
 8019290:	7863      	ldrb	r3, [r4, #1]
 8019292:	2b2a      	cmp	r3, #42	; 0x2a
 8019294:	d134      	bne.n	8019300 <_vfiprintf_r+0x1b0>
 8019296:	9b03      	ldr	r3, [sp, #12]
 8019298:	1d1a      	adds	r2, r3, #4
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	9203      	str	r2, [sp, #12]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	bfb8      	it	lt
 80192a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80192a6:	3402      	adds	r4, #2
 80192a8:	9305      	str	r3, [sp, #20]
 80192aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019380 <_vfiprintf_r+0x230>
 80192ae:	7821      	ldrb	r1, [r4, #0]
 80192b0:	2203      	movs	r2, #3
 80192b2:	4650      	mov	r0, sl
 80192b4:	f7e6 ff9c 	bl	80001f0 <memchr>
 80192b8:	b138      	cbz	r0, 80192ca <_vfiprintf_r+0x17a>
 80192ba:	9b04      	ldr	r3, [sp, #16]
 80192bc:	eba0 000a 	sub.w	r0, r0, sl
 80192c0:	2240      	movs	r2, #64	; 0x40
 80192c2:	4082      	lsls	r2, r0
 80192c4:	4313      	orrs	r3, r2
 80192c6:	3401      	adds	r4, #1
 80192c8:	9304      	str	r3, [sp, #16]
 80192ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192ce:	4829      	ldr	r0, [pc, #164]	; (8019374 <_vfiprintf_r+0x224>)
 80192d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80192d4:	2206      	movs	r2, #6
 80192d6:	f7e6 ff8b 	bl	80001f0 <memchr>
 80192da:	2800      	cmp	r0, #0
 80192dc:	d03f      	beq.n	801935e <_vfiprintf_r+0x20e>
 80192de:	4b26      	ldr	r3, [pc, #152]	; (8019378 <_vfiprintf_r+0x228>)
 80192e0:	bb1b      	cbnz	r3, 801932a <_vfiprintf_r+0x1da>
 80192e2:	9b03      	ldr	r3, [sp, #12]
 80192e4:	3307      	adds	r3, #7
 80192e6:	f023 0307 	bic.w	r3, r3, #7
 80192ea:	3308      	adds	r3, #8
 80192ec:	9303      	str	r3, [sp, #12]
 80192ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192f0:	443b      	add	r3, r7
 80192f2:	9309      	str	r3, [sp, #36]	; 0x24
 80192f4:	e768      	b.n	80191c8 <_vfiprintf_r+0x78>
 80192f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80192fa:	460c      	mov	r4, r1
 80192fc:	2001      	movs	r0, #1
 80192fe:	e7a6      	b.n	801924e <_vfiprintf_r+0xfe>
 8019300:	2300      	movs	r3, #0
 8019302:	3401      	adds	r4, #1
 8019304:	9305      	str	r3, [sp, #20]
 8019306:	4619      	mov	r1, r3
 8019308:	f04f 0c0a 	mov.w	ip, #10
 801930c:	4620      	mov	r0, r4
 801930e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019312:	3a30      	subs	r2, #48	; 0x30
 8019314:	2a09      	cmp	r2, #9
 8019316:	d903      	bls.n	8019320 <_vfiprintf_r+0x1d0>
 8019318:	2b00      	cmp	r3, #0
 801931a:	d0c6      	beq.n	80192aa <_vfiprintf_r+0x15a>
 801931c:	9105      	str	r1, [sp, #20]
 801931e:	e7c4      	b.n	80192aa <_vfiprintf_r+0x15a>
 8019320:	fb0c 2101 	mla	r1, ip, r1, r2
 8019324:	4604      	mov	r4, r0
 8019326:	2301      	movs	r3, #1
 8019328:	e7f0      	b.n	801930c <_vfiprintf_r+0x1bc>
 801932a:	ab03      	add	r3, sp, #12
 801932c:	9300      	str	r3, [sp, #0]
 801932e:	462a      	mov	r2, r5
 8019330:	4b12      	ldr	r3, [pc, #72]	; (801937c <_vfiprintf_r+0x22c>)
 8019332:	a904      	add	r1, sp, #16
 8019334:	4630      	mov	r0, r6
 8019336:	f7fd fc9b 	bl	8016c70 <_printf_float>
 801933a:	4607      	mov	r7, r0
 801933c:	1c78      	adds	r0, r7, #1
 801933e:	d1d6      	bne.n	80192ee <_vfiprintf_r+0x19e>
 8019340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019342:	07d9      	lsls	r1, r3, #31
 8019344:	d405      	bmi.n	8019352 <_vfiprintf_r+0x202>
 8019346:	89ab      	ldrh	r3, [r5, #12]
 8019348:	059a      	lsls	r2, r3, #22
 801934a:	d402      	bmi.n	8019352 <_vfiprintf_r+0x202>
 801934c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801934e:	f7fe fbcf 	bl	8017af0 <__retarget_lock_release_recursive>
 8019352:	89ab      	ldrh	r3, [r5, #12]
 8019354:	065b      	lsls	r3, r3, #25
 8019356:	f53f af1d 	bmi.w	8019194 <_vfiprintf_r+0x44>
 801935a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801935c:	e71c      	b.n	8019198 <_vfiprintf_r+0x48>
 801935e:	ab03      	add	r3, sp, #12
 8019360:	9300      	str	r3, [sp, #0]
 8019362:	462a      	mov	r2, r5
 8019364:	4b05      	ldr	r3, [pc, #20]	; (801937c <_vfiprintf_r+0x22c>)
 8019366:	a904      	add	r1, sp, #16
 8019368:	4630      	mov	r0, r6
 801936a:	f7fd ff25 	bl	80171b8 <_printf_i>
 801936e:	e7e4      	b.n	801933a <_vfiprintf_r+0x1ea>
 8019370:	0801c68c 	.word	0x0801c68c
 8019374:	0801c696 	.word	0x0801c696
 8019378:	08016c71 	.word	0x08016c71
 801937c:	0801912b 	.word	0x0801912b
 8019380:	0801c692 	.word	0x0801c692

08019384 <__swhatbuf_r>:
 8019384:	b570      	push	{r4, r5, r6, lr}
 8019386:	460c      	mov	r4, r1
 8019388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801938c:	2900      	cmp	r1, #0
 801938e:	b096      	sub	sp, #88	; 0x58
 8019390:	4615      	mov	r5, r2
 8019392:	461e      	mov	r6, r3
 8019394:	da0d      	bge.n	80193b2 <__swhatbuf_r+0x2e>
 8019396:	89a3      	ldrh	r3, [r4, #12]
 8019398:	f013 0f80 	tst.w	r3, #128	; 0x80
 801939c:	f04f 0100 	mov.w	r1, #0
 80193a0:	bf0c      	ite	eq
 80193a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80193a6:	2340      	movne	r3, #64	; 0x40
 80193a8:	2000      	movs	r0, #0
 80193aa:	6031      	str	r1, [r6, #0]
 80193ac:	602b      	str	r3, [r5, #0]
 80193ae:	b016      	add	sp, #88	; 0x58
 80193b0:	bd70      	pop	{r4, r5, r6, pc}
 80193b2:	466a      	mov	r2, sp
 80193b4:	f000 f87c 	bl	80194b0 <_fstat_r>
 80193b8:	2800      	cmp	r0, #0
 80193ba:	dbec      	blt.n	8019396 <__swhatbuf_r+0x12>
 80193bc:	9901      	ldr	r1, [sp, #4]
 80193be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80193c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80193c6:	4259      	negs	r1, r3
 80193c8:	4159      	adcs	r1, r3
 80193ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80193ce:	e7eb      	b.n	80193a8 <__swhatbuf_r+0x24>

080193d0 <__smakebuf_r>:
 80193d0:	898b      	ldrh	r3, [r1, #12]
 80193d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80193d4:	079d      	lsls	r5, r3, #30
 80193d6:	4606      	mov	r6, r0
 80193d8:	460c      	mov	r4, r1
 80193da:	d507      	bpl.n	80193ec <__smakebuf_r+0x1c>
 80193dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80193e0:	6023      	str	r3, [r4, #0]
 80193e2:	6123      	str	r3, [r4, #16]
 80193e4:	2301      	movs	r3, #1
 80193e6:	6163      	str	r3, [r4, #20]
 80193e8:	b002      	add	sp, #8
 80193ea:	bd70      	pop	{r4, r5, r6, pc}
 80193ec:	ab01      	add	r3, sp, #4
 80193ee:	466a      	mov	r2, sp
 80193f0:	f7ff ffc8 	bl	8019384 <__swhatbuf_r>
 80193f4:	9900      	ldr	r1, [sp, #0]
 80193f6:	4605      	mov	r5, r0
 80193f8:	4630      	mov	r0, r6
 80193fa:	f7ff fa77 	bl	80188ec <_malloc_r>
 80193fe:	b948      	cbnz	r0, 8019414 <__smakebuf_r+0x44>
 8019400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019404:	059a      	lsls	r2, r3, #22
 8019406:	d4ef      	bmi.n	80193e8 <__smakebuf_r+0x18>
 8019408:	f023 0303 	bic.w	r3, r3, #3
 801940c:	f043 0302 	orr.w	r3, r3, #2
 8019410:	81a3      	strh	r3, [r4, #12]
 8019412:	e7e3      	b.n	80193dc <__smakebuf_r+0xc>
 8019414:	89a3      	ldrh	r3, [r4, #12]
 8019416:	6020      	str	r0, [r4, #0]
 8019418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801941c:	81a3      	strh	r3, [r4, #12]
 801941e:	9b00      	ldr	r3, [sp, #0]
 8019420:	6163      	str	r3, [r4, #20]
 8019422:	9b01      	ldr	r3, [sp, #4]
 8019424:	6120      	str	r0, [r4, #16]
 8019426:	b15b      	cbz	r3, 8019440 <__smakebuf_r+0x70>
 8019428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801942c:	4630      	mov	r0, r6
 801942e:	f000 f851 	bl	80194d4 <_isatty_r>
 8019432:	b128      	cbz	r0, 8019440 <__smakebuf_r+0x70>
 8019434:	89a3      	ldrh	r3, [r4, #12]
 8019436:	f023 0303 	bic.w	r3, r3, #3
 801943a:	f043 0301 	orr.w	r3, r3, #1
 801943e:	81a3      	strh	r3, [r4, #12]
 8019440:	89a3      	ldrh	r3, [r4, #12]
 8019442:	431d      	orrs	r5, r3
 8019444:	81a5      	strh	r5, [r4, #12]
 8019446:	e7cf      	b.n	80193e8 <__smakebuf_r+0x18>

08019448 <_putc_r>:
 8019448:	b570      	push	{r4, r5, r6, lr}
 801944a:	460d      	mov	r5, r1
 801944c:	4614      	mov	r4, r2
 801944e:	4606      	mov	r6, r0
 8019450:	b118      	cbz	r0, 801945a <_putc_r+0x12>
 8019452:	6a03      	ldr	r3, [r0, #32]
 8019454:	b90b      	cbnz	r3, 801945a <_putc_r+0x12>
 8019456:	f7fe f91f 	bl	8017698 <__sinit>
 801945a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801945c:	07d8      	lsls	r0, r3, #31
 801945e:	d405      	bmi.n	801946c <_putc_r+0x24>
 8019460:	89a3      	ldrh	r3, [r4, #12]
 8019462:	0599      	lsls	r1, r3, #22
 8019464:	d402      	bmi.n	801946c <_putc_r+0x24>
 8019466:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019468:	f7fe fb41 	bl	8017aee <__retarget_lock_acquire_recursive>
 801946c:	68a3      	ldr	r3, [r4, #8]
 801946e:	3b01      	subs	r3, #1
 8019470:	2b00      	cmp	r3, #0
 8019472:	60a3      	str	r3, [r4, #8]
 8019474:	da05      	bge.n	8019482 <_putc_r+0x3a>
 8019476:	69a2      	ldr	r2, [r4, #24]
 8019478:	4293      	cmp	r3, r2
 801947a:	db12      	blt.n	80194a2 <_putc_r+0x5a>
 801947c:	b2eb      	uxtb	r3, r5
 801947e:	2b0a      	cmp	r3, #10
 8019480:	d00f      	beq.n	80194a2 <_putc_r+0x5a>
 8019482:	6823      	ldr	r3, [r4, #0]
 8019484:	1c5a      	adds	r2, r3, #1
 8019486:	6022      	str	r2, [r4, #0]
 8019488:	701d      	strb	r5, [r3, #0]
 801948a:	b2ed      	uxtb	r5, r5
 801948c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801948e:	07da      	lsls	r2, r3, #31
 8019490:	d405      	bmi.n	801949e <_putc_r+0x56>
 8019492:	89a3      	ldrh	r3, [r4, #12]
 8019494:	059b      	lsls	r3, r3, #22
 8019496:	d402      	bmi.n	801949e <_putc_r+0x56>
 8019498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801949a:	f7fe fb29 	bl	8017af0 <__retarget_lock_release_recursive>
 801949e:	4628      	mov	r0, r5
 80194a0:	bd70      	pop	{r4, r5, r6, pc}
 80194a2:	4629      	mov	r1, r5
 80194a4:	4622      	mov	r2, r4
 80194a6:	4630      	mov	r0, r6
 80194a8:	f7fe f989 	bl	80177be <__swbuf_r>
 80194ac:	4605      	mov	r5, r0
 80194ae:	e7ed      	b.n	801948c <_putc_r+0x44>

080194b0 <_fstat_r>:
 80194b0:	b538      	push	{r3, r4, r5, lr}
 80194b2:	4d07      	ldr	r5, [pc, #28]	; (80194d0 <_fstat_r+0x20>)
 80194b4:	2300      	movs	r3, #0
 80194b6:	4604      	mov	r4, r0
 80194b8:	4608      	mov	r0, r1
 80194ba:	4611      	mov	r1, r2
 80194bc:	602b      	str	r3, [r5, #0]
 80194be:	f7f0 f9f8 	bl	80098b2 <_fstat>
 80194c2:	1c43      	adds	r3, r0, #1
 80194c4:	d102      	bne.n	80194cc <_fstat_r+0x1c>
 80194c6:	682b      	ldr	r3, [r5, #0]
 80194c8:	b103      	cbz	r3, 80194cc <_fstat_r+0x1c>
 80194ca:	6023      	str	r3, [r4, #0]
 80194cc:	bd38      	pop	{r3, r4, r5, pc}
 80194ce:	bf00      	nop
 80194d0:	2000dc9c 	.word	0x2000dc9c

080194d4 <_isatty_r>:
 80194d4:	b538      	push	{r3, r4, r5, lr}
 80194d6:	4d06      	ldr	r5, [pc, #24]	; (80194f0 <_isatty_r+0x1c>)
 80194d8:	2300      	movs	r3, #0
 80194da:	4604      	mov	r4, r0
 80194dc:	4608      	mov	r0, r1
 80194de:	602b      	str	r3, [r5, #0]
 80194e0:	f7f0 f9f7 	bl	80098d2 <_isatty>
 80194e4:	1c43      	adds	r3, r0, #1
 80194e6:	d102      	bne.n	80194ee <_isatty_r+0x1a>
 80194e8:	682b      	ldr	r3, [r5, #0]
 80194ea:	b103      	cbz	r3, 80194ee <_isatty_r+0x1a>
 80194ec:	6023      	str	r3, [r4, #0]
 80194ee:	bd38      	pop	{r3, r4, r5, pc}
 80194f0:	2000dc9c 	.word	0x2000dc9c

080194f4 <_sbrk_r>:
 80194f4:	b538      	push	{r3, r4, r5, lr}
 80194f6:	4d06      	ldr	r5, [pc, #24]	; (8019510 <_sbrk_r+0x1c>)
 80194f8:	2300      	movs	r3, #0
 80194fa:	4604      	mov	r4, r0
 80194fc:	4608      	mov	r0, r1
 80194fe:	602b      	str	r3, [r5, #0]
 8019500:	f7f0 fa00 	bl	8009904 <_sbrk>
 8019504:	1c43      	adds	r3, r0, #1
 8019506:	d102      	bne.n	801950e <_sbrk_r+0x1a>
 8019508:	682b      	ldr	r3, [r5, #0]
 801950a:	b103      	cbz	r3, 801950e <_sbrk_r+0x1a>
 801950c:	6023      	str	r3, [r4, #0]
 801950e:	bd38      	pop	{r3, r4, r5, pc}
 8019510:	2000dc9c 	.word	0x2000dc9c

08019514 <__assert_func>:
 8019514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019516:	4614      	mov	r4, r2
 8019518:	461a      	mov	r2, r3
 801951a:	4b09      	ldr	r3, [pc, #36]	; (8019540 <__assert_func+0x2c>)
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	4605      	mov	r5, r0
 8019520:	68d8      	ldr	r0, [r3, #12]
 8019522:	b14c      	cbz	r4, 8019538 <__assert_func+0x24>
 8019524:	4b07      	ldr	r3, [pc, #28]	; (8019544 <__assert_func+0x30>)
 8019526:	9100      	str	r1, [sp, #0]
 8019528:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801952c:	4906      	ldr	r1, [pc, #24]	; (8019548 <__assert_func+0x34>)
 801952e:	462b      	mov	r3, r5
 8019530:	f000 f844 	bl	80195bc <fiprintf>
 8019534:	f000 f854 	bl	80195e0 <abort>
 8019538:	4b04      	ldr	r3, [pc, #16]	; (801954c <__assert_func+0x38>)
 801953a:	461c      	mov	r4, r3
 801953c:	e7f3      	b.n	8019526 <__assert_func+0x12>
 801953e:	bf00      	nop
 8019540:	20000498 	.word	0x20000498
 8019544:	0801c6a7 	.word	0x0801c6a7
 8019548:	0801c6b4 	.word	0x0801c6b4
 801954c:	0801c6e2 	.word	0x0801c6e2

08019550 <_calloc_r>:
 8019550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019552:	fba1 2402 	umull	r2, r4, r1, r2
 8019556:	b94c      	cbnz	r4, 801956c <_calloc_r+0x1c>
 8019558:	4611      	mov	r1, r2
 801955a:	9201      	str	r2, [sp, #4]
 801955c:	f7ff f9c6 	bl	80188ec <_malloc_r>
 8019560:	9a01      	ldr	r2, [sp, #4]
 8019562:	4605      	mov	r5, r0
 8019564:	b930      	cbnz	r0, 8019574 <_calloc_r+0x24>
 8019566:	4628      	mov	r0, r5
 8019568:	b003      	add	sp, #12
 801956a:	bd30      	pop	{r4, r5, pc}
 801956c:	220c      	movs	r2, #12
 801956e:	6002      	str	r2, [r0, #0]
 8019570:	2500      	movs	r5, #0
 8019572:	e7f8      	b.n	8019566 <_calloc_r+0x16>
 8019574:	4621      	mov	r1, r4
 8019576:	f7fe f9b7 	bl	80178e8 <memset>
 801957a:	e7f4      	b.n	8019566 <_calloc_r+0x16>

0801957c <__ascii_mbtowc>:
 801957c:	b082      	sub	sp, #8
 801957e:	b901      	cbnz	r1, 8019582 <__ascii_mbtowc+0x6>
 8019580:	a901      	add	r1, sp, #4
 8019582:	b142      	cbz	r2, 8019596 <__ascii_mbtowc+0x1a>
 8019584:	b14b      	cbz	r3, 801959a <__ascii_mbtowc+0x1e>
 8019586:	7813      	ldrb	r3, [r2, #0]
 8019588:	600b      	str	r3, [r1, #0]
 801958a:	7812      	ldrb	r2, [r2, #0]
 801958c:	1e10      	subs	r0, r2, #0
 801958e:	bf18      	it	ne
 8019590:	2001      	movne	r0, #1
 8019592:	b002      	add	sp, #8
 8019594:	4770      	bx	lr
 8019596:	4610      	mov	r0, r2
 8019598:	e7fb      	b.n	8019592 <__ascii_mbtowc+0x16>
 801959a:	f06f 0001 	mvn.w	r0, #1
 801959e:	e7f8      	b.n	8019592 <__ascii_mbtowc+0x16>

080195a0 <__ascii_wctomb>:
 80195a0:	b149      	cbz	r1, 80195b6 <__ascii_wctomb+0x16>
 80195a2:	2aff      	cmp	r2, #255	; 0xff
 80195a4:	bf85      	ittet	hi
 80195a6:	238a      	movhi	r3, #138	; 0x8a
 80195a8:	6003      	strhi	r3, [r0, #0]
 80195aa:	700a      	strbls	r2, [r1, #0]
 80195ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80195b0:	bf98      	it	ls
 80195b2:	2001      	movls	r0, #1
 80195b4:	4770      	bx	lr
 80195b6:	4608      	mov	r0, r1
 80195b8:	4770      	bx	lr
	...

080195bc <fiprintf>:
 80195bc:	b40e      	push	{r1, r2, r3}
 80195be:	b503      	push	{r0, r1, lr}
 80195c0:	4601      	mov	r1, r0
 80195c2:	ab03      	add	r3, sp, #12
 80195c4:	4805      	ldr	r0, [pc, #20]	; (80195dc <fiprintf+0x20>)
 80195c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80195ca:	6800      	ldr	r0, [r0, #0]
 80195cc:	9301      	str	r3, [sp, #4]
 80195ce:	f7ff fdbf 	bl	8019150 <_vfiprintf_r>
 80195d2:	b002      	add	sp, #8
 80195d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80195d8:	b003      	add	sp, #12
 80195da:	4770      	bx	lr
 80195dc:	20000498 	.word	0x20000498

080195e0 <abort>:
 80195e0:	b508      	push	{r3, lr}
 80195e2:	2006      	movs	r0, #6
 80195e4:	f000 f82c 	bl	8019640 <raise>
 80195e8:	2001      	movs	r0, #1
 80195ea:	f7f0 f913 	bl	8009814 <_exit>

080195ee <_raise_r>:
 80195ee:	291f      	cmp	r1, #31
 80195f0:	b538      	push	{r3, r4, r5, lr}
 80195f2:	4604      	mov	r4, r0
 80195f4:	460d      	mov	r5, r1
 80195f6:	d904      	bls.n	8019602 <_raise_r+0x14>
 80195f8:	2316      	movs	r3, #22
 80195fa:	6003      	str	r3, [r0, #0]
 80195fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019600:	bd38      	pop	{r3, r4, r5, pc}
 8019602:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019604:	b112      	cbz	r2, 801960c <_raise_r+0x1e>
 8019606:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801960a:	b94b      	cbnz	r3, 8019620 <_raise_r+0x32>
 801960c:	4620      	mov	r0, r4
 801960e:	f000 f831 	bl	8019674 <_getpid_r>
 8019612:	462a      	mov	r2, r5
 8019614:	4601      	mov	r1, r0
 8019616:	4620      	mov	r0, r4
 8019618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801961c:	f000 b818 	b.w	8019650 <_kill_r>
 8019620:	2b01      	cmp	r3, #1
 8019622:	d00a      	beq.n	801963a <_raise_r+0x4c>
 8019624:	1c59      	adds	r1, r3, #1
 8019626:	d103      	bne.n	8019630 <_raise_r+0x42>
 8019628:	2316      	movs	r3, #22
 801962a:	6003      	str	r3, [r0, #0]
 801962c:	2001      	movs	r0, #1
 801962e:	e7e7      	b.n	8019600 <_raise_r+0x12>
 8019630:	2400      	movs	r4, #0
 8019632:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019636:	4628      	mov	r0, r5
 8019638:	4798      	blx	r3
 801963a:	2000      	movs	r0, #0
 801963c:	e7e0      	b.n	8019600 <_raise_r+0x12>
	...

08019640 <raise>:
 8019640:	4b02      	ldr	r3, [pc, #8]	; (801964c <raise+0xc>)
 8019642:	4601      	mov	r1, r0
 8019644:	6818      	ldr	r0, [r3, #0]
 8019646:	f7ff bfd2 	b.w	80195ee <_raise_r>
 801964a:	bf00      	nop
 801964c:	20000498 	.word	0x20000498

08019650 <_kill_r>:
 8019650:	b538      	push	{r3, r4, r5, lr}
 8019652:	4d07      	ldr	r5, [pc, #28]	; (8019670 <_kill_r+0x20>)
 8019654:	2300      	movs	r3, #0
 8019656:	4604      	mov	r4, r0
 8019658:	4608      	mov	r0, r1
 801965a:	4611      	mov	r1, r2
 801965c:	602b      	str	r3, [r5, #0]
 801965e:	f7f0 f8c9 	bl	80097f4 <_kill>
 8019662:	1c43      	adds	r3, r0, #1
 8019664:	d102      	bne.n	801966c <_kill_r+0x1c>
 8019666:	682b      	ldr	r3, [r5, #0]
 8019668:	b103      	cbz	r3, 801966c <_kill_r+0x1c>
 801966a:	6023      	str	r3, [r4, #0]
 801966c:	bd38      	pop	{r3, r4, r5, pc}
 801966e:	bf00      	nop
 8019670:	2000dc9c 	.word	0x2000dc9c

08019674 <_getpid_r>:
 8019674:	f7f0 b8b6 	b.w	80097e4 <_getpid>

08019678 <sqrtf>:
 8019678:	b508      	push	{r3, lr}
 801967a:	ed2d 8b02 	vpush	{d8}
 801967e:	eeb0 8a40 	vmov.f32	s16, s0
 8019682:	f000 f817 	bl	80196b4 <__ieee754_sqrtf>
 8019686:	eeb4 8a48 	vcmp.f32	s16, s16
 801968a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801968e:	d60c      	bvs.n	80196aa <sqrtf+0x32>
 8019690:	eddf 8a07 	vldr	s17, [pc, #28]	; 80196b0 <sqrtf+0x38>
 8019694:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801969c:	d505      	bpl.n	80196aa <sqrtf+0x32>
 801969e:	f7fe f9fb 	bl	8017a98 <__errno>
 80196a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80196a6:	2321      	movs	r3, #33	; 0x21
 80196a8:	6003      	str	r3, [r0, #0]
 80196aa:	ecbd 8b02 	vpop	{d8}
 80196ae:	bd08      	pop	{r3, pc}
 80196b0:	00000000 	.word	0x00000000

080196b4 <__ieee754_sqrtf>:
 80196b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80196b8:	4770      	bx	lr
	...

080196bc <_init>:
 80196bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196be:	bf00      	nop
 80196c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196c2:	bc08      	pop	{r3}
 80196c4:	469e      	mov	lr, r3
 80196c6:	4770      	bx	lr

080196c8 <_fini>:
 80196c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196ca:	bf00      	nop
 80196cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196ce:	bc08      	pop	{r3}
 80196d0:	469e      	mov	lr, r3
 80196d2:	4770      	bx	lr

080196d4 <__params_locSrv>:
 80196d4:	0081 0000 9f2c 0801 0000 0000 0000 0000     ....,...........
 80196e4:	0000 0000 0028 0000 9f7c 0801 476c 2000     ....(...|...lG. 
	...
 80196fc:	0028 0000 9f90 0801 476d 2000 0000 0000     (.......mG. ....
 801970c:	0000 0000 0026 0000 9fa0 0801 0050 2000     ....&.......P.. 
	...
 8019724:	0026 0000 9fb0 0801 0054 2000 0000 0000     &.......T.. ....
 8019734:	0000 0000 0080 0000 9f50 0801 0000 0000     ........P.......
	...

0801974c <__params_crtpsrv>:
 801974c:	0081 0000 9fe0 0801 0000 0000 0000 0000     ................
 801975c:	0000 0000 0009 0000 9fe8 0801 477a 2000     ............zG. 
	...
 8019774:	0080 0000 9ff4 0801 0000 0000 0000 0000     ................
 8019784:	0000 0000                                   ....

08019788 <__params_syslink>:
 8019788:	0081 0000 a260 0801 0000 0000 0000 0000     ....`...........
 8019798:	0000 0000 0008 0000 a268 0801 48ec 2000     ........h....H. 
	...
 80197b0:	0080 0000 a270 0801 0000 0000 0000 0000     ....p...........
 80197c0:	0000 0000                                   ....

080197c4 <__params_led>:
 80197c4:	0081 0000 a328 0801 0000 0000 0000 0000     ....(...........
 80197d4:	0000 0000 0008 0000 a32c 0801 4937 2000     ........,...7I. 
 80197e4:	2e49 0800 0000 0000 0080 0000 a334 0801     I...........4...
	...

08019800 <__params_pm>:
 8019800:	0081 0000 a360 0801 0000 0000 0000 0000     ....`...........
 8019810:	0000 0000 0136 0000 a3c0 0801 02b4 2000     ....6.......... 
	...
 8019828:	0136 0000 a3cc 0801 02b0 2000 0000 0000     6.......... ....
 8019838:	0000 0000 0080 0000 a3b8 0801 0000 0000     ................
	...

08019850 <__params_sound>:
 8019850:	0081 0000 a42c 0801 0000 0000 0000 0000     ....,...........
 8019860:	0000 0000 0138 0000 a434 0801 4bb0 2000     ....8...4....K. 
	...
 8019878:	006a 0000 a43c 0801 4ba8 2000 0000 0000     j...<....K. ....
 8019888:	0000 0000 0029 0000 a444 0801 02b8 2000     ....)...D...... 
	...
 80198a0:	0080 0000 a44c 0801 0000 0000 0000 0000     ....L...........
 80198b0:	0000 0000                                   ....

080198b4 <__params_system>:
 80198b4:	0081 0000 a4b8 0801 0000 0000 0000 0000     ................
 80198c4:	0000 0000 0008 0000 a4c0 0801 4bb9 2000     .............K. 
 80198d4:	3cbd 0800 0000 0000 0008 0000 a4d0 0801     .<..............
 80198e4:	4bba 2000 3cdd 0800 0000 0000 0080 0000     .K. .<..........
 80198f4:	a4e0 0801 0000 0000 0000 0000 0000 0000     ................

08019904 <__params_system>:
 8019904:	0081 0000 ae58 0801 0000 0000 0000 0000     ....X...........
 8019914:	0000 0000 0028 0000 ae60 0801 7046 2000     ....(...`...Fp. 
	...
 801992c:	0080 0000 ae6c 0801 0000 0000 0000 0000     ....l...........
 801993c:	0000 0000                                   ....

08019940 <__params_usec>:
 8019940:	0081 0000 aea0 0801 0000 0000 0000 0000     ................
 8019950:	0000 0000 0008 0000 aea8 0801 707d 2000     ............}p. 
 8019960:	87c1 0800 0000 0000 0080 0000 aeb0 0801     ................
	...

0801997c <__params_firmware>:
 801997c:	0081 0000 aee4 0801 0000 0000 0000 0000     ................
 801998c:	0000 0000 006a 0000 aef0 0801 c34c 0801     ....j.......L...
	...
 80199a4:	0069 0000 aefc 0801 c350 0801 0000 0000     i.......P.......
 80199b4:	0000 0000 0068 0000 af08 0801 c348 0801     ....h.......H...
	...
 80199cc:	0080 0000 af14 0801 0000 0000 0000 0000     ................
 80199dc:	0000 0000                                   ....

080199e0 <__logs_estimator>:
 80199e0:	0081 0000 9dd4 0801 0000 0000 0047 0000     ............G...
 80199f0:	9de0 0801 0000 2000 0047 0000 9de8 0801     ....... G.......
 8019a00:	001c 2000 0080 0000 9df0 0801 0000 0000     ... ............

08019a10 <__logs_ext_pos>:
 8019a10:	0081 0000 9f08 0801 0000 0000 0007 0000     ................
 8019a20:	9f10 0801 4734 2000 0007 0000 9f14 0801     ....4G. ........
 8019a30:	4738 2000 0007 0000 9f18 0801 473c 2000     8G. ........<G. 
 8019a40:	0080 0000 9f1c 0801 0000 0000               ............

08019a4c <__logs_locSrv>:
 8019a4c:	0081 0000 9f2c 0801 0000 0000 0027 0000     ....,.......'...
 8019a5c:	9f34 0801 4748 2000 0027 0000 9f38 0801     4...HG. '...8...
 8019a6c:	474c 2000 0027 0000 9f3c 0801 4750 2000     LG. '...<...PG. 
 8019a7c:	0027 0000 9f40 0801 4754 2000 0027 0000     '...@...TG. '...
 8019a8c:	9f44 0801 4758 2000 0027 0000 9f48 0801     D...XG. '...H...
 8019a9c:	475c 2000 0027 0000 9f4c 0801 4760 2000     \G. '...L...`G. 
 8019aac:	0080 0000 9f50 0801 0000 0000               ....P.......

08019ab8 <__logs_locSrvZ>:
 8019ab8:	0081 0000 9f5c 0801 0000 0000 0022 0000     ....\......."...
 8019ac8:	9f64 0801 4770 2000 0080 0000 9f6c 0801     d...pG. ....l...
 8019ad8:	0000 0000                                   ....

08019adc <__logs_radio>:
 8019adc:	0081 0000 a0cc 0801 0000 0000 0021 0000     ............!...
 8019aec:	a0d4 0801 480d 2000 0021 0000 a0dc 0801     .....H. !.......
 8019afc:	480e 2000 0080 0000 a0e8 0801 0000 0000     .H. ............

08019b0c <__logs_pm>:
 8019b0c:	0081 0000 a360 0801 0000 0000 0027 0000     ....`.......'...
 8019b1c:	a364 0801 4950 2000 0002 0000 a36c 0801     d...PI. ....l...
 8019b2c:	4954 2000 0007 0000 a374 0801 495c 2000     TI. ....t...\I. 
 8019b3c:	0002 0000 a37c 0801 4960 2000 0007 0000     ....|...`I. ....
 8019b4c:	a388 0801 4968 2000 0007 0000 a390 0801     ....hI. ........
 8019b5c:	4985 2000 0024 0000 a3a0 0801 497d 2000     .I. $.......}I. 
 8019b6c:	0021 0000 a3a8 0801 4989 2000 0080 0000     !........I. ....
 8019b7c:	a3b8 0801 0000 0000                         ........

08019b84 <eventTrigger_estTDOA>:
 8019b84:	9c90 0801 c298 0801 0003 0000 40f0 2000     .............@. 
 8019b94:	0006 0000                                   ....

08019b98 <eventTrigger_estPosition>:
 8019b98:	9ca0 0801 c2b0 0801 0001 0000 40f8 2000     .............@. 
 8019ba8:	0001 0000                                   ....

08019bac <eventTrigger_estPose>:
 8019bac:	9cac 0801 0000 0000 0000 0000 0000 0000     ................
 8019bbc:	0000 0000                                   ....

08019bc0 <eventTrigger_estDistance>:
 8019bc0:	9cc4 0801 c2b8 0801 0002 0000 40fc 2000     .............@. 
 8019bd0:	0005 0000                                   ....

08019bd4 <eventTrigger_estTOF>:
 8019bd4:	9cd0 0801 0000 0000 0000 0000 0000 0000     ................
 8019be4:	0000 0000                                   ....

08019be8 <eventTrigger_estAbsoluteHeight>:
 8019be8:	9cd8 0801 0000 0000 0000 0000 0000 0000     ................
 8019bf8:	0000 0000                                   ....

08019bfc <eventTrigger_estFlow>:
 8019bfc:	9cec 0801 0000 0000 0000 0000 0000 0000     ................
 8019c0c:	0000 0000                                   ....

08019c10 <eventTrigger_estYawError>:
 8019c10:	9d00 0801 c2c8 0801 0001 0000 4104 2000     .............A. 
 8019c20:	0004 0000                                   ....

08019c24 <eventTrigger_estSweepAngle>:
 8019c24:	9d40 0801 c2d0 0801 0005 0000 4108 2000     @............A. 
 8019c34:	000b 0000                                   ....

08019c38 <eventTrigger_estGyroscope>:
 8019c38:	9d50 0801 0000 0000 0000 0000 0000 0000     P...............
 8019c48:	0000 0000                                   ....

08019c4c <eventTrigger_estAcceleration>:
 8019c4c:	9d60 0801 0000 0000 0000 0000 0000 0000     `...............
 8019c5c:	0000 0000                                   ....

08019c60 <eventTrigger_estBarometer>:
 8019c60:	9d70 0801 0000 0000 0000 0000 0000 0000     p...............
 8019c70:	0000 0000                                   ....
