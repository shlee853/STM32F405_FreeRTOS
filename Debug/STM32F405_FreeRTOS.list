
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007778  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  08007908  08007908  00017908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084fc  080084fc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080084fc  080084fc  000184fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008504  08008504  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008504  08008504  00018504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800850c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          000042d8  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200044b0  200044b0  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f9c9  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c93  00000000  00000000  0002fc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cc8  00000000  00000000  000328a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009ad  00000000  00000000  00033570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002170f  00000000  00000000  00033f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f2cb  00000000  00000000  0005562c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c282e  00000000  00000000  000648f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000042f0  00000000  00000000  00127128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0012b418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078f0 	.word	0x080078f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080078f0 	.word	0x080078f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <_write>:
//#include "stm32f4xx_hal_def.h"

extern UART_HandleTypeDef huart6;

int _write(int file, char* p, int len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
		if(HAL_UART_Transmit(&huart6, p, len , 10 )!= 0)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	230a      	movs	r3, #10
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <_write+0x30>)
 8000eba:	f001 fd23 	bl	8002904 <HAL_UART_Transmit>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <_write+0x26>
			//		while(!LL_USART_IsActiveFlag_TXE(USART6));0
			//		usDelay(100);	// 문자 1개 출력당 약 100us 소요, Float, int형 차이 없음
			return -1;
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec8:	e000      	b.n	8000ecc <_write+0x28>
		return len;
 8000eca:	687b      	ldr	r3, [r7, #4]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000494 	.word	0x20000494

08000ed8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <vApplicationGetIdleTaskMemory+0x30>)
 8000eee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200001f4 	.word	0x200001f4
 8000f08:	20000294 	.word	0x20000294

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f000 fc44 	bl	800179c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f85c 	bl	8000fd0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f000 f8ee 	bl	80010f8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000f1c:	f000 f8c2 	bl	80010a4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  InitTick(168000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음
 8000f20:	4921      	ldr	r1, [pc, #132]	; (8000fa8 <main+0x9c>)
 8000f22:	4822      	ldr	r0, [pc, #136]	; (8000fac <main+0xa0>)
 8000f24:	f000 f9b8 	bl	8001298 <InitTick>
  //usDelay(1000);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); 	// LED Off
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2120      	movs	r1, #32
 8000f2c:	4820      	ldr	r0, [pc, #128]	; (8000fb0 <main+0xa4>)
 8000f2e:	f000 ffe7 	bl	8001f00 <HAL_GPIO_WritePin>
  osDelay(1);		// ms 단위, 정확하게 1ms 나오지 않음
 8000f32:	2001      	movs	r0, #1
 8000f34:	f002 fc9f 	bl	8003876 <osDelay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);	// LED On
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <main+0xa4>)
 8000f3e:	f000 ffdf 	bl	8001f00 <HAL_GPIO_WritePin>
  t1 = DWT->CYCCNT;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <main+0xa8>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <main+0xac>)
 8000f48:	6013      	str	r3, [r2, #0]
  osDelay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f002 fc93 	bl	8003876 <osDelay>
  t2 = DWT->CYCCNT;
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <main+0xa8>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <main+0xb0>)
 8000f56:	6013      	str	r3, [r2, #0]
  printf("delay = %.2f\n",(float)(t2-t1)/CLOCK_PER_USEC);
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <main+0xb0>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <main+0xac>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f6a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000fc0 <main+0xb4>
 8000f6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f72:	ee16 0a90 	vmov	r0, s13
 8000f76:	f7ff fae7 	bl	8000548 <__aeabi_f2d>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <main+0xb8>)
 8000f80:	f004 fd0a 	bl	8005998 <iprintf>


  freertos_IntroTitle();
 8000f84:	f000 f912 	bl	80011ac <freertos_IntroTitle>
  printf("[TASK]main\n");
 8000f88:	480f      	ldr	r0, [pc, #60]	; (8000fc8 <main+0xbc>)
 8000f8a:	f004 fd6b 	bl	8005a64 <puts>


  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <main+0xc0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <main+0xc0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f042 0220 	orr.w	r2, r2, #32
 8000f9c:	60da      	str	r2, [r3, #12]
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  USER_THREADS();
 8000f9e:	f000 fb53 	bl	8001648 <USER_THREADS>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fa2:	f002 fc61 	bl	8003868 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <main+0x9a>
 8000fa8:	000f4240 	.word	0x000f4240
 8000fac:	0a037a00 	.word	0x0a037a00
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	e0001000 	.word	0xe0001000
 8000fb8:	200004dc 	.word	0x200004dc
 8000fbc:	200004e0 	.word	0x200004e0
 8000fc0:	43280000 	.word	0x43280000
 8000fc4:	08007908 	.word	0x08007908
 8000fc8:	08007918 	.word	0x08007918
 8000fcc:	20000494 	.word	0x20000494

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2230      	movs	r2, #48	; 0x30
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f004 fe20 	bl	8005c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <SystemClock_Config+0xcc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a27      	ldr	r2, [pc, #156]	; (800109c <SystemClock_Config+0xcc>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <SystemClock_Config+0xcc>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <SystemClock_Config+0xd0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <SystemClock_Config+0xd0>)
 800101a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <SystemClock_Config+0xd0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800102c:	2301      	movs	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001036:	2302      	movs	r3, #2
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001040:	2304      	movs	r3, #4
 8001042:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001044:	23a8      	movs	r3, #168	; 0xa8
 8001046:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800104c:	2304      	movs	r3, #4
 800104e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	4618      	mov	r0, r3
 8001056:	f000 ff6d 	bl	8001f34 <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001060:	f000 f948 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	230f      	movs	r3, #15
 8001066:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001068:	2302      	movs	r3, #2
 800106a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001070:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001074:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2105      	movs	r1, #5
 8001082:	4618      	mov	r0, r3
 8001084:	f001 f9ce 	bl	8002424 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800108e:	f000 f931 	bl	80012f4 <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3750      	adds	r7, #80	; 0x50
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <MX_USART6_UART_Init+0x50>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010dc:	f001 fbc2 	bl	8002864 <HAL_UART_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80010e6:	f000 f905 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000494 	.word	0x20000494
 80010f4:	40011400 	.word	0x40011400

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_GPIO_Init+0x98>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <MX_GPIO_Init+0x98>)
 8001118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_GPIO_Init+0x98>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_GPIO_Init+0x98>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <MX_GPIO_Init+0x98>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_GPIO_Init+0x98>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_GPIO_Init+0x98>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a10      	ldr	r2, [pc, #64]	; (8001190 <MX_GPIO_Init+0x98>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_GPIO_Init+0x98>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2120      	movs	r1, #32
 8001166:	480b      	ldr	r0, [pc, #44]	; (8001194 <MX_GPIO_Init+0x9c>)
 8001168:	f000 feca 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800116c:	2320      	movs	r3, #32
 800116e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4619      	mov	r1, r3
 8001182:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_GPIO_Init+0x9c>)
 8001184:	f000 fd20 	bl	8001bc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400

08001198 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 800119c:	4b02      	ldr	r3, [pc, #8]	; (80011a8 <OSVersion+0x10>)
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	08007924 	.word	0x08007924

080011ac <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 80011b0:	4823      	ldr	r0, [pc, #140]	; (8001240 <freertos_IntroTitle+0x94>)
 80011b2:	f004 fc57 	bl	8005a64 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 80011b6:	4823      	ldr	r0, [pc, #140]	; (8001244 <freertos_IntroTitle+0x98>)
 80011b8:	f004 fc54 	bl	8005a64 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 80011bc:	4822      	ldr	r0, [pc, #136]	; (8001248 <freertos_IntroTitle+0x9c>)
 80011be:	f004 fc51 	bl	8005a64 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 80011c2:	4822      	ldr	r0, [pc, #136]	; (800124c <freertos_IntroTitle+0xa0>)
 80011c4:	f004 fc4e 	bl	8005a64 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 80011c8:	4821      	ldr	r0, [pc, #132]	; (8001250 <freertos_IntroTitle+0xa4>)
 80011ca:	f004 fc4b 	bl	8005a64 <puts>
  printf("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 80011ce:	4821      	ldr	r0, [pc, #132]	; (8001254 <freertos_IntroTitle+0xa8>)
 80011d0:	f004 fc48 	bl	8005a64 <puts>
  printf("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 80011d4:	4820      	ldr	r0, [pc, #128]	; (8001258 <freertos_IntroTitle+0xac>)
 80011d6:	f004 fc45 	bl	8005a64 <puts>
  printf("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 80011da:	4820      	ldr	r0, [pc, #128]	; (800125c <freertos_IntroTitle+0xb0>)
 80011dc:	f004 fc42 	bl	8005a64 <puts>
  printf("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 80011e0:	481f      	ldr	r0, [pc, #124]	; (8001260 <freertos_IntroTitle+0xb4>)
 80011e2:	f004 fc3f 	bl	8005a64 <puts>
  printf("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 80011e6:	481f      	ldr	r0, [pc, #124]	; (8001264 <freertos_IntroTitle+0xb8>)
 80011e8:	f004 fc3c 	bl	8005a64 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 80011ec:	481e      	ldr	r0, [pc, #120]	; (8001268 <freertos_IntroTitle+0xbc>)
 80011ee:	f004 fc39 	bl	8005a64 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 80011f2:	481e      	ldr	r0, [pc, #120]	; (800126c <freertos_IntroTitle+0xc0>)
 80011f4:	f004 fc36 	bl	8005a64 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 80011f8:	481d      	ldr	r0, [pc, #116]	; (8001270 <freertos_IntroTitle+0xc4>)
 80011fa:	f004 fc33 	bl	8005a64 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 80011fe:	481d      	ldr	r0, [pc, #116]	; (8001274 <freertos_IntroTitle+0xc8>)
 8001200:	f004 fc30 	bl	8005a64 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 8001204:	481c      	ldr	r0, [pc, #112]	; (8001278 <freertos_IntroTitle+0xcc>)
 8001206:	f004 fc2d 	bl	8005a64 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 800120a:	481c      	ldr	r0, [pc, #112]	; (800127c <freertos_IntroTitle+0xd0>)
 800120c:	f004 fc2a 	bl	8005a64 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 8001210:	481b      	ldr	r0, [pc, #108]	; (8001280 <freertos_IntroTitle+0xd4>)
 8001212:	f004 fc27 	bl	8005a64 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 8001216:	481b      	ldr	r0, [pc, #108]	; (8001284 <freertos_IntroTitle+0xd8>)
 8001218:	f004 fc24 	bl	8005a64 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 800121c:	481a      	ldr	r0, [pc, #104]	; (8001288 <freertos_IntroTitle+0xdc>)
 800121e:	f004 fc21 	bl	8005a64 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 8001222:	f7ff ffb9 	bl	8001198 <OSVersion>
 8001226:	4603      	mov	r3, r0
 8001228:	4619      	mov	r1, r3
 800122a:	4818      	ldr	r0, [pc, #96]	; (800128c <freertos_IntroTitle+0xe0>)
 800122c:	f004 fbb4 	bl	8005998 <iprintf>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8001230:	4817      	ldr	r0, [pc, #92]	; (8001290 <freertos_IntroTitle+0xe4>)
 8001232:	f004 fc17 	bl	8005a64 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   Copyright guileschool.com\n");
 8001236:	4817      	ldr	r0, [pc, #92]	; (8001294 <freertos_IntroTitle+0xe8>)
 8001238:	f004 fc14 	bl	8005a64 <puts>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	0800792c 	.word	0x0800792c
 8001244:	0800796c 	.word	0x0800796c
 8001248:	080079c0 	.word	0x080079c0
 800124c:	08007a14 	.word	0x08007a14
 8001250:	08007a68 	.word	0x08007a68
 8001254:	08007abc 	.word	0x08007abc
 8001258:	08007b10 	.word	0x08007b10
 800125c:	08007b64 	.word	0x08007b64
 8001260:	08007bb8 	.word	0x08007bb8
 8001264:	08007c0c 	.word	0x08007c0c
 8001268:	08007c60 	.word	0x08007c60
 800126c:	08007cb4 	.word	0x08007cb4
 8001270:	08007d08 	.word	0x08007d08
 8001274:	08007d5c 	.word	0x08007d5c
 8001278:	08007db0 	.word	0x08007db0
 800127c:	08007e04 	.word	0x08007e04
 8001280:	08007e58 	.word	0x08007e58
 8001284:	08007eac 	.word	0x08007eac
 8001288:	08007ef4 	.word	0x08007ef4
 800128c:	08007f20 	.word	0x08007f20
 8001290:	08007f64 	.word	0x08007f64
 8001294:	08007f90 	.word	0x08007f90

08001298 <InitTick>:
  printf("\n\nAssertion failed in %s:%d\n", pcFile, ulLine); for(;;);
}


void InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <InitTick+0x50>)
 80012ac:	3b01      	subs	r3, #1
 80012ae:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <InitTick+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <InitTick+0x50>)
 80012b8:	2205      	movs	r2, #5
 80012ba:	601a      	str	r2, [r3, #0]

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <InitTick+0x54>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <InitTick+0x54>)
 80012c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012c6:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <InitTick+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <InitTick+0x58>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <InitTick+0x58>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6013      	str	r3, [r2, #0]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010
 80012ec:	e000edf0 	.word	0xe000edf0
 80012f0:	e0001000 	.word	0xe0001000

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>
	...

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_MspInit+0x64>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <HAL_MspInit+0x64>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_MspInit+0x64>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_MspInit+0x64>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_MspInit+0x64>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_MspInit+0x64>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	210f      	movs	r1, #15
 8001342:	f06f 0001 	mvn.w	r0, #1
 8001346:	f000 fb76 	bl	8001a36 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2105      	movs	r1, #5
 800134e:	2005      	movs	r0, #5
 8001350:	f000 fb71 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001354:	2005      	movs	r0, #5
 8001356:	f000 fb8a 	bl	8001a6e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <HAL_UART_MspInit+0x94>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d133      	bne.n	80013f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_UART_MspInit+0x98>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_UART_MspInit+0x98>)
 8001394:	f043 0320 	orr.w	r3, r3, #32
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_UART_MspInit+0x98>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f003 0320 	and.w	r3, r3, #32
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_UART_MspInit+0x98>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_UART_MspInit+0x98>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_UART_MspInit+0x98>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c2:	23c0      	movs	r3, #192	; 0xc0
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013d2:	2308      	movs	r3, #8
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4809      	ldr	r0, [pc, #36]	; (8001404 <HAL_UART_MspInit+0x9c>)
 80013de:	f000 fbf3 	bl	8001bc8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2105      	movs	r1, #5
 80013e6:	2047      	movs	r0, #71	; 0x47
 80013e8:	f000 fb25 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80013ec:	2047      	movs	r0, #71	; 0x47
 80013ee:	f000 fb3e 	bl	8001a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40011400 	.word	0x40011400
 8001400:	40023800 	.word	0x40023800
 8001404:	40020800 	.word	0x40020800

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800140c:	e7fe      	b.n	800140c <NMI_Handler+0x4>

0800140e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <MemManage_Handler+0x4>

0800141a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <UsageFault_Handler+0x4>

08001426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <SysTick_Handler+0x2c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <SysTick_Handler+0x16>

		TimingDelay--;
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <SysTick_Handler+0x2c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <SysTick_Handler+0x2c>)
 8001448:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144a:	f000 f9f9 	bl	8001840 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800144e:	f003 f851 	bl	80044f4 <xTaskGetSchedulerState>
 8001452:	4603      	mov	r3, r0
 8001454:	2b01      	cmp	r3, #1
 8001456:	d001      	beq.n	800145c <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001458:	f003 fa8e 	bl	8004978 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200004e8 	.word	0x200004e8

08001464 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <USART6_IRQHandler+0x54>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0320 	and.w	r3, r3, #32
 8001484:	2b20      	cmp	r3, #32
 8001486:	d117      	bne.n	80014b8 <USART6_IRQHandler+0x44>
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <USART6_IRQHandler+0x54>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	2b00      	cmp	r3, #0
 8001494:	d010      	beq.n	80014b8 <USART6_IRQHandler+0x44>
			g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <USART6_IRQHandler+0x54>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <USART6_IRQHandler+0x58>)
 80014a0:	701a      	strb	r2, [r3, #0]
		  __HAL_UART_CLEAR_PEFLAG(&huart6);
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <USART6_IRQHandler+0x54>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <USART6_IRQHandler+0x54>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
	}


  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <USART6_IRQHandler+0x54>)
 80014ba:	f001 faaf 	bl	8002a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000494 	.word	0x20000494
 80014cc:	200004e4 	.word	0x200004e4

080014d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return 1;
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_kill>:

int _kill(int pid, int sig)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ea:	f004 fc43 	bl	8005d74 <__errno>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2216      	movs	r2, #22
 80014f2:	601a      	str	r2, [r3, #0]
  return -1;
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_exit>:

void _exit (int status)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001508:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ffe7 	bl	80014e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001512:	e7fe      	b.n	8001512 <_exit+0x12>

08001514 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e00a      	b.n	800153c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001526:	f3af 8000 	nop.w
 800152a:	4601      	mov	r1, r0
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	b2ca      	uxtb	r2, r1
 8001534:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf0      	blt.n	8001526 <_read+0x12>
  }

  return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_close>:
  }
  return len;
}

int _close(int file)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001576:	605a      	str	r2, [r3, #4]
  return 0;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <_isatty>:

int _isatty(int file)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e8:	f004 fbc4 	bl	8005d74 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20020000 	.word	0x20020000
 8001618:	00000400 	.word	0x00000400
 800161c:	200004ec 	.word	0x200004ec
 8001620:	200044b0 	.word	0x200044b0

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <USER_THREADS>:
int	task1timer, task2timer;

/*-----------------------------------------------------------*/

void USER_THREADS( void )
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af02      	add	r7, sp, #8
#ifdef CMSIS_OS
	osThreadDef(defaultTask, TaskMain, osPriorityHigh, 0, 256);
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
#else
	/* Create one of the two tasks. */
	xTaskCreate(	(TaskFunction_t)TaskMain,		/* Pointer to the function that implements the task. */
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <USER_THREADS+0x24>)
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	2314      	movs	r3, #20
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165c:	4904      	ldr	r1, [pc, #16]	; (8001670 <USER_THREADS+0x28>)
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <USER_THREADS+0x2c>)
 8001660:	f002 fa2e 	bl	8003ac0 <xTaskCreate>
					256,		/* Stack depth - most small microcontrollers will use much less stack than this. */
					NULL,		/* We are not using the task parameter. */
					TASK_MAIN_PRIO,	/* This task will run at this priority */
					&xHandleMain );		/* We are not using the task handle. */
#endif
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200004fc 	.word	0x200004fc
 8001670:	08008014 	.word	0x08008014
 8001674:	08001679 	.word	0x08001679

08001678 <TaskMain>:

static void TaskMain( void const *pvParameters )
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af02      	add	r7, sp, #8
 800167e:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "TaskMain";
 8001680:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <TaskMain+0x4c>)
 8001682:	60fb      	str	r3, [r7, #12]
	struct Param_types *Param;

	pvParameters = pvParameters; // for compiler warning

	/* Print out the name of this task. */
	printf( "%s is running\r\n", pcTaskName );
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	4810      	ldr	r0, [pc, #64]	; (80016c8 <TaskMain+0x50>)
 8001688:	f004 f986 	bl	8005998 <iprintf>
#if 0

#endif // TODO #1

	/* Create the other task in exactly the same way. */
	Param = &Param_Tbl;		/* get parameter tbl addr */
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <TaskMain+0x54>)
 800168e:	60bb      	str	r3, [r7, #8]
	Param->P1 = 111111;		/* set parameter */
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <TaskMain+0x58>)
 8001694:	605a      	str	r2, [r3, #4]
	Param->P2 = 222222;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <TaskMain+0x5c>)
 800169a:	609a      	str	r2, [r3, #8]
#ifdef CMSIS_OS
	osThreadDef(Task2, (void const *)Task2, osPriorityBelowNormal, 0, 256);
	xHandle2 = osThreadCreate (osThread(Task2), (void*)Param);
#else
	xTaskCreate( (TaskFunction_t)Task2, "Task2", 256, (void*)Param, TASK_2_PRIO, &xHandle2 );
 800169c:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <TaskMain+0x60>)
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	2309      	movs	r3, #9
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016aa:	490c      	ldr	r1, [pc, #48]	; (80016dc <TaskMain+0x64>)
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <TaskMain+0x68>)
 80016ae:	f002 fa07 	bl	8003ac0 <xTaskCreate>
#if 0

#endif // TODO #4

	/* delete self task */
	vTaskDelete (xHandleMain);	// vTaskDelete (NULL);
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <TaskMain+0x6c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 fb50 	bl	8003d5c <vTaskDelete>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	08008014 	.word	0x08008014
 80016c8:	08008020 	.word	0x08008020
 80016cc:	200004f0 	.word	0x200004f0
 80016d0:	0001b207 	.word	0x0001b207
 80016d4:	0003640e 	.word	0x0003640e
 80016d8:	20000500 	.word	0x20000500
 80016dc:	08008030 	.word	0x08008030
 80016e0:	080016e9 	.word	0x080016e9
 80016e4:	200004fc 	.word	0x200004fc

080016e8 <Task2>:
		task1timer++;
	}
}

static void Task2( const struct Param_types *Param )
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "Task2";
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <Task2+0x44>)
 80016f2:	60fb      	str	r3, [r7, #12]

	/* Print out the name of this task. */
	printf( "%s is running\n", pcTaskName );
 80016f4:	68f9      	ldr	r1, [r7, #12]
 80016f6:	480e      	ldr	r0, [pc, #56]	; (8001730 <Task2+0x48>)
 80016f8:	f004 f94e 	bl	8005998 <iprintf>

	printf("\n-------  Task2 parameter passed from main --------\n");
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <Task2+0x4c>)
 80016fe:	f004 f9b1 	bl	8005a64 <puts>
	printf("task2 first parameter = %d \n",Param->P1);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4619      	mov	r1, r3
 8001708:	480b      	ldr	r0, [pc, #44]	; (8001738 <Task2+0x50>)
 800170a:	f004 f945 	bl	8005998 <iprintf>
	printf("task2 second parameter = %d \n",Param->P2);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	4619      	mov	r1, r3
 8001714:	4809      	ldr	r0, [pc, #36]	; (800173c <Task2+0x54>)
 8001716:	f004 f93f 	bl	8005998 <iprintf>
	printf("--------------------------------------------------\n");
 800171a:	4809      	ldr	r0, [pc, #36]	; (8001740 <Task2+0x58>)
 800171c:	f004 f9a2 	bl	8005a64 <puts>
#if 0 // No comment
vTaskDelay (pdMS_TO_TICKS (1000));
printf("b"); fflush(stdout);	// 문자 'a' 출력
#endif // TODO #3

		task2timer++;
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <Task2+0x5c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <Task2+0x5c>)
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e7f9      	b.n	8001720 <Task2+0x38>
 800172c:	08008030 	.word	0x08008030
 8001730:	08008040 	.word	0x08008040
 8001734:	080080c4 	.word	0x080080c4
 8001738:	080080f8 	.word	0x080080f8
 800173c:	08008118 	.word	0x08008118
 8001740:	08008138 	.word	0x08008138
 8001744:	20000504 	.word	0x20000504

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001780 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800174c:	f7ff ff6a 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	; (8001788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	; (8001794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001776:	f004 fb03 	bl	8005d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fbc7 	bl	8000f0c <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800178c:	0800850c 	.word	0x0800850c
  ldr r2, =_sbss
 8001790:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001794:	200044b0 	.word	0x200044b0

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f92b 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	200f      	movs	r0, #15
 80017cc:	f000 f808 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fd96 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x54>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x58>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f943 	bl	8001a8a <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800181c:	f000 f90b 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_InitTick+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000000 	.word	0x20000000
 8001838:	20000008 	.word	0x20000008
 800183c:	20000004 	.word	0x20000004

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008
 8001864:	20000508 	.word	0x20000508

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000508 	.word	0x20000508

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a00:	f7ff ff8e 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff29 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff3e 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff8e 	bl	8001974 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5d 	bl	8001920 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff31 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffa2 	bl	80019dc <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff feda 	bl	8001868 <HAL_GetTick>
 8001ab4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d008      	beq.n	8001ad4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e052      	b.n	8001b7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0216 	bic.w	r2, r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001af2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d103      	bne.n	8001b04 <HAL_DMA_Abort+0x62>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0208 	bic.w	r2, r2, #8
 8001b12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b24:	e013      	b.n	8001b4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b26:	f7ff fe9f 	bl	8001868 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d90c      	bls.n	8001b4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2220      	movs	r2, #32
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e015      	b.n	8001b7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1e4      	bne.n	8001b26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b60:	223f      	movs	r2, #63	; 0x3f
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d004      	beq.n	8001ba0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e00c      	b.n	8001bba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2205      	movs	r2, #5
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e16b      	b.n	8001ebc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f040 815a 	bne.w	8001eb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d005      	beq.n	8001c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d130      	bne.n	8001c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d017      	beq.n	8001cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d123      	bne.n	8001d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	69b9      	ldr	r1, [r7, #24]
 8001d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80b4 	beq.w	8001eb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a5f      	ldr	r2, [pc, #380]	; (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	; (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d6a:	4a5b      	ldr	r2, [pc, #364]	; (8001ed8 <HAL_GPIO_Init+0x310>)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_GPIO_Init+0x314>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d02b      	beq.n	8001dee <HAL_GPIO_Init+0x226>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a51      	ldr	r2, [pc, #324]	; (8001ee0 <HAL_GPIO_Init+0x318>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d025      	beq.n	8001dea <HAL_GPIO_Init+0x222>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a50      	ldr	r2, [pc, #320]	; (8001ee4 <HAL_GPIO_Init+0x31c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01f      	beq.n	8001de6 <HAL_GPIO_Init+0x21e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4f      	ldr	r2, [pc, #316]	; (8001ee8 <HAL_GPIO_Init+0x320>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d019      	beq.n	8001de2 <HAL_GPIO_Init+0x21a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4e      	ldr	r2, [pc, #312]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d013      	beq.n	8001dde <HAL_GPIO_Init+0x216>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4d      	ldr	r2, [pc, #308]	; (8001ef0 <HAL_GPIO_Init+0x328>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00d      	beq.n	8001dda <HAL_GPIO_Init+0x212>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4c      	ldr	r2, [pc, #304]	; (8001ef4 <HAL_GPIO_Init+0x32c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <HAL_GPIO_Init+0x20e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4b      	ldr	r2, [pc, #300]	; (8001ef8 <HAL_GPIO_Init+0x330>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_GPIO_Init+0x20a>
 8001dce:	2307      	movs	r3, #7
 8001dd0:	e00e      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	e00c      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	e00a      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dda:	2305      	movs	r3, #5
 8001ddc:	e008      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001de2:	2303      	movs	r3, #3
 8001de4:	e004      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e002      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dee:	2300      	movs	r3, #0
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	f002 0203 	and.w	r2, r2, #3
 8001df6:	0092      	lsls	r2, r2, #2
 8001df8:	4093      	lsls	r3, r2
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e00:	4935      	ldr	r1, [pc, #212]	; (8001ed8 <HAL_GPIO_Init+0x310>)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e32:	4a32      	ldr	r2, [pc, #200]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e38:	4b30      	ldr	r3, [pc, #192]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e5c:	4a27      	ldr	r2, [pc, #156]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e86:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb0:	4a12      	ldr	r2, [pc, #72]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	2b0f      	cmp	r3, #15
 8001ec0:	f67f ae90 	bls.w	8001be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40013800 	.word	0x40013800
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40020400 	.word	0x40020400
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40020c00 	.word	0x40020c00
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40021400 	.word	0x40021400
 8001ef4:	40021800 	.word	0x40021800
 8001ef8:	40021c00 	.word	0x40021c00
 8001efc:	40013c00 	.word	0x40013c00

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f1c:	e003      	b.n	8001f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	619a      	str	r2, [r3, #24]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e267      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d075      	beq.n	800203e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f52:	4b88      	ldr	r3, [pc, #544]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d00c      	beq.n	8001f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f5e:	4b85      	ldr	r3, [pc, #532]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d112      	bne.n	8001f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f6a:	4b82      	ldr	r3, [pc, #520]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f76:	d10b      	bne.n	8001f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	4b7e      	ldr	r3, [pc, #504]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d05b      	beq.n	800203c <HAL_RCC_OscConfig+0x108>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d157      	bne.n	800203c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e242      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f98:	d106      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x74>
 8001f9a:	4b76      	ldr	r3, [pc, #472]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a75      	ldr	r2, [pc, #468]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e01d      	b.n	8001fe4 <HAL_RCC_OscConfig+0xb0>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x98>
 8001fb2:	4b70      	ldr	r3, [pc, #448]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a6f      	ldr	r2, [pc, #444]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	4b6d      	ldr	r3, [pc, #436]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a6c      	ldr	r2, [pc, #432]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCC_OscConfig+0xb0>
 8001fcc:	4b69      	ldr	r3, [pc, #420]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a68      	ldr	r2, [pc, #416]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	4b66      	ldr	r3, [pc, #408]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a65      	ldr	r2, [pc, #404]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8001fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d013      	beq.n	8002014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff fc3c 	bl	8001868 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff fc38 	bl	8001868 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e207      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	4b5b      	ldr	r3, [pc, #364]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0xc0>
 8002012:	e014      	b.n	800203e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff fc28 	bl	8001868 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800201c:	f7ff fc24 	bl	8001868 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	; 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e1f3      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202e:	4b51      	ldr	r3, [pc, #324]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0xe8>
 800203a:	e000      	b.n	800203e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d063      	beq.n	8002112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800204a:	4b4a      	ldr	r3, [pc, #296]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002056:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800205e:	2b08      	cmp	r3, #8
 8002060:	d11c      	bne.n	800209c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002062:	4b44      	ldr	r3, [pc, #272]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d116      	bne.n	800209c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	4b41      	ldr	r3, [pc, #260]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_RCC_OscConfig+0x152>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d001      	beq.n	8002086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e1c7      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002086:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4937      	ldr	r1, [pc, #220]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209a:	e03a      	b.n	8002112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d020      	beq.n	80020e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a4:	4b34      	ldr	r3, [pc, #208]	; (8002178 <HAL_RCC_OscConfig+0x244>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7ff fbdd 	bl	8001868 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b2:	f7ff fbd9 	bl	8001868 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1a8      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c4:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d0:	4b28      	ldr	r3, [pc, #160]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4925      	ldr	r1, [pc, #148]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]
 80020e4:	e015      	b.n	8002112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_RCC_OscConfig+0x244>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff fbbc 	bl	8001868 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f4:	f7ff fbb8 	bl	8001868 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e187      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d036      	beq.n	800218c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d016      	beq.n	8002154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_RCC_OscConfig+0x248>)
 8002128:	2201      	movs	r2, #1
 800212a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212c:	f7ff fb9c 	bl	8001868 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002134:	f7ff fb98 	bl	8001868 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e167      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_OscConfig+0x240>)
 8002148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x200>
 8002152:	e01b      	b.n	800218c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_RCC_OscConfig+0x248>)
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215a:	f7ff fb85 	bl	8001868 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002160:	e00e      	b.n	8002180 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002162:	f7ff fb81 	bl	8001868 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d907      	bls.n	8002180 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e150      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
 8002174:	40023800 	.word	0x40023800
 8002178:	42470000 	.word	0x42470000
 800217c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002180:	4b88      	ldr	r3, [pc, #544]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 8002182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1ea      	bne.n	8002162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 8097 	beq.w	80022c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219e:	4b81      	ldr	r3, [pc, #516]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10f      	bne.n	80021ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	4b7d      	ldr	r3, [pc, #500]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a7c      	ldr	r2, [pc, #496]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 80021b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b7a      	ldr	r3, [pc, #488]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c6:	2301      	movs	r3, #1
 80021c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ca:	4b77      	ldr	r3, [pc, #476]	; (80023a8 <HAL_RCC_OscConfig+0x474>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d118      	bne.n	8002208 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d6:	4b74      	ldr	r3, [pc, #464]	; (80023a8 <HAL_RCC_OscConfig+0x474>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a73      	ldr	r2, [pc, #460]	; (80023a8 <HAL_RCC_OscConfig+0x474>)
 80021dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e2:	f7ff fb41 	bl	8001868 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ea:	f7ff fb3d 	bl	8001868 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e10c      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <HAL_RCC_OscConfig+0x474>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x2ea>
 8002210:	4b64      	ldr	r3, [pc, #400]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	4a63      	ldr	r2, [pc, #396]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6713      	str	r3, [r2, #112]	; 0x70
 800221c:	e01c      	b.n	8002258 <HAL_RCC_OscConfig+0x324>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b05      	cmp	r3, #5
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0x30c>
 8002226:	4b5f      	ldr	r3, [pc, #380]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222a:	4a5e      	ldr	r2, [pc, #376]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	6713      	str	r3, [r2, #112]	; 0x70
 8002232:	4b5c      	ldr	r3, [pc, #368]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002236:	4a5b      	ldr	r2, [pc, #364]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6713      	str	r3, [r2, #112]	; 0x70
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0x324>
 8002240:	4b58      	ldr	r3, [pc, #352]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002244:	4a57      	ldr	r2, [pc, #348]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	6713      	str	r3, [r2, #112]	; 0x70
 800224c:	4b55      	ldr	r3, [pc, #340]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	4a54      	ldr	r2, [pc, #336]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 8002252:	f023 0304 	bic.w	r3, r3, #4
 8002256:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d015      	beq.n	800228c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002260:	f7ff fb02 	bl	8001868 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002266:	e00a      	b.n	800227e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7ff fafe 	bl	8001868 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	; 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e0cb      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227e:	4b49      	ldr	r3, [pc, #292]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0ee      	beq.n	8002268 <HAL_RCC_OscConfig+0x334>
 800228a:	e014      	b.n	80022b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7ff faec 	bl	8001868 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002292:	e00a      	b.n	80022aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002294:	f7ff fae8 	bl	8001868 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e0b5      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022aa:	4b3e      	ldr	r3, [pc, #248]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1ee      	bne.n	8002294 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d105      	bne.n	80022c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022bc:	4b39      	ldr	r3, [pc, #228]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	4a38      	ldr	r2, [pc, #224]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 80022c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80a1 	beq.w	8002414 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022d2:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d05c      	beq.n	8002398 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d141      	bne.n	800236a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e6:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_RCC_OscConfig+0x478>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7ff fabc 	bl	8001868 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f4:	f7ff fab8 	bl	8001868 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e087      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	019b      	lsls	r3, r3, #6
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	085b      	lsrs	r3, r3, #1
 800232a:	3b01      	subs	r3, #1
 800232c:	041b      	lsls	r3, r3, #16
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	061b      	lsls	r3, r3, #24
 8002336:	491b      	ldr	r1, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233c:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_RCC_OscConfig+0x478>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7ff fa91 	bl	8001868 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234a:	f7ff fa8d 	bl	8001868 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e05c      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x416>
 8002368:	e054      	b.n	8002414 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_RCC_OscConfig+0x478>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7ff fa7a 	bl	8001868 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002378:	f7ff fa76 	bl	8001868 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e045      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_RCC_OscConfig+0x470>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x444>
 8002396:	e03d      	b.n	8002414 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e038      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40007000 	.word	0x40007000
 80023ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_RCC_OscConfig+0x4ec>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d028      	beq.n	8002410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d121      	bne.n	8002410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d11a      	bne.n	8002410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023e0:	4013      	ands	r3, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d111      	bne.n	8002410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	085b      	lsrs	r3, r3, #1
 80023f8:	3b01      	subs	r3, #1
 80023fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d107      	bne.n	8002410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800

08002424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0cc      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b68      	ldr	r3, [pc, #416]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d90c      	bls.n	8002460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b65      	ldr	r3, [pc, #404]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b63      	ldr	r3, [pc, #396]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0b8      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002478:	4b59      	ldr	r3, [pc, #356]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a58      	ldr	r2, [pc, #352]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002490:	4b53      	ldr	r3, [pc, #332]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a52      	ldr	r2, [pc, #328]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800249a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800249c:	4b50      	ldr	r3, [pc, #320]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	494d      	ldr	r1, [pc, #308]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d044      	beq.n	8002544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d119      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e07f      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d003      	beq.n	80024e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e06f      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e067      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002502:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f023 0203 	bic.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4934      	ldr	r1, [pc, #208]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	4313      	orrs	r3, r2
 8002512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002514:	f7ff f9a8 	bl	8001868 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7ff f9a4 	bl	8001868 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e04f      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 020c 	and.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	d1eb      	bne.n	800251c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002544:	4b25      	ldr	r3, [pc, #148]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d20c      	bcs.n	800256c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b20      	ldr	r3, [pc, #128]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e032      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4916      	ldr	r1, [pc, #88]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	490e      	ldr	r1, [pc, #56]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025aa:	f000 f821 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 80025ae:	4602      	mov	r2, r0
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	490a      	ldr	r1, [pc, #40]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	5ccb      	ldrb	r3, [r1, r3]
 80025be:	fa22 f303 	lsr.w	r3, r2, r3
 80025c2:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff f908 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023c00 	.word	0x40023c00
 80025e0:	40023800 	.word	0x40023800
 80025e4:	08008174 	.word	0x08008174
 80025e8:	20000000 	.word	0x20000000
 80025ec:	20000004 	.word	0x20000004

080025f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f4:	b094      	sub	sp, #80	; 0x50
 80025f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	647b      	str	r3, [r7, #68]	; 0x44
 80025fc:	2300      	movs	r3, #0
 80025fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002600:	2300      	movs	r3, #0
 8002602:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002608:	4b79      	ldr	r3, [pc, #484]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b08      	cmp	r3, #8
 8002612:	d00d      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x40>
 8002614:	2b08      	cmp	r3, #8
 8002616:	f200 80e1 	bhi.w	80027dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x34>
 800261e:	2b04      	cmp	r3, #4
 8002620:	d003      	beq.n	800262a <HAL_RCC_GetSysClockFreq+0x3a>
 8002622:	e0db      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002624:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002626:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002628:	e0db      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800262a:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800262c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800262e:	e0d8      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002630:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002638:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800263a:	4b6d      	ldr	r3, [pc, #436]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d063      	beq.n	800270e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002646:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	099b      	lsrs	r3, r3, #6
 800264c:	2200      	movs	r2, #0
 800264e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002650:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002658:	633b      	str	r3, [r7, #48]	; 0x30
 800265a:	2300      	movs	r3, #0
 800265c:	637b      	str	r3, [r7, #52]	; 0x34
 800265e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002662:	4622      	mov	r2, r4
 8002664:	462b      	mov	r3, r5
 8002666:	f04f 0000 	mov.w	r0, #0
 800266a:	f04f 0100 	mov.w	r1, #0
 800266e:	0159      	lsls	r1, r3, #5
 8002670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002674:	0150      	lsls	r0, r2, #5
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4621      	mov	r1, r4
 800267c:	1a51      	subs	r1, r2, r1
 800267e:	6139      	str	r1, [r7, #16]
 8002680:	4629      	mov	r1, r5
 8002682:	eb63 0301 	sbc.w	r3, r3, r1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002694:	4659      	mov	r1, fp
 8002696:	018b      	lsls	r3, r1, #6
 8002698:	4651      	mov	r1, sl
 800269a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800269e:	4651      	mov	r1, sl
 80026a0:	018a      	lsls	r2, r1, #6
 80026a2:	4651      	mov	r1, sl
 80026a4:	ebb2 0801 	subs.w	r8, r2, r1
 80026a8:	4659      	mov	r1, fp
 80026aa:	eb63 0901 	sbc.w	r9, r3, r1
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026c2:	4690      	mov	r8, r2
 80026c4:	4699      	mov	r9, r3
 80026c6:	4623      	mov	r3, r4
 80026c8:	eb18 0303 	adds.w	r3, r8, r3
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	462b      	mov	r3, r5
 80026d0:	eb49 0303 	adc.w	r3, r9, r3
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026e2:	4629      	mov	r1, r5
 80026e4:	024b      	lsls	r3, r1, #9
 80026e6:	4621      	mov	r1, r4
 80026e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026ec:	4621      	mov	r1, r4
 80026ee:	024a      	lsls	r2, r1, #9
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f6:	2200      	movs	r2, #0
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002700:	f7fe fa52 	bl	8000ba8 <__aeabi_uldivmod>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4613      	mov	r3, r2
 800270a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800270c:	e058      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270e:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	2200      	movs	r2, #0
 8002716:	4618      	mov	r0, r3
 8002718:	4611      	mov	r1, r2
 800271a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	2300      	movs	r3, #0
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
 8002724:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002728:	4642      	mov	r2, r8
 800272a:	464b      	mov	r3, r9
 800272c:	f04f 0000 	mov.w	r0, #0
 8002730:	f04f 0100 	mov.w	r1, #0
 8002734:	0159      	lsls	r1, r3, #5
 8002736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800273a:	0150      	lsls	r0, r2, #5
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4641      	mov	r1, r8
 8002742:	ebb2 0a01 	subs.w	sl, r2, r1
 8002746:	4649      	mov	r1, r9
 8002748:	eb63 0b01 	sbc.w	fp, r3, r1
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002758:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800275c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002760:	ebb2 040a 	subs.w	r4, r2, sl
 8002764:	eb63 050b 	sbc.w	r5, r3, fp
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	00eb      	lsls	r3, r5, #3
 8002772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002776:	00e2      	lsls	r2, r4, #3
 8002778:	4614      	mov	r4, r2
 800277a:	461d      	mov	r5, r3
 800277c:	4643      	mov	r3, r8
 800277e:	18e3      	adds	r3, r4, r3
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	464b      	mov	r3, r9
 8002784:	eb45 0303 	adc.w	r3, r5, r3
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002796:	4629      	mov	r1, r5
 8002798:	028b      	lsls	r3, r1, #10
 800279a:	4621      	mov	r1, r4
 800279c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a0:	4621      	mov	r1, r4
 80027a2:	028a      	lsls	r2, r1, #10
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027aa:	2200      	movs	r2, #0
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	61fa      	str	r2, [r7, #28]
 80027b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027b4:	f7fe f9f8 	bl	8000ba8 <__aeabi_uldivmod>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4613      	mov	r3, r2
 80027be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	0c1b      	lsrs	r3, r3, #16
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	3301      	adds	r3, #1
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027da:	e002      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80027de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3750      	adds	r7, #80	; 0x50
 80027e8:	46bd      	mov	sp, r7
 80027ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	00f42400 	.word	0x00f42400
 80027f8:	007a1200 	.word	0x007a1200

080027fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_RCC_GetHCLKFreq+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000000 	.word	0x20000000

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002818:	f7ff fff0 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0a9b      	lsrs	r3, r3, #10
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	08008184 	.word	0x08008184

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002840:	f7ff ffdc 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	0b5b      	lsrs	r3, r3, #13
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	08008184 	.word	0x08008184

08002864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e042      	b.n	80028fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe fd6c 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2224      	movs	r2, #36	; 0x24
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fd69 	bl	8003380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b20      	cmp	r3, #32
 8002922:	d175      	bne.n	8002a10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_UART_Transmit+0x2c>
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e06e      	b.n	8002a12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2221      	movs	r2, #33	; 0x21
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002942:	f7fe ff91 	bl	8001868 <HAL_GetTick>
 8002946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	88fa      	ldrh	r2, [r7, #6]
 800294c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	88fa      	ldrh	r2, [r7, #6]
 8002952:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295c:	d108      	bne.n	8002970 <HAL_UART_Transmit+0x6c>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d104      	bne.n	8002970 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	e003      	b.n	8002978 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002974:	2300      	movs	r3, #0
 8002976:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002978:	e02e      	b.n	80029d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fb05 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e03a      	b.n	8002a12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10b      	bne.n	80029ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	3302      	adds	r3, #2
 80029b6:	61bb      	str	r3, [r7, #24]
 80029b8:	e007      	b.n	80029ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	3301      	adds	r3, #1
 80029c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1cb      	bne.n	800297a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2200      	movs	r2, #0
 80029ea:	2140      	movs	r1, #64	; 0x40
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fad1 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e006      	b.n	8002a12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e000      	b.n	8002a12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
  }
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b0ba      	sub	sp, #232	; 0xe8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10f      	bne.n	8002a82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_UART_IRQHandler+0x66>
 8002a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fbc2 	bl	8003204 <UART_Receive_IT>
      return;
 8002a80:	e25b      	b.n	8002f3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80de 	beq.w	8002c48 <HAL_UART_IRQHandler+0x22c>
 8002a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d106      	bne.n	8002aa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80d1 	beq.w	8002c48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_UART_IRQHandler+0xae>
 8002ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00b      	beq.n	8002aee <HAL_UART_IRQHandler+0xd2>
 8002ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f043 0202 	orr.w	r2, r3, #2
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_UART_IRQHandler+0xf6>
 8002afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f043 0204 	orr.w	r2, r3, #4
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d011      	beq.n	8002b42 <HAL_UART_IRQHandler+0x126>
 8002b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d105      	bne.n	8002b36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f043 0208 	orr.w	r2, r3, #8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 81f2 	beq.w	8002f30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_UART_IRQHandler+0x14e>
 8002b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5c:	f003 0320 	and.w	r3, r3, #32
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fb4d 	bl	8003204 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b74:	2b40      	cmp	r3, #64	; 0x40
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d103      	bne.n	8002b96 <HAL_UART_IRQHandler+0x17a>
 8002b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d04f      	beq.n	8002c36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa55 	bl	8003046 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba6:	2b40      	cmp	r3, #64	; 0x40
 8002ba8:	d141      	bne.n	8002c2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3314      	adds	r3, #20
 8002bb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bb8:	e853 3f00 	ldrex	r3, [r3]
 8002bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3314      	adds	r3, #20
 8002bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002be6:	e841 2300 	strex	r3, r2, [r1]
 8002bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1d9      	bne.n	8002baa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d013      	beq.n	8002c26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c02:	4a7e      	ldr	r2, [pc, #504]	; (8002dfc <HAL_UART_IRQHandler+0x3e0>)
 8002c04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe ffb9 	bl	8001b82 <HAL_DMA_Abort_IT>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d016      	beq.n	8002c44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c20:	4610      	mov	r0, r2
 8002c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c24:	e00e      	b.n	8002c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f99e 	bl	8002f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2c:	e00a      	b.n	8002c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f99a 	bl	8002f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	e006      	b.n	8002c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f996 	bl	8002f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002c42:	e175      	b.n	8002f30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c44:	bf00      	nop
    return;
 8002c46:	e173      	b.n	8002f30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	f040 814f 	bne.w	8002ef0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8148 	beq.w	8002ef0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8141 	beq.w	8002ef0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	f040 80b6 	bne.w	8002e00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8145 	beq.w	8002f34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	f080 813e 	bcs.w	8002f34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cca:	f000 8088 	beq.w	8002dde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	330c      	adds	r3, #12
 8002cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cdc:	e853 3f00 	ldrex	r3, [r3]
 8002ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d0a:	e841 2300 	strex	r3, r2, [r1]
 8002d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1d9      	bne.n	8002cce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3314      	adds	r3, #20
 8002d20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d24:	e853 3f00 	ldrex	r3, [r3]
 8002d28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3314      	adds	r3, #20
 8002d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e1      	bne.n	8002d1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3314      	adds	r3, #20
 8002d5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3314      	adds	r3, #20
 8002d76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e3      	bne.n	8002d56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	330c      	adds	r3, #12
 8002da2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dae:	f023 0310 	bic.w	r3, r3, #16
 8002db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002dc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dc8:	e841 2300 	strex	r3, r2, [r1]
 8002dcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e3      	bne.n	8002d9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fe62 	bl	8001aa2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8c1 	bl	8002f7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dfa:	e09b      	b.n	8002f34 <HAL_UART_IRQHandler+0x518>
 8002dfc:	0800310d 	.word	0x0800310d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 808e 	beq.w	8002f38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8089 	beq.w	8002f38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	330c      	adds	r3, #12
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	e853 3f00 	ldrex	r3, [r3]
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e4a:	647a      	str	r2, [r7, #68]	; 0x44
 8002e4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e3      	bne.n	8002e26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3314      	adds	r3, #20
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3314      	adds	r3, #20
 8002e7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e82:	633a      	str	r2, [r7, #48]	; 0x30
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e3      	bne.n	8002e5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0310 	bic.w	r3, r3, #16
 8002eba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ec8:	61fa      	str	r2, [r7, #28]
 8002eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ecc:	69b9      	ldr	r1, [r7, #24]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	e841 2300 	strex	r3, r2, [r1]
 8002ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e3      	bne.n	8002ea4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ee2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f847 	bl	8002f7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002eee:	e023      	b.n	8002f38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <HAL_UART_IRQHandler+0x4f4>
 8002efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f913 	bl	8003134 <UART_Transmit_IT>
    return;
 8002f0e:	e014      	b.n	8002f3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00e      	beq.n	8002f3a <HAL_UART_IRQHandler+0x51e>
 8002f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f953 	bl	80031d4 <UART_EndTransmit_IT>
    return;
 8002f2e:	e004      	b.n	8002f3a <HAL_UART_IRQHandler+0x51e>
    return;
 8002f30:	bf00      	nop
 8002f32:	e002      	b.n	8002f3a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f34:	bf00      	nop
 8002f36:	e000      	b.n	8002f3a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f38:	bf00      	nop
  }
}
 8002f3a:	37e8      	adds	r7, #232	; 0xe8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa4:	e03b      	b.n	800301e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fac:	d037      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7fe fc5b 	bl	8001868 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	6a3a      	ldr	r2, [r7, #32]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e03a      	b.n	800303e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d023      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b80      	cmp	r3, #128	; 0x80
 8002fda:	d020      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d01d      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d116      	bne.n	800301e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f81d 	bl	8003046 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2208      	movs	r2, #8
 8003010:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e00f      	b.n	800303e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4013      	ands	r3, r2
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	429a      	cmp	r2, r3
 800303a:	d0b4      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003046:	b480      	push	{r7}
 8003048:	b095      	sub	sp, #84	; 0x54
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	330c      	adds	r3, #12
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003064:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800306e:	643a      	str	r2, [r7, #64]	; 0x40
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003074:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e5      	bne.n	800304e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3314      	adds	r3, #20
 8003088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	e853 3f00 	ldrex	r3, [r3]
 8003090:	61fb      	str	r3, [r7, #28]
   return(result);
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	64bb      	str	r3, [r7, #72]	; 0x48
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3314      	adds	r3, #20
 80030a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e5      	bne.n	8003082 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d119      	bne.n	80030f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	330c      	adds	r3, #12
 80030c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	e853 3f00 	ldrex	r3, [r3]
 80030cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f023 0310 	bic.w	r3, r3, #16
 80030d4:	647b      	str	r3, [r7, #68]	; 0x44
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	330c      	adds	r3, #12
 80030dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030de:	61ba      	str	r2, [r7, #24]
 80030e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e2:	6979      	ldr	r1, [r7, #20]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	e841 2300 	strex	r3, r2, [r1]
 80030ea:	613b      	str	r3, [r7, #16]
   return(result);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e5      	bne.n	80030be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003100:	bf00      	nop
 8003102:	3754      	adds	r7, #84	; 0x54
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff ff1e 	bl	8002f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b21      	cmp	r3, #33	; 0x21
 8003146:	d13e      	bne.n	80031c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003150:	d114      	bne.n	800317c <UART_Transmit_IT+0x48>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d110      	bne.n	800317c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800316e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	1c9a      	adds	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	621a      	str	r2, [r3, #32]
 800317a:	e008      	b.n	800318e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	1c59      	adds	r1, r3, #1
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6211      	str	r1, [r2, #32]
 8003186:	781a      	ldrb	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29b      	uxth	r3, r3
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4619      	mov	r1, r3
 800319c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10f      	bne.n	80031c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e000      	b.n	80031c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
  }
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fea3 	bl	8002f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08c      	sub	sp, #48	; 0x30
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b22      	cmp	r3, #34	; 0x22
 8003216:	f040 80ae 	bne.w	8003376 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003222:	d117      	bne.n	8003254 <UART_Receive_IT+0x50>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d113      	bne.n	8003254 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800322c:	2300      	movs	r3, #0
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	b29b      	uxth	r3, r3
 800323e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003242:	b29a      	uxth	r2, r3
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	1c9a      	adds	r2, r3, #2
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	629a      	str	r2, [r3, #40]	; 0x28
 8003252:	e026      	b.n	80032a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003266:	d007      	beq.n	8003278 <UART_Receive_IT+0x74>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10a      	bne.n	8003286 <UART_Receive_IT+0x82>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d106      	bne.n	8003286 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e008      	b.n	8003298 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003292:	b2da      	uxtb	r2, r3
 8003294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003296:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4619      	mov	r1, r3
 80032b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d15d      	bne.n	8003372 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0220 	bic.w	r2, r2, #32
 80032c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d135      	bne.n	8003368 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	330c      	adds	r3, #12
 8003308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	613b      	str	r3, [r7, #16]
   return(result);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f023 0310 	bic.w	r3, r3, #16
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	330c      	adds	r3, #12
 8003320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003322:	623a      	str	r2, [r7, #32]
 8003324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	69f9      	ldr	r1, [r7, #28]
 8003328:	6a3a      	ldr	r2, [r7, #32]
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e5      	bne.n	8003302 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b10      	cmp	r3, #16
 8003342:	d10a      	bne.n	800335a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff fe0b 	bl	8002f7c <HAL_UARTEx_RxEventCallback>
 8003366:	e002      	b.n	800336e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff fdf3 	bl	8002f54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	e002      	b.n	8003378 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003376:	2302      	movs	r3, #2
  }
}
 8003378:	4618      	mov	r0, r3
 800337a:	3730      	adds	r7, #48	; 0x30
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003384:	b0c0      	sub	sp, #256	; 0x100
 8003386:	af00      	add	r7, sp, #0
 8003388:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	68d9      	ldr	r1, [r3, #12]
 800339e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	ea40 0301 	orr.w	r3, r0, r1
 80033a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	431a      	orrs	r2, r3
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033d8:	f021 010c 	bic.w	r1, r1, #12
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033e6:	430b      	orrs	r3, r1
 80033e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fa:	6999      	ldr	r1, [r3, #24]
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	ea40 0301 	orr.w	r3, r0, r1
 8003406:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4b8f      	ldr	r3, [pc, #572]	; (800364c <UART_SetConfig+0x2cc>)
 8003410:	429a      	cmp	r2, r3
 8003412:	d005      	beq.n	8003420 <UART_SetConfig+0xa0>
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b8d      	ldr	r3, [pc, #564]	; (8003650 <UART_SetConfig+0x2d0>)
 800341c:	429a      	cmp	r2, r3
 800341e:	d104      	bne.n	800342a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003420:	f7ff fa0c 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8003424:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003428:	e003      	b.n	8003432 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800342a:	f7ff f9f3 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 800342e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343c:	f040 810c 	bne.w	8003658 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003444:	2200      	movs	r2, #0
 8003446:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800344a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800344e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003452:	4622      	mov	r2, r4
 8003454:	462b      	mov	r3, r5
 8003456:	1891      	adds	r1, r2, r2
 8003458:	65b9      	str	r1, [r7, #88]	; 0x58
 800345a:	415b      	adcs	r3, r3
 800345c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800345e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003462:	4621      	mov	r1, r4
 8003464:	eb12 0801 	adds.w	r8, r2, r1
 8003468:	4629      	mov	r1, r5
 800346a:	eb43 0901 	adc.w	r9, r3, r1
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800347a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003482:	4690      	mov	r8, r2
 8003484:	4699      	mov	r9, r3
 8003486:	4623      	mov	r3, r4
 8003488:	eb18 0303 	adds.w	r3, r8, r3
 800348c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003490:	462b      	mov	r3, r5
 8003492:	eb49 0303 	adc.w	r3, r9, r3
 8003496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034ae:	460b      	mov	r3, r1
 80034b0:	18db      	adds	r3, r3, r3
 80034b2:	653b      	str	r3, [r7, #80]	; 0x50
 80034b4:	4613      	mov	r3, r2
 80034b6:	eb42 0303 	adc.w	r3, r2, r3
 80034ba:	657b      	str	r3, [r7, #84]	; 0x54
 80034bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034c4:	f7fd fb70 	bl	8000ba8 <__aeabi_uldivmod>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4b61      	ldr	r3, [pc, #388]	; (8003654 <UART_SetConfig+0x2d4>)
 80034ce:	fba3 2302 	umull	r2, r3, r3, r2
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	011c      	lsls	r4, r3, #4
 80034d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034e8:	4642      	mov	r2, r8
 80034ea:	464b      	mov	r3, r9
 80034ec:	1891      	adds	r1, r2, r2
 80034ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80034f0:	415b      	adcs	r3, r3
 80034f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034f8:	4641      	mov	r1, r8
 80034fa:	eb12 0a01 	adds.w	sl, r2, r1
 80034fe:	4649      	mov	r1, r9
 8003500:	eb43 0b01 	adc.w	fp, r3, r1
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003510:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003518:	4692      	mov	sl, r2
 800351a:	469b      	mov	fp, r3
 800351c:	4643      	mov	r3, r8
 800351e:	eb1a 0303 	adds.w	r3, sl, r3
 8003522:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003526:	464b      	mov	r3, r9
 8003528:	eb4b 0303 	adc.w	r3, fp, r3
 800352c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800353c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003540:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003544:	460b      	mov	r3, r1
 8003546:	18db      	adds	r3, r3, r3
 8003548:	643b      	str	r3, [r7, #64]	; 0x40
 800354a:	4613      	mov	r3, r2
 800354c:	eb42 0303 	adc.w	r3, r2, r3
 8003550:	647b      	str	r3, [r7, #68]	; 0x44
 8003552:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003556:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800355a:	f7fd fb25 	bl	8000ba8 <__aeabi_uldivmod>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4611      	mov	r1, r2
 8003564:	4b3b      	ldr	r3, [pc, #236]	; (8003654 <UART_SetConfig+0x2d4>)
 8003566:	fba3 2301 	umull	r2, r3, r3, r1
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2264      	movs	r2, #100	; 0x64
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	1acb      	subs	r3, r1, r3
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800357a:	4b36      	ldr	r3, [pc, #216]	; (8003654 <UART_SetConfig+0x2d4>)
 800357c:	fba3 2302 	umull	r2, r3, r3, r2
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003588:	441c      	add	r4, r3
 800358a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358e:	2200      	movs	r2, #0
 8003590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003594:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003598:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800359c:	4642      	mov	r2, r8
 800359e:	464b      	mov	r3, r9
 80035a0:	1891      	adds	r1, r2, r2
 80035a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80035a4:	415b      	adcs	r3, r3
 80035a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035ac:	4641      	mov	r1, r8
 80035ae:	1851      	adds	r1, r2, r1
 80035b0:	6339      	str	r1, [r7, #48]	; 0x30
 80035b2:	4649      	mov	r1, r9
 80035b4:	414b      	adcs	r3, r1
 80035b6:	637b      	str	r3, [r7, #52]	; 0x34
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035c4:	4659      	mov	r1, fp
 80035c6:	00cb      	lsls	r3, r1, #3
 80035c8:	4651      	mov	r1, sl
 80035ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ce:	4651      	mov	r1, sl
 80035d0:	00ca      	lsls	r2, r1, #3
 80035d2:	4610      	mov	r0, r2
 80035d4:	4619      	mov	r1, r3
 80035d6:	4603      	mov	r3, r0
 80035d8:	4642      	mov	r2, r8
 80035da:	189b      	adds	r3, r3, r2
 80035dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035e0:	464b      	mov	r3, r9
 80035e2:	460a      	mov	r2, r1
 80035e4:	eb42 0303 	adc.w	r3, r2, r3
 80035e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003600:	460b      	mov	r3, r1
 8003602:	18db      	adds	r3, r3, r3
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28
 8003606:	4613      	mov	r3, r2
 8003608:	eb42 0303 	adc.w	r3, r2, r3
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003612:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003616:	f7fd fac7 	bl	8000ba8 <__aeabi_uldivmod>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <UART_SetConfig+0x2d4>)
 8003620:	fba3 1302 	umull	r1, r3, r3, r2
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	2164      	movs	r1, #100	; 0x64
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	3332      	adds	r3, #50	; 0x32
 8003632:	4a08      	ldr	r2, [pc, #32]	; (8003654 <UART_SetConfig+0x2d4>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	f003 0207 	and.w	r2, r3, #7
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4422      	add	r2, r4
 8003646:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003648:	e106      	b.n	8003858 <UART_SetConfig+0x4d8>
 800364a:	bf00      	nop
 800364c:	40011000 	.word	0x40011000
 8003650:	40011400 	.word	0x40011400
 8003654:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800365c:	2200      	movs	r2, #0
 800365e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003662:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003666:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800366a:	4642      	mov	r2, r8
 800366c:	464b      	mov	r3, r9
 800366e:	1891      	adds	r1, r2, r2
 8003670:	6239      	str	r1, [r7, #32]
 8003672:	415b      	adcs	r3, r3
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800367a:	4641      	mov	r1, r8
 800367c:	1854      	adds	r4, r2, r1
 800367e:	4649      	mov	r1, r9
 8003680:	eb43 0501 	adc.w	r5, r3, r1
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	00eb      	lsls	r3, r5, #3
 800368e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003692:	00e2      	lsls	r2, r4, #3
 8003694:	4614      	mov	r4, r2
 8003696:	461d      	mov	r5, r3
 8003698:	4643      	mov	r3, r8
 800369a:	18e3      	adds	r3, r4, r3
 800369c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036a0:	464b      	mov	r3, r9
 80036a2:	eb45 0303 	adc.w	r3, r5, r3
 80036a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036c6:	4629      	mov	r1, r5
 80036c8:	008b      	lsls	r3, r1, #2
 80036ca:	4621      	mov	r1, r4
 80036cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036d0:	4621      	mov	r1, r4
 80036d2:	008a      	lsls	r2, r1, #2
 80036d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036d8:	f7fd fa66 	bl	8000ba8 <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4b60      	ldr	r3, [pc, #384]	; (8003864 <UART_SetConfig+0x4e4>)
 80036e2:	fba3 2302 	umull	r2, r3, r3, r2
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	011c      	lsls	r4, r3, #4
 80036ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036fc:	4642      	mov	r2, r8
 80036fe:	464b      	mov	r3, r9
 8003700:	1891      	adds	r1, r2, r2
 8003702:	61b9      	str	r1, [r7, #24]
 8003704:	415b      	adcs	r3, r3
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800370c:	4641      	mov	r1, r8
 800370e:	1851      	adds	r1, r2, r1
 8003710:	6139      	str	r1, [r7, #16]
 8003712:	4649      	mov	r1, r9
 8003714:	414b      	adcs	r3, r1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003724:	4659      	mov	r1, fp
 8003726:	00cb      	lsls	r3, r1, #3
 8003728:	4651      	mov	r1, sl
 800372a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800372e:	4651      	mov	r1, sl
 8003730:	00ca      	lsls	r2, r1, #3
 8003732:	4610      	mov	r0, r2
 8003734:	4619      	mov	r1, r3
 8003736:	4603      	mov	r3, r0
 8003738:	4642      	mov	r2, r8
 800373a:	189b      	adds	r3, r3, r2
 800373c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003740:	464b      	mov	r3, r9
 8003742:	460a      	mov	r2, r1
 8003744:	eb42 0303 	adc.w	r3, r2, r3
 8003748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	67bb      	str	r3, [r7, #120]	; 0x78
 8003756:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003764:	4649      	mov	r1, r9
 8003766:	008b      	lsls	r3, r1, #2
 8003768:	4641      	mov	r1, r8
 800376a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800376e:	4641      	mov	r1, r8
 8003770:	008a      	lsls	r2, r1, #2
 8003772:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003776:	f7fd fa17 	bl	8000ba8 <__aeabi_uldivmod>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4611      	mov	r1, r2
 8003780:	4b38      	ldr	r3, [pc, #224]	; (8003864 <UART_SetConfig+0x4e4>)
 8003782:	fba3 2301 	umull	r2, r3, r3, r1
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	2264      	movs	r2, #100	; 0x64
 800378a:	fb02 f303 	mul.w	r3, r2, r3
 800378e:	1acb      	subs	r3, r1, r3
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	3332      	adds	r3, #50	; 0x32
 8003794:	4a33      	ldr	r2, [pc, #204]	; (8003864 <UART_SetConfig+0x4e4>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a0:	441c      	add	r4, r3
 80037a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a6:	2200      	movs	r2, #0
 80037a8:	673b      	str	r3, [r7, #112]	; 0x70
 80037aa:	677a      	str	r2, [r7, #116]	; 0x74
 80037ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037b0:	4642      	mov	r2, r8
 80037b2:	464b      	mov	r3, r9
 80037b4:	1891      	adds	r1, r2, r2
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	415b      	adcs	r3, r3
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037c0:	4641      	mov	r1, r8
 80037c2:	1851      	adds	r1, r2, r1
 80037c4:	6039      	str	r1, [r7, #0]
 80037c6:	4649      	mov	r1, r9
 80037c8:	414b      	adcs	r3, r1
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037d8:	4659      	mov	r1, fp
 80037da:	00cb      	lsls	r3, r1, #3
 80037dc:	4651      	mov	r1, sl
 80037de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e2:	4651      	mov	r1, sl
 80037e4:	00ca      	lsls	r2, r1, #3
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	4642      	mov	r2, r8
 80037ee:	189b      	adds	r3, r3, r2
 80037f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80037f2:	464b      	mov	r3, r9
 80037f4:	460a      	mov	r2, r1
 80037f6:	eb42 0303 	adc.w	r3, r2, r3
 80037fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	663b      	str	r3, [r7, #96]	; 0x60
 8003806:	667a      	str	r2, [r7, #100]	; 0x64
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003814:	4649      	mov	r1, r9
 8003816:	008b      	lsls	r3, r1, #2
 8003818:	4641      	mov	r1, r8
 800381a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800381e:	4641      	mov	r1, r8
 8003820:	008a      	lsls	r2, r1, #2
 8003822:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003826:	f7fd f9bf 	bl	8000ba8 <__aeabi_uldivmod>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <UART_SetConfig+0x4e4>)
 8003830:	fba3 1302 	umull	r1, r3, r3, r2
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	2164      	movs	r1, #100	; 0x64
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	3332      	adds	r3, #50	; 0x32
 8003842:	4a08      	ldr	r2, [pc, #32]	; (8003864 <UART_SetConfig+0x4e4>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	f003 020f 	and.w	r2, r3, #15
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4422      	add	r2, r4
 8003856:	609a      	str	r2, [r3, #8]
}
 8003858:	bf00      	nop
 800385a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800385e:	46bd      	mov	sp, r7
 8003860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003864:	51eb851f 	.word	0x51eb851f

08003868 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800386c:	f000 fb3a 	bl	8003ee4 <vTaskStartScheduler>
  
  return osOK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	bd80      	pop	{r7, pc}

08003876 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <osDelay+0x16>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	e000      	b.n	800388e <osDelay+0x18>
 800388c:	2301      	movs	r3, #1
 800388e:	4618      	mov	r0, r3
 8003890:	f000 faf4 	bl	8003e7c <vTaskDelay>
  
  return osOK;
 8003894:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f103 0208 	add.w	r2, r3, #8
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f103 0208 	add.w	r2, r3, #8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f103 0208 	add.w	r2, r3, #8
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	601a      	str	r2, [r3, #0]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003956:	d103      	bne.n	8003960 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e00c      	b.n	800397a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3308      	adds	r3, #8
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	e002      	b.n	800396e <vListInsert+0x2e>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	429a      	cmp	r2, r3
 8003978:	d2f6      	bcs.n	8003968 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	601a      	str	r2, [r3, #0]
}
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039b2:	b480      	push	{r7}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6892      	ldr	r2, [r2, #8]
 80039c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6852      	ldr	r2, [r2, #4]
 80039d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d103      	bne.n	80039e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	1e5a      	subs	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b08e      	sub	sp, #56	; 0x38
 8003a0a:	af04      	add	r7, sp, #16
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10a      	bne.n	8003a30 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a2c:	bf00      	nop
 8003a2e:	e7fe      	b.n	8003a2e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10a      	bne.n	8003a4c <xTaskCreateStatic+0x46>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	61fb      	str	r3, [r7, #28]
}
 8003a48:	bf00      	nop
 8003a4a:	e7fe      	b.n	8003a4a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a4c:	23a0      	movs	r3, #160	; 0xa0
 8003a4e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2ba0      	cmp	r3, #160	; 0xa0
 8003a54:	d00a      	beq.n	8003a6c <xTaskCreateStatic+0x66>
	__asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	61bb      	str	r3, [r7, #24]
}
 8003a68:	bf00      	nop
 8003a6a:	e7fe      	b.n	8003a6a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01e      	beq.n	8003ab2 <xTaskCreateStatic+0xac>
 8003a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01b      	beq.n	8003ab2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9303      	str	r3, [sp, #12]
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	9302      	str	r3, [sp, #8]
 8003a94:	f107 0314 	add.w	r3, r7, #20
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f851 	bl	8003b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003aaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aac:	f000 f8ec 	bl	8003c88 <prvAddNewTaskToReadyList>
 8003ab0:	e001      	b.n	8003ab6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ab6:	697b      	ldr	r3, [r7, #20]
	}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3728      	adds	r7, #40	; 0x28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08c      	sub	sp, #48	; 0x30
 8003ac4:	af04      	add	r7, sp, #16
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 ff9f 	bl	8004a18 <pvPortMalloc>
 8003ada:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00e      	beq.n	8003b00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ae2:	20a0      	movs	r0, #160	; 0xa0
 8003ae4:	f000 ff98 	bl	8004a18 <pvPortMalloc>
 8003ae8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
 8003af6:	e005      	b.n	8003b04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003af8:	6978      	ldr	r0, [r7, #20]
 8003afa:	f001 f859 	bl	8004bb0 <vPortFree>
 8003afe:	e001      	b.n	8003b04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d017      	beq.n	8003b3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b12:	88fa      	ldrh	r2, [r7, #6]
 8003b14:	2300      	movs	r3, #0
 8003b16:	9303      	str	r3, [sp, #12]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	9302      	str	r3, [sp, #8]
 8003b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f80f 	bl	8003b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b2e:	69f8      	ldr	r0, [r7, #28]
 8003b30:	f000 f8aa 	bl	8003c88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b34:	2301      	movs	r3, #1
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	e002      	b.n	8003b40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b40:	69bb      	ldr	r3, [r7, #24]
	}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3720      	adds	r7, #32
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b64:	3b01      	subs	r3, #1
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f023 0307 	bic.w	r3, r3, #7
 8003b72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	617b      	str	r3, [r7, #20]
}
 8003b90:	bf00      	nop
 8003b92:	e7fe      	b.n	8003b92 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01f      	beq.n	8003bda <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	e012      	b.n	8003bc6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	7819      	ldrb	r1, [r3, #0]
 8003ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	3334      	adds	r3, #52	; 0x34
 8003bb0:	460a      	mov	r2, r1
 8003bb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d006      	beq.n	8003bce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	2b0f      	cmp	r3, #15
 8003bca:	d9e9      	bls.n	8003ba0 <prvInitialiseNewTask+0x54>
 8003bcc:	e000      	b.n	8003bd0 <prvInitialiseNewTask+0x84>
			{
				break;
 8003bce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bd8:	e003      	b.n	8003be2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	2b13      	cmp	r3, #19
 8003be6:	d901      	bls.n	8003bec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003be8:	2313      	movs	r3, #19
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	3304      	adds	r3, #4
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fe6b 	bl	80038de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	3318      	adds	r3, #24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fe66 	bl	80038de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	f1c3 0214 	rsb	r2, r3, #20
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	334c      	adds	r3, #76	; 0x4c
 8003c3c:	224c      	movs	r2, #76	; 0x4c
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 ffef 	bl	8005c24 <memset>
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <prvInitialiseNewTask+0x130>)
 8003c4a:	651a      	str	r2, [r3, #80]	; 0x50
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	4a0c      	ldr	r2, [pc, #48]	; (8003c80 <prvInitialiseNewTask+0x134>)
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	4a0b      	ldr	r2, [pc, #44]	; (8003c84 <prvInitialiseNewTask+0x138>)
 8003c56:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	68f9      	ldr	r1, [r7, #12]
 8003c5c:	69b8      	ldr	r0, [r7, #24]
 8003c5e:	f000 fccd 	bl	80045fc <pxPortInitialiseStack>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c74:	bf00      	nop
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20004364 	.word	0x20004364
 8003c80:	200043cc 	.word	0x200043cc
 8003c84:	20004434 	.word	0x20004434

08003c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c90:	f000 fde0 	bl	8004854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c94:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <prvAddNewTaskToReadyList+0xb8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	4a29      	ldr	r2, [pc, #164]	; (8003d40 <prvAddNewTaskToReadyList+0xb8>)
 8003c9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c9e:	4b29      	ldr	r3, [pc, #164]	; (8003d44 <prvAddNewTaskToReadyList+0xbc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ca6:	4a27      	ldr	r2, [pc, #156]	; (8003d44 <prvAddNewTaskToReadyList+0xbc>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cac:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <prvAddNewTaskToReadyList+0xb8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d110      	bne.n	8003cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cb4:	f000 fb5c 	bl	8004370 <prvInitialiseTaskLists>
 8003cb8:	e00d      	b.n	8003cd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cba:	4b23      	ldr	r3, [pc, #140]	; (8003d48 <prvAddNewTaskToReadyList+0xc0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <prvAddNewTaskToReadyList+0xbc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d802      	bhi.n	8003cd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <prvAddNewTaskToReadyList+0xbc>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <prvAddNewTaskToReadyList+0xc4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <prvAddNewTaskToReadyList+0xc4>)
 8003cde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <prvAddNewTaskToReadyList+0xc8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <prvAddNewTaskToReadyList+0xc8>)
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <prvAddNewTaskToReadyList+0xcc>)
 8003d00:	441a      	add	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f7ff fdf5 	bl	80038f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d0e:	f000 fdd1 	bl	80048b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d12:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <prvAddNewTaskToReadyList+0xc0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00e      	beq.n	8003d38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <prvAddNewTaskToReadyList+0xbc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d207      	bcs.n	8003d38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <prvAddNewTaskToReadyList+0xd0>)
 8003d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20000710 	.word	0x20000710
 8003d44:	2000050c 	.word	0x2000050c
 8003d48:	2000071c 	.word	0x2000071c
 8003d4c:	2000072c 	.word	0x2000072c
 8003d50:	20000718 	.word	0x20000718
 8003d54:	20000510 	.word	0x20000510
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003d64:	f000 fd76 	bl	8004854 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <vTaskDelete+0x18>
 8003d6e:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <vTaskDelete+0xf8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	e000      	b.n	8003d76 <vTaskDelete+0x1a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff fe18 	bl	80039b2 <uxListRemove>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d115      	bne.n	8003db4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	4932      	ldr	r1, [pc, #200]	; (8003e58 <vTaskDelete+0xfc>)
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <vTaskDelete+0x58>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	2201      	movs	r2, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43da      	mvns	r2, r3
 8003daa:	4b2c      	ldr	r3, [pc, #176]	; (8003e5c <vTaskDelete+0x100>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4013      	ands	r3, r2
 8003db0:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <vTaskDelete+0x100>)
 8003db2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3318      	adds	r3, #24
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fdf6 	bl	80039b2 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003dc6:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <vTaskDelete+0x104>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	4a24      	ldr	r2, [pc, #144]	; (8003e60 <vTaskDelete+0x104>)
 8003dce:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003dd0:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <vTaskDelete+0xf8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d10b      	bne.n	8003df2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4619      	mov	r1, r3
 8003de0:	4820      	ldr	r0, [pc, #128]	; (8003e64 <vTaskDelete+0x108>)
 8003de2:	f7ff fd89 	bl	80038f8 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <vTaskDelete+0x10c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3301      	adds	r3, #1
 8003dec:	4a1e      	ldr	r2, [pc, #120]	; (8003e68 <vTaskDelete+0x10c>)
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	e009      	b.n	8003e06 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003df2:	4b1e      	ldr	r3, [pc, #120]	; (8003e6c <vTaskDelete+0x110>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	4a1c      	ldr	r2, [pc, #112]	; (8003e6c <vTaskDelete+0x110>)
 8003dfa:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fb25 	bl	800444c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003e02:	f000 fb57 	bl	80044b4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003e06:	f000 fd55 	bl	80048b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003e0a:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <vTaskDelete+0x114>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01b      	beq.n	8003e4a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <vTaskDelete+0xf8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d116      	bne.n	8003e4a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003e1c:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <vTaskDelete+0x118>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <vTaskDelete+0xde>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	60bb      	str	r3, [r7, #8]
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <vTaskDelete+0x11c>)
 8003e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	2000050c 	.word	0x2000050c
 8003e58:	20000510 	.word	0x20000510
 8003e5c:	20000718 	.word	0x20000718
 8003e60:	2000072c 	.word	0x2000072c
 8003e64:	200006e4 	.word	0x200006e4
 8003e68:	200006f8 	.word	0x200006f8
 8003e6c:	20000710 	.word	0x20000710
 8003e70:	2000071c 	.word	0x2000071c
 8003e74:	20000738 	.word	0x20000738
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d017      	beq.n	8003ebe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <vTaskDelay+0x60>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <vTaskDelay+0x30>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	60bb      	str	r3, [r7, #8]
}
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003eac:	f000 f884 	bl	8003fb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fb3c 	bl	8004530 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003eb8:	f000 f88c 	bl	8003fd4 <xTaskResumeAll>
 8003ebc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d107      	bne.n	8003ed4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ec4:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <vTaskDelay+0x64>)
 8003ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000738 	.word	0x20000738
 8003ee0:	e000ed04 	.word	0xe000ed04

08003ee4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ef2:	463a      	mov	r2, r7
 8003ef4:	1d39      	adds	r1, r7, #4
 8003ef6:	f107 0308 	add.w	r3, r7, #8
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc ffec 	bl	8000ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	9202      	str	r2, [sp, #8]
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	460a      	mov	r2, r1
 8003f12:	4921      	ldr	r1, [pc, #132]	; (8003f98 <vTaskStartScheduler+0xb4>)
 8003f14:	4821      	ldr	r0, [pc, #132]	; (8003f9c <vTaskStartScheduler+0xb8>)
 8003f16:	f7ff fd76 	bl	8003a06 <xTaskCreateStatic>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4a20      	ldr	r2, [pc, #128]	; (8003fa0 <vTaskStartScheduler+0xbc>)
 8003f1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f20:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <vTaskStartScheduler+0xbc>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e001      	b.n	8003f32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d11b      	bne.n	8003f70 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	613b      	str	r3, [r7, #16]
}
 8003f4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f4c:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <vTaskStartScheduler+0xc0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	334c      	adds	r3, #76	; 0x4c
 8003f52:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <vTaskStartScheduler+0xc4>)
 8003f54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <vTaskStartScheduler+0xc8>)
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <vTaskStartScheduler+0xcc>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f64:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <vTaskStartScheduler+0xd0>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f6a:	f000 fbd1 	bl	8004710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f6e:	e00e      	b.n	8003f8e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f76:	d10a      	bne.n	8003f8e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	60fb      	str	r3, [r7, #12]
}
 8003f8a:	bf00      	nop
 8003f8c:	e7fe      	b.n	8003f8c <vTaskStartScheduler+0xa8>
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	0800816c 	.word	0x0800816c
 8003f9c:	08004341 	.word	0x08004341
 8003fa0:	20000734 	.word	0x20000734
 8003fa4:	2000050c 	.word	0x2000050c
 8003fa8:	20000068 	.word	0x20000068
 8003fac:	20000730 	.word	0x20000730
 8003fb0:	2000071c 	.word	0x2000071c
 8003fb4:	20000714 	.word	0x20000714

08003fb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fbc:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <vTaskSuspendAll+0x18>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	4a03      	ldr	r2, [pc, #12]	; (8003fd0 <vTaskSuspendAll+0x18>)
 8003fc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fc6:	bf00      	nop
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	20000738 	.word	0x20000738

08003fd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fe2:	4b41      	ldr	r3, [pc, #260]	; (80040e8 <xTaskResumeAll+0x114>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10a      	bne.n	8004000 <xTaskResumeAll+0x2c>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	603b      	str	r3, [r7, #0]
}
 8003ffc:	bf00      	nop
 8003ffe:	e7fe      	b.n	8003ffe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004000:	f000 fc28 	bl	8004854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004004:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <xTaskResumeAll+0x114>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3b01      	subs	r3, #1
 800400a:	4a37      	ldr	r2, [pc, #220]	; (80040e8 <xTaskResumeAll+0x114>)
 800400c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800400e:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <xTaskResumeAll+0x114>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d161      	bne.n	80040da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004016:	4b35      	ldr	r3, [pc, #212]	; (80040ec <xTaskResumeAll+0x118>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d05d      	beq.n	80040da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800401e:	e02e      	b.n	800407e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004020:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <xTaskResumeAll+0x11c>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3318      	adds	r3, #24
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fcc0 	bl	80039b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3304      	adds	r3, #4
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fcbb 	bl	80039b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	2201      	movs	r2, #1
 8004042:	409a      	lsls	r2, r3
 8004044:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <xTaskResumeAll+0x120>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4313      	orrs	r3, r2
 800404a:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <xTaskResumeAll+0x120>)
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <xTaskResumeAll+0x124>)
 800405c:	441a      	add	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3304      	adds	r3, #4
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f7ff fc47 	bl	80038f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406e:	4b23      	ldr	r3, [pc, #140]	; (80040fc <xTaskResumeAll+0x128>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	429a      	cmp	r2, r3
 8004076:	d302      	bcc.n	800407e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004078:	4b21      	ldr	r3, [pc, #132]	; (8004100 <xTaskResumeAll+0x12c>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800407e:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <xTaskResumeAll+0x11c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1cc      	bne.n	8004020 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800408c:	f000 fa12 	bl	80044b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004090:	4b1c      	ldr	r3, [pc, #112]	; (8004104 <xTaskResumeAll+0x130>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d010      	beq.n	80040be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800409c:	f000 f836 	bl	800410c <xTaskIncrementTick>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <xTaskResumeAll+0x12c>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f1      	bne.n	800409c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80040b8:	4b12      	ldr	r3, [pc, #72]	; (8004104 <xTaskResumeAll+0x130>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <xTaskResumeAll+0x12c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040c6:	2301      	movs	r3, #1
 80040c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <xTaskResumeAll+0x134>)
 80040cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040da:	f000 fbeb 	bl	80048b4 <vPortExitCritical>

	return xAlreadyYielded;
 80040de:	68bb      	ldr	r3, [r7, #8]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000738 	.word	0x20000738
 80040ec:	20000710 	.word	0x20000710
 80040f0:	200006d0 	.word	0x200006d0
 80040f4:	20000718 	.word	0x20000718
 80040f8:	20000510 	.word	0x20000510
 80040fc:	2000050c 	.word	0x2000050c
 8004100:	20000724 	.word	0x20000724
 8004104:	20000720 	.word	0x20000720
 8004108:	e000ed04 	.word	0xe000ed04

0800410c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004116:	4b4e      	ldr	r3, [pc, #312]	; (8004250 <xTaskIncrementTick+0x144>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f040 808e 	bne.w	800423c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004120:	4b4c      	ldr	r3, [pc, #304]	; (8004254 <xTaskIncrementTick+0x148>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3301      	adds	r3, #1
 8004126:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004128:	4a4a      	ldr	r2, [pc, #296]	; (8004254 <xTaskIncrementTick+0x148>)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d120      	bne.n	8004176 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004134:	4b48      	ldr	r3, [pc, #288]	; (8004258 <xTaskIncrementTick+0x14c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <xTaskIncrementTick+0x48>
	__asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	603b      	str	r3, [r7, #0]
}
 8004150:	bf00      	nop
 8004152:	e7fe      	b.n	8004152 <xTaskIncrementTick+0x46>
 8004154:	4b40      	ldr	r3, [pc, #256]	; (8004258 <xTaskIncrementTick+0x14c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	4b40      	ldr	r3, [pc, #256]	; (800425c <xTaskIncrementTick+0x150>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a3e      	ldr	r2, [pc, #248]	; (8004258 <xTaskIncrementTick+0x14c>)
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4a3e      	ldr	r2, [pc, #248]	; (800425c <xTaskIncrementTick+0x150>)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	4b3d      	ldr	r3, [pc, #244]	; (8004260 <xTaskIncrementTick+0x154>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	4a3c      	ldr	r2, [pc, #240]	; (8004260 <xTaskIncrementTick+0x154>)
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	f000 f99f 	bl	80044b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004176:	4b3b      	ldr	r3, [pc, #236]	; (8004264 <xTaskIncrementTick+0x158>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	429a      	cmp	r2, r3
 800417e:	d348      	bcc.n	8004212 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004180:	4b35      	ldr	r3, [pc, #212]	; (8004258 <xTaskIncrementTick+0x14c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d104      	bne.n	8004194 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800418a:	4b36      	ldr	r3, [pc, #216]	; (8004264 <xTaskIncrementTick+0x158>)
 800418c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004190:	601a      	str	r2, [r3, #0]
					break;
 8004192:	e03e      	b.n	8004212 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004194:	4b30      	ldr	r3, [pc, #192]	; (8004258 <xTaskIncrementTick+0x14c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d203      	bcs.n	80041b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041ac:	4a2d      	ldr	r2, [pc, #180]	; (8004264 <xTaskIncrementTick+0x158>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041b2:	e02e      	b.n	8004212 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fbfa 	bl	80039b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d004      	beq.n	80041d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	3318      	adds	r3, #24
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fbf1 	bl	80039b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	2201      	movs	r2, #1
 80041d6:	409a      	lsls	r2, r3
 80041d8:	4b23      	ldr	r3, [pc, #140]	; (8004268 <xTaskIncrementTick+0x15c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4313      	orrs	r3, r2
 80041de:	4a22      	ldr	r2, [pc, #136]	; (8004268 <xTaskIncrementTick+0x15c>)
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4a1f      	ldr	r2, [pc, #124]	; (800426c <xTaskIncrementTick+0x160>)
 80041f0:	441a      	add	r2, r3
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4619      	mov	r1, r3
 80041f8:	4610      	mov	r0, r2
 80041fa:	f7ff fb7d 	bl	80038f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004202:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <xTaskIncrementTick+0x164>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	429a      	cmp	r2, r3
 800420a:	d3b9      	bcc.n	8004180 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800420c:	2301      	movs	r3, #1
 800420e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004210:	e7b6      	b.n	8004180 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004212:	4b17      	ldr	r3, [pc, #92]	; (8004270 <xTaskIncrementTick+0x164>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004218:	4914      	ldr	r1, [pc, #80]	; (800426c <xTaskIncrementTick+0x160>)
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d901      	bls.n	800422e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800422a:	2301      	movs	r3, #1
 800422c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800422e:	4b11      	ldr	r3, [pc, #68]	; (8004274 <xTaskIncrementTick+0x168>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004236:	2301      	movs	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e004      	b.n	8004246 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800423c:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <xTaskIncrementTick+0x16c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <xTaskIncrementTick+0x16c>)
 8004244:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004246:	697b      	ldr	r3, [r7, #20]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000738 	.word	0x20000738
 8004254:	20000714 	.word	0x20000714
 8004258:	200006c8 	.word	0x200006c8
 800425c:	200006cc 	.word	0x200006cc
 8004260:	20000728 	.word	0x20000728
 8004264:	20000730 	.word	0x20000730
 8004268:	20000718 	.word	0x20000718
 800426c:	20000510 	.word	0x20000510
 8004270:	2000050c 	.word	0x2000050c
 8004274:	20000724 	.word	0x20000724
 8004278:	20000720 	.word	0x20000720

0800427c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004282:	4b29      	ldr	r3, [pc, #164]	; (8004328 <vTaskSwitchContext+0xac>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800428a:	4b28      	ldr	r3, [pc, #160]	; (800432c <vTaskSwitchContext+0xb0>)
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004290:	e044      	b.n	800431c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004292:	4b26      	ldr	r3, [pc, #152]	; (800432c <vTaskSwitchContext+0xb0>)
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004298:	4b25      	ldr	r3, [pc, #148]	; (8004330 <vTaskSwitchContext+0xb4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	fab3 f383 	clz	r3, r3
 80042a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80042a6:	7afb      	ldrb	r3, [r7, #11]
 80042a8:	f1c3 031f 	rsb	r3, r3, #31
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	4921      	ldr	r1, [pc, #132]	; (8004334 <vTaskSwitchContext+0xb8>)
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	607b      	str	r3, [r7, #4]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <vTaskSwitchContext+0x5a>
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4a14      	ldr	r2, [pc, #80]	; (8004334 <vTaskSwitchContext+0xb8>)
 80042e4:	4413      	add	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	3308      	adds	r3, #8
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d104      	bne.n	8004308 <vTaskSwitchContext+0x8c>
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	605a      	str	r2, [r3, #4]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <vTaskSwitchContext+0xbc>)
 8004310:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004312:	4b09      	ldr	r3, [pc, #36]	; (8004338 <vTaskSwitchContext+0xbc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	334c      	adds	r3, #76	; 0x4c
 8004318:	4a08      	ldr	r2, [pc, #32]	; (800433c <vTaskSwitchContext+0xc0>)
 800431a:	6013      	str	r3, [r2, #0]
}
 800431c:	bf00      	nop
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	20000738 	.word	0x20000738
 800432c:	20000724 	.word	0x20000724
 8004330:	20000718 	.word	0x20000718
 8004334:	20000510 	.word	0x20000510
 8004338:	2000050c 	.word	0x2000050c
 800433c:	20000068 	.word	0x20000068

08004340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004348:	f000 f852 	bl	80043f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <prvIdleTask+0x28>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d9f9      	bls.n	8004348 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <prvIdleTask+0x2c>)
 8004356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004364:	e7f0      	b.n	8004348 <prvIdleTask+0x8>
 8004366:	bf00      	nop
 8004368:	20000510 	.word	0x20000510
 800436c:	e000ed04 	.word	0xe000ed04

08004370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	e00c      	b.n	8004396 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <prvInitialiseTaskLists+0x60>)
 8004388:	4413      	add	r3, r2
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fa87 	bl	800389e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3301      	adds	r3, #1
 8004394:	607b      	str	r3, [r7, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b13      	cmp	r3, #19
 800439a:	d9ef      	bls.n	800437c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800439c:	480d      	ldr	r0, [pc, #52]	; (80043d4 <prvInitialiseTaskLists+0x64>)
 800439e:	f7ff fa7e 	bl	800389e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043a2:	480d      	ldr	r0, [pc, #52]	; (80043d8 <prvInitialiseTaskLists+0x68>)
 80043a4:	f7ff fa7b 	bl	800389e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043a8:	480c      	ldr	r0, [pc, #48]	; (80043dc <prvInitialiseTaskLists+0x6c>)
 80043aa:	f7ff fa78 	bl	800389e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043ae:	480c      	ldr	r0, [pc, #48]	; (80043e0 <prvInitialiseTaskLists+0x70>)
 80043b0:	f7ff fa75 	bl	800389e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043b4:	480b      	ldr	r0, [pc, #44]	; (80043e4 <prvInitialiseTaskLists+0x74>)
 80043b6:	f7ff fa72 	bl	800389e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <prvInitialiseTaskLists+0x78>)
 80043bc:	4a05      	ldr	r2, [pc, #20]	; (80043d4 <prvInitialiseTaskLists+0x64>)
 80043be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <prvInitialiseTaskLists+0x7c>)
 80043c2:	4a05      	ldr	r2, [pc, #20]	; (80043d8 <prvInitialiseTaskLists+0x68>)
 80043c4:	601a      	str	r2, [r3, #0]
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000510 	.word	0x20000510
 80043d4:	200006a0 	.word	0x200006a0
 80043d8:	200006b4 	.word	0x200006b4
 80043dc:	200006d0 	.word	0x200006d0
 80043e0:	200006e4 	.word	0x200006e4
 80043e4:	200006fc 	.word	0x200006fc
 80043e8:	200006c8 	.word	0x200006c8
 80043ec:	200006cc 	.word	0x200006cc

080043f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043f6:	e019      	b.n	800442c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043f8:	f000 fa2c 	bl	8004854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043fc:	4b10      	ldr	r3, [pc, #64]	; (8004440 <prvCheckTasksWaitingTermination+0x50>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fad2 	bl	80039b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800440e:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <prvCheckTasksWaitingTermination+0x54>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3b01      	subs	r3, #1
 8004414:	4a0b      	ldr	r2, [pc, #44]	; (8004444 <prvCheckTasksWaitingTermination+0x54>)
 8004416:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <prvCheckTasksWaitingTermination+0x58>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3b01      	subs	r3, #1
 800441e:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <prvCheckTasksWaitingTermination+0x58>)
 8004420:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004422:	f000 fa47 	bl	80048b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f810 	bl	800444c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <prvCheckTasksWaitingTermination+0x58>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e1      	bne.n	80043f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	200006e4 	.word	0x200006e4
 8004444:	20000710 	.word	0x20000710
 8004448:	200006f8 	.word	0x200006f8

0800444c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	334c      	adds	r3, #76	; 0x4c
 8004458:	4618      	mov	r0, r3
 800445a:	f001 fbff 	bl	8005c5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004464:	2b00      	cmp	r3, #0
 8004466:	d108      	bne.n	800447a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fb9f 	bl	8004bb0 <vPortFree>
				vPortFree( pxTCB );
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fb9c 	bl	8004bb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004478:	e018      	b.n	80044ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004480:	2b01      	cmp	r3, #1
 8004482:	d103      	bne.n	800448c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fb93 	bl	8004bb0 <vPortFree>
	}
 800448a:	e00f      	b.n	80044ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004492:	2b02      	cmp	r3, #2
 8004494:	d00a      	beq.n	80044ac <prvDeleteTCB+0x60>
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	60fb      	str	r3, [r7, #12]
}
 80044a8:	bf00      	nop
 80044aa:	e7fe      	b.n	80044aa <prvDeleteTCB+0x5e>
	}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <prvResetNextTaskUnblockTime+0x38>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <prvResetNextTaskUnblockTime+0x3c>)
 80044c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044cc:	e008      	b.n	80044e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <prvResetNextTaskUnblockTime+0x38>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <prvResetNextTaskUnblockTime+0x3c>)
 80044de:	6013      	str	r3, [r2, #0]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	200006c8 	.word	0x200006c8
 80044f0:	20000730 	.word	0x20000730

080044f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044fa:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <xTaskGetSchedulerState+0x34>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d102      	bne.n	8004508 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004502:	2301      	movs	r3, #1
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	e008      	b.n	800451a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004508:	4b08      	ldr	r3, [pc, #32]	; (800452c <xTaskGetSchedulerState+0x38>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d102      	bne.n	8004516 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004510:	2302      	movs	r3, #2
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	e001      	b.n	800451a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004516:	2300      	movs	r3, #0
 8004518:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800451a:	687b      	ldr	r3, [r7, #4]
	}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	2000071c 	.word	0x2000071c
 800452c:	20000738 	.word	0x20000738

08004530 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800453a:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004540:	4b28      	ldr	r3, [pc, #160]	; (80045e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3304      	adds	r3, #4
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fa33 	bl	80039b2 <uxListRemove>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004552:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	2201      	movs	r2, #1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43da      	mvns	r2, r3
 8004560:	4b21      	ldr	r3, [pc, #132]	; (80045e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4013      	ands	r3, r2
 8004566:	4a20      	ldr	r2, [pc, #128]	; (80045e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004568:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004570:	d10a      	bne.n	8004588 <prvAddCurrentTaskToDelayedList+0x58>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004578:	4b1a      	ldr	r3, [pc, #104]	; (80045e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3304      	adds	r3, #4
 800457e:	4619      	mov	r1, r3
 8004580:	481a      	ldr	r0, [pc, #104]	; (80045ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8004582:	f7ff f9b9 	bl	80038f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004586:	e026      	b.n	80045d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004590:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	429a      	cmp	r2, r3
 800459e:	d209      	bcs.n	80045b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045a0:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f7ff f9c7 	bl	8003940 <vListInsert>
}
 80045b2:	e010      	b.n	80045d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b4:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3304      	adds	r3, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	4610      	mov	r0, r2
 80045c2:	f7ff f9bd 	bl	8003940 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045c6:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d202      	bcs.n	80045d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80045d0:	4a09      	ldr	r2, [pc, #36]	; (80045f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	6013      	str	r3, [r2, #0]
}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000714 	.word	0x20000714
 80045e4:	2000050c 	.word	0x2000050c
 80045e8:	20000718 	.word	0x20000718
 80045ec:	200006fc 	.word	0x200006fc
 80045f0:	200006cc 	.word	0x200006cc
 80045f4:	200006c8 	.word	0x200006c8
 80045f8:	20000730 	.word	0x20000730

080045fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3b04      	subs	r3, #4
 800460c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3b04      	subs	r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f023 0201 	bic.w	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3b04      	subs	r3, #4
 800462a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800462c:	4a0c      	ldr	r2, [pc, #48]	; (8004660 <pxPortInitialiseStack+0x64>)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3b14      	subs	r3, #20
 8004636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3b04      	subs	r3, #4
 8004642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f06f 0202 	mvn.w	r2, #2
 800464a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3b20      	subs	r3, #32
 8004650:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004652:	68fb      	ldr	r3, [r7, #12]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	08004665 	.word	0x08004665

08004664 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <prvTaskExitError+0x54>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004676:	d00a      	beq.n	800468e <prvTaskExitError+0x2a>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	60fb      	str	r3, [r7, #12]
}
 800468a:	bf00      	nop
 800468c:	e7fe      	b.n	800468c <prvTaskExitError+0x28>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	60bb      	str	r3, [r7, #8]
}
 80046a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046a2:	bf00      	nop
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0fc      	beq.n	80046a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046aa:	bf00      	nop
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	2000000c 	.word	0x2000000c
 80046bc:	00000000 	.word	0x00000000

080046c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <pxCurrentTCBConst2>)
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	6808      	ldr	r0, [r1, #0]
 80046c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ca:	f380 8809 	msr	PSP, r0
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f380 8811 	msr	BASEPRI, r0
 80046da:	4770      	bx	lr
 80046dc:	f3af 8000 	nop.w

080046e0 <pxCurrentTCBConst2>:
 80046e0:	2000050c 	.word	0x2000050c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop

080046e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046e8:	4808      	ldr	r0, [pc, #32]	; (800470c <prvPortStartFirstTask+0x24>)
 80046ea:	6800      	ldr	r0, [r0, #0]
 80046ec:	6800      	ldr	r0, [r0, #0]
 80046ee:	f380 8808 	msr	MSP, r0
 80046f2:	f04f 0000 	mov.w	r0, #0
 80046f6:	f380 8814 	msr	CONTROL, r0
 80046fa:	b662      	cpsie	i
 80046fc:	b661      	cpsie	f
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	df00      	svc	0
 8004708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800470a:	bf00      	nop
 800470c:	e000ed08 	.word	0xe000ed08

08004710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004716:	4b46      	ldr	r3, [pc, #280]	; (8004830 <xPortStartScheduler+0x120>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a46      	ldr	r2, [pc, #280]	; (8004834 <xPortStartScheduler+0x124>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d10a      	bne.n	8004736 <xPortStartScheduler+0x26>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	613b      	str	r3, [r7, #16]
}
 8004732:	bf00      	nop
 8004734:	e7fe      	b.n	8004734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004736:	4b3e      	ldr	r3, [pc, #248]	; (8004830 <xPortStartScheduler+0x120>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a3f      	ldr	r2, [pc, #252]	; (8004838 <xPortStartScheduler+0x128>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d10a      	bne.n	8004756 <xPortStartScheduler+0x46>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	60fb      	str	r3, [r7, #12]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004756:	4b39      	ldr	r3, [pc, #228]	; (800483c <xPortStartScheduler+0x12c>)
 8004758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	22ff      	movs	r2, #255	; 0xff
 8004766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4b31      	ldr	r3, [pc, #196]	; (8004840 <xPortStartScheduler+0x130>)
 800477c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800477e:	4b31      	ldr	r3, [pc, #196]	; (8004844 <xPortStartScheduler+0x134>)
 8004780:	2207      	movs	r2, #7
 8004782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004784:	e009      	b.n	800479a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004786:	4b2f      	ldr	r3, [pc, #188]	; (8004844 <xPortStartScheduler+0x134>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3b01      	subs	r3, #1
 800478c:	4a2d      	ldr	r2, [pc, #180]	; (8004844 <xPortStartScheduler+0x134>)
 800478e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	b2db      	uxtb	r3, r3
 8004798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a2:	2b80      	cmp	r3, #128	; 0x80
 80047a4:	d0ef      	beq.n	8004786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047a6:	4b27      	ldr	r3, [pc, #156]	; (8004844 <xPortStartScheduler+0x134>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f1c3 0307 	rsb	r3, r3, #7
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d00a      	beq.n	80047c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60bb      	str	r3, [r7, #8]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047c8:	4b1e      	ldr	r3, [pc, #120]	; (8004844 <xPortStartScheduler+0x134>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <xPortStartScheduler+0x134>)
 80047d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047d2:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <xPortStartScheduler+0x134>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047da:	4a1a      	ldr	r2, [pc, #104]	; (8004844 <xPortStartScheduler+0x134>)
 80047dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047e6:	4b18      	ldr	r3, [pc, #96]	; (8004848 <xPortStartScheduler+0x138>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a17      	ldr	r2, [pc, #92]	; (8004848 <xPortStartScheduler+0x138>)
 80047ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <xPortStartScheduler+0x138>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a14      	ldr	r2, [pc, #80]	; (8004848 <xPortStartScheduler+0x138>)
 80047f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047fe:	f000 f8dd 	bl	80049bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <xPortStartScheduler+0x13c>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004808:	f000 f8fc 	bl	8004a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800480c:	4b10      	ldr	r3, [pc, #64]	; (8004850 <xPortStartScheduler+0x140>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a0f      	ldr	r2, [pc, #60]	; (8004850 <xPortStartScheduler+0x140>)
 8004812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004818:	f7ff ff66 	bl	80046e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800481c:	f7ff fd2e 	bl	800427c <vTaskSwitchContext>
	prvTaskExitError();
 8004820:	f7ff ff20 	bl	8004664 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	e000ed00 	.word	0xe000ed00
 8004834:	410fc271 	.word	0x410fc271
 8004838:	410fc270 	.word	0x410fc270
 800483c:	e000e400 	.word	0xe000e400
 8004840:	2000073c 	.word	0x2000073c
 8004844:	20000740 	.word	0x20000740
 8004848:	e000ed20 	.word	0xe000ed20
 800484c:	2000000c 	.word	0x2000000c
 8004850:	e000ef34 	.word	0xe000ef34

08004854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	607b      	str	r3, [r7, #4]
}
 800486c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <vPortEnterCritical+0x58>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	4a0d      	ldr	r2, [pc, #52]	; (80048ac <vPortEnterCritical+0x58>)
 8004876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004878:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <vPortEnterCritical+0x58>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10f      	bne.n	80048a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <vPortEnterCritical+0x5c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	603b      	str	r3, [r7, #0]
}
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <vPortEnterCritical+0x4a>
	}
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	2000000c 	.word	0x2000000c
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <vPortExitCritical+0x50>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <vPortExitCritical+0x24>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	607b      	str	r3, [r7, #4]
}
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <vPortExitCritical+0x50>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3b01      	subs	r3, #1
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <vPortExitCritical+0x50>)
 80048e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <vPortExitCritical+0x50>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d105      	bne.n	80048f6 <vPortExitCritical+0x42>
 80048ea:	2300      	movs	r3, #0
 80048ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	2000000c 	.word	0x2000000c
	...

08004910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004910:	f3ef 8009 	mrs	r0, PSP
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	4b15      	ldr	r3, [pc, #84]	; (8004970 <pxCurrentTCBConst>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f01e 0f10 	tst.w	lr, #16
 8004920:	bf08      	it	eq
 8004922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492a:	6010      	str	r0, [r2, #0]
 800492c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004934:	f380 8811 	msr	BASEPRI, r0
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f7ff fc9c 	bl	800427c <vTaskSwitchContext>
 8004944:	f04f 0000 	mov.w	r0, #0
 8004948:	f380 8811 	msr	BASEPRI, r0
 800494c:	bc09      	pop	{r0, r3}
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	6808      	ldr	r0, [r1, #0]
 8004952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004956:	f01e 0f10 	tst.w	lr, #16
 800495a:	bf08      	it	eq
 800495c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004960:	f380 8809 	msr	PSP, r0
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	f3af 8000 	nop.w

08004970 <pxCurrentTCBConst>:
 8004970:	2000050c 	.word	0x2000050c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	607b      	str	r3, [r7, #4]
}
 8004990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004992:	f7ff fbbb 	bl	800410c <xTaskIncrementTick>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <xPortSysTickHandler+0x40>)
 800499e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	f383 8811 	msr	BASEPRI, r3
}
 80049ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <vPortSetupTimerInterrupt+0x34>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <vPortSetupTimerInterrupt+0x38>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <vPortSetupTimerInterrupt+0x3c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <vPortSetupTimerInterrupt+0x40>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <vPortSetupTimerInterrupt+0x44>)
 80049da:	3b01      	subs	r3, #1
 80049dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049de:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <vPortSetupTimerInterrupt+0x34>)
 80049e0:	2207      	movs	r2, #7
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	e000e010 	.word	0xe000e010
 80049f4:	e000e018 	.word	0xe000e018
 80049f8:	20000000 	.word	0x20000000
 80049fc:	10624dd3 	.word	0x10624dd3
 8004a00:	e000e014 	.word	0xe000e014

08004a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a14 <vPortEnableVFP+0x10>
 8004a08:	6801      	ldr	r1, [r0, #0]
 8004a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a0e:	6001      	str	r1, [r0, #0]
 8004a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a12:	bf00      	nop
 8004a14:	e000ed88 	.word	0xe000ed88

08004a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a24:	f7ff fac8 	bl	8003fb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a28:	4b5b      	ldr	r3, [pc, #364]	; (8004b98 <pvPortMalloc+0x180>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a30:	f000 f920 	bl	8004c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a34:	4b59      	ldr	r3, [pc, #356]	; (8004b9c <pvPortMalloc+0x184>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f040 8093 	bne.w	8004b68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01d      	beq.n	8004a84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a48:	2208      	movs	r2, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d014      	beq.n	8004a84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f023 0307 	bic.w	r3, r3, #7
 8004a60:	3308      	adds	r3, #8
 8004a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <pvPortMalloc+0x6c>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	617b      	str	r3, [r7, #20]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d06e      	beq.n	8004b68 <pvPortMalloc+0x150>
 8004a8a:	4b45      	ldr	r3, [pc, #276]	; (8004ba0 <pvPortMalloc+0x188>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d869      	bhi.n	8004b68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a94:	4b43      	ldr	r3, [pc, #268]	; (8004ba4 <pvPortMalloc+0x18c>)
 8004a96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a98:	4b42      	ldr	r3, [pc, #264]	; (8004ba4 <pvPortMalloc+0x18c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a9e:	e004      	b.n	8004aaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d903      	bls.n	8004abc <pvPortMalloc+0xa4>
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1f1      	bne.n	8004aa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004abc:	4b36      	ldr	r3, [pc, #216]	; (8004b98 <pvPortMalloc+0x180>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d050      	beq.n	8004b68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2208      	movs	r2, #8
 8004acc:	4413      	add	r3, r2
 8004ace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d91f      	bls.n	8004b28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4413      	add	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <pvPortMalloc+0xf8>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	613b      	str	r3, [r7, #16]
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	1ad2      	subs	r2, r2, r3
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b22:	69b8      	ldr	r0, [r7, #24]
 8004b24:	f000 f908 	bl	8004d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b28:	4b1d      	ldr	r3, [pc, #116]	; (8004ba0 <pvPortMalloc+0x188>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	4a1b      	ldr	r2, [pc, #108]	; (8004ba0 <pvPortMalloc+0x188>)
 8004b34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b36:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <pvPortMalloc+0x188>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ba8 <pvPortMalloc+0x190>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d203      	bcs.n	8004b4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b42:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <pvPortMalloc+0x188>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a18      	ldr	r2, [pc, #96]	; (8004ba8 <pvPortMalloc+0x190>)
 8004b48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <pvPortMalloc+0x184>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <pvPortMalloc+0x194>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	4a11      	ldr	r2, [pc, #68]	; (8004bac <pvPortMalloc+0x194>)
 8004b66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b68:	f7ff fa34 	bl	8003fd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <pvPortMalloc+0x174>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	60fb      	str	r3, [r7, #12]
}
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <pvPortMalloc+0x172>
	return pvReturn;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3728      	adds	r7, #40	; 0x28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	2000434c 	.word	0x2000434c
 8004b9c:	20004360 	.word	0x20004360
 8004ba0:	20004350 	.word	0x20004350
 8004ba4:	20004344 	.word	0x20004344
 8004ba8:	20004354 	.word	0x20004354
 8004bac:	20004358 	.word	0x20004358

08004bb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d04d      	beq.n	8004c5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	425b      	negs	r3, r3
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4413      	add	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <vPortFree+0xb8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <vPortFree+0x44>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	60fb      	str	r3, [r7, #12]
}
 8004bf0:	bf00      	nop
 8004bf2:	e7fe      	b.n	8004bf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <vPortFree+0x62>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	60bb      	str	r3, [r7, #8]
}
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <vPortFree+0xb8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01e      	beq.n	8004c5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d11a      	bne.n	8004c5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <vPortFree+0xb8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	401a      	ands	r2, r3
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c38:	f7ff f9be 	bl	8003fb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <vPortFree+0xbc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4413      	add	r3, r2
 8004c46:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <vPortFree+0xbc>)
 8004c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c4a:	6938      	ldr	r0, [r7, #16]
 8004c4c:	f000 f874 	bl	8004d38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <vPortFree+0xc0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3301      	adds	r3, #1
 8004c56:	4a06      	ldr	r2, [pc, #24]	; (8004c70 <vPortFree+0xc0>)
 8004c58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c5a:	f7ff f9bb 	bl	8003fd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c5e:	bf00      	nop
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20004360 	.word	0x20004360
 8004c6c:	20004350 	.word	0x20004350
 8004c70:	2000435c 	.word	0x2000435c

08004c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c80:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <prvHeapInit+0xac>)
 8004c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00c      	beq.n	8004ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3307      	adds	r3, #7
 8004c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0307 	bic.w	r3, r3, #7
 8004c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <prvHeapInit+0xac>)
 8004ca4:	4413      	add	r3, r2
 8004ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cac:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <prvHeapInit+0xb0>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cb2:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <prvHeapInit+0xb0>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <prvHeapInit+0xb4>)
 8004cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <prvHeapInit+0xb4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <prvHeapInit+0xb4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	1ad2      	subs	r2, r2, r3
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <prvHeapInit+0xb4>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <prvHeapInit+0xb8>)
 8004d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <prvHeapInit+0xbc>)
 8004d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <prvHeapInit+0xc0>)
 8004d0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20000744 	.word	0x20000744
 8004d24:	20004344 	.word	0x20004344
 8004d28:	2000434c 	.word	0x2000434c
 8004d2c:	20004354 	.word	0x20004354
 8004d30:	20004350 	.word	0x20004350
 8004d34:	20004360 	.word	0x20004360

08004d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d40:	4b28      	ldr	r3, [pc, #160]	; (8004de4 <prvInsertBlockIntoFreeList+0xac>)
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	e002      	b.n	8004d4c <prvInsertBlockIntoFreeList+0x14>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d8f7      	bhi.n	8004d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	4413      	add	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d108      	bne.n	8004d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	441a      	add	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	441a      	add	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d118      	bne.n	8004dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d00d      	beq.n	8004db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	441a      	add	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e008      	b.n	8004dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004db6:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <prvInsertBlockIntoFreeList+0xb0>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	e003      	b.n	8004dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d002      	beq.n	8004dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20004344 	.word	0x20004344
 8004de8:	2000434c 	.word	0x2000434c

08004dec <__cvt>:
 8004dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004df0:	ec55 4b10 	vmov	r4, r5, d0
 8004df4:	2d00      	cmp	r5, #0
 8004df6:	460e      	mov	r6, r1
 8004df8:	4619      	mov	r1, r3
 8004dfa:	462b      	mov	r3, r5
 8004dfc:	bfbb      	ittet	lt
 8004dfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e02:	461d      	movlt	r5, r3
 8004e04:	2300      	movge	r3, #0
 8004e06:	232d      	movlt	r3, #45	; 0x2d
 8004e08:	700b      	strb	r3, [r1, #0]
 8004e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e10:	4691      	mov	r9, r2
 8004e12:	f023 0820 	bic.w	r8, r3, #32
 8004e16:	bfbc      	itt	lt
 8004e18:	4622      	movlt	r2, r4
 8004e1a:	4614      	movlt	r4, r2
 8004e1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e20:	d005      	beq.n	8004e2e <__cvt+0x42>
 8004e22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e26:	d100      	bne.n	8004e2a <__cvt+0x3e>
 8004e28:	3601      	adds	r6, #1
 8004e2a:	2102      	movs	r1, #2
 8004e2c:	e000      	b.n	8004e30 <__cvt+0x44>
 8004e2e:	2103      	movs	r1, #3
 8004e30:	ab03      	add	r3, sp, #12
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	ab02      	add	r3, sp, #8
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	ec45 4b10 	vmov	d0, r4, r5
 8004e3c:	4653      	mov	r3, sl
 8004e3e:	4632      	mov	r2, r6
 8004e40:	f001 f85e 	bl	8005f00 <_dtoa_r>
 8004e44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e48:	4607      	mov	r7, r0
 8004e4a:	d102      	bne.n	8004e52 <__cvt+0x66>
 8004e4c:	f019 0f01 	tst.w	r9, #1
 8004e50:	d022      	beq.n	8004e98 <__cvt+0xac>
 8004e52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e56:	eb07 0906 	add.w	r9, r7, r6
 8004e5a:	d110      	bne.n	8004e7e <__cvt+0x92>
 8004e5c:	783b      	ldrb	r3, [r7, #0]
 8004e5e:	2b30      	cmp	r3, #48	; 0x30
 8004e60:	d10a      	bne.n	8004e78 <__cvt+0x8c>
 8004e62:	2200      	movs	r2, #0
 8004e64:	2300      	movs	r3, #0
 8004e66:	4620      	mov	r0, r4
 8004e68:	4629      	mov	r1, r5
 8004e6a:	f7fb fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e6e:	b918      	cbnz	r0, 8004e78 <__cvt+0x8c>
 8004e70:	f1c6 0601 	rsb	r6, r6, #1
 8004e74:	f8ca 6000 	str.w	r6, [sl]
 8004e78:	f8da 3000 	ldr.w	r3, [sl]
 8004e7c:	4499      	add	r9, r3
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2300      	movs	r3, #0
 8004e82:	4620      	mov	r0, r4
 8004e84:	4629      	mov	r1, r5
 8004e86:	f7fb fe1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e8a:	b108      	cbz	r0, 8004e90 <__cvt+0xa4>
 8004e8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e90:	2230      	movs	r2, #48	; 0x30
 8004e92:	9b03      	ldr	r3, [sp, #12]
 8004e94:	454b      	cmp	r3, r9
 8004e96:	d307      	bcc.n	8004ea8 <__cvt+0xbc>
 8004e98:	9b03      	ldr	r3, [sp, #12]
 8004e9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e9c:	1bdb      	subs	r3, r3, r7
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	b004      	add	sp, #16
 8004ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea8:	1c59      	adds	r1, r3, #1
 8004eaa:	9103      	str	r1, [sp, #12]
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	e7f0      	b.n	8004e92 <__cvt+0xa6>

08004eb0 <__exponent>:
 8004eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2900      	cmp	r1, #0
 8004eb6:	bfb8      	it	lt
 8004eb8:	4249      	neglt	r1, r1
 8004eba:	f803 2b02 	strb.w	r2, [r3], #2
 8004ebe:	bfb4      	ite	lt
 8004ec0:	222d      	movlt	r2, #45	; 0x2d
 8004ec2:	222b      	movge	r2, #43	; 0x2b
 8004ec4:	2909      	cmp	r1, #9
 8004ec6:	7042      	strb	r2, [r0, #1]
 8004ec8:	dd2a      	ble.n	8004f20 <__exponent+0x70>
 8004eca:	f10d 0207 	add.w	r2, sp, #7
 8004ece:	4617      	mov	r7, r2
 8004ed0:	260a      	movs	r6, #10
 8004ed2:	4694      	mov	ip, r2
 8004ed4:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ed8:	fb06 1415 	mls	r4, r6, r5, r1
 8004edc:	3430      	adds	r4, #48	; 0x30
 8004ede:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	2c63      	cmp	r4, #99	; 0x63
 8004ee6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004eea:	4629      	mov	r1, r5
 8004eec:	dcf1      	bgt.n	8004ed2 <__exponent+0x22>
 8004eee:	3130      	adds	r1, #48	; 0x30
 8004ef0:	f1ac 0402 	sub.w	r4, ip, #2
 8004ef4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ef8:	1c41      	adds	r1, r0, #1
 8004efa:	4622      	mov	r2, r4
 8004efc:	42ba      	cmp	r2, r7
 8004efe:	d30a      	bcc.n	8004f16 <__exponent+0x66>
 8004f00:	f10d 0209 	add.w	r2, sp, #9
 8004f04:	eba2 020c 	sub.w	r2, r2, ip
 8004f08:	42bc      	cmp	r4, r7
 8004f0a:	bf88      	it	hi
 8004f0c:	2200      	movhi	r2, #0
 8004f0e:	4413      	add	r3, r2
 8004f10:	1a18      	subs	r0, r3, r0
 8004f12:	b003      	add	sp, #12
 8004f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f16:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004f1a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004f1e:	e7ed      	b.n	8004efc <__exponent+0x4c>
 8004f20:	2330      	movs	r3, #48	; 0x30
 8004f22:	3130      	adds	r1, #48	; 0x30
 8004f24:	7083      	strb	r3, [r0, #2]
 8004f26:	70c1      	strb	r1, [r0, #3]
 8004f28:	1d03      	adds	r3, r0, #4
 8004f2a:	e7f1      	b.n	8004f10 <__exponent+0x60>

08004f2c <_printf_float>:
 8004f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f30:	ed2d 8b02 	vpush	{d8}
 8004f34:	b08d      	sub	sp, #52	; 0x34
 8004f36:	460c      	mov	r4, r1
 8004f38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f3c:	4616      	mov	r6, r2
 8004f3e:	461f      	mov	r7, r3
 8004f40:	4605      	mov	r5, r0
 8004f42:	f000 fe77 	bl	8005c34 <_localeconv_r>
 8004f46:	f8d0 a000 	ldr.w	sl, [r0]
 8004f4a:	4650      	mov	r0, sl
 8004f4c:	f7fb f990 	bl	8000270 <strlen>
 8004f50:	2300      	movs	r3, #0
 8004f52:	930a      	str	r3, [sp, #40]	; 0x28
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	9305      	str	r3, [sp, #20]
 8004f58:	f8d8 3000 	ldr.w	r3, [r8]
 8004f5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f60:	3307      	adds	r3, #7
 8004f62:	f023 0307 	bic.w	r3, r3, #7
 8004f66:	f103 0208 	add.w	r2, r3, #8
 8004f6a:	f8c8 2000 	str.w	r2, [r8]
 8004f6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f76:	9307      	str	r3, [sp, #28]
 8004f78:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f7c:	ee08 0a10 	vmov	s16, r0
 8004f80:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004f84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f88:	4b9e      	ldr	r3, [pc, #632]	; (8005204 <_printf_float+0x2d8>)
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f8e:	f7fb fdcd 	bl	8000b2c <__aeabi_dcmpun>
 8004f92:	bb88      	cbnz	r0, 8004ff8 <_printf_float+0xcc>
 8004f94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f98:	4b9a      	ldr	r3, [pc, #616]	; (8005204 <_printf_float+0x2d8>)
 8004f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f9e:	f7fb fda7 	bl	8000af0 <__aeabi_dcmple>
 8004fa2:	bb48      	cbnz	r0, 8004ff8 <_printf_float+0xcc>
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	4640      	mov	r0, r8
 8004faa:	4649      	mov	r1, r9
 8004fac:	f7fb fd96 	bl	8000adc <__aeabi_dcmplt>
 8004fb0:	b110      	cbz	r0, 8004fb8 <_printf_float+0x8c>
 8004fb2:	232d      	movs	r3, #45	; 0x2d
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb8:	4a93      	ldr	r2, [pc, #588]	; (8005208 <_printf_float+0x2dc>)
 8004fba:	4b94      	ldr	r3, [pc, #592]	; (800520c <_printf_float+0x2e0>)
 8004fbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004fc0:	bf94      	ite	ls
 8004fc2:	4690      	movls	r8, r2
 8004fc4:	4698      	movhi	r8, r3
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	6123      	str	r3, [r4, #16]
 8004fca:	9b05      	ldr	r3, [sp, #20]
 8004fcc:	f023 0304 	bic.w	r3, r3, #4
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	f04f 0900 	mov.w	r9, #0
 8004fd6:	9700      	str	r7, [sp, #0]
 8004fd8:	4633      	mov	r3, r6
 8004fda:	aa0b      	add	r2, sp, #44	; 0x2c
 8004fdc:	4621      	mov	r1, r4
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 f9da 	bl	8005398 <_printf_common>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	f040 8090 	bne.w	800510a <_printf_float+0x1de>
 8004fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fee:	b00d      	add	sp, #52	; 0x34
 8004ff0:	ecbd 8b02 	vpop	{d8}
 8004ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	464b      	mov	r3, r9
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	4649      	mov	r1, r9
 8005000:	f7fb fd94 	bl	8000b2c <__aeabi_dcmpun>
 8005004:	b140      	cbz	r0, 8005018 <_printf_float+0xec>
 8005006:	464b      	mov	r3, r9
 8005008:	2b00      	cmp	r3, #0
 800500a:	bfbc      	itt	lt
 800500c:	232d      	movlt	r3, #45	; 0x2d
 800500e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005012:	4a7f      	ldr	r2, [pc, #508]	; (8005210 <_printf_float+0x2e4>)
 8005014:	4b7f      	ldr	r3, [pc, #508]	; (8005214 <_printf_float+0x2e8>)
 8005016:	e7d1      	b.n	8004fbc <_printf_float+0x90>
 8005018:	6863      	ldr	r3, [r4, #4]
 800501a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800501e:	9206      	str	r2, [sp, #24]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	d13f      	bne.n	80050a4 <_printf_float+0x178>
 8005024:	2306      	movs	r3, #6
 8005026:	6063      	str	r3, [r4, #4]
 8005028:	9b05      	ldr	r3, [sp, #20]
 800502a:	6861      	ldr	r1, [r4, #4]
 800502c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005030:	2300      	movs	r3, #0
 8005032:	9303      	str	r3, [sp, #12]
 8005034:	ab0a      	add	r3, sp, #40	; 0x28
 8005036:	e9cd b301 	strd	fp, r3, [sp, #4]
 800503a:	ab09      	add	r3, sp, #36	; 0x24
 800503c:	ec49 8b10 	vmov	d0, r8, r9
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	6022      	str	r2, [r4, #0]
 8005044:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005048:	4628      	mov	r0, r5
 800504a:	f7ff fecf 	bl	8004dec <__cvt>
 800504e:	9b06      	ldr	r3, [sp, #24]
 8005050:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005052:	2b47      	cmp	r3, #71	; 0x47
 8005054:	4680      	mov	r8, r0
 8005056:	d108      	bne.n	800506a <_printf_float+0x13e>
 8005058:	1cc8      	adds	r0, r1, #3
 800505a:	db02      	blt.n	8005062 <_printf_float+0x136>
 800505c:	6863      	ldr	r3, [r4, #4]
 800505e:	4299      	cmp	r1, r3
 8005060:	dd41      	ble.n	80050e6 <_printf_float+0x1ba>
 8005062:	f1ab 0302 	sub.w	r3, fp, #2
 8005066:	fa5f fb83 	uxtb.w	fp, r3
 800506a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800506e:	d820      	bhi.n	80050b2 <_printf_float+0x186>
 8005070:	3901      	subs	r1, #1
 8005072:	465a      	mov	r2, fp
 8005074:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005078:	9109      	str	r1, [sp, #36]	; 0x24
 800507a:	f7ff ff19 	bl	8004eb0 <__exponent>
 800507e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005080:	1813      	adds	r3, r2, r0
 8005082:	2a01      	cmp	r2, #1
 8005084:	4681      	mov	r9, r0
 8005086:	6123      	str	r3, [r4, #16]
 8005088:	dc02      	bgt.n	8005090 <_printf_float+0x164>
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	07d2      	lsls	r2, r2, #31
 800508e:	d501      	bpl.n	8005094 <_printf_float+0x168>
 8005090:	3301      	adds	r3, #1
 8005092:	6123      	str	r3, [r4, #16]
 8005094:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005098:	2b00      	cmp	r3, #0
 800509a:	d09c      	beq.n	8004fd6 <_printf_float+0xaa>
 800509c:	232d      	movs	r3, #45	; 0x2d
 800509e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050a2:	e798      	b.n	8004fd6 <_printf_float+0xaa>
 80050a4:	9a06      	ldr	r2, [sp, #24]
 80050a6:	2a47      	cmp	r2, #71	; 0x47
 80050a8:	d1be      	bne.n	8005028 <_printf_float+0xfc>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1bc      	bne.n	8005028 <_printf_float+0xfc>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e7b9      	b.n	8005026 <_printf_float+0xfa>
 80050b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80050b6:	d118      	bne.n	80050ea <_printf_float+0x1be>
 80050b8:	2900      	cmp	r1, #0
 80050ba:	6863      	ldr	r3, [r4, #4]
 80050bc:	dd0b      	ble.n	80050d6 <_printf_float+0x1aa>
 80050be:	6121      	str	r1, [r4, #16]
 80050c0:	b913      	cbnz	r3, 80050c8 <_printf_float+0x19c>
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	07d0      	lsls	r0, r2, #31
 80050c6:	d502      	bpl.n	80050ce <_printf_float+0x1a2>
 80050c8:	3301      	adds	r3, #1
 80050ca:	440b      	add	r3, r1
 80050cc:	6123      	str	r3, [r4, #16]
 80050ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80050d0:	f04f 0900 	mov.w	r9, #0
 80050d4:	e7de      	b.n	8005094 <_printf_float+0x168>
 80050d6:	b913      	cbnz	r3, 80050de <_printf_float+0x1b2>
 80050d8:	6822      	ldr	r2, [r4, #0]
 80050da:	07d2      	lsls	r2, r2, #31
 80050dc:	d501      	bpl.n	80050e2 <_printf_float+0x1b6>
 80050de:	3302      	adds	r3, #2
 80050e0:	e7f4      	b.n	80050cc <_printf_float+0x1a0>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e7f2      	b.n	80050cc <_printf_float+0x1a0>
 80050e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80050ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ec:	4299      	cmp	r1, r3
 80050ee:	db05      	blt.n	80050fc <_printf_float+0x1d0>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	6121      	str	r1, [r4, #16]
 80050f4:	07d8      	lsls	r0, r3, #31
 80050f6:	d5ea      	bpl.n	80050ce <_printf_float+0x1a2>
 80050f8:	1c4b      	adds	r3, r1, #1
 80050fa:	e7e7      	b.n	80050cc <_printf_float+0x1a0>
 80050fc:	2900      	cmp	r1, #0
 80050fe:	bfd4      	ite	le
 8005100:	f1c1 0202 	rsble	r2, r1, #2
 8005104:	2201      	movgt	r2, #1
 8005106:	4413      	add	r3, r2
 8005108:	e7e0      	b.n	80050cc <_printf_float+0x1a0>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	055a      	lsls	r2, r3, #21
 800510e:	d407      	bmi.n	8005120 <_printf_float+0x1f4>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	4642      	mov	r2, r8
 8005114:	4631      	mov	r1, r6
 8005116:	4628      	mov	r0, r5
 8005118:	47b8      	blx	r7
 800511a:	3001      	adds	r0, #1
 800511c:	d12c      	bne.n	8005178 <_printf_float+0x24c>
 800511e:	e764      	b.n	8004fea <_printf_float+0xbe>
 8005120:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005124:	f240 80e0 	bls.w	80052e8 <_printf_float+0x3bc>
 8005128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800512c:	2200      	movs	r2, #0
 800512e:	2300      	movs	r3, #0
 8005130:	f7fb fcca 	bl	8000ac8 <__aeabi_dcmpeq>
 8005134:	2800      	cmp	r0, #0
 8005136:	d034      	beq.n	80051a2 <_printf_float+0x276>
 8005138:	4a37      	ldr	r2, [pc, #220]	; (8005218 <_printf_float+0x2ec>)
 800513a:	2301      	movs	r3, #1
 800513c:	4631      	mov	r1, r6
 800513e:	4628      	mov	r0, r5
 8005140:	47b8      	blx	r7
 8005142:	3001      	adds	r0, #1
 8005144:	f43f af51 	beq.w	8004fea <_printf_float+0xbe>
 8005148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800514c:	429a      	cmp	r2, r3
 800514e:	db02      	blt.n	8005156 <_printf_float+0x22a>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	07d8      	lsls	r0, r3, #31
 8005154:	d510      	bpl.n	8005178 <_printf_float+0x24c>
 8005156:	ee18 3a10 	vmov	r3, s16
 800515a:	4652      	mov	r2, sl
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	f43f af41 	beq.w	8004fea <_printf_float+0xbe>
 8005168:	f04f 0800 	mov.w	r8, #0
 800516c:	f104 091a 	add.w	r9, r4, #26
 8005170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005172:	3b01      	subs	r3, #1
 8005174:	4543      	cmp	r3, r8
 8005176:	dc09      	bgt.n	800518c <_printf_float+0x260>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	079b      	lsls	r3, r3, #30
 800517c:	f100 8107 	bmi.w	800538e <_printf_float+0x462>
 8005180:	68e0      	ldr	r0, [r4, #12]
 8005182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005184:	4298      	cmp	r0, r3
 8005186:	bfb8      	it	lt
 8005188:	4618      	movlt	r0, r3
 800518a:	e730      	b.n	8004fee <_printf_float+0xc2>
 800518c:	2301      	movs	r3, #1
 800518e:	464a      	mov	r2, r9
 8005190:	4631      	mov	r1, r6
 8005192:	4628      	mov	r0, r5
 8005194:	47b8      	blx	r7
 8005196:	3001      	adds	r0, #1
 8005198:	f43f af27 	beq.w	8004fea <_printf_float+0xbe>
 800519c:	f108 0801 	add.w	r8, r8, #1
 80051a0:	e7e6      	b.n	8005170 <_printf_float+0x244>
 80051a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dc39      	bgt.n	800521c <_printf_float+0x2f0>
 80051a8:	4a1b      	ldr	r2, [pc, #108]	; (8005218 <_printf_float+0x2ec>)
 80051aa:	2301      	movs	r3, #1
 80051ac:	4631      	mov	r1, r6
 80051ae:	4628      	mov	r0, r5
 80051b0:	47b8      	blx	r7
 80051b2:	3001      	adds	r0, #1
 80051b4:	f43f af19 	beq.w	8004fea <_printf_float+0xbe>
 80051b8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051bc:	4313      	orrs	r3, r2
 80051be:	d102      	bne.n	80051c6 <_printf_float+0x29a>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	07d9      	lsls	r1, r3, #31
 80051c4:	d5d8      	bpl.n	8005178 <_printf_float+0x24c>
 80051c6:	ee18 3a10 	vmov	r3, s16
 80051ca:	4652      	mov	r2, sl
 80051cc:	4631      	mov	r1, r6
 80051ce:	4628      	mov	r0, r5
 80051d0:	47b8      	blx	r7
 80051d2:	3001      	adds	r0, #1
 80051d4:	f43f af09 	beq.w	8004fea <_printf_float+0xbe>
 80051d8:	f04f 0900 	mov.w	r9, #0
 80051dc:	f104 0a1a 	add.w	sl, r4, #26
 80051e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e2:	425b      	negs	r3, r3
 80051e4:	454b      	cmp	r3, r9
 80051e6:	dc01      	bgt.n	80051ec <_printf_float+0x2c0>
 80051e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ea:	e792      	b.n	8005112 <_printf_float+0x1e6>
 80051ec:	2301      	movs	r3, #1
 80051ee:	4652      	mov	r2, sl
 80051f0:	4631      	mov	r1, r6
 80051f2:	4628      	mov	r0, r5
 80051f4:	47b8      	blx	r7
 80051f6:	3001      	adds	r0, #1
 80051f8:	f43f aef7 	beq.w	8004fea <_printf_float+0xbe>
 80051fc:	f109 0901 	add.w	r9, r9, #1
 8005200:	e7ee      	b.n	80051e0 <_printf_float+0x2b4>
 8005202:	bf00      	nop
 8005204:	7fefffff 	.word	0x7fefffff
 8005208:	0800818c 	.word	0x0800818c
 800520c:	08008190 	.word	0x08008190
 8005210:	08008194 	.word	0x08008194
 8005214:	08008198 	.word	0x08008198
 8005218:	0800819c 	.word	0x0800819c
 800521c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800521e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005220:	429a      	cmp	r2, r3
 8005222:	bfa8      	it	ge
 8005224:	461a      	movge	r2, r3
 8005226:	2a00      	cmp	r2, #0
 8005228:	4691      	mov	r9, r2
 800522a:	dc37      	bgt.n	800529c <_printf_float+0x370>
 800522c:	f04f 0b00 	mov.w	fp, #0
 8005230:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005234:	f104 021a 	add.w	r2, r4, #26
 8005238:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800523a:	9305      	str	r3, [sp, #20]
 800523c:	eba3 0309 	sub.w	r3, r3, r9
 8005240:	455b      	cmp	r3, fp
 8005242:	dc33      	bgt.n	80052ac <_printf_float+0x380>
 8005244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005248:	429a      	cmp	r2, r3
 800524a:	db3b      	blt.n	80052c4 <_printf_float+0x398>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	07da      	lsls	r2, r3, #31
 8005250:	d438      	bmi.n	80052c4 <_printf_float+0x398>
 8005252:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005256:	eba2 0903 	sub.w	r9, r2, r3
 800525a:	9b05      	ldr	r3, [sp, #20]
 800525c:	1ad2      	subs	r2, r2, r3
 800525e:	4591      	cmp	r9, r2
 8005260:	bfa8      	it	ge
 8005262:	4691      	movge	r9, r2
 8005264:	f1b9 0f00 	cmp.w	r9, #0
 8005268:	dc35      	bgt.n	80052d6 <_printf_float+0x3aa>
 800526a:	f04f 0800 	mov.w	r8, #0
 800526e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005272:	f104 0a1a 	add.w	sl, r4, #26
 8005276:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	eba3 0309 	sub.w	r3, r3, r9
 8005280:	4543      	cmp	r3, r8
 8005282:	f77f af79 	ble.w	8005178 <_printf_float+0x24c>
 8005286:	2301      	movs	r3, #1
 8005288:	4652      	mov	r2, sl
 800528a:	4631      	mov	r1, r6
 800528c:	4628      	mov	r0, r5
 800528e:	47b8      	blx	r7
 8005290:	3001      	adds	r0, #1
 8005292:	f43f aeaa 	beq.w	8004fea <_printf_float+0xbe>
 8005296:	f108 0801 	add.w	r8, r8, #1
 800529a:	e7ec      	b.n	8005276 <_printf_float+0x34a>
 800529c:	4613      	mov	r3, r2
 800529e:	4631      	mov	r1, r6
 80052a0:	4642      	mov	r2, r8
 80052a2:	4628      	mov	r0, r5
 80052a4:	47b8      	blx	r7
 80052a6:	3001      	adds	r0, #1
 80052a8:	d1c0      	bne.n	800522c <_printf_float+0x300>
 80052aa:	e69e      	b.n	8004fea <_printf_float+0xbe>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4631      	mov	r1, r6
 80052b0:	4628      	mov	r0, r5
 80052b2:	9205      	str	r2, [sp, #20]
 80052b4:	47b8      	blx	r7
 80052b6:	3001      	adds	r0, #1
 80052b8:	f43f ae97 	beq.w	8004fea <_printf_float+0xbe>
 80052bc:	9a05      	ldr	r2, [sp, #20]
 80052be:	f10b 0b01 	add.w	fp, fp, #1
 80052c2:	e7b9      	b.n	8005238 <_printf_float+0x30c>
 80052c4:	ee18 3a10 	vmov	r3, s16
 80052c8:	4652      	mov	r2, sl
 80052ca:	4631      	mov	r1, r6
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b8      	blx	r7
 80052d0:	3001      	adds	r0, #1
 80052d2:	d1be      	bne.n	8005252 <_printf_float+0x326>
 80052d4:	e689      	b.n	8004fea <_printf_float+0xbe>
 80052d6:	9a05      	ldr	r2, [sp, #20]
 80052d8:	464b      	mov	r3, r9
 80052da:	4442      	add	r2, r8
 80052dc:	4631      	mov	r1, r6
 80052de:	4628      	mov	r0, r5
 80052e0:	47b8      	blx	r7
 80052e2:	3001      	adds	r0, #1
 80052e4:	d1c1      	bne.n	800526a <_printf_float+0x33e>
 80052e6:	e680      	b.n	8004fea <_printf_float+0xbe>
 80052e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ea:	2a01      	cmp	r2, #1
 80052ec:	dc01      	bgt.n	80052f2 <_printf_float+0x3c6>
 80052ee:	07db      	lsls	r3, r3, #31
 80052f0:	d53a      	bpl.n	8005368 <_printf_float+0x43c>
 80052f2:	2301      	movs	r3, #1
 80052f4:	4642      	mov	r2, r8
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	f43f ae74 	beq.w	8004fea <_printf_float+0xbe>
 8005302:	ee18 3a10 	vmov	r3, s16
 8005306:	4652      	mov	r2, sl
 8005308:	4631      	mov	r1, r6
 800530a:	4628      	mov	r0, r5
 800530c:	47b8      	blx	r7
 800530e:	3001      	adds	r0, #1
 8005310:	f43f ae6b 	beq.w	8004fea <_printf_float+0xbe>
 8005314:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005318:	2200      	movs	r2, #0
 800531a:	2300      	movs	r3, #0
 800531c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005320:	f7fb fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005324:	b9d8      	cbnz	r0, 800535e <_printf_float+0x432>
 8005326:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800532a:	f108 0201 	add.w	r2, r8, #1
 800532e:	4631      	mov	r1, r6
 8005330:	4628      	mov	r0, r5
 8005332:	47b8      	blx	r7
 8005334:	3001      	adds	r0, #1
 8005336:	d10e      	bne.n	8005356 <_printf_float+0x42a>
 8005338:	e657      	b.n	8004fea <_printf_float+0xbe>
 800533a:	2301      	movs	r3, #1
 800533c:	4652      	mov	r2, sl
 800533e:	4631      	mov	r1, r6
 8005340:	4628      	mov	r0, r5
 8005342:	47b8      	blx	r7
 8005344:	3001      	adds	r0, #1
 8005346:	f43f ae50 	beq.w	8004fea <_printf_float+0xbe>
 800534a:	f108 0801 	add.w	r8, r8, #1
 800534e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005350:	3b01      	subs	r3, #1
 8005352:	4543      	cmp	r3, r8
 8005354:	dcf1      	bgt.n	800533a <_printf_float+0x40e>
 8005356:	464b      	mov	r3, r9
 8005358:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800535c:	e6da      	b.n	8005114 <_printf_float+0x1e8>
 800535e:	f04f 0800 	mov.w	r8, #0
 8005362:	f104 0a1a 	add.w	sl, r4, #26
 8005366:	e7f2      	b.n	800534e <_printf_float+0x422>
 8005368:	2301      	movs	r3, #1
 800536a:	4642      	mov	r2, r8
 800536c:	e7df      	b.n	800532e <_printf_float+0x402>
 800536e:	2301      	movs	r3, #1
 8005370:	464a      	mov	r2, r9
 8005372:	4631      	mov	r1, r6
 8005374:	4628      	mov	r0, r5
 8005376:	47b8      	blx	r7
 8005378:	3001      	adds	r0, #1
 800537a:	f43f ae36 	beq.w	8004fea <_printf_float+0xbe>
 800537e:	f108 0801 	add.w	r8, r8, #1
 8005382:	68e3      	ldr	r3, [r4, #12]
 8005384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005386:	1a5b      	subs	r3, r3, r1
 8005388:	4543      	cmp	r3, r8
 800538a:	dcf0      	bgt.n	800536e <_printf_float+0x442>
 800538c:	e6f8      	b.n	8005180 <_printf_float+0x254>
 800538e:	f04f 0800 	mov.w	r8, #0
 8005392:	f104 0919 	add.w	r9, r4, #25
 8005396:	e7f4      	b.n	8005382 <_printf_float+0x456>

08005398 <_printf_common>:
 8005398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800539c:	4616      	mov	r6, r2
 800539e:	4699      	mov	r9, r3
 80053a0:	688a      	ldr	r2, [r1, #8]
 80053a2:	690b      	ldr	r3, [r1, #16]
 80053a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053a8:	4293      	cmp	r3, r2
 80053aa:	bfb8      	it	lt
 80053ac:	4613      	movlt	r3, r2
 80053ae:	6033      	str	r3, [r6, #0]
 80053b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053b4:	4607      	mov	r7, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	b10a      	cbz	r2, 80053be <_printf_common+0x26>
 80053ba:	3301      	adds	r3, #1
 80053bc:	6033      	str	r3, [r6, #0]
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	0699      	lsls	r1, r3, #26
 80053c2:	bf42      	ittt	mi
 80053c4:	6833      	ldrmi	r3, [r6, #0]
 80053c6:	3302      	addmi	r3, #2
 80053c8:	6033      	strmi	r3, [r6, #0]
 80053ca:	6825      	ldr	r5, [r4, #0]
 80053cc:	f015 0506 	ands.w	r5, r5, #6
 80053d0:	d106      	bne.n	80053e0 <_printf_common+0x48>
 80053d2:	f104 0a19 	add.w	sl, r4, #25
 80053d6:	68e3      	ldr	r3, [r4, #12]
 80053d8:	6832      	ldr	r2, [r6, #0]
 80053da:	1a9b      	subs	r3, r3, r2
 80053dc:	42ab      	cmp	r3, r5
 80053de:	dc26      	bgt.n	800542e <_printf_common+0x96>
 80053e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053e4:	1e13      	subs	r3, r2, #0
 80053e6:	6822      	ldr	r2, [r4, #0]
 80053e8:	bf18      	it	ne
 80053ea:	2301      	movne	r3, #1
 80053ec:	0692      	lsls	r2, r2, #26
 80053ee:	d42b      	bmi.n	8005448 <_printf_common+0xb0>
 80053f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f4:	4649      	mov	r1, r9
 80053f6:	4638      	mov	r0, r7
 80053f8:	47c0      	blx	r8
 80053fa:	3001      	adds	r0, #1
 80053fc:	d01e      	beq.n	800543c <_printf_common+0xa4>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	6922      	ldr	r2, [r4, #16]
 8005402:	f003 0306 	and.w	r3, r3, #6
 8005406:	2b04      	cmp	r3, #4
 8005408:	bf02      	ittt	eq
 800540a:	68e5      	ldreq	r5, [r4, #12]
 800540c:	6833      	ldreq	r3, [r6, #0]
 800540e:	1aed      	subeq	r5, r5, r3
 8005410:	68a3      	ldr	r3, [r4, #8]
 8005412:	bf0c      	ite	eq
 8005414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005418:	2500      	movne	r5, #0
 800541a:	4293      	cmp	r3, r2
 800541c:	bfc4      	itt	gt
 800541e:	1a9b      	subgt	r3, r3, r2
 8005420:	18ed      	addgt	r5, r5, r3
 8005422:	2600      	movs	r6, #0
 8005424:	341a      	adds	r4, #26
 8005426:	42b5      	cmp	r5, r6
 8005428:	d11a      	bne.n	8005460 <_printf_common+0xc8>
 800542a:	2000      	movs	r0, #0
 800542c:	e008      	b.n	8005440 <_printf_common+0xa8>
 800542e:	2301      	movs	r3, #1
 8005430:	4652      	mov	r2, sl
 8005432:	4649      	mov	r1, r9
 8005434:	4638      	mov	r0, r7
 8005436:	47c0      	blx	r8
 8005438:	3001      	adds	r0, #1
 800543a:	d103      	bne.n	8005444 <_printf_common+0xac>
 800543c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005444:	3501      	adds	r5, #1
 8005446:	e7c6      	b.n	80053d6 <_printf_common+0x3e>
 8005448:	18e1      	adds	r1, r4, r3
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	2030      	movs	r0, #48	; 0x30
 800544e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005452:	4422      	add	r2, r4
 8005454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800545c:	3302      	adds	r3, #2
 800545e:	e7c7      	b.n	80053f0 <_printf_common+0x58>
 8005460:	2301      	movs	r3, #1
 8005462:	4622      	mov	r2, r4
 8005464:	4649      	mov	r1, r9
 8005466:	4638      	mov	r0, r7
 8005468:	47c0      	blx	r8
 800546a:	3001      	adds	r0, #1
 800546c:	d0e6      	beq.n	800543c <_printf_common+0xa4>
 800546e:	3601      	adds	r6, #1
 8005470:	e7d9      	b.n	8005426 <_printf_common+0x8e>
	...

08005474 <_printf_i>:
 8005474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005478:	7e0f      	ldrb	r7, [r1, #24]
 800547a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800547c:	2f78      	cmp	r7, #120	; 0x78
 800547e:	4691      	mov	r9, r2
 8005480:	4680      	mov	r8, r0
 8005482:	460c      	mov	r4, r1
 8005484:	469a      	mov	sl, r3
 8005486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800548a:	d807      	bhi.n	800549c <_printf_i+0x28>
 800548c:	2f62      	cmp	r7, #98	; 0x62
 800548e:	d80a      	bhi.n	80054a6 <_printf_i+0x32>
 8005490:	2f00      	cmp	r7, #0
 8005492:	f000 80d4 	beq.w	800563e <_printf_i+0x1ca>
 8005496:	2f58      	cmp	r7, #88	; 0x58
 8005498:	f000 80c0 	beq.w	800561c <_printf_i+0x1a8>
 800549c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054a4:	e03a      	b.n	800551c <_printf_i+0xa8>
 80054a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054aa:	2b15      	cmp	r3, #21
 80054ac:	d8f6      	bhi.n	800549c <_printf_i+0x28>
 80054ae:	a101      	add	r1, pc, #4	; (adr r1, 80054b4 <_printf_i+0x40>)
 80054b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054b4:	0800550d 	.word	0x0800550d
 80054b8:	08005521 	.word	0x08005521
 80054bc:	0800549d 	.word	0x0800549d
 80054c0:	0800549d 	.word	0x0800549d
 80054c4:	0800549d 	.word	0x0800549d
 80054c8:	0800549d 	.word	0x0800549d
 80054cc:	08005521 	.word	0x08005521
 80054d0:	0800549d 	.word	0x0800549d
 80054d4:	0800549d 	.word	0x0800549d
 80054d8:	0800549d 	.word	0x0800549d
 80054dc:	0800549d 	.word	0x0800549d
 80054e0:	08005625 	.word	0x08005625
 80054e4:	0800554d 	.word	0x0800554d
 80054e8:	080055df 	.word	0x080055df
 80054ec:	0800549d 	.word	0x0800549d
 80054f0:	0800549d 	.word	0x0800549d
 80054f4:	08005647 	.word	0x08005647
 80054f8:	0800549d 	.word	0x0800549d
 80054fc:	0800554d 	.word	0x0800554d
 8005500:	0800549d 	.word	0x0800549d
 8005504:	0800549d 	.word	0x0800549d
 8005508:	080055e7 	.word	0x080055e7
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	1d1a      	adds	r2, r3, #4
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	602a      	str	r2, [r5, #0]
 8005514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800551c:	2301      	movs	r3, #1
 800551e:	e09f      	b.n	8005660 <_printf_i+0x1ec>
 8005520:	6820      	ldr	r0, [r4, #0]
 8005522:	682b      	ldr	r3, [r5, #0]
 8005524:	0607      	lsls	r7, r0, #24
 8005526:	f103 0104 	add.w	r1, r3, #4
 800552a:	6029      	str	r1, [r5, #0]
 800552c:	d501      	bpl.n	8005532 <_printf_i+0xbe>
 800552e:	681e      	ldr	r6, [r3, #0]
 8005530:	e003      	b.n	800553a <_printf_i+0xc6>
 8005532:	0646      	lsls	r6, r0, #25
 8005534:	d5fb      	bpl.n	800552e <_printf_i+0xba>
 8005536:	f9b3 6000 	ldrsh.w	r6, [r3]
 800553a:	2e00      	cmp	r6, #0
 800553c:	da03      	bge.n	8005546 <_printf_i+0xd2>
 800553e:	232d      	movs	r3, #45	; 0x2d
 8005540:	4276      	negs	r6, r6
 8005542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005546:	485a      	ldr	r0, [pc, #360]	; (80056b0 <_printf_i+0x23c>)
 8005548:	230a      	movs	r3, #10
 800554a:	e012      	b.n	8005572 <_printf_i+0xfe>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	1d19      	adds	r1, r3, #4
 8005552:	6029      	str	r1, [r5, #0]
 8005554:	0605      	lsls	r5, r0, #24
 8005556:	d501      	bpl.n	800555c <_printf_i+0xe8>
 8005558:	681e      	ldr	r6, [r3, #0]
 800555a:	e002      	b.n	8005562 <_printf_i+0xee>
 800555c:	0641      	lsls	r1, r0, #25
 800555e:	d5fb      	bpl.n	8005558 <_printf_i+0xe4>
 8005560:	881e      	ldrh	r6, [r3, #0]
 8005562:	4853      	ldr	r0, [pc, #332]	; (80056b0 <_printf_i+0x23c>)
 8005564:	2f6f      	cmp	r7, #111	; 0x6f
 8005566:	bf0c      	ite	eq
 8005568:	2308      	moveq	r3, #8
 800556a:	230a      	movne	r3, #10
 800556c:	2100      	movs	r1, #0
 800556e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005572:	6865      	ldr	r5, [r4, #4]
 8005574:	60a5      	str	r5, [r4, #8]
 8005576:	2d00      	cmp	r5, #0
 8005578:	bfa2      	ittt	ge
 800557a:	6821      	ldrge	r1, [r4, #0]
 800557c:	f021 0104 	bicge.w	r1, r1, #4
 8005580:	6021      	strge	r1, [r4, #0]
 8005582:	b90e      	cbnz	r6, 8005588 <_printf_i+0x114>
 8005584:	2d00      	cmp	r5, #0
 8005586:	d04b      	beq.n	8005620 <_printf_i+0x1ac>
 8005588:	4615      	mov	r5, r2
 800558a:	fbb6 f1f3 	udiv	r1, r6, r3
 800558e:	fb03 6711 	mls	r7, r3, r1, r6
 8005592:	5dc7      	ldrb	r7, [r0, r7]
 8005594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005598:	4637      	mov	r7, r6
 800559a:	42bb      	cmp	r3, r7
 800559c:	460e      	mov	r6, r1
 800559e:	d9f4      	bls.n	800558a <_printf_i+0x116>
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d10b      	bne.n	80055bc <_printf_i+0x148>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	07de      	lsls	r6, r3, #31
 80055a8:	d508      	bpl.n	80055bc <_printf_i+0x148>
 80055aa:	6923      	ldr	r3, [r4, #16]
 80055ac:	6861      	ldr	r1, [r4, #4]
 80055ae:	4299      	cmp	r1, r3
 80055b0:	bfde      	ittt	le
 80055b2:	2330      	movle	r3, #48	; 0x30
 80055b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80055bc:	1b52      	subs	r2, r2, r5
 80055be:	6122      	str	r2, [r4, #16]
 80055c0:	f8cd a000 	str.w	sl, [sp]
 80055c4:	464b      	mov	r3, r9
 80055c6:	aa03      	add	r2, sp, #12
 80055c8:	4621      	mov	r1, r4
 80055ca:	4640      	mov	r0, r8
 80055cc:	f7ff fee4 	bl	8005398 <_printf_common>
 80055d0:	3001      	adds	r0, #1
 80055d2:	d14a      	bne.n	800566a <_printf_i+0x1f6>
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055d8:	b004      	add	sp, #16
 80055da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	f043 0320 	orr.w	r3, r3, #32
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	4833      	ldr	r0, [pc, #204]	; (80056b4 <_printf_i+0x240>)
 80055e8:	2778      	movs	r7, #120	; 0x78
 80055ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	6829      	ldr	r1, [r5, #0]
 80055f2:	061f      	lsls	r7, r3, #24
 80055f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80055f8:	d402      	bmi.n	8005600 <_printf_i+0x18c>
 80055fa:	065f      	lsls	r7, r3, #25
 80055fc:	bf48      	it	mi
 80055fe:	b2b6      	uxthmi	r6, r6
 8005600:	07df      	lsls	r7, r3, #31
 8005602:	bf48      	it	mi
 8005604:	f043 0320 	orrmi.w	r3, r3, #32
 8005608:	6029      	str	r1, [r5, #0]
 800560a:	bf48      	it	mi
 800560c:	6023      	strmi	r3, [r4, #0]
 800560e:	b91e      	cbnz	r6, 8005618 <_printf_i+0x1a4>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	f023 0320 	bic.w	r3, r3, #32
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	2310      	movs	r3, #16
 800561a:	e7a7      	b.n	800556c <_printf_i+0xf8>
 800561c:	4824      	ldr	r0, [pc, #144]	; (80056b0 <_printf_i+0x23c>)
 800561e:	e7e4      	b.n	80055ea <_printf_i+0x176>
 8005620:	4615      	mov	r5, r2
 8005622:	e7bd      	b.n	80055a0 <_printf_i+0x12c>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	6826      	ldr	r6, [r4, #0]
 8005628:	6961      	ldr	r1, [r4, #20]
 800562a:	1d18      	adds	r0, r3, #4
 800562c:	6028      	str	r0, [r5, #0]
 800562e:	0635      	lsls	r5, r6, #24
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	d501      	bpl.n	8005638 <_printf_i+0x1c4>
 8005634:	6019      	str	r1, [r3, #0]
 8005636:	e002      	b.n	800563e <_printf_i+0x1ca>
 8005638:	0670      	lsls	r0, r6, #25
 800563a:	d5fb      	bpl.n	8005634 <_printf_i+0x1c0>
 800563c:	8019      	strh	r1, [r3, #0]
 800563e:	2300      	movs	r3, #0
 8005640:	6123      	str	r3, [r4, #16]
 8005642:	4615      	mov	r5, r2
 8005644:	e7bc      	b.n	80055c0 <_printf_i+0x14c>
 8005646:	682b      	ldr	r3, [r5, #0]
 8005648:	1d1a      	adds	r2, r3, #4
 800564a:	602a      	str	r2, [r5, #0]
 800564c:	681d      	ldr	r5, [r3, #0]
 800564e:	6862      	ldr	r2, [r4, #4]
 8005650:	2100      	movs	r1, #0
 8005652:	4628      	mov	r0, r5
 8005654:	f7fa fdbc 	bl	80001d0 <memchr>
 8005658:	b108      	cbz	r0, 800565e <_printf_i+0x1ea>
 800565a:	1b40      	subs	r0, r0, r5
 800565c:	6060      	str	r0, [r4, #4]
 800565e:	6863      	ldr	r3, [r4, #4]
 8005660:	6123      	str	r3, [r4, #16]
 8005662:	2300      	movs	r3, #0
 8005664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005668:	e7aa      	b.n	80055c0 <_printf_i+0x14c>
 800566a:	6923      	ldr	r3, [r4, #16]
 800566c:	462a      	mov	r2, r5
 800566e:	4649      	mov	r1, r9
 8005670:	4640      	mov	r0, r8
 8005672:	47d0      	blx	sl
 8005674:	3001      	adds	r0, #1
 8005676:	d0ad      	beq.n	80055d4 <_printf_i+0x160>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	079b      	lsls	r3, r3, #30
 800567c:	d413      	bmi.n	80056a6 <_printf_i+0x232>
 800567e:	68e0      	ldr	r0, [r4, #12]
 8005680:	9b03      	ldr	r3, [sp, #12]
 8005682:	4298      	cmp	r0, r3
 8005684:	bfb8      	it	lt
 8005686:	4618      	movlt	r0, r3
 8005688:	e7a6      	b.n	80055d8 <_printf_i+0x164>
 800568a:	2301      	movs	r3, #1
 800568c:	4632      	mov	r2, r6
 800568e:	4649      	mov	r1, r9
 8005690:	4640      	mov	r0, r8
 8005692:	47d0      	blx	sl
 8005694:	3001      	adds	r0, #1
 8005696:	d09d      	beq.n	80055d4 <_printf_i+0x160>
 8005698:	3501      	adds	r5, #1
 800569a:	68e3      	ldr	r3, [r4, #12]
 800569c:	9903      	ldr	r1, [sp, #12]
 800569e:	1a5b      	subs	r3, r3, r1
 80056a0:	42ab      	cmp	r3, r5
 80056a2:	dcf2      	bgt.n	800568a <_printf_i+0x216>
 80056a4:	e7eb      	b.n	800567e <_printf_i+0x20a>
 80056a6:	2500      	movs	r5, #0
 80056a8:	f104 0619 	add.w	r6, r4, #25
 80056ac:	e7f5      	b.n	800569a <_printf_i+0x226>
 80056ae:	bf00      	nop
 80056b0:	0800819e 	.word	0x0800819e
 80056b4:	080081af 	.word	0x080081af

080056b8 <__sflush_r>:
 80056b8:	898a      	ldrh	r2, [r1, #12]
 80056ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056be:	4605      	mov	r5, r0
 80056c0:	0710      	lsls	r0, r2, #28
 80056c2:	460c      	mov	r4, r1
 80056c4:	d458      	bmi.n	8005778 <__sflush_r+0xc0>
 80056c6:	684b      	ldr	r3, [r1, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	dc05      	bgt.n	80056d8 <__sflush_r+0x20>
 80056cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	dc02      	bgt.n	80056d8 <__sflush_r+0x20>
 80056d2:	2000      	movs	r0, #0
 80056d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056da:	2e00      	cmp	r6, #0
 80056dc:	d0f9      	beq.n	80056d2 <__sflush_r+0x1a>
 80056de:	2300      	movs	r3, #0
 80056e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056e4:	682f      	ldr	r7, [r5, #0]
 80056e6:	6a21      	ldr	r1, [r4, #32]
 80056e8:	602b      	str	r3, [r5, #0]
 80056ea:	d032      	beq.n	8005752 <__sflush_r+0x9a>
 80056ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056ee:	89a3      	ldrh	r3, [r4, #12]
 80056f0:	075a      	lsls	r2, r3, #29
 80056f2:	d505      	bpl.n	8005700 <__sflush_r+0x48>
 80056f4:	6863      	ldr	r3, [r4, #4]
 80056f6:	1ac0      	subs	r0, r0, r3
 80056f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056fa:	b10b      	cbz	r3, 8005700 <__sflush_r+0x48>
 80056fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056fe:	1ac0      	subs	r0, r0, r3
 8005700:	2300      	movs	r3, #0
 8005702:	4602      	mov	r2, r0
 8005704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005706:	6a21      	ldr	r1, [r4, #32]
 8005708:	4628      	mov	r0, r5
 800570a:	47b0      	blx	r6
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	d106      	bne.n	8005720 <__sflush_r+0x68>
 8005712:	6829      	ldr	r1, [r5, #0]
 8005714:	291d      	cmp	r1, #29
 8005716:	d82b      	bhi.n	8005770 <__sflush_r+0xb8>
 8005718:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <__sflush_r+0x108>)
 800571a:	410a      	asrs	r2, r1
 800571c:	07d6      	lsls	r6, r2, #31
 800571e:	d427      	bmi.n	8005770 <__sflush_r+0xb8>
 8005720:	2200      	movs	r2, #0
 8005722:	6062      	str	r2, [r4, #4]
 8005724:	04d9      	lsls	r1, r3, #19
 8005726:	6922      	ldr	r2, [r4, #16]
 8005728:	6022      	str	r2, [r4, #0]
 800572a:	d504      	bpl.n	8005736 <__sflush_r+0x7e>
 800572c:	1c42      	adds	r2, r0, #1
 800572e:	d101      	bne.n	8005734 <__sflush_r+0x7c>
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	b903      	cbnz	r3, 8005736 <__sflush_r+0x7e>
 8005734:	6560      	str	r0, [r4, #84]	; 0x54
 8005736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005738:	602f      	str	r7, [r5, #0]
 800573a:	2900      	cmp	r1, #0
 800573c:	d0c9      	beq.n	80056d2 <__sflush_r+0x1a>
 800573e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005742:	4299      	cmp	r1, r3
 8005744:	d002      	beq.n	800574c <__sflush_r+0x94>
 8005746:	4628      	mov	r0, r5
 8005748:	f001 f9cc 	bl	8006ae4 <_free_r>
 800574c:	2000      	movs	r0, #0
 800574e:	6360      	str	r0, [r4, #52]	; 0x34
 8005750:	e7c0      	b.n	80056d4 <__sflush_r+0x1c>
 8005752:	2301      	movs	r3, #1
 8005754:	4628      	mov	r0, r5
 8005756:	47b0      	blx	r6
 8005758:	1c41      	adds	r1, r0, #1
 800575a:	d1c8      	bne.n	80056ee <__sflush_r+0x36>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0c5      	beq.n	80056ee <__sflush_r+0x36>
 8005762:	2b1d      	cmp	r3, #29
 8005764:	d001      	beq.n	800576a <__sflush_r+0xb2>
 8005766:	2b16      	cmp	r3, #22
 8005768:	d101      	bne.n	800576e <__sflush_r+0xb6>
 800576a:	602f      	str	r7, [r5, #0]
 800576c:	e7b1      	b.n	80056d2 <__sflush_r+0x1a>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005774:	81a3      	strh	r3, [r4, #12]
 8005776:	e7ad      	b.n	80056d4 <__sflush_r+0x1c>
 8005778:	690f      	ldr	r7, [r1, #16]
 800577a:	2f00      	cmp	r7, #0
 800577c:	d0a9      	beq.n	80056d2 <__sflush_r+0x1a>
 800577e:	0793      	lsls	r3, r2, #30
 8005780:	680e      	ldr	r6, [r1, #0]
 8005782:	bf08      	it	eq
 8005784:	694b      	ldreq	r3, [r1, #20]
 8005786:	600f      	str	r7, [r1, #0]
 8005788:	bf18      	it	ne
 800578a:	2300      	movne	r3, #0
 800578c:	eba6 0807 	sub.w	r8, r6, r7
 8005790:	608b      	str	r3, [r1, #8]
 8005792:	f1b8 0f00 	cmp.w	r8, #0
 8005796:	dd9c      	ble.n	80056d2 <__sflush_r+0x1a>
 8005798:	6a21      	ldr	r1, [r4, #32]
 800579a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800579c:	4643      	mov	r3, r8
 800579e:	463a      	mov	r2, r7
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b0      	blx	r6
 80057a4:	2800      	cmp	r0, #0
 80057a6:	dc06      	bgt.n	80057b6 <__sflush_r+0xfe>
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ae:	81a3      	strh	r3, [r4, #12]
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057b4:	e78e      	b.n	80056d4 <__sflush_r+0x1c>
 80057b6:	4407      	add	r7, r0
 80057b8:	eba8 0800 	sub.w	r8, r8, r0
 80057bc:	e7e9      	b.n	8005792 <__sflush_r+0xda>
 80057be:	bf00      	nop
 80057c0:	dfbffffe 	.word	0xdfbffffe

080057c4 <_fflush_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	690b      	ldr	r3, [r1, #16]
 80057c8:	4605      	mov	r5, r0
 80057ca:	460c      	mov	r4, r1
 80057cc:	b913      	cbnz	r3, 80057d4 <_fflush_r+0x10>
 80057ce:	2500      	movs	r5, #0
 80057d0:	4628      	mov	r0, r5
 80057d2:	bd38      	pop	{r3, r4, r5, pc}
 80057d4:	b118      	cbz	r0, 80057de <_fflush_r+0x1a>
 80057d6:	6a03      	ldr	r3, [r0, #32]
 80057d8:	b90b      	cbnz	r3, 80057de <_fflush_r+0x1a>
 80057da:	f000 f8a7 	bl	800592c <__sinit>
 80057de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f3      	beq.n	80057ce <_fflush_r+0xa>
 80057e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80057e8:	07d0      	lsls	r0, r2, #31
 80057ea:	d404      	bmi.n	80057f6 <_fflush_r+0x32>
 80057ec:	0599      	lsls	r1, r3, #22
 80057ee:	d402      	bmi.n	80057f6 <_fflush_r+0x32>
 80057f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057f2:	f000 faea 	bl	8005dca <__retarget_lock_acquire_recursive>
 80057f6:	4628      	mov	r0, r5
 80057f8:	4621      	mov	r1, r4
 80057fa:	f7ff ff5d 	bl	80056b8 <__sflush_r>
 80057fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005800:	07da      	lsls	r2, r3, #31
 8005802:	4605      	mov	r5, r0
 8005804:	d4e4      	bmi.n	80057d0 <_fflush_r+0xc>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	059b      	lsls	r3, r3, #22
 800580a:	d4e1      	bmi.n	80057d0 <_fflush_r+0xc>
 800580c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800580e:	f000 fadd 	bl	8005dcc <__retarget_lock_release_recursive>
 8005812:	e7dd      	b.n	80057d0 <_fflush_r+0xc>

08005814 <std>:
 8005814:	2300      	movs	r3, #0
 8005816:	b510      	push	{r4, lr}
 8005818:	4604      	mov	r4, r0
 800581a:	e9c0 3300 	strd	r3, r3, [r0]
 800581e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005822:	6083      	str	r3, [r0, #8]
 8005824:	8181      	strh	r1, [r0, #12]
 8005826:	6643      	str	r3, [r0, #100]	; 0x64
 8005828:	81c2      	strh	r2, [r0, #14]
 800582a:	6183      	str	r3, [r0, #24]
 800582c:	4619      	mov	r1, r3
 800582e:	2208      	movs	r2, #8
 8005830:	305c      	adds	r0, #92	; 0x5c
 8005832:	f000 f9f7 	bl	8005c24 <memset>
 8005836:	4b0d      	ldr	r3, [pc, #52]	; (800586c <std+0x58>)
 8005838:	6263      	str	r3, [r4, #36]	; 0x24
 800583a:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <std+0x5c>)
 800583c:	62a3      	str	r3, [r4, #40]	; 0x28
 800583e:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <std+0x60>)
 8005840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005842:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <std+0x64>)
 8005844:	6323      	str	r3, [r4, #48]	; 0x30
 8005846:	4b0d      	ldr	r3, [pc, #52]	; (800587c <std+0x68>)
 8005848:	6224      	str	r4, [r4, #32]
 800584a:	429c      	cmp	r4, r3
 800584c:	d006      	beq.n	800585c <std+0x48>
 800584e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005852:	4294      	cmp	r4, r2
 8005854:	d002      	beq.n	800585c <std+0x48>
 8005856:	33d0      	adds	r3, #208	; 0xd0
 8005858:	429c      	cmp	r4, r3
 800585a:	d105      	bne.n	8005868 <std+0x54>
 800585c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005864:	f000 bab0 	b.w	8005dc8 <__retarget_lock_init_recursive>
 8005868:	bd10      	pop	{r4, pc}
 800586a:	bf00      	nop
 800586c:	08005a75 	.word	0x08005a75
 8005870:	08005a97 	.word	0x08005a97
 8005874:	08005acf 	.word	0x08005acf
 8005878:	08005af3 	.word	0x08005af3
 800587c:	20004364 	.word	0x20004364

08005880 <stdio_exit_handler>:
 8005880:	4a02      	ldr	r2, [pc, #8]	; (800588c <stdio_exit_handler+0xc>)
 8005882:	4903      	ldr	r1, [pc, #12]	; (8005890 <stdio_exit_handler+0x10>)
 8005884:	4803      	ldr	r0, [pc, #12]	; (8005894 <stdio_exit_handler+0x14>)
 8005886:	f000 b869 	b.w	800595c <_fwalk_sglue>
 800588a:	bf00      	nop
 800588c:	20000010 	.word	0x20000010
 8005890:	080057c5 	.word	0x080057c5
 8005894:	2000001c 	.word	0x2000001c

08005898 <cleanup_stdio>:
 8005898:	6841      	ldr	r1, [r0, #4]
 800589a:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <cleanup_stdio+0x34>)
 800589c:	4299      	cmp	r1, r3
 800589e:	b510      	push	{r4, lr}
 80058a0:	4604      	mov	r4, r0
 80058a2:	d001      	beq.n	80058a8 <cleanup_stdio+0x10>
 80058a4:	f7ff ff8e 	bl	80057c4 <_fflush_r>
 80058a8:	68a1      	ldr	r1, [r4, #8]
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <cleanup_stdio+0x38>)
 80058ac:	4299      	cmp	r1, r3
 80058ae:	d002      	beq.n	80058b6 <cleanup_stdio+0x1e>
 80058b0:	4620      	mov	r0, r4
 80058b2:	f7ff ff87 	bl	80057c4 <_fflush_r>
 80058b6:	68e1      	ldr	r1, [r4, #12]
 80058b8:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <cleanup_stdio+0x3c>)
 80058ba:	4299      	cmp	r1, r3
 80058bc:	d004      	beq.n	80058c8 <cleanup_stdio+0x30>
 80058be:	4620      	mov	r0, r4
 80058c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c4:	f7ff bf7e 	b.w	80057c4 <_fflush_r>
 80058c8:	bd10      	pop	{r4, pc}
 80058ca:	bf00      	nop
 80058cc:	20004364 	.word	0x20004364
 80058d0:	200043cc 	.word	0x200043cc
 80058d4:	20004434 	.word	0x20004434

080058d8 <global_stdio_init.part.0>:
 80058d8:	b510      	push	{r4, lr}
 80058da:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <global_stdio_init.part.0+0x30>)
 80058dc:	4c0b      	ldr	r4, [pc, #44]	; (800590c <global_stdio_init.part.0+0x34>)
 80058de:	4a0c      	ldr	r2, [pc, #48]	; (8005910 <global_stdio_init.part.0+0x38>)
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	4620      	mov	r0, r4
 80058e4:	2200      	movs	r2, #0
 80058e6:	2104      	movs	r1, #4
 80058e8:	f7ff ff94 	bl	8005814 <std>
 80058ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80058f0:	2201      	movs	r2, #1
 80058f2:	2109      	movs	r1, #9
 80058f4:	f7ff ff8e 	bl	8005814 <std>
 80058f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80058fc:	2202      	movs	r2, #2
 80058fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005902:	2112      	movs	r1, #18
 8005904:	f7ff bf86 	b.w	8005814 <std>
 8005908:	2000449c 	.word	0x2000449c
 800590c:	20004364 	.word	0x20004364
 8005910:	08005881 	.word	0x08005881

08005914 <__sfp_lock_acquire>:
 8005914:	4801      	ldr	r0, [pc, #4]	; (800591c <__sfp_lock_acquire+0x8>)
 8005916:	f000 ba58 	b.w	8005dca <__retarget_lock_acquire_recursive>
 800591a:	bf00      	nop
 800591c:	200044a5 	.word	0x200044a5

08005920 <__sfp_lock_release>:
 8005920:	4801      	ldr	r0, [pc, #4]	; (8005928 <__sfp_lock_release+0x8>)
 8005922:	f000 ba53 	b.w	8005dcc <__retarget_lock_release_recursive>
 8005926:	bf00      	nop
 8005928:	200044a5 	.word	0x200044a5

0800592c <__sinit>:
 800592c:	b510      	push	{r4, lr}
 800592e:	4604      	mov	r4, r0
 8005930:	f7ff fff0 	bl	8005914 <__sfp_lock_acquire>
 8005934:	6a23      	ldr	r3, [r4, #32]
 8005936:	b11b      	cbz	r3, 8005940 <__sinit+0x14>
 8005938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800593c:	f7ff bff0 	b.w	8005920 <__sfp_lock_release>
 8005940:	4b04      	ldr	r3, [pc, #16]	; (8005954 <__sinit+0x28>)
 8005942:	6223      	str	r3, [r4, #32]
 8005944:	4b04      	ldr	r3, [pc, #16]	; (8005958 <__sinit+0x2c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1f5      	bne.n	8005938 <__sinit+0xc>
 800594c:	f7ff ffc4 	bl	80058d8 <global_stdio_init.part.0>
 8005950:	e7f2      	b.n	8005938 <__sinit+0xc>
 8005952:	bf00      	nop
 8005954:	08005899 	.word	0x08005899
 8005958:	2000449c 	.word	0x2000449c

0800595c <_fwalk_sglue>:
 800595c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005960:	4607      	mov	r7, r0
 8005962:	4688      	mov	r8, r1
 8005964:	4614      	mov	r4, r2
 8005966:	2600      	movs	r6, #0
 8005968:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800596c:	f1b9 0901 	subs.w	r9, r9, #1
 8005970:	d505      	bpl.n	800597e <_fwalk_sglue+0x22>
 8005972:	6824      	ldr	r4, [r4, #0]
 8005974:	2c00      	cmp	r4, #0
 8005976:	d1f7      	bne.n	8005968 <_fwalk_sglue+0xc>
 8005978:	4630      	mov	r0, r6
 800597a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597e:	89ab      	ldrh	r3, [r5, #12]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d907      	bls.n	8005994 <_fwalk_sglue+0x38>
 8005984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005988:	3301      	adds	r3, #1
 800598a:	d003      	beq.n	8005994 <_fwalk_sglue+0x38>
 800598c:	4629      	mov	r1, r5
 800598e:	4638      	mov	r0, r7
 8005990:	47c0      	blx	r8
 8005992:	4306      	orrs	r6, r0
 8005994:	3568      	adds	r5, #104	; 0x68
 8005996:	e7e9      	b.n	800596c <_fwalk_sglue+0x10>

08005998 <iprintf>:
 8005998:	b40f      	push	{r0, r1, r2, r3}
 800599a:	b507      	push	{r0, r1, r2, lr}
 800599c:	4906      	ldr	r1, [pc, #24]	; (80059b8 <iprintf+0x20>)
 800599e:	ab04      	add	r3, sp, #16
 80059a0:	6808      	ldr	r0, [r1, #0]
 80059a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a6:	6881      	ldr	r1, [r0, #8]
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	f001 fd41 	bl	8007430 <_vfiprintf_r>
 80059ae:	b003      	add	sp, #12
 80059b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80059b4:	b004      	add	sp, #16
 80059b6:	4770      	bx	lr
 80059b8:	20000068 	.word	0x20000068

080059bc <_puts_r>:
 80059bc:	6a03      	ldr	r3, [r0, #32]
 80059be:	b570      	push	{r4, r5, r6, lr}
 80059c0:	6884      	ldr	r4, [r0, #8]
 80059c2:	4605      	mov	r5, r0
 80059c4:	460e      	mov	r6, r1
 80059c6:	b90b      	cbnz	r3, 80059cc <_puts_r+0x10>
 80059c8:	f7ff ffb0 	bl	800592c <__sinit>
 80059cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059ce:	07db      	lsls	r3, r3, #31
 80059d0:	d405      	bmi.n	80059de <_puts_r+0x22>
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	0598      	lsls	r0, r3, #22
 80059d6:	d402      	bmi.n	80059de <_puts_r+0x22>
 80059d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059da:	f000 f9f6 	bl	8005dca <__retarget_lock_acquire_recursive>
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	0719      	lsls	r1, r3, #28
 80059e2:	d513      	bpl.n	8005a0c <_puts_r+0x50>
 80059e4:	6923      	ldr	r3, [r4, #16]
 80059e6:	b18b      	cbz	r3, 8005a0c <_puts_r+0x50>
 80059e8:	3e01      	subs	r6, #1
 80059ea:	68a3      	ldr	r3, [r4, #8]
 80059ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059f0:	3b01      	subs	r3, #1
 80059f2:	60a3      	str	r3, [r4, #8]
 80059f4:	b9e9      	cbnz	r1, 8005a32 <_puts_r+0x76>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	da2e      	bge.n	8005a58 <_puts_r+0x9c>
 80059fa:	4622      	mov	r2, r4
 80059fc:	210a      	movs	r1, #10
 80059fe:	4628      	mov	r0, r5
 8005a00:	f000 f87b 	bl	8005afa <__swbuf_r>
 8005a04:	3001      	adds	r0, #1
 8005a06:	d007      	beq.n	8005a18 <_puts_r+0x5c>
 8005a08:	250a      	movs	r5, #10
 8005a0a:	e007      	b.n	8005a1c <_puts_r+0x60>
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 f8b0 	bl	8005b74 <__swsetup_r>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d0e7      	beq.n	80059e8 <_puts_r+0x2c>
 8005a18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005a1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a1e:	07da      	lsls	r2, r3, #31
 8005a20:	d405      	bmi.n	8005a2e <_puts_r+0x72>
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	059b      	lsls	r3, r3, #22
 8005a26:	d402      	bmi.n	8005a2e <_puts_r+0x72>
 8005a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a2a:	f000 f9cf 	bl	8005dcc <__retarget_lock_release_recursive>
 8005a2e:	4628      	mov	r0, r5
 8005a30:	bd70      	pop	{r4, r5, r6, pc}
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	da04      	bge.n	8005a40 <_puts_r+0x84>
 8005a36:	69a2      	ldr	r2, [r4, #24]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	dc06      	bgt.n	8005a4a <_puts_r+0x8e>
 8005a3c:	290a      	cmp	r1, #10
 8005a3e:	d004      	beq.n	8005a4a <_puts_r+0x8e>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	6022      	str	r2, [r4, #0]
 8005a46:	7019      	strb	r1, [r3, #0]
 8005a48:	e7cf      	b.n	80059ea <_puts_r+0x2e>
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f000 f854 	bl	8005afa <__swbuf_r>
 8005a52:	3001      	adds	r0, #1
 8005a54:	d1c9      	bne.n	80059ea <_puts_r+0x2e>
 8005a56:	e7df      	b.n	8005a18 <_puts_r+0x5c>
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	250a      	movs	r5, #10
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	6022      	str	r2, [r4, #0]
 8005a60:	701d      	strb	r5, [r3, #0]
 8005a62:	e7db      	b.n	8005a1c <_puts_r+0x60>

08005a64 <puts>:
 8005a64:	4b02      	ldr	r3, [pc, #8]	; (8005a70 <puts+0xc>)
 8005a66:	4601      	mov	r1, r0
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	f7ff bfa7 	b.w	80059bc <_puts_r>
 8005a6e:	bf00      	nop
 8005a70:	20000068 	.word	0x20000068

08005a74 <__sread>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	460c      	mov	r4, r1
 8005a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7c:	f000 f956 	bl	8005d2c <_read_r>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	bfab      	itete	ge
 8005a84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a86:	89a3      	ldrhlt	r3, [r4, #12]
 8005a88:	181b      	addge	r3, r3, r0
 8005a8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a8e:	bfac      	ite	ge
 8005a90:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a92:	81a3      	strhlt	r3, [r4, #12]
 8005a94:	bd10      	pop	{r4, pc}

08005a96 <__swrite>:
 8005a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9a:	461f      	mov	r7, r3
 8005a9c:	898b      	ldrh	r3, [r1, #12]
 8005a9e:	05db      	lsls	r3, r3, #23
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	4616      	mov	r6, r2
 8005aa6:	d505      	bpl.n	8005ab4 <__swrite+0x1e>
 8005aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aac:	2302      	movs	r3, #2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f000 f92a 	bl	8005d08 <_lseek_r>
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aca:	f000 b941 	b.w	8005d50 <_write_r>

08005ace <__sseek>:
 8005ace:	b510      	push	{r4, lr}
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad6:	f000 f917 	bl	8005d08 <_lseek_r>
 8005ada:	1c43      	adds	r3, r0, #1
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	bf15      	itete	ne
 8005ae0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aea:	81a3      	strheq	r3, [r4, #12]
 8005aec:	bf18      	it	ne
 8005aee:	81a3      	strhne	r3, [r4, #12]
 8005af0:	bd10      	pop	{r4, pc}

08005af2 <__sclose>:
 8005af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af6:	f000 b8a1 	b.w	8005c3c <_close_r>

08005afa <__swbuf_r>:
 8005afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afc:	460e      	mov	r6, r1
 8005afe:	4614      	mov	r4, r2
 8005b00:	4605      	mov	r5, r0
 8005b02:	b118      	cbz	r0, 8005b0c <__swbuf_r+0x12>
 8005b04:	6a03      	ldr	r3, [r0, #32]
 8005b06:	b90b      	cbnz	r3, 8005b0c <__swbuf_r+0x12>
 8005b08:	f7ff ff10 	bl	800592c <__sinit>
 8005b0c:	69a3      	ldr	r3, [r4, #24]
 8005b0e:	60a3      	str	r3, [r4, #8]
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	071a      	lsls	r2, r3, #28
 8005b14:	d525      	bpl.n	8005b62 <__swbuf_r+0x68>
 8005b16:	6923      	ldr	r3, [r4, #16]
 8005b18:	b31b      	cbz	r3, 8005b62 <__swbuf_r+0x68>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	6922      	ldr	r2, [r4, #16]
 8005b1e:	1a98      	subs	r0, r3, r2
 8005b20:	6963      	ldr	r3, [r4, #20]
 8005b22:	b2f6      	uxtb	r6, r6
 8005b24:	4283      	cmp	r3, r0
 8005b26:	4637      	mov	r7, r6
 8005b28:	dc04      	bgt.n	8005b34 <__swbuf_r+0x3a>
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f7ff fe49 	bl	80057c4 <_fflush_r>
 8005b32:	b9e0      	cbnz	r0, 8005b6e <__swbuf_r+0x74>
 8005b34:	68a3      	ldr	r3, [r4, #8]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	60a3      	str	r3, [r4, #8]
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	6022      	str	r2, [r4, #0]
 8005b40:	701e      	strb	r6, [r3, #0]
 8005b42:	6962      	ldr	r2, [r4, #20]
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d004      	beq.n	8005b54 <__swbuf_r+0x5a>
 8005b4a:	89a3      	ldrh	r3, [r4, #12]
 8005b4c:	07db      	lsls	r3, r3, #31
 8005b4e:	d506      	bpl.n	8005b5e <__swbuf_r+0x64>
 8005b50:	2e0a      	cmp	r6, #10
 8005b52:	d104      	bne.n	8005b5e <__swbuf_r+0x64>
 8005b54:	4621      	mov	r1, r4
 8005b56:	4628      	mov	r0, r5
 8005b58:	f7ff fe34 	bl	80057c4 <_fflush_r>
 8005b5c:	b938      	cbnz	r0, 8005b6e <__swbuf_r+0x74>
 8005b5e:	4638      	mov	r0, r7
 8005b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b62:	4621      	mov	r1, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	f000 f805 	bl	8005b74 <__swsetup_r>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d0d5      	beq.n	8005b1a <__swbuf_r+0x20>
 8005b6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005b72:	e7f4      	b.n	8005b5e <__swbuf_r+0x64>

08005b74 <__swsetup_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4b2a      	ldr	r3, [pc, #168]	; (8005c20 <__swsetup_r+0xac>)
 8005b78:	4605      	mov	r5, r0
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	b118      	cbz	r0, 8005b88 <__swsetup_r+0x14>
 8005b80:	6a03      	ldr	r3, [r0, #32]
 8005b82:	b90b      	cbnz	r3, 8005b88 <__swsetup_r+0x14>
 8005b84:	f7ff fed2 	bl	800592c <__sinit>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b8e:	0718      	lsls	r0, r3, #28
 8005b90:	d422      	bmi.n	8005bd8 <__swsetup_r+0x64>
 8005b92:	06d9      	lsls	r1, r3, #27
 8005b94:	d407      	bmi.n	8005ba6 <__swsetup_r+0x32>
 8005b96:	2309      	movs	r3, #9
 8005b98:	602b      	str	r3, [r5, #0]
 8005b9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b9e:	81a3      	strh	r3, [r4, #12]
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ba4:	e034      	b.n	8005c10 <__swsetup_r+0x9c>
 8005ba6:	0758      	lsls	r0, r3, #29
 8005ba8:	d512      	bpl.n	8005bd0 <__swsetup_r+0x5c>
 8005baa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bac:	b141      	cbz	r1, 8005bc0 <__swsetup_r+0x4c>
 8005bae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bb2:	4299      	cmp	r1, r3
 8005bb4:	d002      	beq.n	8005bbc <__swsetup_r+0x48>
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f000 ff94 	bl	8006ae4 <_free_r>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	6363      	str	r3, [r4, #52]	; 0x34
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bc6:	81a3      	strh	r3, [r4, #12]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	6063      	str	r3, [r4, #4]
 8005bcc:	6923      	ldr	r3, [r4, #16]
 8005bce:	6023      	str	r3, [r4, #0]
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	f043 0308 	orr.w	r3, r3, #8
 8005bd6:	81a3      	strh	r3, [r4, #12]
 8005bd8:	6923      	ldr	r3, [r4, #16]
 8005bda:	b94b      	cbnz	r3, 8005bf0 <__swsetup_r+0x7c>
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be6:	d003      	beq.n	8005bf0 <__swsetup_r+0x7c>
 8005be8:	4621      	mov	r1, r4
 8005bea:	4628      	mov	r0, r5
 8005bec:	f001 fd60 	bl	80076b0 <__smakebuf_r>
 8005bf0:	89a0      	ldrh	r0, [r4, #12]
 8005bf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bf6:	f010 0301 	ands.w	r3, r0, #1
 8005bfa:	d00a      	beq.n	8005c12 <__swsetup_r+0x9e>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60a3      	str	r3, [r4, #8]
 8005c00:	6963      	ldr	r3, [r4, #20]
 8005c02:	425b      	negs	r3, r3
 8005c04:	61a3      	str	r3, [r4, #24]
 8005c06:	6923      	ldr	r3, [r4, #16]
 8005c08:	b943      	cbnz	r3, 8005c1c <__swsetup_r+0xa8>
 8005c0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c0e:	d1c4      	bne.n	8005b9a <__swsetup_r+0x26>
 8005c10:	bd38      	pop	{r3, r4, r5, pc}
 8005c12:	0781      	lsls	r1, r0, #30
 8005c14:	bf58      	it	pl
 8005c16:	6963      	ldrpl	r3, [r4, #20]
 8005c18:	60a3      	str	r3, [r4, #8]
 8005c1a:	e7f4      	b.n	8005c06 <__swsetup_r+0x92>
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	e7f7      	b.n	8005c10 <__swsetup_r+0x9c>
 8005c20:	20000068 	.word	0x20000068

08005c24 <memset>:
 8005c24:	4402      	add	r2, r0
 8005c26:	4603      	mov	r3, r0
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d100      	bne.n	8005c2e <memset+0xa>
 8005c2c:	4770      	bx	lr
 8005c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c32:	e7f9      	b.n	8005c28 <memset+0x4>

08005c34 <_localeconv_r>:
 8005c34:	4800      	ldr	r0, [pc, #0]	; (8005c38 <_localeconv_r+0x4>)
 8005c36:	4770      	bx	lr
 8005c38:	2000015c 	.word	0x2000015c

08005c3c <_close_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4d06      	ldr	r5, [pc, #24]	; (8005c58 <_close_r+0x1c>)
 8005c40:	2300      	movs	r3, #0
 8005c42:	4604      	mov	r4, r0
 8005c44:	4608      	mov	r0, r1
 8005c46:	602b      	str	r3, [r5, #0]
 8005c48:	f7fb fc81 	bl	800154e <_close>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d102      	bne.n	8005c56 <_close_r+0x1a>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	b103      	cbz	r3, 8005c56 <_close_r+0x1a>
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	bd38      	pop	{r3, r4, r5, pc}
 8005c58:	200044a0 	.word	0x200044a0

08005c5c <_reclaim_reent>:
 8005c5c:	4b29      	ldr	r3, [pc, #164]	; (8005d04 <_reclaim_reent+0xa8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4283      	cmp	r3, r0
 8005c62:	b570      	push	{r4, r5, r6, lr}
 8005c64:	4604      	mov	r4, r0
 8005c66:	d04b      	beq.n	8005d00 <_reclaim_reent+0xa4>
 8005c68:	69c3      	ldr	r3, [r0, #28]
 8005c6a:	b143      	cbz	r3, 8005c7e <_reclaim_reent+0x22>
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d144      	bne.n	8005cfc <_reclaim_reent+0xa0>
 8005c72:	69e3      	ldr	r3, [r4, #28]
 8005c74:	6819      	ldr	r1, [r3, #0]
 8005c76:	b111      	cbz	r1, 8005c7e <_reclaim_reent+0x22>
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 ff33 	bl	8006ae4 <_free_r>
 8005c7e:	6961      	ldr	r1, [r4, #20]
 8005c80:	b111      	cbz	r1, 8005c88 <_reclaim_reent+0x2c>
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 ff2e 	bl	8006ae4 <_free_r>
 8005c88:	69e1      	ldr	r1, [r4, #28]
 8005c8a:	b111      	cbz	r1, 8005c92 <_reclaim_reent+0x36>
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f000 ff29 	bl	8006ae4 <_free_r>
 8005c92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005c94:	b111      	cbz	r1, 8005c9c <_reclaim_reent+0x40>
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 ff24 	bl	8006ae4 <_free_r>
 8005c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c9e:	b111      	cbz	r1, 8005ca6 <_reclaim_reent+0x4a>
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 ff1f 	bl	8006ae4 <_free_r>
 8005ca6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005ca8:	b111      	cbz	r1, 8005cb0 <_reclaim_reent+0x54>
 8005caa:	4620      	mov	r0, r4
 8005cac:	f000 ff1a 	bl	8006ae4 <_free_r>
 8005cb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005cb2:	b111      	cbz	r1, 8005cba <_reclaim_reent+0x5e>
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f000 ff15 	bl	8006ae4 <_free_r>
 8005cba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005cbc:	b111      	cbz	r1, 8005cc4 <_reclaim_reent+0x68>
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f000 ff10 	bl	8006ae4 <_free_r>
 8005cc4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005cc6:	b111      	cbz	r1, 8005cce <_reclaim_reent+0x72>
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 ff0b 	bl	8006ae4 <_free_r>
 8005cce:	6a23      	ldr	r3, [r4, #32]
 8005cd0:	b1b3      	cbz	r3, 8005d00 <_reclaim_reent+0xa4>
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005cd8:	4718      	bx	r3
 8005cda:	5949      	ldr	r1, [r1, r5]
 8005cdc:	b941      	cbnz	r1, 8005cf0 <_reclaim_reent+0x94>
 8005cde:	3504      	adds	r5, #4
 8005ce0:	69e3      	ldr	r3, [r4, #28]
 8005ce2:	2d80      	cmp	r5, #128	; 0x80
 8005ce4:	68d9      	ldr	r1, [r3, #12]
 8005ce6:	d1f8      	bne.n	8005cda <_reclaim_reent+0x7e>
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 fefb 	bl	8006ae4 <_free_r>
 8005cee:	e7c0      	b.n	8005c72 <_reclaim_reent+0x16>
 8005cf0:	680e      	ldr	r6, [r1, #0]
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 fef6 	bl	8006ae4 <_free_r>
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	e7ef      	b.n	8005cdc <_reclaim_reent+0x80>
 8005cfc:	2500      	movs	r5, #0
 8005cfe:	e7ef      	b.n	8005ce0 <_reclaim_reent+0x84>
 8005d00:	bd70      	pop	{r4, r5, r6, pc}
 8005d02:	bf00      	nop
 8005d04:	20000068 	.word	0x20000068

08005d08 <_lseek_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d07      	ldr	r5, [pc, #28]	; (8005d28 <_lseek_r+0x20>)
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	4608      	mov	r0, r1
 8005d10:	4611      	mov	r1, r2
 8005d12:	2200      	movs	r2, #0
 8005d14:	602a      	str	r2, [r5, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f7fb fc40 	bl	800159c <_lseek>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_lseek_r+0x1e>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_lseek_r+0x1e>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	200044a0 	.word	0x200044a0

08005d2c <_read_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4d07      	ldr	r5, [pc, #28]	; (8005d4c <_read_r+0x20>)
 8005d30:	4604      	mov	r4, r0
 8005d32:	4608      	mov	r0, r1
 8005d34:	4611      	mov	r1, r2
 8005d36:	2200      	movs	r2, #0
 8005d38:	602a      	str	r2, [r5, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f7fb fbea 	bl	8001514 <_read>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_read_r+0x1e>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_read_r+0x1e>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	200044a0 	.word	0x200044a0

08005d50 <_write_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4d07      	ldr	r5, [pc, #28]	; (8005d70 <_write_r+0x20>)
 8005d54:	4604      	mov	r4, r0
 8005d56:	4608      	mov	r0, r1
 8005d58:	4611      	mov	r1, r2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	602a      	str	r2, [r5, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f7fb f8a0 	bl	8000ea4 <_write>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d102      	bne.n	8005d6e <_write_r+0x1e>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	b103      	cbz	r3, 8005d6e <_write_r+0x1e>
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	200044a0 	.word	0x200044a0

08005d74 <__errno>:
 8005d74:	4b01      	ldr	r3, [pc, #4]	; (8005d7c <__errno+0x8>)
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	20000068 	.word	0x20000068

08005d80 <__libc_init_array>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	4d0d      	ldr	r5, [pc, #52]	; (8005db8 <__libc_init_array+0x38>)
 8005d84:	4c0d      	ldr	r4, [pc, #52]	; (8005dbc <__libc_init_array+0x3c>)
 8005d86:	1b64      	subs	r4, r4, r5
 8005d88:	10a4      	asrs	r4, r4, #2
 8005d8a:	2600      	movs	r6, #0
 8005d8c:	42a6      	cmp	r6, r4
 8005d8e:	d109      	bne.n	8005da4 <__libc_init_array+0x24>
 8005d90:	4d0b      	ldr	r5, [pc, #44]	; (8005dc0 <__libc_init_array+0x40>)
 8005d92:	4c0c      	ldr	r4, [pc, #48]	; (8005dc4 <__libc_init_array+0x44>)
 8005d94:	f001 fdac 	bl	80078f0 <_init>
 8005d98:	1b64      	subs	r4, r4, r5
 8005d9a:	10a4      	asrs	r4, r4, #2
 8005d9c:	2600      	movs	r6, #0
 8005d9e:	42a6      	cmp	r6, r4
 8005da0:	d105      	bne.n	8005dae <__libc_init_array+0x2e>
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da8:	4798      	blx	r3
 8005daa:	3601      	adds	r6, #1
 8005dac:	e7ee      	b.n	8005d8c <__libc_init_array+0xc>
 8005dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db2:	4798      	blx	r3
 8005db4:	3601      	adds	r6, #1
 8005db6:	e7f2      	b.n	8005d9e <__libc_init_array+0x1e>
 8005db8:	08008504 	.word	0x08008504
 8005dbc:	08008504 	.word	0x08008504
 8005dc0:	08008504 	.word	0x08008504
 8005dc4:	08008508 	.word	0x08008508

08005dc8 <__retarget_lock_init_recursive>:
 8005dc8:	4770      	bx	lr

08005dca <__retarget_lock_acquire_recursive>:
 8005dca:	4770      	bx	lr

08005dcc <__retarget_lock_release_recursive>:
 8005dcc:	4770      	bx	lr

08005dce <memcpy>:
 8005dce:	440a      	add	r2, r1
 8005dd0:	4291      	cmp	r1, r2
 8005dd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005dd6:	d100      	bne.n	8005dda <memcpy+0xc>
 8005dd8:	4770      	bx	lr
 8005dda:	b510      	push	{r4, lr}
 8005ddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005de0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005de4:	4291      	cmp	r1, r2
 8005de6:	d1f9      	bne.n	8005ddc <memcpy+0xe>
 8005de8:	bd10      	pop	{r4, pc}

08005dea <quorem>:
 8005dea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dee:	6903      	ldr	r3, [r0, #16]
 8005df0:	690c      	ldr	r4, [r1, #16]
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	4607      	mov	r7, r0
 8005df6:	db7e      	blt.n	8005ef6 <quorem+0x10c>
 8005df8:	3c01      	subs	r4, #1
 8005dfa:	f101 0814 	add.w	r8, r1, #20
 8005dfe:	f100 0514 	add.w	r5, r0, #20
 8005e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e10:	3301      	adds	r3, #1
 8005e12:	429a      	cmp	r2, r3
 8005e14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e20:	d331      	bcc.n	8005e86 <quorem+0x9c>
 8005e22:	f04f 0e00 	mov.w	lr, #0
 8005e26:	4640      	mov	r0, r8
 8005e28:	46ac      	mov	ip, r5
 8005e2a:	46f2      	mov	sl, lr
 8005e2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e30:	b293      	uxth	r3, r2
 8005e32:	fb06 e303 	mla	r3, r6, r3, lr
 8005e36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e3a:	0c1a      	lsrs	r2, r3, #16
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	ebaa 0303 	sub.w	r3, sl, r3
 8005e42:	f8dc a000 	ldr.w	sl, [ip]
 8005e46:	fa13 f38a 	uxtah	r3, r3, sl
 8005e4a:	fb06 220e 	mla	r2, r6, lr, r2
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	9b00      	ldr	r3, [sp, #0]
 8005e52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e56:	b292      	uxth	r2, r2
 8005e58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e60:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e64:	4581      	cmp	r9, r0
 8005e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e6a:	f84c 3b04 	str.w	r3, [ip], #4
 8005e6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e72:	d2db      	bcs.n	8005e2c <quorem+0x42>
 8005e74:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e78:	b92b      	cbnz	r3, 8005e86 <quorem+0x9c>
 8005e7a:	9b01      	ldr	r3, [sp, #4]
 8005e7c:	3b04      	subs	r3, #4
 8005e7e:	429d      	cmp	r5, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	d32c      	bcc.n	8005ede <quorem+0xf4>
 8005e84:	613c      	str	r4, [r7, #16]
 8005e86:	4638      	mov	r0, r7
 8005e88:	f001 f9a8 	bl	80071dc <__mcmp>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	db22      	blt.n	8005ed6 <quorem+0xec>
 8005e90:	3601      	adds	r6, #1
 8005e92:	4629      	mov	r1, r5
 8005e94:	2000      	movs	r0, #0
 8005e96:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e9a:	f8d1 c000 	ldr.w	ip, [r1]
 8005e9e:	b293      	uxth	r3, r2
 8005ea0:	1ac3      	subs	r3, r0, r3
 8005ea2:	0c12      	lsrs	r2, r2, #16
 8005ea4:	fa13 f38c 	uxtah	r3, r3, ip
 8005ea8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005eac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eb6:	45c1      	cmp	r9, r8
 8005eb8:	f841 3b04 	str.w	r3, [r1], #4
 8005ebc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ec0:	d2e9      	bcs.n	8005e96 <quorem+0xac>
 8005ec2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ec6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eca:	b922      	cbnz	r2, 8005ed6 <quorem+0xec>
 8005ecc:	3b04      	subs	r3, #4
 8005ece:	429d      	cmp	r5, r3
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	d30a      	bcc.n	8005eea <quorem+0x100>
 8005ed4:	613c      	str	r4, [r7, #16]
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	b003      	add	sp, #12
 8005eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	3b04      	subs	r3, #4
 8005ee2:	2a00      	cmp	r2, #0
 8005ee4:	d1ce      	bne.n	8005e84 <quorem+0x9a>
 8005ee6:	3c01      	subs	r4, #1
 8005ee8:	e7c9      	b.n	8005e7e <quorem+0x94>
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	3b04      	subs	r3, #4
 8005eee:	2a00      	cmp	r2, #0
 8005ef0:	d1f0      	bne.n	8005ed4 <quorem+0xea>
 8005ef2:	3c01      	subs	r4, #1
 8005ef4:	e7eb      	b.n	8005ece <quorem+0xe4>
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	e7ee      	b.n	8005ed8 <quorem+0xee>
 8005efa:	0000      	movs	r0, r0
 8005efc:	0000      	movs	r0, r0
	...

08005f00 <_dtoa_r>:
 8005f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f04:	ed2d 8b04 	vpush	{d8-d9}
 8005f08:	69c5      	ldr	r5, [r0, #28]
 8005f0a:	b093      	sub	sp, #76	; 0x4c
 8005f0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f10:	ec57 6b10 	vmov	r6, r7, d0
 8005f14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f18:	9107      	str	r1, [sp, #28]
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	920a      	str	r2, [sp, #40]	; 0x28
 8005f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8005f20:	b975      	cbnz	r5, 8005f40 <_dtoa_r+0x40>
 8005f22:	2010      	movs	r0, #16
 8005f24:	f000 fe2a 	bl	8006b7c <malloc>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	61e0      	str	r0, [r4, #28]
 8005f2c:	b920      	cbnz	r0, 8005f38 <_dtoa_r+0x38>
 8005f2e:	4bae      	ldr	r3, [pc, #696]	; (80061e8 <_dtoa_r+0x2e8>)
 8005f30:	21ef      	movs	r1, #239	; 0xef
 8005f32:	48ae      	ldr	r0, [pc, #696]	; (80061ec <_dtoa_r+0x2ec>)
 8005f34:	f001 fc2a 	bl	800778c <__assert_func>
 8005f38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f3c:	6005      	str	r5, [r0, #0]
 8005f3e:	60c5      	str	r5, [r0, #12]
 8005f40:	69e3      	ldr	r3, [r4, #28]
 8005f42:	6819      	ldr	r1, [r3, #0]
 8005f44:	b151      	cbz	r1, 8005f5c <_dtoa_r+0x5c>
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	604a      	str	r2, [r1, #4]
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4093      	lsls	r3, r2
 8005f4e:	608b      	str	r3, [r1, #8]
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 ff07 	bl	8006d64 <_Bfree>
 8005f56:	69e3      	ldr	r3, [r4, #28]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	1e3b      	subs	r3, r7, #0
 8005f5e:	bfbb      	ittet	lt
 8005f60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f64:	9303      	strlt	r3, [sp, #12]
 8005f66:	2300      	movge	r3, #0
 8005f68:	2201      	movlt	r2, #1
 8005f6a:	bfac      	ite	ge
 8005f6c:	f8c8 3000 	strge.w	r3, [r8]
 8005f70:	f8c8 2000 	strlt.w	r2, [r8]
 8005f74:	4b9e      	ldr	r3, [pc, #632]	; (80061f0 <_dtoa_r+0x2f0>)
 8005f76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f7a:	ea33 0308 	bics.w	r3, r3, r8
 8005f7e:	d11b      	bne.n	8005fb8 <_dtoa_r+0xb8>
 8005f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f82:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005f8c:	4333      	orrs	r3, r6
 8005f8e:	f000 8593 	beq.w	8006ab8 <_dtoa_r+0xbb8>
 8005f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f94:	b963      	cbnz	r3, 8005fb0 <_dtoa_r+0xb0>
 8005f96:	4b97      	ldr	r3, [pc, #604]	; (80061f4 <_dtoa_r+0x2f4>)
 8005f98:	e027      	b.n	8005fea <_dtoa_r+0xea>
 8005f9a:	4b97      	ldr	r3, [pc, #604]	; (80061f8 <_dtoa_r+0x2f8>)
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	9800      	ldr	r0, [sp, #0]
 8005fa6:	b013      	add	sp, #76	; 0x4c
 8005fa8:	ecbd 8b04 	vpop	{d8-d9}
 8005fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb0:	4b90      	ldr	r3, [pc, #576]	; (80061f4 <_dtoa_r+0x2f4>)
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	3303      	adds	r3, #3
 8005fb6:	e7f3      	b.n	8005fa0 <_dtoa_r+0xa0>
 8005fb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	ec51 0b17 	vmov	r0, r1, d7
 8005fc2:	eeb0 8a47 	vmov.f32	s16, s14
 8005fc6:	eef0 8a67 	vmov.f32	s17, s15
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f7fa fd7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fd0:	4681      	mov	r9, r0
 8005fd2:	b160      	cbz	r0, 8005fee <_dtoa_r+0xee>
 8005fd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8568 	beq.w	8006ab2 <_dtoa_r+0xbb2>
 8005fe2:	4b86      	ldr	r3, [pc, #536]	; (80061fc <_dtoa_r+0x2fc>)
 8005fe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	e7da      	b.n	8005fa4 <_dtoa_r+0xa4>
 8005fee:	aa10      	add	r2, sp, #64	; 0x40
 8005ff0:	a911      	add	r1, sp, #68	; 0x44
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8005ff8:	eef0 0a68 	vmov.f32	s1, s17
 8005ffc:	f001 f994 	bl	8007328 <__d2b>
 8006000:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006004:	4682      	mov	sl, r0
 8006006:	2d00      	cmp	r5, #0
 8006008:	d07f      	beq.n	800610a <_dtoa_r+0x20a>
 800600a:	ee18 3a90 	vmov	r3, s17
 800600e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006012:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006016:	ec51 0b18 	vmov	r0, r1, d8
 800601a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800601e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006022:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006026:	4619      	mov	r1, r3
 8006028:	2200      	movs	r2, #0
 800602a:	4b75      	ldr	r3, [pc, #468]	; (8006200 <_dtoa_r+0x300>)
 800602c:	f7fa f92c 	bl	8000288 <__aeabi_dsub>
 8006030:	a367      	add	r3, pc, #412	; (adr r3, 80061d0 <_dtoa_r+0x2d0>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f7fa fadf 	bl	80005f8 <__aeabi_dmul>
 800603a:	a367      	add	r3, pc, #412	; (adr r3, 80061d8 <_dtoa_r+0x2d8>)
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f7fa f924 	bl	800028c <__adddf3>
 8006044:	4606      	mov	r6, r0
 8006046:	4628      	mov	r0, r5
 8006048:	460f      	mov	r7, r1
 800604a:	f7fa fa6b 	bl	8000524 <__aeabi_i2d>
 800604e:	a364      	add	r3, pc, #400	; (adr r3, 80061e0 <_dtoa_r+0x2e0>)
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f7fa fad0 	bl	80005f8 <__aeabi_dmul>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4630      	mov	r0, r6
 800605e:	4639      	mov	r1, r7
 8006060:	f7fa f914 	bl	800028c <__adddf3>
 8006064:	4606      	mov	r6, r0
 8006066:	460f      	mov	r7, r1
 8006068:	f7fa fd76 	bl	8000b58 <__aeabi_d2iz>
 800606c:	2200      	movs	r2, #0
 800606e:	4683      	mov	fp, r0
 8006070:	2300      	movs	r3, #0
 8006072:	4630      	mov	r0, r6
 8006074:	4639      	mov	r1, r7
 8006076:	f7fa fd31 	bl	8000adc <__aeabi_dcmplt>
 800607a:	b148      	cbz	r0, 8006090 <_dtoa_r+0x190>
 800607c:	4658      	mov	r0, fp
 800607e:	f7fa fa51 	bl	8000524 <__aeabi_i2d>
 8006082:	4632      	mov	r2, r6
 8006084:	463b      	mov	r3, r7
 8006086:	f7fa fd1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800608a:	b908      	cbnz	r0, 8006090 <_dtoa_r+0x190>
 800608c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006090:	f1bb 0f16 	cmp.w	fp, #22
 8006094:	d857      	bhi.n	8006146 <_dtoa_r+0x246>
 8006096:	4b5b      	ldr	r3, [pc, #364]	; (8006204 <_dtoa_r+0x304>)
 8006098:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	ec51 0b18 	vmov	r0, r1, d8
 80060a4:	f7fa fd1a 	bl	8000adc <__aeabi_dcmplt>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d04e      	beq.n	800614a <_dtoa_r+0x24a>
 80060ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80060b0:	2300      	movs	r3, #0
 80060b2:	930c      	str	r3, [sp, #48]	; 0x30
 80060b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060b6:	1b5b      	subs	r3, r3, r5
 80060b8:	1e5a      	subs	r2, r3, #1
 80060ba:	bf45      	ittet	mi
 80060bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80060c0:	9305      	strmi	r3, [sp, #20]
 80060c2:	2300      	movpl	r3, #0
 80060c4:	2300      	movmi	r3, #0
 80060c6:	9206      	str	r2, [sp, #24]
 80060c8:	bf54      	ite	pl
 80060ca:	9305      	strpl	r3, [sp, #20]
 80060cc:	9306      	strmi	r3, [sp, #24]
 80060ce:	f1bb 0f00 	cmp.w	fp, #0
 80060d2:	db3c      	blt.n	800614e <_dtoa_r+0x24e>
 80060d4:	9b06      	ldr	r3, [sp, #24]
 80060d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80060da:	445b      	add	r3, fp
 80060dc:	9306      	str	r3, [sp, #24]
 80060de:	2300      	movs	r3, #0
 80060e0:	9308      	str	r3, [sp, #32]
 80060e2:	9b07      	ldr	r3, [sp, #28]
 80060e4:	2b09      	cmp	r3, #9
 80060e6:	d868      	bhi.n	80061ba <_dtoa_r+0x2ba>
 80060e8:	2b05      	cmp	r3, #5
 80060ea:	bfc4      	itt	gt
 80060ec:	3b04      	subgt	r3, #4
 80060ee:	9307      	strgt	r3, [sp, #28]
 80060f0:	9b07      	ldr	r3, [sp, #28]
 80060f2:	f1a3 0302 	sub.w	r3, r3, #2
 80060f6:	bfcc      	ite	gt
 80060f8:	2500      	movgt	r5, #0
 80060fa:	2501      	movle	r5, #1
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	f200 8085 	bhi.w	800620c <_dtoa_r+0x30c>
 8006102:	e8df f003 	tbb	[pc, r3]
 8006106:	3b2e      	.short	0x3b2e
 8006108:	5839      	.short	0x5839
 800610a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800610e:	441d      	add	r5, r3
 8006110:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006114:	2b20      	cmp	r3, #32
 8006116:	bfc1      	itttt	gt
 8006118:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800611c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006120:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006124:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006128:	bfd6      	itet	le
 800612a:	f1c3 0320 	rsble	r3, r3, #32
 800612e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006132:	fa06 f003 	lslle.w	r0, r6, r3
 8006136:	f7fa f9e5 	bl	8000504 <__aeabi_ui2d>
 800613a:	2201      	movs	r2, #1
 800613c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006140:	3d01      	subs	r5, #1
 8006142:	920e      	str	r2, [sp, #56]	; 0x38
 8006144:	e76f      	b.n	8006026 <_dtoa_r+0x126>
 8006146:	2301      	movs	r3, #1
 8006148:	e7b3      	b.n	80060b2 <_dtoa_r+0x1b2>
 800614a:	900c      	str	r0, [sp, #48]	; 0x30
 800614c:	e7b2      	b.n	80060b4 <_dtoa_r+0x1b4>
 800614e:	9b05      	ldr	r3, [sp, #20]
 8006150:	eba3 030b 	sub.w	r3, r3, fp
 8006154:	9305      	str	r3, [sp, #20]
 8006156:	f1cb 0300 	rsb	r3, fp, #0
 800615a:	9308      	str	r3, [sp, #32]
 800615c:	2300      	movs	r3, #0
 800615e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006160:	e7bf      	b.n	80060e2 <_dtoa_r+0x1e2>
 8006162:	2300      	movs	r3, #0
 8006164:	9309      	str	r3, [sp, #36]	; 0x24
 8006166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006168:	2b00      	cmp	r3, #0
 800616a:	dc52      	bgt.n	8006212 <_dtoa_r+0x312>
 800616c:	2301      	movs	r3, #1
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	9304      	str	r3, [sp, #16]
 8006172:	461a      	mov	r2, r3
 8006174:	920a      	str	r2, [sp, #40]	; 0x28
 8006176:	e00b      	b.n	8006190 <_dtoa_r+0x290>
 8006178:	2301      	movs	r3, #1
 800617a:	e7f3      	b.n	8006164 <_dtoa_r+0x264>
 800617c:	2300      	movs	r3, #0
 800617e:	9309      	str	r3, [sp, #36]	; 0x24
 8006180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006182:	445b      	add	r3, fp
 8006184:	9301      	str	r3, [sp, #4]
 8006186:	3301      	adds	r3, #1
 8006188:	2b01      	cmp	r3, #1
 800618a:	9304      	str	r3, [sp, #16]
 800618c:	bfb8      	it	lt
 800618e:	2301      	movlt	r3, #1
 8006190:	69e0      	ldr	r0, [r4, #28]
 8006192:	2100      	movs	r1, #0
 8006194:	2204      	movs	r2, #4
 8006196:	f102 0614 	add.w	r6, r2, #20
 800619a:	429e      	cmp	r6, r3
 800619c:	d93d      	bls.n	800621a <_dtoa_r+0x31a>
 800619e:	6041      	str	r1, [r0, #4]
 80061a0:	4620      	mov	r0, r4
 80061a2:	f000 fd9f 	bl	8006ce4 <_Balloc>
 80061a6:	9000      	str	r0, [sp, #0]
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d139      	bne.n	8006220 <_dtoa_r+0x320>
 80061ac:	4b16      	ldr	r3, [pc, #88]	; (8006208 <_dtoa_r+0x308>)
 80061ae:	4602      	mov	r2, r0
 80061b0:	f240 11af 	movw	r1, #431	; 0x1af
 80061b4:	e6bd      	b.n	8005f32 <_dtoa_r+0x32>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e7e1      	b.n	800617e <_dtoa_r+0x27e>
 80061ba:	2501      	movs	r5, #1
 80061bc:	2300      	movs	r3, #0
 80061be:	9307      	str	r3, [sp, #28]
 80061c0:	9509      	str	r5, [sp, #36]	; 0x24
 80061c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	2200      	movs	r2, #0
 80061cc:	2312      	movs	r3, #18
 80061ce:	e7d1      	b.n	8006174 <_dtoa_r+0x274>
 80061d0:	636f4361 	.word	0x636f4361
 80061d4:	3fd287a7 	.word	0x3fd287a7
 80061d8:	8b60c8b3 	.word	0x8b60c8b3
 80061dc:	3fc68a28 	.word	0x3fc68a28
 80061e0:	509f79fb 	.word	0x509f79fb
 80061e4:	3fd34413 	.word	0x3fd34413
 80061e8:	080081cd 	.word	0x080081cd
 80061ec:	080081e4 	.word	0x080081e4
 80061f0:	7ff00000 	.word	0x7ff00000
 80061f4:	080081c9 	.word	0x080081c9
 80061f8:	080081c0 	.word	0x080081c0
 80061fc:	0800819d 	.word	0x0800819d
 8006200:	3ff80000 	.word	0x3ff80000
 8006204:	080082d0 	.word	0x080082d0
 8006208:	0800823c 	.word	0x0800823c
 800620c:	2301      	movs	r3, #1
 800620e:	9309      	str	r3, [sp, #36]	; 0x24
 8006210:	e7d7      	b.n	80061c2 <_dtoa_r+0x2c2>
 8006212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	9304      	str	r3, [sp, #16]
 8006218:	e7ba      	b.n	8006190 <_dtoa_r+0x290>
 800621a:	3101      	adds	r1, #1
 800621c:	0052      	lsls	r2, r2, #1
 800621e:	e7ba      	b.n	8006196 <_dtoa_r+0x296>
 8006220:	69e3      	ldr	r3, [r4, #28]
 8006222:	9a00      	ldr	r2, [sp, #0]
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	9b04      	ldr	r3, [sp, #16]
 8006228:	2b0e      	cmp	r3, #14
 800622a:	f200 80a8 	bhi.w	800637e <_dtoa_r+0x47e>
 800622e:	2d00      	cmp	r5, #0
 8006230:	f000 80a5 	beq.w	800637e <_dtoa_r+0x47e>
 8006234:	f1bb 0f00 	cmp.w	fp, #0
 8006238:	dd38      	ble.n	80062ac <_dtoa_r+0x3ac>
 800623a:	4bc0      	ldr	r3, [pc, #768]	; (800653c <_dtoa_r+0x63c>)
 800623c:	f00b 020f 	and.w	r2, fp, #15
 8006240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006244:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006248:	e9d3 6700 	ldrd	r6, r7, [r3]
 800624c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006250:	d019      	beq.n	8006286 <_dtoa_r+0x386>
 8006252:	4bbb      	ldr	r3, [pc, #748]	; (8006540 <_dtoa_r+0x640>)
 8006254:	ec51 0b18 	vmov	r0, r1, d8
 8006258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800625c:	f7fa faf6 	bl	800084c <__aeabi_ddiv>
 8006260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006264:	f008 080f 	and.w	r8, r8, #15
 8006268:	2503      	movs	r5, #3
 800626a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006540 <_dtoa_r+0x640>
 800626e:	f1b8 0f00 	cmp.w	r8, #0
 8006272:	d10a      	bne.n	800628a <_dtoa_r+0x38a>
 8006274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006278:	4632      	mov	r2, r6
 800627a:	463b      	mov	r3, r7
 800627c:	f7fa fae6 	bl	800084c <__aeabi_ddiv>
 8006280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006284:	e02b      	b.n	80062de <_dtoa_r+0x3de>
 8006286:	2502      	movs	r5, #2
 8006288:	e7ef      	b.n	800626a <_dtoa_r+0x36a>
 800628a:	f018 0f01 	tst.w	r8, #1
 800628e:	d008      	beq.n	80062a2 <_dtoa_r+0x3a2>
 8006290:	4630      	mov	r0, r6
 8006292:	4639      	mov	r1, r7
 8006294:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006298:	f7fa f9ae 	bl	80005f8 <__aeabi_dmul>
 800629c:	3501      	adds	r5, #1
 800629e:	4606      	mov	r6, r0
 80062a0:	460f      	mov	r7, r1
 80062a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80062a6:	f109 0908 	add.w	r9, r9, #8
 80062aa:	e7e0      	b.n	800626e <_dtoa_r+0x36e>
 80062ac:	f000 809f 	beq.w	80063ee <_dtoa_r+0x4ee>
 80062b0:	f1cb 0600 	rsb	r6, fp, #0
 80062b4:	4ba1      	ldr	r3, [pc, #644]	; (800653c <_dtoa_r+0x63c>)
 80062b6:	4fa2      	ldr	r7, [pc, #648]	; (8006540 <_dtoa_r+0x640>)
 80062b8:	f006 020f 	and.w	r2, r6, #15
 80062bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	ec51 0b18 	vmov	r0, r1, d8
 80062c8:	f7fa f996 	bl	80005f8 <__aeabi_dmul>
 80062cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062d0:	1136      	asrs	r6, r6, #4
 80062d2:	2300      	movs	r3, #0
 80062d4:	2502      	movs	r5, #2
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	d17e      	bne.n	80063d8 <_dtoa_r+0x4d8>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1d0      	bne.n	8006280 <_dtoa_r+0x380>
 80062de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8084 	beq.w	80063f2 <_dtoa_r+0x4f2>
 80062ea:	4b96      	ldr	r3, [pc, #600]	; (8006544 <_dtoa_r+0x644>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	4640      	mov	r0, r8
 80062f0:	4649      	mov	r1, r9
 80062f2:	f7fa fbf3 	bl	8000adc <__aeabi_dcmplt>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d07b      	beq.n	80063f2 <_dtoa_r+0x4f2>
 80062fa:	9b04      	ldr	r3, [sp, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d078      	beq.n	80063f2 <_dtoa_r+0x4f2>
 8006300:	9b01      	ldr	r3, [sp, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	dd39      	ble.n	800637a <_dtoa_r+0x47a>
 8006306:	4b90      	ldr	r3, [pc, #576]	; (8006548 <_dtoa_r+0x648>)
 8006308:	2200      	movs	r2, #0
 800630a:	4640      	mov	r0, r8
 800630c:	4649      	mov	r1, r9
 800630e:	f7fa f973 	bl	80005f8 <__aeabi_dmul>
 8006312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006316:	9e01      	ldr	r6, [sp, #4]
 8006318:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800631c:	3501      	adds	r5, #1
 800631e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006322:	4628      	mov	r0, r5
 8006324:	f7fa f8fe 	bl	8000524 <__aeabi_i2d>
 8006328:	4642      	mov	r2, r8
 800632a:	464b      	mov	r3, r9
 800632c:	f7fa f964 	bl	80005f8 <__aeabi_dmul>
 8006330:	4b86      	ldr	r3, [pc, #536]	; (800654c <_dtoa_r+0x64c>)
 8006332:	2200      	movs	r2, #0
 8006334:	f7f9 ffaa 	bl	800028c <__adddf3>
 8006338:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800633c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006340:	9303      	str	r3, [sp, #12]
 8006342:	2e00      	cmp	r6, #0
 8006344:	d158      	bne.n	80063f8 <_dtoa_r+0x4f8>
 8006346:	4b82      	ldr	r3, [pc, #520]	; (8006550 <_dtoa_r+0x650>)
 8006348:	2200      	movs	r2, #0
 800634a:	4640      	mov	r0, r8
 800634c:	4649      	mov	r1, r9
 800634e:	f7f9 ff9b 	bl	8000288 <__aeabi_dsub>
 8006352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006356:	4680      	mov	r8, r0
 8006358:	4689      	mov	r9, r1
 800635a:	f7fa fbdd 	bl	8000b18 <__aeabi_dcmpgt>
 800635e:	2800      	cmp	r0, #0
 8006360:	f040 8296 	bne.w	8006890 <_dtoa_r+0x990>
 8006364:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006368:	4640      	mov	r0, r8
 800636a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800636e:	4649      	mov	r1, r9
 8006370:	f7fa fbb4 	bl	8000adc <__aeabi_dcmplt>
 8006374:	2800      	cmp	r0, #0
 8006376:	f040 8289 	bne.w	800688c <_dtoa_r+0x98c>
 800637a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800637e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006380:	2b00      	cmp	r3, #0
 8006382:	f2c0 814e 	blt.w	8006622 <_dtoa_r+0x722>
 8006386:	f1bb 0f0e 	cmp.w	fp, #14
 800638a:	f300 814a 	bgt.w	8006622 <_dtoa_r+0x722>
 800638e:	4b6b      	ldr	r3, [pc, #428]	; (800653c <_dtoa_r+0x63c>)
 8006390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006394:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800639a:	2b00      	cmp	r3, #0
 800639c:	f280 80dc 	bge.w	8006558 <_dtoa_r+0x658>
 80063a0:	9b04      	ldr	r3, [sp, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f300 80d8 	bgt.w	8006558 <_dtoa_r+0x658>
 80063a8:	f040 826f 	bne.w	800688a <_dtoa_r+0x98a>
 80063ac:	4b68      	ldr	r3, [pc, #416]	; (8006550 <_dtoa_r+0x650>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	4640      	mov	r0, r8
 80063b2:	4649      	mov	r1, r9
 80063b4:	f7fa f920 	bl	80005f8 <__aeabi_dmul>
 80063b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063bc:	f7fa fba2 	bl	8000b04 <__aeabi_dcmpge>
 80063c0:	9e04      	ldr	r6, [sp, #16]
 80063c2:	4637      	mov	r7, r6
 80063c4:	2800      	cmp	r0, #0
 80063c6:	f040 8245 	bne.w	8006854 <_dtoa_r+0x954>
 80063ca:	9d00      	ldr	r5, [sp, #0]
 80063cc:	2331      	movs	r3, #49	; 0x31
 80063ce:	f805 3b01 	strb.w	r3, [r5], #1
 80063d2:	f10b 0b01 	add.w	fp, fp, #1
 80063d6:	e241      	b.n	800685c <_dtoa_r+0x95c>
 80063d8:	07f2      	lsls	r2, r6, #31
 80063da:	d505      	bpl.n	80063e8 <_dtoa_r+0x4e8>
 80063dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063e0:	f7fa f90a 	bl	80005f8 <__aeabi_dmul>
 80063e4:	3501      	adds	r5, #1
 80063e6:	2301      	movs	r3, #1
 80063e8:	1076      	asrs	r6, r6, #1
 80063ea:	3708      	adds	r7, #8
 80063ec:	e773      	b.n	80062d6 <_dtoa_r+0x3d6>
 80063ee:	2502      	movs	r5, #2
 80063f0:	e775      	b.n	80062de <_dtoa_r+0x3de>
 80063f2:	9e04      	ldr	r6, [sp, #16]
 80063f4:	465f      	mov	r7, fp
 80063f6:	e792      	b.n	800631e <_dtoa_r+0x41e>
 80063f8:	9900      	ldr	r1, [sp, #0]
 80063fa:	4b50      	ldr	r3, [pc, #320]	; (800653c <_dtoa_r+0x63c>)
 80063fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006400:	4431      	add	r1, r6
 8006402:	9102      	str	r1, [sp, #8]
 8006404:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006406:	eeb0 9a47 	vmov.f32	s18, s14
 800640a:	eef0 9a67 	vmov.f32	s19, s15
 800640e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006412:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006416:	2900      	cmp	r1, #0
 8006418:	d044      	beq.n	80064a4 <_dtoa_r+0x5a4>
 800641a:	494e      	ldr	r1, [pc, #312]	; (8006554 <_dtoa_r+0x654>)
 800641c:	2000      	movs	r0, #0
 800641e:	f7fa fa15 	bl	800084c <__aeabi_ddiv>
 8006422:	ec53 2b19 	vmov	r2, r3, d9
 8006426:	f7f9 ff2f 	bl	8000288 <__aeabi_dsub>
 800642a:	9d00      	ldr	r5, [sp, #0]
 800642c:	ec41 0b19 	vmov	d9, r0, r1
 8006430:	4649      	mov	r1, r9
 8006432:	4640      	mov	r0, r8
 8006434:	f7fa fb90 	bl	8000b58 <__aeabi_d2iz>
 8006438:	4606      	mov	r6, r0
 800643a:	f7fa f873 	bl	8000524 <__aeabi_i2d>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4640      	mov	r0, r8
 8006444:	4649      	mov	r1, r9
 8006446:	f7f9 ff1f 	bl	8000288 <__aeabi_dsub>
 800644a:	3630      	adds	r6, #48	; 0x30
 800644c:	f805 6b01 	strb.w	r6, [r5], #1
 8006450:	ec53 2b19 	vmov	r2, r3, d9
 8006454:	4680      	mov	r8, r0
 8006456:	4689      	mov	r9, r1
 8006458:	f7fa fb40 	bl	8000adc <__aeabi_dcmplt>
 800645c:	2800      	cmp	r0, #0
 800645e:	d164      	bne.n	800652a <_dtoa_r+0x62a>
 8006460:	4642      	mov	r2, r8
 8006462:	464b      	mov	r3, r9
 8006464:	4937      	ldr	r1, [pc, #220]	; (8006544 <_dtoa_r+0x644>)
 8006466:	2000      	movs	r0, #0
 8006468:	f7f9 ff0e 	bl	8000288 <__aeabi_dsub>
 800646c:	ec53 2b19 	vmov	r2, r3, d9
 8006470:	f7fa fb34 	bl	8000adc <__aeabi_dcmplt>
 8006474:	2800      	cmp	r0, #0
 8006476:	f040 80b6 	bne.w	80065e6 <_dtoa_r+0x6e6>
 800647a:	9b02      	ldr	r3, [sp, #8]
 800647c:	429d      	cmp	r5, r3
 800647e:	f43f af7c 	beq.w	800637a <_dtoa_r+0x47a>
 8006482:	4b31      	ldr	r3, [pc, #196]	; (8006548 <_dtoa_r+0x648>)
 8006484:	ec51 0b19 	vmov	r0, r1, d9
 8006488:	2200      	movs	r2, #0
 800648a:	f7fa f8b5 	bl	80005f8 <__aeabi_dmul>
 800648e:	4b2e      	ldr	r3, [pc, #184]	; (8006548 <_dtoa_r+0x648>)
 8006490:	ec41 0b19 	vmov	d9, r0, r1
 8006494:	2200      	movs	r2, #0
 8006496:	4640      	mov	r0, r8
 8006498:	4649      	mov	r1, r9
 800649a:	f7fa f8ad 	bl	80005f8 <__aeabi_dmul>
 800649e:	4680      	mov	r8, r0
 80064a0:	4689      	mov	r9, r1
 80064a2:	e7c5      	b.n	8006430 <_dtoa_r+0x530>
 80064a4:	ec51 0b17 	vmov	r0, r1, d7
 80064a8:	f7fa f8a6 	bl	80005f8 <__aeabi_dmul>
 80064ac:	9b02      	ldr	r3, [sp, #8]
 80064ae:	9d00      	ldr	r5, [sp, #0]
 80064b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80064b2:	ec41 0b19 	vmov	d9, r0, r1
 80064b6:	4649      	mov	r1, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	f7fa fb4d 	bl	8000b58 <__aeabi_d2iz>
 80064be:	4606      	mov	r6, r0
 80064c0:	f7fa f830 	bl	8000524 <__aeabi_i2d>
 80064c4:	3630      	adds	r6, #48	; 0x30
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4640      	mov	r0, r8
 80064cc:	4649      	mov	r1, r9
 80064ce:	f7f9 fedb 	bl	8000288 <__aeabi_dsub>
 80064d2:	f805 6b01 	strb.w	r6, [r5], #1
 80064d6:	9b02      	ldr	r3, [sp, #8]
 80064d8:	429d      	cmp	r5, r3
 80064da:	4680      	mov	r8, r0
 80064dc:	4689      	mov	r9, r1
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	d124      	bne.n	800652e <_dtoa_r+0x62e>
 80064e4:	4b1b      	ldr	r3, [pc, #108]	; (8006554 <_dtoa_r+0x654>)
 80064e6:	ec51 0b19 	vmov	r0, r1, d9
 80064ea:	f7f9 fecf 	bl	800028c <__adddf3>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4640      	mov	r0, r8
 80064f4:	4649      	mov	r1, r9
 80064f6:	f7fa fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d173      	bne.n	80065e6 <_dtoa_r+0x6e6>
 80064fe:	ec53 2b19 	vmov	r2, r3, d9
 8006502:	4914      	ldr	r1, [pc, #80]	; (8006554 <_dtoa_r+0x654>)
 8006504:	2000      	movs	r0, #0
 8006506:	f7f9 febf 	bl	8000288 <__aeabi_dsub>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4640      	mov	r0, r8
 8006510:	4649      	mov	r1, r9
 8006512:	f7fa fae3 	bl	8000adc <__aeabi_dcmplt>
 8006516:	2800      	cmp	r0, #0
 8006518:	f43f af2f 	beq.w	800637a <_dtoa_r+0x47a>
 800651c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800651e:	1e6b      	subs	r3, r5, #1
 8006520:	930f      	str	r3, [sp, #60]	; 0x3c
 8006522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006526:	2b30      	cmp	r3, #48	; 0x30
 8006528:	d0f8      	beq.n	800651c <_dtoa_r+0x61c>
 800652a:	46bb      	mov	fp, r7
 800652c:	e04a      	b.n	80065c4 <_dtoa_r+0x6c4>
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <_dtoa_r+0x648>)
 8006530:	f7fa f862 	bl	80005f8 <__aeabi_dmul>
 8006534:	4680      	mov	r8, r0
 8006536:	4689      	mov	r9, r1
 8006538:	e7bd      	b.n	80064b6 <_dtoa_r+0x5b6>
 800653a:	bf00      	nop
 800653c:	080082d0 	.word	0x080082d0
 8006540:	080082a8 	.word	0x080082a8
 8006544:	3ff00000 	.word	0x3ff00000
 8006548:	40240000 	.word	0x40240000
 800654c:	401c0000 	.word	0x401c0000
 8006550:	40140000 	.word	0x40140000
 8006554:	3fe00000 	.word	0x3fe00000
 8006558:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800655c:	9d00      	ldr	r5, [sp, #0]
 800655e:	4642      	mov	r2, r8
 8006560:	464b      	mov	r3, r9
 8006562:	4630      	mov	r0, r6
 8006564:	4639      	mov	r1, r7
 8006566:	f7fa f971 	bl	800084c <__aeabi_ddiv>
 800656a:	f7fa faf5 	bl	8000b58 <__aeabi_d2iz>
 800656e:	9001      	str	r0, [sp, #4]
 8006570:	f7f9 ffd8 	bl	8000524 <__aeabi_i2d>
 8006574:	4642      	mov	r2, r8
 8006576:	464b      	mov	r3, r9
 8006578:	f7fa f83e 	bl	80005f8 <__aeabi_dmul>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4630      	mov	r0, r6
 8006582:	4639      	mov	r1, r7
 8006584:	f7f9 fe80 	bl	8000288 <__aeabi_dsub>
 8006588:	9e01      	ldr	r6, [sp, #4]
 800658a:	9f04      	ldr	r7, [sp, #16]
 800658c:	3630      	adds	r6, #48	; 0x30
 800658e:	f805 6b01 	strb.w	r6, [r5], #1
 8006592:	9e00      	ldr	r6, [sp, #0]
 8006594:	1bae      	subs	r6, r5, r6
 8006596:	42b7      	cmp	r7, r6
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	d134      	bne.n	8006608 <_dtoa_r+0x708>
 800659e:	f7f9 fe75 	bl	800028c <__adddf3>
 80065a2:	4642      	mov	r2, r8
 80065a4:	464b      	mov	r3, r9
 80065a6:	4606      	mov	r6, r0
 80065a8:	460f      	mov	r7, r1
 80065aa:	f7fa fab5 	bl	8000b18 <__aeabi_dcmpgt>
 80065ae:	b9c8      	cbnz	r0, 80065e4 <_dtoa_r+0x6e4>
 80065b0:	4642      	mov	r2, r8
 80065b2:	464b      	mov	r3, r9
 80065b4:	4630      	mov	r0, r6
 80065b6:	4639      	mov	r1, r7
 80065b8:	f7fa fa86 	bl	8000ac8 <__aeabi_dcmpeq>
 80065bc:	b110      	cbz	r0, 80065c4 <_dtoa_r+0x6c4>
 80065be:	9b01      	ldr	r3, [sp, #4]
 80065c0:	07db      	lsls	r3, r3, #31
 80065c2:	d40f      	bmi.n	80065e4 <_dtoa_r+0x6e4>
 80065c4:	4651      	mov	r1, sl
 80065c6:	4620      	mov	r0, r4
 80065c8:	f000 fbcc 	bl	8006d64 <_Bfree>
 80065cc:	2300      	movs	r3, #0
 80065ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065d0:	702b      	strb	r3, [r5, #0]
 80065d2:	f10b 0301 	add.w	r3, fp, #1
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f43f ace2 	beq.w	8005fa4 <_dtoa_r+0xa4>
 80065e0:	601d      	str	r5, [r3, #0]
 80065e2:	e4df      	b.n	8005fa4 <_dtoa_r+0xa4>
 80065e4:	465f      	mov	r7, fp
 80065e6:	462b      	mov	r3, r5
 80065e8:	461d      	mov	r5, r3
 80065ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065ee:	2a39      	cmp	r2, #57	; 0x39
 80065f0:	d106      	bne.n	8006600 <_dtoa_r+0x700>
 80065f2:	9a00      	ldr	r2, [sp, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d1f7      	bne.n	80065e8 <_dtoa_r+0x6e8>
 80065f8:	9900      	ldr	r1, [sp, #0]
 80065fa:	2230      	movs	r2, #48	; 0x30
 80065fc:	3701      	adds	r7, #1
 80065fe:	700a      	strb	r2, [r1, #0]
 8006600:	781a      	ldrb	r2, [r3, #0]
 8006602:	3201      	adds	r2, #1
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e790      	b.n	800652a <_dtoa_r+0x62a>
 8006608:	4ba3      	ldr	r3, [pc, #652]	; (8006898 <_dtoa_r+0x998>)
 800660a:	2200      	movs	r2, #0
 800660c:	f7f9 fff4 	bl	80005f8 <__aeabi_dmul>
 8006610:	2200      	movs	r2, #0
 8006612:	2300      	movs	r3, #0
 8006614:	4606      	mov	r6, r0
 8006616:	460f      	mov	r7, r1
 8006618:	f7fa fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800661c:	2800      	cmp	r0, #0
 800661e:	d09e      	beq.n	800655e <_dtoa_r+0x65e>
 8006620:	e7d0      	b.n	80065c4 <_dtoa_r+0x6c4>
 8006622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006624:	2a00      	cmp	r2, #0
 8006626:	f000 80ca 	beq.w	80067be <_dtoa_r+0x8be>
 800662a:	9a07      	ldr	r2, [sp, #28]
 800662c:	2a01      	cmp	r2, #1
 800662e:	f300 80ad 	bgt.w	800678c <_dtoa_r+0x88c>
 8006632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006634:	2a00      	cmp	r2, #0
 8006636:	f000 80a5 	beq.w	8006784 <_dtoa_r+0x884>
 800663a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800663e:	9e08      	ldr	r6, [sp, #32]
 8006640:	9d05      	ldr	r5, [sp, #20]
 8006642:	9a05      	ldr	r2, [sp, #20]
 8006644:	441a      	add	r2, r3
 8006646:	9205      	str	r2, [sp, #20]
 8006648:	9a06      	ldr	r2, [sp, #24]
 800664a:	2101      	movs	r1, #1
 800664c:	441a      	add	r2, r3
 800664e:	4620      	mov	r0, r4
 8006650:	9206      	str	r2, [sp, #24]
 8006652:	f000 fc3d 	bl	8006ed0 <__i2b>
 8006656:	4607      	mov	r7, r0
 8006658:	b165      	cbz	r5, 8006674 <_dtoa_r+0x774>
 800665a:	9b06      	ldr	r3, [sp, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	dd09      	ble.n	8006674 <_dtoa_r+0x774>
 8006660:	42ab      	cmp	r3, r5
 8006662:	9a05      	ldr	r2, [sp, #20]
 8006664:	bfa8      	it	ge
 8006666:	462b      	movge	r3, r5
 8006668:	1ad2      	subs	r2, r2, r3
 800666a:	9205      	str	r2, [sp, #20]
 800666c:	9a06      	ldr	r2, [sp, #24]
 800666e:	1aed      	subs	r5, r5, r3
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	9306      	str	r3, [sp, #24]
 8006674:	9b08      	ldr	r3, [sp, #32]
 8006676:	b1f3      	cbz	r3, 80066b6 <_dtoa_r+0x7b6>
 8006678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 80a3 	beq.w	80067c6 <_dtoa_r+0x8c6>
 8006680:	2e00      	cmp	r6, #0
 8006682:	dd10      	ble.n	80066a6 <_dtoa_r+0x7a6>
 8006684:	4639      	mov	r1, r7
 8006686:	4632      	mov	r2, r6
 8006688:	4620      	mov	r0, r4
 800668a:	f000 fce1 	bl	8007050 <__pow5mult>
 800668e:	4652      	mov	r2, sl
 8006690:	4601      	mov	r1, r0
 8006692:	4607      	mov	r7, r0
 8006694:	4620      	mov	r0, r4
 8006696:	f000 fc31 	bl	8006efc <__multiply>
 800669a:	4651      	mov	r1, sl
 800669c:	4680      	mov	r8, r0
 800669e:	4620      	mov	r0, r4
 80066a0:	f000 fb60 	bl	8006d64 <_Bfree>
 80066a4:	46c2      	mov	sl, r8
 80066a6:	9b08      	ldr	r3, [sp, #32]
 80066a8:	1b9a      	subs	r2, r3, r6
 80066aa:	d004      	beq.n	80066b6 <_dtoa_r+0x7b6>
 80066ac:	4651      	mov	r1, sl
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 fcce 	bl	8007050 <__pow5mult>
 80066b4:	4682      	mov	sl, r0
 80066b6:	2101      	movs	r1, #1
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 fc09 	bl	8006ed0 <__i2b>
 80066be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	4606      	mov	r6, r0
 80066c4:	f340 8081 	ble.w	80067ca <_dtoa_r+0x8ca>
 80066c8:	461a      	mov	r2, r3
 80066ca:	4601      	mov	r1, r0
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 fcbf 	bl	8007050 <__pow5mult>
 80066d2:	9b07      	ldr	r3, [sp, #28]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	4606      	mov	r6, r0
 80066d8:	dd7a      	ble.n	80067d0 <_dtoa_r+0x8d0>
 80066da:	f04f 0800 	mov.w	r8, #0
 80066de:	6933      	ldr	r3, [r6, #16]
 80066e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066e4:	6918      	ldr	r0, [r3, #16]
 80066e6:	f000 fba5 	bl	8006e34 <__hi0bits>
 80066ea:	f1c0 0020 	rsb	r0, r0, #32
 80066ee:	9b06      	ldr	r3, [sp, #24]
 80066f0:	4418      	add	r0, r3
 80066f2:	f010 001f 	ands.w	r0, r0, #31
 80066f6:	f000 8094 	beq.w	8006822 <_dtoa_r+0x922>
 80066fa:	f1c0 0320 	rsb	r3, r0, #32
 80066fe:	2b04      	cmp	r3, #4
 8006700:	f340 8085 	ble.w	800680e <_dtoa_r+0x90e>
 8006704:	9b05      	ldr	r3, [sp, #20]
 8006706:	f1c0 001c 	rsb	r0, r0, #28
 800670a:	4403      	add	r3, r0
 800670c:	9305      	str	r3, [sp, #20]
 800670e:	9b06      	ldr	r3, [sp, #24]
 8006710:	4403      	add	r3, r0
 8006712:	4405      	add	r5, r0
 8006714:	9306      	str	r3, [sp, #24]
 8006716:	9b05      	ldr	r3, [sp, #20]
 8006718:	2b00      	cmp	r3, #0
 800671a:	dd05      	ble.n	8006728 <_dtoa_r+0x828>
 800671c:	4651      	mov	r1, sl
 800671e:	461a      	mov	r2, r3
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fcef 	bl	8007104 <__lshift>
 8006726:	4682      	mov	sl, r0
 8006728:	9b06      	ldr	r3, [sp, #24]
 800672a:	2b00      	cmp	r3, #0
 800672c:	dd05      	ble.n	800673a <_dtoa_r+0x83a>
 800672e:	4631      	mov	r1, r6
 8006730:	461a      	mov	r2, r3
 8006732:	4620      	mov	r0, r4
 8006734:	f000 fce6 	bl	8007104 <__lshift>
 8006738:	4606      	mov	r6, r0
 800673a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800673c:	2b00      	cmp	r3, #0
 800673e:	d072      	beq.n	8006826 <_dtoa_r+0x926>
 8006740:	4631      	mov	r1, r6
 8006742:	4650      	mov	r0, sl
 8006744:	f000 fd4a 	bl	80071dc <__mcmp>
 8006748:	2800      	cmp	r0, #0
 800674a:	da6c      	bge.n	8006826 <_dtoa_r+0x926>
 800674c:	2300      	movs	r3, #0
 800674e:	4651      	mov	r1, sl
 8006750:	220a      	movs	r2, #10
 8006752:	4620      	mov	r0, r4
 8006754:	f000 fb28 	bl	8006da8 <__multadd>
 8006758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800675e:	4682      	mov	sl, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 81b0 	beq.w	8006ac6 <_dtoa_r+0xbc6>
 8006766:	2300      	movs	r3, #0
 8006768:	4639      	mov	r1, r7
 800676a:	220a      	movs	r2, #10
 800676c:	4620      	mov	r0, r4
 800676e:	f000 fb1b 	bl	8006da8 <__multadd>
 8006772:	9b01      	ldr	r3, [sp, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	4607      	mov	r7, r0
 8006778:	f300 8096 	bgt.w	80068a8 <_dtoa_r+0x9a8>
 800677c:	9b07      	ldr	r3, [sp, #28]
 800677e:	2b02      	cmp	r3, #2
 8006780:	dc59      	bgt.n	8006836 <_dtoa_r+0x936>
 8006782:	e091      	b.n	80068a8 <_dtoa_r+0x9a8>
 8006784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800678a:	e758      	b.n	800663e <_dtoa_r+0x73e>
 800678c:	9b04      	ldr	r3, [sp, #16]
 800678e:	1e5e      	subs	r6, r3, #1
 8006790:	9b08      	ldr	r3, [sp, #32]
 8006792:	42b3      	cmp	r3, r6
 8006794:	bfbf      	itttt	lt
 8006796:	9b08      	ldrlt	r3, [sp, #32]
 8006798:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800679a:	9608      	strlt	r6, [sp, #32]
 800679c:	1af3      	sublt	r3, r6, r3
 800679e:	bfb4      	ite	lt
 80067a0:	18d2      	addlt	r2, r2, r3
 80067a2:	1b9e      	subge	r6, r3, r6
 80067a4:	9b04      	ldr	r3, [sp, #16]
 80067a6:	bfbc      	itt	lt
 80067a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80067aa:	2600      	movlt	r6, #0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bfb7      	itett	lt
 80067b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80067b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80067b8:	1a9d      	sublt	r5, r3, r2
 80067ba:	2300      	movlt	r3, #0
 80067bc:	e741      	b.n	8006642 <_dtoa_r+0x742>
 80067be:	9e08      	ldr	r6, [sp, #32]
 80067c0:	9d05      	ldr	r5, [sp, #20]
 80067c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80067c4:	e748      	b.n	8006658 <_dtoa_r+0x758>
 80067c6:	9a08      	ldr	r2, [sp, #32]
 80067c8:	e770      	b.n	80066ac <_dtoa_r+0x7ac>
 80067ca:	9b07      	ldr	r3, [sp, #28]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	dc19      	bgt.n	8006804 <_dtoa_r+0x904>
 80067d0:	9b02      	ldr	r3, [sp, #8]
 80067d2:	b9bb      	cbnz	r3, 8006804 <_dtoa_r+0x904>
 80067d4:	9b03      	ldr	r3, [sp, #12]
 80067d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067da:	b99b      	cbnz	r3, 8006804 <_dtoa_r+0x904>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067e2:	0d1b      	lsrs	r3, r3, #20
 80067e4:	051b      	lsls	r3, r3, #20
 80067e6:	b183      	cbz	r3, 800680a <_dtoa_r+0x90a>
 80067e8:	9b05      	ldr	r3, [sp, #20]
 80067ea:	3301      	adds	r3, #1
 80067ec:	9305      	str	r3, [sp, #20]
 80067ee:	9b06      	ldr	r3, [sp, #24]
 80067f0:	3301      	adds	r3, #1
 80067f2:	9306      	str	r3, [sp, #24]
 80067f4:	f04f 0801 	mov.w	r8, #1
 80067f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f47f af6f 	bne.w	80066de <_dtoa_r+0x7de>
 8006800:	2001      	movs	r0, #1
 8006802:	e774      	b.n	80066ee <_dtoa_r+0x7ee>
 8006804:	f04f 0800 	mov.w	r8, #0
 8006808:	e7f6      	b.n	80067f8 <_dtoa_r+0x8f8>
 800680a:	4698      	mov	r8, r3
 800680c:	e7f4      	b.n	80067f8 <_dtoa_r+0x8f8>
 800680e:	d082      	beq.n	8006716 <_dtoa_r+0x816>
 8006810:	9a05      	ldr	r2, [sp, #20]
 8006812:	331c      	adds	r3, #28
 8006814:	441a      	add	r2, r3
 8006816:	9205      	str	r2, [sp, #20]
 8006818:	9a06      	ldr	r2, [sp, #24]
 800681a:	441a      	add	r2, r3
 800681c:	441d      	add	r5, r3
 800681e:	9206      	str	r2, [sp, #24]
 8006820:	e779      	b.n	8006716 <_dtoa_r+0x816>
 8006822:	4603      	mov	r3, r0
 8006824:	e7f4      	b.n	8006810 <_dtoa_r+0x910>
 8006826:	9b04      	ldr	r3, [sp, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	dc37      	bgt.n	800689c <_dtoa_r+0x99c>
 800682c:	9b07      	ldr	r3, [sp, #28]
 800682e:	2b02      	cmp	r3, #2
 8006830:	dd34      	ble.n	800689c <_dtoa_r+0x99c>
 8006832:	9b04      	ldr	r3, [sp, #16]
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	9b01      	ldr	r3, [sp, #4]
 8006838:	b963      	cbnz	r3, 8006854 <_dtoa_r+0x954>
 800683a:	4631      	mov	r1, r6
 800683c:	2205      	movs	r2, #5
 800683e:	4620      	mov	r0, r4
 8006840:	f000 fab2 	bl	8006da8 <__multadd>
 8006844:	4601      	mov	r1, r0
 8006846:	4606      	mov	r6, r0
 8006848:	4650      	mov	r0, sl
 800684a:	f000 fcc7 	bl	80071dc <__mcmp>
 800684e:	2800      	cmp	r0, #0
 8006850:	f73f adbb 	bgt.w	80063ca <_dtoa_r+0x4ca>
 8006854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006856:	9d00      	ldr	r5, [sp, #0]
 8006858:	ea6f 0b03 	mvn.w	fp, r3
 800685c:	f04f 0800 	mov.w	r8, #0
 8006860:	4631      	mov	r1, r6
 8006862:	4620      	mov	r0, r4
 8006864:	f000 fa7e 	bl	8006d64 <_Bfree>
 8006868:	2f00      	cmp	r7, #0
 800686a:	f43f aeab 	beq.w	80065c4 <_dtoa_r+0x6c4>
 800686e:	f1b8 0f00 	cmp.w	r8, #0
 8006872:	d005      	beq.n	8006880 <_dtoa_r+0x980>
 8006874:	45b8      	cmp	r8, r7
 8006876:	d003      	beq.n	8006880 <_dtoa_r+0x980>
 8006878:	4641      	mov	r1, r8
 800687a:	4620      	mov	r0, r4
 800687c:	f000 fa72 	bl	8006d64 <_Bfree>
 8006880:	4639      	mov	r1, r7
 8006882:	4620      	mov	r0, r4
 8006884:	f000 fa6e 	bl	8006d64 <_Bfree>
 8006888:	e69c      	b.n	80065c4 <_dtoa_r+0x6c4>
 800688a:	2600      	movs	r6, #0
 800688c:	4637      	mov	r7, r6
 800688e:	e7e1      	b.n	8006854 <_dtoa_r+0x954>
 8006890:	46bb      	mov	fp, r7
 8006892:	4637      	mov	r7, r6
 8006894:	e599      	b.n	80063ca <_dtoa_r+0x4ca>
 8006896:	bf00      	nop
 8006898:	40240000 	.word	0x40240000
 800689c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80c8 	beq.w	8006a34 <_dtoa_r+0xb34>
 80068a4:	9b04      	ldr	r3, [sp, #16]
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	2d00      	cmp	r5, #0
 80068aa:	dd05      	ble.n	80068b8 <_dtoa_r+0x9b8>
 80068ac:	4639      	mov	r1, r7
 80068ae:	462a      	mov	r2, r5
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fc27 	bl	8007104 <__lshift>
 80068b6:	4607      	mov	r7, r0
 80068b8:	f1b8 0f00 	cmp.w	r8, #0
 80068bc:	d05b      	beq.n	8006976 <_dtoa_r+0xa76>
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	4620      	mov	r0, r4
 80068c2:	f000 fa0f 	bl	8006ce4 <_Balloc>
 80068c6:	4605      	mov	r5, r0
 80068c8:	b928      	cbnz	r0, 80068d6 <_dtoa_r+0x9d6>
 80068ca:	4b83      	ldr	r3, [pc, #524]	; (8006ad8 <_dtoa_r+0xbd8>)
 80068cc:	4602      	mov	r2, r0
 80068ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80068d2:	f7ff bb2e 	b.w	8005f32 <_dtoa_r+0x32>
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	3202      	adds	r2, #2
 80068da:	0092      	lsls	r2, r2, #2
 80068dc:	f107 010c 	add.w	r1, r7, #12
 80068e0:	300c      	adds	r0, #12
 80068e2:	f7ff fa74 	bl	8005dce <memcpy>
 80068e6:	2201      	movs	r2, #1
 80068e8:	4629      	mov	r1, r5
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 fc0a 	bl	8007104 <__lshift>
 80068f0:	9b00      	ldr	r3, [sp, #0]
 80068f2:	3301      	adds	r3, #1
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068fa:	4413      	add	r3, r2
 80068fc:	9308      	str	r3, [sp, #32]
 80068fe:	9b02      	ldr	r3, [sp, #8]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	46b8      	mov	r8, r7
 8006906:	9306      	str	r3, [sp, #24]
 8006908:	4607      	mov	r7, r0
 800690a:	9b04      	ldr	r3, [sp, #16]
 800690c:	4631      	mov	r1, r6
 800690e:	3b01      	subs	r3, #1
 8006910:	4650      	mov	r0, sl
 8006912:	9301      	str	r3, [sp, #4]
 8006914:	f7ff fa69 	bl	8005dea <quorem>
 8006918:	4641      	mov	r1, r8
 800691a:	9002      	str	r0, [sp, #8]
 800691c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006920:	4650      	mov	r0, sl
 8006922:	f000 fc5b 	bl	80071dc <__mcmp>
 8006926:	463a      	mov	r2, r7
 8006928:	9005      	str	r0, [sp, #20]
 800692a:	4631      	mov	r1, r6
 800692c:	4620      	mov	r0, r4
 800692e:	f000 fc71 	bl	8007214 <__mdiff>
 8006932:	68c2      	ldr	r2, [r0, #12]
 8006934:	4605      	mov	r5, r0
 8006936:	bb02      	cbnz	r2, 800697a <_dtoa_r+0xa7a>
 8006938:	4601      	mov	r1, r0
 800693a:	4650      	mov	r0, sl
 800693c:	f000 fc4e 	bl	80071dc <__mcmp>
 8006940:	4602      	mov	r2, r0
 8006942:	4629      	mov	r1, r5
 8006944:	4620      	mov	r0, r4
 8006946:	9209      	str	r2, [sp, #36]	; 0x24
 8006948:	f000 fa0c 	bl	8006d64 <_Bfree>
 800694c:	9b07      	ldr	r3, [sp, #28]
 800694e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006950:	9d04      	ldr	r5, [sp, #16]
 8006952:	ea43 0102 	orr.w	r1, r3, r2
 8006956:	9b06      	ldr	r3, [sp, #24]
 8006958:	4319      	orrs	r1, r3
 800695a:	d110      	bne.n	800697e <_dtoa_r+0xa7e>
 800695c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006960:	d029      	beq.n	80069b6 <_dtoa_r+0xab6>
 8006962:	9b05      	ldr	r3, [sp, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	dd02      	ble.n	800696e <_dtoa_r+0xa6e>
 8006968:	9b02      	ldr	r3, [sp, #8]
 800696a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800696e:	9b01      	ldr	r3, [sp, #4]
 8006970:	f883 9000 	strb.w	r9, [r3]
 8006974:	e774      	b.n	8006860 <_dtoa_r+0x960>
 8006976:	4638      	mov	r0, r7
 8006978:	e7ba      	b.n	80068f0 <_dtoa_r+0x9f0>
 800697a:	2201      	movs	r2, #1
 800697c:	e7e1      	b.n	8006942 <_dtoa_r+0xa42>
 800697e:	9b05      	ldr	r3, [sp, #20]
 8006980:	2b00      	cmp	r3, #0
 8006982:	db04      	blt.n	800698e <_dtoa_r+0xa8e>
 8006984:	9907      	ldr	r1, [sp, #28]
 8006986:	430b      	orrs	r3, r1
 8006988:	9906      	ldr	r1, [sp, #24]
 800698a:	430b      	orrs	r3, r1
 800698c:	d120      	bne.n	80069d0 <_dtoa_r+0xad0>
 800698e:	2a00      	cmp	r2, #0
 8006990:	dded      	ble.n	800696e <_dtoa_r+0xa6e>
 8006992:	4651      	mov	r1, sl
 8006994:	2201      	movs	r2, #1
 8006996:	4620      	mov	r0, r4
 8006998:	f000 fbb4 	bl	8007104 <__lshift>
 800699c:	4631      	mov	r1, r6
 800699e:	4682      	mov	sl, r0
 80069a0:	f000 fc1c 	bl	80071dc <__mcmp>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	dc03      	bgt.n	80069b0 <_dtoa_r+0xab0>
 80069a8:	d1e1      	bne.n	800696e <_dtoa_r+0xa6e>
 80069aa:	f019 0f01 	tst.w	r9, #1
 80069ae:	d0de      	beq.n	800696e <_dtoa_r+0xa6e>
 80069b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069b4:	d1d8      	bne.n	8006968 <_dtoa_r+0xa68>
 80069b6:	9a01      	ldr	r2, [sp, #4]
 80069b8:	2339      	movs	r3, #57	; 0x39
 80069ba:	7013      	strb	r3, [r2, #0]
 80069bc:	462b      	mov	r3, r5
 80069be:	461d      	mov	r5, r3
 80069c0:	3b01      	subs	r3, #1
 80069c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069c6:	2a39      	cmp	r2, #57	; 0x39
 80069c8:	d06c      	beq.n	8006aa4 <_dtoa_r+0xba4>
 80069ca:	3201      	adds	r2, #1
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	e747      	b.n	8006860 <_dtoa_r+0x960>
 80069d0:	2a00      	cmp	r2, #0
 80069d2:	dd07      	ble.n	80069e4 <_dtoa_r+0xae4>
 80069d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069d8:	d0ed      	beq.n	80069b6 <_dtoa_r+0xab6>
 80069da:	9a01      	ldr	r2, [sp, #4]
 80069dc:	f109 0301 	add.w	r3, r9, #1
 80069e0:	7013      	strb	r3, [r2, #0]
 80069e2:	e73d      	b.n	8006860 <_dtoa_r+0x960>
 80069e4:	9b04      	ldr	r3, [sp, #16]
 80069e6:	9a08      	ldr	r2, [sp, #32]
 80069e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d043      	beq.n	8006a78 <_dtoa_r+0xb78>
 80069f0:	4651      	mov	r1, sl
 80069f2:	2300      	movs	r3, #0
 80069f4:	220a      	movs	r2, #10
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 f9d6 	bl	8006da8 <__multadd>
 80069fc:	45b8      	cmp	r8, r7
 80069fe:	4682      	mov	sl, r0
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	f04f 020a 	mov.w	r2, #10
 8006a08:	4641      	mov	r1, r8
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	d107      	bne.n	8006a1e <_dtoa_r+0xb1e>
 8006a0e:	f000 f9cb 	bl	8006da8 <__multadd>
 8006a12:	4680      	mov	r8, r0
 8006a14:	4607      	mov	r7, r0
 8006a16:	9b04      	ldr	r3, [sp, #16]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	9304      	str	r3, [sp, #16]
 8006a1c:	e775      	b.n	800690a <_dtoa_r+0xa0a>
 8006a1e:	f000 f9c3 	bl	8006da8 <__multadd>
 8006a22:	4639      	mov	r1, r7
 8006a24:	4680      	mov	r8, r0
 8006a26:	2300      	movs	r3, #0
 8006a28:	220a      	movs	r2, #10
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f000 f9bc 	bl	8006da8 <__multadd>
 8006a30:	4607      	mov	r7, r0
 8006a32:	e7f0      	b.n	8006a16 <_dtoa_r+0xb16>
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	9d00      	ldr	r5, [sp, #0]
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4650      	mov	r0, sl
 8006a3e:	f7ff f9d4 	bl	8005dea <quorem>
 8006a42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a46:	9b00      	ldr	r3, [sp, #0]
 8006a48:	f805 9b01 	strb.w	r9, [r5], #1
 8006a4c:	1aea      	subs	r2, r5, r3
 8006a4e:	9b01      	ldr	r3, [sp, #4]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	dd07      	ble.n	8006a64 <_dtoa_r+0xb64>
 8006a54:	4651      	mov	r1, sl
 8006a56:	2300      	movs	r3, #0
 8006a58:	220a      	movs	r2, #10
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 f9a4 	bl	8006da8 <__multadd>
 8006a60:	4682      	mov	sl, r0
 8006a62:	e7ea      	b.n	8006a3a <_dtoa_r+0xb3a>
 8006a64:	9b01      	ldr	r3, [sp, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bfc8      	it	gt
 8006a6a:	461d      	movgt	r5, r3
 8006a6c:	9b00      	ldr	r3, [sp, #0]
 8006a6e:	bfd8      	it	le
 8006a70:	2501      	movle	r5, #1
 8006a72:	441d      	add	r5, r3
 8006a74:	f04f 0800 	mov.w	r8, #0
 8006a78:	4651      	mov	r1, sl
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 fb41 	bl	8007104 <__lshift>
 8006a82:	4631      	mov	r1, r6
 8006a84:	4682      	mov	sl, r0
 8006a86:	f000 fba9 	bl	80071dc <__mcmp>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	dc96      	bgt.n	80069bc <_dtoa_r+0xabc>
 8006a8e:	d102      	bne.n	8006a96 <_dtoa_r+0xb96>
 8006a90:	f019 0f01 	tst.w	r9, #1
 8006a94:	d192      	bne.n	80069bc <_dtoa_r+0xabc>
 8006a96:	462b      	mov	r3, r5
 8006a98:	461d      	mov	r5, r3
 8006a9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a9e:	2a30      	cmp	r2, #48	; 0x30
 8006aa0:	d0fa      	beq.n	8006a98 <_dtoa_r+0xb98>
 8006aa2:	e6dd      	b.n	8006860 <_dtoa_r+0x960>
 8006aa4:	9a00      	ldr	r2, [sp, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d189      	bne.n	80069be <_dtoa_r+0xabe>
 8006aaa:	f10b 0b01 	add.w	fp, fp, #1
 8006aae:	2331      	movs	r3, #49	; 0x31
 8006ab0:	e796      	b.n	80069e0 <_dtoa_r+0xae0>
 8006ab2:	4b0a      	ldr	r3, [pc, #40]	; (8006adc <_dtoa_r+0xbdc>)
 8006ab4:	f7ff ba99 	b.w	8005fea <_dtoa_r+0xea>
 8006ab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f47f aa6d 	bne.w	8005f9a <_dtoa_r+0x9a>
 8006ac0:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <_dtoa_r+0xbe0>)
 8006ac2:	f7ff ba92 	b.w	8005fea <_dtoa_r+0xea>
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	dcb5      	bgt.n	8006a38 <_dtoa_r+0xb38>
 8006acc:	9b07      	ldr	r3, [sp, #28]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	f73f aeb1 	bgt.w	8006836 <_dtoa_r+0x936>
 8006ad4:	e7b0      	b.n	8006a38 <_dtoa_r+0xb38>
 8006ad6:	bf00      	nop
 8006ad8:	0800823c 	.word	0x0800823c
 8006adc:	0800819c 	.word	0x0800819c
 8006ae0:	080081c0 	.word	0x080081c0

08006ae4 <_free_r>:
 8006ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ae6:	2900      	cmp	r1, #0
 8006ae8:	d044      	beq.n	8006b74 <_free_r+0x90>
 8006aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aee:	9001      	str	r0, [sp, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f1a1 0404 	sub.w	r4, r1, #4
 8006af6:	bfb8      	it	lt
 8006af8:	18e4      	addlt	r4, r4, r3
 8006afa:	f000 f8e7 	bl	8006ccc <__malloc_lock>
 8006afe:	4a1e      	ldr	r2, [pc, #120]	; (8006b78 <_free_r+0x94>)
 8006b00:	9801      	ldr	r0, [sp, #4]
 8006b02:	6813      	ldr	r3, [r2, #0]
 8006b04:	b933      	cbnz	r3, 8006b14 <_free_r+0x30>
 8006b06:	6063      	str	r3, [r4, #4]
 8006b08:	6014      	str	r4, [r2, #0]
 8006b0a:	b003      	add	sp, #12
 8006b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b10:	f000 b8e2 	b.w	8006cd8 <__malloc_unlock>
 8006b14:	42a3      	cmp	r3, r4
 8006b16:	d908      	bls.n	8006b2a <_free_r+0x46>
 8006b18:	6825      	ldr	r5, [r4, #0]
 8006b1a:	1961      	adds	r1, r4, r5
 8006b1c:	428b      	cmp	r3, r1
 8006b1e:	bf01      	itttt	eq
 8006b20:	6819      	ldreq	r1, [r3, #0]
 8006b22:	685b      	ldreq	r3, [r3, #4]
 8006b24:	1949      	addeq	r1, r1, r5
 8006b26:	6021      	streq	r1, [r4, #0]
 8006b28:	e7ed      	b.n	8006b06 <_free_r+0x22>
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	b10b      	cbz	r3, 8006b34 <_free_r+0x50>
 8006b30:	42a3      	cmp	r3, r4
 8006b32:	d9fa      	bls.n	8006b2a <_free_r+0x46>
 8006b34:	6811      	ldr	r1, [r2, #0]
 8006b36:	1855      	adds	r5, r2, r1
 8006b38:	42a5      	cmp	r5, r4
 8006b3a:	d10b      	bne.n	8006b54 <_free_r+0x70>
 8006b3c:	6824      	ldr	r4, [r4, #0]
 8006b3e:	4421      	add	r1, r4
 8006b40:	1854      	adds	r4, r2, r1
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	6011      	str	r1, [r2, #0]
 8006b46:	d1e0      	bne.n	8006b0a <_free_r+0x26>
 8006b48:	681c      	ldr	r4, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	6053      	str	r3, [r2, #4]
 8006b4e:	440c      	add	r4, r1
 8006b50:	6014      	str	r4, [r2, #0]
 8006b52:	e7da      	b.n	8006b0a <_free_r+0x26>
 8006b54:	d902      	bls.n	8006b5c <_free_r+0x78>
 8006b56:	230c      	movs	r3, #12
 8006b58:	6003      	str	r3, [r0, #0]
 8006b5a:	e7d6      	b.n	8006b0a <_free_r+0x26>
 8006b5c:	6825      	ldr	r5, [r4, #0]
 8006b5e:	1961      	adds	r1, r4, r5
 8006b60:	428b      	cmp	r3, r1
 8006b62:	bf04      	itt	eq
 8006b64:	6819      	ldreq	r1, [r3, #0]
 8006b66:	685b      	ldreq	r3, [r3, #4]
 8006b68:	6063      	str	r3, [r4, #4]
 8006b6a:	bf04      	itt	eq
 8006b6c:	1949      	addeq	r1, r1, r5
 8006b6e:	6021      	streq	r1, [r4, #0]
 8006b70:	6054      	str	r4, [r2, #4]
 8006b72:	e7ca      	b.n	8006b0a <_free_r+0x26>
 8006b74:	b003      	add	sp, #12
 8006b76:	bd30      	pop	{r4, r5, pc}
 8006b78:	200044a8 	.word	0x200044a8

08006b7c <malloc>:
 8006b7c:	4b02      	ldr	r3, [pc, #8]	; (8006b88 <malloc+0xc>)
 8006b7e:	4601      	mov	r1, r0
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	f000 b823 	b.w	8006bcc <_malloc_r>
 8006b86:	bf00      	nop
 8006b88:	20000068 	.word	0x20000068

08006b8c <sbrk_aligned>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4e0e      	ldr	r6, [pc, #56]	; (8006bc8 <sbrk_aligned+0x3c>)
 8006b90:	460c      	mov	r4, r1
 8006b92:	6831      	ldr	r1, [r6, #0]
 8006b94:	4605      	mov	r5, r0
 8006b96:	b911      	cbnz	r1, 8006b9e <sbrk_aligned+0x12>
 8006b98:	f000 fde8 	bl	800776c <_sbrk_r>
 8006b9c:	6030      	str	r0, [r6, #0]
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	f000 fde3 	bl	800776c <_sbrk_r>
 8006ba6:	1c43      	adds	r3, r0, #1
 8006ba8:	d00a      	beq.n	8006bc0 <sbrk_aligned+0x34>
 8006baa:	1cc4      	adds	r4, r0, #3
 8006bac:	f024 0403 	bic.w	r4, r4, #3
 8006bb0:	42a0      	cmp	r0, r4
 8006bb2:	d007      	beq.n	8006bc4 <sbrk_aligned+0x38>
 8006bb4:	1a21      	subs	r1, r4, r0
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f000 fdd8 	bl	800776c <_sbrk_r>
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d101      	bne.n	8006bc4 <sbrk_aligned+0x38>
 8006bc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	bd70      	pop	{r4, r5, r6, pc}
 8006bc8:	200044ac 	.word	0x200044ac

08006bcc <_malloc_r>:
 8006bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd0:	1ccd      	adds	r5, r1, #3
 8006bd2:	f025 0503 	bic.w	r5, r5, #3
 8006bd6:	3508      	adds	r5, #8
 8006bd8:	2d0c      	cmp	r5, #12
 8006bda:	bf38      	it	cc
 8006bdc:	250c      	movcc	r5, #12
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	4607      	mov	r7, r0
 8006be2:	db01      	blt.n	8006be8 <_malloc_r+0x1c>
 8006be4:	42a9      	cmp	r1, r5
 8006be6:	d905      	bls.n	8006bf4 <_malloc_r+0x28>
 8006be8:	230c      	movs	r3, #12
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	2600      	movs	r6, #0
 8006bee:	4630      	mov	r0, r6
 8006bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006cc8 <_malloc_r+0xfc>
 8006bf8:	f000 f868 	bl	8006ccc <__malloc_lock>
 8006bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8006c00:	461c      	mov	r4, r3
 8006c02:	bb5c      	cbnz	r4, 8006c5c <_malloc_r+0x90>
 8006c04:	4629      	mov	r1, r5
 8006c06:	4638      	mov	r0, r7
 8006c08:	f7ff ffc0 	bl	8006b8c <sbrk_aligned>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	4604      	mov	r4, r0
 8006c10:	d155      	bne.n	8006cbe <_malloc_r+0xf2>
 8006c12:	f8d8 4000 	ldr.w	r4, [r8]
 8006c16:	4626      	mov	r6, r4
 8006c18:	2e00      	cmp	r6, #0
 8006c1a:	d145      	bne.n	8006ca8 <_malloc_r+0xdc>
 8006c1c:	2c00      	cmp	r4, #0
 8006c1e:	d048      	beq.n	8006cb2 <_malloc_r+0xe6>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	4631      	mov	r1, r6
 8006c24:	4638      	mov	r0, r7
 8006c26:	eb04 0903 	add.w	r9, r4, r3
 8006c2a:	f000 fd9f 	bl	800776c <_sbrk_r>
 8006c2e:	4581      	cmp	r9, r0
 8006c30:	d13f      	bne.n	8006cb2 <_malloc_r+0xe6>
 8006c32:	6821      	ldr	r1, [r4, #0]
 8006c34:	1a6d      	subs	r5, r5, r1
 8006c36:	4629      	mov	r1, r5
 8006c38:	4638      	mov	r0, r7
 8006c3a:	f7ff ffa7 	bl	8006b8c <sbrk_aligned>
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d037      	beq.n	8006cb2 <_malloc_r+0xe6>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	442b      	add	r3, r5
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	f8d8 3000 	ldr.w	r3, [r8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d038      	beq.n	8006cc2 <_malloc_r+0xf6>
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	42a2      	cmp	r2, r4
 8006c54:	d12b      	bne.n	8006cae <_malloc_r+0xe2>
 8006c56:	2200      	movs	r2, #0
 8006c58:	605a      	str	r2, [r3, #4]
 8006c5a:	e00f      	b.n	8006c7c <_malloc_r+0xb0>
 8006c5c:	6822      	ldr	r2, [r4, #0]
 8006c5e:	1b52      	subs	r2, r2, r5
 8006c60:	d41f      	bmi.n	8006ca2 <_malloc_r+0xd6>
 8006c62:	2a0b      	cmp	r2, #11
 8006c64:	d917      	bls.n	8006c96 <_malloc_r+0xca>
 8006c66:	1961      	adds	r1, r4, r5
 8006c68:	42a3      	cmp	r3, r4
 8006c6a:	6025      	str	r5, [r4, #0]
 8006c6c:	bf18      	it	ne
 8006c6e:	6059      	strne	r1, [r3, #4]
 8006c70:	6863      	ldr	r3, [r4, #4]
 8006c72:	bf08      	it	eq
 8006c74:	f8c8 1000 	streq.w	r1, [r8]
 8006c78:	5162      	str	r2, [r4, r5]
 8006c7a:	604b      	str	r3, [r1, #4]
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	f104 060b 	add.w	r6, r4, #11
 8006c82:	f000 f829 	bl	8006cd8 <__malloc_unlock>
 8006c86:	f026 0607 	bic.w	r6, r6, #7
 8006c8a:	1d23      	adds	r3, r4, #4
 8006c8c:	1af2      	subs	r2, r6, r3
 8006c8e:	d0ae      	beq.n	8006bee <_malloc_r+0x22>
 8006c90:	1b9b      	subs	r3, r3, r6
 8006c92:	50a3      	str	r3, [r4, r2]
 8006c94:	e7ab      	b.n	8006bee <_malloc_r+0x22>
 8006c96:	42a3      	cmp	r3, r4
 8006c98:	6862      	ldr	r2, [r4, #4]
 8006c9a:	d1dd      	bne.n	8006c58 <_malloc_r+0x8c>
 8006c9c:	f8c8 2000 	str.w	r2, [r8]
 8006ca0:	e7ec      	b.n	8006c7c <_malloc_r+0xb0>
 8006ca2:	4623      	mov	r3, r4
 8006ca4:	6864      	ldr	r4, [r4, #4]
 8006ca6:	e7ac      	b.n	8006c02 <_malloc_r+0x36>
 8006ca8:	4634      	mov	r4, r6
 8006caa:	6876      	ldr	r6, [r6, #4]
 8006cac:	e7b4      	b.n	8006c18 <_malloc_r+0x4c>
 8006cae:	4613      	mov	r3, r2
 8006cb0:	e7cc      	b.n	8006c4c <_malloc_r+0x80>
 8006cb2:	230c      	movs	r3, #12
 8006cb4:	603b      	str	r3, [r7, #0]
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	f000 f80e 	bl	8006cd8 <__malloc_unlock>
 8006cbc:	e797      	b.n	8006bee <_malloc_r+0x22>
 8006cbe:	6025      	str	r5, [r4, #0]
 8006cc0:	e7dc      	b.n	8006c7c <_malloc_r+0xb0>
 8006cc2:	605b      	str	r3, [r3, #4]
 8006cc4:	deff      	udf	#255	; 0xff
 8006cc6:	bf00      	nop
 8006cc8:	200044a8 	.word	0x200044a8

08006ccc <__malloc_lock>:
 8006ccc:	4801      	ldr	r0, [pc, #4]	; (8006cd4 <__malloc_lock+0x8>)
 8006cce:	f7ff b87c 	b.w	8005dca <__retarget_lock_acquire_recursive>
 8006cd2:	bf00      	nop
 8006cd4:	200044a4 	.word	0x200044a4

08006cd8 <__malloc_unlock>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	; (8006ce0 <__malloc_unlock+0x8>)
 8006cda:	f7ff b877 	b.w	8005dcc <__retarget_lock_release_recursive>
 8006cde:	bf00      	nop
 8006ce0:	200044a4 	.word	0x200044a4

08006ce4 <_Balloc>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	69c6      	ldr	r6, [r0, #28]
 8006ce8:	4604      	mov	r4, r0
 8006cea:	460d      	mov	r5, r1
 8006cec:	b976      	cbnz	r6, 8006d0c <_Balloc+0x28>
 8006cee:	2010      	movs	r0, #16
 8006cf0:	f7ff ff44 	bl	8006b7c <malloc>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	61e0      	str	r0, [r4, #28]
 8006cf8:	b920      	cbnz	r0, 8006d04 <_Balloc+0x20>
 8006cfa:	4b18      	ldr	r3, [pc, #96]	; (8006d5c <_Balloc+0x78>)
 8006cfc:	4818      	ldr	r0, [pc, #96]	; (8006d60 <_Balloc+0x7c>)
 8006cfe:	216b      	movs	r1, #107	; 0x6b
 8006d00:	f000 fd44 	bl	800778c <__assert_func>
 8006d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d08:	6006      	str	r6, [r0, #0]
 8006d0a:	60c6      	str	r6, [r0, #12]
 8006d0c:	69e6      	ldr	r6, [r4, #28]
 8006d0e:	68f3      	ldr	r3, [r6, #12]
 8006d10:	b183      	cbz	r3, 8006d34 <_Balloc+0x50>
 8006d12:	69e3      	ldr	r3, [r4, #28]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d1a:	b9b8      	cbnz	r0, 8006d4c <_Balloc+0x68>
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	fa01 f605 	lsl.w	r6, r1, r5
 8006d22:	1d72      	adds	r2, r6, #5
 8006d24:	0092      	lsls	r2, r2, #2
 8006d26:	4620      	mov	r0, r4
 8006d28:	f000 fd4e 	bl	80077c8 <_calloc_r>
 8006d2c:	b160      	cbz	r0, 8006d48 <_Balloc+0x64>
 8006d2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d32:	e00e      	b.n	8006d52 <_Balloc+0x6e>
 8006d34:	2221      	movs	r2, #33	; 0x21
 8006d36:	2104      	movs	r1, #4
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 fd45 	bl	80077c8 <_calloc_r>
 8006d3e:	69e3      	ldr	r3, [r4, #28]
 8006d40:	60f0      	str	r0, [r6, #12]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e4      	bne.n	8006d12 <_Balloc+0x2e>
 8006d48:	2000      	movs	r0, #0
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	6802      	ldr	r2, [r0, #0]
 8006d4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d52:	2300      	movs	r3, #0
 8006d54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d58:	e7f7      	b.n	8006d4a <_Balloc+0x66>
 8006d5a:	bf00      	nop
 8006d5c:	080081cd 	.word	0x080081cd
 8006d60:	0800824d 	.word	0x0800824d

08006d64 <_Bfree>:
 8006d64:	b570      	push	{r4, r5, r6, lr}
 8006d66:	69c6      	ldr	r6, [r0, #28]
 8006d68:	4605      	mov	r5, r0
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	b976      	cbnz	r6, 8006d8c <_Bfree+0x28>
 8006d6e:	2010      	movs	r0, #16
 8006d70:	f7ff ff04 	bl	8006b7c <malloc>
 8006d74:	4602      	mov	r2, r0
 8006d76:	61e8      	str	r0, [r5, #28]
 8006d78:	b920      	cbnz	r0, 8006d84 <_Bfree+0x20>
 8006d7a:	4b09      	ldr	r3, [pc, #36]	; (8006da0 <_Bfree+0x3c>)
 8006d7c:	4809      	ldr	r0, [pc, #36]	; (8006da4 <_Bfree+0x40>)
 8006d7e:	218f      	movs	r1, #143	; 0x8f
 8006d80:	f000 fd04 	bl	800778c <__assert_func>
 8006d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d88:	6006      	str	r6, [r0, #0]
 8006d8a:	60c6      	str	r6, [r0, #12]
 8006d8c:	b13c      	cbz	r4, 8006d9e <_Bfree+0x3a>
 8006d8e:	69eb      	ldr	r3, [r5, #28]
 8006d90:	6862      	ldr	r2, [r4, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d98:	6021      	str	r1, [r4, #0]
 8006d9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	080081cd 	.word	0x080081cd
 8006da4:	0800824d 	.word	0x0800824d

08006da8 <__multadd>:
 8006da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dac:	690d      	ldr	r5, [r1, #16]
 8006dae:	4607      	mov	r7, r0
 8006db0:	460c      	mov	r4, r1
 8006db2:	461e      	mov	r6, r3
 8006db4:	f101 0c14 	add.w	ip, r1, #20
 8006db8:	2000      	movs	r0, #0
 8006dba:	f8dc 3000 	ldr.w	r3, [ip]
 8006dbe:	b299      	uxth	r1, r3
 8006dc0:	fb02 6101 	mla	r1, r2, r1, r6
 8006dc4:	0c1e      	lsrs	r6, r3, #16
 8006dc6:	0c0b      	lsrs	r3, r1, #16
 8006dc8:	fb02 3306 	mla	r3, r2, r6, r3
 8006dcc:	b289      	uxth	r1, r1
 8006dce:	3001      	adds	r0, #1
 8006dd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006dd4:	4285      	cmp	r5, r0
 8006dd6:	f84c 1b04 	str.w	r1, [ip], #4
 8006dda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006dde:	dcec      	bgt.n	8006dba <__multadd+0x12>
 8006de0:	b30e      	cbz	r6, 8006e26 <__multadd+0x7e>
 8006de2:	68a3      	ldr	r3, [r4, #8]
 8006de4:	42ab      	cmp	r3, r5
 8006de6:	dc19      	bgt.n	8006e1c <__multadd+0x74>
 8006de8:	6861      	ldr	r1, [r4, #4]
 8006dea:	4638      	mov	r0, r7
 8006dec:	3101      	adds	r1, #1
 8006dee:	f7ff ff79 	bl	8006ce4 <_Balloc>
 8006df2:	4680      	mov	r8, r0
 8006df4:	b928      	cbnz	r0, 8006e02 <__multadd+0x5a>
 8006df6:	4602      	mov	r2, r0
 8006df8:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <__multadd+0x84>)
 8006dfa:	480d      	ldr	r0, [pc, #52]	; (8006e30 <__multadd+0x88>)
 8006dfc:	21ba      	movs	r1, #186	; 0xba
 8006dfe:	f000 fcc5 	bl	800778c <__assert_func>
 8006e02:	6922      	ldr	r2, [r4, #16]
 8006e04:	3202      	adds	r2, #2
 8006e06:	f104 010c 	add.w	r1, r4, #12
 8006e0a:	0092      	lsls	r2, r2, #2
 8006e0c:	300c      	adds	r0, #12
 8006e0e:	f7fe ffde 	bl	8005dce <memcpy>
 8006e12:	4621      	mov	r1, r4
 8006e14:	4638      	mov	r0, r7
 8006e16:	f7ff ffa5 	bl	8006d64 <_Bfree>
 8006e1a:	4644      	mov	r4, r8
 8006e1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e20:	3501      	adds	r5, #1
 8006e22:	615e      	str	r6, [r3, #20]
 8006e24:	6125      	str	r5, [r4, #16]
 8006e26:	4620      	mov	r0, r4
 8006e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e2c:	0800823c 	.word	0x0800823c
 8006e30:	0800824d 	.word	0x0800824d

08006e34 <__hi0bits>:
 8006e34:	0c03      	lsrs	r3, r0, #16
 8006e36:	041b      	lsls	r3, r3, #16
 8006e38:	b9d3      	cbnz	r3, 8006e70 <__hi0bits+0x3c>
 8006e3a:	0400      	lsls	r0, r0, #16
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e42:	bf04      	itt	eq
 8006e44:	0200      	lsleq	r0, r0, #8
 8006e46:	3308      	addeq	r3, #8
 8006e48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e4c:	bf04      	itt	eq
 8006e4e:	0100      	lsleq	r0, r0, #4
 8006e50:	3304      	addeq	r3, #4
 8006e52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e56:	bf04      	itt	eq
 8006e58:	0080      	lsleq	r0, r0, #2
 8006e5a:	3302      	addeq	r3, #2
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	db05      	blt.n	8006e6c <__hi0bits+0x38>
 8006e60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e64:	f103 0301 	add.w	r3, r3, #1
 8006e68:	bf08      	it	eq
 8006e6a:	2320      	moveq	r3, #32
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	4770      	bx	lr
 8006e70:	2300      	movs	r3, #0
 8006e72:	e7e4      	b.n	8006e3e <__hi0bits+0xa>

08006e74 <__lo0bits>:
 8006e74:	6803      	ldr	r3, [r0, #0]
 8006e76:	f013 0207 	ands.w	r2, r3, #7
 8006e7a:	d00c      	beq.n	8006e96 <__lo0bits+0x22>
 8006e7c:	07d9      	lsls	r1, r3, #31
 8006e7e:	d422      	bmi.n	8006ec6 <__lo0bits+0x52>
 8006e80:	079a      	lsls	r2, r3, #30
 8006e82:	bf49      	itett	mi
 8006e84:	085b      	lsrmi	r3, r3, #1
 8006e86:	089b      	lsrpl	r3, r3, #2
 8006e88:	6003      	strmi	r3, [r0, #0]
 8006e8a:	2201      	movmi	r2, #1
 8006e8c:	bf5c      	itt	pl
 8006e8e:	6003      	strpl	r3, [r0, #0]
 8006e90:	2202      	movpl	r2, #2
 8006e92:	4610      	mov	r0, r2
 8006e94:	4770      	bx	lr
 8006e96:	b299      	uxth	r1, r3
 8006e98:	b909      	cbnz	r1, 8006e9e <__lo0bits+0x2a>
 8006e9a:	0c1b      	lsrs	r3, r3, #16
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	b2d9      	uxtb	r1, r3
 8006ea0:	b909      	cbnz	r1, 8006ea6 <__lo0bits+0x32>
 8006ea2:	3208      	adds	r2, #8
 8006ea4:	0a1b      	lsrs	r3, r3, #8
 8006ea6:	0719      	lsls	r1, r3, #28
 8006ea8:	bf04      	itt	eq
 8006eaa:	091b      	lsreq	r3, r3, #4
 8006eac:	3204      	addeq	r2, #4
 8006eae:	0799      	lsls	r1, r3, #30
 8006eb0:	bf04      	itt	eq
 8006eb2:	089b      	lsreq	r3, r3, #2
 8006eb4:	3202      	addeq	r2, #2
 8006eb6:	07d9      	lsls	r1, r3, #31
 8006eb8:	d403      	bmi.n	8006ec2 <__lo0bits+0x4e>
 8006eba:	085b      	lsrs	r3, r3, #1
 8006ebc:	f102 0201 	add.w	r2, r2, #1
 8006ec0:	d003      	beq.n	8006eca <__lo0bits+0x56>
 8006ec2:	6003      	str	r3, [r0, #0]
 8006ec4:	e7e5      	b.n	8006e92 <__lo0bits+0x1e>
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	e7e3      	b.n	8006e92 <__lo0bits+0x1e>
 8006eca:	2220      	movs	r2, #32
 8006ecc:	e7e1      	b.n	8006e92 <__lo0bits+0x1e>
	...

08006ed0 <__i2b>:
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	f7ff ff05 	bl	8006ce4 <_Balloc>
 8006eda:	4602      	mov	r2, r0
 8006edc:	b928      	cbnz	r0, 8006eea <__i2b+0x1a>
 8006ede:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <__i2b+0x24>)
 8006ee0:	4805      	ldr	r0, [pc, #20]	; (8006ef8 <__i2b+0x28>)
 8006ee2:	f240 1145 	movw	r1, #325	; 0x145
 8006ee6:	f000 fc51 	bl	800778c <__assert_func>
 8006eea:	2301      	movs	r3, #1
 8006eec:	6144      	str	r4, [r0, #20]
 8006eee:	6103      	str	r3, [r0, #16]
 8006ef0:	bd10      	pop	{r4, pc}
 8006ef2:	bf00      	nop
 8006ef4:	0800823c 	.word	0x0800823c
 8006ef8:	0800824d 	.word	0x0800824d

08006efc <__multiply>:
 8006efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f00:	4691      	mov	r9, r2
 8006f02:	690a      	ldr	r2, [r1, #16]
 8006f04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	bfb8      	it	lt
 8006f0c:	460b      	movlt	r3, r1
 8006f0e:	460c      	mov	r4, r1
 8006f10:	bfbc      	itt	lt
 8006f12:	464c      	movlt	r4, r9
 8006f14:	4699      	movlt	r9, r3
 8006f16:	6927      	ldr	r7, [r4, #16]
 8006f18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f1c:	68a3      	ldr	r3, [r4, #8]
 8006f1e:	6861      	ldr	r1, [r4, #4]
 8006f20:	eb07 060a 	add.w	r6, r7, sl
 8006f24:	42b3      	cmp	r3, r6
 8006f26:	b085      	sub	sp, #20
 8006f28:	bfb8      	it	lt
 8006f2a:	3101      	addlt	r1, #1
 8006f2c:	f7ff feda 	bl	8006ce4 <_Balloc>
 8006f30:	b930      	cbnz	r0, 8006f40 <__multiply+0x44>
 8006f32:	4602      	mov	r2, r0
 8006f34:	4b44      	ldr	r3, [pc, #272]	; (8007048 <__multiply+0x14c>)
 8006f36:	4845      	ldr	r0, [pc, #276]	; (800704c <__multiply+0x150>)
 8006f38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006f3c:	f000 fc26 	bl	800778c <__assert_func>
 8006f40:	f100 0514 	add.w	r5, r0, #20
 8006f44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f48:	462b      	mov	r3, r5
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4543      	cmp	r3, r8
 8006f4e:	d321      	bcc.n	8006f94 <__multiply+0x98>
 8006f50:	f104 0314 	add.w	r3, r4, #20
 8006f54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f58:	f109 0314 	add.w	r3, r9, #20
 8006f5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f60:	9202      	str	r2, [sp, #8]
 8006f62:	1b3a      	subs	r2, r7, r4
 8006f64:	3a15      	subs	r2, #21
 8006f66:	f022 0203 	bic.w	r2, r2, #3
 8006f6a:	3204      	adds	r2, #4
 8006f6c:	f104 0115 	add.w	r1, r4, #21
 8006f70:	428f      	cmp	r7, r1
 8006f72:	bf38      	it	cc
 8006f74:	2204      	movcc	r2, #4
 8006f76:	9201      	str	r2, [sp, #4]
 8006f78:	9a02      	ldr	r2, [sp, #8]
 8006f7a:	9303      	str	r3, [sp, #12]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d80c      	bhi.n	8006f9a <__multiply+0x9e>
 8006f80:	2e00      	cmp	r6, #0
 8006f82:	dd03      	ble.n	8006f8c <__multiply+0x90>
 8006f84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d05b      	beq.n	8007044 <__multiply+0x148>
 8006f8c:	6106      	str	r6, [r0, #16]
 8006f8e:	b005      	add	sp, #20
 8006f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f94:	f843 2b04 	str.w	r2, [r3], #4
 8006f98:	e7d8      	b.n	8006f4c <__multiply+0x50>
 8006f9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f9e:	f1ba 0f00 	cmp.w	sl, #0
 8006fa2:	d024      	beq.n	8006fee <__multiply+0xf2>
 8006fa4:	f104 0e14 	add.w	lr, r4, #20
 8006fa8:	46a9      	mov	r9, r5
 8006faa:	f04f 0c00 	mov.w	ip, #0
 8006fae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006fb2:	f8d9 1000 	ldr.w	r1, [r9]
 8006fb6:	fa1f fb82 	uxth.w	fp, r2
 8006fba:	b289      	uxth	r1, r1
 8006fbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8006fc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006fc4:	f8d9 2000 	ldr.w	r2, [r9]
 8006fc8:	4461      	add	r1, ip
 8006fca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fce:	fb0a c20b 	mla	r2, sl, fp, ip
 8006fd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006fd6:	b289      	uxth	r1, r1
 8006fd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006fdc:	4577      	cmp	r7, lr
 8006fde:	f849 1b04 	str.w	r1, [r9], #4
 8006fe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fe6:	d8e2      	bhi.n	8006fae <__multiply+0xb2>
 8006fe8:	9a01      	ldr	r2, [sp, #4]
 8006fea:	f845 c002 	str.w	ip, [r5, r2]
 8006fee:	9a03      	ldr	r2, [sp, #12]
 8006ff0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	f1b9 0f00 	cmp.w	r9, #0
 8006ffa:	d021      	beq.n	8007040 <__multiply+0x144>
 8006ffc:	6829      	ldr	r1, [r5, #0]
 8006ffe:	f104 0c14 	add.w	ip, r4, #20
 8007002:	46ae      	mov	lr, r5
 8007004:	f04f 0a00 	mov.w	sl, #0
 8007008:	f8bc b000 	ldrh.w	fp, [ip]
 800700c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007010:	fb09 220b 	mla	r2, r9, fp, r2
 8007014:	4452      	add	r2, sl
 8007016:	b289      	uxth	r1, r1
 8007018:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800701c:	f84e 1b04 	str.w	r1, [lr], #4
 8007020:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007024:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007028:	f8be 1000 	ldrh.w	r1, [lr]
 800702c:	fb09 110a 	mla	r1, r9, sl, r1
 8007030:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007034:	4567      	cmp	r7, ip
 8007036:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800703a:	d8e5      	bhi.n	8007008 <__multiply+0x10c>
 800703c:	9a01      	ldr	r2, [sp, #4]
 800703e:	50a9      	str	r1, [r5, r2]
 8007040:	3504      	adds	r5, #4
 8007042:	e799      	b.n	8006f78 <__multiply+0x7c>
 8007044:	3e01      	subs	r6, #1
 8007046:	e79b      	b.n	8006f80 <__multiply+0x84>
 8007048:	0800823c 	.word	0x0800823c
 800704c:	0800824d 	.word	0x0800824d

08007050 <__pow5mult>:
 8007050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007054:	4615      	mov	r5, r2
 8007056:	f012 0203 	ands.w	r2, r2, #3
 800705a:	4606      	mov	r6, r0
 800705c:	460f      	mov	r7, r1
 800705e:	d007      	beq.n	8007070 <__pow5mult+0x20>
 8007060:	4c25      	ldr	r4, [pc, #148]	; (80070f8 <__pow5mult+0xa8>)
 8007062:	3a01      	subs	r2, #1
 8007064:	2300      	movs	r3, #0
 8007066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800706a:	f7ff fe9d 	bl	8006da8 <__multadd>
 800706e:	4607      	mov	r7, r0
 8007070:	10ad      	asrs	r5, r5, #2
 8007072:	d03d      	beq.n	80070f0 <__pow5mult+0xa0>
 8007074:	69f4      	ldr	r4, [r6, #28]
 8007076:	b97c      	cbnz	r4, 8007098 <__pow5mult+0x48>
 8007078:	2010      	movs	r0, #16
 800707a:	f7ff fd7f 	bl	8006b7c <malloc>
 800707e:	4602      	mov	r2, r0
 8007080:	61f0      	str	r0, [r6, #28]
 8007082:	b928      	cbnz	r0, 8007090 <__pow5mult+0x40>
 8007084:	4b1d      	ldr	r3, [pc, #116]	; (80070fc <__pow5mult+0xac>)
 8007086:	481e      	ldr	r0, [pc, #120]	; (8007100 <__pow5mult+0xb0>)
 8007088:	f240 11b3 	movw	r1, #435	; 0x1b3
 800708c:	f000 fb7e 	bl	800778c <__assert_func>
 8007090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007094:	6004      	str	r4, [r0, #0]
 8007096:	60c4      	str	r4, [r0, #12]
 8007098:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800709c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070a0:	b94c      	cbnz	r4, 80070b6 <__pow5mult+0x66>
 80070a2:	f240 2171 	movw	r1, #625	; 0x271
 80070a6:	4630      	mov	r0, r6
 80070a8:	f7ff ff12 	bl	8006ed0 <__i2b>
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80070b2:	4604      	mov	r4, r0
 80070b4:	6003      	str	r3, [r0, #0]
 80070b6:	f04f 0900 	mov.w	r9, #0
 80070ba:	07eb      	lsls	r3, r5, #31
 80070bc:	d50a      	bpl.n	80070d4 <__pow5mult+0x84>
 80070be:	4639      	mov	r1, r7
 80070c0:	4622      	mov	r2, r4
 80070c2:	4630      	mov	r0, r6
 80070c4:	f7ff ff1a 	bl	8006efc <__multiply>
 80070c8:	4639      	mov	r1, r7
 80070ca:	4680      	mov	r8, r0
 80070cc:	4630      	mov	r0, r6
 80070ce:	f7ff fe49 	bl	8006d64 <_Bfree>
 80070d2:	4647      	mov	r7, r8
 80070d4:	106d      	asrs	r5, r5, #1
 80070d6:	d00b      	beq.n	80070f0 <__pow5mult+0xa0>
 80070d8:	6820      	ldr	r0, [r4, #0]
 80070da:	b938      	cbnz	r0, 80070ec <__pow5mult+0x9c>
 80070dc:	4622      	mov	r2, r4
 80070de:	4621      	mov	r1, r4
 80070e0:	4630      	mov	r0, r6
 80070e2:	f7ff ff0b 	bl	8006efc <__multiply>
 80070e6:	6020      	str	r0, [r4, #0]
 80070e8:	f8c0 9000 	str.w	r9, [r0]
 80070ec:	4604      	mov	r4, r0
 80070ee:	e7e4      	b.n	80070ba <__pow5mult+0x6a>
 80070f0:	4638      	mov	r0, r7
 80070f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070f6:	bf00      	nop
 80070f8:	08008398 	.word	0x08008398
 80070fc:	080081cd 	.word	0x080081cd
 8007100:	0800824d 	.word	0x0800824d

08007104 <__lshift>:
 8007104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	460c      	mov	r4, r1
 800710a:	6849      	ldr	r1, [r1, #4]
 800710c:	6923      	ldr	r3, [r4, #16]
 800710e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007112:	68a3      	ldr	r3, [r4, #8]
 8007114:	4607      	mov	r7, r0
 8007116:	4691      	mov	r9, r2
 8007118:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800711c:	f108 0601 	add.w	r6, r8, #1
 8007120:	42b3      	cmp	r3, r6
 8007122:	db0b      	blt.n	800713c <__lshift+0x38>
 8007124:	4638      	mov	r0, r7
 8007126:	f7ff fddd 	bl	8006ce4 <_Balloc>
 800712a:	4605      	mov	r5, r0
 800712c:	b948      	cbnz	r0, 8007142 <__lshift+0x3e>
 800712e:	4602      	mov	r2, r0
 8007130:	4b28      	ldr	r3, [pc, #160]	; (80071d4 <__lshift+0xd0>)
 8007132:	4829      	ldr	r0, [pc, #164]	; (80071d8 <__lshift+0xd4>)
 8007134:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007138:	f000 fb28 	bl	800778c <__assert_func>
 800713c:	3101      	adds	r1, #1
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	e7ee      	b.n	8007120 <__lshift+0x1c>
 8007142:	2300      	movs	r3, #0
 8007144:	f100 0114 	add.w	r1, r0, #20
 8007148:	f100 0210 	add.w	r2, r0, #16
 800714c:	4618      	mov	r0, r3
 800714e:	4553      	cmp	r3, sl
 8007150:	db33      	blt.n	80071ba <__lshift+0xb6>
 8007152:	6920      	ldr	r0, [r4, #16]
 8007154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007158:	f104 0314 	add.w	r3, r4, #20
 800715c:	f019 091f 	ands.w	r9, r9, #31
 8007160:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007164:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007168:	d02b      	beq.n	80071c2 <__lshift+0xbe>
 800716a:	f1c9 0e20 	rsb	lr, r9, #32
 800716e:	468a      	mov	sl, r1
 8007170:	2200      	movs	r2, #0
 8007172:	6818      	ldr	r0, [r3, #0]
 8007174:	fa00 f009 	lsl.w	r0, r0, r9
 8007178:	4310      	orrs	r0, r2
 800717a:	f84a 0b04 	str.w	r0, [sl], #4
 800717e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007182:	459c      	cmp	ip, r3
 8007184:	fa22 f20e 	lsr.w	r2, r2, lr
 8007188:	d8f3      	bhi.n	8007172 <__lshift+0x6e>
 800718a:	ebac 0304 	sub.w	r3, ip, r4
 800718e:	3b15      	subs	r3, #21
 8007190:	f023 0303 	bic.w	r3, r3, #3
 8007194:	3304      	adds	r3, #4
 8007196:	f104 0015 	add.w	r0, r4, #21
 800719a:	4584      	cmp	ip, r0
 800719c:	bf38      	it	cc
 800719e:	2304      	movcc	r3, #4
 80071a0:	50ca      	str	r2, [r1, r3]
 80071a2:	b10a      	cbz	r2, 80071a8 <__lshift+0xa4>
 80071a4:	f108 0602 	add.w	r6, r8, #2
 80071a8:	3e01      	subs	r6, #1
 80071aa:	4638      	mov	r0, r7
 80071ac:	612e      	str	r6, [r5, #16]
 80071ae:	4621      	mov	r1, r4
 80071b0:	f7ff fdd8 	bl	8006d64 <_Bfree>
 80071b4:	4628      	mov	r0, r5
 80071b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80071be:	3301      	adds	r3, #1
 80071c0:	e7c5      	b.n	800714e <__lshift+0x4a>
 80071c2:	3904      	subs	r1, #4
 80071c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80071cc:	459c      	cmp	ip, r3
 80071ce:	d8f9      	bhi.n	80071c4 <__lshift+0xc0>
 80071d0:	e7ea      	b.n	80071a8 <__lshift+0xa4>
 80071d2:	bf00      	nop
 80071d4:	0800823c 	.word	0x0800823c
 80071d8:	0800824d 	.word	0x0800824d

080071dc <__mcmp>:
 80071dc:	b530      	push	{r4, r5, lr}
 80071de:	6902      	ldr	r2, [r0, #16]
 80071e0:	690c      	ldr	r4, [r1, #16]
 80071e2:	1b12      	subs	r2, r2, r4
 80071e4:	d10e      	bne.n	8007204 <__mcmp+0x28>
 80071e6:	f100 0314 	add.w	r3, r0, #20
 80071ea:	3114      	adds	r1, #20
 80071ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80071f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80071f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80071f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80071fc:	42a5      	cmp	r5, r4
 80071fe:	d003      	beq.n	8007208 <__mcmp+0x2c>
 8007200:	d305      	bcc.n	800720e <__mcmp+0x32>
 8007202:	2201      	movs	r2, #1
 8007204:	4610      	mov	r0, r2
 8007206:	bd30      	pop	{r4, r5, pc}
 8007208:	4283      	cmp	r3, r0
 800720a:	d3f3      	bcc.n	80071f4 <__mcmp+0x18>
 800720c:	e7fa      	b.n	8007204 <__mcmp+0x28>
 800720e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007212:	e7f7      	b.n	8007204 <__mcmp+0x28>

08007214 <__mdiff>:
 8007214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	460c      	mov	r4, r1
 800721a:	4606      	mov	r6, r0
 800721c:	4611      	mov	r1, r2
 800721e:	4620      	mov	r0, r4
 8007220:	4690      	mov	r8, r2
 8007222:	f7ff ffdb 	bl	80071dc <__mcmp>
 8007226:	1e05      	subs	r5, r0, #0
 8007228:	d110      	bne.n	800724c <__mdiff+0x38>
 800722a:	4629      	mov	r1, r5
 800722c:	4630      	mov	r0, r6
 800722e:	f7ff fd59 	bl	8006ce4 <_Balloc>
 8007232:	b930      	cbnz	r0, 8007242 <__mdiff+0x2e>
 8007234:	4b3a      	ldr	r3, [pc, #232]	; (8007320 <__mdiff+0x10c>)
 8007236:	4602      	mov	r2, r0
 8007238:	f240 2137 	movw	r1, #567	; 0x237
 800723c:	4839      	ldr	r0, [pc, #228]	; (8007324 <__mdiff+0x110>)
 800723e:	f000 faa5 	bl	800778c <__assert_func>
 8007242:	2301      	movs	r3, #1
 8007244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724c:	bfa4      	itt	ge
 800724e:	4643      	movge	r3, r8
 8007250:	46a0      	movge	r8, r4
 8007252:	4630      	mov	r0, r6
 8007254:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007258:	bfa6      	itte	ge
 800725a:	461c      	movge	r4, r3
 800725c:	2500      	movge	r5, #0
 800725e:	2501      	movlt	r5, #1
 8007260:	f7ff fd40 	bl	8006ce4 <_Balloc>
 8007264:	b920      	cbnz	r0, 8007270 <__mdiff+0x5c>
 8007266:	4b2e      	ldr	r3, [pc, #184]	; (8007320 <__mdiff+0x10c>)
 8007268:	4602      	mov	r2, r0
 800726a:	f240 2145 	movw	r1, #581	; 0x245
 800726e:	e7e5      	b.n	800723c <__mdiff+0x28>
 8007270:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007274:	6926      	ldr	r6, [r4, #16]
 8007276:	60c5      	str	r5, [r0, #12]
 8007278:	f104 0914 	add.w	r9, r4, #20
 800727c:	f108 0514 	add.w	r5, r8, #20
 8007280:	f100 0e14 	add.w	lr, r0, #20
 8007284:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007288:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800728c:	f108 0210 	add.w	r2, r8, #16
 8007290:	46f2      	mov	sl, lr
 8007292:	2100      	movs	r1, #0
 8007294:	f859 3b04 	ldr.w	r3, [r9], #4
 8007298:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800729c:	fa11 f88b 	uxtah	r8, r1, fp
 80072a0:	b299      	uxth	r1, r3
 80072a2:	0c1b      	lsrs	r3, r3, #16
 80072a4:	eba8 0801 	sub.w	r8, r8, r1
 80072a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072b0:	fa1f f888 	uxth.w	r8, r8
 80072b4:	1419      	asrs	r1, r3, #16
 80072b6:	454e      	cmp	r6, r9
 80072b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80072bc:	f84a 3b04 	str.w	r3, [sl], #4
 80072c0:	d8e8      	bhi.n	8007294 <__mdiff+0x80>
 80072c2:	1b33      	subs	r3, r6, r4
 80072c4:	3b15      	subs	r3, #21
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	3304      	adds	r3, #4
 80072cc:	3415      	adds	r4, #21
 80072ce:	42a6      	cmp	r6, r4
 80072d0:	bf38      	it	cc
 80072d2:	2304      	movcc	r3, #4
 80072d4:	441d      	add	r5, r3
 80072d6:	4473      	add	r3, lr
 80072d8:	469e      	mov	lr, r3
 80072da:	462e      	mov	r6, r5
 80072dc:	4566      	cmp	r6, ip
 80072de:	d30e      	bcc.n	80072fe <__mdiff+0xea>
 80072e0:	f10c 0203 	add.w	r2, ip, #3
 80072e4:	1b52      	subs	r2, r2, r5
 80072e6:	f022 0203 	bic.w	r2, r2, #3
 80072ea:	3d03      	subs	r5, #3
 80072ec:	45ac      	cmp	ip, r5
 80072ee:	bf38      	it	cc
 80072f0:	2200      	movcc	r2, #0
 80072f2:	4413      	add	r3, r2
 80072f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80072f8:	b17a      	cbz	r2, 800731a <__mdiff+0x106>
 80072fa:	6107      	str	r7, [r0, #16]
 80072fc:	e7a4      	b.n	8007248 <__mdiff+0x34>
 80072fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8007302:	fa11 f288 	uxtah	r2, r1, r8
 8007306:	1414      	asrs	r4, r2, #16
 8007308:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800730c:	b292      	uxth	r2, r2
 800730e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007312:	f84e 2b04 	str.w	r2, [lr], #4
 8007316:	1421      	asrs	r1, r4, #16
 8007318:	e7e0      	b.n	80072dc <__mdiff+0xc8>
 800731a:	3f01      	subs	r7, #1
 800731c:	e7ea      	b.n	80072f4 <__mdiff+0xe0>
 800731e:	bf00      	nop
 8007320:	0800823c 	.word	0x0800823c
 8007324:	0800824d 	.word	0x0800824d

08007328 <__d2b>:
 8007328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800732c:	460f      	mov	r7, r1
 800732e:	2101      	movs	r1, #1
 8007330:	ec59 8b10 	vmov	r8, r9, d0
 8007334:	4616      	mov	r6, r2
 8007336:	f7ff fcd5 	bl	8006ce4 <_Balloc>
 800733a:	4604      	mov	r4, r0
 800733c:	b930      	cbnz	r0, 800734c <__d2b+0x24>
 800733e:	4602      	mov	r2, r0
 8007340:	4b24      	ldr	r3, [pc, #144]	; (80073d4 <__d2b+0xac>)
 8007342:	4825      	ldr	r0, [pc, #148]	; (80073d8 <__d2b+0xb0>)
 8007344:	f240 310f 	movw	r1, #783	; 0x30f
 8007348:	f000 fa20 	bl	800778c <__assert_func>
 800734c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007354:	bb2d      	cbnz	r5, 80073a2 <__d2b+0x7a>
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	f1b8 0300 	subs.w	r3, r8, #0
 800735c:	d026      	beq.n	80073ac <__d2b+0x84>
 800735e:	4668      	mov	r0, sp
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	f7ff fd87 	bl	8006e74 <__lo0bits>
 8007366:	e9dd 1200 	ldrd	r1, r2, [sp]
 800736a:	b1e8      	cbz	r0, 80073a8 <__d2b+0x80>
 800736c:	f1c0 0320 	rsb	r3, r0, #32
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	430b      	orrs	r3, r1
 8007376:	40c2      	lsrs	r2, r0
 8007378:	6163      	str	r3, [r4, #20]
 800737a:	9201      	str	r2, [sp, #4]
 800737c:	9b01      	ldr	r3, [sp, #4]
 800737e:	61a3      	str	r3, [r4, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf14      	ite	ne
 8007384:	2202      	movne	r2, #2
 8007386:	2201      	moveq	r2, #1
 8007388:	6122      	str	r2, [r4, #16]
 800738a:	b1bd      	cbz	r5, 80073bc <__d2b+0x94>
 800738c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007390:	4405      	add	r5, r0
 8007392:	603d      	str	r5, [r7, #0]
 8007394:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007398:	6030      	str	r0, [r6, #0]
 800739a:	4620      	mov	r0, r4
 800739c:	b003      	add	sp, #12
 800739e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073a6:	e7d6      	b.n	8007356 <__d2b+0x2e>
 80073a8:	6161      	str	r1, [r4, #20]
 80073aa:	e7e7      	b.n	800737c <__d2b+0x54>
 80073ac:	a801      	add	r0, sp, #4
 80073ae:	f7ff fd61 	bl	8006e74 <__lo0bits>
 80073b2:	9b01      	ldr	r3, [sp, #4]
 80073b4:	6163      	str	r3, [r4, #20]
 80073b6:	3020      	adds	r0, #32
 80073b8:	2201      	movs	r2, #1
 80073ba:	e7e5      	b.n	8007388 <__d2b+0x60>
 80073bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073c4:	6038      	str	r0, [r7, #0]
 80073c6:	6918      	ldr	r0, [r3, #16]
 80073c8:	f7ff fd34 	bl	8006e34 <__hi0bits>
 80073cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073d0:	e7e2      	b.n	8007398 <__d2b+0x70>
 80073d2:	bf00      	nop
 80073d4:	0800823c 	.word	0x0800823c
 80073d8:	0800824d 	.word	0x0800824d

080073dc <__sfputc_r>:
 80073dc:	6893      	ldr	r3, [r2, #8]
 80073de:	3b01      	subs	r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	b410      	push	{r4}
 80073e4:	6093      	str	r3, [r2, #8]
 80073e6:	da08      	bge.n	80073fa <__sfputc_r+0x1e>
 80073e8:	6994      	ldr	r4, [r2, #24]
 80073ea:	42a3      	cmp	r3, r4
 80073ec:	db01      	blt.n	80073f2 <__sfputc_r+0x16>
 80073ee:	290a      	cmp	r1, #10
 80073f0:	d103      	bne.n	80073fa <__sfputc_r+0x1e>
 80073f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073f6:	f7fe bb80 	b.w	8005afa <__swbuf_r>
 80073fa:	6813      	ldr	r3, [r2, #0]
 80073fc:	1c58      	adds	r0, r3, #1
 80073fe:	6010      	str	r0, [r2, #0]
 8007400:	7019      	strb	r1, [r3, #0]
 8007402:	4608      	mov	r0, r1
 8007404:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007408:	4770      	bx	lr

0800740a <__sfputs_r>:
 800740a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740c:	4606      	mov	r6, r0
 800740e:	460f      	mov	r7, r1
 8007410:	4614      	mov	r4, r2
 8007412:	18d5      	adds	r5, r2, r3
 8007414:	42ac      	cmp	r4, r5
 8007416:	d101      	bne.n	800741c <__sfputs_r+0x12>
 8007418:	2000      	movs	r0, #0
 800741a:	e007      	b.n	800742c <__sfputs_r+0x22>
 800741c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007420:	463a      	mov	r2, r7
 8007422:	4630      	mov	r0, r6
 8007424:	f7ff ffda 	bl	80073dc <__sfputc_r>
 8007428:	1c43      	adds	r3, r0, #1
 800742a:	d1f3      	bne.n	8007414 <__sfputs_r+0xa>
 800742c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007430 <_vfiprintf_r>:
 8007430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	460d      	mov	r5, r1
 8007436:	b09d      	sub	sp, #116	; 0x74
 8007438:	4614      	mov	r4, r2
 800743a:	4698      	mov	r8, r3
 800743c:	4606      	mov	r6, r0
 800743e:	b118      	cbz	r0, 8007448 <_vfiprintf_r+0x18>
 8007440:	6a03      	ldr	r3, [r0, #32]
 8007442:	b90b      	cbnz	r3, 8007448 <_vfiprintf_r+0x18>
 8007444:	f7fe fa72 	bl	800592c <__sinit>
 8007448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800744a:	07d9      	lsls	r1, r3, #31
 800744c:	d405      	bmi.n	800745a <_vfiprintf_r+0x2a>
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	059a      	lsls	r2, r3, #22
 8007452:	d402      	bmi.n	800745a <_vfiprintf_r+0x2a>
 8007454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007456:	f7fe fcb8 	bl	8005dca <__retarget_lock_acquire_recursive>
 800745a:	89ab      	ldrh	r3, [r5, #12]
 800745c:	071b      	lsls	r3, r3, #28
 800745e:	d501      	bpl.n	8007464 <_vfiprintf_r+0x34>
 8007460:	692b      	ldr	r3, [r5, #16]
 8007462:	b99b      	cbnz	r3, 800748c <_vfiprintf_r+0x5c>
 8007464:	4629      	mov	r1, r5
 8007466:	4630      	mov	r0, r6
 8007468:	f7fe fb84 	bl	8005b74 <__swsetup_r>
 800746c:	b170      	cbz	r0, 800748c <_vfiprintf_r+0x5c>
 800746e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007470:	07dc      	lsls	r4, r3, #31
 8007472:	d504      	bpl.n	800747e <_vfiprintf_r+0x4e>
 8007474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007478:	b01d      	add	sp, #116	; 0x74
 800747a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800747e:	89ab      	ldrh	r3, [r5, #12]
 8007480:	0598      	lsls	r0, r3, #22
 8007482:	d4f7      	bmi.n	8007474 <_vfiprintf_r+0x44>
 8007484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007486:	f7fe fca1 	bl	8005dcc <__retarget_lock_release_recursive>
 800748a:	e7f3      	b.n	8007474 <_vfiprintf_r+0x44>
 800748c:	2300      	movs	r3, #0
 800748e:	9309      	str	r3, [sp, #36]	; 0x24
 8007490:	2320      	movs	r3, #32
 8007492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007496:	f8cd 800c 	str.w	r8, [sp, #12]
 800749a:	2330      	movs	r3, #48	; 0x30
 800749c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007650 <_vfiprintf_r+0x220>
 80074a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074a4:	f04f 0901 	mov.w	r9, #1
 80074a8:	4623      	mov	r3, r4
 80074aa:	469a      	mov	sl, r3
 80074ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b0:	b10a      	cbz	r2, 80074b6 <_vfiprintf_r+0x86>
 80074b2:	2a25      	cmp	r2, #37	; 0x25
 80074b4:	d1f9      	bne.n	80074aa <_vfiprintf_r+0x7a>
 80074b6:	ebba 0b04 	subs.w	fp, sl, r4
 80074ba:	d00b      	beq.n	80074d4 <_vfiprintf_r+0xa4>
 80074bc:	465b      	mov	r3, fp
 80074be:	4622      	mov	r2, r4
 80074c0:	4629      	mov	r1, r5
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7ff ffa1 	bl	800740a <__sfputs_r>
 80074c8:	3001      	adds	r0, #1
 80074ca:	f000 80a9 	beq.w	8007620 <_vfiprintf_r+0x1f0>
 80074ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d0:	445a      	add	r2, fp
 80074d2:	9209      	str	r2, [sp, #36]	; 0x24
 80074d4:	f89a 3000 	ldrb.w	r3, [sl]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 80a1 	beq.w	8007620 <_vfiprintf_r+0x1f0>
 80074de:	2300      	movs	r3, #0
 80074e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074e8:	f10a 0a01 	add.w	sl, sl, #1
 80074ec:	9304      	str	r3, [sp, #16]
 80074ee:	9307      	str	r3, [sp, #28]
 80074f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074f4:	931a      	str	r3, [sp, #104]	; 0x68
 80074f6:	4654      	mov	r4, sl
 80074f8:	2205      	movs	r2, #5
 80074fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fe:	4854      	ldr	r0, [pc, #336]	; (8007650 <_vfiprintf_r+0x220>)
 8007500:	f7f8 fe66 	bl	80001d0 <memchr>
 8007504:	9a04      	ldr	r2, [sp, #16]
 8007506:	b9d8      	cbnz	r0, 8007540 <_vfiprintf_r+0x110>
 8007508:	06d1      	lsls	r1, r2, #27
 800750a:	bf44      	itt	mi
 800750c:	2320      	movmi	r3, #32
 800750e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007512:	0713      	lsls	r3, r2, #28
 8007514:	bf44      	itt	mi
 8007516:	232b      	movmi	r3, #43	; 0x2b
 8007518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800751c:	f89a 3000 	ldrb.w	r3, [sl]
 8007520:	2b2a      	cmp	r3, #42	; 0x2a
 8007522:	d015      	beq.n	8007550 <_vfiprintf_r+0x120>
 8007524:	9a07      	ldr	r2, [sp, #28]
 8007526:	4654      	mov	r4, sl
 8007528:	2000      	movs	r0, #0
 800752a:	f04f 0c0a 	mov.w	ip, #10
 800752e:	4621      	mov	r1, r4
 8007530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007534:	3b30      	subs	r3, #48	; 0x30
 8007536:	2b09      	cmp	r3, #9
 8007538:	d94d      	bls.n	80075d6 <_vfiprintf_r+0x1a6>
 800753a:	b1b0      	cbz	r0, 800756a <_vfiprintf_r+0x13a>
 800753c:	9207      	str	r2, [sp, #28]
 800753e:	e014      	b.n	800756a <_vfiprintf_r+0x13a>
 8007540:	eba0 0308 	sub.w	r3, r0, r8
 8007544:	fa09 f303 	lsl.w	r3, r9, r3
 8007548:	4313      	orrs	r3, r2
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	46a2      	mov	sl, r4
 800754e:	e7d2      	b.n	80074f6 <_vfiprintf_r+0xc6>
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	1d19      	adds	r1, r3, #4
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	9103      	str	r1, [sp, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	bfbb      	ittet	lt
 800755c:	425b      	neglt	r3, r3
 800755e:	f042 0202 	orrlt.w	r2, r2, #2
 8007562:	9307      	strge	r3, [sp, #28]
 8007564:	9307      	strlt	r3, [sp, #28]
 8007566:	bfb8      	it	lt
 8007568:	9204      	strlt	r2, [sp, #16]
 800756a:	7823      	ldrb	r3, [r4, #0]
 800756c:	2b2e      	cmp	r3, #46	; 0x2e
 800756e:	d10c      	bne.n	800758a <_vfiprintf_r+0x15a>
 8007570:	7863      	ldrb	r3, [r4, #1]
 8007572:	2b2a      	cmp	r3, #42	; 0x2a
 8007574:	d134      	bne.n	80075e0 <_vfiprintf_r+0x1b0>
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	1d1a      	adds	r2, r3, #4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	9203      	str	r2, [sp, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	bfb8      	it	lt
 8007582:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007586:	3402      	adds	r4, #2
 8007588:	9305      	str	r3, [sp, #20]
 800758a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007660 <_vfiprintf_r+0x230>
 800758e:	7821      	ldrb	r1, [r4, #0]
 8007590:	2203      	movs	r2, #3
 8007592:	4650      	mov	r0, sl
 8007594:	f7f8 fe1c 	bl	80001d0 <memchr>
 8007598:	b138      	cbz	r0, 80075aa <_vfiprintf_r+0x17a>
 800759a:	9b04      	ldr	r3, [sp, #16]
 800759c:	eba0 000a 	sub.w	r0, r0, sl
 80075a0:	2240      	movs	r2, #64	; 0x40
 80075a2:	4082      	lsls	r2, r0
 80075a4:	4313      	orrs	r3, r2
 80075a6:	3401      	adds	r4, #1
 80075a8:	9304      	str	r3, [sp, #16]
 80075aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ae:	4829      	ldr	r0, [pc, #164]	; (8007654 <_vfiprintf_r+0x224>)
 80075b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075b4:	2206      	movs	r2, #6
 80075b6:	f7f8 fe0b 	bl	80001d0 <memchr>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d03f      	beq.n	800763e <_vfiprintf_r+0x20e>
 80075be:	4b26      	ldr	r3, [pc, #152]	; (8007658 <_vfiprintf_r+0x228>)
 80075c0:	bb1b      	cbnz	r3, 800760a <_vfiprintf_r+0x1da>
 80075c2:	9b03      	ldr	r3, [sp, #12]
 80075c4:	3307      	adds	r3, #7
 80075c6:	f023 0307 	bic.w	r3, r3, #7
 80075ca:	3308      	adds	r3, #8
 80075cc:	9303      	str	r3, [sp, #12]
 80075ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d0:	443b      	add	r3, r7
 80075d2:	9309      	str	r3, [sp, #36]	; 0x24
 80075d4:	e768      	b.n	80074a8 <_vfiprintf_r+0x78>
 80075d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80075da:	460c      	mov	r4, r1
 80075dc:	2001      	movs	r0, #1
 80075de:	e7a6      	b.n	800752e <_vfiprintf_r+0xfe>
 80075e0:	2300      	movs	r3, #0
 80075e2:	3401      	adds	r4, #1
 80075e4:	9305      	str	r3, [sp, #20]
 80075e6:	4619      	mov	r1, r3
 80075e8:	f04f 0c0a 	mov.w	ip, #10
 80075ec:	4620      	mov	r0, r4
 80075ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075f2:	3a30      	subs	r2, #48	; 0x30
 80075f4:	2a09      	cmp	r2, #9
 80075f6:	d903      	bls.n	8007600 <_vfiprintf_r+0x1d0>
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0c6      	beq.n	800758a <_vfiprintf_r+0x15a>
 80075fc:	9105      	str	r1, [sp, #20]
 80075fe:	e7c4      	b.n	800758a <_vfiprintf_r+0x15a>
 8007600:	fb0c 2101 	mla	r1, ip, r1, r2
 8007604:	4604      	mov	r4, r0
 8007606:	2301      	movs	r3, #1
 8007608:	e7f0      	b.n	80075ec <_vfiprintf_r+0x1bc>
 800760a:	ab03      	add	r3, sp, #12
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	462a      	mov	r2, r5
 8007610:	4b12      	ldr	r3, [pc, #72]	; (800765c <_vfiprintf_r+0x22c>)
 8007612:	a904      	add	r1, sp, #16
 8007614:	4630      	mov	r0, r6
 8007616:	f7fd fc89 	bl	8004f2c <_printf_float>
 800761a:	4607      	mov	r7, r0
 800761c:	1c78      	adds	r0, r7, #1
 800761e:	d1d6      	bne.n	80075ce <_vfiprintf_r+0x19e>
 8007620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007622:	07d9      	lsls	r1, r3, #31
 8007624:	d405      	bmi.n	8007632 <_vfiprintf_r+0x202>
 8007626:	89ab      	ldrh	r3, [r5, #12]
 8007628:	059a      	lsls	r2, r3, #22
 800762a:	d402      	bmi.n	8007632 <_vfiprintf_r+0x202>
 800762c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800762e:	f7fe fbcd 	bl	8005dcc <__retarget_lock_release_recursive>
 8007632:	89ab      	ldrh	r3, [r5, #12]
 8007634:	065b      	lsls	r3, r3, #25
 8007636:	f53f af1d 	bmi.w	8007474 <_vfiprintf_r+0x44>
 800763a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800763c:	e71c      	b.n	8007478 <_vfiprintf_r+0x48>
 800763e:	ab03      	add	r3, sp, #12
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	462a      	mov	r2, r5
 8007644:	4b05      	ldr	r3, [pc, #20]	; (800765c <_vfiprintf_r+0x22c>)
 8007646:	a904      	add	r1, sp, #16
 8007648:	4630      	mov	r0, r6
 800764a:	f7fd ff13 	bl	8005474 <_printf_i>
 800764e:	e7e4      	b.n	800761a <_vfiprintf_r+0x1ea>
 8007650:	080083a4 	.word	0x080083a4
 8007654:	080083ae 	.word	0x080083ae
 8007658:	08004f2d 	.word	0x08004f2d
 800765c:	0800740b 	.word	0x0800740b
 8007660:	080083aa 	.word	0x080083aa

08007664 <__swhatbuf_r>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	460c      	mov	r4, r1
 8007668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800766c:	2900      	cmp	r1, #0
 800766e:	b096      	sub	sp, #88	; 0x58
 8007670:	4615      	mov	r5, r2
 8007672:	461e      	mov	r6, r3
 8007674:	da0d      	bge.n	8007692 <__swhatbuf_r+0x2e>
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	f013 0f80 	tst.w	r3, #128	; 0x80
 800767c:	f04f 0100 	mov.w	r1, #0
 8007680:	bf0c      	ite	eq
 8007682:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007686:	2340      	movne	r3, #64	; 0x40
 8007688:	2000      	movs	r0, #0
 800768a:	6031      	str	r1, [r6, #0]
 800768c:	602b      	str	r3, [r5, #0]
 800768e:	b016      	add	sp, #88	; 0x58
 8007690:	bd70      	pop	{r4, r5, r6, pc}
 8007692:	466a      	mov	r2, sp
 8007694:	f000 f848 	bl	8007728 <_fstat_r>
 8007698:	2800      	cmp	r0, #0
 800769a:	dbec      	blt.n	8007676 <__swhatbuf_r+0x12>
 800769c:	9901      	ldr	r1, [sp, #4]
 800769e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80076a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80076a6:	4259      	negs	r1, r3
 80076a8:	4159      	adcs	r1, r3
 80076aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076ae:	e7eb      	b.n	8007688 <__swhatbuf_r+0x24>

080076b0 <__smakebuf_r>:
 80076b0:	898b      	ldrh	r3, [r1, #12]
 80076b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076b4:	079d      	lsls	r5, r3, #30
 80076b6:	4606      	mov	r6, r0
 80076b8:	460c      	mov	r4, r1
 80076ba:	d507      	bpl.n	80076cc <__smakebuf_r+0x1c>
 80076bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	6123      	str	r3, [r4, #16]
 80076c4:	2301      	movs	r3, #1
 80076c6:	6163      	str	r3, [r4, #20]
 80076c8:	b002      	add	sp, #8
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	ab01      	add	r3, sp, #4
 80076ce:	466a      	mov	r2, sp
 80076d0:	f7ff ffc8 	bl	8007664 <__swhatbuf_r>
 80076d4:	9900      	ldr	r1, [sp, #0]
 80076d6:	4605      	mov	r5, r0
 80076d8:	4630      	mov	r0, r6
 80076da:	f7ff fa77 	bl	8006bcc <_malloc_r>
 80076de:	b948      	cbnz	r0, 80076f4 <__smakebuf_r+0x44>
 80076e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076e4:	059a      	lsls	r2, r3, #22
 80076e6:	d4ef      	bmi.n	80076c8 <__smakebuf_r+0x18>
 80076e8:	f023 0303 	bic.w	r3, r3, #3
 80076ec:	f043 0302 	orr.w	r3, r3, #2
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	e7e3      	b.n	80076bc <__smakebuf_r+0xc>
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	6020      	str	r0, [r4, #0]
 80076f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	9b00      	ldr	r3, [sp, #0]
 8007700:	6163      	str	r3, [r4, #20]
 8007702:	9b01      	ldr	r3, [sp, #4]
 8007704:	6120      	str	r0, [r4, #16]
 8007706:	b15b      	cbz	r3, 8007720 <__smakebuf_r+0x70>
 8007708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800770c:	4630      	mov	r0, r6
 800770e:	f000 f81d 	bl	800774c <_isatty_r>
 8007712:	b128      	cbz	r0, 8007720 <__smakebuf_r+0x70>
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	f023 0303 	bic.w	r3, r3, #3
 800771a:	f043 0301 	orr.w	r3, r3, #1
 800771e:	81a3      	strh	r3, [r4, #12]
 8007720:	89a3      	ldrh	r3, [r4, #12]
 8007722:	431d      	orrs	r5, r3
 8007724:	81a5      	strh	r5, [r4, #12]
 8007726:	e7cf      	b.n	80076c8 <__smakebuf_r+0x18>

08007728 <_fstat_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	4d07      	ldr	r5, [pc, #28]	; (8007748 <_fstat_r+0x20>)
 800772c:	2300      	movs	r3, #0
 800772e:	4604      	mov	r4, r0
 8007730:	4608      	mov	r0, r1
 8007732:	4611      	mov	r1, r2
 8007734:	602b      	str	r3, [r5, #0]
 8007736:	f7f9 ff16 	bl	8001566 <_fstat>
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	d102      	bne.n	8007744 <_fstat_r+0x1c>
 800773e:	682b      	ldr	r3, [r5, #0]
 8007740:	b103      	cbz	r3, 8007744 <_fstat_r+0x1c>
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	bd38      	pop	{r3, r4, r5, pc}
 8007746:	bf00      	nop
 8007748:	200044a0 	.word	0x200044a0

0800774c <_isatty_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	4d06      	ldr	r5, [pc, #24]	; (8007768 <_isatty_r+0x1c>)
 8007750:	2300      	movs	r3, #0
 8007752:	4604      	mov	r4, r0
 8007754:	4608      	mov	r0, r1
 8007756:	602b      	str	r3, [r5, #0]
 8007758:	f7f9 ff15 	bl	8001586 <_isatty>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d102      	bne.n	8007766 <_isatty_r+0x1a>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	b103      	cbz	r3, 8007766 <_isatty_r+0x1a>
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	200044a0 	.word	0x200044a0

0800776c <_sbrk_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	4d06      	ldr	r5, [pc, #24]	; (8007788 <_sbrk_r+0x1c>)
 8007770:	2300      	movs	r3, #0
 8007772:	4604      	mov	r4, r0
 8007774:	4608      	mov	r0, r1
 8007776:	602b      	str	r3, [r5, #0]
 8007778:	f7f9 ff1e 	bl	80015b8 <_sbrk>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d102      	bne.n	8007786 <_sbrk_r+0x1a>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	b103      	cbz	r3, 8007786 <_sbrk_r+0x1a>
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	bd38      	pop	{r3, r4, r5, pc}
 8007788:	200044a0 	.word	0x200044a0

0800778c <__assert_func>:
 800778c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800778e:	4614      	mov	r4, r2
 8007790:	461a      	mov	r2, r3
 8007792:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <__assert_func+0x2c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4605      	mov	r5, r0
 8007798:	68d8      	ldr	r0, [r3, #12]
 800779a:	b14c      	cbz	r4, 80077b0 <__assert_func+0x24>
 800779c:	4b07      	ldr	r3, [pc, #28]	; (80077bc <__assert_func+0x30>)
 800779e:	9100      	str	r1, [sp, #0]
 80077a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077a4:	4906      	ldr	r1, [pc, #24]	; (80077c0 <__assert_func+0x34>)
 80077a6:	462b      	mov	r3, r5
 80077a8:	f000 f844 	bl	8007834 <fiprintf>
 80077ac:	f000 f854 	bl	8007858 <abort>
 80077b0:	4b04      	ldr	r3, [pc, #16]	; (80077c4 <__assert_func+0x38>)
 80077b2:	461c      	mov	r4, r3
 80077b4:	e7f3      	b.n	800779e <__assert_func+0x12>
 80077b6:	bf00      	nop
 80077b8:	20000068 	.word	0x20000068
 80077bc:	080083bf 	.word	0x080083bf
 80077c0:	080083cc 	.word	0x080083cc
 80077c4:	080083fa 	.word	0x080083fa

080077c8 <_calloc_r>:
 80077c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077ca:	fba1 2402 	umull	r2, r4, r1, r2
 80077ce:	b94c      	cbnz	r4, 80077e4 <_calloc_r+0x1c>
 80077d0:	4611      	mov	r1, r2
 80077d2:	9201      	str	r2, [sp, #4]
 80077d4:	f7ff f9fa 	bl	8006bcc <_malloc_r>
 80077d8:	9a01      	ldr	r2, [sp, #4]
 80077da:	4605      	mov	r5, r0
 80077dc:	b930      	cbnz	r0, 80077ec <_calloc_r+0x24>
 80077de:	4628      	mov	r0, r5
 80077e0:	b003      	add	sp, #12
 80077e2:	bd30      	pop	{r4, r5, pc}
 80077e4:	220c      	movs	r2, #12
 80077e6:	6002      	str	r2, [r0, #0]
 80077e8:	2500      	movs	r5, #0
 80077ea:	e7f8      	b.n	80077de <_calloc_r+0x16>
 80077ec:	4621      	mov	r1, r4
 80077ee:	f7fe fa19 	bl	8005c24 <memset>
 80077f2:	e7f4      	b.n	80077de <_calloc_r+0x16>

080077f4 <__ascii_mbtowc>:
 80077f4:	b082      	sub	sp, #8
 80077f6:	b901      	cbnz	r1, 80077fa <__ascii_mbtowc+0x6>
 80077f8:	a901      	add	r1, sp, #4
 80077fa:	b142      	cbz	r2, 800780e <__ascii_mbtowc+0x1a>
 80077fc:	b14b      	cbz	r3, 8007812 <__ascii_mbtowc+0x1e>
 80077fe:	7813      	ldrb	r3, [r2, #0]
 8007800:	600b      	str	r3, [r1, #0]
 8007802:	7812      	ldrb	r2, [r2, #0]
 8007804:	1e10      	subs	r0, r2, #0
 8007806:	bf18      	it	ne
 8007808:	2001      	movne	r0, #1
 800780a:	b002      	add	sp, #8
 800780c:	4770      	bx	lr
 800780e:	4610      	mov	r0, r2
 8007810:	e7fb      	b.n	800780a <__ascii_mbtowc+0x16>
 8007812:	f06f 0001 	mvn.w	r0, #1
 8007816:	e7f8      	b.n	800780a <__ascii_mbtowc+0x16>

08007818 <__ascii_wctomb>:
 8007818:	b149      	cbz	r1, 800782e <__ascii_wctomb+0x16>
 800781a:	2aff      	cmp	r2, #255	; 0xff
 800781c:	bf85      	ittet	hi
 800781e:	238a      	movhi	r3, #138	; 0x8a
 8007820:	6003      	strhi	r3, [r0, #0]
 8007822:	700a      	strbls	r2, [r1, #0]
 8007824:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007828:	bf98      	it	ls
 800782a:	2001      	movls	r0, #1
 800782c:	4770      	bx	lr
 800782e:	4608      	mov	r0, r1
 8007830:	4770      	bx	lr
	...

08007834 <fiprintf>:
 8007834:	b40e      	push	{r1, r2, r3}
 8007836:	b503      	push	{r0, r1, lr}
 8007838:	4601      	mov	r1, r0
 800783a:	ab03      	add	r3, sp, #12
 800783c:	4805      	ldr	r0, [pc, #20]	; (8007854 <fiprintf+0x20>)
 800783e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007842:	6800      	ldr	r0, [r0, #0]
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	f7ff fdf3 	bl	8007430 <_vfiprintf_r>
 800784a:	b002      	add	sp, #8
 800784c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007850:	b003      	add	sp, #12
 8007852:	4770      	bx	lr
 8007854:	20000068 	.word	0x20000068

08007858 <abort>:
 8007858:	b508      	push	{r3, lr}
 800785a:	2006      	movs	r0, #6
 800785c:	f000 f82c 	bl	80078b8 <raise>
 8007860:	2001      	movs	r0, #1
 8007862:	f7f9 fe4d 	bl	8001500 <_exit>

08007866 <_raise_r>:
 8007866:	291f      	cmp	r1, #31
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4604      	mov	r4, r0
 800786c:	460d      	mov	r5, r1
 800786e:	d904      	bls.n	800787a <_raise_r+0x14>
 8007870:	2316      	movs	r3, #22
 8007872:	6003      	str	r3, [r0, #0]
 8007874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007878:	bd38      	pop	{r3, r4, r5, pc}
 800787a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800787c:	b112      	cbz	r2, 8007884 <_raise_r+0x1e>
 800787e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007882:	b94b      	cbnz	r3, 8007898 <_raise_r+0x32>
 8007884:	4620      	mov	r0, r4
 8007886:	f000 f831 	bl	80078ec <_getpid_r>
 800788a:	462a      	mov	r2, r5
 800788c:	4601      	mov	r1, r0
 800788e:	4620      	mov	r0, r4
 8007890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007894:	f000 b818 	b.w	80078c8 <_kill_r>
 8007898:	2b01      	cmp	r3, #1
 800789a:	d00a      	beq.n	80078b2 <_raise_r+0x4c>
 800789c:	1c59      	adds	r1, r3, #1
 800789e:	d103      	bne.n	80078a8 <_raise_r+0x42>
 80078a0:	2316      	movs	r3, #22
 80078a2:	6003      	str	r3, [r0, #0]
 80078a4:	2001      	movs	r0, #1
 80078a6:	e7e7      	b.n	8007878 <_raise_r+0x12>
 80078a8:	2400      	movs	r4, #0
 80078aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078ae:	4628      	mov	r0, r5
 80078b0:	4798      	blx	r3
 80078b2:	2000      	movs	r0, #0
 80078b4:	e7e0      	b.n	8007878 <_raise_r+0x12>
	...

080078b8 <raise>:
 80078b8:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <raise+0xc>)
 80078ba:	4601      	mov	r1, r0
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	f7ff bfd2 	b.w	8007866 <_raise_r>
 80078c2:	bf00      	nop
 80078c4:	20000068 	.word	0x20000068

080078c8 <_kill_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d07      	ldr	r5, [pc, #28]	; (80078e8 <_kill_r+0x20>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	4611      	mov	r1, r2
 80078d4:	602b      	str	r3, [r5, #0]
 80078d6:	f7f9 fe03 	bl	80014e0 <_kill>
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	d102      	bne.n	80078e4 <_kill_r+0x1c>
 80078de:	682b      	ldr	r3, [r5, #0]
 80078e0:	b103      	cbz	r3, 80078e4 <_kill_r+0x1c>
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	bd38      	pop	{r3, r4, r5, pc}
 80078e6:	bf00      	nop
 80078e8:	200044a0 	.word	0x200044a0

080078ec <_getpid_r>:
 80078ec:	f7f9 bdf0 	b.w	80014d0 <_getpid>

080078f0 <_init>:
 80078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f2:	bf00      	nop
 80078f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f6:	bc08      	pop	{r3}
 80078f8:	469e      	mov	lr, r3
 80078fa:	4770      	bx	lr

080078fc <_fini>:
 80078fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fe:	bf00      	nop
 8007900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007902:	bc08      	pop	{r3}
 8007904:	469e      	mov	lr, r3
 8007906:	4770      	bx	lr
