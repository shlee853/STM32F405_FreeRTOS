
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b84  08008f70  08008f70  00018f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009af4  08009af4  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  08009af4  08009af4  00019af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009afc  08009afc  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009afc  08009afc  00019afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b00  08009b00  00019b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08009b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       000000a0  20000290  08009d94  00020290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  20000330  08009e34  00020330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  00020358  2**0
                  CONTENTS
 12 .bss          00004720  20000358  20000358  00020358  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  20004a78  20004a78  00020358  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY
 16 .debug_info   00018910  00000000  00000000  000203cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00004361  00000000  00000000  00038cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001598  00000000  00000000  0003d040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001080  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00009d3f  00000000  00000000  0003f658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0001a224  00000000  00000000  00049397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000df7f1  00000000  00000000  000635bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000688c  00000000  00000000  00142dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  00149638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f58 	.word	0x08008f58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	08008f58 	.word	0x08008f58

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	601a      	str	r2, [r3, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f023 0210 	bic.w	r2, r3, #16
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	605a      	str	r2, [r3, #4]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d101      	bne.n	8000f22 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d101      	bne.n	8000f48 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	330c      	adds	r3, #12
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	330c      	adds	r3, #12
 8000f82:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	78fa      	ldrb	r2, [r7, #3]
 8000f88:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	619a      	str	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	041a      	lsls	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	619a      	str	r2, [r3, #24]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b090      	sub	sp, #64	; 0x40
 8001038:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2228      	movs	r2, #40	; 0x28
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f006 f90e 	bl	8007264 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001058:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800105c:	f7ff ffb4 	bl	8000fc8 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff ff99 	bl	8000f98 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001066:	2004      	movs	r0, #4
 8001068:	f7ff ff96 	bl	8000f98 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800106c:	23e0      	movs	r3, #224	; 0xe0
 800106e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001070:	2302      	movs	r3, #2
 8001072:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001080:	2305      	movs	r3, #5
 8001082:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	4825      	ldr	r0, [pc, #148]	; (8001120 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800108a:	f003 fe44 	bl	8004d16 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001092:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001096:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800109c:	2302      	movs	r3, #2
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80010aa:	2310      	movs	r3, #16
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010b6:	230a      	movs	r3, #10
 80010b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	4619      	mov	r1, r3
 80010c0:	4818      	ldr	r0, [pc, #96]	; (8001124 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80010c2:	f003 fecc 	bl	8004e5e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010c6:	2100      	movs	r1, #0
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80010ca:	f7ff ff0b 	bl	8000ee4 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80010ce:	2110      	movs	r1, #16
 80010d0:	4813      	ldr	r0, [pc, #76]	; (8001120 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80010d2:	f7ff ff9f 	bl	8001014 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80010d6:	2310      	movs	r3, #16
 80010d8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010da:	2301      	movs	r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80010ea:	463b      	mov	r3, r7
 80010ec:	4619      	mov	r1, r3
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80010f0:	f003 fe11 	bl	8004d16 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80010f4:	2310      	movs	r3, #16
 80010f6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4808      	ldr	r0, [pc, #32]	; (8001128 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001106:	f003 fe06 	bl	8004d16 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800110c:	f7ff feda 	bl	8000ec4 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001110:	2110      	movs	r1, #16
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001114:	f7ff ff70 	bl	8000ff8 <LL_GPIO_SetOutputPin>
}
 8001118:	bf00      	nop
 800111a:	3740      	adds	r7, #64	; 0x40
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020000 	.word	0x40020000
 8001124:	40013000 	.word	0x40013000
 8001128:	40020800 	.word	0x40020800

0800112c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001136:	bf00      	nop
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <SPI1_SendByte+0x40>)
 800113a:	f7ff fef9 	bl	8000f30 <LL_SPI_IsActiveFlag_TXE>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f9      	beq.n	8001138 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4619      	mov	r1, r3
 8001148:	4808      	ldr	r0, [pc, #32]	; (800116c <SPI1_SendByte+0x40>)
 800114a:	f7ff ff12 	bl	8000f72 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800114e:	bf00      	nop
 8001150:	4806      	ldr	r0, [pc, #24]	; (800116c <SPI1_SendByte+0x40>)
 8001152:	f7ff feda 	bl	8000f0a <LL_SPI_IsActiveFlag_RXNE>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f9      	beq.n	8001150 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <SPI1_SendByte+0x40>)
 800115e:	f7ff fefa 	bl	8000f56 <LL_SPI_ReceiveData8>
 8001162:	4603      	mov	r3, r0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40013000 	.word	0x40013000

08001170 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800117a:	2110      	movs	r1, #16
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <ICM20602_Readbyte+0x3c>)
 800117e:	f7ff ff49 	bl	8001014 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ffce 	bl	800112c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff ffcb 	bl	800112c <SPI1_SendByte>
 8001196:	4603      	mov	r3, r0
 8001198:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800119a:	2110      	movs	r1, #16
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <ICM20602_Readbyte+0x3c>)
 800119e:	f7ff ff2b 	bl	8000ff8 <LL_GPIO_SetOutputPin>
	
	return val;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40020000 	.word	0x40020000

080011b0 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	460a      	mov	r2, r1
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80011c0:	2110      	movs	r1, #16
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <ICM20602_Writebyte+0x40>)
 80011c4:	f7ff ff26 	bl	8001014 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ffab 	bl	800112c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ffa7 	bl	800112c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80011de:	2110      	movs	r1, #16
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <ICM20602_Writebyte+0x40>)
 80011e2:	f7ff ff09 	bl	8000ff8 <LL_GPIO_SetOutputPin>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020000 	.word	0x40020000

080011f4 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001210:	f7ff ff10 	bl	8001034 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001214:	4833      	ldr	r0, [pc, #204]	; (80012e4 <ICM20602_Initialization+0xf0>)
 8001216:	f005 fedf 	bl	8006fd8 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 800121a:	2075      	movs	r0, #117	; 0x75
 800121c:	f7ff ffa8 	bl	8001170 <ICM20602_Readbyte>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b12      	cmp	r3, #18
 8001228:	d105      	bne.n	8001236 <ICM20602_Initialization+0x42>
	{
		printf("\r\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	4619      	mov	r1, r3
 800122e:	482e      	ldr	r0, [pc, #184]	; (80012e8 <ICM20602_Initialization+0xf4>)
 8001230:	f005 fed2 	bl	8006fd8 <iprintf>
 8001234:	e012      	b.n	800125c <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	2b12      	cmp	r3, #18
 800123a:	d00f      	beq.n	800125c <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800123c:	2075      	movs	r0, #117	; 0x75
 800123e:	f7ff ff97 	bl	8001170 <ICM20602_Readbyte>
 8001242:	4603      	mov	r3, r0
 8001244:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	2b12      	cmp	r3, #18
 800124a:	d007      	beq.n	800125c <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	2212      	movs	r2, #18
 8001250:	4619      	mov	r1, r3
 8001252:	4826      	ldr	r0, [pc, #152]	; (80012ec <ICM20602_Initialization+0xf8>)
 8001254:	f005 fec0 	bl	8006fd8 <iprintf>
			return 1; //ERROR
 8001258:	2301      	movs	r3, #1
 800125a:	e03f      	b.n	80012dc <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	206b      	movs	r0, #107	; 0x6b
 8001260:	f7ff ffa6 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001264:	2032      	movs	r0, #50	; 0x32
 8001266:	f001 f8a5 	bl	80023b4 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800126a:	2101      	movs	r1, #1
 800126c:	206b      	movs	r0, #107	; 0x6b
 800126e:	f7ff ff9f 	bl	80011b0 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);;
 8001272:	2032      	movs	r0, #50	; 0x32
 8001274:	f001 f89e 	bl	80023b4 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 8001278:	2100      	movs	r1, #0
 800127a:	206c      	movs	r0, #108	; 0x6c
 800127c:	f7ff ff98 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 8001280:	2032      	movs	r0, #50	; 0x32
 8001282:	f001 f897 	bl	80023b4 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001286:	2100      	movs	r1, #0
 8001288:	2019      	movs	r0, #25
 800128a:	f7ff ff91 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 800128e:	2032      	movs	r0, #50	; 0x32
 8001290:	f001 f890 	bl	80023b4 <HAL_Delay>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001294:	2105      	movs	r1, #5
 8001296:	201a      	movs	r0, #26
 8001298:	f7ff ff8a 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 800129c:	2032      	movs	r0, #50	; 0x32
 800129e:	f001 f889 	bl	80023b4 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80012a2:	2118      	movs	r1, #24
 80012a4:	201b      	movs	r0, #27
 80012a6:	f7ff ff83 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 80012aa:	2032      	movs	r0, #50	; 0x32
 80012ac:	f001 f882 	bl	80023b4 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80012b0:	2118      	movs	r1, #24
 80012b2:	201c      	movs	r0, #28
 80012b4:	f7ff ff7c 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 80012b8:	2032      	movs	r0, #50	; 0x32
 80012ba:	f001 f87b 	bl	80023b4 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80012be:	2103      	movs	r1, #3
 80012c0:	201d      	movs	r0, #29
 80012c2:	f7ff ff75 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 80012c6:	2032      	movs	r0, #50	; 0x32
 80012c8:	f001 f874 	bl	80023b4 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80012cc:	2101      	movs	r1, #1
 80012ce:	2038      	movs	r0, #56	; 0x38
 80012d0:	f7ff ff6e 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 80012d4:	2032      	movs	r0, #50	; 0x32
 80012d6:	f001 f86d 	bl	80023b4 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	08008f70 	.word	0x08008f70
 80012e8:	08008f88 	.word	0x08008f88
 80012ec:	08008fac 	.word	0x08008fac

080012f0 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
    __asm volatile (
 80012fa:	680a      	ldr	r2, [r1, #0]
 80012fc:	f382 8808 	msr	MSP, r2
 8001300:	684a      	ldr	r2, [r1, #4]
 8001302:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 8001304:	e7fe      	b.n	8001304 <branch_to_bootloader+0x14>
	...

08001308 <check_enter_bootloader>:
}

void check_enter_bootloader(){
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 800130e:	491d      	ldr	r1, [pc, #116]	; (8001384 <check_enter_bootloader+0x7c>)
 8001310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001314:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 8001318:	4c1a      	ldr	r4, [pc, #104]	; (8001384 <check_enter_bootloader+0x7c>)
 800131a:	f04f 0000 	mov.w	r0, #0
 800131e:	f04f 0100 	mov.w	r1, #0
 8001322:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 8001326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800132a:	f04f 0000 	mov.w	r0, #0
 800132e:	f04f 0100 	mov.w	r1, #0
 8001332:	0028      	movs	r0, r5
 8001334:	2100      	movs	r1, #0
 8001336:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800133a:	2300      	movs	r3, #0
 800133c:	4912      	ldr	r1, [pc, #72]	; (8001388 <check_enter_bootloader+0x80>)
 800133e:	4411      	add	r1, r2
 8001340:	430b      	orrs	r3, r1
 8001342:	d11a      	bne.n	800137a <check_enter_bootloader+0x72>
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <check_enter_bootloader+0x84>)
 8001346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d014      	beq.n	800137a <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <check_enter_bootloader+0x88>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 8001356:	683c      	ldr	r4, [r7, #0]
 8001358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	000a      	movs	r2, r1
 8001366:	2300      	movs	r3, #0
 8001368:	4613      	mov	r3, r2
 800136a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800136e:	f023 030f 	bic.w	r3, r3, #15
 8001372:	4619      	mov	r1, r3
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff ffbb 	bl	80012f0 <branch_to_bootloader>
    }
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bdb0      	pop	{r4, r5, r7, pc}
 8001382:	bf00      	nop
 8001384:	2001c000 	.word	0x2001c000
 8001388:	fffffa5b 	.word	0xfffffa5b
 800138c:	40023800 	.word	0x40023800
 8001390:	40013800 	.word	0x40013800

08001394 <ledSetForce>:
    ledSet(i, ledLastState[i]);
  }
}

static void ledSetForce(led_t led, bool value)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	460a      	mov	r2, r1
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d832      	bhi.n	8001410 <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <ledSetForce+0x84>)
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d10d      	bne.n	80013d2 <ledSetForce+0x3e>
  {
    value = !value;
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bf14      	ite	ne
 80013bc:	2301      	movne	r3, #1
 80013be:	2300      	moveq	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	f083 0301 	eor.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	71bb      	strb	r3, [r7, #6]
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00d      	beq.n	80013f4 <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <ledSetForce+0x88>)
 80013dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <ledSetForce+0x8c>)
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	2201      	movs	r2, #1
 80013ec:	4619      	mov	r1, r3
 80013ee:	f001 fb45 	bl	8002a7c <HAL_GPIO_WritePin>
 80013f2:	e00e      	b.n	8001412 <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <ledSetForce+0x88>)
 80013f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <ledSetForce+0x8c>)
 8001400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001404:	b29b      	uxth	r3, r3
 8001406:	2200      	movs	r2, #0
 8001408:	4619      	mov	r1, r3
 800140a:	f001 fb37 	bl	8002a7c <HAL_GPIO_WritePin>
 800140e:	e000      	b.n	8001412 <ledSetForce+0x7e>
    return;
 8001410:	bf00      	nop
    }

//  }

}
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000030 	.word	0x20000030
 800141c:	20000000 	.word	0x20000000
 8001420:	20000018 	.word	0x20000018

08001424 <ledInit>:
    ledSetSwitch(LED_LEDSEQ);
  }
}

void ledInit(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 800142a:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <ledInit+0xd0>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d15b      	bne.n	80014ea <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <ledInit+0xd4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a2b      	ldr	r2, [pc, #172]	; (80014f8 <ledInit+0xd4>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <ledInit+0xd4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <ledInit+0xd4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a24      	ldr	r2, [pc, #144]	; (80014f8 <ledInit+0xd4>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <ledInit+0xd4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	e02a      	b.n	80014d6 <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 8001480:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <ledInit+0xd8>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <ledInit+0xdc>)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001490:	b29b      	uxth	r3, r3
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	f001 faf1 	bl	8002a7c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 800149a:	4a19      	ldr	r2, [pc, #100]	; (8001500 <ledInit+0xdc>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014a8:	2301      	movs	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <ledInit+0xd8>)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b8:	f107 0208 	add.w	r2, r7, #8
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 f940 	bl	8002744 <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f81c 	bl	8001508 <ledSet>
  for (i = 0; i < LED_NUM; i++)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	3301      	adds	r3, #1
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	2b05      	cmp	r3, #5
 80014da:	ddd1      	ble.n	8001480 <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <ledInit+0xe0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
  isInit = true;
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <ledInit+0xd0>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	e000      	b.n	80014ec <ledInit+0xc8>
    return;
 80014ea:	bf00      	nop
}
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000374 	.word	0x20000374
 80014f8:	40023800 	.word	0x40023800
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000018 	.word	0x20000018
 8001504:	2000037e 	.word	0x2000037e

08001508 <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	460a      	mov	r2, r1
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	4613      	mov	r3, r2
 8001516:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b05      	cmp	r3, #5
 800151c:	d904      	bls.n	8001528 <ledSet+0x20>
 800151e:	22e4      	movs	r2, #228	; 0xe4
 8001520:	490a      	ldr	r1, [pc, #40]	; (800154c <ledSet+0x44>)
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <ledSet+0x48>)
 8001524:	f000 f968 	bl	80017f8 <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <ledSet+0x4c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d105      	bne.n	800153c <ledSet+0x34>
  {
    ledSetForce(led, value);
 8001530:	79ba      	ldrb	r2, [r7, #6]
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff2c 	bl	8001394 <ledSetForce>
  }

  ledLastState[led] = value;
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	79b9      	ldrb	r1, [r7, #6]
 8001540:	4a05      	ldr	r2, [pc, #20]	; (8001558 <ledSet+0x50>)
 8001542:	54d1      	strb	r1, [r2, r3]
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	08008fd8 	.word	0x08008fd8
 8001550:	08008ff4 	.word	0x08008ff4
 8001554:	2000037e 	.word	0x2000037e
 8001558:	20000378 	.word	0x20000378

0800155c <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 8001560:	2100      	movs	r1, #0
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff ffd0 	bl	8001508 <ledSet>
  ledSet(LED_GREEN_R, 0);
 8001568:	2100      	movs	r1, #0
 800156a:	2003      	movs	r0, #3
 800156c:	f7ff ffcc 	bl	8001508 <ledSet>
  ledSet(LED_RED_L, 1);
 8001570:	2101      	movs	r1, #1
 8001572:	2002      	movs	r0, #2
 8001574:	f7ff ffc8 	bl	8001508 <ledSet>
  ledSet(LED_RED_R, 1);
 8001578:	2101      	movs	r1, #1
 800157a:	2004      	movs	r0, #4
 800157c:	f7ff ffc4 	bl	8001508 <ledSet>
  ledSet(LED_BLUE_L, 0);
 8001580:	2100      	movs	r1, #0
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff ffc0 	bl	8001508 <ledSet>
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 8001592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001596:	461a      	mov	r2, r3
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <systemLaunch+0x28>)
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <systemLaunch+0x2c>)
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	2302      	movs	r3, #2
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2300      	movs	r3, #0
 80015a6:	4905      	ldr	r1, [pc, #20]	; (80015bc <systemLaunch+0x30>)
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <systemLaunch+0x34>)
 80015aa:	f003 fddd 	bl	8005168 <xTaskCreateStatic>
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000290 	.word	0x20000290
 80015b8:	20000380 	.word	0x20000380
 80015bc:	0800901c 	.word	0x0800901c
 80015c0:	080015c5 	.word	0x080015c5

080015c4 <systemTask>:

/* Private functions implementation */

void systemTask(void *arg)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  bool pass = true;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
//  usDelay(1000);	// 1ms
//  time2 = DWT->CYCCNT;
//  printf("delay = %.2f\n",(float)(time2-time1)/CLOCK_PER_USEC);


  ledInit();
 80015d0:	f7ff ff28 	bl	8001424 <ledInit>
  ledSet(CHG_LED, SET);
 80015d4:	2101      	movs	r1, #1
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff ff96 	bl	8001508 <ledSet>
//  usecTimerInit(); 	// main에서 생성
//  i2cdevInit(I2C3_DEV);
//  i2cdevInit(I2C1_DEV);
//  passthroughInit();

  ICM20602_Initialization();
 80015dc:	f7ff fe0a 	bl	80011f4 <ICM20602_Initialization>

}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f897 	bl	8001728 <platformGetListOfConfigurations>
 80015fa:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4619      	mov	r1, r3
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 f855 	bl	80016b0 <platformInitConfiguration>
 8001606:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b30      	cmp	r3, #48	; 0x30
 800162c:	d104      	bne.n	8001638 <platformParseDeviceTypeString+0x1c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3301      	adds	r3, #1
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b3b      	cmp	r3, #59	; 0x3b
 8001636:	d001      	beq.n	800163c <platformParseDeviceTypeString+0x20>
    return 1;
 8001638:	2301      	movs	r3, #1
 800163a:	e034      	b.n	80016a6 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 800163c:	2302      	movs	r3, #2
 800163e:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	3304      	adds	r3, #4
 8001644:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e00e      	b.n	800166e <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00c      	beq.n	8001676 <platformParseDeviceTypeString+0x5a>
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b3b      	cmp	r3, #59	; 0x3b
 8001666:	d006      	beq.n	8001676 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	3301      	adds	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	429a      	cmp	r2, r3
 8001674:	ddec      	ble.n	8001650 <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	429a      	cmp	r2, r3
 800167c:	dd01      	ble.n	8001682 <platformParseDeviceTypeString+0x66>
    return 1;
 800167e:	2301      	movs	r3, #1
 8001680:	e011      	b.n	80016a6 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	4619      	mov	r1, r3
 8001694:	6838      	ldr	r0, [r7, #0]
 8001696:	f005 fece 	bl	8007436 <memcpy>
  deviceType[length] = '\0';
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
  return 0;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b090      	sub	sp, #64	; 0x40
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f852 	bl	8001768 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 80016c4:	f107 020c 	add.w	r2, r7, #12
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ffa4 	bl	800161c <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d8:	e01a      	b.n	8001710 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 80016da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016dc:	4613      	mov	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 80016ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ee:	f107 020c 	add.w	r2, r7, #12
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe fd6b 	bl	80001d0 <strcmp>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d104      	bne.n	800170a <platformInitConfiguration+0x5a>
      active_config = config;
 8001700:	4a08      	ldr	r2, [pc, #32]	; (8001724 <platformInitConfiguration+0x74>)
 8001702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001704:	6013      	str	r3, [r2, #0]
      return 0;
 8001706:	2300      	movs	r3, #0
 8001708:	e007      	b.n	800171a <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 800170a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800170c:	3301      	adds	r3, #1
 800170e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001710:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbe0      	blt.n	80016da <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8001718:	2301      	movs	r3, #1
}
 800171a:	4618      	mov	r0, r3
 800171c:	3740      	adds	r7, #64	; 0x40
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000780 	.word	0x20000780

08001728 <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2203      	movs	r2, #3
 8001734:	601a      	str	r2, [r3, #0]
  return configs;
 8001736:	4b03      	ldr	r3, [pc, #12]	; (8001744 <platformGetListOfConfigurations+0x1c>)
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	20000048 	.word	0x20000048

08001748 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8001756:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800175a:	015b      	lsls	r3, r3, #5
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	e00d      	b.n	8001796 <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 800177a:	6938      	ldr	r0, [r7, #16]
 800177c:	f7ff ffe4 	bl	8001748 <getAddressOfOtpMemoryBlock>
 8001780:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	617b      	str	r3, [r7, #20]
      break;
 800178e:	e005      	b.n	800179c <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	3301      	adds	r3, #1
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	ddee      	ble.n	800177a <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <platformGetDeviceTypeString+0x42>
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2bff      	cmp	r3, #255	; 0xff
 80017a8:	d101      	bne.n	80017ae <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <platformGetDeviceTypeString+0x60>)
 80017ac:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 80017ae:	2220      	movs	r2, #32
 80017b0:	6979      	ldr	r1, [r7, #20]
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f005 fd5e 	bl	8007274 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3320      	adds	r3, #32
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	08009024 	.word	0x08009024

080017cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017d0:	f3bf 8f4f 	dsb	sy
}
 80017d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <__NVIC_SystemReset+0x24>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80017de:	4904      	ldr	r1, [pc, #16]	; (80017f0 <__NVIC_SystemReset+0x24>)
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_SystemReset+0x28>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80017e6:	f3bf 8f4f 	dsb	sy
}
 80017ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <__NVIC_SystemReset+0x20>
 80017f0:	e000ed00 	.word	0xe000ed00
 80017f4:	05fa0004 	.word	0x05fa0004

080017f8 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001808:	f383 8811 	msr	BASEPRI, r3
 800180c:	f3bf 8f6f 	isb	sy
 8001810:	f3bf 8f4f 	dsb	sy
 8001814:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001816:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	68b8      	ldr	r0, [r7, #8]
 800181c:	f000 f810 	bl	8001840 <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 8001820:	f7ff fe9c 	bl	800155c <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <assertFail+0x44>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 8001830:	f7ff ffcc 	bl	80017cc <__NVIC_SystemReset>
  }
}
 8001834:	bf00      	nop
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	e000edf0 	.word	0xe000edf0

08001840 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <storeAssertFileData+0x38>)
 800184c:	4a0b      	ldr	r2, [pc, #44]	; (800187c <storeAssertFileData+0x3c>)
 800184e:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <storeAssertFileData+0x38>)
 8001852:	2201      	movs	r2, #1
 8001854:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <storeAssertFileData+0x38>)
 8001858:	791a      	ldrb	r2, [r3, #4]
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <storeAssertFileData+0x40>)
 800185c:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 800185e:	4a06      	ldr	r2, [pc, #24]	; (8001878 <storeAssertFileData+0x38>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <storeAssertFileData+0x38>)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	60d3      	str	r3, [r2, #12]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000330 	.word	0x20000330
 800187c:	2f8a001f 	.word	0x2f8a001f
 8001880:	20000784 	.word	0x20000784

08001884 <_write>:
//#include "stm32f4xx_hal_def.h"

extern UART_HandleTypeDef huart6;

int _write(int file, char* p, int len)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
		if(HAL_UART_Transmit(&huart6, p, len , 10 )!= 0)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	b29a      	uxth	r2, r3
 8001894:	230a      	movs	r3, #10
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	4806      	ldr	r0, [pc, #24]	; (80018b4 <_write+0x30>)
 800189a:	f002 f93f 	bl	8003b1c <HAL_UART_Transmit>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <_write+0x26>
			//		while(!LL_USART_IsActiveFlag_TXE(USART6));0
			//		usDelay(100);	// 문자 1개 출력당 약 100us 소요, Float, int형 차이 없음
			return -1;
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018a8:	e000      	b.n	80018ac <_write+0x28>
		return len;
 80018aa:	687b      	ldr	r3, [r7, #4]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000a70 	.word	0x20000a70

080018b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80018c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <vApplicationGetIdleTaskMemory+0x30>)
 80018ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2280      	movs	r2, #128	; 0x80
 80018d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000788 	.word	0x20000788
 80018e8:	20000828 	.word	0x20000828

080018ec <LL_SPI_SetStandard>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f023 0210 	bic.w	r2, r3, #16
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	605a      	str	r2, [r3, #4]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <LL_AHB1_GRP1_EnableClock>:
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800191e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001920:	4907      	ldr	r1, [pc, #28]	; (8001940 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4313      	orrs	r3, r2
 8001926:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800192a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4013      	ands	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40023800 	.word	0x40023800

08001944 <LL_APB2_GRP1_EnableClock>:
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <LL_APB2_GRP1_EnableClock+0x2c>)
 800194e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001950:	4907      	ldr	r1, [pc, #28]	; (8001970 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4313      	orrs	r3, r2
 8001956:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <LL_APB2_GRP1_EnableClock+0x2c>)
 800195a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4013      	ands	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40023800 	.word	0x40023800

08001974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001974:	b5b0      	push	{r4, r5, r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800197a:	f000 fca9 	bl	80022d0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800197e:	f000 f875 	bl	8001a6c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001982:	f000 f98f 	bl	8001ca4 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001986:	f000 f963 	bl	8001c50 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 800198a:	f000 f92b 	bl	8001be4 <MX_TIM7_Init>
  MX_SPI1_Init();
 800198e:	f000 f8d7 	bl	8001b40 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

//  InitTick(168000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <main+0xcc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <main+0xcc>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0220 	orr.w	r2, r2, #32
 80019a0:	60da      	str	r2, [r3, #12]

  freertos_IntroTitle();
 80019a2:	f000 fa0b 	bl	8001dbc <freertos_IntroTitle>
  printf("[TASK]main\n");
 80019a6:	4827      	ldr	r0, [pc, #156]	; (8001a44 <main+0xd0>)
 80019a8:	f005 fb7c 	bl	80070a4 <puts>


  check_enter_bootloader();
 80019ac:	f7ff fcac 	bl	8001308 <check_enter_bootloader>

  int err = platformInit();
 80019b0:	f7ff fe1a 	bl	80015e8 <platformInit>
 80019b4:	6278      	str	r0, [r7, #36]	; 0x24
  if (err != 0) {
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d000      	beq.n	80019be <main+0x4a>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 80019bc:	e7fe      	b.n	80019bc <main+0x48>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 80019be:	4822      	ldr	r0, [pc, #136]	; (8001a48 <main+0xd4>)
 80019c0:	f001 fd5e 	bl	8003480 <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <main+0xd8>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <main+0xdc>)
 80019ca:	6013      	str	r3, [r2, #0]
  //  delay_us(1);	// 1ms
  HAL_Delay(1);	// 1ms
 80019cc:	2001      	movs	r0, #1
 80019ce:	f000 fcf1 	bl	80023b4 <HAL_Delay>
  t2 = DWT->CYCCNT;
 80019d2:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <main+0xd8>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a1f      	ldr	r2, [pc, #124]	; (8001a54 <main+0xe0>)
 80019d8:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 80019da:	481b      	ldr	r0, [pc, #108]	; (8001a48 <main+0xd4>)
 80019dc:	f001 fdc0 	bl	8003560 <HAL_TIM_Base_Stop_IT>
  printf("delay = %.2f\n",(float)(t2-t1)/CLOCK_PER_USEC);
 80019e0:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <main+0xe0>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <main+0xdc>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001a58 <main+0xe4>
 80019f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019fa:	ee16 0a90 	vmov	r0, s13
 80019fe:	f7fe fdb3 	bl	8000568 <__aeabi_f2d>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4815      	ldr	r0, [pc, #84]	; (8001a5c <main+0xe8>)
 8001a08:	f005 fae6 	bl	8006fd8 <iprintf>
  uint32_t ld = SysTick->LOAD;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <main+0xec>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	623b      	str	r3, [r7, #32]


  systemLaunch();
 8001a12:	f7ff fdbb 	bl	800158c <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <main+0xf0>)
 8001a18:	1d3c      	adds	r4, r7, #4
 8001a1a:	461d      	mov	r5, r3
 8001a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f003 fa87 	bl	8004f40 <osThreadCreate>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <main+0xf4>)
 8001a36:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001a38:	f003 fa7b 	bl	8004f32 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <main+0xc8>
 8001a3e:	bf00      	nop
 8001a40:	20000a70 	.word	0x20000a70
 8001a44:	0800902c 	.word	0x0800902c
 8001a48:	20000a28 	.word	0x20000a28
 8001a4c:	e0001000 	.word	0xe0001000
 8001a50:	20000abc 	.word	0x20000abc
 8001a54:	20000ac0 	.word	0x20000ac0
 8001a58:	43280000 	.word	0x43280000
 8001a5c:	08009038 	.word	0x08009038
 8001a60:	e000e010 	.word	0xe000e010
 8001a64:	08009054 	.word	0x08009054
 8001a68:	20000ab8 	.word	0x20000ab8

08001a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b094      	sub	sp, #80	; 0x50
 8001a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a72:	f107 0320 	add.w	r3, r7, #32
 8001a76:	2230      	movs	r2, #48	; 0x30
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f005 fbf2 	bl	8007264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <SystemClock_Config+0xcc>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	4a27      	ldr	r2, [pc, #156]	; (8001b38 <SystemClock_Config+0xcc>)
 8001a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <SystemClock_Config+0xcc>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aac:	2300      	movs	r3, #0
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <SystemClock_Config+0xd0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a21      	ldr	r2, [pc, #132]	; (8001b3c <SystemClock_Config+0xd0>)
 8001ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <SystemClock_Config+0xd0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001adc:	2304      	movs	r3, #4
 8001ade:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ae0:	23a8      	movs	r3, #168	; 0xa8
 8001ae2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aec:	f107 0320 	add.w	r3, r7, #32
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 ffdd 	bl	8002ab0 <HAL_RCC_OscConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001afc:	f000 f9e2 	bl	8001ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b00:	230f      	movs	r3, #15
 8001b02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b04:	2302      	movs	r3, #2
 8001b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	2105      	movs	r1, #5
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f001 fa3e 	bl	8002fa0 <HAL_RCC_ClockConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b2a:	f000 f9cb 	bl	8001ec4 <Error_Handler>
  }
}
 8001b2e:	bf00      	nop
 8001b30:	3750      	adds	r7, #80	; 0x50
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40007000 	.word	0x40007000

08001b40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b090      	sub	sp, #64	; 0x40
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001b46:	f107 0318 	add.w	r3, r7, #24
 8001b4a:	2228      	movs	r2, #40	; 0x28
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f005 fb88 	bl	8007264 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	463b      	mov	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]
 8001b62:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001b64:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b68:	f7ff feec 	bl	8001944 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f7ff fed1 	bl	8001914 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001b72:	23e0      	movs	r3, #224	; 0xe0
 8001b74:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b76:	2302      	movs	r3, #2
 8001b78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001b86:	2305      	movs	r3, #5
 8001b88:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4813      	ldr	r0, [pc, #76]	; (8001bdc <MX_SPI1_Init+0x9c>)
 8001b90:	f003 f8c1 	bl	8004d16 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001b98:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b9c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001bc0:	f107 0318 	add.w	r3, r7, #24
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	; (8001be0 <MX_SPI1_Init+0xa0>)
 8001bc8:	f003 f949 	bl	8004e5e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4804      	ldr	r0, [pc, #16]	; (8001be0 <MX_SPI1_Init+0xa0>)
 8001bd0:	f7ff fe8c 	bl	80018ec <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	3740      	adds	r7, #64	; 0x40
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40013000 	.word	0x40013000

08001be4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bea:	463b      	mov	r3, r7
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <MX_TIM7_Init+0x64>)
 8001bf4:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <MX_TIM7_Init+0x68>)
 8001bf6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <MX_TIM7_Init+0x64>)
 8001bfa:	2253      	movs	r2, #83	; 0x53
 8001bfc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <MX_TIM7_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <MX_TIM7_Init+0x64>)
 8001c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c0a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <MX_TIM7_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c12:	480d      	ldr	r0, [pc, #52]	; (8001c48 <MX_TIM7_Init+0x64>)
 8001c14:	f001 fbe4 	bl	80033e0 <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001c1e:	f000 f951 	bl	8001ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4806      	ldr	r0, [pc, #24]	; (8001c48 <MX_TIM7_Init+0x64>)
 8001c30:	f001 fe94 	bl	800395c <HAL_TIMEx_MasterConfigSynchronization>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001c3a:	f000 f943 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000a28 	.word	0x20000a28
 8001c4c:	40001400 	.word	0x40001400

08001c50 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <MX_USART6_UART_Init+0x50>)
 8001c58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c88:	f001 fef8 	bl	8003a7c <HAL_UART_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c92:	f000 f917 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000a70 	.word	0x20000a70
 8001ca0:	40011400 	.word	0x40011400

08001ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <MX_GPIO_Init+0xf4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a35      	ldr	r2, [pc, #212]	; (8001d98 <MX_GPIO_Init+0xf4>)
 8001cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <MX_GPIO_Init+0xf4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <MX_GPIO_Init+0xf4>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a2e      	ldr	r2, [pc, #184]	; (8001d98 <MX_GPIO_Init+0xf4>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <MX_GPIO_Init+0xf4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <MX_GPIO_Init+0xf4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a27      	ldr	r2, [pc, #156]	; (8001d98 <MX_GPIO_Init+0xf4>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <MX_GPIO_Init+0xf4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <MX_GPIO_Init+0xf4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <MX_GPIO_Init+0xf4>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <MX_GPIO_Init+0xf4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2110      	movs	r1, #16
 8001d2e:	481b      	ldr	r0, [pc, #108]	; (8001d9c <MX_GPIO_Init+0xf8>)
 8001d30:	f000 fea4 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2120      	movs	r1, #32
 8001d38:	4819      	ldr	r0, [pc, #100]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001d3a:	f000 fe9f 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 8001d3e:	2310      	movs	r3, #16
 8001d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4811      	ldr	r0, [pc, #68]	; (8001d9c <MX_GPIO_Init+0xf8>)
 8001d56:	f000 fcf5 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 8001d5a:	2310      	movs	r3, #16
 8001d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480d      	ldr	r0, [pc, #52]	; (8001da4 <MX_GPIO_Init+0x100>)
 8001d70:	f000 fce8 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001d74:	2320      	movs	r3, #32
 8001d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001d8c:	f000 fcda 	bl	8002744 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40020400 	.word	0x40020400
 8001da4:	40020800 	.word	0x40020800

08001da8 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8001dac:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <OSVersion+0x10>)
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	08009070 	.word	0x08009070

08001dbc <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8001dc0:	4823      	ldr	r0, [pc, #140]	; (8001e50 <freertos_IntroTitle+0x94>)
 8001dc2:	f005 f96f 	bl	80070a4 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 8001dc6:	4823      	ldr	r0, [pc, #140]	; (8001e54 <freertos_IntroTitle+0x98>)
 8001dc8:	f005 f96c 	bl	80070a4 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8001dcc:	4822      	ldr	r0, [pc, #136]	; (8001e58 <freertos_IntroTitle+0x9c>)
 8001dce:	f005 f969 	bl	80070a4 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8001dd2:	4822      	ldr	r0, [pc, #136]	; (8001e5c <freertos_IntroTitle+0xa0>)
 8001dd4:	f005 f966 	bl	80070a4 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8001dd8:	4821      	ldr	r0, [pc, #132]	; (8001e60 <freertos_IntroTitle+0xa4>)
 8001dda:	f005 f963 	bl	80070a4 <puts>
  printf("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 8001dde:	4821      	ldr	r0, [pc, #132]	; (8001e64 <freertos_IntroTitle+0xa8>)
 8001de0:	f005 f960 	bl	80070a4 <puts>
  printf("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8001de4:	4820      	ldr	r0, [pc, #128]	; (8001e68 <freertos_IntroTitle+0xac>)
 8001de6:	f005 f95d 	bl	80070a4 <puts>
  printf("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 8001dea:	4820      	ldr	r0, [pc, #128]	; (8001e6c <freertos_IntroTitle+0xb0>)
 8001dec:	f005 f95a 	bl	80070a4 <puts>
  printf("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8001df0:	481f      	ldr	r0, [pc, #124]	; (8001e70 <freertos_IntroTitle+0xb4>)
 8001df2:	f005 f957 	bl	80070a4 <puts>
  printf("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 8001df6:	481f      	ldr	r0, [pc, #124]	; (8001e74 <freertos_IntroTitle+0xb8>)
 8001df8:	f005 f954 	bl	80070a4 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8001dfc:	481e      	ldr	r0, [pc, #120]	; (8001e78 <freertos_IntroTitle+0xbc>)
 8001dfe:	f005 f951 	bl	80070a4 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 8001e02:	481e      	ldr	r0, [pc, #120]	; (8001e7c <freertos_IntroTitle+0xc0>)
 8001e04:	f005 f94e 	bl	80070a4 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 8001e08:	481d      	ldr	r0, [pc, #116]	; (8001e80 <freertos_IntroTitle+0xc4>)
 8001e0a:	f005 f94b 	bl	80070a4 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 8001e0e:	481d      	ldr	r0, [pc, #116]	; (8001e84 <freertos_IntroTitle+0xc8>)
 8001e10:	f005 f948 	bl	80070a4 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 8001e14:	481c      	ldr	r0, [pc, #112]	; (8001e88 <freertos_IntroTitle+0xcc>)
 8001e16:	f005 f945 	bl	80070a4 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 8001e1a:	481c      	ldr	r0, [pc, #112]	; (8001e8c <freertos_IntroTitle+0xd0>)
 8001e1c:	f005 f942 	bl	80070a4 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 8001e20:	481b      	ldr	r0, [pc, #108]	; (8001e90 <freertos_IntroTitle+0xd4>)
 8001e22:	f005 f93f 	bl	80070a4 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 8001e26:	481b      	ldr	r0, [pc, #108]	; (8001e94 <freertos_IntroTitle+0xd8>)
 8001e28:	f005 f93c 	bl	80070a4 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8001e2c:	481a      	ldr	r0, [pc, #104]	; (8001e98 <freertos_IntroTitle+0xdc>)
 8001e2e:	f005 f939 	bl	80070a4 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 8001e32:	f7ff ffb9 	bl	8001da8 <OSVersion>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4818      	ldr	r0, [pc, #96]	; (8001e9c <freertos_IntroTitle+0xe0>)
 8001e3c:	f005 f8cc 	bl	8006fd8 <iprintf>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8001e40:	4817      	ldr	r0, [pc, #92]	; (8001ea0 <freertos_IntroTitle+0xe4>)
 8001e42:	f005 f92f 	bl	80070a4 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   Copyright guileschool.com\n");
 8001e46:	4817      	ldr	r0, [pc, #92]	; (8001ea4 <freertos_IntroTitle+0xe8>)
 8001e48:	f005 f92c 	bl	80070a4 <puts>
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	08009078 	.word	0x08009078
 8001e54:	080090b8 	.word	0x080090b8
 8001e58:	0800910c 	.word	0x0800910c
 8001e5c:	08009160 	.word	0x08009160
 8001e60:	080091b4 	.word	0x080091b4
 8001e64:	08009208 	.word	0x08009208
 8001e68:	0800925c 	.word	0x0800925c
 8001e6c:	080092b0 	.word	0x080092b0
 8001e70:	08009304 	.word	0x08009304
 8001e74:	08009358 	.word	0x08009358
 8001e78:	080093ac 	.word	0x080093ac
 8001e7c:	08009400 	.word	0x08009400
 8001e80:	08009454 	.word	0x08009454
 8001e84:	080094a8 	.word	0x080094a8
 8001e88:	080094fc 	.word	0x080094fc
 8001e8c:	08009550 	.word	0x08009550
 8001e90:	080095a4 	.word	0x080095a4
 8001e94:	080095f8 	.word	0x080095f8
 8001e98:	08009640 	.word	0x08009640
 8001e9c:	0800966c 	.word	0x0800966c
 8001ea0:	080096b0 	.word	0x080096b0
 8001ea4:	080096dc 	.word	0x080096dc

08001ea8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("[TASK] StartDefaultTask!\n");
 8001eb0:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <StartDefaultTask+0x18>)
 8001eb2:	f005 f8f7 	bl	80070a4 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f003 f88e 	bl	8004fd8 <osDelay>
 8001ebc:	e7fb      	b.n	8001eb6 <StartDefaultTask+0xe>
 8001ebe:	bf00      	nop
 8001ec0:	08009744 	.word	0x08009744

08001ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec8:	b672      	cpsid	i
}
 8001eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <Error_Handler+0x8>
	...

08001ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_MspInit+0x64>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a15      	ldr	r2, [pc, #84]	; (8001f34 <HAL_MspInit+0x64>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_MspInit+0x64>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_MspInit+0x64>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <HAL_MspInit+0x64>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_MspInit+0x64>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	210f      	movs	r1, #15
 8001f12:	f06f 0001 	mvn.w	r0, #1
 8001f16:	f000 fb4c 	bl	80025b2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2105      	movs	r1, #5
 8001f1e:	2005      	movs	r0, #5
 8001f20:	f000 fb47 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001f24:	2005      	movs	r0, #5
 8001f26:	f000 fb60 	bl	80025ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800

08001f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <HAL_TIM_Base_MspInit+0x48>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d115      	bne.n	8001f76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_TIM_Base_MspInit+0x4c>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <HAL_TIM_Base_MspInit+0x4c>)
 8001f54:	f043 0320 	orr.w	r3, r3, #32
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_TIM_Base_MspInit+0x4c>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2105      	movs	r1, #5
 8001f6a:	2037      	movs	r0, #55	; 0x37
 8001f6c:	f000 fb21 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f70:	2037      	movs	r0, #55	; 0x37
 8001f72:	f000 fb3a 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40001400 	.word	0x40001400
 8001f84:	40023800 	.word	0x40023800

08001f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	; (800201c <HAL_UART_MspInit+0x94>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d133      	bne.n	8002012 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <HAL_UART_MspInit+0x98>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a1b      	ldr	r2, [pc, #108]	; (8002020 <HAL_UART_MspInit+0x98>)
 8001fb4:	f043 0320 	orr.w	r3, r3, #32
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_UART_MspInit+0x98>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_UART_MspInit+0x98>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a14      	ldr	r2, [pc, #80]	; (8002020 <HAL_UART_MspInit+0x98>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_UART_MspInit+0x98>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 8001fe2:	23c0      	movs	r3, #192	; 0xc0
 8001fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ff2:	2308      	movs	r3, #8
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4809      	ldr	r0, [pc, #36]	; (8002024 <HAL_UART_MspInit+0x9c>)
 8001ffe:	f000 fba1 	bl	8002744 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2105      	movs	r1, #5
 8002006:	2047      	movs	r0, #71	; 0x47
 8002008:	f000 fad3 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800200c:	2047      	movs	r0, #71	; 0x47
 800200e:	f000 faec 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40011400 	.word	0x40011400
 8002020:	40023800 	.word	0x40023800
 8002024:	40020800 	.word	0x40020800

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800202c:	e7fe      	b.n	800202c <NMI_Handler+0x4>

0800202e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002032:	e7fe      	b.n	8002032 <HardFault_Handler+0x4>

08002034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <MemManage_Handler+0x4>

0800203a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <BusFault_Handler+0x4>

08002040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <UsageFault_Handler+0x4>

08002046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <SysTick_Handler+0x2c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d004      	beq.n	800206a <SysTick_Handler+0x16>

		TimingDelay--;
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <SysTick_Handler+0x2c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3b01      	subs	r3, #1
 8002066:	4a06      	ldr	r2, [pc, #24]	; (8002080 <SysTick_Handler+0x2c>)
 8002068:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206a:	f000 f983 	bl	8002374 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800206e:	f003 fd61 	bl	8005b34 <xTaskGetSchedulerState>
 8002072:	4603      	mov	r3, r0
 8002074:	2b01      	cmp	r3, #1
 8002076:	d001      	beq.n	800207c <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002078:	f003 ff9e 	bl	8005fb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000ac8 	.word	0x20000ac8

08002084 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <TIM7_IRQHandler+0x10>)
 800209a:	f001 fa90 	bl	80035be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000a28 	.word	0x20000a28

080020a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <USART6_IRQHandler+0x54>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d117      	bne.n	80020ec <USART6_IRQHandler+0x44>
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <USART6_IRQHandler+0x54>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d010      	beq.n	80020ec <USART6_IRQHandler+0x44>
			g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <USART6_IRQHandler+0x54>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <USART6_IRQHandler+0x58>)
 80020d4:	701a      	strb	r2, [r3, #0]
		  __HAL_UART_CLEAR_PEFLAG(&huart6);
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <USART6_IRQHandler+0x54>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <USART6_IRQHandler+0x54>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
	}


  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020ec:	4803      	ldr	r0, [pc, #12]	; (80020fc <USART6_IRQHandler+0x54>)
 80020ee:	f001 fda1 	bl	8003c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000a70 	.word	0x20000a70
 8002100:	20000ac4 	.word	0x20000ac4

08002104 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return 1;
 8002108:	2301      	movs	r3, #1
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <_kill>:

int _kill(int pid, int sig)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800211e:	f005 f95d 	bl	80073dc <__errno>
 8002122:	4603      	mov	r3, r0
 8002124:	2216      	movs	r2, #22
 8002126:	601a      	str	r2, [r3, #0]
  return -1;
 8002128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_exit>:

void _exit (int status)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800213c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ffe7 	bl	8002114 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002146:	e7fe      	b.n	8002146 <_exit+0x12>

08002148 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	e00a      	b.n	8002170 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800215a:	f3af 8000 	nop.w
 800215e:	4601      	mov	r1, r0
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	60ba      	str	r2, [r7, #8]
 8002166:	b2ca      	uxtb	r2, r1
 8002168:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	3301      	adds	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	429a      	cmp	r2, r3
 8002176:	dbf0      	blt.n	800215a <_read+0x12>
  }

  return len;
 8002178:	687b      	ldr	r3, [r7, #4]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021aa:	605a      	str	r2, [r3, #4]
  return 0;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_isatty>:

int _isatty(int file)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <_sbrk+0x5c>)
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <_sbrk+0x60>)
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <_sbrk+0x64>)
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <_sbrk+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d207      	bcs.n	800222c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800221c:	f005 f8de 	bl	80073dc <__errno>
 8002220:	4603      	mov	r3, r0
 8002222:	220c      	movs	r2, #12
 8002224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800222a:	e009      	b.n	8002240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <_sbrk+0x64>)
 800223c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20020000 	.word	0x20020000
 800224c:	00000400 	.word	0x00000400
 8002250:	20000acc 	.word	0x20000acc
 8002254:	20004a78 	.word	0x20004a78

08002258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <SystemInit+0x20>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <SystemInit+0x20>)
 8002264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800227c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002280:	f7ff ffea 	bl	8002258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002284:	480c      	ldr	r0, [pc, #48]	; (80022b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002286:	490d      	ldr	r1, [pc, #52]	; (80022bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800228c:	e002      	b.n	8002294 <LoopCopyDataInit>

0800228e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002292:	3304      	adds	r3, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002298:	d3f9      	bcc.n	800228e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800229c:	4c0a      	ldr	r4, [pc, #40]	; (80022c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a0:	e001      	b.n	80022a6 <LoopFillZerobss>

080022a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a4:	3204      	adds	r2, #4

080022a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a8:	d3fb      	bcc.n	80022a2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80022aa:	f005 f89d 	bl	80073e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ae:	f7ff fb61 	bl	8001974 <main>
  bx  lr    
 80022b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022bc:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80022c0:	08009b04 	.word	0x08009b04
  ldr r2, =_sbss
 80022c4:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 80022c8:	20004a78 	.word	0x20004a78

080022cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022cc:	e7fe      	b.n	80022cc <ADC_IRQHandler>
	...

080022d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <HAL_Init+0x40>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <HAL_Init+0x40>)
 80022da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_Init+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_Init+0x40>)
 80022e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a07      	ldr	r2, [pc, #28]	; (8002310 <HAL_Init+0x40>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f8:	2003      	movs	r0, #3
 80022fa:	f000 f94f 	bl	800259c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fe:	200f      	movs	r0, #15
 8002300:	f000 f808 	bl	8002314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002304:	f7ff fde4 	bl	8001ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023c00 	.word	0x40023c00

08002314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_InitTick+0x54>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_InitTick+0x58>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232a:	fbb3 f3f1 	udiv	r3, r3, r1
 800232e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f967 	bl	8002606 <HAL_SYSTICK_Config>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e00e      	b.n	8002360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b0f      	cmp	r3, #15
 8002346:	d80a      	bhi.n	800235e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002348:	2200      	movs	r2, #0
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002350:	f000 f92f 	bl	80025b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002354:	4a06      	ldr	r2, [pc, #24]	; (8002370 <HAL_InitTick+0x5c>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e000      	b.n	8002360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	200000b8 	.word	0x200000b8
 800236c:	200000c0 	.word	0x200000c0
 8002370:	200000bc 	.word	0x200000bc

08002374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_IncTick+0x20>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_IncTick+0x24>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4413      	add	r3, r2
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_IncTick+0x24>)
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	200000c0 	.word	0x200000c0
 8002398:	20000ad0 	.word	0x20000ad0

0800239c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return uwTick;
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_GetTick+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000ad0 	.word	0x20000ad0

080023b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023bc:	f7ff ffee 	bl	800239c <HAL_GetTick>
 80023c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023cc:	d005      	beq.n	80023da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_Delay+0x44>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023da:	bf00      	nop
 80023dc:	f7ff ffde 	bl	800239c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d8f7      	bhi.n	80023dc <HAL_Delay+0x28>
  {
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200000c0 	.word	0x200000c0

080023fc <__NVIC_SetPriorityGrouping>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242e:	4a04      	ldr	r2, [pc, #16]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	60d3      	str	r3, [r2, #12]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_GetPriorityGrouping>:
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <__NVIC_GetPriorityGrouping+0x18>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 0307 	and.w	r3, r3, #7
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_EnableIRQ>:
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	db0b      	blt.n	800248a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4907      	ldr	r1, [pc, #28]	; (8002498 <__NVIC_EnableIRQ+0x38>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2001      	movs	r0, #1
 8002482:	fa00 f202 	lsl.w	r2, r0, r2
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	; (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	; (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	; 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002568:	d301      	bcc.n	800256e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <SysTick_Config+0x40>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002576:	210f      	movs	r1, #15
 8002578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800257c:	f7ff ff8e 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <SysTick_Config+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <SysTick_Config+0x40>)
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000e010 	.word	0xe000e010

0800259c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff29 	bl	80023fc <__NVIC_SetPriorityGrouping>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c4:	f7ff ff3e 	bl	8002444 <__NVIC_GetPriorityGrouping>
 80025c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f7ff ff8e 	bl	80024f0 <NVIC_EncodePriority>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff5d 	bl	800249c <__NVIC_SetPriority>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff31 	bl	8002460 <__NVIC_EnableIRQ>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ffa2 	bl	8002558 <SysTick_Config>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7ff feb6 	bl	800239c <HAL_GetTick>
 8002630:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d008      	beq.n	8002650 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2280      	movs	r2, #128	; 0x80
 8002642:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e052      	b.n	80026f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0216 	bic.w	r2, r2, #22
 800265e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d103      	bne.n	8002680 <HAL_DMA_Abort+0x62>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0208 	bic.w	r2, r2, #8
 800268e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a0:	e013      	b.n	80026ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a2:	f7ff fe7b 	bl	800239c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d90c      	bls.n	80026ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2203      	movs	r2, #3
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e015      	b.n	80026f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e4      	bne.n	80026a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	223f      	movs	r2, #63	; 0x3f
 80026de:	409a      	lsls	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d004      	beq.n	800271c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e00c      	b.n	8002736 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2205      	movs	r2, #5
 8002720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	e16b      	b.n	8002a38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002760:	2201      	movs	r2, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	429a      	cmp	r2, r3
 800277a:	f040 815a 	bne.w	8002a32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d005      	beq.n	8002796 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002792:	2b02      	cmp	r3, #2
 8002794:	d130      	bne.n	80027f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2203      	movs	r2, #3
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027cc:	2201      	movs	r2, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 0201 	and.w	r2, r3, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b03      	cmp	r3, #3
 8002802:	d017      	beq.n	8002834 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d123      	bne.n	8002888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	08da      	lsrs	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3208      	adds	r2, #8
 8002848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	220f      	movs	r2, #15
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	08da      	lsrs	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	69b9      	ldr	r1, [r7, #24]
 8002884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0203 	and.w	r2, r3, #3
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80b4 	beq.w	8002a32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b60      	ldr	r3, [pc, #384]	; (8002a50 <HAL_GPIO_Init+0x30c>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4a5f      	ldr	r2, [pc, #380]	; (8002a50 <HAL_GPIO_Init+0x30c>)
 80028d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d8:	6453      	str	r3, [r2, #68]	; 0x44
 80028da:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <HAL_GPIO_Init+0x30c>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028e6:	4a5b      	ldr	r2, [pc, #364]	; (8002a54 <HAL_GPIO_Init+0x310>)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a52      	ldr	r2, [pc, #328]	; (8002a58 <HAL_GPIO_Init+0x314>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d02b      	beq.n	800296a <HAL_GPIO_Init+0x226>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a51      	ldr	r2, [pc, #324]	; (8002a5c <HAL_GPIO_Init+0x318>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d025      	beq.n	8002966 <HAL_GPIO_Init+0x222>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a50      	ldr	r2, [pc, #320]	; (8002a60 <HAL_GPIO_Init+0x31c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01f      	beq.n	8002962 <HAL_GPIO_Init+0x21e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4f      	ldr	r2, [pc, #316]	; (8002a64 <HAL_GPIO_Init+0x320>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d019      	beq.n	800295e <HAL_GPIO_Init+0x21a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4e      	ldr	r2, [pc, #312]	; (8002a68 <HAL_GPIO_Init+0x324>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_GPIO_Init+0x216>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4d      	ldr	r2, [pc, #308]	; (8002a6c <HAL_GPIO_Init+0x328>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00d      	beq.n	8002956 <HAL_GPIO_Init+0x212>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4c      	ldr	r2, [pc, #304]	; (8002a70 <HAL_GPIO_Init+0x32c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <HAL_GPIO_Init+0x20e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4b      	ldr	r2, [pc, #300]	; (8002a74 <HAL_GPIO_Init+0x330>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_GPIO_Init+0x20a>
 800294a:	2307      	movs	r3, #7
 800294c:	e00e      	b.n	800296c <HAL_GPIO_Init+0x228>
 800294e:	2308      	movs	r3, #8
 8002950:	e00c      	b.n	800296c <HAL_GPIO_Init+0x228>
 8002952:	2306      	movs	r3, #6
 8002954:	e00a      	b.n	800296c <HAL_GPIO_Init+0x228>
 8002956:	2305      	movs	r3, #5
 8002958:	e008      	b.n	800296c <HAL_GPIO_Init+0x228>
 800295a:	2304      	movs	r3, #4
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x228>
 800295e:	2303      	movs	r3, #3
 8002960:	e004      	b.n	800296c <HAL_GPIO_Init+0x228>
 8002962:	2302      	movs	r3, #2
 8002964:	e002      	b.n	800296c <HAL_GPIO_Init+0x228>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_GPIO_Init+0x228>
 800296a:	2300      	movs	r3, #0
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	f002 0203 	and.w	r2, r2, #3
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	4093      	lsls	r3, r2
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800297c:	4935      	ldr	r1, [pc, #212]	; (8002a54 <HAL_GPIO_Init+0x310>)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298a:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <HAL_GPIO_Init+0x334>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ae:	4a32      	ldr	r2, [pc, #200]	; (8002a78 <HAL_GPIO_Init+0x334>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b4:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <HAL_GPIO_Init+0x334>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d8:	4a27      	ldr	r2, [pc, #156]	; (8002a78 <HAL_GPIO_Init+0x334>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_GPIO_Init+0x334>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a02:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <HAL_GPIO_Init+0x334>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_GPIO_Init+0x334>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a2c:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <HAL_GPIO_Init+0x334>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	f67f ae90 	bls.w	8002760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3724      	adds	r7, #36	; 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40013800 	.word	0x40013800
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	40020400 	.word	0x40020400
 8002a60:	40020800 	.word	0x40020800
 8002a64:	40020c00 	.word	0x40020c00
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40021400 	.word	0x40021400
 8002a70:	40021800 	.word	0x40021800
 8002a74:	40021c00 	.word	0x40021c00
 8002a78:	40013c00 	.word	0x40013c00

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a98:	e003      	b.n	8002aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e267      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d075      	beq.n	8002bba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ace:	4b88      	ldr	r3, [pc, #544]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d00c      	beq.n	8002af4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ada:	4b85      	ldr	r3, [pc, #532]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d112      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae6:	4b82      	ldr	r3, [pc, #520]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002af2:	d10b      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	4b7e      	ldr	r3, [pc, #504]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d05b      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x108>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d157      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e242      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b14:	d106      	bne.n	8002b24 <HAL_RCC_OscConfig+0x74>
 8002b16:	4b76      	ldr	r3, [pc, #472]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a75      	ldr	r2, [pc, #468]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e01d      	b.n	8002b60 <HAL_RCC_OscConfig+0xb0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x98>
 8002b2e:	4b70      	ldr	r3, [pc, #448]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a6f      	ldr	r2, [pc, #444]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b6d      	ldr	r3, [pc, #436]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a6c      	ldr	r2, [pc, #432]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0xb0>
 8002b48:	4b69      	ldr	r3, [pc, #420]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a68      	ldr	r2, [pc, #416]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b66      	ldr	r3, [pc, #408]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a65      	ldr	r2, [pc, #404]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7ff fc18 	bl	800239c <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b70:	f7ff fc14 	bl	800239c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e207      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	4b5b      	ldr	r3, [pc, #364]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0xc0>
 8002b8e:	e014      	b.n	8002bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7ff fc04 	bl	800239c <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b98:	f7ff fc00 	bl	800239c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1f3      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	4b51      	ldr	r3, [pc, #324]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0xe8>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d063      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bc6:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd2:	4b47      	ldr	r3, [pc, #284]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d11c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bde:	4b44      	ldr	r3, [pc, #272]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d116      	bne.n	8002c18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	4b41      	ldr	r3, [pc, #260]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_RCC_OscConfig+0x152>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e1c7      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c02:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4937      	ldr	r1, [pc, #220]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	e03a      	b.n	8002c8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d020      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c20:	4b34      	ldr	r3, [pc, #208]	; (8002cf4 <HAL_RCC_OscConfig+0x244>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7ff fbb9 	bl	800239c <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c2e:	f7ff fbb5 	bl	800239c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e1a8      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4c:	4b28      	ldr	r3, [pc, #160]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4925      	ldr	r1, [pc, #148]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	600b      	str	r3, [r1, #0]
 8002c60:	e015      	b.n	8002c8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c62:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <HAL_RCC_OscConfig+0x244>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7ff fb98 	bl	800239c <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c70:	f7ff fb94 	bl	800239c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e187      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d036      	beq.n	8002d08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <HAL_RCC_OscConfig+0x248>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7ff fb78 	bl	800239c <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7ff fb74 	bl	800239c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e167      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x200>
 8002cce:	e01b      	b.n	8002d08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_RCC_OscConfig+0x248>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd6:	f7ff fb61 	bl	800239c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	e00e      	b.n	8002cfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cde:	f7ff fb5d 	bl	800239c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d907      	bls.n	8002cfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e150      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	42470000 	.word	0x42470000
 8002cf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	4b88      	ldr	r3, [pc, #544]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ea      	bne.n	8002cde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8097 	beq.w	8002e44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1a:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10f      	bne.n	8002d46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	4b7d      	ldr	r3, [pc, #500]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	4a7c      	ldr	r2, [pc, #496]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d34:	6413      	str	r3, [r2, #64]	; 0x40
 8002d36:	4b7a      	ldr	r3, [pc, #488]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d42:	2301      	movs	r3, #1
 8002d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d46:	4b77      	ldr	r3, [pc, #476]	; (8002f24 <HAL_RCC_OscConfig+0x474>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d118      	bne.n	8002d84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d52:	4b74      	ldr	r3, [pc, #464]	; (8002f24 <HAL_RCC_OscConfig+0x474>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a73      	ldr	r2, [pc, #460]	; (8002f24 <HAL_RCC_OscConfig+0x474>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5e:	f7ff fb1d 	bl	800239c <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d66:	f7ff fb19 	bl	800239c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e10c      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	4b6a      	ldr	r3, [pc, #424]	; (8002f24 <HAL_RCC_OscConfig+0x474>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d106      	bne.n	8002d9a <HAL_RCC_OscConfig+0x2ea>
 8002d8c:	4b64      	ldr	r3, [pc, #400]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	4a63      	ldr	r2, [pc, #396]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6713      	str	r3, [r2, #112]	; 0x70
 8002d98:	e01c      	b.n	8002dd4 <HAL_RCC_OscConfig+0x324>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x30c>
 8002da2:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	4a5e      	ldr	r2, [pc, #376]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6713      	str	r3, [r2, #112]	; 0x70
 8002dae:	4b5c      	ldr	r3, [pc, #368]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	4a5b      	ldr	r2, [pc, #364]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x324>
 8002dbc:	4b58      	ldr	r3, [pc, #352]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc0:	4a57      	ldr	r2, [pc, #348]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc8:	4b55      	ldr	r3, [pc, #340]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	4a54      	ldr	r2, [pc, #336]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dce:	f023 0304 	bic.w	r3, r3, #4
 8002dd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d015      	beq.n	8002e08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7ff fade 	bl	800239c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de4:	f7ff fada 	bl	800239c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e0cb      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfa:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0ee      	beq.n	8002de4 <HAL_RCC_OscConfig+0x334>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7ff fac8 	bl	800239c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7ff fac4 	bl	800239c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e0b5      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e26:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1ee      	bne.n	8002e10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d105      	bne.n	8002e44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e38:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	4a38      	ldr	r2, [pc, #224]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80a1 	beq.w	8002f90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e4e:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d05c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d141      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7ff fa98 	bl	800239c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7ff fa94 	bl	800239c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e087      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e82:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	019b      	lsls	r3, r3, #6
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	041b      	lsls	r3, r3, #16
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	491b      	ldr	r1, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7ff fa6d 	bl	800239c <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7ff fa69 	bl	800239c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e05c      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x416>
 8002ee4:	e054      	b.n	8002f90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7ff fa56 	bl	800239c <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7ff fa52 	bl	800239c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e045      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x444>
 8002f12:	e03d      	b.n	8002f90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e038      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40007000 	.word	0x40007000
 8002f28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_RCC_OscConfig+0x4ec>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d028      	beq.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d121      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d11a      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d111      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	3b01      	subs	r3, #1
 8002f76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800

08002fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0cc      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b68      	ldr	r3, [pc, #416]	; (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d90c      	bls.n	8002fdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b65      	ldr	r3, [pc, #404]	; (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b63      	ldr	r3, [pc, #396]	; (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0b8      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d020      	beq.n	800302a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff4:	4b59      	ldr	r3, [pc, #356]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a58      	ldr	r2, [pc, #352]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ffe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800300c:	4b53      	ldr	r3, [pc, #332]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a52      	ldr	r2, [pc, #328]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003016:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003018:	4b50      	ldr	r3, [pc, #320]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	494d      	ldr	r1, [pc, #308]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d044      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d119      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e07f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d003      	beq.n	800305e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305a:	2b03      	cmp	r3, #3
 800305c:	d107      	bne.n	800306e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305e:	4b3f      	ldr	r3, [pc, #252]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e06f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306e:	4b3b      	ldr	r3, [pc, #236]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e067      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f023 0203 	bic.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4934      	ldr	r1, [pc, #208]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	4313      	orrs	r3, r2
 800308e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003090:	f7ff f984 	bl	800239c <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	e00a      	b.n	80030ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003098:	f7ff f980 	bl	800239c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e04f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	4b2b      	ldr	r3, [pc, #172]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 020c 	and.w	r2, r3, #12
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	429a      	cmp	r2, r3
 80030be:	d1eb      	bne.n	8003098 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c0:	4b25      	ldr	r3, [pc, #148]	; (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d20c      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b22      	ldr	r3, [pc, #136]	; (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b20      	ldr	r3, [pc, #128]	; (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e032      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f4:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4916      	ldr	r1, [pc, #88]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003112:	4b12      	ldr	r3, [pc, #72]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	490e      	ldr	r1, [pc, #56]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003126:	f000 f821 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800312a:	4602      	mov	r2, r0
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	490a      	ldr	r1, [pc, #40]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	5ccb      	ldrb	r3, [r1, r3]
 800313a:	fa22 f303 	lsr.w	r3, r2, r3
 800313e:	4a09      	ldr	r2, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff f8e4 	bl	8002314 <HAL_InitTick>

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023c00 	.word	0x40023c00
 800315c:	40023800 	.word	0x40023800
 8003160:	08009768 	.word	0x08009768
 8003164:	200000b8 	.word	0x200000b8
 8003168:	200000bc 	.word	0x200000bc

0800316c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800316c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003170:	b094      	sub	sp, #80	; 0x50
 8003172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	647b      	str	r3, [r7, #68]	; 0x44
 8003178:	2300      	movs	r3, #0
 800317a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800317c:	2300      	movs	r3, #0
 800317e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003184:	4b79      	ldr	r3, [pc, #484]	; (800336c <HAL_RCC_GetSysClockFreq+0x200>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b08      	cmp	r3, #8
 800318e:	d00d      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x40>
 8003190:	2b08      	cmp	r3, #8
 8003192:	f200 80e1 	bhi.w	8003358 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x34>
 800319a:	2b04      	cmp	r3, #4
 800319c:	d003      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800319e:	e0db      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b73      	ldr	r3, [pc, #460]	; (8003370 <HAL_RCC_GetSysClockFreq+0x204>)
 80031a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031a4:	e0db      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031a6:	4b73      	ldr	r3, [pc, #460]	; (8003374 <HAL_RCC_GetSysClockFreq+0x208>)
 80031a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031aa:	e0d8      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031ac:	4b6f      	ldr	r3, [pc, #444]	; (800336c <HAL_RCC_GetSysClockFreq+0x200>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031b6:	4b6d      	ldr	r3, [pc, #436]	; (800336c <HAL_RCC_GetSysClockFreq+0x200>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d063      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c2:	4b6a      	ldr	r3, [pc, #424]	; (800336c <HAL_RCC_GetSysClockFreq+0x200>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	2200      	movs	r2, #0
 80031ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80031cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d4:	633b      	str	r3, [r7, #48]	; 0x30
 80031d6:	2300      	movs	r3, #0
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
 80031da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031de:	4622      	mov	r2, r4
 80031e0:	462b      	mov	r3, r5
 80031e2:	f04f 0000 	mov.w	r0, #0
 80031e6:	f04f 0100 	mov.w	r1, #0
 80031ea:	0159      	lsls	r1, r3, #5
 80031ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f0:	0150      	lsls	r0, r2, #5
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4621      	mov	r1, r4
 80031f8:	1a51      	subs	r1, r2, r1
 80031fa:	6139      	str	r1, [r7, #16]
 80031fc:	4629      	mov	r1, r5
 80031fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003210:	4659      	mov	r1, fp
 8003212:	018b      	lsls	r3, r1, #6
 8003214:	4651      	mov	r1, sl
 8003216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800321a:	4651      	mov	r1, sl
 800321c:	018a      	lsls	r2, r1, #6
 800321e:	4651      	mov	r1, sl
 8003220:	ebb2 0801 	subs.w	r8, r2, r1
 8003224:	4659      	mov	r1, fp
 8003226:	eb63 0901 	sbc.w	r9, r3, r1
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800323a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800323e:	4690      	mov	r8, r2
 8003240:	4699      	mov	r9, r3
 8003242:	4623      	mov	r3, r4
 8003244:	eb18 0303 	adds.w	r3, r8, r3
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	462b      	mov	r3, r5
 800324c:	eb49 0303 	adc.w	r3, r9, r3
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800325e:	4629      	mov	r1, r5
 8003260:	024b      	lsls	r3, r1, #9
 8003262:	4621      	mov	r1, r4
 8003264:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003268:	4621      	mov	r1, r4
 800326a:	024a      	lsls	r2, r1, #9
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003272:	2200      	movs	r2, #0
 8003274:	62bb      	str	r3, [r7, #40]	; 0x28
 8003276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003278:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800327c:	f7fd fca4 	bl	8000bc8 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4613      	mov	r3, r2
 8003286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003288:	e058      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328a:	4b38      	ldr	r3, [pc, #224]	; (800336c <HAL_RCC_GetSysClockFreq+0x200>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	099b      	lsrs	r3, r3, #6
 8003290:	2200      	movs	r2, #0
 8003292:	4618      	mov	r0, r3
 8003294:	4611      	mov	r1, r2
 8003296:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800329a:	623b      	str	r3, [r7, #32]
 800329c:	2300      	movs	r3, #0
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
 80032a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032a4:	4642      	mov	r2, r8
 80032a6:	464b      	mov	r3, r9
 80032a8:	f04f 0000 	mov.w	r0, #0
 80032ac:	f04f 0100 	mov.w	r1, #0
 80032b0:	0159      	lsls	r1, r3, #5
 80032b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b6:	0150      	lsls	r0, r2, #5
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4641      	mov	r1, r8
 80032be:	ebb2 0a01 	subs.w	sl, r2, r1
 80032c2:	4649      	mov	r1, r9
 80032c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032dc:	ebb2 040a 	subs.w	r4, r2, sl
 80032e0:	eb63 050b 	sbc.w	r5, r3, fp
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	00eb      	lsls	r3, r5, #3
 80032ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032f2:	00e2      	lsls	r2, r4, #3
 80032f4:	4614      	mov	r4, r2
 80032f6:	461d      	mov	r5, r3
 80032f8:	4643      	mov	r3, r8
 80032fa:	18e3      	adds	r3, r4, r3
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	464b      	mov	r3, r9
 8003300:	eb45 0303 	adc.w	r3, r5, r3
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003312:	4629      	mov	r1, r5
 8003314:	028b      	lsls	r3, r1, #10
 8003316:	4621      	mov	r1, r4
 8003318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800331c:	4621      	mov	r1, r4
 800331e:	028a      	lsls	r2, r1, #10
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003326:	2200      	movs	r2, #0
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	61fa      	str	r2, [r7, #28]
 800332c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003330:	f7fd fc4a 	bl	8000bc8 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4613      	mov	r3, r2
 800333a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_GetSysClockFreq+0x200>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	3301      	adds	r3, #1
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800334c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800334e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003356:	e002      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetSysClockFreq+0x204>)
 800335a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800335c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003360:	4618      	mov	r0, r3
 8003362:	3750      	adds	r7, #80	; 0x50
 8003364:	46bd      	mov	sp, r7
 8003366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800
 8003370:	00f42400 	.word	0x00f42400
 8003374:	007a1200 	.word	0x007a1200

08003378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_RCC_GetHCLKFreq+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	200000b8 	.word	0x200000b8

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003394:	f7ff fff0 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	0a9b      	lsrs	r3, r3, #10
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4903      	ldr	r1, [pc, #12]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40023800 	.word	0x40023800
 80033b4:	08009778 	.word	0x08009778

080033b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033bc:	f7ff ffdc 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0b5b      	lsrs	r3, r3, #13
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4903      	ldr	r1, [pc, #12]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08009778 	.word	0x08009778

080033e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e041      	b.n	8003476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fe fd96 	bl	8001f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 f9f0 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d001      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e04e      	b.n	8003536 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a23      	ldr	r2, [pc, #140]	; (8003544 <HAL_TIM_Base_Start_IT+0xc4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d022      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c2:	d01d      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1f      	ldr	r2, [pc, #124]	; (8003548 <HAL_TIM_Base_Start_IT+0xc8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d018      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1e      	ldr	r2, [pc, #120]	; (800354c <HAL_TIM_Base_Start_IT+0xcc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d013      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <HAL_TIM_Base_Start_IT+0xd0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00e      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <HAL_TIM_Base_Start_IT+0xd4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d009      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a19      	ldr	r2, [pc, #100]	; (8003558 <HAL_TIM_Base_Start_IT+0xd8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a18      	ldr	r2, [pc, #96]	; (800355c <HAL_TIM_Base_Start_IT+0xdc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d111      	bne.n	8003524 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d010      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003522:	e007      	b.n	8003534 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40000400 	.word	0x40000400
 800354c:	40000800 	.word	0x40000800
 8003550:	40000c00 	.word	0x40000c00
 8003554:	40010400 	.word	0x40010400
 8003558:	40014000 	.word	0x40014000
 800355c:	40001800 	.word	0x40001800

08003560 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a1a      	ldr	r2, [r3, #32]
 800357e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10f      	bne.n	80035a8 <HAL_TIM_Base_Stop_IT+0x48>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a1a      	ldr	r2, [r3, #32]
 800358e:	f240 4344 	movw	r3, #1092	; 0x444
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <HAL_TIM_Base_Stop_IT+0x48>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d020      	beq.n	8003622 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01b      	beq.n	8003622 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f06f 0202 	mvn.w	r2, #2
 80035f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f8dc 	bl	80037c6 <HAL_TIM_IC_CaptureCallback>
 800360e:	e005      	b.n	800361c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f8ce 	bl	80037b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8df 	bl	80037da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d020      	beq.n	800366e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01b      	beq.n	800366e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f06f 0204 	mvn.w	r2, #4
 800363e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f8b6 	bl	80037c6 <HAL_TIM_IC_CaptureCallback>
 800365a:	e005      	b.n	8003668 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f8a8 	bl	80037b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8b9 	bl	80037da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01b      	beq.n	80036ba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f06f 0208 	mvn.w	r2, #8
 800368a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2204      	movs	r2, #4
 8003690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f890 	bl	80037c6 <HAL_TIM_IC_CaptureCallback>
 80036a6:	e005      	b.n	80036b4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f882 	bl	80037b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f893 	bl	80037da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01b      	beq.n	8003706 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f06f 0210 	mvn.w	r2, #16
 80036d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2208      	movs	r2, #8
 80036dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f86a 	bl	80037c6 <HAL_TIM_IC_CaptureCallback>
 80036f2:	e005      	b.n	8003700 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f85c 	bl	80037b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f86d 	bl	80037da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00c      	beq.n	800372a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f06f 0201 	mvn.w	r2, #1
 8003722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f83a 	bl	800379e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00c      	beq.n	800374e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f98d 	bl	8003a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00c      	beq.n	8003772 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800376a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f83e 	bl	80037ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00c      	beq.n	8003796 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f06f 0220 	mvn.w	r2, #32
 800378e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f95f 	bl	8003a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a46      	ldr	r2, [pc, #280]	; (8003930 <TIM_Base_SetConfig+0x12c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d00f      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a43      	ldr	r2, [pc, #268]	; (8003934 <TIM_Base_SetConfig+0x130>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00b      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a42      	ldr	r2, [pc, #264]	; (8003938 <TIM_Base_SetConfig+0x134>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d007      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a41      	ldr	r2, [pc, #260]	; (800393c <TIM_Base_SetConfig+0x138>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a40      	ldr	r2, [pc, #256]	; (8003940 <TIM_Base_SetConfig+0x13c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a35      	ldr	r2, [pc, #212]	; (8003930 <TIM_Base_SetConfig+0x12c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02b      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003864:	d027      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a32      	ldr	r2, [pc, #200]	; (8003934 <TIM_Base_SetConfig+0x130>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d023      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a31      	ldr	r2, [pc, #196]	; (8003938 <TIM_Base_SetConfig+0x134>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01f      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a30      	ldr	r2, [pc, #192]	; (800393c <TIM_Base_SetConfig+0x138>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01b      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2f      	ldr	r2, [pc, #188]	; (8003940 <TIM_Base_SetConfig+0x13c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d017      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2e      	ldr	r2, [pc, #184]	; (8003944 <TIM_Base_SetConfig+0x140>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a2d      	ldr	r2, [pc, #180]	; (8003948 <TIM_Base_SetConfig+0x144>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00f      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2c      	ldr	r2, [pc, #176]	; (800394c <TIM_Base_SetConfig+0x148>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00b      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a2b      	ldr	r2, [pc, #172]	; (8003950 <TIM_Base_SetConfig+0x14c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d007      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2a      	ldr	r2, [pc, #168]	; (8003954 <TIM_Base_SetConfig+0x150>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d003      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a29      	ldr	r2, [pc, #164]	; (8003958 <TIM_Base_SetConfig+0x154>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d108      	bne.n	80038c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a10      	ldr	r2, [pc, #64]	; (8003930 <TIM_Base_SetConfig+0x12c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0xf8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a12      	ldr	r2, [pc, #72]	; (8003940 <TIM_Base_SetConfig+0x13c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d103      	bne.n	8003904 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b01      	cmp	r3, #1
 8003914:	d105      	bne.n	8003922 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	611a      	str	r2, [r3, #16]
  }
}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40010000 	.word	0x40010000
 8003934:	40000400 	.word	0x40000400
 8003938:	40000800 	.word	0x40000800
 800393c:	40000c00 	.word	0x40000c00
 8003940:	40010400 	.word	0x40010400
 8003944:	40014000 	.word	0x40014000
 8003948:	40014400 	.word	0x40014400
 800394c:	40014800 	.word	0x40014800
 8003950:	40001800 	.word	0x40001800
 8003954:	40001c00 	.word	0x40001c00
 8003958:	40002000 	.word	0x40002000

0800395c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003970:	2302      	movs	r3, #2
 8003972:	e05a      	b.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a21      	ldr	r2, [pc, #132]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d022      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d01d      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d018      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00e      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a17      	ldr	r2, [pc, #92]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d004      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d10c      	bne.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800
 8003a44:	40000c00 	.word	0x40000c00
 8003a48:	40010400 	.word	0x40010400
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	40001800 	.word	0x40001800

08003a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e042      	b.n	8003b14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fe fa70 	bl	8001f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fd69 	bl	8004598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	; 0x28
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d175      	bne.n	8003c28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_UART_Transmit+0x2c>
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e06e      	b.n	8003c2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2221      	movs	r2, #33	; 0x21
 8003b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5a:	f7fe fc1f 	bl	800239c <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	d108      	bne.n	8003b88 <HAL_UART_Transmit+0x6c>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e003      	b.n	8003b90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b90:	e02e      	b.n	8003bf0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2180      	movs	r1, #128	; 0x80
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fb05 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e03a      	b.n	8003c2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	e007      	b.n	8003be2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	3301      	adds	r3, #1
 8003be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1cb      	bne.n	8003b92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fad1 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e006      	b.n	8003c2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b0ba      	sub	sp, #232	; 0xe8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <HAL_UART_IRQHandler+0x66>
 8003c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fbc2 	bl	800441c <UART_Receive_IT>
      return;
 8003c98:	e25b      	b.n	8004152 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80de 	beq.w	8003e60 <HAL_UART_IRQHandler+0x22c>
 8003ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80d1 	beq.w	8003e60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00b      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xae>
 8003cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_UART_IRQHandler+0xd2>
 8003cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f043 0202 	orr.w	r2, r3, #2
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HAL_UART_IRQHandler+0xf6>
 8003d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	f043 0204 	orr.w	r2, r3, #4
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d011      	beq.n	8003d5a <HAL_UART_IRQHandler+0x126>
 8003d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d105      	bne.n	8003d4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f043 0208 	orr.w	r2, r3, #8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 81f2 	beq.w	8004148 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_UART_IRQHandler+0x14e>
 8003d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fb4d 	bl	800441c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <HAL_UART_IRQHandler+0x17a>
 8003da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d04f      	beq.n	8003e4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa55 	bl	800425e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d141      	bne.n	8003e46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3314      	adds	r3, #20
 8003dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3314      	adds	r3, #20
 8003dea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1d9      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d013      	beq.n	8003e3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1a:	4a7e      	ldr	r2, [pc, #504]	; (8004014 <HAL_UART_IRQHandler+0x3e0>)
 8003e1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fc6b 	bl	80026fe <HAL_DMA_Abort_IT>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d016      	beq.n	8003e5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3c:	e00e      	b.n	8003e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f99e 	bl	8004180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e44:	e00a      	b.n	8003e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f99a 	bl	8004180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4c:	e006      	b.n	8003e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f996 	bl	8004180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003e5a:	e175      	b.n	8004148 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e5c:	bf00      	nop
    return;
 8003e5e:	e173      	b.n	8004148 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	f040 814f 	bne.w	8004108 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8148 	beq.w	8004108 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8141 	beq.w	8004108 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	f040 80b6 	bne.w	8004018 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003eb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8145 	beq.w	800414c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	f080 813e 	bcs.w	800414c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ed6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee2:	f000 8088 	beq.w	8003ff6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1d9      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3314      	adds	r3, #20
 8003f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e1      	bne.n	8003f32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3314      	adds	r3, #20
 8003f74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3314      	adds	r3, #20
 8003f8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e3      	bne.n	8003f6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc6:	f023 0310 	bic.w	r3, r3, #16
 8003fca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e3      	bne.n	8003fb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fb14 	bl	800261e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004004:	b29b      	uxth	r3, r3
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	b29b      	uxth	r3, r3
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f8c1 	bl	8004194 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004012:	e09b      	b.n	800414c <HAL_UART_IRQHandler+0x518>
 8004014:	08004325 	.word	0x08004325
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004020:	b29b      	uxth	r3, r3
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 808e 	beq.w	8004150 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8089 	beq.w	8004150 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800404e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004054:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004062:	647a      	str	r2, [r7, #68]	; 0x44
 8004064:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004068:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e3      	bne.n	800403e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3314      	adds	r3, #20
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	623b      	str	r3, [r7, #32]
   return(result);
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3314      	adds	r3, #20
 8004096:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800409a:	633a      	str	r2, [r7, #48]	; 0x30
 800409c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e3      	bne.n	8004076 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0310 	bic.w	r3, r3, #16
 80040d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040e0:	61fa      	str	r2, [r7, #28]
 80040e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	69b9      	ldr	r1, [r7, #24]
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	617b      	str	r3, [r7, #20]
   return(result);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e3      	bne.n	80040bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040fe:	4619      	mov	r1, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f847 	bl	8004194 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004106:	e023      	b.n	8004150 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d009      	beq.n	8004128 <HAL_UART_IRQHandler+0x4f4>
 8004114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f913 	bl	800434c <UART_Transmit_IT>
    return;
 8004126:	e014      	b.n	8004152 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00e      	beq.n	8004152 <HAL_UART_IRQHandler+0x51e>
 8004134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f953 	bl	80043ec <UART_EndTransmit_IT>
    return;
 8004146:	e004      	b.n	8004152 <HAL_UART_IRQHandler+0x51e>
    return;
 8004148:	bf00      	nop
 800414a:	e002      	b.n	8004152 <HAL_UART_IRQHandler+0x51e>
      return;
 800414c:	bf00      	nop
 800414e:	e000      	b.n	8004152 <HAL_UART_IRQHandler+0x51e>
      return;
 8004150:	bf00      	nop
  }
}
 8004152:	37e8      	adds	r7, #232	; 0xe8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041bc:	e03b      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c4:	d037      	beq.n	8004236 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c6:	f7fe f8e9 	bl	800239c <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	6a3a      	ldr	r2, [r7, #32]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d302      	bcc.n	80041dc <UART_WaitOnFlagUntilTimeout+0x30>
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e03a      	b.n	8004256 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d023      	beq.n	8004236 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b80      	cmp	r3, #128	; 0x80
 80041f2:	d020      	beq.n	8004236 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d01d      	beq.n	8004236 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d116      	bne.n	8004236 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f81d 	bl	800425e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2208      	movs	r2, #8
 8004228:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e00f      	b.n	8004256 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4013      	ands	r3, r2
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	429a      	cmp	r2, r3
 8004244:	bf0c      	ite	eq
 8004246:	2301      	moveq	r3, #1
 8004248:	2300      	movne	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	429a      	cmp	r2, r3
 8004252:	d0b4      	beq.n	80041be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800425e:	b480      	push	{r7}
 8004260:	b095      	sub	sp, #84	; 0x54
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800427c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	330c      	adds	r3, #12
 8004284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004286:	643a      	str	r2, [r7, #64]	; 0x40
 8004288:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800428c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e5      	bne.n	8004266 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3314      	adds	r3, #20
 80042a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3314      	adds	r3, #20
 80042b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e5      	bne.n	800429a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d119      	bne.n	800430a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f023 0310 	bic.w	r3, r3, #16
 80042ec:	647b      	str	r3, [r7, #68]	; 0x44
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042f6:	61ba      	str	r2, [r7, #24]
 80042f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6979      	ldr	r1, [r7, #20]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	613b      	str	r3, [r7, #16]
   return(result);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e5      	bne.n	80042d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004318:	bf00      	nop
 800431a:	3754      	adds	r7, #84	; 0x54
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f7ff ff1e 	bl	8004180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b21      	cmp	r3, #33	; 0x21
 800435e:	d13e      	bne.n	80043de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004368:	d114      	bne.n	8004394 <UART_Transmit_IT+0x48>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d110      	bne.n	8004394 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004386:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	1c9a      	adds	r2, r3, #2
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	621a      	str	r2, [r3, #32]
 8004392:	e008      	b.n	80043a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	1c59      	adds	r1, r3, #1
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6211      	str	r1, [r2, #32]
 800439e:	781a      	ldrb	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	4619      	mov	r1, r3
 80043b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10f      	bne.n	80043da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e000      	b.n	80043e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043de:	2302      	movs	r3, #2
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004402:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff fea3 	bl	8004158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08c      	sub	sp, #48	; 0x30
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b22      	cmp	r3, #34	; 0x22
 800442e:	f040 80ae 	bne.w	800458e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443a:	d117      	bne.n	800446c <UART_Receive_IT+0x50>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d113      	bne.n	800446c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004444:	2300      	movs	r3, #0
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	b29a      	uxth	r2, r3
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	1c9a      	adds	r2, r3, #2
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	629a      	str	r2, [r3, #40]	; 0x28
 800446a:	e026      	b.n	80044ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447e:	d007      	beq.n	8004490 <UART_Receive_IT+0x74>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <UART_Receive_IT+0x82>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	b2da      	uxtb	r2, r3
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e008      	b.n	80044b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4619      	mov	r1, r3
 80044c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d15d      	bne.n	800458a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0220 	bic.w	r2, r2, #32
 80044dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	2b01      	cmp	r3, #1
 8004512:	d135      	bne.n	8004580 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	613b      	str	r3, [r7, #16]
   return(result);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453a:	623a      	str	r2, [r7, #32]
 800453c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	69f9      	ldr	r1, [r7, #28]
 8004540:	6a3a      	ldr	r2, [r7, #32]
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	61bb      	str	r3, [r7, #24]
   return(result);
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e5      	bne.n	800451a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d10a      	bne.n	8004572 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fe0b 	bl	8004194 <HAL_UARTEx_RxEventCallback>
 800457e:	e002      	b.n	8004586 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fdf3 	bl	800416c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e002      	b.n	8004590 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3730      	adds	r7, #48	; 0x30
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800459c:	b0c0      	sub	sp, #256	; 0x100
 800459e:	af00      	add	r7, sp, #0
 80045a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b4:	68d9      	ldr	r1, [r3, #12]
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	ea40 0301 	orr.w	r3, r0, r1
 80045c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045f0:	f021 010c 	bic.w	r1, r1, #12
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045fe:	430b      	orrs	r3, r1
 8004600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004612:	6999      	ldr	r1, [r3, #24]
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	ea40 0301 	orr.w	r3, r0, r1
 800461e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4b8f      	ldr	r3, [pc, #572]	; (8004864 <UART_SetConfig+0x2cc>)
 8004628:	429a      	cmp	r2, r3
 800462a:	d005      	beq.n	8004638 <UART_SetConfig+0xa0>
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b8d      	ldr	r3, [pc, #564]	; (8004868 <UART_SetConfig+0x2d0>)
 8004634:	429a      	cmp	r2, r3
 8004636:	d104      	bne.n	8004642 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004638:	f7fe febe 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 800463c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004640:	e003      	b.n	800464a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004642:	f7fe fea5 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8004646:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004654:	f040 810c 	bne.w	8004870 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465c:	2200      	movs	r2, #0
 800465e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004662:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004666:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800466a:	4622      	mov	r2, r4
 800466c:	462b      	mov	r3, r5
 800466e:	1891      	adds	r1, r2, r2
 8004670:	65b9      	str	r1, [r7, #88]	; 0x58
 8004672:	415b      	adcs	r3, r3
 8004674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800467a:	4621      	mov	r1, r4
 800467c:	eb12 0801 	adds.w	r8, r2, r1
 8004680:	4629      	mov	r1, r5
 8004682:	eb43 0901 	adc.w	r9, r3, r1
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800469a:	4690      	mov	r8, r2
 800469c:	4699      	mov	r9, r3
 800469e:	4623      	mov	r3, r4
 80046a0:	eb18 0303 	adds.w	r3, r8, r3
 80046a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046a8:	462b      	mov	r3, r5
 80046aa:	eb49 0303 	adc.w	r3, r9, r3
 80046ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046c6:	460b      	mov	r3, r1
 80046c8:	18db      	adds	r3, r3, r3
 80046ca:	653b      	str	r3, [r7, #80]	; 0x50
 80046cc:	4613      	mov	r3, r2
 80046ce:	eb42 0303 	adc.w	r3, r2, r3
 80046d2:	657b      	str	r3, [r7, #84]	; 0x54
 80046d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046dc:	f7fc fa74 	bl	8000bc8 <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4b61      	ldr	r3, [pc, #388]	; (800486c <UART_SetConfig+0x2d4>)
 80046e6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	011c      	lsls	r4, r3, #4
 80046ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	1891      	adds	r1, r2, r2
 8004706:	64b9      	str	r1, [r7, #72]	; 0x48
 8004708:	415b      	adcs	r3, r3
 800470a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800470c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004710:	4641      	mov	r1, r8
 8004712:	eb12 0a01 	adds.w	sl, r2, r1
 8004716:	4649      	mov	r1, r9
 8004718:	eb43 0b01 	adc.w	fp, r3, r1
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004728:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800472c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004730:	4692      	mov	sl, r2
 8004732:	469b      	mov	fp, r3
 8004734:	4643      	mov	r3, r8
 8004736:	eb1a 0303 	adds.w	r3, sl, r3
 800473a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800473e:	464b      	mov	r3, r9
 8004740:	eb4b 0303 	adc.w	r3, fp, r3
 8004744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004754:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004758:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800475c:	460b      	mov	r3, r1
 800475e:	18db      	adds	r3, r3, r3
 8004760:	643b      	str	r3, [r7, #64]	; 0x40
 8004762:	4613      	mov	r3, r2
 8004764:	eb42 0303 	adc.w	r3, r2, r3
 8004768:	647b      	str	r3, [r7, #68]	; 0x44
 800476a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800476e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004772:	f7fc fa29 	bl	8000bc8 <__aeabi_uldivmod>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4611      	mov	r1, r2
 800477c:	4b3b      	ldr	r3, [pc, #236]	; (800486c <UART_SetConfig+0x2d4>)
 800477e:	fba3 2301 	umull	r2, r3, r3, r1
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	2264      	movs	r2, #100	; 0x64
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	1acb      	subs	r3, r1, r3
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004792:	4b36      	ldr	r3, [pc, #216]	; (800486c <UART_SetConfig+0x2d4>)
 8004794:	fba3 2302 	umull	r2, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047a0:	441c      	add	r4, r3
 80047a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	1891      	adds	r1, r2, r2
 80047ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80047bc:	415b      	adcs	r3, r3
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047c4:	4641      	mov	r1, r8
 80047c6:	1851      	adds	r1, r2, r1
 80047c8:	6339      	str	r1, [r7, #48]	; 0x30
 80047ca:	4649      	mov	r1, r9
 80047cc:	414b      	adcs	r3, r1
 80047ce:	637b      	str	r3, [r7, #52]	; 0x34
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047dc:	4659      	mov	r1, fp
 80047de:	00cb      	lsls	r3, r1, #3
 80047e0:	4651      	mov	r1, sl
 80047e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e6:	4651      	mov	r1, sl
 80047e8:	00ca      	lsls	r2, r1, #3
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	4603      	mov	r3, r0
 80047f0:	4642      	mov	r2, r8
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047f8:	464b      	mov	r3, r9
 80047fa:	460a      	mov	r2, r1
 80047fc:	eb42 0303 	adc.w	r3, r2, r3
 8004800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004810:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004814:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004818:	460b      	mov	r3, r1
 800481a:	18db      	adds	r3, r3, r3
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
 800481e:	4613      	mov	r3, r2
 8004820:	eb42 0303 	adc.w	r3, r2, r3
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800482a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800482e:	f7fc f9cb 	bl	8000bc8 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4b0d      	ldr	r3, [pc, #52]	; (800486c <UART_SetConfig+0x2d4>)
 8004838:	fba3 1302 	umull	r1, r3, r3, r2
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	2164      	movs	r1, #100	; 0x64
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	3332      	adds	r3, #50	; 0x32
 800484a:	4a08      	ldr	r2, [pc, #32]	; (800486c <UART_SetConfig+0x2d4>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	f003 0207 	and.w	r2, r3, #7
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4422      	add	r2, r4
 800485e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004860:	e106      	b.n	8004a70 <UART_SetConfig+0x4d8>
 8004862:	bf00      	nop
 8004864:	40011000 	.word	0x40011000
 8004868:	40011400 	.word	0x40011400
 800486c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800487a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800487e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004882:	4642      	mov	r2, r8
 8004884:	464b      	mov	r3, r9
 8004886:	1891      	adds	r1, r2, r2
 8004888:	6239      	str	r1, [r7, #32]
 800488a:	415b      	adcs	r3, r3
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
 800488e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004892:	4641      	mov	r1, r8
 8004894:	1854      	adds	r4, r2, r1
 8004896:	4649      	mov	r1, r9
 8004898:	eb43 0501 	adc.w	r5, r3, r1
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	00eb      	lsls	r3, r5, #3
 80048a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048aa:	00e2      	lsls	r2, r4, #3
 80048ac:	4614      	mov	r4, r2
 80048ae:	461d      	mov	r5, r3
 80048b0:	4643      	mov	r3, r8
 80048b2:	18e3      	adds	r3, r4, r3
 80048b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048b8:	464b      	mov	r3, r9
 80048ba:	eb45 0303 	adc.w	r3, r5, r3
 80048be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048de:	4629      	mov	r1, r5
 80048e0:	008b      	lsls	r3, r1, #2
 80048e2:	4621      	mov	r1, r4
 80048e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e8:	4621      	mov	r1, r4
 80048ea:	008a      	lsls	r2, r1, #2
 80048ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048f0:	f7fc f96a 	bl	8000bc8 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4b60      	ldr	r3, [pc, #384]	; (8004a7c <UART_SetConfig+0x4e4>)
 80048fa:	fba3 2302 	umull	r2, r3, r3, r2
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	011c      	lsls	r4, r3, #4
 8004902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800490c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004910:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	1891      	adds	r1, r2, r2
 800491a:	61b9      	str	r1, [r7, #24]
 800491c:	415b      	adcs	r3, r3
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004924:	4641      	mov	r1, r8
 8004926:	1851      	adds	r1, r2, r1
 8004928:	6139      	str	r1, [r7, #16]
 800492a:	4649      	mov	r1, r9
 800492c:	414b      	adcs	r3, r1
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800493c:	4659      	mov	r1, fp
 800493e:	00cb      	lsls	r3, r1, #3
 8004940:	4651      	mov	r1, sl
 8004942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004946:	4651      	mov	r1, sl
 8004948:	00ca      	lsls	r2, r1, #3
 800494a:	4610      	mov	r0, r2
 800494c:	4619      	mov	r1, r3
 800494e:	4603      	mov	r3, r0
 8004950:	4642      	mov	r2, r8
 8004952:	189b      	adds	r3, r3, r2
 8004954:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004958:	464b      	mov	r3, r9
 800495a:	460a      	mov	r2, r1
 800495c:	eb42 0303 	adc.w	r3, r2, r3
 8004960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	67bb      	str	r3, [r7, #120]	; 0x78
 800496e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800497c:	4649      	mov	r1, r9
 800497e:	008b      	lsls	r3, r1, #2
 8004980:	4641      	mov	r1, r8
 8004982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004986:	4641      	mov	r1, r8
 8004988:	008a      	lsls	r2, r1, #2
 800498a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800498e:	f7fc f91b 	bl	8000bc8 <__aeabi_uldivmod>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4611      	mov	r1, r2
 8004998:	4b38      	ldr	r3, [pc, #224]	; (8004a7c <UART_SetConfig+0x4e4>)
 800499a:	fba3 2301 	umull	r2, r3, r3, r1
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2264      	movs	r2, #100	; 0x64
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	1acb      	subs	r3, r1, r3
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	3332      	adds	r3, #50	; 0x32
 80049ac:	4a33      	ldr	r2, [pc, #204]	; (8004a7c <UART_SetConfig+0x4e4>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b8:	441c      	add	r4, r3
 80049ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049be:	2200      	movs	r2, #0
 80049c0:	673b      	str	r3, [r7, #112]	; 0x70
 80049c2:	677a      	str	r2, [r7, #116]	; 0x74
 80049c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049c8:	4642      	mov	r2, r8
 80049ca:	464b      	mov	r3, r9
 80049cc:	1891      	adds	r1, r2, r2
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	415b      	adcs	r3, r3
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049d8:	4641      	mov	r1, r8
 80049da:	1851      	adds	r1, r2, r1
 80049dc:	6039      	str	r1, [r7, #0]
 80049de:	4649      	mov	r1, r9
 80049e0:	414b      	adcs	r3, r1
 80049e2:	607b      	str	r3, [r7, #4]
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049f0:	4659      	mov	r1, fp
 80049f2:	00cb      	lsls	r3, r1, #3
 80049f4:	4651      	mov	r1, sl
 80049f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049fa:	4651      	mov	r1, sl
 80049fc:	00ca      	lsls	r2, r1, #3
 80049fe:	4610      	mov	r0, r2
 8004a00:	4619      	mov	r1, r3
 8004a02:	4603      	mov	r3, r0
 8004a04:	4642      	mov	r2, r8
 8004a06:	189b      	adds	r3, r3, r2
 8004a08:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	460a      	mov	r2, r1
 8004a0e:	eb42 0303 	adc.w	r3, r2, r3
 8004a12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a1e:	667a      	str	r2, [r7, #100]	; 0x64
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	008b      	lsls	r3, r1, #2
 8004a30:	4641      	mov	r1, r8
 8004a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a36:	4641      	mov	r1, r8
 8004a38:	008a      	lsls	r2, r1, #2
 8004a3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a3e:	f7fc f8c3 	bl	8000bc8 <__aeabi_uldivmod>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <UART_SetConfig+0x4e4>)
 8004a48:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	2164      	movs	r1, #100	; 0x64
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	3332      	adds	r3, #50	; 0x32
 8004a5a:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <UART_SetConfig+0x4e4>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	f003 020f 	and.w	r2, r3, #15
 8004a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4422      	add	r2, r4
 8004a6e:	609a      	str	r2, [r3, #8]
}
 8004a70:	bf00      	nop
 8004a72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a76:	46bd      	mov	sp, r7
 8004a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7c:	51eb851f 	.word	0x51eb851f

08004a80 <LL_GPIO_SetPinMode>:
{
 8004a80:	b480      	push	{r7}
 8004a82:	b08b      	sub	sp, #44	; 0x2c
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	fa93 f3a3 	rbit	r3, r3
 8004a9a:	613b      	str	r3, [r7, #16]
  return result;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004aa6:	2320      	movs	r3, #32
 8004aa8:	e003      	b.n	8004ab2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	fab3 f383 	clz	r3, r3
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	2103      	movs	r1, #3
 8004ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aba:	43db      	mvns	r3, r3
 8004abc:	401a      	ands	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	fa93 f3a3 	rbit	r3, r3
 8004ac8:	61fb      	str	r3, [r7, #28]
  return result;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004ad4:	2320      	movs	r3, #32
 8004ad6:	e003      	b.n	8004ae0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	fab3 f383 	clz	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	601a      	str	r2, [r3, #0]
}
 8004aee:	bf00      	nop
 8004af0:	372c      	adds	r7, #44	; 0x2c
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <LL_GPIO_SetPinOutputType>:
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	401a      	ands	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	605a      	str	r2, [r3, #4]
}
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <LL_GPIO_SetPinSpeed>:
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b08b      	sub	sp, #44	; 0x2c
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	fa93 f3a3 	rbit	r3, r3
 8004b44:	613b      	str	r3, [r7, #16]
  return result;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004b50:	2320      	movs	r3, #32
 8004b52:	e003      	b.n	8004b5c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	fab3 f383 	clz	r3, r3
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	2103      	movs	r1, #3
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	fa93 f3a3 	rbit	r3, r3
 8004b72:	61fb      	str	r3, [r7, #28]
  return result;
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004b7e:	2320      	movs	r3, #32
 8004b80:	e003      	b.n	8004b8a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	fab3 f383 	clz	r3, r3
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b92:	431a      	orrs	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	609a      	str	r2, [r3, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	372c      	adds	r7, #44	; 0x2c
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <LL_GPIO_SetPinPull>:
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b08b      	sub	sp, #44	; 0x2c
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	fa93 f3a3 	rbit	r3, r3
 8004bbe:	613b      	str	r3, [r7, #16]
  return result;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004bca:	2320      	movs	r3, #32
 8004bcc:	e003      	b.n	8004bd6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	fab3 f383 	clz	r3, r3
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	2103      	movs	r1, #3
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	43db      	mvns	r3, r3
 8004be0:	401a      	ands	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	fa93 f3a3 	rbit	r3, r3
 8004bec:	61fb      	str	r3, [r7, #28]
  return result;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004bf8:	2320      	movs	r3, #32
 8004bfa:	e003      	b.n	8004c04 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	fab3 f383 	clz	r3, r3
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	60da      	str	r2, [r3, #12]
}
 8004c12:	bf00      	nop
 8004c14:	372c      	adds	r7, #44	; 0x2c
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <LL_GPIO_SetAFPin_0_7>:
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b08b      	sub	sp, #44	; 0x2c
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1a      	ldr	r2, [r3, #32]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	fa93 f3a3 	rbit	r3, r3
 8004c38:	613b      	str	r3, [r7, #16]
  return result;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004c44:	2320      	movs	r3, #32
 8004c46:	e003      	b.n	8004c50 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	fab3 f383 	clz	r3, r3
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	210f      	movs	r1, #15
 8004c54:	fa01 f303 	lsl.w	r3, r1, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	401a      	ands	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	fa93 f3a3 	rbit	r3, r3
 8004c66:	61fb      	str	r3, [r7, #28]
  return result;
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004c72:	2320      	movs	r3, #32
 8004c74:	e003      	b.n	8004c7e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	fab3 f383 	clz	r3, r3
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	fa01 f303 	lsl.w	r3, r1, r3
 8004c86:	431a      	orrs	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	621a      	str	r2, [r3, #32]
}
 8004c8c:	bf00      	nop
 8004c8e:	372c      	adds	r7, #44	; 0x2c
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <LL_GPIO_SetAFPin_8_15>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b08b      	sub	sp, #44	; 0x2c
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	fa93 f3a3 	rbit	r3, r3
 8004cb4:	613b      	str	r3, [r7, #16]
  return result;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004cc0:	2320      	movs	r3, #32
 8004cc2:	e003      	b.n	8004ccc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	fab3 f383 	clz	r3, r3
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	210f      	movs	r1, #15
 8004cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	401a      	ands	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	fa93 f3a3 	rbit	r3, r3
 8004ce4:	61fb      	str	r3, [r7, #28]
  return result;
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004cf0:	2320      	movs	r3, #32
 8004cf2:	e003      	b.n	8004cfc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	fab3 f383 	clz	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	fa01 f303 	lsl.w	r3, r1, r3
 8004d04:	431a      	orrs	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004d0a:	bf00      	nop
 8004d0c:	372c      	adds	r7, #44	; 0x2c
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b08a      	sub	sp, #40	; 0x28
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	fa93 f3a3 	rbit	r3, r3
 8004d34:	617b      	str	r3, [r7, #20]
  return result;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <LL_GPIO_Init+0x2e>
    return 32U;
 8004d40:	2320      	movs	r3, #32
 8004d42:	e003      	b.n	8004d4c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	fab3 f383 	clz	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004d4e:	e057      	b.n	8004e00 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	2101      	movs	r1, #1
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d049      	beq.n	8004dfa <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d003      	beq.n	8004d76 <LL_GPIO_Init+0x60>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d10d      	bne.n	8004d92 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	6a39      	ldr	r1, [r7, #32]
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff fed3 	bl	8004b2a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6a39      	ldr	r1, [r7, #32]
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff feb4 	bl	8004afa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	461a      	mov	r2, r3
 8004d98:	6a39      	ldr	r1, [r7, #32]
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff ff02 	bl	8004ba4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d121      	bne.n	8004dec <LL_GPIO_Init+0xd6>
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	fa93 f3a3 	rbit	r3, r3
 8004db2:	60bb      	str	r3, [r7, #8]
  return result;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <LL_GPIO_Init+0xac>
    return 32U;
 8004dbe:	2320      	movs	r3, #32
 8004dc0:	e003      	b.n	8004dca <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	fab3 f383 	clz	r3, r3
 8004dc8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004dca:	2b07      	cmp	r3, #7
 8004dcc:	d807      	bhi.n	8004dde <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6a39      	ldr	r1, [r7, #32]
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff ff21 	bl	8004c1e <LL_GPIO_SetAFPin_0_7>
 8004ddc:	e006      	b.n	8004dec <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	461a      	mov	r2, r3
 8004de4:	6a39      	ldr	r1, [r7, #32]
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7ff ff56 	bl	8004c98 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	461a      	mov	r2, r3
 8004df2:	6a39      	ldr	r1, [r7, #32]
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff fe43 	bl	8004a80 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1a0      	bne.n	8004d50 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3728      	adds	r7, #40	; 0x28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <LL_SPI_IsEnabled>:
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b40      	cmp	r3, #64	; 0x40
 8004e2a:	d101      	bne.n	8004e30 <LL_SPI_IsEnabled+0x18>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <LL_SPI_IsEnabled+0x1a>
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <LL_SPI_SetCRCPolynomial>:
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	611a      	str	r2, [r3, #16]
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff ffd3 	bl	8004e18 <LL_SPI_IsEnabled>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d139      	bne.n	8004eec <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e80:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	6811      	ldr	r1, [r2, #0]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	6852      	ldr	r2, [r2, #4]
 8004e8c:	4311      	orrs	r1, r2
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	6892      	ldr	r2, [r2, #8]
 8004e92:	4311      	orrs	r1, r2
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	68d2      	ldr	r2, [r2, #12]
 8004e98:	4311      	orrs	r1, r2
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	6912      	ldr	r2, [r2, #16]
 8004e9e:	4311      	orrs	r1, r2
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	6952      	ldr	r2, [r2, #20]
 8004ea4:	4311      	orrs	r1, r2
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	6992      	ldr	r2, [r2, #24]
 8004eaa:	4311      	orrs	r1, r2
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	69d2      	ldr	r2, [r2, #28]
 8004eb0:	4311      	orrs	r1, r2
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	6a12      	ldr	r2, [r2, #32]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f023 0204 	bic.w	r2, r3, #4
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	0c1b      	lsrs	r3, r3, #16
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eda:	d105      	bne.n	8004ee8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff ffab 	bl	8004e3e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	61da      	str	r2, [r3, #28]
  return status;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b085      	sub	sp, #20
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	4603      	mov	r3, r0
 8004f0a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f14:	2b84      	cmp	r3, #132	; 0x84
 8004f16:	d005      	beq.n	8004f24 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	3303      	adds	r3, #3
 8004f22:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f24:	68fb      	ldr	r3, [r7, #12]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f36:	f000 faf5 	bl	8005524 <vTaskStartScheduler>
  
  return osOK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f42:	b089      	sub	sp, #36	; 0x24
 8004f44:	af04      	add	r7, sp, #16
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d020      	beq.n	8004f94 <osThreadCreate+0x54>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d01c      	beq.n	8004f94 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685c      	ldr	r4, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691e      	ldr	r6, [r3, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff ffc8 	bl	8004f02 <makeFreeRtosPriority>
 8004f72:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f7c:	9202      	str	r2, [sp, #8]
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	9100      	str	r1, [sp, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	4632      	mov	r2, r6
 8004f86:	4629      	mov	r1, r5
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f000 f8ed 	bl	8005168 <xTaskCreateStatic>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e01c      	b.n	8004fce <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685c      	ldr	r4, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fa0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff ffaa 	bl	8004f02 <makeFreeRtosPriority>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	f107 030c 	add.w	r3, r7, #12
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	9200      	str	r2, [sp, #0]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	4632      	mov	r2, r6
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f000 f92f 	bl	8005222 <xTaskCreate>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d001      	beq.n	8004fce <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e000      	b.n	8004fd0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004fce:	68fb      	ldr	r3, [r7, #12]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fd8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <osDelay+0x16>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	e000      	b.n	8004ff0 <osDelay+0x18>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fa63 	bl	80054bc <vTaskDelay>
  
  return osOK;
 8004ff6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f103 0208 	add.w	r2, r3, #8
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005018:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f103 0208 	add.w	r2, r3, #8
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f103 0208 	add.w	r2, r3, #8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	601a      	str	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b8:	d103      	bne.n	80050c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	e00c      	b.n	80050dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3308      	adds	r3, #8
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	e002      	b.n	80050d0 <vListInsert+0x2e>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d2f6      	bcs.n	80050ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	601a      	str	r2, [r3, #0]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6892      	ldr	r2, [r2, #8]
 800512a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6852      	ldr	r2, [r2, #4]
 8005134:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d103      	bne.n	8005148 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	1e5a      	subs	r2, r3, #1
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08e      	sub	sp, #56	; 0x38
 800516c:	af04      	add	r7, sp, #16
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10a      	bne.n	8005192 <xTaskCreateStatic+0x2a>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	623b      	str	r3, [r7, #32]
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <xTaskCreateStatic+0x46>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	61fb      	str	r3, [r7, #28]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051ae:	23a0      	movs	r3, #160	; 0xa0
 80051b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2ba0      	cmp	r3, #160	; 0xa0
 80051b6:	d00a      	beq.n	80051ce <xTaskCreateStatic+0x66>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	61bb      	str	r3, [r7, #24]
}
 80051ca:	bf00      	nop
 80051cc:	e7fe      	b.n	80051cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d01e      	beq.n	8005214 <xTaskCreateStatic+0xac>
 80051d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01b      	beq.n	8005214 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051ee:	2300      	movs	r3, #0
 80051f0:	9303      	str	r3, [sp, #12]
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	9302      	str	r3, [sp, #8]
 80051f6:	f107 0314 	add.w	r3, r7, #20
 80051fa:	9301      	str	r3, [sp, #4]
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f850 	bl	80052ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800520c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800520e:	f000 f8eb 	bl	80053e8 <prvAddNewTaskToReadyList>
 8005212:	e001      	b.n	8005218 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005218:	697b      	ldr	r3, [r7, #20]
	}
 800521a:	4618      	mov	r0, r3
 800521c:	3728      	adds	r7, #40	; 0x28
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005222:	b580      	push	{r7, lr}
 8005224:	b08c      	sub	sp, #48	; 0x30
 8005226:	af04      	add	r7, sp, #16
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	4613      	mov	r3, r2
 8005230:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4618      	mov	r0, r3
 8005238:	f000 ff0e 	bl	8006058 <pvPortMalloc>
 800523c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00e      	beq.n	8005262 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005244:	20a0      	movs	r0, #160	; 0xa0
 8005246:	f000 ff07 	bl	8006058 <pvPortMalloc>
 800524a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
 8005258:	e005      	b.n	8005266 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800525a:	6978      	ldr	r0, [r7, #20]
 800525c:	f000 ffc8 	bl	80061f0 <vPortFree>
 8005260:	e001      	b.n	8005266 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d017      	beq.n	800529c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	2300      	movs	r3, #0
 8005278:	9303      	str	r3, [sp, #12]
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	9302      	str	r3, [sp, #8]
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f80e 	bl	80052ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005290:	69f8      	ldr	r0, [r7, #28]
 8005292:	f000 f8a9 	bl	80053e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005296:	2301      	movs	r3, #1
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e002      	b.n	80052a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800529c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052a2:	69bb      	ldr	r3, [r7, #24]
	}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3720      	adds	r7, #32
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052c4:	3b01      	subs	r3, #1
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f023 0307 	bic.w	r3, r3, #7
 80052d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	617b      	str	r3, [r7, #20]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01f      	beq.n	800533a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	e012      	b.n	8005326 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	7819      	ldrb	r1, [r3, #0]
 8005308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	3334      	adds	r3, #52	; 0x34
 8005310:	460a      	mov	r2, r1
 8005312:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	4413      	add	r3, r2
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d006      	beq.n	800532e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	3301      	adds	r3, #1
 8005324:	61fb      	str	r3, [r7, #28]
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	2b0f      	cmp	r3, #15
 800532a:	d9e9      	bls.n	8005300 <prvInitialiseNewTask+0x54>
 800532c:	e000      	b.n	8005330 <prvInitialiseNewTask+0x84>
			{
				break;
 800532e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005338:	e003      	b.n	8005342 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	2b13      	cmp	r3, #19
 8005346:	d901      	bls.n	800534c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005348:	2313      	movs	r3, #19
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005350:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005356:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	2200      	movs	r2, #0
 800535c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	3304      	adds	r3, #4
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fe6c 	bl	8005040 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	3318      	adds	r3, #24
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fe67 	bl	8005040 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005376:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	f1c3 0214 	rsb	r2, r3, #20
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005386:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	2200      	movs	r2, #0
 800538c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	2200      	movs	r2, #0
 8005394:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	334c      	adds	r3, #76	; 0x4c
 800539c:	224c      	movs	r2, #76	; 0x4c
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f001 ff5f 	bl	8007264 <memset>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <prvInitialiseNewTask+0x130>)
 80053aa:	651a      	str	r2, [r3, #80]	; 0x50
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	4a0c      	ldr	r2, [pc, #48]	; (80053e0 <prvInitialiseNewTask+0x134>)
 80053b0:	655a      	str	r2, [r3, #84]	; 0x54
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	4a0b      	ldr	r2, [pc, #44]	; (80053e4 <prvInitialiseNewTask+0x138>)
 80053b6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	68f9      	ldr	r1, [r7, #12]
 80053bc:	69b8      	ldr	r0, [r7, #24]
 80053be:	f000 fc3d 	bl	8005c3c <pxPortInitialiseStack>
 80053c2:	4602      	mov	r2, r0
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053d4:	bf00      	nop
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	2000492c 	.word	0x2000492c
 80053e0:	20004994 	.word	0x20004994
 80053e4:	200049fc 	.word	0x200049fc

080053e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053f0:	f000 fd50 	bl	8005e94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053f4:	4b2a      	ldr	r3, [pc, #168]	; (80054a0 <prvAddNewTaskToReadyList+0xb8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3301      	adds	r3, #1
 80053fa:	4a29      	ldr	r2, [pc, #164]	; (80054a0 <prvAddNewTaskToReadyList+0xb8>)
 80053fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053fe:	4b29      	ldr	r3, [pc, #164]	; (80054a4 <prvAddNewTaskToReadyList+0xbc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d109      	bne.n	800541a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005406:	4a27      	ldr	r2, [pc, #156]	; (80054a4 <prvAddNewTaskToReadyList+0xbc>)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800540c:	4b24      	ldr	r3, [pc, #144]	; (80054a0 <prvAddNewTaskToReadyList+0xb8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d110      	bne.n	8005436 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005414:	f000 facc 	bl	80059b0 <prvInitialiseTaskLists>
 8005418:	e00d      	b.n	8005436 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800541a:	4b23      	ldr	r3, [pc, #140]	; (80054a8 <prvAddNewTaskToReadyList+0xc0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005422:	4b20      	ldr	r3, [pc, #128]	; (80054a4 <prvAddNewTaskToReadyList+0xbc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	429a      	cmp	r2, r3
 800542e:	d802      	bhi.n	8005436 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005430:	4a1c      	ldr	r2, [pc, #112]	; (80054a4 <prvAddNewTaskToReadyList+0xbc>)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005436:	4b1d      	ldr	r3, [pc, #116]	; (80054ac <prvAddNewTaskToReadyList+0xc4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3301      	adds	r3, #1
 800543c:	4a1b      	ldr	r2, [pc, #108]	; (80054ac <prvAddNewTaskToReadyList+0xc4>)
 800543e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	2201      	movs	r2, #1
 8005446:	409a      	lsls	r2, r3
 8005448:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <prvAddNewTaskToReadyList+0xc8>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4313      	orrs	r3, r2
 800544e:	4a18      	ldr	r2, [pc, #96]	; (80054b0 <prvAddNewTaskToReadyList+0xc8>)
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <prvAddNewTaskToReadyList+0xcc>)
 8005460:	441a      	add	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3304      	adds	r3, #4
 8005466:	4619      	mov	r1, r3
 8005468:	4610      	mov	r0, r2
 800546a:	f7ff fdf6 	bl	800505a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800546e:	f000 fd41 	bl	8005ef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005472:	4b0d      	ldr	r3, [pc, #52]	; (80054a8 <prvAddNewTaskToReadyList+0xc0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00e      	beq.n	8005498 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800547a:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <prvAddNewTaskToReadyList+0xbc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	429a      	cmp	r2, r3
 8005486:	d207      	bcs.n	8005498 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005488:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <prvAddNewTaskToReadyList+0xd0>)
 800548a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20000cd8 	.word	0x20000cd8
 80054a4:	20000ad4 	.word	0x20000ad4
 80054a8:	20000ce4 	.word	0x20000ce4
 80054ac:	20000cf4 	.word	0x20000cf4
 80054b0:	20000ce0 	.word	0x20000ce0
 80054b4:	20000ad8 	.word	0x20000ad8
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d017      	beq.n	80054fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054ce:	4b13      	ldr	r3, [pc, #76]	; (800551c <vTaskDelay+0x60>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <vTaskDelay+0x30>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	60bb      	str	r3, [r7, #8]
}
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054ec:	f000 f884 	bl	80055f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054f0:	2100      	movs	r1, #0
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fb3c 	bl	8005b70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054f8:	f000 f88c 	bl	8005614 <xTaskResumeAll>
 80054fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d107      	bne.n	8005514 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005504:	4b06      	ldr	r3, [pc, #24]	; (8005520 <vTaskDelay+0x64>)
 8005506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000d00 	.word	0x20000d00
 8005520:	e000ed04 	.word	0xe000ed04

08005524 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	; 0x28
 8005528:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005532:	463a      	mov	r2, r7
 8005534:	1d39      	adds	r1, r7, #4
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	4618      	mov	r0, r3
 800553c:	f7fc f9bc 	bl	80018b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005540:	6839      	ldr	r1, [r7, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	9202      	str	r2, [sp, #8]
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	2300      	movs	r3, #0
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	2300      	movs	r3, #0
 8005550:	460a      	mov	r2, r1
 8005552:	4921      	ldr	r1, [pc, #132]	; (80055d8 <vTaskStartScheduler+0xb4>)
 8005554:	4821      	ldr	r0, [pc, #132]	; (80055dc <vTaskStartScheduler+0xb8>)
 8005556:	f7ff fe07 	bl	8005168 <xTaskCreateStatic>
 800555a:	4603      	mov	r3, r0
 800555c:	4a20      	ldr	r2, [pc, #128]	; (80055e0 <vTaskStartScheduler+0xbc>)
 800555e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005560:	4b1f      	ldr	r3, [pc, #124]	; (80055e0 <vTaskStartScheduler+0xbc>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005568:	2301      	movs	r3, #1
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	e001      	b.n	8005572 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d11b      	bne.n	80055b0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	613b      	str	r3, [r7, #16]
}
 800558a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800558c:	4b15      	ldr	r3, [pc, #84]	; (80055e4 <vTaskStartScheduler+0xc0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	334c      	adds	r3, #76	; 0x4c
 8005592:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <vTaskStartScheduler+0xc4>)
 8005594:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005596:	4b15      	ldr	r3, [pc, #84]	; (80055ec <vTaskStartScheduler+0xc8>)
 8005598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800559c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800559e:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <vTaskStartScheduler+0xcc>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055a4:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <vTaskStartScheduler+0xd0>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055aa:	f000 fbd1 	bl	8005d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055ae:	e00e      	b.n	80055ce <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055b6:	d10a      	bne.n	80055ce <vTaskStartScheduler+0xaa>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	60fb      	str	r3, [r7, #12]
}
 80055ca:	bf00      	nop
 80055cc:	e7fe      	b.n	80055cc <vTaskStartScheduler+0xa8>
}
 80055ce:	bf00      	nop
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	08009760 	.word	0x08009760
 80055dc:	08005981 	.word	0x08005981
 80055e0:	20000cfc 	.word	0x20000cfc
 80055e4:	20000ad4 	.word	0x20000ad4
 80055e8:	20000120 	.word	0x20000120
 80055ec:	20000cf8 	.word	0x20000cf8
 80055f0:	20000ce4 	.word	0x20000ce4
 80055f4:	20000cdc 	.word	0x20000cdc

080055f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055fc:	4b04      	ldr	r3, [pc, #16]	; (8005610 <vTaskSuspendAll+0x18>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3301      	adds	r3, #1
 8005602:	4a03      	ldr	r2, [pc, #12]	; (8005610 <vTaskSuspendAll+0x18>)
 8005604:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005606:	bf00      	nop
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	20000d00 	.word	0x20000d00

08005614 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005622:	4b41      	ldr	r3, [pc, #260]	; (8005728 <xTaskResumeAll+0x114>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <xTaskResumeAll+0x2c>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	603b      	str	r3, [r7, #0]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005640:	f000 fc28 	bl	8005e94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005644:	4b38      	ldr	r3, [pc, #224]	; (8005728 <xTaskResumeAll+0x114>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3b01      	subs	r3, #1
 800564a:	4a37      	ldr	r2, [pc, #220]	; (8005728 <xTaskResumeAll+0x114>)
 800564c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564e:	4b36      	ldr	r3, [pc, #216]	; (8005728 <xTaskResumeAll+0x114>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d161      	bne.n	800571a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005656:	4b35      	ldr	r3, [pc, #212]	; (800572c <xTaskResumeAll+0x118>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d05d      	beq.n	800571a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800565e:	e02e      	b.n	80056be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005660:	4b33      	ldr	r3, [pc, #204]	; (8005730 <xTaskResumeAll+0x11c>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3318      	adds	r3, #24
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff fd51 	bl	8005114 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3304      	adds	r3, #4
 8005676:	4618      	mov	r0, r3
 8005678:	f7ff fd4c 	bl	8005114 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	2201      	movs	r2, #1
 8005682:	409a      	lsls	r2, r3
 8005684:	4b2b      	ldr	r3, [pc, #172]	; (8005734 <xTaskResumeAll+0x120>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4313      	orrs	r3, r2
 800568a:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <xTaskResumeAll+0x120>)
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4a27      	ldr	r2, [pc, #156]	; (8005738 <xTaskResumeAll+0x124>)
 800569c:	441a      	add	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3304      	adds	r3, #4
 80056a2:	4619      	mov	r1, r3
 80056a4:	4610      	mov	r0, r2
 80056a6:	f7ff fcd8 	bl	800505a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ae:	4b23      	ldr	r3, [pc, #140]	; (800573c <xTaskResumeAll+0x128>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d302      	bcc.n	80056be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056b8:	4b21      	ldr	r3, [pc, #132]	; (8005740 <xTaskResumeAll+0x12c>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056be:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <xTaskResumeAll+0x11c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1cc      	bne.n	8005660 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056cc:	f000 fa12 	bl	8005af4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056d0:	4b1c      	ldr	r3, [pc, #112]	; (8005744 <xTaskResumeAll+0x130>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d010      	beq.n	80056fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056dc:	f000 f836 	bl	800574c <xTaskIncrementTick>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056e6:	4b16      	ldr	r3, [pc, #88]	; (8005740 <xTaskResumeAll+0x12c>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f1      	bne.n	80056dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80056f8:	4b12      	ldr	r3, [pc, #72]	; (8005744 <xTaskResumeAll+0x130>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056fe:	4b10      	ldr	r3, [pc, #64]	; (8005740 <xTaskResumeAll+0x12c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005706:	2301      	movs	r3, #1
 8005708:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800570a:	4b0f      	ldr	r3, [pc, #60]	; (8005748 <xTaskResumeAll+0x134>)
 800570c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800571a:	f000 fbeb 	bl	8005ef4 <vPortExitCritical>

	return xAlreadyYielded;
 800571e:	68bb      	ldr	r3, [r7, #8]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20000d00 	.word	0x20000d00
 800572c:	20000cd8 	.word	0x20000cd8
 8005730:	20000c98 	.word	0x20000c98
 8005734:	20000ce0 	.word	0x20000ce0
 8005738:	20000ad8 	.word	0x20000ad8
 800573c:	20000ad4 	.word	0x20000ad4
 8005740:	20000cec 	.word	0x20000cec
 8005744:	20000ce8 	.word	0x20000ce8
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005756:	4b4e      	ldr	r3, [pc, #312]	; (8005890 <xTaskIncrementTick+0x144>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f040 808e 	bne.w	800587c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005760:	4b4c      	ldr	r3, [pc, #304]	; (8005894 <xTaskIncrementTick+0x148>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3301      	adds	r3, #1
 8005766:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005768:	4a4a      	ldr	r2, [pc, #296]	; (8005894 <xTaskIncrementTick+0x148>)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d120      	bne.n	80057b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005774:	4b48      	ldr	r3, [pc, #288]	; (8005898 <xTaskIncrementTick+0x14c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <xTaskIncrementTick+0x48>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	603b      	str	r3, [r7, #0]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <xTaskIncrementTick+0x46>
 8005794:	4b40      	ldr	r3, [pc, #256]	; (8005898 <xTaskIncrementTick+0x14c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	4b40      	ldr	r3, [pc, #256]	; (800589c <xTaskIncrementTick+0x150>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a3e      	ldr	r2, [pc, #248]	; (8005898 <xTaskIncrementTick+0x14c>)
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	4a3e      	ldr	r2, [pc, #248]	; (800589c <xTaskIncrementTick+0x150>)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	4b3d      	ldr	r3, [pc, #244]	; (80058a0 <xTaskIncrementTick+0x154>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3301      	adds	r3, #1
 80057ae:	4a3c      	ldr	r2, [pc, #240]	; (80058a0 <xTaskIncrementTick+0x154>)
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	f000 f99f 	bl	8005af4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057b6:	4b3b      	ldr	r3, [pc, #236]	; (80058a4 <xTaskIncrementTick+0x158>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d348      	bcc.n	8005852 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057c0:	4b35      	ldr	r3, [pc, #212]	; (8005898 <xTaskIncrementTick+0x14c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d104      	bne.n	80057d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ca:	4b36      	ldr	r3, [pc, #216]	; (80058a4 <xTaskIncrementTick+0x158>)
 80057cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057d0:	601a      	str	r2, [r3, #0]
					break;
 80057d2:	e03e      	b.n	8005852 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d4:	4b30      	ldr	r3, [pc, #192]	; (8005898 <xTaskIncrementTick+0x14c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d203      	bcs.n	80057f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057ec:	4a2d      	ldr	r2, [pc, #180]	; (80058a4 <xTaskIncrementTick+0x158>)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057f2:	e02e      	b.n	8005852 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	3304      	adds	r3, #4
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff fc8b 	bl	8005114 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	2b00      	cmp	r3, #0
 8005804:	d004      	beq.n	8005810 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	3318      	adds	r3, #24
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fc82 	bl	8005114 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	2201      	movs	r2, #1
 8005816:	409a      	lsls	r2, r3
 8005818:	4b23      	ldr	r3, [pc, #140]	; (80058a8 <xTaskIncrementTick+0x15c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4313      	orrs	r3, r2
 800581e:	4a22      	ldr	r2, [pc, #136]	; (80058a8 <xTaskIncrementTick+0x15c>)
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005826:	4613      	mov	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4a1f      	ldr	r2, [pc, #124]	; (80058ac <xTaskIncrementTick+0x160>)
 8005830:	441a      	add	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	3304      	adds	r3, #4
 8005836:	4619      	mov	r1, r3
 8005838:	4610      	mov	r0, r2
 800583a:	f7ff fc0e 	bl	800505a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005842:	4b1b      	ldr	r3, [pc, #108]	; (80058b0 <xTaskIncrementTick+0x164>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	429a      	cmp	r2, r3
 800584a:	d3b9      	bcc.n	80057c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800584c:	2301      	movs	r3, #1
 800584e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005850:	e7b6      	b.n	80057c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005852:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <xTaskIncrementTick+0x164>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005858:	4914      	ldr	r1, [pc, #80]	; (80058ac <xTaskIncrementTick+0x160>)
 800585a:	4613      	mov	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d901      	bls.n	800586e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800586a:	2301      	movs	r3, #1
 800586c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800586e:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <xTaskIncrementTick+0x168>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005876:	2301      	movs	r3, #1
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	e004      	b.n	8005886 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800587c:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <xTaskIncrementTick+0x16c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3301      	adds	r3, #1
 8005882:	4a0d      	ldr	r2, [pc, #52]	; (80058b8 <xTaskIncrementTick+0x16c>)
 8005884:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005886:	697b      	ldr	r3, [r7, #20]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000d00 	.word	0x20000d00
 8005894:	20000cdc 	.word	0x20000cdc
 8005898:	20000c90 	.word	0x20000c90
 800589c:	20000c94 	.word	0x20000c94
 80058a0:	20000cf0 	.word	0x20000cf0
 80058a4:	20000cf8 	.word	0x20000cf8
 80058a8:	20000ce0 	.word	0x20000ce0
 80058ac:	20000ad8 	.word	0x20000ad8
 80058b0:	20000ad4 	.word	0x20000ad4
 80058b4:	20000cec 	.word	0x20000cec
 80058b8:	20000ce8 	.word	0x20000ce8

080058bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058c2:	4b29      	ldr	r3, [pc, #164]	; (8005968 <vTaskSwitchContext+0xac>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058ca:	4b28      	ldr	r3, [pc, #160]	; (800596c <vTaskSwitchContext+0xb0>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058d0:	e044      	b.n	800595c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80058d2:	4b26      	ldr	r3, [pc, #152]	; (800596c <vTaskSwitchContext+0xb0>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d8:	4b25      	ldr	r3, [pc, #148]	; (8005970 <vTaskSwitchContext+0xb4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	fab3 f383 	clz	r3, r3
 80058e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058e6:	7afb      	ldrb	r3, [r7, #11]
 80058e8:	f1c3 031f 	rsb	r3, r3, #31
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	4921      	ldr	r1, [pc, #132]	; (8005974 <vTaskSwitchContext+0xb8>)
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	607b      	str	r3, [r7, #4]
}
 8005914:	bf00      	nop
 8005916:	e7fe      	b.n	8005916 <vTaskSwitchContext+0x5a>
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4a14      	ldr	r2, [pc, #80]	; (8005974 <vTaskSwitchContext+0xb8>)
 8005924:	4413      	add	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	605a      	str	r2, [r3, #4]
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	3308      	adds	r3, #8
 800593a:	429a      	cmp	r2, r3
 800593c:	d104      	bne.n	8005948 <vTaskSwitchContext+0x8c>
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	605a      	str	r2, [r3, #4]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	4a0a      	ldr	r2, [pc, #40]	; (8005978 <vTaskSwitchContext+0xbc>)
 8005950:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <vTaskSwitchContext+0xbc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	334c      	adds	r3, #76	; 0x4c
 8005958:	4a08      	ldr	r2, [pc, #32]	; (800597c <vTaskSwitchContext+0xc0>)
 800595a:	6013      	str	r3, [r2, #0]
}
 800595c:	bf00      	nop
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	20000d00 	.word	0x20000d00
 800596c:	20000cec 	.word	0x20000cec
 8005970:	20000ce0 	.word	0x20000ce0
 8005974:	20000ad8 	.word	0x20000ad8
 8005978:	20000ad4 	.word	0x20000ad4
 800597c:	20000120 	.word	0x20000120

08005980 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005988:	f000 f852 	bl	8005a30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <prvIdleTask+0x28>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d9f9      	bls.n	8005988 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <prvIdleTask+0x2c>)
 8005996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059a4:	e7f0      	b.n	8005988 <prvIdleTask+0x8>
 80059a6:	bf00      	nop
 80059a8:	20000ad8 	.word	0x20000ad8
 80059ac:	e000ed04 	.word	0xe000ed04

080059b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059b6:	2300      	movs	r3, #0
 80059b8:	607b      	str	r3, [r7, #4]
 80059ba:	e00c      	b.n	80059d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4a12      	ldr	r2, [pc, #72]	; (8005a10 <prvInitialiseTaskLists+0x60>)
 80059c8:	4413      	add	r3, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff fb18 	bl	8005000 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3301      	adds	r3, #1
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b13      	cmp	r3, #19
 80059da:	d9ef      	bls.n	80059bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059dc:	480d      	ldr	r0, [pc, #52]	; (8005a14 <prvInitialiseTaskLists+0x64>)
 80059de:	f7ff fb0f 	bl	8005000 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059e2:	480d      	ldr	r0, [pc, #52]	; (8005a18 <prvInitialiseTaskLists+0x68>)
 80059e4:	f7ff fb0c 	bl	8005000 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059e8:	480c      	ldr	r0, [pc, #48]	; (8005a1c <prvInitialiseTaskLists+0x6c>)
 80059ea:	f7ff fb09 	bl	8005000 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059ee:	480c      	ldr	r0, [pc, #48]	; (8005a20 <prvInitialiseTaskLists+0x70>)
 80059f0:	f7ff fb06 	bl	8005000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059f4:	480b      	ldr	r0, [pc, #44]	; (8005a24 <prvInitialiseTaskLists+0x74>)
 80059f6:	f7ff fb03 	bl	8005000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <prvInitialiseTaskLists+0x78>)
 80059fc:	4a05      	ldr	r2, [pc, #20]	; (8005a14 <prvInitialiseTaskLists+0x64>)
 80059fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <prvInitialiseTaskLists+0x7c>)
 8005a02:	4a05      	ldr	r2, [pc, #20]	; (8005a18 <prvInitialiseTaskLists+0x68>)
 8005a04:	601a      	str	r2, [r3, #0]
}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000ad8 	.word	0x20000ad8
 8005a14:	20000c68 	.word	0x20000c68
 8005a18:	20000c7c 	.word	0x20000c7c
 8005a1c:	20000c98 	.word	0x20000c98
 8005a20:	20000cac 	.word	0x20000cac
 8005a24:	20000cc4 	.word	0x20000cc4
 8005a28:	20000c90 	.word	0x20000c90
 8005a2c:	20000c94 	.word	0x20000c94

08005a30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a36:	e019      	b.n	8005a6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a38:	f000 fa2c 	bl	8005e94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a3c:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <prvCheckTasksWaitingTermination+0x50>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3304      	adds	r3, #4
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff fb63 	bl	8005114 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <prvCheckTasksWaitingTermination+0x54>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	4a0b      	ldr	r2, [pc, #44]	; (8005a84 <prvCheckTasksWaitingTermination+0x54>)
 8005a56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <prvCheckTasksWaitingTermination+0x58>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	4a0a      	ldr	r2, [pc, #40]	; (8005a88 <prvCheckTasksWaitingTermination+0x58>)
 8005a60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a62:	f000 fa47 	bl	8005ef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f810 	bl	8005a8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a6c:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <prvCheckTasksWaitingTermination+0x58>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e1      	bne.n	8005a38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000cac 	.word	0x20000cac
 8005a84:	20000cd8 	.word	0x20000cd8
 8005a88:	20000cc0 	.word	0x20000cc0

08005a8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	334c      	adds	r3, #76	; 0x4c
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 fc13 	bl	80072c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d108      	bne.n	8005aba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fb9f 	bl	80061f0 <vPortFree>
				vPortFree( pxTCB );
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fb9c 	bl	80061f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ab8:	e018      	b.n	8005aec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d103      	bne.n	8005acc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fb93 	bl	80061f0 <vPortFree>
	}
 8005aca:	e00f      	b.n	8005aec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d00a      	beq.n	8005aec <prvDeleteTCB+0x60>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	60fb      	str	r3, [r7, #12]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <prvDeleteTCB+0x5e>
	}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005afa:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <prvResetNextTaskUnblockTime+0x38>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b04:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <prvResetNextTaskUnblockTime+0x3c>)
 8005b06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b0c:	e008      	b.n	8005b20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <prvResetNextTaskUnblockTime+0x38>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4a04      	ldr	r2, [pc, #16]	; (8005b30 <prvResetNextTaskUnblockTime+0x3c>)
 8005b1e:	6013      	str	r3, [r2, #0]
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20000c90 	.word	0x20000c90
 8005b30:	20000cf8 	.word	0x20000cf8

08005b34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <xTaskGetSchedulerState+0x34>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b42:	2301      	movs	r3, #1
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	e008      	b.n	8005b5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b48:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <xTaskGetSchedulerState+0x38>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b50:	2302      	movs	r3, #2
 8005b52:	607b      	str	r3, [r7, #4]
 8005b54:	e001      	b.n	8005b5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b56:	2300      	movs	r3, #0
 8005b58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b5a:	687b      	ldr	r3, [r7, #4]
	}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	20000ce4 	.word	0x20000ce4
 8005b6c:	20000d00 	.word	0x20000d00

08005b70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b7a:	4b29      	ldr	r3, [pc, #164]	; (8005c20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b80:	4b28      	ldr	r3, [pc, #160]	; (8005c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fac4 	bl	8005114 <uxListRemove>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10b      	bne.n	8005baa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b92:	4b24      	ldr	r3, [pc, #144]	; (8005c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	2201      	movs	r2, #1
 8005b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9e:	43da      	mvns	r2, r3
 8005ba0:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	4a20      	ldr	r2, [pc, #128]	; (8005c28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ba8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb0:	d10a      	bne.n	8005bc8 <prvAddCurrentTaskToDelayedList+0x58>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bb8:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	481a      	ldr	r0, [pc, #104]	; (8005c2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005bc2:	f7ff fa4a 	bl	800505a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bc6:	e026      	b.n	8005c16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4413      	add	r3, r2
 8005bce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bd0:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d209      	bcs.n	8005bf4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005be0:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4619      	mov	r1, r3
 8005bec:	4610      	mov	r0, r2
 8005bee:	f7ff fa58 	bl	80050a2 <vListInsert>
}
 8005bf2:	e010      	b.n	8005c16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f7ff fa4e 	bl	80050a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d202      	bcs.n	8005c16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c10:	4a09      	ldr	r2, [pc, #36]	; (8005c38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6013      	str	r3, [r2, #0]
}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000cdc 	.word	0x20000cdc
 8005c24:	20000ad4 	.word	0x20000ad4
 8005c28:	20000ce0 	.word	0x20000ce0
 8005c2c:	20000cc4 	.word	0x20000cc4
 8005c30:	20000c94 	.word	0x20000c94
 8005c34:	20000c90 	.word	0x20000c90
 8005c38:	20000cf8 	.word	0x20000cf8

08005c3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3b04      	subs	r3, #4
 8005c4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3b04      	subs	r3, #4
 8005c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f023 0201 	bic.w	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3b04      	subs	r3, #4
 8005c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c6c:	4a0c      	ldr	r2, [pc, #48]	; (8005ca0 <pxPortInitialiseStack+0x64>)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3b14      	subs	r3, #20
 8005c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3b04      	subs	r3, #4
 8005c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f06f 0202 	mvn.w	r2, #2
 8005c8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3b20      	subs	r3, #32
 8005c90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c92:	68fb      	ldr	r3, [r7, #12]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	08005ca5 	.word	0x08005ca5

08005ca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cae:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <prvTaskExitError+0x54>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cb6:	d00a      	beq.n	8005cce <prvTaskExitError+0x2a>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	60fb      	str	r3, [r7, #12]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <prvTaskExitError+0x28>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60bb      	str	r3, [r7, #8]
}
 8005ce0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ce2:	bf00      	nop
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0fc      	beq.n	8005ce4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	200000c4 	.word	0x200000c4
 8005cfc:	00000000 	.word	0x00000000

08005d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <pxCurrentTCBConst2>)
 8005d02:	6819      	ldr	r1, [r3, #0]
 8005d04:	6808      	ldr	r0, [r1, #0]
 8005d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0a:	f380 8809 	msr	PSP, r0
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f04f 0000 	mov.w	r0, #0
 8005d16:	f380 8811 	msr	BASEPRI, r0
 8005d1a:	4770      	bx	lr
 8005d1c:	f3af 8000 	nop.w

08005d20 <pxCurrentTCBConst2>:
 8005d20:	20000ad4 	.word	0x20000ad4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop

08005d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d28:	4808      	ldr	r0, [pc, #32]	; (8005d4c <prvPortStartFirstTask+0x24>)
 8005d2a:	6800      	ldr	r0, [r0, #0]
 8005d2c:	6800      	ldr	r0, [r0, #0]
 8005d2e:	f380 8808 	msr	MSP, r0
 8005d32:	f04f 0000 	mov.w	r0, #0
 8005d36:	f380 8814 	msr	CONTROL, r0
 8005d3a:	b662      	cpsie	i
 8005d3c:	b661      	cpsie	f
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	df00      	svc	0
 8005d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d4a:	bf00      	nop
 8005d4c:	e000ed08 	.word	0xe000ed08

08005d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d56:	4b46      	ldr	r3, [pc, #280]	; (8005e70 <xPortStartScheduler+0x120>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a46      	ldr	r2, [pc, #280]	; (8005e74 <xPortStartScheduler+0x124>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d10a      	bne.n	8005d76 <xPortStartScheduler+0x26>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	613b      	str	r3, [r7, #16]
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d76:	4b3e      	ldr	r3, [pc, #248]	; (8005e70 <xPortStartScheduler+0x120>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a3f      	ldr	r2, [pc, #252]	; (8005e78 <xPortStartScheduler+0x128>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d10a      	bne.n	8005d96 <xPortStartScheduler+0x46>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	60fb      	str	r3, [r7, #12]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d96:	4b39      	ldr	r3, [pc, #228]	; (8005e7c <xPortStartScheduler+0x12c>)
 8005d98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	22ff      	movs	r2, #255	; 0xff
 8005da6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	4b31      	ldr	r3, [pc, #196]	; (8005e80 <xPortStartScheduler+0x130>)
 8005dbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005dbe:	4b31      	ldr	r3, [pc, #196]	; (8005e84 <xPortStartScheduler+0x134>)
 8005dc0:	2207      	movs	r2, #7
 8005dc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dc4:	e009      	b.n	8005dda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005dc6:	4b2f      	ldr	r3, [pc, #188]	; (8005e84 <xPortStartScheduler+0x134>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	4a2d      	ldr	r2, [pc, #180]	; (8005e84 <xPortStartScheduler+0x134>)
 8005dce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de2:	2b80      	cmp	r3, #128	; 0x80
 8005de4:	d0ef      	beq.n	8005dc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005de6:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <xPortStartScheduler+0x134>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f1c3 0307 	rsb	r3, r3, #7
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d00a      	beq.n	8005e08 <xPortStartScheduler+0xb8>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	60bb      	str	r3, [r7, #8]
}
 8005e04:	bf00      	nop
 8005e06:	e7fe      	b.n	8005e06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e08:	4b1e      	ldr	r3, [pc, #120]	; (8005e84 <xPortStartScheduler+0x134>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	4a1d      	ldr	r2, [pc, #116]	; (8005e84 <xPortStartScheduler+0x134>)
 8005e10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e12:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <xPortStartScheduler+0x134>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e1a:	4a1a      	ldr	r2, [pc, #104]	; (8005e84 <xPortStartScheduler+0x134>)
 8005e1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e26:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <xPortStartScheduler+0x138>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <xPortStartScheduler+0x138>)
 8005e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e32:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <xPortStartScheduler+0x138>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a14      	ldr	r2, [pc, #80]	; (8005e88 <xPortStartScheduler+0x138>)
 8005e38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e3e:	f000 f8dd 	bl	8005ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <xPortStartScheduler+0x13c>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e48:	f000 f8fc 	bl	8006044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e4c:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <xPortStartScheduler+0x140>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a0f      	ldr	r2, [pc, #60]	; (8005e90 <xPortStartScheduler+0x140>)
 8005e52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e58:	f7ff ff66 	bl	8005d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e5c:	f7ff fd2e 	bl	80058bc <vTaskSwitchContext>
	prvTaskExitError();
 8005e60:	f7ff ff20 	bl	8005ca4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	e000ed00 	.word	0xe000ed00
 8005e74:	410fc271 	.word	0x410fc271
 8005e78:	410fc270 	.word	0x410fc270
 8005e7c:	e000e400 	.word	0xe000e400
 8005e80:	20000d04 	.word	0x20000d04
 8005e84:	20000d08 	.word	0x20000d08
 8005e88:	e000ed20 	.word	0xe000ed20
 8005e8c:	200000c4 	.word	0x200000c4
 8005e90:	e000ef34 	.word	0xe000ef34

08005e94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	607b      	str	r3, [r7, #4]
}
 8005eac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005eae:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <vPortEnterCritical+0x58>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	4a0d      	ldr	r2, [pc, #52]	; (8005eec <vPortEnterCritical+0x58>)
 8005eb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <vPortEnterCritical+0x58>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d10f      	bne.n	8005ee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <vPortEnterCritical+0x5c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	603b      	str	r3, [r7, #0]
}
 8005edc:	bf00      	nop
 8005ede:	e7fe      	b.n	8005ede <vPortEnterCritical+0x4a>
	}
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	200000c4 	.word	0x200000c4
 8005ef0:	e000ed04 	.word	0xe000ed04

08005ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005efa:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <vPortExitCritical+0x50>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <vPortExitCritical+0x24>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	607b      	str	r3, [r7, #4]
}
 8005f14:	bf00      	nop
 8005f16:	e7fe      	b.n	8005f16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <vPortExitCritical+0x50>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	4a09      	ldr	r2, [pc, #36]	; (8005f44 <vPortExitCritical+0x50>)
 8005f20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f22:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <vPortExitCritical+0x50>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d105      	bne.n	8005f36 <vPortExitCritical+0x42>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	200000c4 	.word	0x200000c4
	...

08005f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f50:	f3ef 8009 	mrs	r0, PSP
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <pxCurrentTCBConst>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	f01e 0f10 	tst.w	lr, #16
 8005f60:	bf08      	it	eq
 8005f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6a:	6010      	str	r0, [r2, #0]
 8005f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f74:	f380 8811 	msr	BASEPRI, r0
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f7ff fc9c 	bl	80058bc <vTaskSwitchContext>
 8005f84:	f04f 0000 	mov.w	r0, #0
 8005f88:	f380 8811 	msr	BASEPRI, r0
 8005f8c:	bc09      	pop	{r0, r3}
 8005f8e:	6819      	ldr	r1, [r3, #0]
 8005f90:	6808      	ldr	r0, [r1, #0]
 8005f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f96:	f01e 0f10 	tst.w	lr, #16
 8005f9a:	bf08      	it	eq
 8005f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fa0:	f380 8809 	msr	PSP, r0
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	f3af 8000 	nop.w

08005fb0 <pxCurrentTCBConst>:
 8005fb0:	20000ad4 	.word	0x20000ad4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop

08005fb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	607b      	str	r3, [r7, #4]
}
 8005fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fd2:	f7ff fbbb 	bl	800574c <xTaskIncrementTick>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fdc:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <xPortSysTickHandler+0x40>)
 8005fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f383 8811 	msr	BASEPRI, r3
}
 8005fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006000:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <vPortSetupTimerInterrupt+0x34>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006006:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <vPortSetupTimerInterrupt+0x38>)
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <vPortSetupTimerInterrupt+0x3c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0a      	ldr	r2, [pc, #40]	; (800603c <vPortSetupTimerInterrupt+0x40>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	099b      	lsrs	r3, r3, #6
 8006018:	4a09      	ldr	r2, [pc, #36]	; (8006040 <vPortSetupTimerInterrupt+0x44>)
 800601a:	3b01      	subs	r3, #1
 800601c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800601e:	4b04      	ldr	r3, [pc, #16]	; (8006030 <vPortSetupTimerInterrupt+0x34>)
 8006020:	2207      	movs	r2, #7
 8006022:	601a      	str	r2, [r3, #0]
}
 8006024:	bf00      	nop
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	e000e010 	.word	0xe000e010
 8006034:	e000e018 	.word	0xe000e018
 8006038:	200000b8 	.word	0x200000b8
 800603c:	10624dd3 	.word	0x10624dd3
 8006040:	e000e014 	.word	0xe000e014

08006044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006054 <vPortEnableVFP+0x10>
 8006048:	6801      	ldr	r1, [r0, #0]
 800604a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800604e:	6001      	str	r1, [r0, #0]
 8006050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006052:	bf00      	nop
 8006054:	e000ed88 	.word	0xe000ed88

08006058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	; 0x28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006064:	f7ff fac8 	bl	80055f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006068:	4b5b      	ldr	r3, [pc, #364]	; (80061d8 <pvPortMalloc+0x180>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006070:	f000 f920 	bl	80062b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006074:	4b59      	ldr	r3, [pc, #356]	; (80061dc <pvPortMalloc+0x184>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	f040 8093 	bne.w	80061a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01d      	beq.n	80060c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006088:	2208      	movs	r2, #8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b00      	cmp	r3, #0
 8006098:	d014      	beq.n	80060c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f023 0307 	bic.w	r3, r3, #7
 80060a0:	3308      	adds	r3, #8
 80060a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <pvPortMalloc+0x6c>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	617b      	str	r3, [r7, #20]
}
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d06e      	beq.n	80061a8 <pvPortMalloc+0x150>
 80060ca:	4b45      	ldr	r3, [pc, #276]	; (80061e0 <pvPortMalloc+0x188>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d869      	bhi.n	80061a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060d4:	4b43      	ldr	r3, [pc, #268]	; (80061e4 <pvPortMalloc+0x18c>)
 80060d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060d8:	4b42      	ldr	r3, [pc, #264]	; (80061e4 <pvPortMalloc+0x18c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060de:	e004      	b.n	80060ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d903      	bls.n	80060fc <pvPortMalloc+0xa4>
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1f1      	bne.n	80060e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060fc:	4b36      	ldr	r3, [pc, #216]	; (80061d8 <pvPortMalloc+0x180>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006102:	429a      	cmp	r2, r3
 8006104:	d050      	beq.n	80061a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2208      	movs	r2, #8
 800610c:	4413      	add	r3, r2
 800610e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	2308      	movs	r3, #8
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	429a      	cmp	r2, r3
 8006126:	d91f      	bls.n	8006168 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4413      	add	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <pvPortMalloc+0xf8>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	613b      	str	r3, [r7, #16]
}
 800614c:	bf00      	nop
 800614e:	e7fe      	b.n	800614e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	1ad2      	subs	r2, r2, r3
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006162:	69b8      	ldr	r0, [r7, #24]
 8006164:	f000 f908 	bl	8006378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006168:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <pvPortMalloc+0x188>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <pvPortMalloc+0x188>)
 8006174:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006176:	4b1a      	ldr	r3, [pc, #104]	; (80061e0 <pvPortMalloc+0x188>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <pvPortMalloc+0x190>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d203      	bcs.n	800618a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006182:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <pvPortMalloc+0x188>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <pvPortMalloc+0x190>)
 8006188:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	4b13      	ldr	r3, [pc, #76]	; (80061dc <pvPortMalloc+0x184>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	431a      	orrs	r2, r3
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800619e:	4b13      	ldr	r3, [pc, #76]	; (80061ec <pvPortMalloc+0x194>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3301      	adds	r3, #1
 80061a4:	4a11      	ldr	r2, [pc, #68]	; (80061ec <pvPortMalloc+0x194>)
 80061a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061a8:	f7ff fa34 	bl	8005614 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <pvPortMalloc+0x174>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	60fb      	str	r3, [r7, #12]
}
 80061c8:	bf00      	nop
 80061ca:	e7fe      	b.n	80061ca <pvPortMalloc+0x172>
	return pvReturn;
 80061cc:	69fb      	ldr	r3, [r7, #28]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3728      	adds	r7, #40	; 0x28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20004914 	.word	0x20004914
 80061dc:	20004928 	.word	0x20004928
 80061e0:	20004918 	.word	0x20004918
 80061e4:	2000490c 	.word	0x2000490c
 80061e8:	2000491c 	.word	0x2000491c
 80061ec:	20004920 	.word	0x20004920

080061f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d04d      	beq.n	800629e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006202:	2308      	movs	r3, #8
 8006204:	425b      	negs	r3, r3
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4413      	add	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <vPortFree+0xb8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4013      	ands	r3, r2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <vPortFree+0x44>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	60fb      	str	r3, [r7, #12]
}
 8006230:	bf00      	nop
 8006232:	e7fe      	b.n	8006232 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <vPortFree+0x62>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	60bb      	str	r3, [r7, #8]
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <vPortFree+0xb8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4013      	ands	r3, r2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01e      	beq.n	800629e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d11a      	bne.n	800629e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <vPortFree+0xb8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	43db      	mvns	r3, r3
 8006272:	401a      	ands	r2, r3
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006278:	f7ff f9be 	bl	80055f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <vPortFree+0xbc>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4413      	add	r3, r2
 8006286:	4a09      	ldr	r2, [pc, #36]	; (80062ac <vPortFree+0xbc>)
 8006288:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800628a:	6938      	ldr	r0, [r7, #16]
 800628c:	f000 f874 	bl	8006378 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006290:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <vPortFree+0xc0>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3301      	adds	r3, #1
 8006296:	4a06      	ldr	r2, [pc, #24]	; (80062b0 <vPortFree+0xc0>)
 8006298:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800629a:	f7ff f9bb 	bl	8005614 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800629e:	bf00      	nop
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20004928 	.word	0x20004928
 80062ac:	20004918 	.word	0x20004918
 80062b0:	20004924 	.word	0x20004924

080062b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062c0:	4b27      	ldr	r3, [pc, #156]	; (8006360 <prvHeapInit+0xac>)
 80062c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00c      	beq.n	80062e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3307      	adds	r3, #7
 80062d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0307 	bic.w	r3, r3, #7
 80062da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	4a1f      	ldr	r2, [pc, #124]	; (8006360 <prvHeapInit+0xac>)
 80062e4:	4413      	add	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062ec:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <prvHeapInit+0xb0>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062f2:	4b1c      	ldr	r3, [pc, #112]	; (8006364 <prvHeapInit+0xb0>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	4413      	add	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006300:	2208      	movs	r2, #8
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4a15      	ldr	r2, [pc, #84]	; (8006368 <prvHeapInit+0xb4>)
 8006314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006316:	4b14      	ldr	r3, [pc, #80]	; (8006368 <prvHeapInit+0xb4>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2200      	movs	r2, #0
 800631c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800631e:	4b12      	ldr	r3, [pc, #72]	; (8006368 <prvHeapInit+0xb4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	1ad2      	subs	r2, r2, r3
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006334:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <prvHeapInit+0xb4>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	4a0a      	ldr	r2, [pc, #40]	; (800636c <prvHeapInit+0xb8>)
 8006342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	4a09      	ldr	r2, [pc, #36]	; (8006370 <prvHeapInit+0xbc>)
 800634a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800634c:	4b09      	ldr	r3, [pc, #36]	; (8006374 <prvHeapInit+0xc0>)
 800634e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	20000d0c 	.word	0x20000d0c
 8006364:	2000490c 	.word	0x2000490c
 8006368:	20004914 	.word	0x20004914
 800636c:	2000491c 	.word	0x2000491c
 8006370:	20004918 	.word	0x20004918
 8006374:	20004928 	.word	0x20004928

08006378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006380:	4b28      	ldr	r3, [pc, #160]	; (8006424 <prvInsertBlockIntoFreeList+0xac>)
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	e002      	b.n	800638c <prvInsertBlockIntoFreeList+0x14>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	429a      	cmp	r2, r3
 8006394:	d8f7      	bhi.n	8006386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	4413      	add	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d108      	bne.n	80063ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	441a      	add	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	441a      	add	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d118      	bne.n	8006400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	4b15      	ldr	r3, [pc, #84]	; (8006428 <prvInsertBlockIntoFreeList+0xb0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d00d      	beq.n	80063f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	441a      	add	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	e008      	b.n	8006408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <prvInsertBlockIntoFreeList+0xb0>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e003      	b.n	8006408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	429a      	cmp	r2, r3
 800640e:	d002      	beq.n	8006416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	2000490c 	.word	0x2000490c
 8006428:	20004914 	.word	0x20004914

0800642c <__cvt>:
 800642c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006430:	ec55 4b10 	vmov	r4, r5, d0
 8006434:	2d00      	cmp	r5, #0
 8006436:	460e      	mov	r6, r1
 8006438:	4619      	mov	r1, r3
 800643a:	462b      	mov	r3, r5
 800643c:	bfbb      	ittet	lt
 800643e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006442:	461d      	movlt	r5, r3
 8006444:	2300      	movge	r3, #0
 8006446:	232d      	movlt	r3, #45	; 0x2d
 8006448:	700b      	strb	r3, [r1, #0]
 800644a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800644c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006450:	4691      	mov	r9, r2
 8006452:	f023 0820 	bic.w	r8, r3, #32
 8006456:	bfbc      	itt	lt
 8006458:	4622      	movlt	r2, r4
 800645a:	4614      	movlt	r4, r2
 800645c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006460:	d005      	beq.n	800646e <__cvt+0x42>
 8006462:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006466:	d100      	bne.n	800646a <__cvt+0x3e>
 8006468:	3601      	adds	r6, #1
 800646a:	2102      	movs	r1, #2
 800646c:	e000      	b.n	8006470 <__cvt+0x44>
 800646e:	2103      	movs	r1, #3
 8006470:	ab03      	add	r3, sp, #12
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	ab02      	add	r3, sp, #8
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	ec45 4b10 	vmov	d0, r4, r5
 800647c:	4653      	mov	r3, sl
 800647e:	4632      	mov	r2, r6
 8006480:	f001 f872 	bl	8007568 <_dtoa_r>
 8006484:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006488:	4607      	mov	r7, r0
 800648a:	d102      	bne.n	8006492 <__cvt+0x66>
 800648c:	f019 0f01 	tst.w	r9, #1
 8006490:	d022      	beq.n	80064d8 <__cvt+0xac>
 8006492:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006496:	eb07 0906 	add.w	r9, r7, r6
 800649a:	d110      	bne.n	80064be <__cvt+0x92>
 800649c:	783b      	ldrb	r3, [r7, #0]
 800649e:	2b30      	cmp	r3, #48	; 0x30
 80064a0:	d10a      	bne.n	80064b8 <__cvt+0x8c>
 80064a2:	2200      	movs	r2, #0
 80064a4:	2300      	movs	r3, #0
 80064a6:	4620      	mov	r0, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7fa fb1d 	bl	8000ae8 <__aeabi_dcmpeq>
 80064ae:	b918      	cbnz	r0, 80064b8 <__cvt+0x8c>
 80064b0:	f1c6 0601 	rsb	r6, r6, #1
 80064b4:	f8ca 6000 	str.w	r6, [sl]
 80064b8:	f8da 3000 	ldr.w	r3, [sl]
 80064bc:	4499      	add	r9, r3
 80064be:	2200      	movs	r2, #0
 80064c0:	2300      	movs	r3, #0
 80064c2:	4620      	mov	r0, r4
 80064c4:	4629      	mov	r1, r5
 80064c6:	f7fa fb0f 	bl	8000ae8 <__aeabi_dcmpeq>
 80064ca:	b108      	cbz	r0, 80064d0 <__cvt+0xa4>
 80064cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80064d0:	2230      	movs	r2, #48	; 0x30
 80064d2:	9b03      	ldr	r3, [sp, #12]
 80064d4:	454b      	cmp	r3, r9
 80064d6:	d307      	bcc.n	80064e8 <__cvt+0xbc>
 80064d8:	9b03      	ldr	r3, [sp, #12]
 80064da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064dc:	1bdb      	subs	r3, r3, r7
 80064de:	4638      	mov	r0, r7
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	b004      	add	sp, #16
 80064e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e8:	1c59      	adds	r1, r3, #1
 80064ea:	9103      	str	r1, [sp, #12]
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	e7f0      	b.n	80064d2 <__cvt+0xa6>

080064f0 <__exponent>:
 80064f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064f2:	4603      	mov	r3, r0
 80064f4:	2900      	cmp	r1, #0
 80064f6:	bfb8      	it	lt
 80064f8:	4249      	neglt	r1, r1
 80064fa:	f803 2b02 	strb.w	r2, [r3], #2
 80064fe:	bfb4      	ite	lt
 8006500:	222d      	movlt	r2, #45	; 0x2d
 8006502:	222b      	movge	r2, #43	; 0x2b
 8006504:	2909      	cmp	r1, #9
 8006506:	7042      	strb	r2, [r0, #1]
 8006508:	dd2a      	ble.n	8006560 <__exponent+0x70>
 800650a:	f10d 0207 	add.w	r2, sp, #7
 800650e:	4617      	mov	r7, r2
 8006510:	260a      	movs	r6, #10
 8006512:	4694      	mov	ip, r2
 8006514:	fb91 f5f6 	sdiv	r5, r1, r6
 8006518:	fb06 1415 	mls	r4, r6, r5, r1
 800651c:	3430      	adds	r4, #48	; 0x30
 800651e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006522:	460c      	mov	r4, r1
 8006524:	2c63      	cmp	r4, #99	; 0x63
 8006526:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800652a:	4629      	mov	r1, r5
 800652c:	dcf1      	bgt.n	8006512 <__exponent+0x22>
 800652e:	3130      	adds	r1, #48	; 0x30
 8006530:	f1ac 0402 	sub.w	r4, ip, #2
 8006534:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006538:	1c41      	adds	r1, r0, #1
 800653a:	4622      	mov	r2, r4
 800653c:	42ba      	cmp	r2, r7
 800653e:	d30a      	bcc.n	8006556 <__exponent+0x66>
 8006540:	f10d 0209 	add.w	r2, sp, #9
 8006544:	eba2 020c 	sub.w	r2, r2, ip
 8006548:	42bc      	cmp	r4, r7
 800654a:	bf88      	it	hi
 800654c:	2200      	movhi	r2, #0
 800654e:	4413      	add	r3, r2
 8006550:	1a18      	subs	r0, r3, r0
 8006552:	b003      	add	sp, #12
 8006554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006556:	f812 5b01 	ldrb.w	r5, [r2], #1
 800655a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800655e:	e7ed      	b.n	800653c <__exponent+0x4c>
 8006560:	2330      	movs	r3, #48	; 0x30
 8006562:	3130      	adds	r1, #48	; 0x30
 8006564:	7083      	strb	r3, [r0, #2]
 8006566:	70c1      	strb	r1, [r0, #3]
 8006568:	1d03      	adds	r3, r0, #4
 800656a:	e7f1      	b.n	8006550 <__exponent+0x60>

0800656c <_printf_float>:
 800656c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006570:	ed2d 8b02 	vpush	{d8}
 8006574:	b08d      	sub	sp, #52	; 0x34
 8006576:	460c      	mov	r4, r1
 8006578:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800657c:	4616      	mov	r6, r2
 800657e:	461f      	mov	r7, r3
 8006580:	4605      	mov	r5, r0
 8006582:	f000 fe8b 	bl	800729c <_localeconv_r>
 8006586:	f8d0 a000 	ldr.w	sl, [r0]
 800658a:	4650      	mov	r0, sl
 800658c:	f7f9 fe80 	bl	8000290 <strlen>
 8006590:	2300      	movs	r3, #0
 8006592:	930a      	str	r3, [sp, #40]	; 0x28
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	9305      	str	r3, [sp, #20]
 8006598:	f8d8 3000 	ldr.w	r3, [r8]
 800659c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065a0:	3307      	adds	r3, #7
 80065a2:	f023 0307 	bic.w	r3, r3, #7
 80065a6:	f103 0208 	add.w	r2, r3, #8
 80065aa:	f8c8 2000 	str.w	r2, [r8]
 80065ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065b6:	9307      	str	r3, [sp, #28]
 80065b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80065bc:	ee08 0a10 	vmov	s16, r0
 80065c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80065c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065c8:	4b9e      	ldr	r3, [pc, #632]	; (8006844 <_printf_float+0x2d8>)
 80065ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065ce:	f7fa fabd 	bl	8000b4c <__aeabi_dcmpun>
 80065d2:	bb88      	cbnz	r0, 8006638 <_printf_float+0xcc>
 80065d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065d8:	4b9a      	ldr	r3, [pc, #616]	; (8006844 <_printf_float+0x2d8>)
 80065da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065de:	f7fa fa97 	bl	8000b10 <__aeabi_dcmple>
 80065e2:	bb48      	cbnz	r0, 8006638 <_printf_float+0xcc>
 80065e4:	2200      	movs	r2, #0
 80065e6:	2300      	movs	r3, #0
 80065e8:	4640      	mov	r0, r8
 80065ea:	4649      	mov	r1, r9
 80065ec:	f7fa fa86 	bl	8000afc <__aeabi_dcmplt>
 80065f0:	b110      	cbz	r0, 80065f8 <_printf_float+0x8c>
 80065f2:	232d      	movs	r3, #45	; 0x2d
 80065f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f8:	4a93      	ldr	r2, [pc, #588]	; (8006848 <_printf_float+0x2dc>)
 80065fa:	4b94      	ldr	r3, [pc, #592]	; (800684c <_printf_float+0x2e0>)
 80065fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006600:	bf94      	ite	ls
 8006602:	4690      	movls	r8, r2
 8006604:	4698      	movhi	r8, r3
 8006606:	2303      	movs	r3, #3
 8006608:	6123      	str	r3, [r4, #16]
 800660a:	9b05      	ldr	r3, [sp, #20]
 800660c:	f023 0304 	bic.w	r3, r3, #4
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	f04f 0900 	mov.w	r9, #0
 8006616:	9700      	str	r7, [sp, #0]
 8006618:	4633      	mov	r3, r6
 800661a:	aa0b      	add	r2, sp, #44	; 0x2c
 800661c:	4621      	mov	r1, r4
 800661e:	4628      	mov	r0, r5
 8006620:	f000 f9da 	bl	80069d8 <_printf_common>
 8006624:	3001      	adds	r0, #1
 8006626:	f040 8090 	bne.w	800674a <_printf_float+0x1de>
 800662a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800662e:	b00d      	add	sp, #52	; 0x34
 8006630:	ecbd 8b02 	vpop	{d8}
 8006634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006638:	4642      	mov	r2, r8
 800663a:	464b      	mov	r3, r9
 800663c:	4640      	mov	r0, r8
 800663e:	4649      	mov	r1, r9
 8006640:	f7fa fa84 	bl	8000b4c <__aeabi_dcmpun>
 8006644:	b140      	cbz	r0, 8006658 <_printf_float+0xec>
 8006646:	464b      	mov	r3, r9
 8006648:	2b00      	cmp	r3, #0
 800664a:	bfbc      	itt	lt
 800664c:	232d      	movlt	r3, #45	; 0x2d
 800664e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006652:	4a7f      	ldr	r2, [pc, #508]	; (8006850 <_printf_float+0x2e4>)
 8006654:	4b7f      	ldr	r3, [pc, #508]	; (8006854 <_printf_float+0x2e8>)
 8006656:	e7d1      	b.n	80065fc <_printf_float+0x90>
 8006658:	6863      	ldr	r3, [r4, #4]
 800665a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800665e:	9206      	str	r2, [sp, #24]
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	d13f      	bne.n	80066e4 <_printf_float+0x178>
 8006664:	2306      	movs	r3, #6
 8006666:	6063      	str	r3, [r4, #4]
 8006668:	9b05      	ldr	r3, [sp, #20]
 800666a:	6861      	ldr	r1, [r4, #4]
 800666c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006670:	2300      	movs	r3, #0
 8006672:	9303      	str	r3, [sp, #12]
 8006674:	ab0a      	add	r3, sp, #40	; 0x28
 8006676:	e9cd b301 	strd	fp, r3, [sp, #4]
 800667a:	ab09      	add	r3, sp, #36	; 0x24
 800667c:	ec49 8b10 	vmov	d0, r8, r9
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	6022      	str	r2, [r4, #0]
 8006684:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006688:	4628      	mov	r0, r5
 800668a:	f7ff fecf 	bl	800642c <__cvt>
 800668e:	9b06      	ldr	r3, [sp, #24]
 8006690:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006692:	2b47      	cmp	r3, #71	; 0x47
 8006694:	4680      	mov	r8, r0
 8006696:	d108      	bne.n	80066aa <_printf_float+0x13e>
 8006698:	1cc8      	adds	r0, r1, #3
 800669a:	db02      	blt.n	80066a2 <_printf_float+0x136>
 800669c:	6863      	ldr	r3, [r4, #4]
 800669e:	4299      	cmp	r1, r3
 80066a0:	dd41      	ble.n	8006726 <_printf_float+0x1ba>
 80066a2:	f1ab 0302 	sub.w	r3, fp, #2
 80066a6:	fa5f fb83 	uxtb.w	fp, r3
 80066aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066ae:	d820      	bhi.n	80066f2 <_printf_float+0x186>
 80066b0:	3901      	subs	r1, #1
 80066b2:	465a      	mov	r2, fp
 80066b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066b8:	9109      	str	r1, [sp, #36]	; 0x24
 80066ba:	f7ff ff19 	bl	80064f0 <__exponent>
 80066be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066c0:	1813      	adds	r3, r2, r0
 80066c2:	2a01      	cmp	r2, #1
 80066c4:	4681      	mov	r9, r0
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	dc02      	bgt.n	80066d0 <_printf_float+0x164>
 80066ca:	6822      	ldr	r2, [r4, #0]
 80066cc:	07d2      	lsls	r2, r2, #31
 80066ce:	d501      	bpl.n	80066d4 <_printf_float+0x168>
 80066d0:	3301      	adds	r3, #1
 80066d2:	6123      	str	r3, [r4, #16]
 80066d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d09c      	beq.n	8006616 <_printf_float+0xaa>
 80066dc:	232d      	movs	r3, #45	; 0x2d
 80066de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066e2:	e798      	b.n	8006616 <_printf_float+0xaa>
 80066e4:	9a06      	ldr	r2, [sp, #24]
 80066e6:	2a47      	cmp	r2, #71	; 0x47
 80066e8:	d1be      	bne.n	8006668 <_printf_float+0xfc>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1bc      	bne.n	8006668 <_printf_float+0xfc>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e7b9      	b.n	8006666 <_printf_float+0xfa>
 80066f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80066f6:	d118      	bne.n	800672a <_printf_float+0x1be>
 80066f8:	2900      	cmp	r1, #0
 80066fa:	6863      	ldr	r3, [r4, #4]
 80066fc:	dd0b      	ble.n	8006716 <_printf_float+0x1aa>
 80066fe:	6121      	str	r1, [r4, #16]
 8006700:	b913      	cbnz	r3, 8006708 <_printf_float+0x19c>
 8006702:	6822      	ldr	r2, [r4, #0]
 8006704:	07d0      	lsls	r0, r2, #31
 8006706:	d502      	bpl.n	800670e <_printf_float+0x1a2>
 8006708:	3301      	adds	r3, #1
 800670a:	440b      	add	r3, r1
 800670c:	6123      	str	r3, [r4, #16]
 800670e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006710:	f04f 0900 	mov.w	r9, #0
 8006714:	e7de      	b.n	80066d4 <_printf_float+0x168>
 8006716:	b913      	cbnz	r3, 800671e <_printf_float+0x1b2>
 8006718:	6822      	ldr	r2, [r4, #0]
 800671a:	07d2      	lsls	r2, r2, #31
 800671c:	d501      	bpl.n	8006722 <_printf_float+0x1b6>
 800671e:	3302      	adds	r3, #2
 8006720:	e7f4      	b.n	800670c <_printf_float+0x1a0>
 8006722:	2301      	movs	r3, #1
 8006724:	e7f2      	b.n	800670c <_printf_float+0x1a0>
 8006726:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800672a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800672c:	4299      	cmp	r1, r3
 800672e:	db05      	blt.n	800673c <_printf_float+0x1d0>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	6121      	str	r1, [r4, #16]
 8006734:	07d8      	lsls	r0, r3, #31
 8006736:	d5ea      	bpl.n	800670e <_printf_float+0x1a2>
 8006738:	1c4b      	adds	r3, r1, #1
 800673a:	e7e7      	b.n	800670c <_printf_float+0x1a0>
 800673c:	2900      	cmp	r1, #0
 800673e:	bfd4      	ite	le
 8006740:	f1c1 0202 	rsble	r2, r1, #2
 8006744:	2201      	movgt	r2, #1
 8006746:	4413      	add	r3, r2
 8006748:	e7e0      	b.n	800670c <_printf_float+0x1a0>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	055a      	lsls	r2, r3, #21
 800674e:	d407      	bmi.n	8006760 <_printf_float+0x1f4>
 8006750:	6923      	ldr	r3, [r4, #16]
 8006752:	4642      	mov	r2, r8
 8006754:	4631      	mov	r1, r6
 8006756:	4628      	mov	r0, r5
 8006758:	47b8      	blx	r7
 800675a:	3001      	adds	r0, #1
 800675c:	d12c      	bne.n	80067b8 <_printf_float+0x24c>
 800675e:	e764      	b.n	800662a <_printf_float+0xbe>
 8006760:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006764:	f240 80e0 	bls.w	8006928 <_printf_float+0x3bc>
 8006768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800676c:	2200      	movs	r2, #0
 800676e:	2300      	movs	r3, #0
 8006770:	f7fa f9ba 	bl	8000ae8 <__aeabi_dcmpeq>
 8006774:	2800      	cmp	r0, #0
 8006776:	d034      	beq.n	80067e2 <_printf_float+0x276>
 8006778:	4a37      	ldr	r2, [pc, #220]	; (8006858 <_printf_float+0x2ec>)
 800677a:	2301      	movs	r3, #1
 800677c:	4631      	mov	r1, r6
 800677e:	4628      	mov	r0, r5
 8006780:	47b8      	blx	r7
 8006782:	3001      	adds	r0, #1
 8006784:	f43f af51 	beq.w	800662a <_printf_float+0xbe>
 8006788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800678c:	429a      	cmp	r2, r3
 800678e:	db02      	blt.n	8006796 <_printf_float+0x22a>
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	07d8      	lsls	r0, r3, #31
 8006794:	d510      	bpl.n	80067b8 <_printf_float+0x24c>
 8006796:	ee18 3a10 	vmov	r3, s16
 800679a:	4652      	mov	r2, sl
 800679c:	4631      	mov	r1, r6
 800679e:	4628      	mov	r0, r5
 80067a0:	47b8      	blx	r7
 80067a2:	3001      	adds	r0, #1
 80067a4:	f43f af41 	beq.w	800662a <_printf_float+0xbe>
 80067a8:	f04f 0800 	mov.w	r8, #0
 80067ac:	f104 091a 	add.w	r9, r4, #26
 80067b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b2:	3b01      	subs	r3, #1
 80067b4:	4543      	cmp	r3, r8
 80067b6:	dc09      	bgt.n	80067cc <_printf_float+0x260>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	079b      	lsls	r3, r3, #30
 80067bc:	f100 8107 	bmi.w	80069ce <_printf_float+0x462>
 80067c0:	68e0      	ldr	r0, [r4, #12]
 80067c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067c4:	4298      	cmp	r0, r3
 80067c6:	bfb8      	it	lt
 80067c8:	4618      	movlt	r0, r3
 80067ca:	e730      	b.n	800662e <_printf_float+0xc2>
 80067cc:	2301      	movs	r3, #1
 80067ce:	464a      	mov	r2, r9
 80067d0:	4631      	mov	r1, r6
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b8      	blx	r7
 80067d6:	3001      	adds	r0, #1
 80067d8:	f43f af27 	beq.w	800662a <_printf_float+0xbe>
 80067dc:	f108 0801 	add.w	r8, r8, #1
 80067e0:	e7e6      	b.n	80067b0 <_printf_float+0x244>
 80067e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	dc39      	bgt.n	800685c <_printf_float+0x2f0>
 80067e8:	4a1b      	ldr	r2, [pc, #108]	; (8006858 <_printf_float+0x2ec>)
 80067ea:	2301      	movs	r3, #1
 80067ec:	4631      	mov	r1, r6
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	f43f af19 	beq.w	800662a <_printf_float+0xbe>
 80067f8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80067fc:	4313      	orrs	r3, r2
 80067fe:	d102      	bne.n	8006806 <_printf_float+0x29a>
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	07d9      	lsls	r1, r3, #31
 8006804:	d5d8      	bpl.n	80067b8 <_printf_float+0x24c>
 8006806:	ee18 3a10 	vmov	r3, s16
 800680a:	4652      	mov	r2, sl
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	f43f af09 	beq.w	800662a <_printf_float+0xbe>
 8006818:	f04f 0900 	mov.w	r9, #0
 800681c:	f104 0a1a 	add.w	sl, r4, #26
 8006820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006822:	425b      	negs	r3, r3
 8006824:	454b      	cmp	r3, r9
 8006826:	dc01      	bgt.n	800682c <_printf_float+0x2c0>
 8006828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800682a:	e792      	b.n	8006752 <_printf_float+0x1e6>
 800682c:	2301      	movs	r3, #1
 800682e:	4652      	mov	r2, sl
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	f43f aef7 	beq.w	800662a <_printf_float+0xbe>
 800683c:	f109 0901 	add.w	r9, r9, #1
 8006840:	e7ee      	b.n	8006820 <_printf_float+0x2b4>
 8006842:	bf00      	nop
 8006844:	7fefffff 	.word	0x7fefffff
 8006848:	08009881 	.word	0x08009881
 800684c:	08009885 	.word	0x08009885
 8006850:	08009889 	.word	0x08009889
 8006854:	0800988d 	.word	0x0800988d
 8006858:	08009891 	.word	0x08009891
 800685c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800685e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006860:	429a      	cmp	r2, r3
 8006862:	bfa8      	it	ge
 8006864:	461a      	movge	r2, r3
 8006866:	2a00      	cmp	r2, #0
 8006868:	4691      	mov	r9, r2
 800686a:	dc37      	bgt.n	80068dc <_printf_float+0x370>
 800686c:	f04f 0b00 	mov.w	fp, #0
 8006870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006874:	f104 021a 	add.w	r2, r4, #26
 8006878:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800687a:	9305      	str	r3, [sp, #20]
 800687c:	eba3 0309 	sub.w	r3, r3, r9
 8006880:	455b      	cmp	r3, fp
 8006882:	dc33      	bgt.n	80068ec <_printf_float+0x380>
 8006884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006888:	429a      	cmp	r2, r3
 800688a:	db3b      	blt.n	8006904 <_printf_float+0x398>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	07da      	lsls	r2, r3, #31
 8006890:	d438      	bmi.n	8006904 <_printf_float+0x398>
 8006892:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006896:	eba2 0903 	sub.w	r9, r2, r3
 800689a:	9b05      	ldr	r3, [sp, #20]
 800689c:	1ad2      	subs	r2, r2, r3
 800689e:	4591      	cmp	r9, r2
 80068a0:	bfa8      	it	ge
 80068a2:	4691      	movge	r9, r2
 80068a4:	f1b9 0f00 	cmp.w	r9, #0
 80068a8:	dc35      	bgt.n	8006916 <_printf_float+0x3aa>
 80068aa:	f04f 0800 	mov.w	r8, #0
 80068ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068b2:	f104 0a1a 	add.w	sl, r4, #26
 80068b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	eba3 0309 	sub.w	r3, r3, r9
 80068c0:	4543      	cmp	r3, r8
 80068c2:	f77f af79 	ble.w	80067b8 <_printf_float+0x24c>
 80068c6:	2301      	movs	r3, #1
 80068c8:	4652      	mov	r2, sl
 80068ca:	4631      	mov	r1, r6
 80068cc:	4628      	mov	r0, r5
 80068ce:	47b8      	blx	r7
 80068d0:	3001      	adds	r0, #1
 80068d2:	f43f aeaa 	beq.w	800662a <_printf_float+0xbe>
 80068d6:	f108 0801 	add.w	r8, r8, #1
 80068da:	e7ec      	b.n	80068b6 <_printf_float+0x34a>
 80068dc:	4613      	mov	r3, r2
 80068de:	4631      	mov	r1, r6
 80068e0:	4642      	mov	r2, r8
 80068e2:	4628      	mov	r0, r5
 80068e4:	47b8      	blx	r7
 80068e6:	3001      	adds	r0, #1
 80068e8:	d1c0      	bne.n	800686c <_printf_float+0x300>
 80068ea:	e69e      	b.n	800662a <_printf_float+0xbe>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4631      	mov	r1, r6
 80068f0:	4628      	mov	r0, r5
 80068f2:	9205      	str	r2, [sp, #20]
 80068f4:	47b8      	blx	r7
 80068f6:	3001      	adds	r0, #1
 80068f8:	f43f ae97 	beq.w	800662a <_printf_float+0xbe>
 80068fc:	9a05      	ldr	r2, [sp, #20]
 80068fe:	f10b 0b01 	add.w	fp, fp, #1
 8006902:	e7b9      	b.n	8006878 <_printf_float+0x30c>
 8006904:	ee18 3a10 	vmov	r3, s16
 8006908:	4652      	mov	r2, sl
 800690a:	4631      	mov	r1, r6
 800690c:	4628      	mov	r0, r5
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	d1be      	bne.n	8006892 <_printf_float+0x326>
 8006914:	e689      	b.n	800662a <_printf_float+0xbe>
 8006916:	9a05      	ldr	r2, [sp, #20]
 8006918:	464b      	mov	r3, r9
 800691a:	4442      	add	r2, r8
 800691c:	4631      	mov	r1, r6
 800691e:	4628      	mov	r0, r5
 8006920:	47b8      	blx	r7
 8006922:	3001      	adds	r0, #1
 8006924:	d1c1      	bne.n	80068aa <_printf_float+0x33e>
 8006926:	e680      	b.n	800662a <_printf_float+0xbe>
 8006928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800692a:	2a01      	cmp	r2, #1
 800692c:	dc01      	bgt.n	8006932 <_printf_float+0x3c6>
 800692e:	07db      	lsls	r3, r3, #31
 8006930:	d53a      	bpl.n	80069a8 <_printf_float+0x43c>
 8006932:	2301      	movs	r3, #1
 8006934:	4642      	mov	r2, r8
 8006936:	4631      	mov	r1, r6
 8006938:	4628      	mov	r0, r5
 800693a:	47b8      	blx	r7
 800693c:	3001      	adds	r0, #1
 800693e:	f43f ae74 	beq.w	800662a <_printf_float+0xbe>
 8006942:	ee18 3a10 	vmov	r3, s16
 8006946:	4652      	mov	r2, sl
 8006948:	4631      	mov	r1, r6
 800694a:	4628      	mov	r0, r5
 800694c:	47b8      	blx	r7
 800694e:	3001      	adds	r0, #1
 8006950:	f43f ae6b 	beq.w	800662a <_printf_float+0xbe>
 8006954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006958:	2200      	movs	r2, #0
 800695a:	2300      	movs	r3, #0
 800695c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006960:	f7fa f8c2 	bl	8000ae8 <__aeabi_dcmpeq>
 8006964:	b9d8      	cbnz	r0, 800699e <_printf_float+0x432>
 8006966:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800696a:	f108 0201 	add.w	r2, r8, #1
 800696e:	4631      	mov	r1, r6
 8006970:	4628      	mov	r0, r5
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	d10e      	bne.n	8006996 <_printf_float+0x42a>
 8006978:	e657      	b.n	800662a <_printf_float+0xbe>
 800697a:	2301      	movs	r3, #1
 800697c:	4652      	mov	r2, sl
 800697e:	4631      	mov	r1, r6
 8006980:	4628      	mov	r0, r5
 8006982:	47b8      	blx	r7
 8006984:	3001      	adds	r0, #1
 8006986:	f43f ae50 	beq.w	800662a <_printf_float+0xbe>
 800698a:	f108 0801 	add.w	r8, r8, #1
 800698e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006990:	3b01      	subs	r3, #1
 8006992:	4543      	cmp	r3, r8
 8006994:	dcf1      	bgt.n	800697a <_printf_float+0x40e>
 8006996:	464b      	mov	r3, r9
 8006998:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800699c:	e6da      	b.n	8006754 <_printf_float+0x1e8>
 800699e:	f04f 0800 	mov.w	r8, #0
 80069a2:	f104 0a1a 	add.w	sl, r4, #26
 80069a6:	e7f2      	b.n	800698e <_printf_float+0x422>
 80069a8:	2301      	movs	r3, #1
 80069aa:	4642      	mov	r2, r8
 80069ac:	e7df      	b.n	800696e <_printf_float+0x402>
 80069ae:	2301      	movs	r3, #1
 80069b0:	464a      	mov	r2, r9
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	f43f ae36 	beq.w	800662a <_printf_float+0xbe>
 80069be:	f108 0801 	add.w	r8, r8, #1
 80069c2:	68e3      	ldr	r3, [r4, #12]
 80069c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069c6:	1a5b      	subs	r3, r3, r1
 80069c8:	4543      	cmp	r3, r8
 80069ca:	dcf0      	bgt.n	80069ae <_printf_float+0x442>
 80069cc:	e6f8      	b.n	80067c0 <_printf_float+0x254>
 80069ce:	f04f 0800 	mov.w	r8, #0
 80069d2:	f104 0919 	add.w	r9, r4, #25
 80069d6:	e7f4      	b.n	80069c2 <_printf_float+0x456>

080069d8 <_printf_common>:
 80069d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069dc:	4616      	mov	r6, r2
 80069de:	4699      	mov	r9, r3
 80069e0:	688a      	ldr	r2, [r1, #8]
 80069e2:	690b      	ldr	r3, [r1, #16]
 80069e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	bfb8      	it	lt
 80069ec:	4613      	movlt	r3, r2
 80069ee:	6033      	str	r3, [r6, #0]
 80069f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069f4:	4607      	mov	r7, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	b10a      	cbz	r2, 80069fe <_printf_common+0x26>
 80069fa:	3301      	adds	r3, #1
 80069fc:	6033      	str	r3, [r6, #0]
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	0699      	lsls	r1, r3, #26
 8006a02:	bf42      	ittt	mi
 8006a04:	6833      	ldrmi	r3, [r6, #0]
 8006a06:	3302      	addmi	r3, #2
 8006a08:	6033      	strmi	r3, [r6, #0]
 8006a0a:	6825      	ldr	r5, [r4, #0]
 8006a0c:	f015 0506 	ands.w	r5, r5, #6
 8006a10:	d106      	bne.n	8006a20 <_printf_common+0x48>
 8006a12:	f104 0a19 	add.w	sl, r4, #25
 8006a16:	68e3      	ldr	r3, [r4, #12]
 8006a18:	6832      	ldr	r2, [r6, #0]
 8006a1a:	1a9b      	subs	r3, r3, r2
 8006a1c:	42ab      	cmp	r3, r5
 8006a1e:	dc26      	bgt.n	8006a6e <_printf_common+0x96>
 8006a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a24:	1e13      	subs	r3, r2, #0
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	bf18      	it	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	0692      	lsls	r2, r2, #26
 8006a2e:	d42b      	bmi.n	8006a88 <_printf_common+0xb0>
 8006a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a34:	4649      	mov	r1, r9
 8006a36:	4638      	mov	r0, r7
 8006a38:	47c0      	blx	r8
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d01e      	beq.n	8006a7c <_printf_common+0xa4>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	6922      	ldr	r2, [r4, #16]
 8006a42:	f003 0306 	and.w	r3, r3, #6
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	bf02      	ittt	eq
 8006a4a:	68e5      	ldreq	r5, [r4, #12]
 8006a4c:	6833      	ldreq	r3, [r6, #0]
 8006a4e:	1aed      	subeq	r5, r5, r3
 8006a50:	68a3      	ldr	r3, [r4, #8]
 8006a52:	bf0c      	ite	eq
 8006a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a58:	2500      	movne	r5, #0
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	bfc4      	itt	gt
 8006a5e:	1a9b      	subgt	r3, r3, r2
 8006a60:	18ed      	addgt	r5, r5, r3
 8006a62:	2600      	movs	r6, #0
 8006a64:	341a      	adds	r4, #26
 8006a66:	42b5      	cmp	r5, r6
 8006a68:	d11a      	bne.n	8006aa0 <_printf_common+0xc8>
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e008      	b.n	8006a80 <_printf_common+0xa8>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4652      	mov	r2, sl
 8006a72:	4649      	mov	r1, r9
 8006a74:	4638      	mov	r0, r7
 8006a76:	47c0      	blx	r8
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d103      	bne.n	8006a84 <_printf_common+0xac>
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a84:	3501      	adds	r5, #1
 8006a86:	e7c6      	b.n	8006a16 <_printf_common+0x3e>
 8006a88:	18e1      	adds	r1, r4, r3
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	2030      	movs	r0, #48	; 0x30
 8006a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a92:	4422      	add	r2, r4
 8006a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	e7c7      	b.n	8006a30 <_printf_common+0x58>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	47c0      	blx	r8
 8006aaa:	3001      	adds	r0, #1
 8006aac:	d0e6      	beq.n	8006a7c <_printf_common+0xa4>
 8006aae:	3601      	adds	r6, #1
 8006ab0:	e7d9      	b.n	8006a66 <_printf_common+0x8e>
	...

08006ab4 <_printf_i>:
 8006ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	7e0f      	ldrb	r7, [r1, #24]
 8006aba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006abc:	2f78      	cmp	r7, #120	; 0x78
 8006abe:	4691      	mov	r9, r2
 8006ac0:	4680      	mov	r8, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	469a      	mov	sl, r3
 8006ac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006aca:	d807      	bhi.n	8006adc <_printf_i+0x28>
 8006acc:	2f62      	cmp	r7, #98	; 0x62
 8006ace:	d80a      	bhi.n	8006ae6 <_printf_i+0x32>
 8006ad0:	2f00      	cmp	r7, #0
 8006ad2:	f000 80d4 	beq.w	8006c7e <_printf_i+0x1ca>
 8006ad6:	2f58      	cmp	r7, #88	; 0x58
 8006ad8:	f000 80c0 	beq.w	8006c5c <_printf_i+0x1a8>
 8006adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ae4:	e03a      	b.n	8006b5c <_printf_i+0xa8>
 8006ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006aea:	2b15      	cmp	r3, #21
 8006aec:	d8f6      	bhi.n	8006adc <_printf_i+0x28>
 8006aee:	a101      	add	r1, pc, #4	; (adr r1, 8006af4 <_printf_i+0x40>)
 8006af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006af4:	08006b4d 	.word	0x08006b4d
 8006af8:	08006b61 	.word	0x08006b61
 8006afc:	08006add 	.word	0x08006add
 8006b00:	08006add 	.word	0x08006add
 8006b04:	08006add 	.word	0x08006add
 8006b08:	08006add 	.word	0x08006add
 8006b0c:	08006b61 	.word	0x08006b61
 8006b10:	08006add 	.word	0x08006add
 8006b14:	08006add 	.word	0x08006add
 8006b18:	08006add 	.word	0x08006add
 8006b1c:	08006add 	.word	0x08006add
 8006b20:	08006c65 	.word	0x08006c65
 8006b24:	08006b8d 	.word	0x08006b8d
 8006b28:	08006c1f 	.word	0x08006c1f
 8006b2c:	08006add 	.word	0x08006add
 8006b30:	08006add 	.word	0x08006add
 8006b34:	08006c87 	.word	0x08006c87
 8006b38:	08006add 	.word	0x08006add
 8006b3c:	08006b8d 	.word	0x08006b8d
 8006b40:	08006add 	.word	0x08006add
 8006b44:	08006add 	.word	0x08006add
 8006b48:	08006c27 	.word	0x08006c27
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	1d1a      	adds	r2, r3, #4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	602a      	str	r2, [r5, #0]
 8006b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e09f      	b.n	8006ca0 <_printf_i+0x1ec>
 8006b60:	6820      	ldr	r0, [r4, #0]
 8006b62:	682b      	ldr	r3, [r5, #0]
 8006b64:	0607      	lsls	r7, r0, #24
 8006b66:	f103 0104 	add.w	r1, r3, #4
 8006b6a:	6029      	str	r1, [r5, #0]
 8006b6c:	d501      	bpl.n	8006b72 <_printf_i+0xbe>
 8006b6e:	681e      	ldr	r6, [r3, #0]
 8006b70:	e003      	b.n	8006b7a <_printf_i+0xc6>
 8006b72:	0646      	lsls	r6, r0, #25
 8006b74:	d5fb      	bpl.n	8006b6e <_printf_i+0xba>
 8006b76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b7a:	2e00      	cmp	r6, #0
 8006b7c:	da03      	bge.n	8006b86 <_printf_i+0xd2>
 8006b7e:	232d      	movs	r3, #45	; 0x2d
 8006b80:	4276      	negs	r6, r6
 8006b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b86:	485a      	ldr	r0, [pc, #360]	; (8006cf0 <_printf_i+0x23c>)
 8006b88:	230a      	movs	r3, #10
 8006b8a:	e012      	b.n	8006bb2 <_printf_i+0xfe>
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	6820      	ldr	r0, [r4, #0]
 8006b90:	1d19      	adds	r1, r3, #4
 8006b92:	6029      	str	r1, [r5, #0]
 8006b94:	0605      	lsls	r5, r0, #24
 8006b96:	d501      	bpl.n	8006b9c <_printf_i+0xe8>
 8006b98:	681e      	ldr	r6, [r3, #0]
 8006b9a:	e002      	b.n	8006ba2 <_printf_i+0xee>
 8006b9c:	0641      	lsls	r1, r0, #25
 8006b9e:	d5fb      	bpl.n	8006b98 <_printf_i+0xe4>
 8006ba0:	881e      	ldrh	r6, [r3, #0]
 8006ba2:	4853      	ldr	r0, [pc, #332]	; (8006cf0 <_printf_i+0x23c>)
 8006ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2308      	moveq	r3, #8
 8006baa:	230a      	movne	r3, #10
 8006bac:	2100      	movs	r1, #0
 8006bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bb2:	6865      	ldr	r5, [r4, #4]
 8006bb4:	60a5      	str	r5, [r4, #8]
 8006bb6:	2d00      	cmp	r5, #0
 8006bb8:	bfa2      	ittt	ge
 8006bba:	6821      	ldrge	r1, [r4, #0]
 8006bbc:	f021 0104 	bicge.w	r1, r1, #4
 8006bc0:	6021      	strge	r1, [r4, #0]
 8006bc2:	b90e      	cbnz	r6, 8006bc8 <_printf_i+0x114>
 8006bc4:	2d00      	cmp	r5, #0
 8006bc6:	d04b      	beq.n	8006c60 <_printf_i+0x1ac>
 8006bc8:	4615      	mov	r5, r2
 8006bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bce:	fb03 6711 	mls	r7, r3, r1, r6
 8006bd2:	5dc7      	ldrb	r7, [r0, r7]
 8006bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bd8:	4637      	mov	r7, r6
 8006bda:	42bb      	cmp	r3, r7
 8006bdc:	460e      	mov	r6, r1
 8006bde:	d9f4      	bls.n	8006bca <_printf_i+0x116>
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d10b      	bne.n	8006bfc <_printf_i+0x148>
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	07de      	lsls	r6, r3, #31
 8006be8:	d508      	bpl.n	8006bfc <_printf_i+0x148>
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	6861      	ldr	r1, [r4, #4]
 8006bee:	4299      	cmp	r1, r3
 8006bf0:	bfde      	ittt	le
 8006bf2:	2330      	movle	r3, #48	; 0x30
 8006bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bf8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006bfc:	1b52      	subs	r2, r2, r5
 8006bfe:	6122      	str	r2, [r4, #16]
 8006c00:	f8cd a000 	str.w	sl, [sp]
 8006c04:	464b      	mov	r3, r9
 8006c06:	aa03      	add	r2, sp, #12
 8006c08:	4621      	mov	r1, r4
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	f7ff fee4 	bl	80069d8 <_printf_common>
 8006c10:	3001      	adds	r0, #1
 8006c12:	d14a      	bne.n	8006caa <_printf_i+0x1f6>
 8006c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c18:	b004      	add	sp, #16
 8006c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	f043 0320 	orr.w	r3, r3, #32
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	4833      	ldr	r0, [pc, #204]	; (8006cf4 <_printf_i+0x240>)
 8006c28:	2778      	movs	r7, #120	; 0x78
 8006c2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	6829      	ldr	r1, [r5, #0]
 8006c32:	061f      	lsls	r7, r3, #24
 8006c34:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c38:	d402      	bmi.n	8006c40 <_printf_i+0x18c>
 8006c3a:	065f      	lsls	r7, r3, #25
 8006c3c:	bf48      	it	mi
 8006c3e:	b2b6      	uxthmi	r6, r6
 8006c40:	07df      	lsls	r7, r3, #31
 8006c42:	bf48      	it	mi
 8006c44:	f043 0320 	orrmi.w	r3, r3, #32
 8006c48:	6029      	str	r1, [r5, #0]
 8006c4a:	bf48      	it	mi
 8006c4c:	6023      	strmi	r3, [r4, #0]
 8006c4e:	b91e      	cbnz	r6, 8006c58 <_printf_i+0x1a4>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	f023 0320 	bic.w	r3, r3, #32
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	2310      	movs	r3, #16
 8006c5a:	e7a7      	b.n	8006bac <_printf_i+0xf8>
 8006c5c:	4824      	ldr	r0, [pc, #144]	; (8006cf0 <_printf_i+0x23c>)
 8006c5e:	e7e4      	b.n	8006c2a <_printf_i+0x176>
 8006c60:	4615      	mov	r5, r2
 8006c62:	e7bd      	b.n	8006be0 <_printf_i+0x12c>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	6826      	ldr	r6, [r4, #0]
 8006c68:	6961      	ldr	r1, [r4, #20]
 8006c6a:	1d18      	adds	r0, r3, #4
 8006c6c:	6028      	str	r0, [r5, #0]
 8006c6e:	0635      	lsls	r5, r6, #24
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	d501      	bpl.n	8006c78 <_printf_i+0x1c4>
 8006c74:	6019      	str	r1, [r3, #0]
 8006c76:	e002      	b.n	8006c7e <_printf_i+0x1ca>
 8006c78:	0670      	lsls	r0, r6, #25
 8006c7a:	d5fb      	bpl.n	8006c74 <_printf_i+0x1c0>
 8006c7c:	8019      	strh	r1, [r3, #0]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	6123      	str	r3, [r4, #16]
 8006c82:	4615      	mov	r5, r2
 8006c84:	e7bc      	b.n	8006c00 <_printf_i+0x14c>
 8006c86:	682b      	ldr	r3, [r5, #0]
 8006c88:	1d1a      	adds	r2, r3, #4
 8006c8a:	602a      	str	r2, [r5, #0]
 8006c8c:	681d      	ldr	r5, [r3, #0]
 8006c8e:	6862      	ldr	r2, [r4, #4]
 8006c90:	2100      	movs	r1, #0
 8006c92:	4628      	mov	r0, r5
 8006c94:	f7f9 faac 	bl	80001f0 <memchr>
 8006c98:	b108      	cbz	r0, 8006c9e <_printf_i+0x1ea>
 8006c9a:	1b40      	subs	r0, r0, r5
 8006c9c:	6060      	str	r0, [r4, #4]
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	6123      	str	r3, [r4, #16]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ca8:	e7aa      	b.n	8006c00 <_printf_i+0x14c>
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	462a      	mov	r2, r5
 8006cae:	4649      	mov	r1, r9
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	47d0      	blx	sl
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d0ad      	beq.n	8006c14 <_printf_i+0x160>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	079b      	lsls	r3, r3, #30
 8006cbc:	d413      	bmi.n	8006ce6 <_printf_i+0x232>
 8006cbe:	68e0      	ldr	r0, [r4, #12]
 8006cc0:	9b03      	ldr	r3, [sp, #12]
 8006cc2:	4298      	cmp	r0, r3
 8006cc4:	bfb8      	it	lt
 8006cc6:	4618      	movlt	r0, r3
 8006cc8:	e7a6      	b.n	8006c18 <_printf_i+0x164>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4632      	mov	r2, r6
 8006cce:	4649      	mov	r1, r9
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	47d0      	blx	sl
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d09d      	beq.n	8006c14 <_printf_i+0x160>
 8006cd8:	3501      	adds	r5, #1
 8006cda:	68e3      	ldr	r3, [r4, #12]
 8006cdc:	9903      	ldr	r1, [sp, #12]
 8006cde:	1a5b      	subs	r3, r3, r1
 8006ce0:	42ab      	cmp	r3, r5
 8006ce2:	dcf2      	bgt.n	8006cca <_printf_i+0x216>
 8006ce4:	e7eb      	b.n	8006cbe <_printf_i+0x20a>
 8006ce6:	2500      	movs	r5, #0
 8006ce8:	f104 0619 	add.w	r6, r4, #25
 8006cec:	e7f5      	b.n	8006cda <_printf_i+0x226>
 8006cee:	bf00      	nop
 8006cf0:	08009893 	.word	0x08009893
 8006cf4:	080098a4 	.word	0x080098a4

08006cf8 <__sflush_r>:
 8006cf8:	898a      	ldrh	r2, [r1, #12]
 8006cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfe:	4605      	mov	r5, r0
 8006d00:	0710      	lsls	r0, r2, #28
 8006d02:	460c      	mov	r4, r1
 8006d04:	d458      	bmi.n	8006db8 <__sflush_r+0xc0>
 8006d06:	684b      	ldr	r3, [r1, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	dc05      	bgt.n	8006d18 <__sflush_r+0x20>
 8006d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	dc02      	bgt.n	8006d18 <__sflush_r+0x20>
 8006d12:	2000      	movs	r0, #0
 8006d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d1a:	2e00      	cmp	r6, #0
 8006d1c:	d0f9      	beq.n	8006d12 <__sflush_r+0x1a>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d24:	682f      	ldr	r7, [r5, #0]
 8006d26:	6a21      	ldr	r1, [r4, #32]
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	d032      	beq.n	8006d92 <__sflush_r+0x9a>
 8006d2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d2e:	89a3      	ldrh	r3, [r4, #12]
 8006d30:	075a      	lsls	r2, r3, #29
 8006d32:	d505      	bpl.n	8006d40 <__sflush_r+0x48>
 8006d34:	6863      	ldr	r3, [r4, #4]
 8006d36:	1ac0      	subs	r0, r0, r3
 8006d38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d3a:	b10b      	cbz	r3, 8006d40 <__sflush_r+0x48>
 8006d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d3e:	1ac0      	subs	r0, r0, r3
 8006d40:	2300      	movs	r3, #0
 8006d42:	4602      	mov	r2, r0
 8006d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d46:	6a21      	ldr	r1, [r4, #32]
 8006d48:	4628      	mov	r0, r5
 8006d4a:	47b0      	blx	r6
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	89a3      	ldrh	r3, [r4, #12]
 8006d50:	d106      	bne.n	8006d60 <__sflush_r+0x68>
 8006d52:	6829      	ldr	r1, [r5, #0]
 8006d54:	291d      	cmp	r1, #29
 8006d56:	d82b      	bhi.n	8006db0 <__sflush_r+0xb8>
 8006d58:	4a29      	ldr	r2, [pc, #164]	; (8006e00 <__sflush_r+0x108>)
 8006d5a:	410a      	asrs	r2, r1
 8006d5c:	07d6      	lsls	r6, r2, #31
 8006d5e:	d427      	bmi.n	8006db0 <__sflush_r+0xb8>
 8006d60:	2200      	movs	r2, #0
 8006d62:	6062      	str	r2, [r4, #4]
 8006d64:	04d9      	lsls	r1, r3, #19
 8006d66:	6922      	ldr	r2, [r4, #16]
 8006d68:	6022      	str	r2, [r4, #0]
 8006d6a:	d504      	bpl.n	8006d76 <__sflush_r+0x7e>
 8006d6c:	1c42      	adds	r2, r0, #1
 8006d6e:	d101      	bne.n	8006d74 <__sflush_r+0x7c>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	b903      	cbnz	r3, 8006d76 <__sflush_r+0x7e>
 8006d74:	6560      	str	r0, [r4, #84]	; 0x54
 8006d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d78:	602f      	str	r7, [r5, #0]
 8006d7a:	2900      	cmp	r1, #0
 8006d7c:	d0c9      	beq.n	8006d12 <__sflush_r+0x1a>
 8006d7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d82:	4299      	cmp	r1, r3
 8006d84:	d002      	beq.n	8006d8c <__sflush_r+0x94>
 8006d86:	4628      	mov	r0, r5
 8006d88:	f001 f9e0 	bl	800814c <_free_r>
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	6360      	str	r0, [r4, #52]	; 0x34
 8006d90:	e7c0      	b.n	8006d14 <__sflush_r+0x1c>
 8006d92:	2301      	movs	r3, #1
 8006d94:	4628      	mov	r0, r5
 8006d96:	47b0      	blx	r6
 8006d98:	1c41      	adds	r1, r0, #1
 8006d9a:	d1c8      	bne.n	8006d2e <__sflush_r+0x36>
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0c5      	beq.n	8006d2e <__sflush_r+0x36>
 8006da2:	2b1d      	cmp	r3, #29
 8006da4:	d001      	beq.n	8006daa <__sflush_r+0xb2>
 8006da6:	2b16      	cmp	r3, #22
 8006da8:	d101      	bne.n	8006dae <__sflush_r+0xb6>
 8006daa:	602f      	str	r7, [r5, #0]
 8006dac:	e7b1      	b.n	8006d12 <__sflush_r+0x1a>
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db4:	81a3      	strh	r3, [r4, #12]
 8006db6:	e7ad      	b.n	8006d14 <__sflush_r+0x1c>
 8006db8:	690f      	ldr	r7, [r1, #16]
 8006dba:	2f00      	cmp	r7, #0
 8006dbc:	d0a9      	beq.n	8006d12 <__sflush_r+0x1a>
 8006dbe:	0793      	lsls	r3, r2, #30
 8006dc0:	680e      	ldr	r6, [r1, #0]
 8006dc2:	bf08      	it	eq
 8006dc4:	694b      	ldreq	r3, [r1, #20]
 8006dc6:	600f      	str	r7, [r1, #0]
 8006dc8:	bf18      	it	ne
 8006dca:	2300      	movne	r3, #0
 8006dcc:	eba6 0807 	sub.w	r8, r6, r7
 8006dd0:	608b      	str	r3, [r1, #8]
 8006dd2:	f1b8 0f00 	cmp.w	r8, #0
 8006dd6:	dd9c      	ble.n	8006d12 <__sflush_r+0x1a>
 8006dd8:	6a21      	ldr	r1, [r4, #32]
 8006dda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ddc:	4643      	mov	r3, r8
 8006dde:	463a      	mov	r2, r7
 8006de0:	4628      	mov	r0, r5
 8006de2:	47b0      	blx	r6
 8006de4:	2800      	cmp	r0, #0
 8006de6:	dc06      	bgt.n	8006df6 <__sflush_r+0xfe>
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dee:	81a3      	strh	r3, [r4, #12]
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006df4:	e78e      	b.n	8006d14 <__sflush_r+0x1c>
 8006df6:	4407      	add	r7, r0
 8006df8:	eba8 0800 	sub.w	r8, r8, r0
 8006dfc:	e7e9      	b.n	8006dd2 <__sflush_r+0xda>
 8006dfe:	bf00      	nop
 8006e00:	dfbffffe 	.word	0xdfbffffe

08006e04 <_fflush_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	690b      	ldr	r3, [r1, #16]
 8006e08:	4605      	mov	r5, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	b913      	cbnz	r3, 8006e14 <_fflush_r+0x10>
 8006e0e:	2500      	movs	r5, #0
 8006e10:	4628      	mov	r0, r5
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	b118      	cbz	r0, 8006e1e <_fflush_r+0x1a>
 8006e16:	6a03      	ldr	r3, [r0, #32]
 8006e18:	b90b      	cbnz	r3, 8006e1e <_fflush_r+0x1a>
 8006e1a:	f000 f8a7 	bl	8006f6c <__sinit>
 8006e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0f3      	beq.n	8006e0e <_fflush_r+0xa>
 8006e26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e28:	07d0      	lsls	r0, r2, #31
 8006e2a:	d404      	bmi.n	8006e36 <_fflush_r+0x32>
 8006e2c:	0599      	lsls	r1, r3, #22
 8006e2e:	d402      	bmi.n	8006e36 <_fflush_r+0x32>
 8006e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e32:	f000 fafe 	bl	8007432 <__retarget_lock_acquire_recursive>
 8006e36:	4628      	mov	r0, r5
 8006e38:	4621      	mov	r1, r4
 8006e3a:	f7ff ff5d 	bl	8006cf8 <__sflush_r>
 8006e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e40:	07da      	lsls	r2, r3, #31
 8006e42:	4605      	mov	r5, r0
 8006e44:	d4e4      	bmi.n	8006e10 <_fflush_r+0xc>
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	059b      	lsls	r3, r3, #22
 8006e4a:	d4e1      	bmi.n	8006e10 <_fflush_r+0xc>
 8006e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e4e:	f000 faf1 	bl	8007434 <__retarget_lock_release_recursive>
 8006e52:	e7dd      	b.n	8006e10 <_fflush_r+0xc>

08006e54 <std>:
 8006e54:	2300      	movs	r3, #0
 8006e56:	b510      	push	{r4, lr}
 8006e58:	4604      	mov	r4, r0
 8006e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e62:	6083      	str	r3, [r0, #8]
 8006e64:	8181      	strh	r1, [r0, #12]
 8006e66:	6643      	str	r3, [r0, #100]	; 0x64
 8006e68:	81c2      	strh	r2, [r0, #14]
 8006e6a:	6183      	str	r3, [r0, #24]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	2208      	movs	r2, #8
 8006e70:	305c      	adds	r0, #92	; 0x5c
 8006e72:	f000 f9f7 	bl	8007264 <memset>
 8006e76:	4b0d      	ldr	r3, [pc, #52]	; (8006eac <std+0x58>)
 8006e78:	6263      	str	r3, [r4, #36]	; 0x24
 8006e7a:	4b0d      	ldr	r3, [pc, #52]	; (8006eb0 <std+0x5c>)
 8006e7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <std+0x60>)
 8006e80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e82:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <std+0x64>)
 8006e84:	6323      	str	r3, [r4, #48]	; 0x30
 8006e86:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <std+0x68>)
 8006e88:	6224      	str	r4, [r4, #32]
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d006      	beq.n	8006e9c <std+0x48>
 8006e8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006e92:	4294      	cmp	r4, r2
 8006e94:	d002      	beq.n	8006e9c <std+0x48>
 8006e96:	33d0      	adds	r3, #208	; 0xd0
 8006e98:	429c      	cmp	r4, r3
 8006e9a:	d105      	bne.n	8006ea8 <std+0x54>
 8006e9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea4:	f000 bac4 	b.w	8007430 <__retarget_lock_init_recursive>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	bf00      	nop
 8006eac:	080070b5 	.word	0x080070b5
 8006eb0:	080070d7 	.word	0x080070d7
 8006eb4:	0800710f 	.word	0x0800710f
 8006eb8:	08007133 	.word	0x08007133
 8006ebc:	2000492c 	.word	0x2000492c

08006ec0 <stdio_exit_handler>:
 8006ec0:	4a02      	ldr	r2, [pc, #8]	; (8006ecc <stdio_exit_handler+0xc>)
 8006ec2:	4903      	ldr	r1, [pc, #12]	; (8006ed0 <stdio_exit_handler+0x10>)
 8006ec4:	4803      	ldr	r0, [pc, #12]	; (8006ed4 <stdio_exit_handler+0x14>)
 8006ec6:	f000 b869 	b.w	8006f9c <_fwalk_sglue>
 8006eca:	bf00      	nop
 8006ecc:	200000c8 	.word	0x200000c8
 8006ed0:	08006e05 	.word	0x08006e05
 8006ed4:	200000d4 	.word	0x200000d4

08006ed8 <cleanup_stdio>:
 8006ed8:	6841      	ldr	r1, [r0, #4]
 8006eda:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <cleanup_stdio+0x34>)
 8006edc:	4299      	cmp	r1, r3
 8006ede:	b510      	push	{r4, lr}
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	d001      	beq.n	8006ee8 <cleanup_stdio+0x10>
 8006ee4:	f7ff ff8e 	bl	8006e04 <_fflush_r>
 8006ee8:	68a1      	ldr	r1, [r4, #8]
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <cleanup_stdio+0x38>)
 8006eec:	4299      	cmp	r1, r3
 8006eee:	d002      	beq.n	8006ef6 <cleanup_stdio+0x1e>
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f7ff ff87 	bl	8006e04 <_fflush_r>
 8006ef6:	68e1      	ldr	r1, [r4, #12]
 8006ef8:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <cleanup_stdio+0x3c>)
 8006efa:	4299      	cmp	r1, r3
 8006efc:	d004      	beq.n	8006f08 <cleanup_stdio+0x30>
 8006efe:	4620      	mov	r0, r4
 8006f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f04:	f7ff bf7e 	b.w	8006e04 <_fflush_r>
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	bf00      	nop
 8006f0c:	2000492c 	.word	0x2000492c
 8006f10:	20004994 	.word	0x20004994
 8006f14:	200049fc 	.word	0x200049fc

08006f18 <global_stdio_init.part.0>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <global_stdio_init.part.0+0x30>)
 8006f1c:	4c0b      	ldr	r4, [pc, #44]	; (8006f4c <global_stdio_init.part.0+0x34>)
 8006f1e:	4a0c      	ldr	r2, [pc, #48]	; (8006f50 <global_stdio_init.part.0+0x38>)
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	4620      	mov	r0, r4
 8006f24:	2200      	movs	r2, #0
 8006f26:	2104      	movs	r1, #4
 8006f28:	f7ff ff94 	bl	8006e54 <std>
 8006f2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f30:	2201      	movs	r2, #1
 8006f32:	2109      	movs	r1, #9
 8006f34:	f7ff ff8e 	bl	8006e54 <std>
 8006f38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f42:	2112      	movs	r1, #18
 8006f44:	f7ff bf86 	b.w	8006e54 <std>
 8006f48:	20004a64 	.word	0x20004a64
 8006f4c:	2000492c 	.word	0x2000492c
 8006f50:	08006ec1 	.word	0x08006ec1

08006f54 <__sfp_lock_acquire>:
 8006f54:	4801      	ldr	r0, [pc, #4]	; (8006f5c <__sfp_lock_acquire+0x8>)
 8006f56:	f000 ba6c 	b.w	8007432 <__retarget_lock_acquire_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20004a6d 	.word	0x20004a6d

08006f60 <__sfp_lock_release>:
 8006f60:	4801      	ldr	r0, [pc, #4]	; (8006f68 <__sfp_lock_release+0x8>)
 8006f62:	f000 ba67 	b.w	8007434 <__retarget_lock_release_recursive>
 8006f66:	bf00      	nop
 8006f68:	20004a6d 	.word	0x20004a6d

08006f6c <__sinit>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	4604      	mov	r4, r0
 8006f70:	f7ff fff0 	bl	8006f54 <__sfp_lock_acquire>
 8006f74:	6a23      	ldr	r3, [r4, #32]
 8006f76:	b11b      	cbz	r3, 8006f80 <__sinit+0x14>
 8006f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f7c:	f7ff bff0 	b.w	8006f60 <__sfp_lock_release>
 8006f80:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <__sinit+0x28>)
 8006f82:	6223      	str	r3, [r4, #32]
 8006f84:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <__sinit+0x2c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1f5      	bne.n	8006f78 <__sinit+0xc>
 8006f8c:	f7ff ffc4 	bl	8006f18 <global_stdio_init.part.0>
 8006f90:	e7f2      	b.n	8006f78 <__sinit+0xc>
 8006f92:	bf00      	nop
 8006f94:	08006ed9 	.word	0x08006ed9
 8006f98:	20004a64 	.word	0x20004a64

08006f9c <_fwalk_sglue>:
 8006f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	4688      	mov	r8, r1
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fac:	f1b9 0901 	subs.w	r9, r9, #1
 8006fb0:	d505      	bpl.n	8006fbe <_fwalk_sglue+0x22>
 8006fb2:	6824      	ldr	r4, [r4, #0]
 8006fb4:	2c00      	cmp	r4, #0
 8006fb6:	d1f7      	bne.n	8006fa8 <_fwalk_sglue+0xc>
 8006fb8:	4630      	mov	r0, r6
 8006fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fbe:	89ab      	ldrh	r3, [r5, #12]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d907      	bls.n	8006fd4 <_fwalk_sglue+0x38>
 8006fc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	d003      	beq.n	8006fd4 <_fwalk_sglue+0x38>
 8006fcc:	4629      	mov	r1, r5
 8006fce:	4638      	mov	r0, r7
 8006fd0:	47c0      	blx	r8
 8006fd2:	4306      	orrs	r6, r0
 8006fd4:	3568      	adds	r5, #104	; 0x68
 8006fd6:	e7e9      	b.n	8006fac <_fwalk_sglue+0x10>

08006fd8 <iprintf>:
 8006fd8:	b40f      	push	{r0, r1, r2, r3}
 8006fda:	b507      	push	{r0, r1, r2, lr}
 8006fdc:	4906      	ldr	r1, [pc, #24]	; (8006ff8 <iprintf+0x20>)
 8006fde:	ab04      	add	r3, sp, #16
 8006fe0:	6808      	ldr	r0, [r1, #0]
 8006fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe6:	6881      	ldr	r1, [r0, #8]
 8006fe8:	9301      	str	r3, [sp, #4]
 8006fea:	f001 fd55 	bl	8008a98 <_vfiprintf_r>
 8006fee:	b003      	add	sp, #12
 8006ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ff4:	b004      	add	sp, #16
 8006ff6:	4770      	bx	lr
 8006ff8:	20000120 	.word	0x20000120

08006ffc <_puts_r>:
 8006ffc:	6a03      	ldr	r3, [r0, #32]
 8006ffe:	b570      	push	{r4, r5, r6, lr}
 8007000:	6884      	ldr	r4, [r0, #8]
 8007002:	4605      	mov	r5, r0
 8007004:	460e      	mov	r6, r1
 8007006:	b90b      	cbnz	r3, 800700c <_puts_r+0x10>
 8007008:	f7ff ffb0 	bl	8006f6c <__sinit>
 800700c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800700e:	07db      	lsls	r3, r3, #31
 8007010:	d405      	bmi.n	800701e <_puts_r+0x22>
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	0598      	lsls	r0, r3, #22
 8007016:	d402      	bmi.n	800701e <_puts_r+0x22>
 8007018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800701a:	f000 fa0a 	bl	8007432 <__retarget_lock_acquire_recursive>
 800701e:	89a3      	ldrh	r3, [r4, #12]
 8007020:	0719      	lsls	r1, r3, #28
 8007022:	d513      	bpl.n	800704c <_puts_r+0x50>
 8007024:	6923      	ldr	r3, [r4, #16]
 8007026:	b18b      	cbz	r3, 800704c <_puts_r+0x50>
 8007028:	3e01      	subs	r6, #1
 800702a:	68a3      	ldr	r3, [r4, #8]
 800702c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007030:	3b01      	subs	r3, #1
 8007032:	60a3      	str	r3, [r4, #8]
 8007034:	b9e9      	cbnz	r1, 8007072 <_puts_r+0x76>
 8007036:	2b00      	cmp	r3, #0
 8007038:	da2e      	bge.n	8007098 <_puts_r+0x9c>
 800703a:	4622      	mov	r2, r4
 800703c:	210a      	movs	r1, #10
 800703e:	4628      	mov	r0, r5
 8007040:	f000 f87b 	bl	800713a <__swbuf_r>
 8007044:	3001      	adds	r0, #1
 8007046:	d007      	beq.n	8007058 <_puts_r+0x5c>
 8007048:	250a      	movs	r5, #10
 800704a:	e007      	b.n	800705c <_puts_r+0x60>
 800704c:	4621      	mov	r1, r4
 800704e:	4628      	mov	r0, r5
 8007050:	f000 f8b0 	bl	80071b4 <__swsetup_r>
 8007054:	2800      	cmp	r0, #0
 8007056:	d0e7      	beq.n	8007028 <_puts_r+0x2c>
 8007058:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800705c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800705e:	07da      	lsls	r2, r3, #31
 8007060:	d405      	bmi.n	800706e <_puts_r+0x72>
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	059b      	lsls	r3, r3, #22
 8007066:	d402      	bmi.n	800706e <_puts_r+0x72>
 8007068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800706a:	f000 f9e3 	bl	8007434 <__retarget_lock_release_recursive>
 800706e:	4628      	mov	r0, r5
 8007070:	bd70      	pop	{r4, r5, r6, pc}
 8007072:	2b00      	cmp	r3, #0
 8007074:	da04      	bge.n	8007080 <_puts_r+0x84>
 8007076:	69a2      	ldr	r2, [r4, #24]
 8007078:	429a      	cmp	r2, r3
 800707a:	dc06      	bgt.n	800708a <_puts_r+0x8e>
 800707c:	290a      	cmp	r1, #10
 800707e:	d004      	beq.n	800708a <_puts_r+0x8e>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	6022      	str	r2, [r4, #0]
 8007086:	7019      	strb	r1, [r3, #0]
 8007088:	e7cf      	b.n	800702a <_puts_r+0x2e>
 800708a:	4622      	mov	r2, r4
 800708c:	4628      	mov	r0, r5
 800708e:	f000 f854 	bl	800713a <__swbuf_r>
 8007092:	3001      	adds	r0, #1
 8007094:	d1c9      	bne.n	800702a <_puts_r+0x2e>
 8007096:	e7df      	b.n	8007058 <_puts_r+0x5c>
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	250a      	movs	r5, #10
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	6022      	str	r2, [r4, #0]
 80070a0:	701d      	strb	r5, [r3, #0]
 80070a2:	e7db      	b.n	800705c <_puts_r+0x60>

080070a4 <puts>:
 80070a4:	4b02      	ldr	r3, [pc, #8]	; (80070b0 <puts+0xc>)
 80070a6:	4601      	mov	r1, r0
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	f7ff bfa7 	b.w	8006ffc <_puts_r>
 80070ae:	bf00      	nop
 80070b0:	20000120 	.word	0x20000120

080070b4 <__sread>:
 80070b4:	b510      	push	{r4, lr}
 80070b6:	460c      	mov	r4, r1
 80070b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070bc:	f000 f96a 	bl	8007394 <_read_r>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	bfab      	itete	ge
 80070c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070c6:	89a3      	ldrhlt	r3, [r4, #12]
 80070c8:	181b      	addge	r3, r3, r0
 80070ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070ce:	bfac      	ite	ge
 80070d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80070d2:	81a3      	strhlt	r3, [r4, #12]
 80070d4:	bd10      	pop	{r4, pc}

080070d6 <__swrite>:
 80070d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070da:	461f      	mov	r7, r3
 80070dc:	898b      	ldrh	r3, [r1, #12]
 80070de:	05db      	lsls	r3, r3, #23
 80070e0:	4605      	mov	r5, r0
 80070e2:	460c      	mov	r4, r1
 80070e4:	4616      	mov	r6, r2
 80070e6:	d505      	bpl.n	80070f4 <__swrite+0x1e>
 80070e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ec:	2302      	movs	r3, #2
 80070ee:	2200      	movs	r2, #0
 80070f0:	f000 f93e 	bl	8007370 <_lseek_r>
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070fe:	81a3      	strh	r3, [r4, #12]
 8007100:	4632      	mov	r2, r6
 8007102:	463b      	mov	r3, r7
 8007104:	4628      	mov	r0, r5
 8007106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800710a:	f000 b955 	b.w	80073b8 <_write_r>

0800710e <__sseek>:
 800710e:	b510      	push	{r4, lr}
 8007110:	460c      	mov	r4, r1
 8007112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007116:	f000 f92b 	bl	8007370 <_lseek_r>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	bf15      	itete	ne
 8007120:	6560      	strne	r0, [r4, #84]	; 0x54
 8007122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800712a:	81a3      	strheq	r3, [r4, #12]
 800712c:	bf18      	it	ne
 800712e:	81a3      	strhne	r3, [r4, #12]
 8007130:	bd10      	pop	{r4, pc}

08007132 <__sclose>:
 8007132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007136:	f000 b8b5 	b.w	80072a4 <_close_r>

0800713a <__swbuf_r>:
 800713a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713c:	460e      	mov	r6, r1
 800713e:	4614      	mov	r4, r2
 8007140:	4605      	mov	r5, r0
 8007142:	b118      	cbz	r0, 800714c <__swbuf_r+0x12>
 8007144:	6a03      	ldr	r3, [r0, #32]
 8007146:	b90b      	cbnz	r3, 800714c <__swbuf_r+0x12>
 8007148:	f7ff ff10 	bl	8006f6c <__sinit>
 800714c:	69a3      	ldr	r3, [r4, #24]
 800714e:	60a3      	str	r3, [r4, #8]
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	071a      	lsls	r2, r3, #28
 8007154:	d525      	bpl.n	80071a2 <__swbuf_r+0x68>
 8007156:	6923      	ldr	r3, [r4, #16]
 8007158:	b31b      	cbz	r3, 80071a2 <__swbuf_r+0x68>
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	6922      	ldr	r2, [r4, #16]
 800715e:	1a98      	subs	r0, r3, r2
 8007160:	6963      	ldr	r3, [r4, #20]
 8007162:	b2f6      	uxtb	r6, r6
 8007164:	4283      	cmp	r3, r0
 8007166:	4637      	mov	r7, r6
 8007168:	dc04      	bgt.n	8007174 <__swbuf_r+0x3a>
 800716a:	4621      	mov	r1, r4
 800716c:	4628      	mov	r0, r5
 800716e:	f7ff fe49 	bl	8006e04 <_fflush_r>
 8007172:	b9e0      	cbnz	r0, 80071ae <__swbuf_r+0x74>
 8007174:	68a3      	ldr	r3, [r4, #8]
 8007176:	3b01      	subs	r3, #1
 8007178:	60a3      	str	r3, [r4, #8]
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	6022      	str	r2, [r4, #0]
 8007180:	701e      	strb	r6, [r3, #0]
 8007182:	6962      	ldr	r2, [r4, #20]
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	429a      	cmp	r2, r3
 8007188:	d004      	beq.n	8007194 <__swbuf_r+0x5a>
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	07db      	lsls	r3, r3, #31
 800718e:	d506      	bpl.n	800719e <__swbuf_r+0x64>
 8007190:	2e0a      	cmp	r6, #10
 8007192:	d104      	bne.n	800719e <__swbuf_r+0x64>
 8007194:	4621      	mov	r1, r4
 8007196:	4628      	mov	r0, r5
 8007198:	f7ff fe34 	bl	8006e04 <_fflush_r>
 800719c:	b938      	cbnz	r0, 80071ae <__swbuf_r+0x74>
 800719e:	4638      	mov	r0, r7
 80071a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a2:	4621      	mov	r1, r4
 80071a4:	4628      	mov	r0, r5
 80071a6:	f000 f805 	bl	80071b4 <__swsetup_r>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d0d5      	beq.n	800715a <__swbuf_r+0x20>
 80071ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80071b2:	e7f4      	b.n	800719e <__swbuf_r+0x64>

080071b4 <__swsetup_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4b2a      	ldr	r3, [pc, #168]	; (8007260 <__swsetup_r+0xac>)
 80071b8:	4605      	mov	r5, r0
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	460c      	mov	r4, r1
 80071be:	b118      	cbz	r0, 80071c8 <__swsetup_r+0x14>
 80071c0:	6a03      	ldr	r3, [r0, #32]
 80071c2:	b90b      	cbnz	r3, 80071c8 <__swsetup_r+0x14>
 80071c4:	f7ff fed2 	bl	8006f6c <__sinit>
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071ce:	0718      	lsls	r0, r3, #28
 80071d0:	d422      	bmi.n	8007218 <__swsetup_r+0x64>
 80071d2:	06d9      	lsls	r1, r3, #27
 80071d4:	d407      	bmi.n	80071e6 <__swsetup_r+0x32>
 80071d6:	2309      	movs	r3, #9
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071e4:	e034      	b.n	8007250 <__swsetup_r+0x9c>
 80071e6:	0758      	lsls	r0, r3, #29
 80071e8:	d512      	bpl.n	8007210 <__swsetup_r+0x5c>
 80071ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071ec:	b141      	cbz	r1, 8007200 <__swsetup_r+0x4c>
 80071ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071f2:	4299      	cmp	r1, r3
 80071f4:	d002      	beq.n	80071fc <__swsetup_r+0x48>
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 ffa8 	bl	800814c <_free_r>
 80071fc:	2300      	movs	r3, #0
 80071fe:	6363      	str	r3, [r4, #52]	; 0x34
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007206:	81a3      	strh	r3, [r4, #12]
 8007208:	2300      	movs	r3, #0
 800720a:	6063      	str	r3, [r4, #4]
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	6023      	str	r3, [r4, #0]
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	f043 0308 	orr.w	r3, r3, #8
 8007216:	81a3      	strh	r3, [r4, #12]
 8007218:	6923      	ldr	r3, [r4, #16]
 800721a:	b94b      	cbnz	r3, 8007230 <__swsetup_r+0x7c>
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007226:	d003      	beq.n	8007230 <__swsetup_r+0x7c>
 8007228:	4621      	mov	r1, r4
 800722a:	4628      	mov	r0, r5
 800722c:	f001 fd74 	bl	8008d18 <__smakebuf_r>
 8007230:	89a0      	ldrh	r0, [r4, #12]
 8007232:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007236:	f010 0301 	ands.w	r3, r0, #1
 800723a:	d00a      	beq.n	8007252 <__swsetup_r+0x9e>
 800723c:	2300      	movs	r3, #0
 800723e:	60a3      	str	r3, [r4, #8]
 8007240:	6963      	ldr	r3, [r4, #20]
 8007242:	425b      	negs	r3, r3
 8007244:	61a3      	str	r3, [r4, #24]
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	b943      	cbnz	r3, 800725c <__swsetup_r+0xa8>
 800724a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800724e:	d1c4      	bne.n	80071da <__swsetup_r+0x26>
 8007250:	bd38      	pop	{r3, r4, r5, pc}
 8007252:	0781      	lsls	r1, r0, #30
 8007254:	bf58      	it	pl
 8007256:	6963      	ldrpl	r3, [r4, #20]
 8007258:	60a3      	str	r3, [r4, #8]
 800725a:	e7f4      	b.n	8007246 <__swsetup_r+0x92>
 800725c:	2000      	movs	r0, #0
 800725e:	e7f7      	b.n	8007250 <__swsetup_r+0x9c>
 8007260:	20000120 	.word	0x20000120

08007264 <memset>:
 8007264:	4402      	add	r2, r0
 8007266:	4603      	mov	r3, r0
 8007268:	4293      	cmp	r3, r2
 800726a:	d100      	bne.n	800726e <memset+0xa>
 800726c:	4770      	bx	lr
 800726e:	f803 1b01 	strb.w	r1, [r3], #1
 8007272:	e7f9      	b.n	8007268 <memset+0x4>

08007274 <strncpy>:
 8007274:	b510      	push	{r4, lr}
 8007276:	3901      	subs	r1, #1
 8007278:	4603      	mov	r3, r0
 800727a:	b132      	cbz	r2, 800728a <strncpy+0x16>
 800727c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007280:	f803 4b01 	strb.w	r4, [r3], #1
 8007284:	3a01      	subs	r2, #1
 8007286:	2c00      	cmp	r4, #0
 8007288:	d1f7      	bne.n	800727a <strncpy+0x6>
 800728a:	441a      	add	r2, r3
 800728c:	2100      	movs	r1, #0
 800728e:	4293      	cmp	r3, r2
 8007290:	d100      	bne.n	8007294 <strncpy+0x20>
 8007292:	bd10      	pop	{r4, pc}
 8007294:	f803 1b01 	strb.w	r1, [r3], #1
 8007298:	e7f9      	b.n	800728e <strncpy+0x1a>
	...

0800729c <_localeconv_r>:
 800729c:	4800      	ldr	r0, [pc, #0]	; (80072a0 <_localeconv_r+0x4>)
 800729e:	4770      	bx	lr
 80072a0:	20000214 	.word	0x20000214

080072a4 <_close_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4d06      	ldr	r5, [pc, #24]	; (80072c0 <_close_r+0x1c>)
 80072a8:	2300      	movs	r3, #0
 80072aa:	4604      	mov	r4, r0
 80072ac:	4608      	mov	r0, r1
 80072ae:	602b      	str	r3, [r5, #0]
 80072b0:	f7fa ff67 	bl	8002182 <_close>
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	d102      	bne.n	80072be <_close_r+0x1a>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	b103      	cbz	r3, 80072be <_close_r+0x1a>
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	bd38      	pop	{r3, r4, r5, pc}
 80072c0:	20004a68 	.word	0x20004a68

080072c4 <_reclaim_reent>:
 80072c4:	4b29      	ldr	r3, [pc, #164]	; (800736c <_reclaim_reent+0xa8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4283      	cmp	r3, r0
 80072ca:	b570      	push	{r4, r5, r6, lr}
 80072cc:	4604      	mov	r4, r0
 80072ce:	d04b      	beq.n	8007368 <_reclaim_reent+0xa4>
 80072d0:	69c3      	ldr	r3, [r0, #28]
 80072d2:	b143      	cbz	r3, 80072e6 <_reclaim_reent+0x22>
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d144      	bne.n	8007364 <_reclaim_reent+0xa0>
 80072da:	69e3      	ldr	r3, [r4, #28]
 80072dc:	6819      	ldr	r1, [r3, #0]
 80072de:	b111      	cbz	r1, 80072e6 <_reclaim_reent+0x22>
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 ff33 	bl	800814c <_free_r>
 80072e6:	6961      	ldr	r1, [r4, #20]
 80072e8:	b111      	cbz	r1, 80072f0 <_reclaim_reent+0x2c>
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 ff2e 	bl	800814c <_free_r>
 80072f0:	69e1      	ldr	r1, [r4, #28]
 80072f2:	b111      	cbz	r1, 80072fa <_reclaim_reent+0x36>
 80072f4:	4620      	mov	r0, r4
 80072f6:	f000 ff29 	bl	800814c <_free_r>
 80072fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80072fc:	b111      	cbz	r1, 8007304 <_reclaim_reent+0x40>
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 ff24 	bl	800814c <_free_r>
 8007304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007306:	b111      	cbz	r1, 800730e <_reclaim_reent+0x4a>
 8007308:	4620      	mov	r0, r4
 800730a:	f000 ff1f 	bl	800814c <_free_r>
 800730e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007310:	b111      	cbz	r1, 8007318 <_reclaim_reent+0x54>
 8007312:	4620      	mov	r0, r4
 8007314:	f000 ff1a 	bl	800814c <_free_r>
 8007318:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800731a:	b111      	cbz	r1, 8007322 <_reclaim_reent+0x5e>
 800731c:	4620      	mov	r0, r4
 800731e:	f000 ff15 	bl	800814c <_free_r>
 8007322:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007324:	b111      	cbz	r1, 800732c <_reclaim_reent+0x68>
 8007326:	4620      	mov	r0, r4
 8007328:	f000 ff10 	bl	800814c <_free_r>
 800732c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800732e:	b111      	cbz	r1, 8007336 <_reclaim_reent+0x72>
 8007330:	4620      	mov	r0, r4
 8007332:	f000 ff0b 	bl	800814c <_free_r>
 8007336:	6a23      	ldr	r3, [r4, #32]
 8007338:	b1b3      	cbz	r3, 8007368 <_reclaim_reent+0xa4>
 800733a:	4620      	mov	r0, r4
 800733c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007340:	4718      	bx	r3
 8007342:	5949      	ldr	r1, [r1, r5]
 8007344:	b941      	cbnz	r1, 8007358 <_reclaim_reent+0x94>
 8007346:	3504      	adds	r5, #4
 8007348:	69e3      	ldr	r3, [r4, #28]
 800734a:	2d80      	cmp	r5, #128	; 0x80
 800734c:	68d9      	ldr	r1, [r3, #12]
 800734e:	d1f8      	bne.n	8007342 <_reclaim_reent+0x7e>
 8007350:	4620      	mov	r0, r4
 8007352:	f000 fefb 	bl	800814c <_free_r>
 8007356:	e7c0      	b.n	80072da <_reclaim_reent+0x16>
 8007358:	680e      	ldr	r6, [r1, #0]
 800735a:	4620      	mov	r0, r4
 800735c:	f000 fef6 	bl	800814c <_free_r>
 8007360:	4631      	mov	r1, r6
 8007362:	e7ef      	b.n	8007344 <_reclaim_reent+0x80>
 8007364:	2500      	movs	r5, #0
 8007366:	e7ef      	b.n	8007348 <_reclaim_reent+0x84>
 8007368:	bd70      	pop	{r4, r5, r6, pc}
 800736a:	bf00      	nop
 800736c:	20000120 	.word	0x20000120

08007370 <_lseek_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4d07      	ldr	r5, [pc, #28]	; (8007390 <_lseek_r+0x20>)
 8007374:	4604      	mov	r4, r0
 8007376:	4608      	mov	r0, r1
 8007378:	4611      	mov	r1, r2
 800737a:	2200      	movs	r2, #0
 800737c:	602a      	str	r2, [r5, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	f7fa ff26 	bl	80021d0 <_lseek>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d102      	bne.n	800738e <_lseek_r+0x1e>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	b103      	cbz	r3, 800738e <_lseek_r+0x1e>
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	20004a68 	.word	0x20004a68

08007394 <_read_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4d07      	ldr	r5, [pc, #28]	; (80073b4 <_read_r+0x20>)
 8007398:	4604      	mov	r4, r0
 800739a:	4608      	mov	r0, r1
 800739c:	4611      	mov	r1, r2
 800739e:	2200      	movs	r2, #0
 80073a0:	602a      	str	r2, [r5, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	f7fa fed0 	bl	8002148 <_read>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_read_r+0x1e>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_read_r+0x1e>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	20004a68 	.word	0x20004a68

080073b8 <_write_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4d07      	ldr	r5, [pc, #28]	; (80073d8 <_write_r+0x20>)
 80073bc:	4604      	mov	r4, r0
 80073be:	4608      	mov	r0, r1
 80073c0:	4611      	mov	r1, r2
 80073c2:	2200      	movs	r2, #0
 80073c4:	602a      	str	r2, [r5, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	f7fa fa5c 	bl	8001884 <_write>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_write_r+0x1e>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_write_r+0x1e>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	20004a68 	.word	0x20004a68

080073dc <__errno>:
 80073dc:	4b01      	ldr	r3, [pc, #4]	; (80073e4 <__errno+0x8>)
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	20000120 	.word	0x20000120

080073e8 <__libc_init_array>:
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	4d0d      	ldr	r5, [pc, #52]	; (8007420 <__libc_init_array+0x38>)
 80073ec:	4c0d      	ldr	r4, [pc, #52]	; (8007424 <__libc_init_array+0x3c>)
 80073ee:	1b64      	subs	r4, r4, r5
 80073f0:	10a4      	asrs	r4, r4, #2
 80073f2:	2600      	movs	r6, #0
 80073f4:	42a6      	cmp	r6, r4
 80073f6:	d109      	bne.n	800740c <__libc_init_array+0x24>
 80073f8:	4d0b      	ldr	r5, [pc, #44]	; (8007428 <__libc_init_array+0x40>)
 80073fa:	4c0c      	ldr	r4, [pc, #48]	; (800742c <__libc_init_array+0x44>)
 80073fc:	f001 fdac 	bl	8008f58 <_init>
 8007400:	1b64      	subs	r4, r4, r5
 8007402:	10a4      	asrs	r4, r4, #2
 8007404:	2600      	movs	r6, #0
 8007406:	42a6      	cmp	r6, r4
 8007408:	d105      	bne.n	8007416 <__libc_init_array+0x2e>
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007410:	4798      	blx	r3
 8007412:	3601      	adds	r6, #1
 8007414:	e7ee      	b.n	80073f4 <__libc_init_array+0xc>
 8007416:	f855 3b04 	ldr.w	r3, [r5], #4
 800741a:	4798      	blx	r3
 800741c:	3601      	adds	r6, #1
 800741e:	e7f2      	b.n	8007406 <__libc_init_array+0x1e>
 8007420:	08009afc 	.word	0x08009afc
 8007424:	08009afc 	.word	0x08009afc
 8007428:	08009afc 	.word	0x08009afc
 800742c:	08009b00 	.word	0x08009b00

08007430 <__retarget_lock_init_recursive>:
 8007430:	4770      	bx	lr

08007432 <__retarget_lock_acquire_recursive>:
 8007432:	4770      	bx	lr

08007434 <__retarget_lock_release_recursive>:
 8007434:	4770      	bx	lr

08007436 <memcpy>:
 8007436:	440a      	add	r2, r1
 8007438:	4291      	cmp	r1, r2
 800743a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800743e:	d100      	bne.n	8007442 <memcpy+0xc>
 8007440:	4770      	bx	lr
 8007442:	b510      	push	{r4, lr}
 8007444:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007448:	f803 4f01 	strb.w	r4, [r3, #1]!
 800744c:	4291      	cmp	r1, r2
 800744e:	d1f9      	bne.n	8007444 <memcpy+0xe>
 8007450:	bd10      	pop	{r4, pc}

08007452 <quorem>:
 8007452:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007456:	6903      	ldr	r3, [r0, #16]
 8007458:	690c      	ldr	r4, [r1, #16]
 800745a:	42a3      	cmp	r3, r4
 800745c:	4607      	mov	r7, r0
 800745e:	db7e      	blt.n	800755e <quorem+0x10c>
 8007460:	3c01      	subs	r4, #1
 8007462:	f101 0814 	add.w	r8, r1, #20
 8007466:	f100 0514 	add.w	r5, r0, #20
 800746a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007474:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007478:	3301      	adds	r3, #1
 800747a:	429a      	cmp	r2, r3
 800747c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007480:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007484:	fbb2 f6f3 	udiv	r6, r2, r3
 8007488:	d331      	bcc.n	80074ee <quorem+0x9c>
 800748a:	f04f 0e00 	mov.w	lr, #0
 800748e:	4640      	mov	r0, r8
 8007490:	46ac      	mov	ip, r5
 8007492:	46f2      	mov	sl, lr
 8007494:	f850 2b04 	ldr.w	r2, [r0], #4
 8007498:	b293      	uxth	r3, r2
 800749a:	fb06 e303 	mla	r3, r6, r3, lr
 800749e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80074a2:	0c1a      	lsrs	r2, r3, #16
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	ebaa 0303 	sub.w	r3, sl, r3
 80074aa:	f8dc a000 	ldr.w	sl, [ip]
 80074ae:	fa13 f38a 	uxtah	r3, r3, sl
 80074b2:	fb06 220e 	mla	r2, r6, lr, r2
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	9b00      	ldr	r3, [sp, #0]
 80074ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80074be:	b292      	uxth	r2, r2
 80074c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80074c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80074cc:	4581      	cmp	r9, r0
 80074ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074d2:	f84c 3b04 	str.w	r3, [ip], #4
 80074d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80074da:	d2db      	bcs.n	8007494 <quorem+0x42>
 80074dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80074e0:	b92b      	cbnz	r3, 80074ee <quorem+0x9c>
 80074e2:	9b01      	ldr	r3, [sp, #4]
 80074e4:	3b04      	subs	r3, #4
 80074e6:	429d      	cmp	r5, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	d32c      	bcc.n	8007546 <quorem+0xf4>
 80074ec:	613c      	str	r4, [r7, #16]
 80074ee:	4638      	mov	r0, r7
 80074f0:	f001 f9a8 	bl	8008844 <__mcmp>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	db22      	blt.n	800753e <quorem+0xec>
 80074f8:	3601      	adds	r6, #1
 80074fa:	4629      	mov	r1, r5
 80074fc:	2000      	movs	r0, #0
 80074fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8007502:	f8d1 c000 	ldr.w	ip, [r1]
 8007506:	b293      	uxth	r3, r2
 8007508:	1ac3      	subs	r3, r0, r3
 800750a:	0c12      	lsrs	r2, r2, #16
 800750c:	fa13 f38c 	uxtah	r3, r3, ip
 8007510:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007514:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007518:	b29b      	uxth	r3, r3
 800751a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800751e:	45c1      	cmp	r9, r8
 8007520:	f841 3b04 	str.w	r3, [r1], #4
 8007524:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007528:	d2e9      	bcs.n	80074fe <quorem+0xac>
 800752a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800752e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007532:	b922      	cbnz	r2, 800753e <quorem+0xec>
 8007534:	3b04      	subs	r3, #4
 8007536:	429d      	cmp	r5, r3
 8007538:	461a      	mov	r2, r3
 800753a:	d30a      	bcc.n	8007552 <quorem+0x100>
 800753c:	613c      	str	r4, [r7, #16]
 800753e:	4630      	mov	r0, r6
 8007540:	b003      	add	sp, #12
 8007542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	3b04      	subs	r3, #4
 800754a:	2a00      	cmp	r2, #0
 800754c:	d1ce      	bne.n	80074ec <quorem+0x9a>
 800754e:	3c01      	subs	r4, #1
 8007550:	e7c9      	b.n	80074e6 <quorem+0x94>
 8007552:	6812      	ldr	r2, [r2, #0]
 8007554:	3b04      	subs	r3, #4
 8007556:	2a00      	cmp	r2, #0
 8007558:	d1f0      	bne.n	800753c <quorem+0xea>
 800755a:	3c01      	subs	r4, #1
 800755c:	e7eb      	b.n	8007536 <quorem+0xe4>
 800755e:	2000      	movs	r0, #0
 8007560:	e7ee      	b.n	8007540 <quorem+0xee>
 8007562:	0000      	movs	r0, r0
 8007564:	0000      	movs	r0, r0
	...

08007568 <_dtoa_r>:
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	ed2d 8b04 	vpush	{d8-d9}
 8007570:	69c5      	ldr	r5, [r0, #28]
 8007572:	b093      	sub	sp, #76	; 0x4c
 8007574:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007578:	ec57 6b10 	vmov	r6, r7, d0
 800757c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007580:	9107      	str	r1, [sp, #28]
 8007582:	4604      	mov	r4, r0
 8007584:	920a      	str	r2, [sp, #40]	; 0x28
 8007586:	930d      	str	r3, [sp, #52]	; 0x34
 8007588:	b975      	cbnz	r5, 80075a8 <_dtoa_r+0x40>
 800758a:	2010      	movs	r0, #16
 800758c:	f000 fe2a 	bl	80081e4 <malloc>
 8007590:	4602      	mov	r2, r0
 8007592:	61e0      	str	r0, [r4, #28]
 8007594:	b920      	cbnz	r0, 80075a0 <_dtoa_r+0x38>
 8007596:	4bae      	ldr	r3, [pc, #696]	; (8007850 <_dtoa_r+0x2e8>)
 8007598:	21ef      	movs	r1, #239	; 0xef
 800759a:	48ae      	ldr	r0, [pc, #696]	; (8007854 <_dtoa_r+0x2ec>)
 800759c:	f001 fc2a 	bl	8008df4 <__assert_func>
 80075a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075a4:	6005      	str	r5, [r0, #0]
 80075a6:	60c5      	str	r5, [r0, #12]
 80075a8:	69e3      	ldr	r3, [r4, #28]
 80075aa:	6819      	ldr	r1, [r3, #0]
 80075ac:	b151      	cbz	r1, 80075c4 <_dtoa_r+0x5c>
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	604a      	str	r2, [r1, #4]
 80075b2:	2301      	movs	r3, #1
 80075b4:	4093      	lsls	r3, r2
 80075b6:	608b      	str	r3, [r1, #8]
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 ff07 	bl	80083cc <_Bfree>
 80075be:	69e3      	ldr	r3, [r4, #28]
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	1e3b      	subs	r3, r7, #0
 80075c6:	bfbb      	ittet	lt
 80075c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80075cc:	9303      	strlt	r3, [sp, #12]
 80075ce:	2300      	movge	r3, #0
 80075d0:	2201      	movlt	r2, #1
 80075d2:	bfac      	ite	ge
 80075d4:	f8c8 3000 	strge.w	r3, [r8]
 80075d8:	f8c8 2000 	strlt.w	r2, [r8]
 80075dc:	4b9e      	ldr	r3, [pc, #632]	; (8007858 <_dtoa_r+0x2f0>)
 80075de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80075e2:	ea33 0308 	bics.w	r3, r3, r8
 80075e6:	d11b      	bne.n	8007620 <_dtoa_r+0xb8>
 80075e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80075f4:	4333      	orrs	r3, r6
 80075f6:	f000 8593 	beq.w	8008120 <_dtoa_r+0xbb8>
 80075fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075fc:	b963      	cbnz	r3, 8007618 <_dtoa_r+0xb0>
 80075fe:	4b97      	ldr	r3, [pc, #604]	; (800785c <_dtoa_r+0x2f4>)
 8007600:	e027      	b.n	8007652 <_dtoa_r+0xea>
 8007602:	4b97      	ldr	r3, [pc, #604]	; (8007860 <_dtoa_r+0x2f8>)
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	3308      	adds	r3, #8
 8007608:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	9800      	ldr	r0, [sp, #0]
 800760e:	b013      	add	sp, #76	; 0x4c
 8007610:	ecbd 8b04 	vpop	{d8-d9}
 8007614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007618:	4b90      	ldr	r3, [pc, #576]	; (800785c <_dtoa_r+0x2f4>)
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	3303      	adds	r3, #3
 800761e:	e7f3      	b.n	8007608 <_dtoa_r+0xa0>
 8007620:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	ec51 0b17 	vmov	r0, r1, d7
 800762a:	eeb0 8a47 	vmov.f32	s16, s14
 800762e:	eef0 8a67 	vmov.f32	s17, s15
 8007632:	2300      	movs	r3, #0
 8007634:	f7f9 fa58 	bl	8000ae8 <__aeabi_dcmpeq>
 8007638:	4681      	mov	r9, r0
 800763a:	b160      	cbz	r0, 8007656 <_dtoa_r+0xee>
 800763c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800763e:	2301      	movs	r3, #1
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 8568 	beq.w	800811a <_dtoa_r+0xbb2>
 800764a:	4b86      	ldr	r3, [pc, #536]	; (8007864 <_dtoa_r+0x2fc>)
 800764c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	3b01      	subs	r3, #1
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	e7da      	b.n	800760c <_dtoa_r+0xa4>
 8007656:	aa10      	add	r2, sp, #64	; 0x40
 8007658:	a911      	add	r1, sp, #68	; 0x44
 800765a:	4620      	mov	r0, r4
 800765c:	eeb0 0a48 	vmov.f32	s0, s16
 8007660:	eef0 0a68 	vmov.f32	s1, s17
 8007664:	f001 f994 	bl	8008990 <__d2b>
 8007668:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800766c:	4682      	mov	sl, r0
 800766e:	2d00      	cmp	r5, #0
 8007670:	d07f      	beq.n	8007772 <_dtoa_r+0x20a>
 8007672:	ee18 3a90 	vmov	r3, s17
 8007676:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800767a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800767e:	ec51 0b18 	vmov	r0, r1, d8
 8007682:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007686:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800768a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800768e:	4619      	mov	r1, r3
 8007690:	2200      	movs	r2, #0
 8007692:	4b75      	ldr	r3, [pc, #468]	; (8007868 <_dtoa_r+0x300>)
 8007694:	f7f8 fe08 	bl	80002a8 <__aeabi_dsub>
 8007698:	a367      	add	r3, pc, #412	; (adr r3, 8007838 <_dtoa_r+0x2d0>)
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	f7f8 ffbb 	bl	8000618 <__aeabi_dmul>
 80076a2:	a367      	add	r3, pc, #412	; (adr r3, 8007840 <_dtoa_r+0x2d8>)
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f7f8 fe00 	bl	80002ac <__adddf3>
 80076ac:	4606      	mov	r6, r0
 80076ae:	4628      	mov	r0, r5
 80076b0:	460f      	mov	r7, r1
 80076b2:	f7f8 ff47 	bl	8000544 <__aeabi_i2d>
 80076b6:	a364      	add	r3, pc, #400	; (adr r3, 8007848 <_dtoa_r+0x2e0>)
 80076b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076bc:	f7f8 ffac 	bl	8000618 <__aeabi_dmul>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4630      	mov	r0, r6
 80076c6:	4639      	mov	r1, r7
 80076c8:	f7f8 fdf0 	bl	80002ac <__adddf3>
 80076cc:	4606      	mov	r6, r0
 80076ce:	460f      	mov	r7, r1
 80076d0:	f7f9 fa52 	bl	8000b78 <__aeabi_d2iz>
 80076d4:	2200      	movs	r2, #0
 80076d6:	4683      	mov	fp, r0
 80076d8:	2300      	movs	r3, #0
 80076da:	4630      	mov	r0, r6
 80076dc:	4639      	mov	r1, r7
 80076de:	f7f9 fa0d 	bl	8000afc <__aeabi_dcmplt>
 80076e2:	b148      	cbz	r0, 80076f8 <_dtoa_r+0x190>
 80076e4:	4658      	mov	r0, fp
 80076e6:	f7f8 ff2d 	bl	8000544 <__aeabi_i2d>
 80076ea:	4632      	mov	r2, r6
 80076ec:	463b      	mov	r3, r7
 80076ee:	f7f9 f9fb 	bl	8000ae8 <__aeabi_dcmpeq>
 80076f2:	b908      	cbnz	r0, 80076f8 <_dtoa_r+0x190>
 80076f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80076f8:	f1bb 0f16 	cmp.w	fp, #22
 80076fc:	d857      	bhi.n	80077ae <_dtoa_r+0x246>
 80076fe:	4b5b      	ldr	r3, [pc, #364]	; (800786c <_dtoa_r+0x304>)
 8007700:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	ec51 0b18 	vmov	r0, r1, d8
 800770c:	f7f9 f9f6 	bl	8000afc <__aeabi_dcmplt>
 8007710:	2800      	cmp	r0, #0
 8007712:	d04e      	beq.n	80077b2 <_dtoa_r+0x24a>
 8007714:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007718:	2300      	movs	r3, #0
 800771a:	930c      	str	r3, [sp, #48]	; 0x30
 800771c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800771e:	1b5b      	subs	r3, r3, r5
 8007720:	1e5a      	subs	r2, r3, #1
 8007722:	bf45      	ittet	mi
 8007724:	f1c3 0301 	rsbmi	r3, r3, #1
 8007728:	9305      	strmi	r3, [sp, #20]
 800772a:	2300      	movpl	r3, #0
 800772c:	2300      	movmi	r3, #0
 800772e:	9206      	str	r2, [sp, #24]
 8007730:	bf54      	ite	pl
 8007732:	9305      	strpl	r3, [sp, #20]
 8007734:	9306      	strmi	r3, [sp, #24]
 8007736:	f1bb 0f00 	cmp.w	fp, #0
 800773a:	db3c      	blt.n	80077b6 <_dtoa_r+0x24e>
 800773c:	9b06      	ldr	r3, [sp, #24]
 800773e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007742:	445b      	add	r3, fp
 8007744:	9306      	str	r3, [sp, #24]
 8007746:	2300      	movs	r3, #0
 8007748:	9308      	str	r3, [sp, #32]
 800774a:	9b07      	ldr	r3, [sp, #28]
 800774c:	2b09      	cmp	r3, #9
 800774e:	d868      	bhi.n	8007822 <_dtoa_r+0x2ba>
 8007750:	2b05      	cmp	r3, #5
 8007752:	bfc4      	itt	gt
 8007754:	3b04      	subgt	r3, #4
 8007756:	9307      	strgt	r3, [sp, #28]
 8007758:	9b07      	ldr	r3, [sp, #28]
 800775a:	f1a3 0302 	sub.w	r3, r3, #2
 800775e:	bfcc      	ite	gt
 8007760:	2500      	movgt	r5, #0
 8007762:	2501      	movle	r5, #1
 8007764:	2b03      	cmp	r3, #3
 8007766:	f200 8085 	bhi.w	8007874 <_dtoa_r+0x30c>
 800776a:	e8df f003 	tbb	[pc, r3]
 800776e:	3b2e      	.short	0x3b2e
 8007770:	5839      	.short	0x5839
 8007772:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007776:	441d      	add	r5, r3
 8007778:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800777c:	2b20      	cmp	r3, #32
 800777e:	bfc1      	itttt	gt
 8007780:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007784:	fa08 f803 	lslgt.w	r8, r8, r3
 8007788:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800778c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007790:	bfd6      	itet	le
 8007792:	f1c3 0320 	rsble	r3, r3, #32
 8007796:	ea48 0003 	orrgt.w	r0, r8, r3
 800779a:	fa06 f003 	lslle.w	r0, r6, r3
 800779e:	f7f8 fec1 	bl	8000524 <__aeabi_ui2d>
 80077a2:	2201      	movs	r2, #1
 80077a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80077a8:	3d01      	subs	r5, #1
 80077aa:	920e      	str	r2, [sp, #56]	; 0x38
 80077ac:	e76f      	b.n	800768e <_dtoa_r+0x126>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e7b3      	b.n	800771a <_dtoa_r+0x1b2>
 80077b2:	900c      	str	r0, [sp, #48]	; 0x30
 80077b4:	e7b2      	b.n	800771c <_dtoa_r+0x1b4>
 80077b6:	9b05      	ldr	r3, [sp, #20]
 80077b8:	eba3 030b 	sub.w	r3, r3, fp
 80077bc:	9305      	str	r3, [sp, #20]
 80077be:	f1cb 0300 	rsb	r3, fp, #0
 80077c2:	9308      	str	r3, [sp, #32]
 80077c4:	2300      	movs	r3, #0
 80077c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80077c8:	e7bf      	b.n	800774a <_dtoa_r+0x1e2>
 80077ca:	2300      	movs	r3, #0
 80077cc:	9309      	str	r3, [sp, #36]	; 0x24
 80077ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	dc52      	bgt.n	800787a <_dtoa_r+0x312>
 80077d4:	2301      	movs	r3, #1
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	9304      	str	r3, [sp, #16]
 80077da:	461a      	mov	r2, r3
 80077dc:	920a      	str	r2, [sp, #40]	; 0x28
 80077de:	e00b      	b.n	80077f8 <_dtoa_r+0x290>
 80077e0:	2301      	movs	r3, #1
 80077e2:	e7f3      	b.n	80077cc <_dtoa_r+0x264>
 80077e4:	2300      	movs	r3, #0
 80077e6:	9309      	str	r3, [sp, #36]	; 0x24
 80077e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ea:	445b      	add	r3, fp
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	3301      	adds	r3, #1
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	9304      	str	r3, [sp, #16]
 80077f4:	bfb8      	it	lt
 80077f6:	2301      	movlt	r3, #1
 80077f8:	69e0      	ldr	r0, [r4, #28]
 80077fa:	2100      	movs	r1, #0
 80077fc:	2204      	movs	r2, #4
 80077fe:	f102 0614 	add.w	r6, r2, #20
 8007802:	429e      	cmp	r6, r3
 8007804:	d93d      	bls.n	8007882 <_dtoa_r+0x31a>
 8007806:	6041      	str	r1, [r0, #4]
 8007808:	4620      	mov	r0, r4
 800780a:	f000 fd9f 	bl	800834c <_Balloc>
 800780e:	9000      	str	r0, [sp, #0]
 8007810:	2800      	cmp	r0, #0
 8007812:	d139      	bne.n	8007888 <_dtoa_r+0x320>
 8007814:	4b16      	ldr	r3, [pc, #88]	; (8007870 <_dtoa_r+0x308>)
 8007816:	4602      	mov	r2, r0
 8007818:	f240 11af 	movw	r1, #431	; 0x1af
 800781c:	e6bd      	b.n	800759a <_dtoa_r+0x32>
 800781e:	2301      	movs	r3, #1
 8007820:	e7e1      	b.n	80077e6 <_dtoa_r+0x27e>
 8007822:	2501      	movs	r5, #1
 8007824:	2300      	movs	r3, #0
 8007826:	9307      	str	r3, [sp, #28]
 8007828:	9509      	str	r5, [sp, #36]	; 0x24
 800782a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	9304      	str	r3, [sp, #16]
 8007832:	2200      	movs	r2, #0
 8007834:	2312      	movs	r3, #18
 8007836:	e7d1      	b.n	80077dc <_dtoa_r+0x274>
 8007838:	636f4361 	.word	0x636f4361
 800783c:	3fd287a7 	.word	0x3fd287a7
 8007840:	8b60c8b3 	.word	0x8b60c8b3
 8007844:	3fc68a28 	.word	0x3fc68a28
 8007848:	509f79fb 	.word	0x509f79fb
 800784c:	3fd34413 	.word	0x3fd34413
 8007850:	080098c2 	.word	0x080098c2
 8007854:	080098d9 	.word	0x080098d9
 8007858:	7ff00000 	.word	0x7ff00000
 800785c:	080098be 	.word	0x080098be
 8007860:	080098b5 	.word	0x080098b5
 8007864:	08009892 	.word	0x08009892
 8007868:	3ff80000 	.word	0x3ff80000
 800786c:	080099c8 	.word	0x080099c8
 8007870:	08009931 	.word	0x08009931
 8007874:	2301      	movs	r3, #1
 8007876:	9309      	str	r3, [sp, #36]	; 0x24
 8007878:	e7d7      	b.n	800782a <_dtoa_r+0x2c2>
 800787a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	9304      	str	r3, [sp, #16]
 8007880:	e7ba      	b.n	80077f8 <_dtoa_r+0x290>
 8007882:	3101      	adds	r1, #1
 8007884:	0052      	lsls	r2, r2, #1
 8007886:	e7ba      	b.n	80077fe <_dtoa_r+0x296>
 8007888:	69e3      	ldr	r3, [r4, #28]
 800788a:	9a00      	ldr	r2, [sp, #0]
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	9b04      	ldr	r3, [sp, #16]
 8007890:	2b0e      	cmp	r3, #14
 8007892:	f200 80a8 	bhi.w	80079e6 <_dtoa_r+0x47e>
 8007896:	2d00      	cmp	r5, #0
 8007898:	f000 80a5 	beq.w	80079e6 <_dtoa_r+0x47e>
 800789c:	f1bb 0f00 	cmp.w	fp, #0
 80078a0:	dd38      	ble.n	8007914 <_dtoa_r+0x3ac>
 80078a2:	4bc0      	ldr	r3, [pc, #768]	; (8007ba4 <_dtoa_r+0x63c>)
 80078a4:	f00b 020f 	and.w	r2, fp, #15
 80078a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80078b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80078b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80078b8:	d019      	beq.n	80078ee <_dtoa_r+0x386>
 80078ba:	4bbb      	ldr	r3, [pc, #748]	; (8007ba8 <_dtoa_r+0x640>)
 80078bc:	ec51 0b18 	vmov	r0, r1, d8
 80078c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078c4:	f7f8 ffd2 	bl	800086c <__aeabi_ddiv>
 80078c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078cc:	f008 080f 	and.w	r8, r8, #15
 80078d0:	2503      	movs	r5, #3
 80078d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007ba8 <_dtoa_r+0x640>
 80078d6:	f1b8 0f00 	cmp.w	r8, #0
 80078da:	d10a      	bne.n	80078f2 <_dtoa_r+0x38a>
 80078dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078e0:	4632      	mov	r2, r6
 80078e2:	463b      	mov	r3, r7
 80078e4:	f7f8 ffc2 	bl	800086c <__aeabi_ddiv>
 80078e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078ec:	e02b      	b.n	8007946 <_dtoa_r+0x3de>
 80078ee:	2502      	movs	r5, #2
 80078f0:	e7ef      	b.n	80078d2 <_dtoa_r+0x36a>
 80078f2:	f018 0f01 	tst.w	r8, #1
 80078f6:	d008      	beq.n	800790a <_dtoa_r+0x3a2>
 80078f8:	4630      	mov	r0, r6
 80078fa:	4639      	mov	r1, r7
 80078fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007900:	f7f8 fe8a 	bl	8000618 <__aeabi_dmul>
 8007904:	3501      	adds	r5, #1
 8007906:	4606      	mov	r6, r0
 8007908:	460f      	mov	r7, r1
 800790a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800790e:	f109 0908 	add.w	r9, r9, #8
 8007912:	e7e0      	b.n	80078d6 <_dtoa_r+0x36e>
 8007914:	f000 809f 	beq.w	8007a56 <_dtoa_r+0x4ee>
 8007918:	f1cb 0600 	rsb	r6, fp, #0
 800791c:	4ba1      	ldr	r3, [pc, #644]	; (8007ba4 <_dtoa_r+0x63c>)
 800791e:	4fa2      	ldr	r7, [pc, #648]	; (8007ba8 <_dtoa_r+0x640>)
 8007920:	f006 020f 	and.w	r2, r6, #15
 8007924:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	ec51 0b18 	vmov	r0, r1, d8
 8007930:	f7f8 fe72 	bl	8000618 <__aeabi_dmul>
 8007934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007938:	1136      	asrs	r6, r6, #4
 800793a:	2300      	movs	r3, #0
 800793c:	2502      	movs	r5, #2
 800793e:	2e00      	cmp	r6, #0
 8007940:	d17e      	bne.n	8007a40 <_dtoa_r+0x4d8>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1d0      	bne.n	80078e8 <_dtoa_r+0x380>
 8007946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007948:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 8084 	beq.w	8007a5a <_dtoa_r+0x4f2>
 8007952:	4b96      	ldr	r3, [pc, #600]	; (8007bac <_dtoa_r+0x644>)
 8007954:	2200      	movs	r2, #0
 8007956:	4640      	mov	r0, r8
 8007958:	4649      	mov	r1, r9
 800795a:	f7f9 f8cf 	bl	8000afc <__aeabi_dcmplt>
 800795e:	2800      	cmp	r0, #0
 8007960:	d07b      	beq.n	8007a5a <_dtoa_r+0x4f2>
 8007962:	9b04      	ldr	r3, [sp, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d078      	beq.n	8007a5a <_dtoa_r+0x4f2>
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	dd39      	ble.n	80079e2 <_dtoa_r+0x47a>
 800796e:	4b90      	ldr	r3, [pc, #576]	; (8007bb0 <_dtoa_r+0x648>)
 8007970:	2200      	movs	r2, #0
 8007972:	4640      	mov	r0, r8
 8007974:	4649      	mov	r1, r9
 8007976:	f7f8 fe4f 	bl	8000618 <__aeabi_dmul>
 800797a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800797e:	9e01      	ldr	r6, [sp, #4]
 8007980:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007984:	3501      	adds	r5, #1
 8007986:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800798a:	4628      	mov	r0, r5
 800798c:	f7f8 fdda 	bl	8000544 <__aeabi_i2d>
 8007990:	4642      	mov	r2, r8
 8007992:	464b      	mov	r3, r9
 8007994:	f7f8 fe40 	bl	8000618 <__aeabi_dmul>
 8007998:	4b86      	ldr	r3, [pc, #536]	; (8007bb4 <_dtoa_r+0x64c>)
 800799a:	2200      	movs	r2, #0
 800799c:	f7f8 fc86 	bl	80002ac <__adddf3>
 80079a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80079a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079a8:	9303      	str	r3, [sp, #12]
 80079aa:	2e00      	cmp	r6, #0
 80079ac:	d158      	bne.n	8007a60 <_dtoa_r+0x4f8>
 80079ae:	4b82      	ldr	r3, [pc, #520]	; (8007bb8 <_dtoa_r+0x650>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	4640      	mov	r0, r8
 80079b4:	4649      	mov	r1, r9
 80079b6:	f7f8 fc77 	bl	80002a8 <__aeabi_dsub>
 80079ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079be:	4680      	mov	r8, r0
 80079c0:	4689      	mov	r9, r1
 80079c2:	f7f9 f8b9 	bl	8000b38 <__aeabi_dcmpgt>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	f040 8296 	bne.w	8007ef8 <_dtoa_r+0x990>
 80079cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80079d0:	4640      	mov	r0, r8
 80079d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079d6:	4649      	mov	r1, r9
 80079d8:	f7f9 f890 	bl	8000afc <__aeabi_dcmplt>
 80079dc:	2800      	cmp	r0, #0
 80079de:	f040 8289 	bne.w	8007ef4 <_dtoa_r+0x98c>
 80079e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80079e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f2c0 814e 	blt.w	8007c8a <_dtoa_r+0x722>
 80079ee:	f1bb 0f0e 	cmp.w	fp, #14
 80079f2:	f300 814a 	bgt.w	8007c8a <_dtoa_r+0x722>
 80079f6:	4b6b      	ldr	r3, [pc, #428]	; (8007ba4 <_dtoa_r+0x63c>)
 80079f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f280 80dc 	bge.w	8007bc0 <_dtoa_r+0x658>
 8007a08:	9b04      	ldr	r3, [sp, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f300 80d8 	bgt.w	8007bc0 <_dtoa_r+0x658>
 8007a10:	f040 826f 	bne.w	8007ef2 <_dtoa_r+0x98a>
 8007a14:	4b68      	ldr	r3, [pc, #416]	; (8007bb8 <_dtoa_r+0x650>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	4640      	mov	r0, r8
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	f7f8 fdfc 	bl	8000618 <__aeabi_dmul>
 8007a20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a24:	f7f9 f87e 	bl	8000b24 <__aeabi_dcmpge>
 8007a28:	9e04      	ldr	r6, [sp, #16]
 8007a2a:	4637      	mov	r7, r6
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	f040 8245 	bne.w	8007ebc <_dtoa_r+0x954>
 8007a32:	9d00      	ldr	r5, [sp, #0]
 8007a34:	2331      	movs	r3, #49	; 0x31
 8007a36:	f805 3b01 	strb.w	r3, [r5], #1
 8007a3a:	f10b 0b01 	add.w	fp, fp, #1
 8007a3e:	e241      	b.n	8007ec4 <_dtoa_r+0x95c>
 8007a40:	07f2      	lsls	r2, r6, #31
 8007a42:	d505      	bpl.n	8007a50 <_dtoa_r+0x4e8>
 8007a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a48:	f7f8 fde6 	bl	8000618 <__aeabi_dmul>
 8007a4c:	3501      	adds	r5, #1
 8007a4e:	2301      	movs	r3, #1
 8007a50:	1076      	asrs	r6, r6, #1
 8007a52:	3708      	adds	r7, #8
 8007a54:	e773      	b.n	800793e <_dtoa_r+0x3d6>
 8007a56:	2502      	movs	r5, #2
 8007a58:	e775      	b.n	8007946 <_dtoa_r+0x3de>
 8007a5a:	9e04      	ldr	r6, [sp, #16]
 8007a5c:	465f      	mov	r7, fp
 8007a5e:	e792      	b.n	8007986 <_dtoa_r+0x41e>
 8007a60:	9900      	ldr	r1, [sp, #0]
 8007a62:	4b50      	ldr	r3, [pc, #320]	; (8007ba4 <_dtoa_r+0x63c>)
 8007a64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a68:	4431      	add	r1, r6
 8007a6a:	9102      	str	r1, [sp, #8]
 8007a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a6e:	eeb0 9a47 	vmov.f32	s18, s14
 8007a72:	eef0 9a67 	vmov.f32	s19, s15
 8007a76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a7e:	2900      	cmp	r1, #0
 8007a80:	d044      	beq.n	8007b0c <_dtoa_r+0x5a4>
 8007a82:	494e      	ldr	r1, [pc, #312]	; (8007bbc <_dtoa_r+0x654>)
 8007a84:	2000      	movs	r0, #0
 8007a86:	f7f8 fef1 	bl	800086c <__aeabi_ddiv>
 8007a8a:	ec53 2b19 	vmov	r2, r3, d9
 8007a8e:	f7f8 fc0b 	bl	80002a8 <__aeabi_dsub>
 8007a92:	9d00      	ldr	r5, [sp, #0]
 8007a94:	ec41 0b19 	vmov	d9, r0, r1
 8007a98:	4649      	mov	r1, r9
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	f7f9 f86c 	bl	8000b78 <__aeabi_d2iz>
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	f7f8 fd4f 	bl	8000544 <__aeabi_i2d>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4640      	mov	r0, r8
 8007aac:	4649      	mov	r1, r9
 8007aae:	f7f8 fbfb 	bl	80002a8 <__aeabi_dsub>
 8007ab2:	3630      	adds	r6, #48	; 0x30
 8007ab4:	f805 6b01 	strb.w	r6, [r5], #1
 8007ab8:	ec53 2b19 	vmov	r2, r3, d9
 8007abc:	4680      	mov	r8, r0
 8007abe:	4689      	mov	r9, r1
 8007ac0:	f7f9 f81c 	bl	8000afc <__aeabi_dcmplt>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d164      	bne.n	8007b92 <_dtoa_r+0x62a>
 8007ac8:	4642      	mov	r2, r8
 8007aca:	464b      	mov	r3, r9
 8007acc:	4937      	ldr	r1, [pc, #220]	; (8007bac <_dtoa_r+0x644>)
 8007ace:	2000      	movs	r0, #0
 8007ad0:	f7f8 fbea 	bl	80002a8 <__aeabi_dsub>
 8007ad4:	ec53 2b19 	vmov	r2, r3, d9
 8007ad8:	f7f9 f810 	bl	8000afc <__aeabi_dcmplt>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	f040 80b6 	bne.w	8007c4e <_dtoa_r+0x6e6>
 8007ae2:	9b02      	ldr	r3, [sp, #8]
 8007ae4:	429d      	cmp	r5, r3
 8007ae6:	f43f af7c 	beq.w	80079e2 <_dtoa_r+0x47a>
 8007aea:	4b31      	ldr	r3, [pc, #196]	; (8007bb0 <_dtoa_r+0x648>)
 8007aec:	ec51 0b19 	vmov	r0, r1, d9
 8007af0:	2200      	movs	r2, #0
 8007af2:	f7f8 fd91 	bl	8000618 <__aeabi_dmul>
 8007af6:	4b2e      	ldr	r3, [pc, #184]	; (8007bb0 <_dtoa_r+0x648>)
 8007af8:	ec41 0b19 	vmov	d9, r0, r1
 8007afc:	2200      	movs	r2, #0
 8007afe:	4640      	mov	r0, r8
 8007b00:	4649      	mov	r1, r9
 8007b02:	f7f8 fd89 	bl	8000618 <__aeabi_dmul>
 8007b06:	4680      	mov	r8, r0
 8007b08:	4689      	mov	r9, r1
 8007b0a:	e7c5      	b.n	8007a98 <_dtoa_r+0x530>
 8007b0c:	ec51 0b17 	vmov	r0, r1, d7
 8007b10:	f7f8 fd82 	bl	8000618 <__aeabi_dmul>
 8007b14:	9b02      	ldr	r3, [sp, #8]
 8007b16:	9d00      	ldr	r5, [sp, #0]
 8007b18:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b1a:	ec41 0b19 	vmov	d9, r0, r1
 8007b1e:	4649      	mov	r1, r9
 8007b20:	4640      	mov	r0, r8
 8007b22:	f7f9 f829 	bl	8000b78 <__aeabi_d2iz>
 8007b26:	4606      	mov	r6, r0
 8007b28:	f7f8 fd0c 	bl	8000544 <__aeabi_i2d>
 8007b2c:	3630      	adds	r6, #48	; 0x30
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4640      	mov	r0, r8
 8007b34:	4649      	mov	r1, r9
 8007b36:	f7f8 fbb7 	bl	80002a8 <__aeabi_dsub>
 8007b3a:	f805 6b01 	strb.w	r6, [r5], #1
 8007b3e:	9b02      	ldr	r3, [sp, #8]
 8007b40:	429d      	cmp	r5, r3
 8007b42:	4680      	mov	r8, r0
 8007b44:	4689      	mov	r9, r1
 8007b46:	f04f 0200 	mov.w	r2, #0
 8007b4a:	d124      	bne.n	8007b96 <_dtoa_r+0x62e>
 8007b4c:	4b1b      	ldr	r3, [pc, #108]	; (8007bbc <_dtoa_r+0x654>)
 8007b4e:	ec51 0b19 	vmov	r0, r1, d9
 8007b52:	f7f8 fbab 	bl	80002ac <__adddf3>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	f7f8 ffeb 	bl	8000b38 <__aeabi_dcmpgt>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d173      	bne.n	8007c4e <_dtoa_r+0x6e6>
 8007b66:	ec53 2b19 	vmov	r2, r3, d9
 8007b6a:	4914      	ldr	r1, [pc, #80]	; (8007bbc <_dtoa_r+0x654>)
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	f7f8 fb9b 	bl	80002a8 <__aeabi_dsub>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4640      	mov	r0, r8
 8007b78:	4649      	mov	r1, r9
 8007b7a:	f7f8 ffbf 	bl	8000afc <__aeabi_dcmplt>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f43f af2f 	beq.w	80079e2 <_dtoa_r+0x47a>
 8007b84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b86:	1e6b      	subs	r3, r5, #1
 8007b88:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b8e:	2b30      	cmp	r3, #48	; 0x30
 8007b90:	d0f8      	beq.n	8007b84 <_dtoa_r+0x61c>
 8007b92:	46bb      	mov	fp, r7
 8007b94:	e04a      	b.n	8007c2c <_dtoa_r+0x6c4>
 8007b96:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <_dtoa_r+0x648>)
 8007b98:	f7f8 fd3e 	bl	8000618 <__aeabi_dmul>
 8007b9c:	4680      	mov	r8, r0
 8007b9e:	4689      	mov	r9, r1
 8007ba0:	e7bd      	b.n	8007b1e <_dtoa_r+0x5b6>
 8007ba2:	bf00      	nop
 8007ba4:	080099c8 	.word	0x080099c8
 8007ba8:	080099a0 	.word	0x080099a0
 8007bac:	3ff00000 	.word	0x3ff00000
 8007bb0:	40240000 	.word	0x40240000
 8007bb4:	401c0000 	.word	0x401c0000
 8007bb8:	40140000 	.word	0x40140000
 8007bbc:	3fe00000 	.word	0x3fe00000
 8007bc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007bc4:	9d00      	ldr	r5, [sp, #0]
 8007bc6:	4642      	mov	r2, r8
 8007bc8:	464b      	mov	r3, r9
 8007bca:	4630      	mov	r0, r6
 8007bcc:	4639      	mov	r1, r7
 8007bce:	f7f8 fe4d 	bl	800086c <__aeabi_ddiv>
 8007bd2:	f7f8 ffd1 	bl	8000b78 <__aeabi_d2iz>
 8007bd6:	9001      	str	r0, [sp, #4]
 8007bd8:	f7f8 fcb4 	bl	8000544 <__aeabi_i2d>
 8007bdc:	4642      	mov	r2, r8
 8007bde:	464b      	mov	r3, r9
 8007be0:	f7f8 fd1a 	bl	8000618 <__aeabi_dmul>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4630      	mov	r0, r6
 8007bea:	4639      	mov	r1, r7
 8007bec:	f7f8 fb5c 	bl	80002a8 <__aeabi_dsub>
 8007bf0:	9e01      	ldr	r6, [sp, #4]
 8007bf2:	9f04      	ldr	r7, [sp, #16]
 8007bf4:	3630      	adds	r6, #48	; 0x30
 8007bf6:	f805 6b01 	strb.w	r6, [r5], #1
 8007bfa:	9e00      	ldr	r6, [sp, #0]
 8007bfc:	1bae      	subs	r6, r5, r6
 8007bfe:	42b7      	cmp	r7, r6
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	d134      	bne.n	8007c70 <_dtoa_r+0x708>
 8007c06:	f7f8 fb51 	bl	80002ac <__adddf3>
 8007c0a:	4642      	mov	r2, r8
 8007c0c:	464b      	mov	r3, r9
 8007c0e:	4606      	mov	r6, r0
 8007c10:	460f      	mov	r7, r1
 8007c12:	f7f8 ff91 	bl	8000b38 <__aeabi_dcmpgt>
 8007c16:	b9c8      	cbnz	r0, 8007c4c <_dtoa_r+0x6e4>
 8007c18:	4642      	mov	r2, r8
 8007c1a:	464b      	mov	r3, r9
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 ff62 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c24:	b110      	cbz	r0, 8007c2c <_dtoa_r+0x6c4>
 8007c26:	9b01      	ldr	r3, [sp, #4]
 8007c28:	07db      	lsls	r3, r3, #31
 8007c2a:	d40f      	bmi.n	8007c4c <_dtoa_r+0x6e4>
 8007c2c:	4651      	mov	r1, sl
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 fbcc 	bl	80083cc <_Bfree>
 8007c34:	2300      	movs	r3, #0
 8007c36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c38:	702b      	strb	r3, [r5, #0]
 8007c3a:	f10b 0301 	add.w	r3, fp, #1
 8007c3e:	6013      	str	r3, [r2, #0]
 8007c40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f43f ace2 	beq.w	800760c <_dtoa_r+0xa4>
 8007c48:	601d      	str	r5, [r3, #0]
 8007c4a:	e4df      	b.n	800760c <_dtoa_r+0xa4>
 8007c4c:	465f      	mov	r7, fp
 8007c4e:	462b      	mov	r3, r5
 8007c50:	461d      	mov	r5, r3
 8007c52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c56:	2a39      	cmp	r2, #57	; 0x39
 8007c58:	d106      	bne.n	8007c68 <_dtoa_r+0x700>
 8007c5a:	9a00      	ldr	r2, [sp, #0]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d1f7      	bne.n	8007c50 <_dtoa_r+0x6e8>
 8007c60:	9900      	ldr	r1, [sp, #0]
 8007c62:	2230      	movs	r2, #48	; 0x30
 8007c64:	3701      	adds	r7, #1
 8007c66:	700a      	strb	r2, [r1, #0]
 8007c68:	781a      	ldrb	r2, [r3, #0]
 8007c6a:	3201      	adds	r2, #1
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	e790      	b.n	8007b92 <_dtoa_r+0x62a>
 8007c70:	4ba3      	ldr	r3, [pc, #652]	; (8007f00 <_dtoa_r+0x998>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	f7f8 fcd0 	bl	8000618 <__aeabi_dmul>
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	460f      	mov	r7, r1
 8007c80:	f7f8 ff32 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d09e      	beq.n	8007bc6 <_dtoa_r+0x65e>
 8007c88:	e7d0      	b.n	8007c2c <_dtoa_r+0x6c4>
 8007c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c8c:	2a00      	cmp	r2, #0
 8007c8e:	f000 80ca 	beq.w	8007e26 <_dtoa_r+0x8be>
 8007c92:	9a07      	ldr	r2, [sp, #28]
 8007c94:	2a01      	cmp	r2, #1
 8007c96:	f300 80ad 	bgt.w	8007df4 <_dtoa_r+0x88c>
 8007c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c9c:	2a00      	cmp	r2, #0
 8007c9e:	f000 80a5 	beq.w	8007dec <_dtoa_r+0x884>
 8007ca2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ca6:	9e08      	ldr	r6, [sp, #32]
 8007ca8:	9d05      	ldr	r5, [sp, #20]
 8007caa:	9a05      	ldr	r2, [sp, #20]
 8007cac:	441a      	add	r2, r3
 8007cae:	9205      	str	r2, [sp, #20]
 8007cb0:	9a06      	ldr	r2, [sp, #24]
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	441a      	add	r2, r3
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	9206      	str	r2, [sp, #24]
 8007cba:	f000 fc3d 	bl	8008538 <__i2b>
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	b165      	cbz	r5, 8007cdc <_dtoa_r+0x774>
 8007cc2:	9b06      	ldr	r3, [sp, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	dd09      	ble.n	8007cdc <_dtoa_r+0x774>
 8007cc8:	42ab      	cmp	r3, r5
 8007cca:	9a05      	ldr	r2, [sp, #20]
 8007ccc:	bfa8      	it	ge
 8007cce:	462b      	movge	r3, r5
 8007cd0:	1ad2      	subs	r2, r2, r3
 8007cd2:	9205      	str	r2, [sp, #20]
 8007cd4:	9a06      	ldr	r2, [sp, #24]
 8007cd6:	1aed      	subs	r5, r5, r3
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	9306      	str	r3, [sp, #24]
 8007cdc:	9b08      	ldr	r3, [sp, #32]
 8007cde:	b1f3      	cbz	r3, 8007d1e <_dtoa_r+0x7b6>
 8007ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 80a3 	beq.w	8007e2e <_dtoa_r+0x8c6>
 8007ce8:	2e00      	cmp	r6, #0
 8007cea:	dd10      	ble.n	8007d0e <_dtoa_r+0x7a6>
 8007cec:	4639      	mov	r1, r7
 8007cee:	4632      	mov	r2, r6
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f000 fce1 	bl	80086b8 <__pow5mult>
 8007cf6:	4652      	mov	r2, sl
 8007cf8:	4601      	mov	r1, r0
 8007cfa:	4607      	mov	r7, r0
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f000 fc31 	bl	8008564 <__multiply>
 8007d02:	4651      	mov	r1, sl
 8007d04:	4680      	mov	r8, r0
 8007d06:	4620      	mov	r0, r4
 8007d08:	f000 fb60 	bl	80083cc <_Bfree>
 8007d0c:	46c2      	mov	sl, r8
 8007d0e:	9b08      	ldr	r3, [sp, #32]
 8007d10:	1b9a      	subs	r2, r3, r6
 8007d12:	d004      	beq.n	8007d1e <_dtoa_r+0x7b6>
 8007d14:	4651      	mov	r1, sl
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 fcce 	bl	80086b8 <__pow5mult>
 8007d1c:	4682      	mov	sl, r0
 8007d1e:	2101      	movs	r1, #1
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 fc09 	bl	8008538 <__i2b>
 8007d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	f340 8081 	ble.w	8007e32 <_dtoa_r+0x8ca>
 8007d30:	461a      	mov	r2, r3
 8007d32:	4601      	mov	r1, r0
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 fcbf 	bl	80086b8 <__pow5mult>
 8007d3a:	9b07      	ldr	r3, [sp, #28]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	4606      	mov	r6, r0
 8007d40:	dd7a      	ble.n	8007e38 <_dtoa_r+0x8d0>
 8007d42:	f04f 0800 	mov.w	r8, #0
 8007d46:	6933      	ldr	r3, [r6, #16]
 8007d48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d4c:	6918      	ldr	r0, [r3, #16]
 8007d4e:	f000 fba5 	bl	800849c <__hi0bits>
 8007d52:	f1c0 0020 	rsb	r0, r0, #32
 8007d56:	9b06      	ldr	r3, [sp, #24]
 8007d58:	4418      	add	r0, r3
 8007d5a:	f010 001f 	ands.w	r0, r0, #31
 8007d5e:	f000 8094 	beq.w	8007e8a <_dtoa_r+0x922>
 8007d62:	f1c0 0320 	rsb	r3, r0, #32
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	f340 8085 	ble.w	8007e76 <_dtoa_r+0x90e>
 8007d6c:	9b05      	ldr	r3, [sp, #20]
 8007d6e:	f1c0 001c 	rsb	r0, r0, #28
 8007d72:	4403      	add	r3, r0
 8007d74:	9305      	str	r3, [sp, #20]
 8007d76:	9b06      	ldr	r3, [sp, #24]
 8007d78:	4403      	add	r3, r0
 8007d7a:	4405      	add	r5, r0
 8007d7c:	9306      	str	r3, [sp, #24]
 8007d7e:	9b05      	ldr	r3, [sp, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	dd05      	ble.n	8007d90 <_dtoa_r+0x828>
 8007d84:	4651      	mov	r1, sl
 8007d86:	461a      	mov	r2, r3
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 fcef 	bl	800876c <__lshift>
 8007d8e:	4682      	mov	sl, r0
 8007d90:	9b06      	ldr	r3, [sp, #24]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	dd05      	ble.n	8007da2 <_dtoa_r+0x83a>
 8007d96:	4631      	mov	r1, r6
 8007d98:	461a      	mov	r2, r3
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f000 fce6 	bl	800876c <__lshift>
 8007da0:	4606      	mov	r6, r0
 8007da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d072      	beq.n	8007e8e <_dtoa_r+0x926>
 8007da8:	4631      	mov	r1, r6
 8007daa:	4650      	mov	r0, sl
 8007dac:	f000 fd4a 	bl	8008844 <__mcmp>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	da6c      	bge.n	8007e8e <_dtoa_r+0x926>
 8007db4:	2300      	movs	r3, #0
 8007db6:	4651      	mov	r1, sl
 8007db8:	220a      	movs	r2, #10
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f000 fb28 	bl	8008410 <__multadd>
 8007dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007dc6:	4682      	mov	sl, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 81b0 	beq.w	800812e <_dtoa_r+0xbc6>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	220a      	movs	r2, #10
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 fb1b 	bl	8008410 <__multadd>
 8007dda:	9b01      	ldr	r3, [sp, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	4607      	mov	r7, r0
 8007de0:	f300 8096 	bgt.w	8007f10 <_dtoa_r+0x9a8>
 8007de4:	9b07      	ldr	r3, [sp, #28]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	dc59      	bgt.n	8007e9e <_dtoa_r+0x936>
 8007dea:	e091      	b.n	8007f10 <_dtoa_r+0x9a8>
 8007dec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007df2:	e758      	b.n	8007ca6 <_dtoa_r+0x73e>
 8007df4:	9b04      	ldr	r3, [sp, #16]
 8007df6:	1e5e      	subs	r6, r3, #1
 8007df8:	9b08      	ldr	r3, [sp, #32]
 8007dfa:	42b3      	cmp	r3, r6
 8007dfc:	bfbf      	itttt	lt
 8007dfe:	9b08      	ldrlt	r3, [sp, #32]
 8007e00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007e02:	9608      	strlt	r6, [sp, #32]
 8007e04:	1af3      	sublt	r3, r6, r3
 8007e06:	bfb4      	ite	lt
 8007e08:	18d2      	addlt	r2, r2, r3
 8007e0a:	1b9e      	subge	r6, r3, r6
 8007e0c:	9b04      	ldr	r3, [sp, #16]
 8007e0e:	bfbc      	itt	lt
 8007e10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007e12:	2600      	movlt	r6, #0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bfb7      	itett	lt
 8007e18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007e1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007e20:	1a9d      	sublt	r5, r3, r2
 8007e22:	2300      	movlt	r3, #0
 8007e24:	e741      	b.n	8007caa <_dtoa_r+0x742>
 8007e26:	9e08      	ldr	r6, [sp, #32]
 8007e28:	9d05      	ldr	r5, [sp, #20]
 8007e2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007e2c:	e748      	b.n	8007cc0 <_dtoa_r+0x758>
 8007e2e:	9a08      	ldr	r2, [sp, #32]
 8007e30:	e770      	b.n	8007d14 <_dtoa_r+0x7ac>
 8007e32:	9b07      	ldr	r3, [sp, #28]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	dc19      	bgt.n	8007e6c <_dtoa_r+0x904>
 8007e38:	9b02      	ldr	r3, [sp, #8]
 8007e3a:	b9bb      	cbnz	r3, 8007e6c <_dtoa_r+0x904>
 8007e3c:	9b03      	ldr	r3, [sp, #12]
 8007e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e42:	b99b      	cbnz	r3, 8007e6c <_dtoa_r+0x904>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e4a:	0d1b      	lsrs	r3, r3, #20
 8007e4c:	051b      	lsls	r3, r3, #20
 8007e4e:	b183      	cbz	r3, 8007e72 <_dtoa_r+0x90a>
 8007e50:	9b05      	ldr	r3, [sp, #20]
 8007e52:	3301      	adds	r3, #1
 8007e54:	9305      	str	r3, [sp, #20]
 8007e56:	9b06      	ldr	r3, [sp, #24]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	9306      	str	r3, [sp, #24]
 8007e5c:	f04f 0801 	mov.w	r8, #1
 8007e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f47f af6f 	bne.w	8007d46 <_dtoa_r+0x7de>
 8007e68:	2001      	movs	r0, #1
 8007e6a:	e774      	b.n	8007d56 <_dtoa_r+0x7ee>
 8007e6c:	f04f 0800 	mov.w	r8, #0
 8007e70:	e7f6      	b.n	8007e60 <_dtoa_r+0x8f8>
 8007e72:	4698      	mov	r8, r3
 8007e74:	e7f4      	b.n	8007e60 <_dtoa_r+0x8f8>
 8007e76:	d082      	beq.n	8007d7e <_dtoa_r+0x816>
 8007e78:	9a05      	ldr	r2, [sp, #20]
 8007e7a:	331c      	adds	r3, #28
 8007e7c:	441a      	add	r2, r3
 8007e7e:	9205      	str	r2, [sp, #20]
 8007e80:	9a06      	ldr	r2, [sp, #24]
 8007e82:	441a      	add	r2, r3
 8007e84:	441d      	add	r5, r3
 8007e86:	9206      	str	r2, [sp, #24]
 8007e88:	e779      	b.n	8007d7e <_dtoa_r+0x816>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	e7f4      	b.n	8007e78 <_dtoa_r+0x910>
 8007e8e:	9b04      	ldr	r3, [sp, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	dc37      	bgt.n	8007f04 <_dtoa_r+0x99c>
 8007e94:	9b07      	ldr	r3, [sp, #28]
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	dd34      	ble.n	8007f04 <_dtoa_r+0x99c>
 8007e9a:	9b04      	ldr	r3, [sp, #16]
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	9b01      	ldr	r3, [sp, #4]
 8007ea0:	b963      	cbnz	r3, 8007ebc <_dtoa_r+0x954>
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	2205      	movs	r2, #5
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f000 fab2 	bl	8008410 <__multadd>
 8007eac:	4601      	mov	r1, r0
 8007eae:	4606      	mov	r6, r0
 8007eb0:	4650      	mov	r0, sl
 8007eb2:	f000 fcc7 	bl	8008844 <__mcmp>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f73f adbb 	bgt.w	8007a32 <_dtoa_r+0x4ca>
 8007ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ebe:	9d00      	ldr	r5, [sp, #0]
 8007ec0:	ea6f 0b03 	mvn.w	fp, r3
 8007ec4:	f04f 0800 	mov.w	r8, #0
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 fa7e 	bl	80083cc <_Bfree>
 8007ed0:	2f00      	cmp	r7, #0
 8007ed2:	f43f aeab 	beq.w	8007c2c <_dtoa_r+0x6c4>
 8007ed6:	f1b8 0f00 	cmp.w	r8, #0
 8007eda:	d005      	beq.n	8007ee8 <_dtoa_r+0x980>
 8007edc:	45b8      	cmp	r8, r7
 8007ede:	d003      	beq.n	8007ee8 <_dtoa_r+0x980>
 8007ee0:	4641      	mov	r1, r8
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f000 fa72 	bl	80083cc <_Bfree>
 8007ee8:	4639      	mov	r1, r7
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 fa6e 	bl	80083cc <_Bfree>
 8007ef0:	e69c      	b.n	8007c2c <_dtoa_r+0x6c4>
 8007ef2:	2600      	movs	r6, #0
 8007ef4:	4637      	mov	r7, r6
 8007ef6:	e7e1      	b.n	8007ebc <_dtoa_r+0x954>
 8007ef8:	46bb      	mov	fp, r7
 8007efa:	4637      	mov	r7, r6
 8007efc:	e599      	b.n	8007a32 <_dtoa_r+0x4ca>
 8007efe:	bf00      	nop
 8007f00:	40240000 	.word	0x40240000
 8007f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 80c8 	beq.w	800809c <_dtoa_r+0xb34>
 8007f0c:	9b04      	ldr	r3, [sp, #16]
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	2d00      	cmp	r5, #0
 8007f12:	dd05      	ble.n	8007f20 <_dtoa_r+0x9b8>
 8007f14:	4639      	mov	r1, r7
 8007f16:	462a      	mov	r2, r5
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 fc27 	bl	800876c <__lshift>
 8007f1e:	4607      	mov	r7, r0
 8007f20:	f1b8 0f00 	cmp.w	r8, #0
 8007f24:	d05b      	beq.n	8007fde <_dtoa_r+0xa76>
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fa0f 	bl	800834c <_Balloc>
 8007f2e:	4605      	mov	r5, r0
 8007f30:	b928      	cbnz	r0, 8007f3e <_dtoa_r+0x9d6>
 8007f32:	4b83      	ldr	r3, [pc, #524]	; (8008140 <_dtoa_r+0xbd8>)
 8007f34:	4602      	mov	r2, r0
 8007f36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007f3a:	f7ff bb2e 	b.w	800759a <_dtoa_r+0x32>
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	3202      	adds	r2, #2
 8007f42:	0092      	lsls	r2, r2, #2
 8007f44:	f107 010c 	add.w	r1, r7, #12
 8007f48:	300c      	adds	r0, #12
 8007f4a:	f7ff fa74 	bl	8007436 <memcpy>
 8007f4e:	2201      	movs	r2, #1
 8007f50:	4629      	mov	r1, r5
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 fc0a 	bl	800876c <__lshift>
 8007f58:	9b00      	ldr	r3, [sp, #0]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f62:	4413      	add	r3, r2
 8007f64:	9308      	str	r3, [sp, #32]
 8007f66:	9b02      	ldr	r3, [sp, #8]
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	46b8      	mov	r8, r7
 8007f6e:	9306      	str	r3, [sp, #24]
 8007f70:	4607      	mov	r7, r0
 8007f72:	9b04      	ldr	r3, [sp, #16]
 8007f74:	4631      	mov	r1, r6
 8007f76:	3b01      	subs	r3, #1
 8007f78:	4650      	mov	r0, sl
 8007f7a:	9301      	str	r3, [sp, #4]
 8007f7c:	f7ff fa69 	bl	8007452 <quorem>
 8007f80:	4641      	mov	r1, r8
 8007f82:	9002      	str	r0, [sp, #8]
 8007f84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f88:	4650      	mov	r0, sl
 8007f8a:	f000 fc5b 	bl	8008844 <__mcmp>
 8007f8e:	463a      	mov	r2, r7
 8007f90:	9005      	str	r0, [sp, #20]
 8007f92:	4631      	mov	r1, r6
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 fc71 	bl	800887c <__mdiff>
 8007f9a:	68c2      	ldr	r2, [r0, #12]
 8007f9c:	4605      	mov	r5, r0
 8007f9e:	bb02      	cbnz	r2, 8007fe2 <_dtoa_r+0xa7a>
 8007fa0:	4601      	mov	r1, r0
 8007fa2:	4650      	mov	r0, sl
 8007fa4:	f000 fc4e 	bl	8008844 <__mcmp>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	4629      	mov	r1, r5
 8007fac:	4620      	mov	r0, r4
 8007fae:	9209      	str	r2, [sp, #36]	; 0x24
 8007fb0:	f000 fa0c 	bl	80083cc <_Bfree>
 8007fb4:	9b07      	ldr	r3, [sp, #28]
 8007fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fb8:	9d04      	ldr	r5, [sp, #16]
 8007fba:	ea43 0102 	orr.w	r1, r3, r2
 8007fbe:	9b06      	ldr	r3, [sp, #24]
 8007fc0:	4319      	orrs	r1, r3
 8007fc2:	d110      	bne.n	8007fe6 <_dtoa_r+0xa7e>
 8007fc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007fc8:	d029      	beq.n	800801e <_dtoa_r+0xab6>
 8007fca:	9b05      	ldr	r3, [sp, #20]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	dd02      	ble.n	8007fd6 <_dtoa_r+0xa6e>
 8007fd0:	9b02      	ldr	r3, [sp, #8]
 8007fd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007fd6:	9b01      	ldr	r3, [sp, #4]
 8007fd8:	f883 9000 	strb.w	r9, [r3]
 8007fdc:	e774      	b.n	8007ec8 <_dtoa_r+0x960>
 8007fde:	4638      	mov	r0, r7
 8007fe0:	e7ba      	b.n	8007f58 <_dtoa_r+0x9f0>
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	e7e1      	b.n	8007faa <_dtoa_r+0xa42>
 8007fe6:	9b05      	ldr	r3, [sp, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	db04      	blt.n	8007ff6 <_dtoa_r+0xa8e>
 8007fec:	9907      	ldr	r1, [sp, #28]
 8007fee:	430b      	orrs	r3, r1
 8007ff0:	9906      	ldr	r1, [sp, #24]
 8007ff2:	430b      	orrs	r3, r1
 8007ff4:	d120      	bne.n	8008038 <_dtoa_r+0xad0>
 8007ff6:	2a00      	cmp	r2, #0
 8007ff8:	dded      	ble.n	8007fd6 <_dtoa_r+0xa6e>
 8007ffa:	4651      	mov	r1, sl
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 fbb4 	bl	800876c <__lshift>
 8008004:	4631      	mov	r1, r6
 8008006:	4682      	mov	sl, r0
 8008008:	f000 fc1c 	bl	8008844 <__mcmp>
 800800c:	2800      	cmp	r0, #0
 800800e:	dc03      	bgt.n	8008018 <_dtoa_r+0xab0>
 8008010:	d1e1      	bne.n	8007fd6 <_dtoa_r+0xa6e>
 8008012:	f019 0f01 	tst.w	r9, #1
 8008016:	d0de      	beq.n	8007fd6 <_dtoa_r+0xa6e>
 8008018:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800801c:	d1d8      	bne.n	8007fd0 <_dtoa_r+0xa68>
 800801e:	9a01      	ldr	r2, [sp, #4]
 8008020:	2339      	movs	r3, #57	; 0x39
 8008022:	7013      	strb	r3, [r2, #0]
 8008024:	462b      	mov	r3, r5
 8008026:	461d      	mov	r5, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800802e:	2a39      	cmp	r2, #57	; 0x39
 8008030:	d06c      	beq.n	800810c <_dtoa_r+0xba4>
 8008032:	3201      	adds	r2, #1
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	e747      	b.n	8007ec8 <_dtoa_r+0x960>
 8008038:	2a00      	cmp	r2, #0
 800803a:	dd07      	ble.n	800804c <_dtoa_r+0xae4>
 800803c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008040:	d0ed      	beq.n	800801e <_dtoa_r+0xab6>
 8008042:	9a01      	ldr	r2, [sp, #4]
 8008044:	f109 0301 	add.w	r3, r9, #1
 8008048:	7013      	strb	r3, [r2, #0]
 800804a:	e73d      	b.n	8007ec8 <_dtoa_r+0x960>
 800804c:	9b04      	ldr	r3, [sp, #16]
 800804e:	9a08      	ldr	r2, [sp, #32]
 8008050:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008054:	4293      	cmp	r3, r2
 8008056:	d043      	beq.n	80080e0 <_dtoa_r+0xb78>
 8008058:	4651      	mov	r1, sl
 800805a:	2300      	movs	r3, #0
 800805c:	220a      	movs	r2, #10
 800805e:	4620      	mov	r0, r4
 8008060:	f000 f9d6 	bl	8008410 <__multadd>
 8008064:	45b8      	cmp	r8, r7
 8008066:	4682      	mov	sl, r0
 8008068:	f04f 0300 	mov.w	r3, #0
 800806c:	f04f 020a 	mov.w	r2, #10
 8008070:	4641      	mov	r1, r8
 8008072:	4620      	mov	r0, r4
 8008074:	d107      	bne.n	8008086 <_dtoa_r+0xb1e>
 8008076:	f000 f9cb 	bl	8008410 <__multadd>
 800807a:	4680      	mov	r8, r0
 800807c:	4607      	mov	r7, r0
 800807e:	9b04      	ldr	r3, [sp, #16]
 8008080:	3301      	adds	r3, #1
 8008082:	9304      	str	r3, [sp, #16]
 8008084:	e775      	b.n	8007f72 <_dtoa_r+0xa0a>
 8008086:	f000 f9c3 	bl	8008410 <__multadd>
 800808a:	4639      	mov	r1, r7
 800808c:	4680      	mov	r8, r0
 800808e:	2300      	movs	r3, #0
 8008090:	220a      	movs	r2, #10
 8008092:	4620      	mov	r0, r4
 8008094:	f000 f9bc 	bl	8008410 <__multadd>
 8008098:	4607      	mov	r7, r0
 800809a:	e7f0      	b.n	800807e <_dtoa_r+0xb16>
 800809c:	9b04      	ldr	r3, [sp, #16]
 800809e:	9301      	str	r3, [sp, #4]
 80080a0:	9d00      	ldr	r5, [sp, #0]
 80080a2:	4631      	mov	r1, r6
 80080a4:	4650      	mov	r0, sl
 80080a6:	f7ff f9d4 	bl	8007452 <quorem>
 80080aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80080ae:	9b00      	ldr	r3, [sp, #0]
 80080b0:	f805 9b01 	strb.w	r9, [r5], #1
 80080b4:	1aea      	subs	r2, r5, r3
 80080b6:	9b01      	ldr	r3, [sp, #4]
 80080b8:	4293      	cmp	r3, r2
 80080ba:	dd07      	ble.n	80080cc <_dtoa_r+0xb64>
 80080bc:	4651      	mov	r1, sl
 80080be:	2300      	movs	r3, #0
 80080c0:	220a      	movs	r2, #10
 80080c2:	4620      	mov	r0, r4
 80080c4:	f000 f9a4 	bl	8008410 <__multadd>
 80080c8:	4682      	mov	sl, r0
 80080ca:	e7ea      	b.n	80080a2 <_dtoa_r+0xb3a>
 80080cc:	9b01      	ldr	r3, [sp, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	bfc8      	it	gt
 80080d2:	461d      	movgt	r5, r3
 80080d4:	9b00      	ldr	r3, [sp, #0]
 80080d6:	bfd8      	it	le
 80080d8:	2501      	movle	r5, #1
 80080da:	441d      	add	r5, r3
 80080dc:	f04f 0800 	mov.w	r8, #0
 80080e0:	4651      	mov	r1, sl
 80080e2:	2201      	movs	r2, #1
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 fb41 	bl	800876c <__lshift>
 80080ea:	4631      	mov	r1, r6
 80080ec:	4682      	mov	sl, r0
 80080ee:	f000 fba9 	bl	8008844 <__mcmp>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	dc96      	bgt.n	8008024 <_dtoa_r+0xabc>
 80080f6:	d102      	bne.n	80080fe <_dtoa_r+0xb96>
 80080f8:	f019 0f01 	tst.w	r9, #1
 80080fc:	d192      	bne.n	8008024 <_dtoa_r+0xabc>
 80080fe:	462b      	mov	r3, r5
 8008100:	461d      	mov	r5, r3
 8008102:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008106:	2a30      	cmp	r2, #48	; 0x30
 8008108:	d0fa      	beq.n	8008100 <_dtoa_r+0xb98>
 800810a:	e6dd      	b.n	8007ec8 <_dtoa_r+0x960>
 800810c:	9a00      	ldr	r2, [sp, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d189      	bne.n	8008026 <_dtoa_r+0xabe>
 8008112:	f10b 0b01 	add.w	fp, fp, #1
 8008116:	2331      	movs	r3, #49	; 0x31
 8008118:	e796      	b.n	8008048 <_dtoa_r+0xae0>
 800811a:	4b0a      	ldr	r3, [pc, #40]	; (8008144 <_dtoa_r+0xbdc>)
 800811c:	f7ff ba99 	b.w	8007652 <_dtoa_r+0xea>
 8008120:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008122:	2b00      	cmp	r3, #0
 8008124:	f47f aa6d 	bne.w	8007602 <_dtoa_r+0x9a>
 8008128:	4b07      	ldr	r3, [pc, #28]	; (8008148 <_dtoa_r+0xbe0>)
 800812a:	f7ff ba92 	b.w	8007652 <_dtoa_r+0xea>
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	dcb5      	bgt.n	80080a0 <_dtoa_r+0xb38>
 8008134:	9b07      	ldr	r3, [sp, #28]
 8008136:	2b02      	cmp	r3, #2
 8008138:	f73f aeb1 	bgt.w	8007e9e <_dtoa_r+0x936>
 800813c:	e7b0      	b.n	80080a0 <_dtoa_r+0xb38>
 800813e:	bf00      	nop
 8008140:	08009931 	.word	0x08009931
 8008144:	08009891 	.word	0x08009891
 8008148:	080098b5 	.word	0x080098b5

0800814c <_free_r>:
 800814c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800814e:	2900      	cmp	r1, #0
 8008150:	d044      	beq.n	80081dc <_free_r+0x90>
 8008152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008156:	9001      	str	r0, [sp, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f1a1 0404 	sub.w	r4, r1, #4
 800815e:	bfb8      	it	lt
 8008160:	18e4      	addlt	r4, r4, r3
 8008162:	f000 f8e7 	bl	8008334 <__malloc_lock>
 8008166:	4a1e      	ldr	r2, [pc, #120]	; (80081e0 <_free_r+0x94>)
 8008168:	9801      	ldr	r0, [sp, #4]
 800816a:	6813      	ldr	r3, [r2, #0]
 800816c:	b933      	cbnz	r3, 800817c <_free_r+0x30>
 800816e:	6063      	str	r3, [r4, #4]
 8008170:	6014      	str	r4, [r2, #0]
 8008172:	b003      	add	sp, #12
 8008174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008178:	f000 b8e2 	b.w	8008340 <__malloc_unlock>
 800817c:	42a3      	cmp	r3, r4
 800817e:	d908      	bls.n	8008192 <_free_r+0x46>
 8008180:	6825      	ldr	r5, [r4, #0]
 8008182:	1961      	adds	r1, r4, r5
 8008184:	428b      	cmp	r3, r1
 8008186:	bf01      	itttt	eq
 8008188:	6819      	ldreq	r1, [r3, #0]
 800818a:	685b      	ldreq	r3, [r3, #4]
 800818c:	1949      	addeq	r1, r1, r5
 800818e:	6021      	streq	r1, [r4, #0]
 8008190:	e7ed      	b.n	800816e <_free_r+0x22>
 8008192:	461a      	mov	r2, r3
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	b10b      	cbz	r3, 800819c <_free_r+0x50>
 8008198:	42a3      	cmp	r3, r4
 800819a:	d9fa      	bls.n	8008192 <_free_r+0x46>
 800819c:	6811      	ldr	r1, [r2, #0]
 800819e:	1855      	adds	r5, r2, r1
 80081a0:	42a5      	cmp	r5, r4
 80081a2:	d10b      	bne.n	80081bc <_free_r+0x70>
 80081a4:	6824      	ldr	r4, [r4, #0]
 80081a6:	4421      	add	r1, r4
 80081a8:	1854      	adds	r4, r2, r1
 80081aa:	42a3      	cmp	r3, r4
 80081ac:	6011      	str	r1, [r2, #0]
 80081ae:	d1e0      	bne.n	8008172 <_free_r+0x26>
 80081b0:	681c      	ldr	r4, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	6053      	str	r3, [r2, #4]
 80081b6:	440c      	add	r4, r1
 80081b8:	6014      	str	r4, [r2, #0]
 80081ba:	e7da      	b.n	8008172 <_free_r+0x26>
 80081bc:	d902      	bls.n	80081c4 <_free_r+0x78>
 80081be:	230c      	movs	r3, #12
 80081c0:	6003      	str	r3, [r0, #0]
 80081c2:	e7d6      	b.n	8008172 <_free_r+0x26>
 80081c4:	6825      	ldr	r5, [r4, #0]
 80081c6:	1961      	adds	r1, r4, r5
 80081c8:	428b      	cmp	r3, r1
 80081ca:	bf04      	itt	eq
 80081cc:	6819      	ldreq	r1, [r3, #0]
 80081ce:	685b      	ldreq	r3, [r3, #4]
 80081d0:	6063      	str	r3, [r4, #4]
 80081d2:	bf04      	itt	eq
 80081d4:	1949      	addeq	r1, r1, r5
 80081d6:	6021      	streq	r1, [r4, #0]
 80081d8:	6054      	str	r4, [r2, #4]
 80081da:	e7ca      	b.n	8008172 <_free_r+0x26>
 80081dc:	b003      	add	sp, #12
 80081de:	bd30      	pop	{r4, r5, pc}
 80081e0:	20004a70 	.word	0x20004a70

080081e4 <malloc>:
 80081e4:	4b02      	ldr	r3, [pc, #8]	; (80081f0 <malloc+0xc>)
 80081e6:	4601      	mov	r1, r0
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	f000 b823 	b.w	8008234 <_malloc_r>
 80081ee:	bf00      	nop
 80081f0:	20000120 	.word	0x20000120

080081f4 <sbrk_aligned>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	4e0e      	ldr	r6, [pc, #56]	; (8008230 <sbrk_aligned+0x3c>)
 80081f8:	460c      	mov	r4, r1
 80081fa:	6831      	ldr	r1, [r6, #0]
 80081fc:	4605      	mov	r5, r0
 80081fe:	b911      	cbnz	r1, 8008206 <sbrk_aligned+0x12>
 8008200:	f000 fde8 	bl	8008dd4 <_sbrk_r>
 8008204:	6030      	str	r0, [r6, #0]
 8008206:	4621      	mov	r1, r4
 8008208:	4628      	mov	r0, r5
 800820a:	f000 fde3 	bl	8008dd4 <_sbrk_r>
 800820e:	1c43      	adds	r3, r0, #1
 8008210:	d00a      	beq.n	8008228 <sbrk_aligned+0x34>
 8008212:	1cc4      	adds	r4, r0, #3
 8008214:	f024 0403 	bic.w	r4, r4, #3
 8008218:	42a0      	cmp	r0, r4
 800821a:	d007      	beq.n	800822c <sbrk_aligned+0x38>
 800821c:	1a21      	subs	r1, r4, r0
 800821e:	4628      	mov	r0, r5
 8008220:	f000 fdd8 	bl	8008dd4 <_sbrk_r>
 8008224:	3001      	adds	r0, #1
 8008226:	d101      	bne.n	800822c <sbrk_aligned+0x38>
 8008228:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800822c:	4620      	mov	r0, r4
 800822e:	bd70      	pop	{r4, r5, r6, pc}
 8008230:	20004a74 	.word	0x20004a74

08008234 <_malloc_r>:
 8008234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008238:	1ccd      	adds	r5, r1, #3
 800823a:	f025 0503 	bic.w	r5, r5, #3
 800823e:	3508      	adds	r5, #8
 8008240:	2d0c      	cmp	r5, #12
 8008242:	bf38      	it	cc
 8008244:	250c      	movcc	r5, #12
 8008246:	2d00      	cmp	r5, #0
 8008248:	4607      	mov	r7, r0
 800824a:	db01      	blt.n	8008250 <_malloc_r+0x1c>
 800824c:	42a9      	cmp	r1, r5
 800824e:	d905      	bls.n	800825c <_malloc_r+0x28>
 8008250:	230c      	movs	r3, #12
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	2600      	movs	r6, #0
 8008256:	4630      	mov	r0, r6
 8008258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800825c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008330 <_malloc_r+0xfc>
 8008260:	f000 f868 	bl	8008334 <__malloc_lock>
 8008264:	f8d8 3000 	ldr.w	r3, [r8]
 8008268:	461c      	mov	r4, r3
 800826a:	bb5c      	cbnz	r4, 80082c4 <_malloc_r+0x90>
 800826c:	4629      	mov	r1, r5
 800826e:	4638      	mov	r0, r7
 8008270:	f7ff ffc0 	bl	80081f4 <sbrk_aligned>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	4604      	mov	r4, r0
 8008278:	d155      	bne.n	8008326 <_malloc_r+0xf2>
 800827a:	f8d8 4000 	ldr.w	r4, [r8]
 800827e:	4626      	mov	r6, r4
 8008280:	2e00      	cmp	r6, #0
 8008282:	d145      	bne.n	8008310 <_malloc_r+0xdc>
 8008284:	2c00      	cmp	r4, #0
 8008286:	d048      	beq.n	800831a <_malloc_r+0xe6>
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	4631      	mov	r1, r6
 800828c:	4638      	mov	r0, r7
 800828e:	eb04 0903 	add.w	r9, r4, r3
 8008292:	f000 fd9f 	bl	8008dd4 <_sbrk_r>
 8008296:	4581      	cmp	r9, r0
 8008298:	d13f      	bne.n	800831a <_malloc_r+0xe6>
 800829a:	6821      	ldr	r1, [r4, #0]
 800829c:	1a6d      	subs	r5, r5, r1
 800829e:	4629      	mov	r1, r5
 80082a0:	4638      	mov	r0, r7
 80082a2:	f7ff ffa7 	bl	80081f4 <sbrk_aligned>
 80082a6:	3001      	adds	r0, #1
 80082a8:	d037      	beq.n	800831a <_malloc_r+0xe6>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	442b      	add	r3, r5
 80082ae:	6023      	str	r3, [r4, #0]
 80082b0:	f8d8 3000 	ldr.w	r3, [r8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d038      	beq.n	800832a <_malloc_r+0xf6>
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	42a2      	cmp	r2, r4
 80082bc:	d12b      	bne.n	8008316 <_malloc_r+0xe2>
 80082be:	2200      	movs	r2, #0
 80082c0:	605a      	str	r2, [r3, #4]
 80082c2:	e00f      	b.n	80082e4 <_malloc_r+0xb0>
 80082c4:	6822      	ldr	r2, [r4, #0]
 80082c6:	1b52      	subs	r2, r2, r5
 80082c8:	d41f      	bmi.n	800830a <_malloc_r+0xd6>
 80082ca:	2a0b      	cmp	r2, #11
 80082cc:	d917      	bls.n	80082fe <_malloc_r+0xca>
 80082ce:	1961      	adds	r1, r4, r5
 80082d0:	42a3      	cmp	r3, r4
 80082d2:	6025      	str	r5, [r4, #0]
 80082d4:	bf18      	it	ne
 80082d6:	6059      	strne	r1, [r3, #4]
 80082d8:	6863      	ldr	r3, [r4, #4]
 80082da:	bf08      	it	eq
 80082dc:	f8c8 1000 	streq.w	r1, [r8]
 80082e0:	5162      	str	r2, [r4, r5]
 80082e2:	604b      	str	r3, [r1, #4]
 80082e4:	4638      	mov	r0, r7
 80082e6:	f104 060b 	add.w	r6, r4, #11
 80082ea:	f000 f829 	bl	8008340 <__malloc_unlock>
 80082ee:	f026 0607 	bic.w	r6, r6, #7
 80082f2:	1d23      	adds	r3, r4, #4
 80082f4:	1af2      	subs	r2, r6, r3
 80082f6:	d0ae      	beq.n	8008256 <_malloc_r+0x22>
 80082f8:	1b9b      	subs	r3, r3, r6
 80082fa:	50a3      	str	r3, [r4, r2]
 80082fc:	e7ab      	b.n	8008256 <_malloc_r+0x22>
 80082fe:	42a3      	cmp	r3, r4
 8008300:	6862      	ldr	r2, [r4, #4]
 8008302:	d1dd      	bne.n	80082c0 <_malloc_r+0x8c>
 8008304:	f8c8 2000 	str.w	r2, [r8]
 8008308:	e7ec      	b.n	80082e4 <_malloc_r+0xb0>
 800830a:	4623      	mov	r3, r4
 800830c:	6864      	ldr	r4, [r4, #4]
 800830e:	e7ac      	b.n	800826a <_malloc_r+0x36>
 8008310:	4634      	mov	r4, r6
 8008312:	6876      	ldr	r6, [r6, #4]
 8008314:	e7b4      	b.n	8008280 <_malloc_r+0x4c>
 8008316:	4613      	mov	r3, r2
 8008318:	e7cc      	b.n	80082b4 <_malloc_r+0x80>
 800831a:	230c      	movs	r3, #12
 800831c:	603b      	str	r3, [r7, #0]
 800831e:	4638      	mov	r0, r7
 8008320:	f000 f80e 	bl	8008340 <__malloc_unlock>
 8008324:	e797      	b.n	8008256 <_malloc_r+0x22>
 8008326:	6025      	str	r5, [r4, #0]
 8008328:	e7dc      	b.n	80082e4 <_malloc_r+0xb0>
 800832a:	605b      	str	r3, [r3, #4]
 800832c:	deff      	udf	#255	; 0xff
 800832e:	bf00      	nop
 8008330:	20004a70 	.word	0x20004a70

08008334 <__malloc_lock>:
 8008334:	4801      	ldr	r0, [pc, #4]	; (800833c <__malloc_lock+0x8>)
 8008336:	f7ff b87c 	b.w	8007432 <__retarget_lock_acquire_recursive>
 800833a:	bf00      	nop
 800833c:	20004a6c 	.word	0x20004a6c

08008340 <__malloc_unlock>:
 8008340:	4801      	ldr	r0, [pc, #4]	; (8008348 <__malloc_unlock+0x8>)
 8008342:	f7ff b877 	b.w	8007434 <__retarget_lock_release_recursive>
 8008346:	bf00      	nop
 8008348:	20004a6c 	.word	0x20004a6c

0800834c <_Balloc>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	69c6      	ldr	r6, [r0, #28]
 8008350:	4604      	mov	r4, r0
 8008352:	460d      	mov	r5, r1
 8008354:	b976      	cbnz	r6, 8008374 <_Balloc+0x28>
 8008356:	2010      	movs	r0, #16
 8008358:	f7ff ff44 	bl	80081e4 <malloc>
 800835c:	4602      	mov	r2, r0
 800835e:	61e0      	str	r0, [r4, #28]
 8008360:	b920      	cbnz	r0, 800836c <_Balloc+0x20>
 8008362:	4b18      	ldr	r3, [pc, #96]	; (80083c4 <_Balloc+0x78>)
 8008364:	4818      	ldr	r0, [pc, #96]	; (80083c8 <_Balloc+0x7c>)
 8008366:	216b      	movs	r1, #107	; 0x6b
 8008368:	f000 fd44 	bl	8008df4 <__assert_func>
 800836c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008370:	6006      	str	r6, [r0, #0]
 8008372:	60c6      	str	r6, [r0, #12]
 8008374:	69e6      	ldr	r6, [r4, #28]
 8008376:	68f3      	ldr	r3, [r6, #12]
 8008378:	b183      	cbz	r3, 800839c <_Balloc+0x50>
 800837a:	69e3      	ldr	r3, [r4, #28]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008382:	b9b8      	cbnz	r0, 80083b4 <_Balloc+0x68>
 8008384:	2101      	movs	r1, #1
 8008386:	fa01 f605 	lsl.w	r6, r1, r5
 800838a:	1d72      	adds	r2, r6, #5
 800838c:	0092      	lsls	r2, r2, #2
 800838e:	4620      	mov	r0, r4
 8008390:	f000 fd4e 	bl	8008e30 <_calloc_r>
 8008394:	b160      	cbz	r0, 80083b0 <_Balloc+0x64>
 8008396:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800839a:	e00e      	b.n	80083ba <_Balloc+0x6e>
 800839c:	2221      	movs	r2, #33	; 0x21
 800839e:	2104      	movs	r1, #4
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 fd45 	bl	8008e30 <_calloc_r>
 80083a6:	69e3      	ldr	r3, [r4, #28]
 80083a8:	60f0      	str	r0, [r6, #12]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e4      	bne.n	800837a <_Balloc+0x2e>
 80083b0:	2000      	movs	r0, #0
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	6802      	ldr	r2, [r0, #0]
 80083b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083ba:	2300      	movs	r3, #0
 80083bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083c0:	e7f7      	b.n	80083b2 <_Balloc+0x66>
 80083c2:	bf00      	nop
 80083c4:	080098c2 	.word	0x080098c2
 80083c8:	08009942 	.word	0x08009942

080083cc <_Bfree>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	69c6      	ldr	r6, [r0, #28]
 80083d0:	4605      	mov	r5, r0
 80083d2:	460c      	mov	r4, r1
 80083d4:	b976      	cbnz	r6, 80083f4 <_Bfree+0x28>
 80083d6:	2010      	movs	r0, #16
 80083d8:	f7ff ff04 	bl	80081e4 <malloc>
 80083dc:	4602      	mov	r2, r0
 80083de:	61e8      	str	r0, [r5, #28]
 80083e0:	b920      	cbnz	r0, 80083ec <_Bfree+0x20>
 80083e2:	4b09      	ldr	r3, [pc, #36]	; (8008408 <_Bfree+0x3c>)
 80083e4:	4809      	ldr	r0, [pc, #36]	; (800840c <_Bfree+0x40>)
 80083e6:	218f      	movs	r1, #143	; 0x8f
 80083e8:	f000 fd04 	bl	8008df4 <__assert_func>
 80083ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083f0:	6006      	str	r6, [r0, #0]
 80083f2:	60c6      	str	r6, [r0, #12]
 80083f4:	b13c      	cbz	r4, 8008406 <_Bfree+0x3a>
 80083f6:	69eb      	ldr	r3, [r5, #28]
 80083f8:	6862      	ldr	r2, [r4, #4]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008400:	6021      	str	r1, [r4, #0]
 8008402:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	080098c2 	.word	0x080098c2
 800840c:	08009942 	.word	0x08009942

08008410 <__multadd>:
 8008410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008414:	690d      	ldr	r5, [r1, #16]
 8008416:	4607      	mov	r7, r0
 8008418:	460c      	mov	r4, r1
 800841a:	461e      	mov	r6, r3
 800841c:	f101 0c14 	add.w	ip, r1, #20
 8008420:	2000      	movs	r0, #0
 8008422:	f8dc 3000 	ldr.w	r3, [ip]
 8008426:	b299      	uxth	r1, r3
 8008428:	fb02 6101 	mla	r1, r2, r1, r6
 800842c:	0c1e      	lsrs	r6, r3, #16
 800842e:	0c0b      	lsrs	r3, r1, #16
 8008430:	fb02 3306 	mla	r3, r2, r6, r3
 8008434:	b289      	uxth	r1, r1
 8008436:	3001      	adds	r0, #1
 8008438:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800843c:	4285      	cmp	r5, r0
 800843e:	f84c 1b04 	str.w	r1, [ip], #4
 8008442:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008446:	dcec      	bgt.n	8008422 <__multadd+0x12>
 8008448:	b30e      	cbz	r6, 800848e <__multadd+0x7e>
 800844a:	68a3      	ldr	r3, [r4, #8]
 800844c:	42ab      	cmp	r3, r5
 800844e:	dc19      	bgt.n	8008484 <__multadd+0x74>
 8008450:	6861      	ldr	r1, [r4, #4]
 8008452:	4638      	mov	r0, r7
 8008454:	3101      	adds	r1, #1
 8008456:	f7ff ff79 	bl	800834c <_Balloc>
 800845a:	4680      	mov	r8, r0
 800845c:	b928      	cbnz	r0, 800846a <__multadd+0x5a>
 800845e:	4602      	mov	r2, r0
 8008460:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <__multadd+0x84>)
 8008462:	480d      	ldr	r0, [pc, #52]	; (8008498 <__multadd+0x88>)
 8008464:	21ba      	movs	r1, #186	; 0xba
 8008466:	f000 fcc5 	bl	8008df4 <__assert_func>
 800846a:	6922      	ldr	r2, [r4, #16]
 800846c:	3202      	adds	r2, #2
 800846e:	f104 010c 	add.w	r1, r4, #12
 8008472:	0092      	lsls	r2, r2, #2
 8008474:	300c      	adds	r0, #12
 8008476:	f7fe ffde 	bl	8007436 <memcpy>
 800847a:	4621      	mov	r1, r4
 800847c:	4638      	mov	r0, r7
 800847e:	f7ff ffa5 	bl	80083cc <_Bfree>
 8008482:	4644      	mov	r4, r8
 8008484:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008488:	3501      	adds	r5, #1
 800848a:	615e      	str	r6, [r3, #20]
 800848c:	6125      	str	r5, [r4, #16]
 800848e:	4620      	mov	r0, r4
 8008490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008494:	08009931 	.word	0x08009931
 8008498:	08009942 	.word	0x08009942

0800849c <__hi0bits>:
 800849c:	0c03      	lsrs	r3, r0, #16
 800849e:	041b      	lsls	r3, r3, #16
 80084a0:	b9d3      	cbnz	r3, 80084d8 <__hi0bits+0x3c>
 80084a2:	0400      	lsls	r0, r0, #16
 80084a4:	2310      	movs	r3, #16
 80084a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80084aa:	bf04      	itt	eq
 80084ac:	0200      	lsleq	r0, r0, #8
 80084ae:	3308      	addeq	r3, #8
 80084b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80084b4:	bf04      	itt	eq
 80084b6:	0100      	lsleq	r0, r0, #4
 80084b8:	3304      	addeq	r3, #4
 80084ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80084be:	bf04      	itt	eq
 80084c0:	0080      	lsleq	r0, r0, #2
 80084c2:	3302      	addeq	r3, #2
 80084c4:	2800      	cmp	r0, #0
 80084c6:	db05      	blt.n	80084d4 <__hi0bits+0x38>
 80084c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80084cc:	f103 0301 	add.w	r3, r3, #1
 80084d0:	bf08      	it	eq
 80084d2:	2320      	moveq	r3, #32
 80084d4:	4618      	mov	r0, r3
 80084d6:	4770      	bx	lr
 80084d8:	2300      	movs	r3, #0
 80084da:	e7e4      	b.n	80084a6 <__hi0bits+0xa>

080084dc <__lo0bits>:
 80084dc:	6803      	ldr	r3, [r0, #0]
 80084de:	f013 0207 	ands.w	r2, r3, #7
 80084e2:	d00c      	beq.n	80084fe <__lo0bits+0x22>
 80084e4:	07d9      	lsls	r1, r3, #31
 80084e6:	d422      	bmi.n	800852e <__lo0bits+0x52>
 80084e8:	079a      	lsls	r2, r3, #30
 80084ea:	bf49      	itett	mi
 80084ec:	085b      	lsrmi	r3, r3, #1
 80084ee:	089b      	lsrpl	r3, r3, #2
 80084f0:	6003      	strmi	r3, [r0, #0]
 80084f2:	2201      	movmi	r2, #1
 80084f4:	bf5c      	itt	pl
 80084f6:	6003      	strpl	r3, [r0, #0]
 80084f8:	2202      	movpl	r2, #2
 80084fa:	4610      	mov	r0, r2
 80084fc:	4770      	bx	lr
 80084fe:	b299      	uxth	r1, r3
 8008500:	b909      	cbnz	r1, 8008506 <__lo0bits+0x2a>
 8008502:	0c1b      	lsrs	r3, r3, #16
 8008504:	2210      	movs	r2, #16
 8008506:	b2d9      	uxtb	r1, r3
 8008508:	b909      	cbnz	r1, 800850e <__lo0bits+0x32>
 800850a:	3208      	adds	r2, #8
 800850c:	0a1b      	lsrs	r3, r3, #8
 800850e:	0719      	lsls	r1, r3, #28
 8008510:	bf04      	itt	eq
 8008512:	091b      	lsreq	r3, r3, #4
 8008514:	3204      	addeq	r2, #4
 8008516:	0799      	lsls	r1, r3, #30
 8008518:	bf04      	itt	eq
 800851a:	089b      	lsreq	r3, r3, #2
 800851c:	3202      	addeq	r2, #2
 800851e:	07d9      	lsls	r1, r3, #31
 8008520:	d403      	bmi.n	800852a <__lo0bits+0x4e>
 8008522:	085b      	lsrs	r3, r3, #1
 8008524:	f102 0201 	add.w	r2, r2, #1
 8008528:	d003      	beq.n	8008532 <__lo0bits+0x56>
 800852a:	6003      	str	r3, [r0, #0]
 800852c:	e7e5      	b.n	80084fa <__lo0bits+0x1e>
 800852e:	2200      	movs	r2, #0
 8008530:	e7e3      	b.n	80084fa <__lo0bits+0x1e>
 8008532:	2220      	movs	r2, #32
 8008534:	e7e1      	b.n	80084fa <__lo0bits+0x1e>
	...

08008538 <__i2b>:
 8008538:	b510      	push	{r4, lr}
 800853a:	460c      	mov	r4, r1
 800853c:	2101      	movs	r1, #1
 800853e:	f7ff ff05 	bl	800834c <_Balloc>
 8008542:	4602      	mov	r2, r0
 8008544:	b928      	cbnz	r0, 8008552 <__i2b+0x1a>
 8008546:	4b05      	ldr	r3, [pc, #20]	; (800855c <__i2b+0x24>)
 8008548:	4805      	ldr	r0, [pc, #20]	; (8008560 <__i2b+0x28>)
 800854a:	f240 1145 	movw	r1, #325	; 0x145
 800854e:	f000 fc51 	bl	8008df4 <__assert_func>
 8008552:	2301      	movs	r3, #1
 8008554:	6144      	str	r4, [r0, #20]
 8008556:	6103      	str	r3, [r0, #16]
 8008558:	bd10      	pop	{r4, pc}
 800855a:	bf00      	nop
 800855c:	08009931 	.word	0x08009931
 8008560:	08009942 	.word	0x08009942

08008564 <__multiply>:
 8008564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008568:	4691      	mov	r9, r2
 800856a:	690a      	ldr	r2, [r1, #16]
 800856c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008570:	429a      	cmp	r2, r3
 8008572:	bfb8      	it	lt
 8008574:	460b      	movlt	r3, r1
 8008576:	460c      	mov	r4, r1
 8008578:	bfbc      	itt	lt
 800857a:	464c      	movlt	r4, r9
 800857c:	4699      	movlt	r9, r3
 800857e:	6927      	ldr	r7, [r4, #16]
 8008580:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008584:	68a3      	ldr	r3, [r4, #8]
 8008586:	6861      	ldr	r1, [r4, #4]
 8008588:	eb07 060a 	add.w	r6, r7, sl
 800858c:	42b3      	cmp	r3, r6
 800858e:	b085      	sub	sp, #20
 8008590:	bfb8      	it	lt
 8008592:	3101      	addlt	r1, #1
 8008594:	f7ff feda 	bl	800834c <_Balloc>
 8008598:	b930      	cbnz	r0, 80085a8 <__multiply+0x44>
 800859a:	4602      	mov	r2, r0
 800859c:	4b44      	ldr	r3, [pc, #272]	; (80086b0 <__multiply+0x14c>)
 800859e:	4845      	ldr	r0, [pc, #276]	; (80086b4 <__multiply+0x150>)
 80085a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80085a4:	f000 fc26 	bl	8008df4 <__assert_func>
 80085a8:	f100 0514 	add.w	r5, r0, #20
 80085ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085b0:	462b      	mov	r3, r5
 80085b2:	2200      	movs	r2, #0
 80085b4:	4543      	cmp	r3, r8
 80085b6:	d321      	bcc.n	80085fc <__multiply+0x98>
 80085b8:	f104 0314 	add.w	r3, r4, #20
 80085bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80085c0:	f109 0314 	add.w	r3, r9, #20
 80085c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80085c8:	9202      	str	r2, [sp, #8]
 80085ca:	1b3a      	subs	r2, r7, r4
 80085cc:	3a15      	subs	r2, #21
 80085ce:	f022 0203 	bic.w	r2, r2, #3
 80085d2:	3204      	adds	r2, #4
 80085d4:	f104 0115 	add.w	r1, r4, #21
 80085d8:	428f      	cmp	r7, r1
 80085da:	bf38      	it	cc
 80085dc:	2204      	movcc	r2, #4
 80085de:	9201      	str	r2, [sp, #4]
 80085e0:	9a02      	ldr	r2, [sp, #8]
 80085e2:	9303      	str	r3, [sp, #12]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d80c      	bhi.n	8008602 <__multiply+0x9e>
 80085e8:	2e00      	cmp	r6, #0
 80085ea:	dd03      	ble.n	80085f4 <__multiply+0x90>
 80085ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d05b      	beq.n	80086ac <__multiply+0x148>
 80085f4:	6106      	str	r6, [r0, #16]
 80085f6:	b005      	add	sp, #20
 80085f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fc:	f843 2b04 	str.w	r2, [r3], #4
 8008600:	e7d8      	b.n	80085b4 <__multiply+0x50>
 8008602:	f8b3 a000 	ldrh.w	sl, [r3]
 8008606:	f1ba 0f00 	cmp.w	sl, #0
 800860a:	d024      	beq.n	8008656 <__multiply+0xf2>
 800860c:	f104 0e14 	add.w	lr, r4, #20
 8008610:	46a9      	mov	r9, r5
 8008612:	f04f 0c00 	mov.w	ip, #0
 8008616:	f85e 2b04 	ldr.w	r2, [lr], #4
 800861a:	f8d9 1000 	ldr.w	r1, [r9]
 800861e:	fa1f fb82 	uxth.w	fp, r2
 8008622:	b289      	uxth	r1, r1
 8008624:	fb0a 110b 	mla	r1, sl, fp, r1
 8008628:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800862c:	f8d9 2000 	ldr.w	r2, [r9]
 8008630:	4461      	add	r1, ip
 8008632:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008636:	fb0a c20b 	mla	r2, sl, fp, ip
 800863a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800863e:	b289      	uxth	r1, r1
 8008640:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008644:	4577      	cmp	r7, lr
 8008646:	f849 1b04 	str.w	r1, [r9], #4
 800864a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800864e:	d8e2      	bhi.n	8008616 <__multiply+0xb2>
 8008650:	9a01      	ldr	r2, [sp, #4]
 8008652:	f845 c002 	str.w	ip, [r5, r2]
 8008656:	9a03      	ldr	r2, [sp, #12]
 8008658:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800865c:	3304      	adds	r3, #4
 800865e:	f1b9 0f00 	cmp.w	r9, #0
 8008662:	d021      	beq.n	80086a8 <__multiply+0x144>
 8008664:	6829      	ldr	r1, [r5, #0]
 8008666:	f104 0c14 	add.w	ip, r4, #20
 800866a:	46ae      	mov	lr, r5
 800866c:	f04f 0a00 	mov.w	sl, #0
 8008670:	f8bc b000 	ldrh.w	fp, [ip]
 8008674:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008678:	fb09 220b 	mla	r2, r9, fp, r2
 800867c:	4452      	add	r2, sl
 800867e:	b289      	uxth	r1, r1
 8008680:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008684:	f84e 1b04 	str.w	r1, [lr], #4
 8008688:	f85c 1b04 	ldr.w	r1, [ip], #4
 800868c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008690:	f8be 1000 	ldrh.w	r1, [lr]
 8008694:	fb09 110a 	mla	r1, r9, sl, r1
 8008698:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800869c:	4567      	cmp	r7, ip
 800869e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086a2:	d8e5      	bhi.n	8008670 <__multiply+0x10c>
 80086a4:	9a01      	ldr	r2, [sp, #4]
 80086a6:	50a9      	str	r1, [r5, r2]
 80086a8:	3504      	adds	r5, #4
 80086aa:	e799      	b.n	80085e0 <__multiply+0x7c>
 80086ac:	3e01      	subs	r6, #1
 80086ae:	e79b      	b.n	80085e8 <__multiply+0x84>
 80086b0:	08009931 	.word	0x08009931
 80086b4:	08009942 	.word	0x08009942

080086b8 <__pow5mult>:
 80086b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086bc:	4615      	mov	r5, r2
 80086be:	f012 0203 	ands.w	r2, r2, #3
 80086c2:	4606      	mov	r6, r0
 80086c4:	460f      	mov	r7, r1
 80086c6:	d007      	beq.n	80086d8 <__pow5mult+0x20>
 80086c8:	4c25      	ldr	r4, [pc, #148]	; (8008760 <__pow5mult+0xa8>)
 80086ca:	3a01      	subs	r2, #1
 80086cc:	2300      	movs	r3, #0
 80086ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086d2:	f7ff fe9d 	bl	8008410 <__multadd>
 80086d6:	4607      	mov	r7, r0
 80086d8:	10ad      	asrs	r5, r5, #2
 80086da:	d03d      	beq.n	8008758 <__pow5mult+0xa0>
 80086dc:	69f4      	ldr	r4, [r6, #28]
 80086de:	b97c      	cbnz	r4, 8008700 <__pow5mult+0x48>
 80086e0:	2010      	movs	r0, #16
 80086e2:	f7ff fd7f 	bl	80081e4 <malloc>
 80086e6:	4602      	mov	r2, r0
 80086e8:	61f0      	str	r0, [r6, #28]
 80086ea:	b928      	cbnz	r0, 80086f8 <__pow5mult+0x40>
 80086ec:	4b1d      	ldr	r3, [pc, #116]	; (8008764 <__pow5mult+0xac>)
 80086ee:	481e      	ldr	r0, [pc, #120]	; (8008768 <__pow5mult+0xb0>)
 80086f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80086f4:	f000 fb7e 	bl	8008df4 <__assert_func>
 80086f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086fc:	6004      	str	r4, [r0, #0]
 80086fe:	60c4      	str	r4, [r0, #12]
 8008700:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008708:	b94c      	cbnz	r4, 800871e <__pow5mult+0x66>
 800870a:	f240 2171 	movw	r1, #625	; 0x271
 800870e:	4630      	mov	r0, r6
 8008710:	f7ff ff12 	bl	8008538 <__i2b>
 8008714:	2300      	movs	r3, #0
 8008716:	f8c8 0008 	str.w	r0, [r8, #8]
 800871a:	4604      	mov	r4, r0
 800871c:	6003      	str	r3, [r0, #0]
 800871e:	f04f 0900 	mov.w	r9, #0
 8008722:	07eb      	lsls	r3, r5, #31
 8008724:	d50a      	bpl.n	800873c <__pow5mult+0x84>
 8008726:	4639      	mov	r1, r7
 8008728:	4622      	mov	r2, r4
 800872a:	4630      	mov	r0, r6
 800872c:	f7ff ff1a 	bl	8008564 <__multiply>
 8008730:	4639      	mov	r1, r7
 8008732:	4680      	mov	r8, r0
 8008734:	4630      	mov	r0, r6
 8008736:	f7ff fe49 	bl	80083cc <_Bfree>
 800873a:	4647      	mov	r7, r8
 800873c:	106d      	asrs	r5, r5, #1
 800873e:	d00b      	beq.n	8008758 <__pow5mult+0xa0>
 8008740:	6820      	ldr	r0, [r4, #0]
 8008742:	b938      	cbnz	r0, 8008754 <__pow5mult+0x9c>
 8008744:	4622      	mov	r2, r4
 8008746:	4621      	mov	r1, r4
 8008748:	4630      	mov	r0, r6
 800874a:	f7ff ff0b 	bl	8008564 <__multiply>
 800874e:	6020      	str	r0, [r4, #0]
 8008750:	f8c0 9000 	str.w	r9, [r0]
 8008754:	4604      	mov	r4, r0
 8008756:	e7e4      	b.n	8008722 <__pow5mult+0x6a>
 8008758:	4638      	mov	r0, r7
 800875a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800875e:	bf00      	nop
 8008760:	08009a90 	.word	0x08009a90
 8008764:	080098c2 	.word	0x080098c2
 8008768:	08009942 	.word	0x08009942

0800876c <__lshift>:
 800876c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008770:	460c      	mov	r4, r1
 8008772:	6849      	ldr	r1, [r1, #4]
 8008774:	6923      	ldr	r3, [r4, #16]
 8008776:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800877a:	68a3      	ldr	r3, [r4, #8]
 800877c:	4607      	mov	r7, r0
 800877e:	4691      	mov	r9, r2
 8008780:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008784:	f108 0601 	add.w	r6, r8, #1
 8008788:	42b3      	cmp	r3, r6
 800878a:	db0b      	blt.n	80087a4 <__lshift+0x38>
 800878c:	4638      	mov	r0, r7
 800878e:	f7ff fddd 	bl	800834c <_Balloc>
 8008792:	4605      	mov	r5, r0
 8008794:	b948      	cbnz	r0, 80087aa <__lshift+0x3e>
 8008796:	4602      	mov	r2, r0
 8008798:	4b28      	ldr	r3, [pc, #160]	; (800883c <__lshift+0xd0>)
 800879a:	4829      	ldr	r0, [pc, #164]	; (8008840 <__lshift+0xd4>)
 800879c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80087a0:	f000 fb28 	bl	8008df4 <__assert_func>
 80087a4:	3101      	adds	r1, #1
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	e7ee      	b.n	8008788 <__lshift+0x1c>
 80087aa:	2300      	movs	r3, #0
 80087ac:	f100 0114 	add.w	r1, r0, #20
 80087b0:	f100 0210 	add.w	r2, r0, #16
 80087b4:	4618      	mov	r0, r3
 80087b6:	4553      	cmp	r3, sl
 80087b8:	db33      	blt.n	8008822 <__lshift+0xb6>
 80087ba:	6920      	ldr	r0, [r4, #16]
 80087bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087c0:	f104 0314 	add.w	r3, r4, #20
 80087c4:	f019 091f 	ands.w	r9, r9, #31
 80087c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087d0:	d02b      	beq.n	800882a <__lshift+0xbe>
 80087d2:	f1c9 0e20 	rsb	lr, r9, #32
 80087d6:	468a      	mov	sl, r1
 80087d8:	2200      	movs	r2, #0
 80087da:	6818      	ldr	r0, [r3, #0]
 80087dc:	fa00 f009 	lsl.w	r0, r0, r9
 80087e0:	4310      	orrs	r0, r2
 80087e2:	f84a 0b04 	str.w	r0, [sl], #4
 80087e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ea:	459c      	cmp	ip, r3
 80087ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80087f0:	d8f3      	bhi.n	80087da <__lshift+0x6e>
 80087f2:	ebac 0304 	sub.w	r3, ip, r4
 80087f6:	3b15      	subs	r3, #21
 80087f8:	f023 0303 	bic.w	r3, r3, #3
 80087fc:	3304      	adds	r3, #4
 80087fe:	f104 0015 	add.w	r0, r4, #21
 8008802:	4584      	cmp	ip, r0
 8008804:	bf38      	it	cc
 8008806:	2304      	movcc	r3, #4
 8008808:	50ca      	str	r2, [r1, r3]
 800880a:	b10a      	cbz	r2, 8008810 <__lshift+0xa4>
 800880c:	f108 0602 	add.w	r6, r8, #2
 8008810:	3e01      	subs	r6, #1
 8008812:	4638      	mov	r0, r7
 8008814:	612e      	str	r6, [r5, #16]
 8008816:	4621      	mov	r1, r4
 8008818:	f7ff fdd8 	bl	80083cc <_Bfree>
 800881c:	4628      	mov	r0, r5
 800881e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008822:	f842 0f04 	str.w	r0, [r2, #4]!
 8008826:	3301      	adds	r3, #1
 8008828:	e7c5      	b.n	80087b6 <__lshift+0x4a>
 800882a:	3904      	subs	r1, #4
 800882c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008830:	f841 2f04 	str.w	r2, [r1, #4]!
 8008834:	459c      	cmp	ip, r3
 8008836:	d8f9      	bhi.n	800882c <__lshift+0xc0>
 8008838:	e7ea      	b.n	8008810 <__lshift+0xa4>
 800883a:	bf00      	nop
 800883c:	08009931 	.word	0x08009931
 8008840:	08009942 	.word	0x08009942

08008844 <__mcmp>:
 8008844:	b530      	push	{r4, r5, lr}
 8008846:	6902      	ldr	r2, [r0, #16]
 8008848:	690c      	ldr	r4, [r1, #16]
 800884a:	1b12      	subs	r2, r2, r4
 800884c:	d10e      	bne.n	800886c <__mcmp+0x28>
 800884e:	f100 0314 	add.w	r3, r0, #20
 8008852:	3114      	adds	r1, #20
 8008854:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008858:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800885c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008860:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008864:	42a5      	cmp	r5, r4
 8008866:	d003      	beq.n	8008870 <__mcmp+0x2c>
 8008868:	d305      	bcc.n	8008876 <__mcmp+0x32>
 800886a:	2201      	movs	r2, #1
 800886c:	4610      	mov	r0, r2
 800886e:	bd30      	pop	{r4, r5, pc}
 8008870:	4283      	cmp	r3, r0
 8008872:	d3f3      	bcc.n	800885c <__mcmp+0x18>
 8008874:	e7fa      	b.n	800886c <__mcmp+0x28>
 8008876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800887a:	e7f7      	b.n	800886c <__mcmp+0x28>

0800887c <__mdiff>:
 800887c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008880:	460c      	mov	r4, r1
 8008882:	4606      	mov	r6, r0
 8008884:	4611      	mov	r1, r2
 8008886:	4620      	mov	r0, r4
 8008888:	4690      	mov	r8, r2
 800888a:	f7ff ffdb 	bl	8008844 <__mcmp>
 800888e:	1e05      	subs	r5, r0, #0
 8008890:	d110      	bne.n	80088b4 <__mdiff+0x38>
 8008892:	4629      	mov	r1, r5
 8008894:	4630      	mov	r0, r6
 8008896:	f7ff fd59 	bl	800834c <_Balloc>
 800889a:	b930      	cbnz	r0, 80088aa <__mdiff+0x2e>
 800889c:	4b3a      	ldr	r3, [pc, #232]	; (8008988 <__mdiff+0x10c>)
 800889e:	4602      	mov	r2, r0
 80088a0:	f240 2137 	movw	r1, #567	; 0x237
 80088a4:	4839      	ldr	r0, [pc, #228]	; (800898c <__mdiff+0x110>)
 80088a6:	f000 faa5 	bl	8008df4 <__assert_func>
 80088aa:	2301      	movs	r3, #1
 80088ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b4:	bfa4      	itt	ge
 80088b6:	4643      	movge	r3, r8
 80088b8:	46a0      	movge	r8, r4
 80088ba:	4630      	mov	r0, r6
 80088bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80088c0:	bfa6      	itte	ge
 80088c2:	461c      	movge	r4, r3
 80088c4:	2500      	movge	r5, #0
 80088c6:	2501      	movlt	r5, #1
 80088c8:	f7ff fd40 	bl	800834c <_Balloc>
 80088cc:	b920      	cbnz	r0, 80088d8 <__mdiff+0x5c>
 80088ce:	4b2e      	ldr	r3, [pc, #184]	; (8008988 <__mdiff+0x10c>)
 80088d0:	4602      	mov	r2, r0
 80088d2:	f240 2145 	movw	r1, #581	; 0x245
 80088d6:	e7e5      	b.n	80088a4 <__mdiff+0x28>
 80088d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088dc:	6926      	ldr	r6, [r4, #16]
 80088de:	60c5      	str	r5, [r0, #12]
 80088e0:	f104 0914 	add.w	r9, r4, #20
 80088e4:	f108 0514 	add.w	r5, r8, #20
 80088e8:	f100 0e14 	add.w	lr, r0, #20
 80088ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80088f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088f4:	f108 0210 	add.w	r2, r8, #16
 80088f8:	46f2      	mov	sl, lr
 80088fa:	2100      	movs	r1, #0
 80088fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008900:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008904:	fa11 f88b 	uxtah	r8, r1, fp
 8008908:	b299      	uxth	r1, r3
 800890a:	0c1b      	lsrs	r3, r3, #16
 800890c:	eba8 0801 	sub.w	r8, r8, r1
 8008910:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008914:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008918:	fa1f f888 	uxth.w	r8, r8
 800891c:	1419      	asrs	r1, r3, #16
 800891e:	454e      	cmp	r6, r9
 8008920:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008924:	f84a 3b04 	str.w	r3, [sl], #4
 8008928:	d8e8      	bhi.n	80088fc <__mdiff+0x80>
 800892a:	1b33      	subs	r3, r6, r4
 800892c:	3b15      	subs	r3, #21
 800892e:	f023 0303 	bic.w	r3, r3, #3
 8008932:	3304      	adds	r3, #4
 8008934:	3415      	adds	r4, #21
 8008936:	42a6      	cmp	r6, r4
 8008938:	bf38      	it	cc
 800893a:	2304      	movcc	r3, #4
 800893c:	441d      	add	r5, r3
 800893e:	4473      	add	r3, lr
 8008940:	469e      	mov	lr, r3
 8008942:	462e      	mov	r6, r5
 8008944:	4566      	cmp	r6, ip
 8008946:	d30e      	bcc.n	8008966 <__mdiff+0xea>
 8008948:	f10c 0203 	add.w	r2, ip, #3
 800894c:	1b52      	subs	r2, r2, r5
 800894e:	f022 0203 	bic.w	r2, r2, #3
 8008952:	3d03      	subs	r5, #3
 8008954:	45ac      	cmp	ip, r5
 8008956:	bf38      	it	cc
 8008958:	2200      	movcc	r2, #0
 800895a:	4413      	add	r3, r2
 800895c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008960:	b17a      	cbz	r2, 8008982 <__mdiff+0x106>
 8008962:	6107      	str	r7, [r0, #16]
 8008964:	e7a4      	b.n	80088b0 <__mdiff+0x34>
 8008966:	f856 8b04 	ldr.w	r8, [r6], #4
 800896a:	fa11 f288 	uxtah	r2, r1, r8
 800896e:	1414      	asrs	r4, r2, #16
 8008970:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008974:	b292      	uxth	r2, r2
 8008976:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800897a:	f84e 2b04 	str.w	r2, [lr], #4
 800897e:	1421      	asrs	r1, r4, #16
 8008980:	e7e0      	b.n	8008944 <__mdiff+0xc8>
 8008982:	3f01      	subs	r7, #1
 8008984:	e7ea      	b.n	800895c <__mdiff+0xe0>
 8008986:	bf00      	nop
 8008988:	08009931 	.word	0x08009931
 800898c:	08009942 	.word	0x08009942

08008990 <__d2b>:
 8008990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008994:	460f      	mov	r7, r1
 8008996:	2101      	movs	r1, #1
 8008998:	ec59 8b10 	vmov	r8, r9, d0
 800899c:	4616      	mov	r6, r2
 800899e:	f7ff fcd5 	bl	800834c <_Balloc>
 80089a2:	4604      	mov	r4, r0
 80089a4:	b930      	cbnz	r0, 80089b4 <__d2b+0x24>
 80089a6:	4602      	mov	r2, r0
 80089a8:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <__d2b+0xac>)
 80089aa:	4825      	ldr	r0, [pc, #148]	; (8008a40 <__d2b+0xb0>)
 80089ac:	f240 310f 	movw	r1, #783	; 0x30f
 80089b0:	f000 fa20 	bl	8008df4 <__assert_func>
 80089b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80089b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089bc:	bb2d      	cbnz	r5, 8008a0a <__d2b+0x7a>
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	f1b8 0300 	subs.w	r3, r8, #0
 80089c4:	d026      	beq.n	8008a14 <__d2b+0x84>
 80089c6:	4668      	mov	r0, sp
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	f7ff fd87 	bl	80084dc <__lo0bits>
 80089ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80089d2:	b1e8      	cbz	r0, 8008a10 <__d2b+0x80>
 80089d4:	f1c0 0320 	rsb	r3, r0, #32
 80089d8:	fa02 f303 	lsl.w	r3, r2, r3
 80089dc:	430b      	orrs	r3, r1
 80089de:	40c2      	lsrs	r2, r0
 80089e0:	6163      	str	r3, [r4, #20]
 80089e2:	9201      	str	r2, [sp, #4]
 80089e4:	9b01      	ldr	r3, [sp, #4]
 80089e6:	61a3      	str	r3, [r4, #24]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	bf14      	ite	ne
 80089ec:	2202      	movne	r2, #2
 80089ee:	2201      	moveq	r2, #1
 80089f0:	6122      	str	r2, [r4, #16]
 80089f2:	b1bd      	cbz	r5, 8008a24 <__d2b+0x94>
 80089f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089f8:	4405      	add	r5, r0
 80089fa:	603d      	str	r5, [r7, #0]
 80089fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a00:	6030      	str	r0, [r6, #0]
 8008a02:	4620      	mov	r0, r4
 8008a04:	b003      	add	sp, #12
 8008a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a0e:	e7d6      	b.n	80089be <__d2b+0x2e>
 8008a10:	6161      	str	r1, [r4, #20]
 8008a12:	e7e7      	b.n	80089e4 <__d2b+0x54>
 8008a14:	a801      	add	r0, sp, #4
 8008a16:	f7ff fd61 	bl	80084dc <__lo0bits>
 8008a1a:	9b01      	ldr	r3, [sp, #4]
 8008a1c:	6163      	str	r3, [r4, #20]
 8008a1e:	3020      	adds	r0, #32
 8008a20:	2201      	movs	r2, #1
 8008a22:	e7e5      	b.n	80089f0 <__d2b+0x60>
 8008a24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a2c:	6038      	str	r0, [r7, #0]
 8008a2e:	6918      	ldr	r0, [r3, #16]
 8008a30:	f7ff fd34 	bl	800849c <__hi0bits>
 8008a34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a38:	e7e2      	b.n	8008a00 <__d2b+0x70>
 8008a3a:	bf00      	nop
 8008a3c:	08009931 	.word	0x08009931
 8008a40:	08009942 	.word	0x08009942

08008a44 <__sfputc_r>:
 8008a44:	6893      	ldr	r3, [r2, #8]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	b410      	push	{r4}
 8008a4c:	6093      	str	r3, [r2, #8]
 8008a4e:	da08      	bge.n	8008a62 <__sfputc_r+0x1e>
 8008a50:	6994      	ldr	r4, [r2, #24]
 8008a52:	42a3      	cmp	r3, r4
 8008a54:	db01      	blt.n	8008a5a <__sfputc_r+0x16>
 8008a56:	290a      	cmp	r1, #10
 8008a58:	d103      	bne.n	8008a62 <__sfputc_r+0x1e>
 8008a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a5e:	f7fe bb6c 	b.w	800713a <__swbuf_r>
 8008a62:	6813      	ldr	r3, [r2, #0]
 8008a64:	1c58      	adds	r0, r3, #1
 8008a66:	6010      	str	r0, [r2, #0]
 8008a68:	7019      	strb	r1, [r3, #0]
 8008a6a:	4608      	mov	r0, r1
 8008a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <__sfputs_r>:
 8008a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a74:	4606      	mov	r6, r0
 8008a76:	460f      	mov	r7, r1
 8008a78:	4614      	mov	r4, r2
 8008a7a:	18d5      	adds	r5, r2, r3
 8008a7c:	42ac      	cmp	r4, r5
 8008a7e:	d101      	bne.n	8008a84 <__sfputs_r+0x12>
 8008a80:	2000      	movs	r0, #0
 8008a82:	e007      	b.n	8008a94 <__sfputs_r+0x22>
 8008a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a88:	463a      	mov	r2, r7
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff ffda 	bl	8008a44 <__sfputc_r>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d1f3      	bne.n	8008a7c <__sfputs_r+0xa>
 8008a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a98 <_vfiprintf_r>:
 8008a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9c:	460d      	mov	r5, r1
 8008a9e:	b09d      	sub	sp, #116	; 0x74
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	4698      	mov	r8, r3
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	b118      	cbz	r0, 8008ab0 <_vfiprintf_r+0x18>
 8008aa8:	6a03      	ldr	r3, [r0, #32]
 8008aaa:	b90b      	cbnz	r3, 8008ab0 <_vfiprintf_r+0x18>
 8008aac:	f7fe fa5e 	bl	8006f6c <__sinit>
 8008ab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ab2:	07d9      	lsls	r1, r3, #31
 8008ab4:	d405      	bmi.n	8008ac2 <_vfiprintf_r+0x2a>
 8008ab6:	89ab      	ldrh	r3, [r5, #12]
 8008ab8:	059a      	lsls	r2, r3, #22
 8008aba:	d402      	bmi.n	8008ac2 <_vfiprintf_r+0x2a>
 8008abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008abe:	f7fe fcb8 	bl	8007432 <__retarget_lock_acquire_recursive>
 8008ac2:	89ab      	ldrh	r3, [r5, #12]
 8008ac4:	071b      	lsls	r3, r3, #28
 8008ac6:	d501      	bpl.n	8008acc <_vfiprintf_r+0x34>
 8008ac8:	692b      	ldr	r3, [r5, #16]
 8008aca:	b99b      	cbnz	r3, 8008af4 <_vfiprintf_r+0x5c>
 8008acc:	4629      	mov	r1, r5
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f7fe fb70 	bl	80071b4 <__swsetup_r>
 8008ad4:	b170      	cbz	r0, 8008af4 <_vfiprintf_r+0x5c>
 8008ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ad8:	07dc      	lsls	r4, r3, #31
 8008ada:	d504      	bpl.n	8008ae6 <_vfiprintf_r+0x4e>
 8008adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ae0:	b01d      	add	sp, #116	; 0x74
 8008ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae6:	89ab      	ldrh	r3, [r5, #12]
 8008ae8:	0598      	lsls	r0, r3, #22
 8008aea:	d4f7      	bmi.n	8008adc <_vfiprintf_r+0x44>
 8008aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aee:	f7fe fca1 	bl	8007434 <__retarget_lock_release_recursive>
 8008af2:	e7f3      	b.n	8008adc <_vfiprintf_r+0x44>
 8008af4:	2300      	movs	r3, #0
 8008af6:	9309      	str	r3, [sp, #36]	; 0x24
 8008af8:	2320      	movs	r3, #32
 8008afa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008afe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b02:	2330      	movs	r3, #48	; 0x30
 8008b04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008cb8 <_vfiprintf_r+0x220>
 8008b08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b0c:	f04f 0901 	mov.w	r9, #1
 8008b10:	4623      	mov	r3, r4
 8008b12:	469a      	mov	sl, r3
 8008b14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b18:	b10a      	cbz	r2, 8008b1e <_vfiprintf_r+0x86>
 8008b1a:	2a25      	cmp	r2, #37	; 0x25
 8008b1c:	d1f9      	bne.n	8008b12 <_vfiprintf_r+0x7a>
 8008b1e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b22:	d00b      	beq.n	8008b3c <_vfiprintf_r+0xa4>
 8008b24:	465b      	mov	r3, fp
 8008b26:	4622      	mov	r2, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7ff ffa1 	bl	8008a72 <__sfputs_r>
 8008b30:	3001      	adds	r0, #1
 8008b32:	f000 80a9 	beq.w	8008c88 <_vfiprintf_r+0x1f0>
 8008b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b38:	445a      	add	r2, fp
 8008b3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 80a1 	beq.w	8008c88 <_vfiprintf_r+0x1f0>
 8008b46:	2300      	movs	r3, #0
 8008b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b50:	f10a 0a01 	add.w	sl, sl, #1
 8008b54:	9304      	str	r3, [sp, #16]
 8008b56:	9307      	str	r3, [sp, #28]
 8008b58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b5c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b5e:	4654      	mov	r4, sl
 8008b60:	2205      	movs	r2, #5
 8008b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b66:	4854      	ldr	r0, [pc, #336]	; (8008cb8 <_vfiprintf_r+0x220>)
 8008b68:	f7f7 fb42 	bl	80001f0 <memchr>
 8008b6c:	9a04      	ldr	r2, [sp, #16]
 8008b6e:	b9d8      	cbnz	r0, 8008ba8 <_vfiprintf_r+0x110>
 8008b70:	06d1      	lsls	r1, r2, #27
 8008b72:	bf44      	itt	mi
 8008b74:	2320      	movmi	r3, #32
 8008b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b7a:	0713      	lsls	r3, r2, #28
 8008b7c:	bf44      	itt	mi
 8008b7e:	232b      	movmi	r3, #43	; 0x2b
 8008b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b84:	f89a 3000 	ldrb.w	r3, [sl]
 8008b88:	2b2a      	cmp	r3, #42	; 0x2a
 8008b8a:	d015      	beq.n	8008bb8 <_vfiprintf_r+0x120>
 8008b8c:	9a07      	ldr	r2, [sp, #28]
 8008b8e:	4654      	mov	r4, sl
 8008b90:	2000      	movs	r0, #0
 8008b92:	f04f 0c0a 	mov.w	ip, #10
 8008b96:	4621      	mov	r1, r4
 8008b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b9c:	3b30      	subs	r3, #48	; 0x30
 8008b9e:	2b09      	cmp	r3, #9
 8008ba0:	d94d      	bls.n	8008c3e <_vfiprintf_r+0x1a6>
 8008ba2:	b1b0      	cbz	r0, 8008bd2 <_vfiprintf_r+0x13a>
 8008ba4:	9207      	str	r2, [sp, #28]
 8008ba6:	e014      	b.n	8008bd2 <_vfiprintf_r+0x13a>
 8008ba8:	eba0 0308 	sub.w	r3, r0, r8
 8008bac:	fa09 f303 	lsl.w	r3, r9, r3
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	9304      	str	r3, [sp, #16]
 8008bb4:	46a2      	mov	sl, r4
 8008bb6:	e7d2      	b.n	8008b5e <_vfiprintf_r+0xc6>
 8008bb8:	9b03      	ldr	r3, [sp, #12]
 8008bba:	1d19      	adds	r1, r3, #4
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	9103      	str	r1, [sp, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	bfbb      	ittet	lt
 8008bc4:	425b      	neglt	r3, r3
 8008bc6:	f042 0202 	orrlt.w	r2, r2, #2
 8008bca:	9307      	strge	r3, [sp, #28]
 8008bcc:	9307      	strlt	r3, [sp, #28]
 8008bce:	bfb8      	it	lt
 8008bd0:	9204      	strlt	r2, [sp, #16]
 8008bd2:	7823      	ldrb	r3, [r4, #0]
 8008bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8008bd6:	d10c      	bne.n	8008bf2 <_vfiprintf_r+0x15a>
 8008bd8:	7863      	ldrb	r3, [r4, #1]
 8008bda:	2b2a      	cmp	r3, #42	; 0x2a
 8008bdc:	d134      	bne.n	8008c48 <_vfiprintf_r+0x1b0>
 8008bde:	9b03      	ldr	r3, [sp, #12]
 8008be0:	1d1a      	adds	r2, r3, #4
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	9203      	str	r2, [sp, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	bfb8      	it	lt
 8008bea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008bee:	3402      	adds	r4, #2
 8008bf0:	9305      	str	r3, [sp, #20]
 8008bf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008cc8 <_vfiprintf_r+0x230>
 8008bf6:	7821      	ldrb	r1, [r4, #0]
 8008bf8:	2203      	movs	r2, #3
 8008bfa:	4650      	mov	r0, sl
 8008bfc:	f7f7 faf8 	bl	80001f0 <memchr>
 8008c00:	b138      	cbz	r0, 8008c12 <_vfiprintf_r+0x17a>
 8008c02:	9b04      	ldr	r3, [sp, #16]
 8008c04:	eba0 000a 	sub.w	r0, r0, sl
 8008c08:	2240      	movs	r2, #64	; 0x40
 8008c0a:	4082      	lsls	r2, r0
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	3401      	adds	r4, #1
 8008c10:	9304      	str	r3, [sp, #16]
 8008c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c16:	4829      	ldr	r0, [pc, #164]	; (8008cbc <_vfiprintf_r+0x224>)
 8008c18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c1c:	2206      	movs	r2, #6
 8008c1e:	f7f7 fae7 	bl	80001f0 <memchr>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d03f      	beq.n	8008ca6 <_vfiprintf_r+0x20e>
 8008c26:	4b26      	ldr	r3, [pc, #152]	; (8008cc0 <_vfiprintf_r+0x228>)
 8008c28:	bb1b      	cbnz	r3, 8008c72 <_vfiprintf_r+0x1da>
 8008c2a:	9b03      	ldr	r3, [sp, #12]
 8008c2c:	3307      	adds	r3, #7
 8008c2e:	f023 0307 	bic.w	r3, r3, #7
 8008c32:	3308      	adds	r3, #8
 8008c34:	9303      	str	r3, [sp, #12]
 8008c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c38:	443b      	add	r3, r7
 8008c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c3c:	e768      	b.n	8008b10 <_vfiprintf_r+0x78>
 8008c3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c42:	460c      	mov	r4, r1
 8008c44:	2001      	movs	r0, #1
 8008c46:	e7a6      	b.n	8008b96 <_vfiprintf_r+0xfe>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	3401      	adds	r4, #1
 8008c4c:	9305      	str	r3, [sp, #20]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	f04f 0c0a 	mov.w	ip, #10
 8008c54:	4620      	mov	r0, r4
 8008c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c5a:	3a30      	subs	r2, #48	; 0x30
 8008c5c:	2a09      	cmp	r2, #9
 8008c5e:	d903      	bls.n	8008c68 <_vfiprintf_r+0x1d0>
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d0c6      	beq.n	8008bf2 <_vfiprintf_r+0x15a>
 8008c64:	9105      	str	r1, [sp, #20]
 8008c66:	e7c4      	b.n	8008bf2 <_vfiprintf_r+0x15a>
 8008c68:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e7f0      	b.n	8008c54 <_vfiprintf_r+0x1bc>
 8008c72:	ab03      	add	r3, sp, #12
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	462a      	mov	r2, r5
 8008c78:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <_vfiprintf_r+0x22c>)
 8008c7a:	a904      	add	r1, sp, #16
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f7fd fc75 	bl	800656c <_printf_float>
 8008c82:	4607      	mov	r7, r0
 8008c84:	1c78      	adds	r0, r7, #1
 8008c86:	d1d6      	bne.n	8008c36 <_vfiprintf_r+0x19e>
 8008c88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c8a:	07d9      	lsls	r1, r3, #31
 8008c8c:	d405      	bmi.n	8008c9a <_vfiprintf_r+0x202>
 8008c8e:	89ab      	ldrh	r3, [r5, #12]
 8008c90:	059a      	lsls	r2, r3, #22
 8008c92:	d402      	bmi.n	8008c9a <_vfiprintf_r+0x202>
 8008c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c96:	f7fe fbcd 	bl	8007434 <__retarget_lock_release_recursive>
 8008c9a:	89ab      	ldrh	r3, [r5, #12]
 8008c9c:	065b      	lsls	r3, r3, #25
 8008c9e:	f53f af1d 	bmi.w	8008adc <_vfiprintf_r+0x44>
 8008ca2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ca4:	e71c      	b.n	8008ae0 <_vfiprintf_r+0x48>
 8008ca6:	ab03      	add	r3, sp, #12
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	462a      	mov	r2, r5
 8008cac:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <_vfiprintf_r+0x22c>)
 8008cae:	a904      	add	r1, sp, #16
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f7fd feff 	bl	8006ab4 <_printf_i>
 8008cb6:	e7e4      	b.n	8008c82 <_vfiprintf_r+0x1ea>
 8008cb8:	08009a9c 	.word	0x08009a9c
 8008cbc:	08009aa6 	.word	0x08009aa6
 8008cc0:	0800656d 	.word	0x0800656d
 8008cc4:	08008a73 	.word	0x08008a73
 8008cc8:	08009aa2 	.word	0x08009aa2

08008ccc <__swhatbuf_r>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	460c      	mov	r4, r1
 8008cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	b096      	sub	sp, #88	; 0x58
 8008cd8:	4615      	mov	r5, r2
 8008cda:	461e      	mov	r6, r3
 8008cdc:	da0d      	bge.n	8008cfa <__swhatbuf_r+0x2e>
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ce4:	f04f 0100 	mov.w	r1, #0
 8008ce8:	bf0c      	ite	eq
 8008cea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008cee:	2340      	movne	r3, #64	; 0x40
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	6031      	str	r1, [r6, #0]
 8008cf4:	602b      	str	r3, [r5, #0]
 8008cf6:	b016      	add	sp, #88	; 0x58
 8008cf8:	bd70      	pop	{r4, r5, r6, pc}
 8008cfa:	466a      	mov	r2, sp
 8008cfc:	f000 f848 	bl	8008d90 <_fstat_r>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	dbec      	blt.n	8008cde <__swhatbuf_r+0x12>
 8008d04:	9901      	ldr	r1, [sp, #4]
 8008d06:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008d0a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008d0e:	4259      	negs	r1, r3
 8008d10:	4159      	adcs	r1, r3
 8008d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d16:	e7eb      	b.n	8008cf0 <__swhatbuf_r+0x24>

08008d18 <__smakebuf_r>:
 8008d18:	898b      	ldrh	r3, [r1, #12]
 8008d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d1c:	079d      	lsls	r5, r3, #30
 8008d1e:	4606      	mov	r6, r0
 8008d20:	460c      	mov	r4, r1
 8008d22:	d507      	bpl.n	8008d34 <__smakebuf_r+0x1c>
 8008d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	6123      	str	r3, [r4, #16]
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	6163      	str	r3, [r4, #20]
 8008d30:	b002      	add	sp, #8
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	ab01      	add	r3, sp, #4
 8008d36:	466a      	mov	r2, sp
 8008d38:	f7ff ffc8 	bl	8008ccc <__swhatbuf_r>
 8008d3c:	9900      	ldr	r1, [sp, #0]
 8008d3e:	4605      	mov	r5, r0
 8008d40:	4630      	mov	r0, r6
 8008d42:	f7ff fa77 	bl	8008234 <_malloc_r>
 8008d46:	b948      	cbnz	r0, 8008d5c <__smakebuf_r+0x44>
 8008d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d4c:	059a      	lsls	r2, r3, #22
 8008d4e:	d4ef      	bmi.n	8008d30 <__smakebuf_r+0x18>
 8008d50:	f023 0303 	bic.w	r3, r3, #3
 8008d54:	f043 0302 	orr.w	r3, r3, #2
 8008d58:	81a3      	strh	r3, [r4, #12]
 8008d5a:	e7e3      	b.n	8008d24 <__smakebuf_r+0xc>
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	6020      	str	r0, [r4, #0]
 8008d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d64:	81a3      	strh	r3, [r4, #12]
 8008d66:	9b00      	ldr	r3, [sp, #0]
 8008d68:	6163      	str	r3, [r4, #20]
 8008d6a:	9b01      	ldr	r3, [sp, #4]
 8008d6c:	6120      	str	r0, [r4, #16]
 8008d6e:	b15b      	cbz	r3, 8008d88 <__smakebuf_r+0x70>
 8008d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d74:	4630      	mov	r0, r6
 8008d76:	f000 f81d 	bl	8008db4 <_isatty_r>
 8008d7a:	b128      	cbz	r0, 8008d88 <__smakebuf_r+0x70>
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	f023 0303 	bic.w	r3, r3, #3
 8008d82:	f043 0301 	orr.w	r3, r3, #1
 8008d86:	81a3      	strh	r3, [r4, #12]
 8008d88:	89a3      	ldrh	r3, [r4, #12]
 8008d8a:	431d      	orrs	r5, r3
 8008d8c:	81a5      	strh	r5, [r4, #12]
 8008d8e:	e7cf      	b.n	8008d30 <__smakebuf_r+0x18>

08008d90 <_fstat_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d07      	ldr	r5, [pc, #28]	; (8008db0 <_fstat_r+0x20>)
 8008d94:	2300      	movs	r3, #0
 8008d96:	4604      	mov	r4, r0
 8008d98:	4608      	mov	r0, r1
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	602b      	str	r3, [r5, #0]
 8008d9e:	f7f9 f9fc 	bl	800219a <_fstat>
 8008da2:	1c43      	adds	r3, r0, #1
 8008da4:	d102      	bne.n	8008dac <_fstat_r+0x1c>
 8008da6:	682b      	ldr	r3, [r5, #0]
 8008da8:	b103      	cbz	r3, 8008dac <_fstat_r+0x1c>
 8008daa:	6023      	str	r3, [r4, #0]
 8008dac:	bd38      	pop	{r3, r4, r5, pc}
 8008dae:	bf00      	nop
 8008db0:	20004a68 	.word	0x20004a68

08008db4 <_isatty_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4d06      	ldr	r5, [pc, #24]	; (8008dd0 <_isatty_r+0x1c>)
 8008db8:	2300      	movs	r3, #0
 8008dba:	4604      	mov	r4, r0
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	602b      	str	r3, [r5, #0]
 8008dc0:	f7f9 f9fb 	bl	80021ba <_isatty>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d102      	bne.n	8008dce <_isatty_r+0x1a>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	b103      	cbz	r3, 8008dce <_isatty_r+0x1a>
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	20004a68 	.word	0x20004a68

08008dd4 <_sbrk_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4d06      	ldr	r5, [pc, #24]	; (8008df0 <_sbrk_r+0x1c>)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	4604      	mov	r4, r0
 8008ddc:	4608      	mov	r0, r1
 8008dde:	602b      	str	r3, [r5, #0]
 8008de0:	f7f9 fa04 	bl	80021ec <_sbrk>
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	d102      	bne.n	8008dee <_sbrk_r+0x1a>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	b103      	cbz	r3, 8008dee <_sbrk_r+0x1a>
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	bd38      	pop	{r3, r4, r5, pc}
 8008df0:	20004a68 	.word	0x20004a68

08008df4 <__assert_func>:
 8008df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008df6:	4614      	mov	r4, r2
 8008df8:	461a      	mov	r2, r3
 8008dfa:	4b09      	ldr	r3, [pc, #36]	; (8008e20 <__assert_func+0x2c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4605      	mov	r5, r0
 8008e00:	68d8      	ldr	r0, [r3, #12]
 8008e02:	b14c      	cbz	r4, 8008e18 <__assert_func+0x24>
 8008e04:	4b07      	ldr	r3, [pc, #28]	; (8008e24 <__assert_func+0x30>)
 8008e06:	9100      	str	r1, [sp, #0]
 8008e08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e0c:	4906      	ldr	r1, [pc, #24]	; (8008e28 <__assert_func+0x34>)
 8008e0e:	462b      	mov	r3, r5
 8008e10:	f000 f844 	bl	8008e9c <fiprintf>
 8008e14:	f000 f854 	bl	8008ec0 <abort>
 8008e18:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <__assert_func+0x38>)
 8008e1a:	461c      	mov	r4, r3
 8008e1c:	e7f3      	b.n	8008e06 <__assert_func+0x12>
 8008e1e:	bf00      	nop
 8008e20:	20000120 	.word	0x20000120
 8008e24:	08009ab7 	.word	0x08009ab7
 8008e28:	08009ac4 	.word	0x08009ac4
 8008e2c:	08009af2 	.word	0x08009af2

08008e30 <_calloc_r>:
 8008e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e32:	fba1 2402 	umull	r2, r4, r1, r2
 8008e36:	b94c      	cbnz	r4, 8008e4c <_calloc_r+0x1c>
 8008e38:	4611      	mov	r1, r2
 8008e3a:	9201      	str	r2, [sp, #4]
 8008e3c:	f7ff f9fa 	bl	8008234 <_malloc_r>
 8008e40:	9a01      	ldr	r2, [sp, #4]
 8008e42:	4605      	mov	r5, r0
 8008e44:	b930      	cbnz	r0, 8008e54 <_calloc_r+0x24>
 8008e46:	4628      	mov	r0, r5
 8008e48:	b003      	add	sp, #12
 8008e4a:	bd30      	pop	{r4, r5, pc}
 8008e4c:	220c      	movs	r2, #12
 8008e4e:	6002      	str	r2, [r0, #0]
 8008e50:	2500      	movs	r5, #0
 8008e52:	e7f8      	b.n	8008e46 <_calloc_r+0x16>
 8008e54:	4621      	mov	r1, r4
 8008e56:	f7fe fa05 	bl	8007264 <memset>
 8008e5a:	e7f4      	b.n	8008e46 <_calloc_r+0x16>

08008e5c <__ascii_mbtowc>:
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	b901      	cbnz	r1, 8008e62 <__ascii_mbtowc+0x6>
 8008e60:	a901      	add	r1, sp, #4
 8008e62:	b142      	cbz	r2, 8008e76 <__ascii_mbtowc+0x1a>
 8008e64:	b14b      	cbz	r3, 8008e7a <__ascii_mbtowc+0x1e>
 8008e66:	7813      	ldrb	r3, [r2, #0]
 8008e68:	600b      	str	r3, [r1, #0]
 8008e6a:	7812      	ldrb	r2, [r2, #0]
 8008e6c:	1e10      	subs	r0, r2, #0
 8008e6e:	bf18      	it	ne
 8008e70:	2001      	movne	r0, #1
 8008e72:	b002      	add	sp, #8
 8008e74:	4770      	bx	lr
 8008e76:	4610      	mov	r0, r2
 8008e78:	e7fb      	b.n	8008e72 <__ascii_mbtowc+0x16>
 8008e7a:	f06f 0001 	mvn.w	r0, #1
 8008e7e:	e7f8      	b.n	8008e72 <__ascii_mbtowc+0x16>

08008e80 <__ascii_wctomb>:
 8008e80:	b149      	cbz	r1, 8008e96 <__ascii_wctomb+0x16>
 8008e82:	2aff      	cmp	r2, #255	; 0xff
 8008e84:	bf85      	ittet	hi
 8008e86:	238a      	movhi	r3, #138	; 0x8a
 8008e88:	6003      	strhi	r3, [r0, #0]
 8008e8a:	700a      	strbls	r2, [r1, #0]
 8008e8c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008e90:	bf98      	it	ls
 8008e92:	2001      	movls	r0, #1
 8008e94:	4770      	bx	lr
 8008e96:	4608      	mov	r0, r1
 8008e98:	4770      	bx	lr
	...

08008e9c <fiprintf>:
 8008e9c:	b40e      	push	{r1, r2, r3}
 8008e9e:	b503      	push	{r0, r1, lr}
 8008ea0:	4601      	mov	r1, r0
 8008ea2:	ab03      	add	r3, sp, #12
 8008ea4:	4805      	ldr	r0, [pc, #20]	; (8008ebc <fiprintf+0x20>)
 8008ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eaa:	6800      	ldr	r0, [r0, #0]
 8008eac:	9301      	str	r3, [sp, #4]
 8008eae:	f7ff fdf3 	bl	8008a98 <_vfiprintf_r>
 8008eb2:	b002      	add	sp, #8
 8008eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb8:	b003      	add	sp, #12
 8008eba:	4770      	bx	lr
 8008ebc:	20000120 	.word	0x20000120

08008ec0 <abort>:
 8008ec0:	b508      	push	{r3, lr}
 8008ec2:	2006      	movs	r0, #6
 8008ec4:	f000 f82c 	bl	8008f20 <raise>
 8008ec8:	2001      	movs	r0, #1
 8008eca:	f7f9 f933 	bl	8002134 <_exit>

08008ece <_raise_r>:
 8008ece:	291f      	cmp	r1, #31
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	460d      	mov	r5, r1
 8008ed6:	d904      	bls.n	8008ee2 <_raise_r+0x14>
 8008ed8:	2316      	movs	r3, #22
 8008eda:	6003      	str	r3, [r0, #0]
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ee0:	bd38      	pop	{r3, r4, r5, pc}
 8008ee2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008ee4:	b112      	cbz	r2, 8008eec <_raise_r+0x1e>
 8008ee6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008eea:	b94b      	cbnz	r3, 8008f00 <_raise_r+0x32>
 8008eec:	4620      	mov	r0, r4
 8008eee:	f000 f831 	bl	8008f54 <_getpid_r>
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	4601      	mov	r1, r0
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008efc:	f000 b818 	b.w	8008f30 <_kill_r>
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d00a      	beq.n	8008f1a <_raise_r+0x4c>
 8008f04:	1c59      	adds	r1, r3, #1
 8008f06:	d103      	bne.n	8008f10 <_raise_r+0x42>
 8008f08:	2316      	movs	r3, #22
 8008f0a:	6003      	str	r3, [r0, #0]
 8008f0c:	2001      	movs	r0, #1
 8008f0e:	e7e7      	b.n	8008ee0 <_raise_r+0x12>
 8008f10:	2400      	movs	r4, #0
 8008f12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f16:	4628      	mov	r0, r5
 8008f18:	4798      	blx	r3
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	e7e0      	b.n	8008ee0 <_raise_r+0x12>
	...

08008f20 <raise>:
 8008f20:	4b02      	ldr	r3, [pc, #8]	; (8008f2c <raise+0xc>)
 8008f22:	4601      	mov	r1, r0
 8008f24:	6818      	ldr	r0, [r3, #0]
 8008f26:	f7ff bfd2 	b.w	8008ece <_raise_r>
 8008f2a:	bf00      	nop
 8008f2c:	20000120 	.word	0x20000120

08008f30 <_kill_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4d07      	ldr	r5, [pc, #28]	; (8008f50 <_kill_r+0x20>)
 8008f34:	2300      	movs	r3, #0
 8008f36:	4604      	mov	r4, r0
 8008f38:	4608      	mov	r0, r1
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	602b      	str	r3, [r5, #0]
 8008f3e:	f7f9 f8e9 	bl	8002114 <_kill>
 8008f42:	1c43      	adds	r3, r0, #1
 8008f44:	d102      	bne.n	8008f4c <_kill_r+0x1c>
 8008f46:	682b      	ldr	r3, [r5, #0]
 8008f48:	b103      	cbz	r3, 8008f4c <_kill_r+0x1c>
 8008f4a:	6023      	str	r3, [r4, #0]
 8008f4c:	bd38      	pop	{r3, r4, r5, pc}
 8008f4e:	bf00      	nop
 8008f50:	20004a68 	.word	0x20004a68

08008f54 <_getpid_r>:
 8008f54:	f7f9 b8d6 	b.w	8002104 <_getpid>

08008f58 <_init>:
 8008f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5a:	bf00      	nop
 8008f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f5e:	bc08      	pop	{r3}
 8008f60:	469e      	mov	lr, r3
 8008f62:	4770      	bx	lr

08008f64 <_fini>:
 8008f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f66:	bf00      	nop
 8008f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6a:	bc08      	pop	{r3}
 8008f6c:	469e      	mov	lr, r3
 8008f6e:	4770      	bx	lr
